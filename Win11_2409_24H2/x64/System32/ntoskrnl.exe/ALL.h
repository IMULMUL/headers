enum _DEVICE_RELATION_TYPE;
enum _HALP_EMERGENCY_LA_QUEUE_TYPE;
enum _POOL_TYPE;
struct _MI_COLOR;
enum _MMLISTS;
struct _LIST_ENTRY;
struct _RTL_BALANCED_NODE;
struct _MI_ACTIVE_PFN;
struct _MIPFNFLINK;
struct _MMPTE_HARDWARE;
struct _MMPTE_PROTOTYPE;
struct _MMPTE_SOFTWARE;
struct _MMPTE_TIMESTAMP;
struct _MMPTE_TRANSITION;
struct _MMPTE_SUBSECTION;
struct _MMPTE_LIST;
struct _MMPTE_ACTIVE_PAGE_TABLE_LINKS;
struct _MMPTE;
struct _MIPFNBLINK;
struct _MMPFNENTRY1;
struct _MMPFNENTRY3;
struct _MI_PFN_FLAGS;
struct _MI_PFN_FLAGS5;
struct _MI_PFN_FLAGS4;
struct _MMPFN;
struct _MMPFNLIST;
struct _UNICODE_STRING;
struct _MM_DRIVER_VERIFIER_DATA;
enum _EX_POOL_PRIORITY;
enum _EVENT_TYPE;
struct _KGROUP_MASK;
union _TIMELINE_BITMAP;
enum _MEMORY_CACHING_TYPE;
struct _LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION;
enum _FILE_INFORMATION_CLASS;
struct _EVENT_FILTER_LEVEL_KW;
struct _RTL_AVL_TREE;
enum _DIRECTORY_NOTIFY_INFORMATION_CLASS;
struct _FAULT_INFORMATION_X64_FLAGS;
enum _FAULT_INFORMATION_ARM64_TYPE;
struct _FAULT_INFORMATION_X64;
struct _MMSUPPORT_FLAGS;
struct _MMSUPPORT_INSTANCE;
struct _MMSUPPORT_SHARED;
struct _MMSUPPORT_FULL;
enum _FSINFOCLASS;
struct PROCESSOR_IDLESTATE_INFO;
struct _BOOT_FIRMWARE_RAMDISK_INFO;
enum BUS_QUERY_ID_TYPE;
enum DEVICE_TEXT_TYPE;
enum _DEVICE_USAGE_NOTIFICATION_TYPE;
struct _LOADER_FEATURE_CONFIGURATION_INFORMATION;
enum _SYSTEM_POWER_STATE;
struct _LOADER_MEMORY_RANGE;
enum _POWER_STATE_TYPE;
struct _DBGKD_READ_MEMORY32;
enum POWER_ACTION;
union _CM_TRANS_PTR;
struct _CM_KEY_BODY;
union _LARGE_INTEGER;
enum _DEVICE_POWER_STATE;
struct _ARBITER_ORDERING_LIST;
struct _ARBITER_INSTANCE;
struct _GUID;
enum _DEVICE_WAKE_DEPTH;
enum _WHEA_ERROR_SOURCE_TYPE;
enum _WHEA_ERROR_SOURCE_STATE;
enum _WHEA_EVENT_LOG_ENTRY_TYPE;
enum _WHEA_EVENT_LOG_ENTRY_ID;
struct _SINGLE_LIST_ENTRY;
struct _ETW_BUFFER_QUEUE;
enum _WHEA_ERROR_TYPE;
struct _EX_PUSH_LOCK;
struct _HANDLE_TABLE_FREE_LIST;
enum _WHEA_ERROR_SEVERITY;
enum _MEM_DEDICATED_ATTRIBUTE_TYPE;
enum _TYPE_OF_MEMORY;
struct _OSLOADER_PAGE_TABLE_LOG;
enum _WHEA_ERROR_PACKET_DATA_FORMAT;
enum _MCA_AMD_BLOCK_TYPE;
enum LSA_FOREST_TRUST_RECORD_TYPE;
enum IORING_OP_CODE;
enum _NT_IORING_SQE_FLAGS;
enum _NT_IORING_OP_FLAGS;
union _NT_IORING_HANDLEREF;
struct IORING_REGISTERED_BUFFER;
union _NT_IORING_BUFFERREF;
struct _NT_IORING_OP_READ;
enum _NT_IORING_REG_FILES_REQ_FLAGS;
enum _NT_IORING_REG_FILES_ADV_FLAGS;
struct _NT_IORING_REG_FILES_FLAGS;
struct _NT_IORING_OP_REGISTER_FILES;
enum _NT_IORING_REG_BUFFERS_REQ_FLAGS;
enum _NT_IORING_REG_BUFFERS_ADV_FLAGS;
struct _NT_IORING_REG_BUFFERS_FLAGS;
struct _NT_IORING_OP_REGISTER_BUFFERS;
struct _NT_IORING_OP_CANCEL;
enum _NT_WRITE_FLAGS;
struct _NT_IORING_OP_WRITE;
struct _NT_IORING_OP_FLUSH;
struct _NT_IORING_OP_READ_SCATTER;
struct _NT_IORING_OP_WRITE_GATHER;
struct _NT_IORING_OP_RESERVED;
struct _NT_IORING_SQE;
enum _KINTERRUPT_POLARITY;
struct _WNF_STATE_NAME;
struct _WNF_TYPE_ID;
struct _WNF_DELIVERY_DESCRIPTOR;
enum _KINTERRUPT_MODE;
enum _INBV_PIXEL_FORMAT;
struct _INBV_GRAPHICS_RECTANGLE;
struct _RTL_RB_TREE;
struct _KSCB;
enum _REG_NOTIFY_CLASS;
enum _HALP_DMA_MAP_BUFFER_TYPE;
struct _DBGKD_GET_CONTEXT;
struct _MI_SYSTEM_NODE_AFFINITY_INFORMATION;
enum _KNOWN_CONTROLLER_TYPE;
struct _CLIENT_ID;
struct _HANDLE_TRACE_DB_ENTRY;
enum _INTERRUPT_PROBLEM;
enum _DUMP_EVENTS;
enum _IO_ALLOCATION_ACTION;
enum _MODE;
enum _KTRANSACTION_STATE;
struct _CM_KEY_REFERENCE;
union _SLIST_HEADER;
struct _RTL_LOOKASIDE;
struct _RTL_DYNAMIC_LOOKASIDE;
struct _EX_HEAP_POOL_NODE;
enum _MEMORY_CACHING_TYPE_ORIG;
enum _INTERLOCKED_RESULT;
enum _JOBOBJECT_IO_PRIORITY_LIMIT_FLAGS;
enum _WHEA_CPU_VENDOR;
struct _EFI_FIRMWARE_INFORMATION;
struct _PCAT_FIRMWARE_INFORMATION;
enum _HAL_INIT_PHASE;
struct _KREQUEST_PACKET;
struct _REQUEST_MAILBOX;
enum _PLUGPLAY_EVENT_CATEGORY;
struct _IOMMU_DEVICE_CREATION_CONFIGURATION_ACPI;
enum _NT_IORING_CREATE_REQUIRED_FLAGS;
enum _NT_IORING_CREATE_ADVISORY_FLAGS;
struct _NT_IORING_CREATE_FLAGS;
struct _EXT_IOMMU_FUNCTION_TABLE;
struct _EXT_IOMMU_FUNCTION_TABLE_EXTENDED;
struct _IOMMU_PAGE_HANDLING_DATA;
struct _RTL_BITMAP;
enum _EXT_IOMMU_KNOWN_IOMMU_TYPE;
struct _PCI_SLOT_NUMBER;
struct _REGISTERED_IOMMU;
enum _USER_ACTIVITY_PRESENCE;
struct _ARBITER_TEST_ALLOCATION_PARAMETERS;
struct _ARBITER_RETEST_ALLOCATION_PARAMETERS;
struct _ARBITER_BOOT_ALLOCATION_PARAMETERS;
struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;
struct _ARBITER_QUERY_CONFLICT_PARAMETERS;
struct _ARBITER_QUERY_ARBITRATE_PARAMETERS;
struct _ARBITER_ADD_RESERVED_PARAMETERS;
struct _ARBITER_PARAMETERS;
enum _INTERFACE_TYPE;
enum _EXCEPTION_DISPOSITION;
enum _SECURITY_IMPERSONATION_LEVEL;
enum _INTERRUPT_RESULT;
enum _DMA_WIDTH;
struct _EXCEPTION_RECORD32;
struct _DBGKM_EXCEPTION32;
enum _LDR_DDAG_STATE;
struct _FIRMWARE_INFORMATION_LOADER_BLOCK;
enum _HALP_DMA_TRANSLATION_TYPE;
enum _HALP_DMA_ADAPTER_ALLOCATION_STATE;
union _KLOCK_ENTRY_LOCK_STATE;
union _KLOCK_ENTRY_BOOST_BITMAP;
struct _KLOCK_ENTRY;
struct _KLOCK_ENTRIES;
enum _TAG_UNNAMED_1;
enum _HAL_DMA_CRASH_DUMP_REGISTER_TYPE;
struct _CMSI_RW_LOCK;
enum _CMP_DEVICE_NOTIFICATION_STATE;
struct _CMP_VOLUME_CONTEXT;
enum _IOMMU_DMA_DEVICE_CREATION_STATE;
struct _DISPATCHER_HEADER;
struct _KEVENT;
enum _KRESOURCEMANAGER_STATE;
struct _KMUTANT;
struct _RTL_BALANCED_LINKS;
struct _KTMOBJECT_NAMESPACE_LINK;
struct _KQUEUE;
struct _RTL_AVL_TABLE;
struct _KTMOBJECT_NAMESPACE;
struct _KRESOURCEMANAGER_COMPLETION_BINDING;
struct _KRESOURCEMANAGER;
enum _PO_EFFECTIVE_POWER_MODE;
struct _MI_ZERO_COST_COUNTS;
enum _PO_FX_PERF_STATE_UNIT;
union wil_details_ReportedState;
union wil_details_RecordedState;
struct wil_details_FeatureReportingCache;
enum DMA_COMPLETION_STATUS;
enum _DMA_INTERRUPT_TYPE;
enum _CONFIGURATION_CLASS;
enum _FAULT_INFORMATION_ARCH;
enum _INTERRUPT_TARGET_TYPE;
union _PS_CLIENT_SECURITY_CONTEXT;
enum _FS_FILTER_SECTION_SYNC_TYPE;
enum _HV_SUBNODE_TYPE;
struct _ETW_SYSTEM_LOGGER;
enum _HAL_HV_DMA_DOMAIN_CONFIG_ARCH;
struct _HAL_LOG_REGISTER_CONTEXT;
enum _EXT_IOMMU_ADDRESS_TRANSLATION_POLICY;
enum _EXT_IOMMU_INTERRUPT_REMAPPING_POLICY;
struct _EXT_IOMMU_RESERVED_MEMORY_REGION;
union FAST_ERESOURCE_LOCK_STATE;
enum _INTERRUPT_LINE_TYPE;
struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS;
enum _INTERRUPT_LINE_SUBTYPE;
struct _DBGKD_SET_SPECIAL_CALL64;
enum _BOOT_ENTROPY_SOURCE_ID;
enum _EXT_IOMMU_DOMAIN_TYPE;
struct _RTL_SPLAY_LINKS;
struct _EVENT_DESCRIPTOR;
struct _EVENT_HEADER;
enum _EXT_IOMMU_TRANSLATION_TYPE;
struct _JOB_ACCESS_STATE;
enum _IRQ_PRIORITY;
enum _DMA_COMMON_BUFFER_EXTENDED_CONFIGURATION_TYPE;
struct _ETW_REPLY_QUEUE;
enum _DMA_COMMON_BUFFER_EXTENDED_CONFIGURATION_ACCESS_TYPE;
struct _VI_POOL_PAGE_HEADER;
struct _VI_POOL_ENTRY_INUSE;
struct _VI_POOL_ENTRY;
enum _WHEA_RECOVERY_CONTEXT_ERROR_TYPE;
struct _MI_WORKING_SET_PAGE_TABLE_AGE_LINKS;
struct _MMWSL_INSTANCE;
enum _IOMMU_PASID_SETTING;
struct _MI_AWEINFO_FLAGS;
enum _IOMMU_ATS_SETTING;
enum _EXT_IOMMU_DEVICE_TYPE;
enum _IOMMU_DMA_DOMAIN_TYPE;
enum _IOMMU_DMA_LOGICAL_ALLOCATOR_TYPE;
struct _PCW_INSTANCE;
enum _IOMMU_DMA_LOGICAL_ALLOCATOR_CAPABILITY_EXPLICIT_ADDRESS;
enum _WHEA_RECOVERY_CONTEXT_ACTION_TAKEN;
enum _DMA_SPEED;
struct _ARM64_DBGKD_CONTROL_SET;
enum SE_WS_APPX_SIGNATURE_ORIGIN;
enum _PS_MITIGATION_OPTION;
enum _NT_PRODUCT_TYPE;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
union _CLS_LSN;
struct _WORK_QUEUE_ITEM;
struct _KDPC;
union _ULARGE_INTEGER;
struct _KTIMER;
enum _KTRANSACTION_OUTCOME;
struct _KTRANSACTION_HISTORY;
struct _KTRANSACTION;
enum _TP_CALLBACK_PRIORITY;
enum _PP_NPAGED_LOOKASIDE_NUMBER;
enum _EX_GEN_RANDOM_DOMAIN;
enum _SYSTEM_DLL_TYPE;
struct _PERFINFO_GROUPMASK;
enum _IO_PRIORITY_HINT;
enum _PF_FILE_ACCESS_TYPE;
enum wil_FeatureVariantPayloadKind;
struct _INVERTED_FUNCTION_TABLE_ENTRY;
enum wil_ReportingKind;
struct _DMA_ADAPTER_INFO_V1;
struct _DEVICE_DESCRIPTION;
struct _DMA_ADAPTER_INFO_CRASHDUMP;
union _DMA_ADAPTER_INFO;
enum EmptyCVariant_ExpiredFeature;
struct _CLIENT_ID32;
enum wil_VariantReportingKind;
struct _KFLOATING_SAVE;
enum _PNP_DEVNODE_STATE;
struct _PNP_DEVICE_COMPLETION_REQUEST;
enum wil_details_ServiceReportingKind;
struct _KAPC;
struct _ETIMER;
enum _RTL_FEATURE_USAGE_PROVIDER_CALLBACK_TYPE;
struct _DBGKD_GET_VERSION32;
struct _WNF_NODE_HEADER;
struct _EX_RUNDOWN_REF;
enum _WNF_DATA_SCOPE;
struct _WNF_LOCK;
struct _WNF_SCOPE_INSTANCE;
enum _RTL_ARM_FEATURE_USAGE_PROVIDER_FLUSH_NOTIFICATION_FLAGS;
struct _ETW_HASH_BUCKET;
union _PPM_POLICY_SETTINGS_MASK;
struct _CM_UOW_KEY_STATE_MODIFICATION;
enum wil_FeatureStore;
enum wil_FeatureEnabledState;
struct _KTIMER2_COLLECTION;
struct _CM_COMPONENT_HASH;
struct _CM_NAME_HASH;
struct _EXT_IOMMU_FLUSH_CONTEXT;
struct _tlgProvider_t;
enum POWER_POLICY_DEVICE_TYPE;
enum SYSTEM_POWER_CONDITION;
struct BATTERY_REPORTING_SCALE;
struct SYSTEM_POWER_CAPABILITIES;
enum _POP_POWER_ACTION_WATCHDOG_STATE;
struct _POP_POWER_ACTION;
enum wil_FeatureChangeTime;
union _IOMMU_INTERFACE_STATE_CHANGE_FIELDS;
struct _IOMMU_INTERFACE_STATE_CHANGE;
union _PPM_COORDINATED_SYNCHRONIZATION;
enum wil_UsageReportingMode;
struct _FAST_MUTEX;
enum _RTL_FEATURE_CONFIGURATION_TYPE;
enum _RTL_FEATURE_USAGE_PROVIDER_FLUSH_FLAGS;
struct _EXT_DELETE_PARAMETERS;
enum wil_details_FeatureTestStateKind;
enum EmptyCVariant_FeatureStaging_Poncherello;
struct _GDI_TEB_BATCH64;
enum FsRtlAllowReservedContext;
enum _EVENT_INFO_CLASS;
enum EmptyCVariant_FeatureStaging_MemoryManager;
enum EmptyCVariant_FeatureStaging_Boot;
struct _DMA_TRANSFER_INFO_V1;
struct _SEP_SID_VALUES_BLOCK;
enum _MI_SLAB_ALLOCATOR_TYPE;
struct tagSWITCH_CONTEXT_ATTRIBUTE;
struct tagSWITCH_CONTEXT_DATA;
struct tagSWITCH_CONTEXT;
enum _MI_PFN_CACHE_ATTRIBUTE;
enum _PCW_CALLBACK_TYPE;
enum _MI_SYSTEM_VA_TYPE;
enum _CMP_COPY_TYPE;
struct _KAB_UM_PROCESS_CONTEXT;
struct _RTL_BITMAP_EX;
struct _MI_NODE_FREE_PAGE_INFORMATION;
enum UoWActionType;
enum HSTORAGE_TYPE;
union _KEXECUTE_OPTIONS;
union _KSTACK_COUNT;
struct _KPROCESS;
struct _EX_FAST_REF;
struct _SE_AUDIT_PROCESS_CREATION_INFO;
struct _ALPC_PROCESS_CONTEXT;
struct _PS_PROTECTION;
union _PS_INTERLOCKED_TIMER_DELAY_VALUES;
struct _JOBOBJECT_WAKE_FILTER;
struct _PS_PROCESS_WAKE_INFORMATION;
struct _PS_DYNAMIC_ENFORCED_ADDRESS_RANGES;
struct _PSP_SYSCALL_PROVIDER_DISPATCH_CONTEXT;
union _PROCESS_EXECUTION_TRANSITION;
union _PROCESS_EXECUTION_STATE;
union _PROCESS_EXECUTION;
struct _EPROCESS;
struct _PSP_STORAGE;
enum _CMP_FAILURE_INJECTION_POINT;
union _WHEA_IN_USE_PAGE_NOTIFY_FLAGS;
union _WHEA_RECOVERY_CONTEXT_ACTION_TAKEN_ADDITIONAL_INFO;
struct _WHEA_RECOVERY_CONTEXT_PAGE_INFO;
struct _ETW_LAST_ENABLE_INFO;
enum PCW_REGISTRATION_FLAGS;
union _IOMMU_SVM_CAPABILITIES;
struct _GROUP_FAULT_REFERENCE;
struct _IOMMU_TRACKED_DEVICE;
struct _CURDIR;
struct _STRING;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _RTL_USER_PROCESS_PARAMETERS;
enum _KHETERO_CPU_POLICY;
union _KI_PROCESS_CONCURRENCY_COUNT;
enum PROFILE_STATUS;
struct _NB10;
struct _RSDS;
union _CVDD;
struct _KAFFINITY_EX;
enum EmptyCVariant_featurestaging_moments;
enum EmptyCVariant_FeatureStaging_servicing_releases;
struct _PPM_VETO_ACCOUNTING;
struct _PPM_PLATFORM_STATE;
struct _KAB_UM_PROCESS_TREE;
enum EmptyCVariant_FeatureStaging_ContinuousDelivery;
enum EmptyCVariant_FeatureStaging_KernelPnP;
struct _ETW_FILTER_STRING_TOKEN_ELEMENT;
struct _ETW_FILTER_STRING_TOKEN;
struct _KGATE;
struct _MI_EXTENT_DELETION_WAIT_BLOCK;
struct _DRIVER_PROXY_EXTENSION;
enum _ARBITER_REQUEST_SOURCE;
struct _CM_PATH_HASH;
struct _CM_KEY_HASH;
struct _CHILD_LIST;
struct _CM_INTENT_LOCK;
struct _CM_KEY_CONTROL_BLOCK;
enum _POWER_REQUEST_TYPE;
struct _RTL_ATOM_TABLE;
enum _POWER_REQUEST_TYPE_INTERNAL;
enum _PNP_DEVICE_ACTION_REQUEST;
struct _PERF_CONTROL_STATE_SELECTION;
enum _PEP_ACPI_RESOURCE_TYPE;
enum _GPIO_PIN_CONFIG_TYPE;
enum _KTBFLUSH_TYPE;
enum _GPIO_PIN_IORESTRICTION_TYPE;
struct _DMA_COMMON_BUFFER_VECTOR;
enum _PPM_DEEP_SLEEP_STATE;
enum _MI_KSTACK_TYPE;
enum _PPM_HETERO_POLICY;
enum _BOOT_ENTROPY_SOURCE_RESULT_CODE;
struct _BOOT_ENTROPY_SOURCE_LDR_RESULT;
struct _BOOT_ENTROPY_LDR_RESULT;
enum _SYSTEM_PROCESS_CLASSIFICATION;
enum _SERVERSILO_STATE;
struct _ARBITER_ALLOCATION_STATE;
enum EmptyCVariant_FeatureStaging_StorageAndFilesystems;
union _KSR_CAPABILITIES;
struct _VIRTUAL_EFI_RUNTIME_SERVICES;
struct DEBUG_MEMORY_REQUIREMENTS;
union _KSR_FLAGS;
struct _KSR_FIRMWARE_INFORMATION;
enum _KI_CALLBACK;
union _EXT_IOMMU_CREATE_DEVICE_FLAGS;
struct _MI_AVAILABLE_PAGE_WAIT_STATES;
enum EmptyCVariant_FeatureStaging_kernelcachemanager;
enum _WORKER_FUNCTION;
enum _EXQUEUEINDEX;
enum _CC_NUMA_TYPE;
struct _DIRTY_PAGE_STATISTICS;
struct _DIRTY_PAGE_THRESHOLDS;
struct _LOG_HANDLE_CONTEXT;
enum _RTLP_HP_MEMORY_TYPE;
enum _MI_ASSIGNED_REGION_TYPES;
struct _MI_DBG_PATCH;
struct _MI_DEBUGGER_STATE;
enum _PROCESSOR_PRESENCE;
struct _PROC_PERF_QOS_CLASS_POLICY;
struct _PROC_PERF_DOMAIN;
enum RTLP_CSPARSE_BITMAP_STATE;
enum _RTLP_HP_ADDRESS_SPACE_TYPE;
struct _OBP_SYSTEM_DOS_DEVICE_STATE;
struct _OBJECT_NAMESPACE_LOOKUPTABLE;
struct _OBP_SILODRIVERSTATE;
enum _INTERRUPT_STEERING_MODE;
enum _RTLP_HP_LOCK_TYPE;
enum _HEAP_LFH_LOCKMODE;
enum _PO_CS_DEVICE_NOTIFICATION_TYPE;
enum _HEAP_SEG_RANGE_TYPE;
enum _RTLP_HP_ALLOCATOR;
enum _MM_PAGE_ACCESS_TYPE;
enum _EXP_POOL_CONTEXT_TYPE;
enum _HEAP_FAILURE_TYPE;
enum _KPROCESS_STATE;
enum _BLOB_ID;
enum _KWAIT_REASON;
enum _POP_POWER_AGGREGATOR_DOZE_TIMER_TYPE;
enum EmptyCVariant_FeatureStaging_IoManager;
enum _IOP_DISPATCH_FUNCTION_TYPE;
struct _INBV_OFFSET;
enum _INVPCID_TYPE;
enum _LOCK_OPERATION;
enum _KISOLATION_WIDTH;
struct _CMSI_PROCESS_TUPLE;
enum _IOP_PRIORITY_HINT;
enum _TRANSFER_TYPE;
enum _PPM_PARK_NODE_CONTAINMENT_GROUP_TYPE;
enum _CREATE_FILE_TYPE;
struct _MI_BEST_LARGE_PAGE_CANDIDATES_CONTEXT;
enum _ETW_RT_EVENT_LOSS;
struct _SEP_CACHED_HANDLES_TABLE;
enum _KENLISTMENT_STATE;
struct _PPM_ENGINE_SETTINGS;
struct _ECP_LIST;
enum ETW_COMPRESSION_RESUMPTION_MODE;
enum _ETW_BUFFER_STATE;
enum IORING_VERSION;
struct _DMA_ADAPTER;
struct _HALP_DMA_TRANSLATION_BUFFER_POSITION;
struct _HALP_DMA_ADAPTER_OBJECT;
struct _HALP_DMA_MASTER_ADAPTER_OBJECT;
enum _KPROFILE_SOURCE;
enum _TOKEN_TYPE;
enum _WNF_STATE_NAME_LIFETIME;
struct _CHPEV2_PROCESS_INFO;
struct _MMVAD_FLAGS;
struct _MM_PRIVATE_VAD_FLAGS;
struct _MM_GRAPHICS_VAD_FLAGS;
struct _MM_SHARED_VAD_FLAGS;
struct _MI_NODE_NUMBER_ZERO_BASED;
struct _MI_SLAB_ALLOCATOR_CONTEXT;
struct _LUID;
struct _TOKEN_MANDATORY_POLICY;
struct _TOKEN_ACCESS_INFORMATION;
enum _WNF_SUBSCRIPTION_STATE;
enum _KCLOCK_TIMER_DEADLINE_TYPE;
struct _PEBS_DS_SAVE_AREA32;
struct _PEBS_DS_SAVE_AREA64;
struct _PEBS_DS_SAVE_AREA;
struct _PROCESSOR_PROFILE_CONTROL_AREA;
enum _MI_IO_PFN_TYPE;
union _XPF_MC_BANK_FLAGS;
enum _IO_RATE_CONTROL_TYPE;
struct _DBGKD_LOAD_SYMBOLS64;
enum _JOBOBJECTINFOCLASS;
enum _OBJECT_INFORMATION_CLASS;
enum _KE_WAKE_SOURCE_TYPE;
struct _CACHE_MANAGER_CALLBACK_FUNCTIONS;
enum PPM_IDLE_BUCKET_TIME_TYPE;
enum _PROCESS_SECTION_TYPE;
struct _WHEA_IPF_MCA_DESCRIPTOR;
enum _POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON;
enum FEATURE_CHANGE_TIME;
enum _EX_HEAP_TYPE;
enum _OB_OPEN_REASON;
enum _SECURITY_OPERATION_CODE;
enum _RTL_FEATURE_ENABLED_STATE_OPTIONS;
enum _POP_PEP_NOTIFY_DEVICE_DSTATE_REASON;
enum _POP_IRP_WATCHDOG_STATE;
enum _DEVPROP_OPERATOR;
enum _OBP_LOOKUP_DIR_ENTRY_FLAGS;
struct _DBGKD_GET_INTERNAL_BREAKPOINT64;
enum _MI_ENGINE_TYPE;
enum _KCLOCK_TIMER_ONE_SHOT_STATE;
enum _IOP_MC_BUFFER_ENTRY_FLAGS;
enum _KWAIT_BLOCK_STATE;
enum _VI_DEADLOCK_RESOURCE_TYPE;
struct _MMINPAGE_FLAGS;
enum _RTL_FEATURE_CONFIGURATION_PRIORITY;
struct _PO_DEVICE_NOTIFY;
enum _MI_ALTERNATE_LOCK_VA_TYPE;
enum _POP_SLEEP_CHECKPOINT;
enum _CM_HIVE_CACHE_EVENT_TYPE;
struct _PROC_PERF_LOAD;
union _WHEA_REVISION;
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
union _WHEA_TIMESTAMP;
union _WHEA_ERROR_RECORD_HEADER_FLAGS;
union _WHEA_PERSISTENCE_INFO;
struct _WHEA_ERROR_RECORD_HEADER;
enum PDC_CS_PHASE;
enum _MI_PAGELIST_LOCK_TYPES;
enum _ARBITER_RESULT;
enum MI_NEXT_PTE_ACTION;
union _WHEA_NOTIFICATION_FLAGS;
enum _MI_FILE_EXTENT_TYPES;
enum _PROCESS_TERMINATE_REQUEST_REASON;
struct _VF_AVL_TABLE;
enum _FREQUENCY_QOS_BUCKET;
enum _VRF_RULE_CLASS_ID;
struct _EVENT_PAYLOAD_PREDICATE;
enum _MI_PROCESSOR_ACTIVITY_TYPE;
enum _MI_MEMORY_EVENT_TYPES;
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
struct _DBGKD_QUERY_SPECIAL_CALLS;
enum PROFILE_DEPARTURE_STYLE;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
union _MI_PAGE_MOVE_PROGRESS_STATE;
enum _KOBJECTS;
enum _POP_SLEEP_CHECKPOINT_STATUS;
enum _PPM_RESTRICTION_STATE;
enum _CM_DIRTY_VECTOR_OPERATION;
struct _CM_DIRTY_VECTOR_LOG_ENTRY;
struct _CM_DIRTY_VECTOR_LOG;
enum _HEAP_LFH_SUBSEGMENT_LOCATION;
enum PDC_RESOURCE;
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
struct _PROC_PERF_CHECK_CYCLE_SNAP;
struct _HALP_ALLOC_CONTEXT;
enum TlgIn_t;
enum _BUGCHECK_RECOVERY_LOG_EVENT;
enum _VRF_TRIAGE_CONTEXT;
enum _POWER_INFORMATION_LEVEL_INTERNAL;
enum _PS_STD_HANDLE_STATE;
enum _HAL_PROCESSOR_STAT_TYPE;
enum _MI_MIRROR_BITMAP_TYPES;
struct _DEVPROPKEY;
enum _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE;
enum _PS_WAKE_REASON;
enum _MI_AVAILABLE_PAGE_WAIT_TYPES;
enum _RTL_MEMORY_TYPE;
enum wil_FeatureStage;
struct _SECURITY_DESCRIPTOR_RELATIVE;
struct _CM_KEY_SECURITY;
enum _LDR_DLL_LOAD_REASON;
union _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS;
struct _PROC_PERF_HISTORY_ENTRY;
enum _MI_IMAGE_VIEW_EXTENSION_TYPE;
enum _MI_BANDWIDTH_TYPES;
struct _ETW_BUFFER_CONTEXT;
enum _MI_INPAGE_SUPPORT_TYPES;
struct _SECONDARY_INTERRUPT_LINE_STATE;
enum _KHETERO_RUNNING_TYPE;
enum _HARDWARE_COUNTER_TYPE;
struct _DEVICE_DATA_SET_RANGE;
enum _PO_MODERN_SLEEP_ACTION;
struct _VI_FAULT_TRACE;
enum _KTHREAD_TAG;
enum _MI_ENCLAVE_TYPE;
enum _MI_PAGE_HASH_ERROR_BEHAVIOR;
struct _KENLISTMENT_HISTORY;
struct _KENLISTMENT;
enum _EVENT_TRACE_PROFILE_ADD_INFORMATION_VERSIONS;
enum _POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI;
enum _CM_HIVE_CACHE_OPLOCK_FILE_TYPE;
struct _IO_STATUS_BLOCK;
struct _KDEVICE_QUEUE_ENTRY;
struct _IRP;
struct _POP_PER_PROCESSOR_CONTEXT;
enum _FAN_NOISE_ZONES_;
struct _TOKEN_SOURCE;
enum _MI_PAGE_HEAT_LOCK_TYPE;
struct _SHARED_CACHE_MAP_LIST_CURSOR;
enum _KSOFTWARE_INTERRUPT_TARGET;
enum INTERRUPT_CONNECTION_TYPE;
union _EXT_IOMMU_CAPABILITIES;
struct _EXT_IOMMU;
struct _POP_POLICY_DEVICE;
enum HAL_APIC_DESTINATION_MODE;
enum _MI_WORKING_SET_TYPE;
enum _DEVICE_RELATION_LEVEL;
enum _KTIMER2_COLLECTION_INDEX;
enum _CM_SHARE_DISPOSITION;
struct _GIC_MSIFRAME_ENTRY;
enum _SKSERVICE;
enum _PS_PROTECTED_TYPE;
union _KSWAPPABLE_PAGE_REF_COUNT;
struct _MDL;
struct _KSWAPPABLE_PAGE;
enum _MI_AFFINITY_WALK_CANDIDATE_TYPE;
enum _BUS_DATA_TYPE;
struct _THERMAL_INFORMATION_EX;
struct _THERMAL_POLICY;
struct _KTIMER2;
struct _POP_RW_LOCK;
struct _POP_THERMAL_TELEMETRY_TRACKER;
struct _POP_THERMAL_ZONE;
enum KD_CALLBACK_ACTION;
enum _WORKING_SET_TYPE;
struct _PROC_IDLE_POLICY;
struct _MMPAGE_FILE_EXPANSION_FLAGS;
enum _HAL_CLOCK_TIMER_MODE;
enum _POP_FX_RELATION_TYPE;
struct _CM_KEY_NODE;
struct _CM_KEY_VALUE;
struct _CM_KEY_INDEX;
struct _CM_BIG_DATA;
union _u;
struct _I386_LOADER_BLOCK;
struct _ARM_LOADER_BLOCK;
struct _LOADER_PARAMETER_BLOCK;
enum _HAL_PMU_COUNTER_TYPE;
struct _MI_WRITE_CALIBRATION;
struct _PPM_IDLE_STATE;
enum _PROCESSOR_CACHE_TYPE;
enum _CC_LWS_PACKET_TYPE;
enum _PS_PROTECTED_SIGNER;
struct _DBGKD_BREAKPOINTEX;
struct _DEVICE_FLAGS;
enum _ETW_PERIODIC_TIMER_STATE;
enum _MI_CFG_BITMAP_TYPE;
enum _KTHREAD_PPM_POLICY;
enum _ACCEL_COMPRESSION_FORMAT;
struct _SMBIOS3_TABLE_HEADER;
enum _PROCESS_VA_TYPE;
enum _KTHREAD_STATE;
struct _ARC_DISK_INFORMATION;
enum _PS_RESOURCE_TYPE;
enum _RTL_SYSTEM_OVERRIDE_ENUM;
enum _MI_SHARED_USER_PAGE_TYPES;
struct _PPM_SELECTION_STATISTICS;
union _PPM_IDLE_SYNCHRONIZATION_STATE;
enum _HEAP_SEGMGR_LARGE_PAGE_POLICY;
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE;
enum _MI_DYNAMICBASE_BITMAP;
enum _MI_PAGE_MOVE_IN_PROGRESS_TYPES;
struct _IOMMU_DMA_DOMAIN;
enum _HEAP_LFH_METADATA_TYPE;
struct _POP_PPM_PROFILE;
enum _PPM_PERF_QOS_DISABLE_REASON;
struct _PPM_FFH_THROTTLE_STATE_INFO;
struct _MMDEREFERENCE_SEGMENT_HEADER;
enum _REFS_STREAM_SNAPSHOT_OPERATION;
enum _MI_STORE_VIRTUAL_PAGEFILE_VALUE;
enum _PPM_HETERO_CONTAINMENT_POLICY;
enum FEATURE_ENABLED_STATE;
enum IRPLOCK;
enum _KTHREAD_CORE_ISOLATION_REASON;
struct _MI_VAD_SEQUENTIAL_INFO;
enum _PNP_DEVICE_DELETE_TYPE;
struct _HALP_DMA_DOMAIN_OBJECT;
struct _PROFILE_PARAMETER_BLOCK;
enum _MI_MEMORY_HIGHLOW;
enum _KI_FORCE_PARK_DUTY_CYCLE_TRANSITION;
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
enum _PCI_BUSMASTER_RID_TYPE;
enum _JOBOBJECT_PAGE_PRIORITY_LIMIT_FLAGS;
enum _POP_FX_WORK_POOL_QUEUE;
enum _PPM_POLICY_SETTINGS;
enum _POP_SYSTEM_IDLE_EVENT_TYPE;
struct _EXT_IOMMU_DEVICE_ID_ACPI;
enum PS_CREATE_STATE;
enum MiAttributeChangeCases;
enum _KPROCESS_PPM_POLICY;
struct _PS_TRUSTLET_TKSESSION_ID;
enum _KI_FORCE_PARK_DUTY_CYCLE_STATE;
struct _DBGKD_CONTEXT_EX;
enum _MI_UNLINK_MOVE_IN_PROGRESS_ACTION;
struct _INTERRUPT_TARGET;
struct _PPM_SELECTION_MENU_ENTRY;
enum _TlgBlob_t;
enum _REQUESTER_TYPE;
struct _IOV_IRP_TRACE;
enum _POP_FX_DEVICE_REFERENCE_TAG;
struct _IOMMU_DMA_LOGICAL_ALLOCATOR;
enum _PO_HIBER_FORCE_DISABLE_REASON;
enum _WOW64_SHARED_INFORMATION;
struct _INTERRUPT_LINE;
struct _PERFINFO_PPM_STATE_SELECTION;
enum _ETW_GUID_TYPE;
union _PEP_ACPI_RESOURCE_FLAGS;
struct _PEP_ACPI_SPB_RESOURCE;
enum _POP_DEEP_SLEEP_DISENGAGE_REASON;
enum _KWAIT_STATE;
enum _MI_SUBVAD_LISTS;
enum _POLICY_AUDIT_EVENT_TYPE;
enum KD_NAMESPACE_ENUM;
enum _MI_VAD_64K_TYPES;
enum _RTL_SCP_CFG_PAGE_TYPE;
struct _GENERAL_LOOKASIDE_POOL;
enum _PNP_DEVICE_IOMMU_DOMAIN_POLICY;
struct _PROC_IDLE_STATE_BUCKET;
struct _PLATFORM_IDLE_STATE_ACCOUNTING;
struct _PLATFORM_IDLE_ACCOUNTING;
struct _KSEMAPHORE;
enum _ADD_DRIVER_STAGE;
enum _PO_HIBER_COMPRESS_METHOD;
enum TlgOut_t;
enum _PHYSICAL_MEMORY_HEAT_TYPE;
enum _TRACE_INFORMATION_CLASS;
struct _LDRP_CSLIST;
enum _MI_PARTITION_THREAD;
union _AER_ROOTPORT_DESCRIPTOR_FLAGS;
enum _KERNEL_SHADOW_STACK_TYPE;
enum _PERFINFO_MM_STAT;
enum _MI_WRITE_TYPES;
struct _LDRP_LOAD_CONTEXT;
enum _PNP_VETO_TYPE;
struct _WHEA_PCI_SLOT_NUMBER;
enum PDCCLIENTID;
enum _MI_MIRROR_BITMAP_STATE;
enum _SYSTEM_POOL_LIMIT_MEM_TYPE;
struct _OBJECT_DIRECTORY;
enum _PROC_HYPERVISOR_STATE;
struct _KIST_BASE_FRAME;
struct _KTRANSITION_STACK;
enum _KHETERO_CPU_QOS;
enum _THREAD_WORKLOAD_CLASS;
enum _SEP_CACHED_HANDLES_ENTRY_TYPE;
enum _POP_DEVICE_IDLE_TYPE;
enum _NT_IORING_SQ_FLAGS;
struct _LOCAL_X2APIC_NMISOURCE;
enum _MI_CROSS_PARTITION_CHARGE_TYPE;
enum _KTOPOLOGY_LEVEL;
enum _HV_EXT_EPF_MODE;
enum _MI_RVA_LIST_FILTER_TYPE;
enum _PO_S0_DISCONNECTED_REASON;
struct _VACB_ARRAY_HEADER;
enum _PNP_REBALANCE_REASON;
struct _PROCLOCALSAPIC;
enum _PNP_REBALANCE_FAILURE;
enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON;
struct _DMA_REQUEST_LINE_BINDING_DESCRIPTION;
enum _PNP_PROBLEM_CODE_LOG_OPERATION;
struct _WHEA_ERROR_SOURCE_CONFIGURATION_DD;
struct _WHEA_DEVICE_DRIVER_DESCRIPTOR;
enum _SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE;
struct _KTB_FLUSH_VA;
enum _PS_ATTRIBUTE_NUM;
struct _WAIT_CONTEXT_BLOCK;
struct _DMA_TRANSFER_CONTEXT_V1;
struct _DMA_TRANSFER_CONTEXT;
enum _MI_VAD_ALLOCATION_CELL_TYPE;
struct _KFORCE_PARK_DUTY_CYCLE_DATA;
enum _ConnectionResourceConsumerDesc;
struct _XPF_RECOVERY_INFO;
enum _SYSTEM_INFORMATION_CLASS;
enum MM_BOOT_MARK;
struct _MCI_STATUS_AMD_BITS;
enum _IOMMU_MAP_PHYSICAL_ADDRESS_TYPE;
struct _GIC_REDISTRIBUTOR;
enum _KERNEL_STACK_LIMITS;
enum ReplacesCorHdrNumericDefines;
enum PDC_ACTIVITY_TYPE;
enum SLEEPSTUDY_SPM_SCENARIO_CS_EXIT;
enum _KCONTINUE_TYPE;
struct _KAPC_STATE;
struct _MI_STORE_INPAGE_COMPLETE_FLAGS;
struct _MI_HARD_FAULT_STATE;
enum _POP_IO_STATUS;
enum KTM_STATE;
struct _PROCLOCALGIC;
enum _LDR_HOT_PATCH_STATE;
struct _IOSAPIC;
struct _PRIVATE_CACHE_MAP_FLAGS;
enum _RTL_GENERIC_COMPARE_RESULTS;
struct _PLATFORM_INTERRUPT;
enum _POP_FX_ACCOUNTING_MODE;
struct _KCLOCK_INCREMENT_TRACE;
enum _DOMAIN_CONFIGURATION_ARCH;
enum _FUNCTION_TABLE_TYPE;
struct _MMVAD_SHORT;
enum _MI_PRE_PHASE0_BUGCHECK_PARAMETER;
struct _INTERRUPT_FUNCTION_TABLE;
struct _DOMAIN_CONFIGURATION_ARM64;
struct _DOMAIN_CONFIGURATION_X64;
struct _DOMAIN_CONFIGURATION;
enum _POWER_LIMIT_TYPES;
struct _X86_DBGKD_CONTROL_SET;
struct _IA64_DBGKD_CONTROL_SET;
struct _AMD64_DBGKD_CONTROL_SET;
struct _ARM_DBGKD_CONTROL_SET;
struct _ARMCE_DBGKD_CONTROL_SET;
struct _PPC_DBGKD_CONTROL_SET;
struct _DBGKD_ANY_CONTROL_SET;
enum _IOMMU_DEVICE_CREATION_CONFIGURATION_TYPE;
enum _ARBITER_ACTION;
enum _MACHINE_CHECK_NESTING_LEVEL;
struct _M128A;
struct _KTRAP_FRAME;
enum _PNP_WATCHDOG_TYPE;
struct _OWNER_ENTRY;
struct _ERESOURCE;
struct _KTM;
struct _DMA_IOMMU_INTERFACE_V2;
struct _KWAIT_BLOCK;
enum _IOMMU_PASID_CONFIGURATION_TYPE;
enum _PEP_WORK_TYPE;
enum _CONFIGURATION_TYPE;
enum _ETW_NOTIFICATION_TYPE;
struct _KWAIT_CHAIN;
struct _FAST_OWNER_ENTRY_INTERNAL;
struct _FAST_ERESOURCE_INTERNAL;
enum _PO_FX_PERF_STATE_TYPE;
struct _PROCESSOR_NUMBER;
struct LIST_ENTRY64;
struct _SYNCH_COUNTERS;
struct LIST_ENTRY32;
struct _STRING64;
struct _PEB64;
struct _INTERRUPT_LINE_STATE;
struct _UNEXPECTED_INTERRUPT;
struct _CM_KCB_UOW;
struct _RTL_QUERY_REGISTRY_TABLE;
struct _GDI_TEB_BATCH32;
union _IOMMU_ATS_SETTINGS;
struct _LDR_DATA_TABLE_ENTRY;
struct _PCW_REGISTRATION_INFORMATION;
struct _GROUP_AFFINITY64;
struct _PCI_BUSMASTER_DESCRIPTOR;
union _POP_FX_PERF_FLAGS;
union __m128;
union _KRANK_LIST;
struct _VF_WATCHDOG_IRP;
struct _EXT_SET_PARAMETERS_V0;
struct _PS_NTDLL_EXPORTS;
struct _flags;
struct _KDESCRIPTOR;
struct _KSPECIAL_REGISTERS;
struct _XSAVE_FORMAT;
struct _CONTEXT;
struct _KPROCESSOR_STATE;
struct _MCI_STATUS_INTEL_BITS;
struct _GENERAL_LOOKASIDE;
union _KPRCB_BPB_FEATURES;
struct _MCI_STATUS_BITS_COMMON;
struct _MEMORY_CACHING_REQUIREMENTS;
union _RTL_TICK_LOCK;
struct _WHEA_AMD_EXTENDED_REGISTERS;
union _MCG_STATUS;
struct _KI_IDEAL_PROCESSOR_SET_BREAKPOINTS;
struct _KI_IDEAL_PROCESSOR_ASSIGNMENT_BLOCK;
struct _PROCLOCALAPIC;
struct _TRIAGE_9F_DIRECTED_TRANSITION;
struct _SYSPTES_HEADER;
union _KWAIT_STATUS_REGISTER;
union _KERNEL_SHADOW_STACK_LIMIT;
struct _KTHREAD;
struct _KSCHEDULING_GROUP_POLICY;
struct _KSCHEDULING_GROUP;
struct _DESCRIPTION_HEADER;
struct _GEN_ADDR;
struct _FADT;
struct _PHYSICAL_MEMORY_RANGE;
struct _LOCAL_NMISOURCE;
union _KI_AVAILABLE_CPUS_WORK_STATE;
struct _ETW_APC_POOL;
struct _ETW_STACK_TRACE_BLOCK;
struct _DBGKD_WRITE_MEMORY64;
struct _KI_AVAILABLE_CPUS_WORK_ITEM;
struct _KPROCESS_AVAILABLE_CPU_STATE;
struct _WHEAP_ERROR_SOURCE_TABLE;
struct _PHYSICAL_MEMORY_RUN;
struct _HEAP_ENTRY_EXTRA;
struct _PS_PROPERTY_SET;
struct _GROUP_AFFINITY;
union _RTL_THREAD_RNG_STATE;
struct _ETHREAD;
struct _XSTATE_FEATURE;
union _IOMMU_DEVICE_PROPERTIES;
struct _HEAP_UNPACKED_ENTRY;
struct _HEAP_EXTENDED_ENTRY;
struct _HEAP_ENTRY;
struct _HEAP_VIRTUAL_ALLOC_ENTRY;
struct _WNF_STATE_NAME_STRUCT;
struct _WDT_HANDLE;
struct _NT_IORING_INFO;
struct _XSDT;
struct _NT_IORING_SUBMISSION_QUEUE;
union _MI_IMAGE_INFO_REF;
struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION;
struct _IOMMU_DEVICE_CREATION_CONFIGURATION_PASID;
struct _IOMMU_DEVICE_CREATION_CONFIGURATION;
union _FILE_SEGMENT_ELEMENT;
struct IORING_BUFFER_INFO;
struct _MI_PARTITION_FLAGS;
struct _MI_PARTITION_CORE;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _TOKEN_CONTROL;
struct _SECURITY_CLIENT_CONTEXT;
struct _ALPC_PORT_ATTRIBUTES;
struct _ALPC_PORT;
union _KALPC_DIRECT_EVENT;
struct _ALPC_WORK_ON_BEHALF_TICKET;
struct _KALPC_WORK_ON_BEHALF_DATA;
struct _KALPC_MESSAGE_ATTRIBUTES;
struct _COUNTER_READING;
struct _KTHREAD_COUNTERS;
struct _THREAD_PERFORMANCE_DATA;
struct _KALPC_RESERVE;
struct _NT_IORING_CQE;
struct _KDEVICE_QUEUE;
struct _DEVICE_OBJECT;
struct _XSTATE_CONTEXT;
struct _XSTATE_SAVE;
union _RTL_HP_LFH_CONFIG;
struct _IOP_MC_BE_PAGE_NODE;
struct _NT_IORING_COMPLETION_QUEUE;
struct _XSAVE_AREA_HEADER;
struct _XSAVE_AREA;
struct _MMSECTION_FLAGS;
struct wil_FeatureState;
struct _PNP_PROBLEM_CODE_LOG_ENTRY;
struct _DEVICE_OBJECT_LIST_ENTRY;
struct _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS;
struct wil_details_FeatureDescriptor;
struct _MI_IMAGE_ADDITIONAL_FLAGS;
struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY;
union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;
struct _PS_TRUSTLET_ATTRIBUTE_TYPE;
struct _PS_TRUSTLET_ATTRIBUTE_HEADER;
struct _PS_TRUSTLET_ATTRIBUTE_DATA;
struct _TRUSTLET_COLLABORATION_ID;
struct _PALPC_PORT_REFERENCE_WAIT_BLOCK;
struct _IO_REMOVE_LOCK_COMMON_BLOCK;
struct _IO_REMOVE_LOCK;
union _KPRCBFLAG;
union _KPRCB_BPB_STATE;
union _KPRCB_BPB_RETPOLINE_STATE;
struct _KSPIN_LOCK_QUEUE;
struct _PP_LOOKASIDE_LIST;
struct _KSTATIC_AFFINITY_BLOCK;
struct _KSOFTWARE_INTERRUPT_BATCH;
struct _KDPC_LIST;
struct _KDPC_DATA;
struct _KE_PRCB_RCU_DATA;
struct _KTIMER_TABLE_ENTRY;
struct _KTIMER_TABLE_STATE;
struct _KTIMER_TABLE;
struct _KMCE_RECOVERY_CONTEXT;
struct _PROC_FEEDBACK;
struct _PROC_IDLE_SNAP;
struct _PROC_PERF_CHECK_CONTEXT;
struct _PROCESSOR_POWER_STATE;
struct _CACHE_DESCRIPTOR;
struct _FILESYSTEM_DISK_COUNTERS;
struct _KENTROPY_TIMING_STATE;
struct _SYMCRYPT_ENTROPY_ACCUMULATOR_STATE;
struct _IOP_IRP_STACK_PROFILER;
struct _KSECURE_FAULT_INFORMATION;
struct _KTIMER_EXPIRATION_TRACE;
struct _KCLOCK_TIMER_DEADLINE_ENTRY;
struct _KCLOCK_TICK_TRACE;
struct _KCLOCK_TIMER_STATE;
struct _MACHINE_FRAME;
struct _MACHINE_CHECK_CONTEXT;
struct _KLOCK_QUEUE_HANDLE;
struct _KCORE_CONTROL_BLOCK;
union _KCCB_SHADOW_PROCESSOR_STATE;
struct _KCORE_CONTROL_BLOCK_SHADOW;
struct _KPRCB;
struct _MI_ALIGNED_SLIST;
struct _IO_COMPLETION_CONTEXT;
union _KPRIORITY_STATE;
struct _KPRCB_TRACEPOINT_LOG_ENTRY;
struct _KPRCB_TRACEPOINT_LOG;
union _MI_RESERVATION_CLUSTER_INFO;
struct _POWER_SEQUENCE;
struct _VF_TRACKER_STAMP;
struct _IO_RESOURCE_DESCRIPTOR;
struct _IO_RESOURCE_LIST;
struct _MI_LARGE_PAGE_COALESCE_WORKER_CONTEXT;
struct _KERNEL_STACK_SEGMENT;
struct _KSTACK_CONTROL;
struct _PEP_WORK_ACTIVE_COMPLETE;
struct _PEP_WORK_IDLE_STATE;
struct _PEP_WORK_DEVICE_POWER;
struct _PEP_WORK_POWER_CONTROL;
struct _PEP_WORK_DEVICE_IDLE;
struct _PEP_WORK_COMPLETE_IDLE_STATE;
struct _PEP_WORK_COMPLETE_PERF_STATE;
struct _PEP_WORK_ACPI_NOTIFY;
struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE;
struct _PEP_WORK_INFORMATION;
union _KQOS_GROUPING_SETS;
struct _KSCHEDULER_SUBNODE;
struct _KNODE_SUBNODE_SEARCH_RANKS;
struct _KNODE;
struct _ENODE;
struct _IOMMU_INTERFACE_CALLBACK_RECORD;
struct _IOP_FILE_OBJECT_EXTENSION;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
struct _KHETERO_PROCESSOR_SET;
struct _RTL_HASH_TABLE_ITERATOR;
struct _ACL;
struct _MI_CROSS_PARTITION_CHARGES;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR;
struct _SEP_CACHED_HANDLES_ENTRY;
union __m64;
struct _KSYSTEM_TIME;
struct _XSTATE_CONFIGURATION;
struct _KUSER_SHARED_DATA;
struct _SEP_LUID_TO_INDEX_MAP_ENTRY;
struct _PROCLOCALX2APIC;
struct _FAST_IO_DISPATCH;
struct _OBJECT_HEADER_QUOTA_INFO;
union _MCI_STATUS;
union _MCG_CAP;
struct _WHEA_XPF_MCA_SECTION;
struct _HEAP_PSEUDO_TAG_ENTRY;
struct _MI_PAGE_CHAIN_HEAD;
union _POWER_STATE;
struct _POP_IRP_DATA;
struct _MI_REBUILD_LARGE_PAGE_TIMER;
struct _POP_FX_PROVIDER;
struct _MI_RESUME_WORKITEM;
struct _MI_SHUTDOWN_STATE;
struct _SEP_LOWBOX_NUMBER_MAPPING;
struct _SESSION_LOWBOX_MAP;
struct _HEAP_LIST_LOOKUP;
struct _LOOKASIDE_LIST_EX;
struct _STATIC_NUMA_CONFIG;
struct _PPM_PERF_SNAPSHOT;
struct _PROC_PERF_CONSTRAINT;
struct _POP_FX_WORK_POOL_ITEM;
struct _POP_FX_WORK_POOL;
struct _POP_FX_PLUGIN;
struct _POP_SHUTDOWN_BUG_CHECK;
struct _CC_FLUSH_PACKET;
struct _MI_ULTRA_MDL_NODE;
struct _KI_RESCHEDULE_CONTEXT_ENTRY;
struct _KI_RESCHEDULE_CONTEXT;
struct _MI_PARTITION_WORKING_SET;
struct _MI_PAGEFILE_TRACES;
struct _MI_VISIBLE_PARTITION;
union _KHETERO_STATE;
struct _KSHARED_READY_QUEUE_HETERO_STATISTICS;
struct _KSHARED_READY_QUEUE_AFFINITY_STATISTICS;
struct _KSHARED_READY_QUEUE;
struct _PO_POWER_PLANE_PROFILE;
union _AER_BRIDGE_DESCRIPTOR_FLAGS;
struct _WHEA_AER_BRIDGE_DESCRIPTOR;
struct _IOAPIC;
struct _HALP_EMERGENCY_LA_QUEUE_ENTRY;
struct _LUID_AND_ATTRIBUTES;
struct _DEVICE_RELATIONS;
struct _KHETERO_HWFEEDBACK_CLASS;
struct _KCPU_PARTITION;
struct _HEAP_VAMGR_RANGE;
struct _PS_CPU_PARTITION;
struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY;
struct _PLUGPLAY_EVENT_BLOCK;
struct _PNP_DEVICE_EVENT_ENTRY;
struct _RTL_HASH_TABLE;
struct RTL_HP_ENV_HANDLE;
struct _RTLP_HEAP_COMMIT_LIMIT_DATA;
union _RTL_RUN_ONCE;
struct _RTL_HP_SEG_ALLOC_POLICY;
struct _HEAP_RUNTIME_MEMORY_STATS;
struct _RTL_HP_HEAP_VA_CALLBACKS_ENCODED;
struct _HEAP_SEG_CONTEXT;
struct _HEAP_VS_DELAY_FREE_CONTEXT;
struct _HEAP_SUBALLOCATOR_CALLBACKS;
struct _RTL_HP_VS_CONFIG;
struct _HEAP_VS_CONTEXT;
struct _HEAP_LFH_CONFIG;
struct _HEAP_LFH_HEAT_MAP;
struct _HEAP_LFH_SLOT_MAP;
struct _HEAP_LFH_CONTEXT;
struct _SEGMENT_HEAP;
struct _KSINGLE_DPC_SOFT_TIMEOUT_EVENT_INFO;
struct _RTLP_HP_METADATA_HEAP_CTX;
union _PNP_REBALANCE_FLAGS;
struct _IOMMU_MAP_PHYSICAL_ADDRESS;
struct _MI_KSTACK_ALLOCATIONS;
struct _HEAP_VAMGR_ALLOCATOR;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_OPTIONAL_HEADER64;
struct _IMAGE_NT_HEADERS64;
struct _ETW_SYSTEMTIME;
struct _PS_IO_CONTROL_ENTRY;
struct _MI_STANDBY_LOOKASIDE;
struct _PROCESSOR_CYCLES_WORKLOAD_CLASS;
struct _PO_IRP_QUEUE;
struct _PO_IRP_MANAGER;
struct _PO_DIRECTED_DRIPS_STATE;
struct _DEVICE_NODE;
struct _MI_SEGMENT_SIGNATURE_FLAGS;
struct _HEAP_LFH_PTRREF_LIST;
struct _HEAP_LFH_SUBSEGMENT_OWNER;
struct _HEAP_LFH_BUCKET;
struct POWER_ACTION_POLICY;
struct _PROC_PERF_CHECK_SNAP;
struct _PROC_PERF_CHECK;
struct _LOCK_TRACKER;
struct _DMA_OPERATIONS;
struct _RTL_SRWLOCK;
struct _PPM_CONCURRENCY_ACCOUNTING;
struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT;
struct _PROCESSOR_IDLE_CONSTRAINTS;
struct _PPM_SELECTION_MENU;
struct _PPM_COORDINATED_SELECTION;
struct _PPM_IDLE_STATES;
struct _MI_REVERSE_MAP_VIEW_ATTRIBUTES;
struct _MI_REVERSE_VIEW_MAP;
struct _SUPPORTED_RANGE;
struct _SUPPORTED_RANGES;
struct _MI_PARTITION_STORES;
struct _SCATTER_GATHER_ELEMENT;
struct _SCATTER_GATHER_LIST;
struct _ADAPTER_OBJECT;
struct _IO_SECURITY_CONTEXT;
struct _EXT_IOMMU_DEVICE_ID_TEST;
struct _FAULT_INFORMATION_ARM64_FLAGS;
struct _FAULT_INFORMATION_ARM64;
struct _FAULT_INFORMATION;
struct _IOMMU_BUS_INTERFACE;
struct _IOMMU_DMA_DEVICE;
struct _HEAP_LFH_FAST_REF;
struct _HEAP_LFH_AFFINITY_SLOT;
struct _WHEA_RECOVERY_CONTEXT;
struct _HEAP_DESCRIPTOR_KEY;
struct _HEAP_PAGE_RANGE_DESCRIPTOR;
union _HEAP_PAGE_SEGMENT;
union _HEAP_VS_CHUNK_HEADER_SIZE;
struct _HEAP_VS_CHUNK_HEADER;
struct _PPM_VETO_ENTRY;
struct _REGISTERED_INTERRUPT_CONTROLLER;
struct _PPM_SELECTION_DEPENDENCY;
struct _MMEXTEND_INFO;
struct _HEAP_VS_UNUSED_BYTES_INFO;
struct _HEAP_FREE_ENTRY_EXTRA;
struct _STACK_TABLE;
struct _PROC_IDLE_STATE_ACCOUNTING;
struct _PROC_FEEDBACK_COUNTER;
struct _VF_ADDRESS_RANGE;
struct _EXP_POOL_CONTEXT_HEADER;
struct _EXP_POOL_CONTEXT;
struct _POP_FX_WORK_ORDER;
struct _SECONDARY_INTERRUPT_PROVIDER_INTERFACE;
struct __WIL__WNF_TYPE_ID;
struct _PROC_IDLE_ACCOUNTING;
struct _POP_FX_ACTIVE_TIME_ACCOUNTING;
union RTLP_HP_LFH_PERF_FLAGS;
struct POHANDLE__;
struct _POOL_TRACKER_TABLE;
struct _SK_CRASH_MODULE;
struct _SK_CRASH_STACK_FRAME;
struct _SK_CRASH_MINIDUMP;
struct _OBJECT_REF_TRACE;
struct _INTERRUPT_REMAPPING_INFO;
struct _INTERRUPT_HT_INTR_INFO;
struct _INTERRUPT_VECTOR_DATA;
struct _SEP_TOKEN_PRIVILEGES;
struct _TOKEN_AUDIT_POLICY;
struct _SEP_AUDIT_POLICY;
struct _SID_AND_ATTRIBUTES_HASH;
struct _TOKEN;
struct _MI_FILLED_COMMON_PAGE_STATE;
union _AER_ENDPOINT_DESCRIPTOR_FLAGS;
struct _MI_IO_CACHE_STATS;
struct _IO_DRIVER_CREATE_CONTEXT;
struct _OPEN_PACKET;
struct _DEVICE_OBJECT_POWER_EXTENSION;
struct _HALP_DMA_CHANNEL;
struct _TRIAGE_POP_FX_DEVICE;
struct _GIC_ITS;
struct _KPRIQUEUE;
struct _DMA_FUNCTION_TABLE;
struct _HALP_DMA_CONTROLLER;
struct _MI_SLAB_TYPE_IDENTIFIER;
struct _PNP_DEVICE_EVENT_LIST;
struct _PO_NOTIFY_ORDER_LEVEL;
union _WHEA_EVENT_LOG_ENTRY_FLAGS;
struct _SYSTEM_POWER_STATE_CONTEXT;
struct _POP_CURRENT_BROADCAST;
struct _WHEA_NOTIFICATION_DESCRIPTOR;
struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2;
struct _VF_TARGET_VERIFIED_DRIVER_DATA;
struct _PS_MITIGATION_OPTIONS_MAP;
struct _PROC_PERF_HISTORY;
struct SYSTEM_POWER_LEVEL;
struct _SYSTEM_POWER_POLICY;
union _POP_FX_DEVICE_STATUS;
struct _POP_FX_DRIVER_CALLBACKS;
struct _POP_FX_ACCOUNTING;
struct _POP_FX_DRIPS_WATCHDOG_CONTEXT;
struct _POP_FX_WORK_ORDER_WATCHDOG_INFO;
struct _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE;
struct _POP_FX_DEVICE;
struct _VF_KE_CRITICAL_REGION_TRACE;
struct _IORING_OBJECT;
struct _EXT_IOMMU_OUTPUT_MAPPING;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SID;
struct _FILE_GET_QUOTA_INFORMATION;
struct _EXT_ENV_SPINLOCK;
struct _PS_TRUSTLET_CREATE_ATTRIBUTES;
struct _IOP_MC_BUFFER_ENTRY;
struct _EXT_IOMMU_S1_X64_DOMAIN_SETTINGS;
struct _EXT_IOMMU_DOMAIN_SETTINGS;
struct _DRIVER_OBJECT;
struct _FACS;
struct _IO_IRP_EXT_TRACK_OFFSET_HEADER;
struct _DRIVER_EXTENSION;
struct _RTL_FEATURE_CONFIGURATION;
struct _IO_CLIENT_EXTENSION;
struct _EXT_IOMMU_DEVICE;
struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR;
struct _FS_FILTER_CALLBACKS;
union _FS_FILTER_PARAMETERS;
struct _FS_FILTER_CALLBACK_DATA;
struct _FILE_OBJECT;
struct _MI_IO_PAGE_STATE_CELL;
struct _VPB;
struct _EVENT_RECORD;
struct _RTL_CHASH_ENTRY;
struct _SECTION_OBJECT_POINTERS;
struct _MI_COMBINE_PAGE_LISTHEAD;
struct _PCW_MASK_INFORMATION;
struct _ETW_LOGGER_HANDLE;
struct _FS_FILTER_SECTION_SYNC_OUTPUT;
struct _FILE_STANDARD_INFORMATION;
struct _HANDLE_REVOCATION_INFO;
struct _INITIAL_PRIVILEGE_SET;
struct _FILE_BASIC_INFORMATION;
struct _LOADER_HIVE_RECOVERY_INFO;
struct _OBJECT_REF_STACK_INFO;
struct _VI_VERIFIER_ISSUE;
struct _MI_HUGE_PFN_COLORHEAD;
struct _CACHED_KSTACK_LIST;
struct _MI_LARGE_PAGE_NODE_COALESCE_STATE;
struct _MI_NODE_INFORMATION;
struct _MI_CACHED_PTE;
struct __WIL__WNF_STATE_NAME;
struct _INBV_MODE_INFORMATION;
struct _RTL_CSPARSE_BITMAP;
struct _RTLP_HP_ALLOC_TRACKER;
struct _RTL_SPARSE_ARRAY;
struct _HEAP_VAMGR_VASPACE;
struct _HEAP_VAMGR_CTX;
struct _RTL_HP_SUB_ALLOCATOR_CONFIGS;
struct _RTLP_HP_HEAP_MANAGER;
struct _EX_POOL_HEAP_MANAGER_STATE;
struct _BLOCK_IO_LAYER_INFORMATION;
struct _CIMFS_LAYER_INFORMATION;
struct _BOOT_OSL_RAMDISK_ENTRY;
struct _BOOT_OSL_RAMDISK_INFO;
struct _IOP_IRP_EXTENSION_STATUS;
struct _PNP_DEVICE_COMPLETION_QUEUE;
struct _DBGKD_READ_WRITE_IO_EXTENDED32;
struct _MMPAGE_FILE_EXPANSION;
struct _MMMOD_WRITER_LISTHEAD;
struct _MI_MODWRITE_DATA;
struct _MI_RESTRICTED_MODWRITES;
struct _MI_PARTITION_MODWRITES;
struct _MI_DEFERRED_PFNS_TO_FREE;
struct _MI_PARTITION_SEGMENTS;
struct _MI_DECAY_TIMER_LINKAGE;
struct _MI_DECAY_TIMER_LINK;
struct _MI_LDW_WORK_CONTEXT;
struct _MI_PARTITION_PAGE_LISTS;
struct _MI_PARTITION_COMMIT;
struct _MI_PARTITION_ZEROING;
struct _MI_COMBINE_WORKITEM;
struct _MI_PAGE_COMBINE_STATISTICS;
struct _MI_PAGE_COMBINING_SUPPORT;
struct _MI_ACCESS_LOG_STATE;
struct _MMWORKING_SET_EXPANSION_HEAD;
struct _MI_SPECIAL_PURPOSE_MEMORY_STATE;
struct _MI_SLAB_IDENTITY_REFERENCE;
struct _MI_PARTITION_SLABS;
struct _MI_PARTITION;
struct _DBGKD_WRITE_BREAKPOINT32;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _MI_PROTOTYPE_PTES_NODE;
struct _IMAGE_SECURITY_CONTEXT;
struct _MI_IMAGE_ADDITIONAL_INFO;
struct _PCW_BUFFER;
struct _MMSECTION_FLAGS2;
struct _ETW_QUEUE_ENTRY;
struct _DBGKD_CONTINUE2;
struct _DBGKD_SET_INTERNAL_BREAKPOINT32;
struct _DBGKD_READ_MEMORY64;
struct _DBGKD_SET_CONTEXT;
struct _DBGKD_WRITE_BREAKPOINT64;
struct _DBGKD_RESTORE_BREAKPOINT;
struct _DBGKD_CONTINUE;
struct _DBGKD_READ_WRITE_IO64;
struct _DBGKD_READ_WRITE_IO_EXTENDED64;
struct _DBGKD_SET_INTERNAL_BREAKPOINT64;
struct _DBGKD_GET_VERSION64;
struct _DBGKD_READ_WRITE_MSR;
struct _DBGKD_SEARCH_MEMORY;
struct _DBGKD_GET_SET_BUS_DATA;
struct _DBGKD_FILL_MEMORY;
struct _DBGKD_QUERY_MEMORY;
struct _DBGKD_SWITCH_PARTITION;
struct _DBGKD_WRITE_CUSTOM_BREAKPOINT;
struct _DBGKD_MANIPULATE_STATE64;
struct _MI_EXTRA_IMAGE_INFORMATION;
struct FEATURE_STATE_CHANGE_SUBSCRIPTION__;
struct _SECTION_IMAGE_INFORMATION;
struct _MI_SECTION_IMAGE_INFORMATION;
struct _FAST_OWNER_ENTRY;
struct _THERMAL_ZONE_COUNTERS;
struct _PCW_PROCESSOR_INFO;
struct _PEP_ACPI_SPB_UART_RESOURCE;
struct FEATURE_ERROR;
union _MM_STORE_SUB_KEY_DESCRIPTOR;
struct _GROUP_AFFINITY32;
struct _COMPRESSED_DATA_INFO;
struct _PEP_ACPI_GPIO_RESOURCE;
struct _NT_TIB32;
struct _ACTIVATION_CONTEXT_STACK32;
struct _STRING32;
struct _TEB32;
struct _DUMP_INITIALIZATION_CONTEXT;
struct _ISRDPCSTATS_SEQUENCE;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCY;
struct _LOADER_PARAMETER_CI_EXTENSION;
struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE;
union _MI_AVAILABLE_PAGES_MEDIUM_GRANULARITY;
struct _tlgProviderMetadata_t;
struct _IO_TIMER;
struct _MCGEN_TRACE_CONTEXT;
union _POP_FX_COMPONENT_FLAGS;
struct _LOGGED_STREAM_CALLBACK_V1;
struct _LOGGED_STREAM_CALLBACK_V2;
struct _PRIVATE_CACHE_MAP;
struct _SHARED_CACHE_MAP;
struct _DEVOBJ_EXTENSION;
struct _MI_STACKTRACE_BUFFER;
struct _THERMAL_COOLING_INTERFACE;
struct _POP_COOLING_EXTENSION;
struct _RSDP;
struct _POWER_LIMIT_INTERFACE;
struct _POP_POWER_LIMIT_EXTENSION;
struct _POWER_LIMIT_ATTRIBUTES;
struct _EXCEPTION_RECORD64;
struct _POWER_LIMIT_VALUE;
struct _PHYSICAL_MEMORY_DESCRIPTOR;
struct _CACHE_UNINITIALIZE_EVENT;
struct _X86_KTRAP_FRAME;
struct _ETW_REG_ENTRY;
struct _IO_STACK_LOCATION;
struct _MI_CONTROL_AREA_WAIT_BLOCK;
struct _SECURITY_SUBJECT_CONTEXT;
struct _PRIVILEGE_SET;
struct _ACCESS_STATE;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _SEGMENT_FLAGS;
union _MM_STORE_KEY;
struct _MM_STORE_KEY_DESCRIPTOR;
struct _MM_STORE_WRITE_PAGE_INFORMATION;
struct DEBUG_DEVICE_ADDRESS;
struct _SCSI_REQUEST_BLOCK;
struct _PEP_ACPI_SPB_SPI_RESOURCE;
struct _RTL_RANGE;
struct _DBGKD_WRITE_MEMORY32;
struct _DBGKD_READ_WRITE_IO32;
struct _DBGKD_SET_SPECIAL_CALL32;
struct _DBGKD_GET_INTERNAL_BREAKPOINT32;
struct _DBGKD_MANIPULATE_STATE32;
struct _BUS_EXTENSION_LIST;
struct _INTERFACE;
struct _DEVICE_CAPABILITIES;
struct _POP_ACTION_TRIGGER;
struct _ALPC_DISPATCH_CONTEXT;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
union _MI_AVAILABLE_PAGES_HUGE_GRANULARITY;
struct _POP_FX_RELATION;
struct _HAL_CLOCK_TIMER_CONFIGURATION;
struct _MI_SUB64K_FREE_RANGES;
struct _MI_PHYSICAL_VIEW;
struct _GENERIC_MAPPING;
struct _OBJECT_TYPE_INITIALIZER;
struct _HV_GET_BIN_CONTEXT;
struct _HV_GET_CELL_CONTEXT;
struct _CM_RESOURCE_LIST;
struct _EXT_IOMMU_DOMAIN;
struct _HAL_HV_DMA_HYBRID_PASSTHROUGH_RESERVED_REGIONS;
struct _HVP_VIEW_MAP;
struct _INTERRUPT_LINES;
struct _SECONDARY_IC_LIST_ENTRY;
struct _HBASE_BLOCK;
struct _KSECONDARY_IDT_ENTRY;
union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS;
struct _FREE_DISPLAY;
struct _MMVAD_FLAGS2;
struct _MMVAD;
struct _DUAL;
struct PEPHANDLE__;
struct _CM_NOTIFY_BLOCK;
struct _MI_CLONE_BLOCK_FLAGS;
struct _MMCLONE_BLOCK;
struct _TP_CALLBACK_INSTANCE;
struct _PENDING_RELATIONS_LIST_ENTRY;
union _AMD64_MXCSR_REG;
struct _TP_CLEANUP_GROUP;
struct _PNP_WATCHDOG;
struct _MMSECURE_FLAGS;
struct _MMADDRESS_LIST;
struct _MI_LARGEPAGE_VAD_INFO;
struct _MI_VAD_EVENT_BLOCK;
struct _CM_KEY_HASH_TABLE_ENTRY;
struct _CMP_VOLUME_MANAGER;
struct _ACTIVATION_CONTEXT_STACK;
struct _MI_SUBSECTION_ENTRY1;
struct _RELATION_LIST;
struct _DEVICE_OBJECT_LIST;
struct DOCK_INTERFACE;
struct _GDI_TEB_BATCH;
struct _TEB_ACTIVE_FRAME;
struct _PNP_REBALANCE_TRACE_CONTEXT;
struct _EXT_IOMMU_SETTINGS;
struct _DEVICE_NODE_IOMMU_EXTENSION;
struct _SINGLE_LIST_ENTRY32;
struct _PO_HIBER_PERF;
struct _CM_FAST_LEAF_HINT;
struct _CM_INDEX;
struct _OBJECT_HANDLE_INFORMATION;
struct _VI_DEADLOCK_GLOBALS;
struct _IO_NMISOURCE;
struct _GIC_DISTRIBUTOR;
struct _ACPI_METHOD_ARGUMENT_V1;
struct _CALL_PERFORMANCE_DATA;
struct _PEP_CRASHDUMP_INFORMATION;
struct _POP_FX_COMPONENT;
struct _POP_FX_IDLE_STATE;
struct _IMAGE_SECTION_HEADER;
struct _POP_FX_DEPENDENT;
struct _POP_FX_PERF_INFO;
struct _RH_OP_CONTEXT;
struct _POOL_HEADER;
struct _PO_FX_PERF_STATE_CHANGE;
struct _POP_FX_PERF_SET;
struct _PO_FX_COMPONENT_PERF_SET;
struct _NONOPAQUE_OPLOCK;
struct _PO_FX_PERF_STATE;
struct _TP_POOL;
struct _CM_KEY_SECURITY_CACHE_ENTRY;
struct _POP_COMPONENT_POWER_PROFILE;
struct _POP_DEVICE_POWER_PROFILE;
struct _HIVE_LIST_ENTRY;
struct _CM_KCB_LAYER_INFO;
struct _POP_POWER_PLANE;
struct _BLOB_TYPE;
struct _ACPI_SRAT;
struct _POP_FX_LOG_ENTRY;
struct _NT_TIB;
struct _TEB;
struct _KHETRO_HWFEEDBACK_TYPE;
struct _TEB_ACTIVE_FRAME_CONTEXT;
struct _RTL_CRITICAL_SECTION;
struct _HEAP_LOCK;
struct _EX_PUSH_LOCK_AUTO_EXPAND;
struct _PO_DEVICE_NOTIFY_ORDER;
struct _INBV_DISPLAY_CONTEXT;
struct _DMA_IOMMU_INTERFACE_V1;
struct _DMA_IOMMU_INTERFACE_V3;
struct _DMA_IOMMU_INTERFACE_EX;
union _KI_COOPERATIVE_IDLE_SEARCH_GENERATION_ID;
struct _KI_COOPERATIVE_IDLE_SEARCH_CONTEXT;
struct _PNP_ASSIGN_RESOURCES_CONTEXT;
struct _KI_COOPERATIVE_IDLE_SEARCH_GENERATION;
struct _CONTROL_AREA;
union _IOMMU_DMA_DOMAIN_CREATION_FLAGS;
struct _BUS_HANDLER;
struct _DBGKM_EXCEPTION64;
struct _KALPC_VIEW;
struct _ALPC_COMPLETION_PACKET_LOOKASIDE;
struct _TERMINATION_PORT;
struct _PCW_DATA;
struct _ETW_PERF_COUNTERS;
struct _THREAD_ENERGY_VALUES;
struct _PROCESS_DISK_COUNTERS;
struct _PROCESS_NETWORK_COUNTERS;
struct _PS_JOB_WAKE_INFORMATION;
struct _EPROCESS_VALUES;
struct _JOB_RATE_CONTROL_HEADER;
union _JOBOBJECT_ENERGY_TRACKING_STATE;
struct _EJOB;
struct _PEP_ACPI_SPB_I2C_RESOURCE;
struct _JOB_NOTIFICATION_INFORMATION;
struct _IO_MINI_COMPLETION_PACKET_USER;
struct _JOB_CPU_RATE_CONTROL;
struct _RTL_FEATURE_USAGE_DATA;
struct _DMA_TRANSFER_INFO_V2;
struct _DMA_TRANSFER_INFO;
struct _SEP_SILOSTATE;
struct _SEP_RM_LSA_CONNECTION_STATE;
struct _WNF_SILODRIVERSTATE;
struct _DBGK_SILOSTATE;
struct _CPTABLEINFO;
struct _RTL_NLS_STATE;
struct _CRITICAL_PROCESS_EXCEPTION_DATA;
struct _ESERVERSILO_GLOBALS;
struct _PEP_ACPI_EXTENDED_ADDRESS;
union _HV_PARTITION_PRIVILEGE_MASK;
struct _HV_X64_HYPERVISOR_FEATURES;
struct _OB_HANDLE_REVOCATION_BLOCK;
struct _SEP_LOGON_SESSION_REFERENCES;
struct _ACTIVATION_CONTEXT_STACK64;
struct _DEVICE_MAP;
struct _RTL_HASH_ENTRY;
struct _OBJECT_DIRECTORY_ENTRY;
struct _KIST_LINK_FRAME;
struct _RTL_DYNAMIC_HASH_TABLE;
struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION;
struct _SID_AND_ATTRIBUTES;
struct _MI_REMOVAL_REQUESTED_PAGE;
union _CPU_INFO;
struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION;
union _MI_AVAILABLE_PAGES_LARGE_GRANULARITY;
struct _CI_NGEN_PATHS;
struct _CC_VOLUME_TELEMETRY;
struct _WHEA_AER_ROOTPORT_DESCRIPTOR;
struct _TRACE_ENABLE_INFO;
struct _ETW_GUID_ENTRY;
struct _ETW_PRIV_HANDLE_DEMUX_TABLE;
struct _ETW_COUNTERS;
struct _ETW_SYSTEM_LOGGER_SETTINGS;
struct _ETW_SILODRIVERSTATE;
struct _KE_RCU_WORKITEM;
struct _VOLUME_CACHE_MAP;
struct _ETW_FILTER_HEADER;
struct _ETW_FILTER_PID;
struct _VACB_LEVEL_REFERENCE;
struct _MI_PAGING_FILE_SPACE_BITMAPS;
struct _CACHE_MANAGER_CALLBACKS;
struct _ETW_PERFECT_HASH_FUNCTION;
struct _IOMMU_DMA_LOGICAL_ALLOCATOR_CAPABILITIES;
struct _ETW_FILTER_EVENT_NAME_DATA;
struct _NPAGED_LOOKASIDE_LIST;
struct _BITMAP_RANGE;
struct _AGGREGATED_PAYLOAD_FILTER;
struct _ETW_PAYLOAD_FILTER;
struct _MI_STORE_MODWRITER_EXTENSION;
struct _DMA_IOMMU_INTERFACE;
struct _EVENT_FILTER_HEADER;
struct _EX_RUNDOWN_REF_CACHE_AWARE;
struct _DBGKD_LOAD_SYMBOLS32;
struct _ETW_REF_CLOCK;
struct _DISALLOWED_GUIDS;
struct _ETW_PARTITION_CONTEXT;
struct _WMI_LOGGER_CONTEXT;
struct _CACHE_MANAGER_CALLBACKS_EX;
struct _ETW_DECODE_CONTROL_ENTRY;
struct _WMI_BUFFER_HEADER;
struct _X86_KTRAP_FRAME_BLUE;
struct _ETW_REALTIME_CONSUMER;
struct _LAZY_WRITER;
struct _CC_LWS_PACKET;
struct _CC_PARTITION;
struct _TOKEN_PRIVILEGES;
struct _ASYNC_LAZYWRITE_THREAD_STATS;
struct _CC_NUMA_NODE;
struct _IO_APIC_REGISTERS;
struct _ETW_STACK_CACHE;
struct _ETW_PMC_SUPPORT;
struct _HAL_PMC_COUNTERS;
struct _ETW_LBR_SUPPORT;
struct _PEP_ACPI_IO_MEMORY_RESOURCE;
struct _PEP_ACPI_INTERRUPT_RESOURCE;
union _PEP_ACPI_RESOURCE;
struct _HEAP_LFH_BLOCK_SLIST;
union _HEAP_LFH_BLOCK_LIST;
struct _ETW_IPT_SUPPORT;
struct _ETW_HW_TRACE_EXT_INTERFACE;
struct _DEVICE_DSM_DEFINITION;
union _HEAP_LFH_SUBSEGMENT_STATE;
union _HEAP_LFH_UNUSED_BYTES_INFO;
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES;
union _HEAP_LFH_THREAD_DATA;
struct _PERIODIC_CAPTURE_STATE_GUIDS;
struct PERIODIC_CAPTURE_STATE_CONTEXT;
struct _EX_TIMER;
struct _ETW_SOFT_RESTART_CONTEXT;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES;
struct _ETW_EVENT_CALLBACK_CONTEXT;
struct _PPM_PLATFORM_STATES;
struct _EPARTITION;
struct _HEAP_SEGMENT;
struct _HEAP_COUNTERS;
struct _HEAP_TUNING_PARAMETERS;
struct _HEAP;
struct _RELATIVE_SYMLINK_INFO;
struct _ETW_SILO_TRACING_BLOCK;
struct _EX_WNF_SUBSCRIPTION;
struct _IMAGE_ROM_OPTIONAL_HEADER;
struct _WNF_SUBSCRIPTION;
struct _HAL_NODE_RANGE;
struct _EXP_LICENSE_STATE;
struct _HAL_HV_DMA_DOMAIN_CONFIG_X64;
struct _WNF_SCOPE_MAP_ENTRY;
struct _WNF_SCOPE_MAP;
struct _MI_DYNAMIC_BITMAP;
struct _MI_CACHE_LINE;
struct _MI_WORKING_SET_LOCK_ARRAY;
struct _MI_SYSTEM_VA_STATE;
struct _CALLBACK_OBJECT;
struct _CELL_DATA;
struct _MI_PARTITION_STATE;
struct _PNP_REPLACE_PROCESSOR_LIST;
struct _WNF_PERMANENT_DATA_STORE;
struct _HAL_CHANNEL_MEMORY_RANGES;
struct _MI_FORCED_COMMITS;
struct _DBGKP_ERROR_PORT;
struct _NLS_STATE;
struct _TIME_FIELDS;
struct _RTL_TIME_ZONE_INFORMATION;
struct _RTL_DYNAMIC_TIME_ZONE_INFORMATION;
struct _TIMEZONE_CHANGE_EVENT;
struct _EX_TIMEZONE_STATE;
struct _SILO_USER_SHARED_DATA;
struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION;
struct _MI_SYSTEM_PTE_TYPE;
struct _MI_ULTRA_VA_CONTEXT;
struct _MI_HUGE_SYSTEM_VIEW_HEAD;
struct _MI_SYSTEM_PTE_STATE;
struct CMP_OFFSET_ARRAY;
struct _MI_IO_PAGE_STATE;
struct _JOB_NET_RATE_CONTROL;
union _ENERGY_STATE_DURATION;
struct _PROCESS_ENERGY_VALUES;
struct _PROCESS_ENERGY_VALUES_EXTENSION;
struct _PROCESS_EXTENDED_ENERGY_VALUES_V1;
struct _MI_STANDBY_STATE;
struct _ISA_VECTOR;
struct _PAGEFAULT_HISTORY;
struct _PEB;
struct _HMAP_ENTRY;
struct _PEB_LDR_DATA;
struct _INTERRUPT_CONNECTION_DATA;
struct _MAPIC;
union _ARM64_FPSR_REG;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _MI_VERIFIER_TRIM_STATE;
struct _MMSUPPORT_AGGREGATION;
struct _VF_AVL_TREE;
struct _CM_INDEX_HINT_BLOCK;
struct _MI_SYSTEM_VA_ASSIGNMENT;
struct _ACTIVATION_CONTEXT_DATA;
struct _ASSEMBLY_STORAGE_MAP;
struct _RTL_RANGE_LIST;
struct _TP_CALLBACK_ENVIRON_V3;
struct _HEAP_STOP_ON_TAG;
struct _HEAP_STOP_ON_VALUES;
struct _LEAP_SECOND_DATA;
struct _MI_CACHED_PTES;
struct _PSP_SESSION_SPACE;
struct _EPROCESS_QUOTA_BLOCK;
struct _VF_SUSPECT_DRIVER_ENTRY;
struct _HANDLE_TABLE;
struct _ARBITER_INTERFACE;
struct _ACTIVATION_CONTEXT;
struct _EXHANDLE;
union _HANDLE_TABLE_ENTRY;
struct _HANDLE_TABLE_ENTRY_INFO;
struct _WHEA_XPF_PROCESSOR_ERROR_SECTION;
struct _HANDLE_TRACE_DEBUG_INFO;
struct _ACPI_CACHED_TABLE;
struct _ARBITER_CONFLICT_INFO;
struct _EWOW64PROCESS;
struct _HIVE_WAIT_PACKET;
struct _OBJECT_NAME_INFORMATION;
struct _SLIST_ENTRY;
struct _MMINPAGE_SUPPORT_FLOW_THROUGH;
struct _MMINPAGE_SUPPORT;
struct _MI_SYSTEM_NODE_INFORMATION;
struct _ACPI_SRAT_ENTRY;
struct _WNF_STATE_DATA;
struct _HHIVE;
struct _WNF_STATE_NAME_REGISTRATION;
struct _MI_AWE_ATTRIBUTE_CHANGE_WAIT_BLOCK;
struct _HAL_HV_DMA_DOMAIN_CONFIG_ARM64;
struct _IOMMU_DMA_PASID_DEVICE;
struct _PO_DIAG_STACK_RECORD;
struct _KTMNOTIFICATION_PACKET;
struct _INVERTED_FUNCTION_TABLE_KERNEL_MODE;
struct _IMAGE_RUNTIME_FUNCTION_ENTRY;
struct _DYNAMIC_FUNCTION_TABLE;
struct _CC_FILE_SIZES;
struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT;
struct _PO_PROCESS_ENERGY_CONTEXT;
struct _CM_UOW_SET_VALUE_KEY_DATA;
struct _INTERRUPT_LINE_INTERNAL_STATE;
struct _ACCESS_REASONS;
struct _CONTROLLER_OBJECT;
struct _MI_COMMON_PAGE_STATE;
struct _PS_SYSCALL_PROVIDER;
struct _QUAD;
struct _OBJECT_HEADER;
struct _DUMMY_FILE_OBJECT;
struct _HMAP_DIRECTORY;
struct _IOMMU_DMA_LOGICAL_ALLOCATOR_OPERATIONS_V1;
struct _EVENT_DATA_DESCRIPTOR;
struct _TRACE_LOGFILE_HEADER;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
struct _PAGED_LOOKASIDE_LIST;
struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
struct _KPCR;
struct _EXCEPTION_REGISTRATION_RECORD;
union _ARM64_FPCR_REG;
struct _MI_ACCESS_VIOLATION_RANGE;
struct _MI_POOL_STATE;
struct _MI_UNUSED_SEGMENT_TRACES;
union _MMSUBSECTION_FLAGS;
struct _SUBSECTION;
struct _MSUBSECTION;
struct _MI_DLL_OVERFLOW_AREA;
struct _MI_SECTION_WOW_STATE;
struct _MI_SECTION_STATE;
struct _MM_SYSTEM_PAGE_COUNTS;
struct _RTL_FUNCTION_OVERRIDE_CAPABILITIES;
struct _MI_SYSTEM_IMAGE_STATE;
struct _MI_PROCESS_STATE;
struct _MI_HARDWARE_STATE;
struct _MI_COMBINE_STATE;
struct _MI_PAGELIST_STATE;
struct _MI_BAD_MEMORY_EVENT_ENTRY;
struct _MI_PROBE_RAISE_TRACKER;
struct _MI_RESAVAIL_FAILURES;
struct _MI_ERROR_STATE;
struct _MI_PAGEFILE_METADATA_LAYOUT;
struct _MI_PAGING_IO_STATE;
struct _MI_SYSTEM_TRIM_STATE;
struct _MI_SYSTEM_ACCELERATORS;
struct _MI_HOT_PATCH_STATE;
struct _MI_ENCLAVE_STATE;
struct _MM_PAGED_POOL_INFO;
struct _MI_VISIBLE_STATE;
struct _MI_SYSTEM_INFORMATION;
struct _CM_NAME_CONTROL_BLOCK;
struct _CC_ASYNC_READ_CONTEXT;
struct _EXCEPTION_RECORD;
struct _CM_RM;
union _KGDTENTRY64;
struct _CM_TRANS;
struct _OBJECT_HANDLE_COUNT_ENTRY;
struct _OBJECT_HEADER_HANDLE_INFO;
struct _KTSS64;
struct _HIVE_WRITE_WAIT_QUEUE;
struct _CMHIVE;
union _KIDTENTRY64;
struct _PS_MITIGATION_AUDIT_OPTIONS_MAP;
struct _OBJECT_HEADER_EXTENDED_INFO;
struct _TXN_PARAMETER_BLOCK;
union _XPF_MCE_FLAGS;
struct _WHEA_XPF_MC_BANK_DESCRIPTOR;
struct _WHEA_XPF_MCE_DESCRIPTOR;
struct _WHEA_XPF_CMC_DESCRIPTOR;
struct _WHEA_XPF_NMI_DESCRIPTOR;
struct _WHEA_IPF_CMC_DESCRIPTOR;
struct _WHEA_IPF_CPE_DESCRIPTOR;
struct _WHEA_AER_ENDPOINT_DESCRIPTOR;
struct _WHEA_GENERIC_ERROR_DESCRIPTOR;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
struct _KLDR_DATA_TABLE_ENTRY;
struct _PLUGPLAY_CONTROL_STATUS_DATA;
union _HAL_UNMASKED_INTERRUPT_FLAGS;
struct _HAL_UNMASKED_INTERRUPT_INFORMATION;
struct _WHEA_ERROR_SOURCE_DESCRIPTOR;
struct _WHEA_EVENT_LOG_ENTRY_HEADER;
struct _WHEA_EVENT_LOG_ENTRY;
struct _IO_WORKITEM;
union _WHEA_ERROR_PACKET_FLAGS;
struct _WHEA_ERROR_PACKET_V2;
struct _PNP_RESOURCE_REQUEST;
struct _OBJECT_HEADER_PROCESS_INFO;
struct _WHEA_ERROR_RECORD;
struct _PF_KERNEL_GLOBALS;
struct _MCUPDATE_INFO;
union _AMD_MCA_IPID;
struct _HARDWARE_PTE;
union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS;
struct _WHEAP_ERROR_RECORD_WRAPPER;
struct _VF_AVL_TREE_NODE;
struct _VF_TARGET_DRIVER;
struct _WNF_NAME_INSTANCE;
struct _IO_APIC_DATA;
struct _PCW_COUNTER_DESCRIPTOR;
struct PROCESS_PERF_COUNTERS;
struct _ISRDPCSTATS;
struct _KINTERRUPT;
struct _NT_TIB64;
struct _SEP_TOKEN_DIAG_TRACK_ENTRY;
struct _RSDT_32;
struct _PRIVATE_VOLUME_CACHEMAP;
struct _VI_DEADLOCK_THREAD;
struct _VI_DEADLOCK_RESOURCE;
struct _VI_DEADLOCK_NODE;
struct _POP_TRIGGER_WAIT;
union _HEAP_LFH_ONDEMAND_POINTER;
struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2;
struct _HEAP_LARGE_ALLOC_DATA;
struct _MI_NODE_SLAB_IDENTITY_STATE;
struct _KALPC_SECURITY_DATA;
struct _DMAR_PAGE_TABLE_STATE;
struct _ETW_BOOT_CONFIG;
struct _HMAP_TABLE;
struct _ETW_WMITRACE_WORK;
struct _HEAP_FREE_ENTRY;
struct _CM_KEY_SECURITY_CACHE;
struct _MEMORY_MIRRORING_DATA;
struct _DMA_COMMON_BUFFER_ENTRY;
union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS;
union _WHEA_ERROR_STATUS;
struct _WHEA_MEMORY_ERROR_SECTION;
struct _BLOB;
struct _DMA_COMMON_BUFFER_EXTENDED_CONFIGURATION;
struct _IOMMU_DMA_LOGICAL_ADDRESS_TOKEN_MAPPED_SEGMENT;
struct _HALP_DMA_TRANSLATION_ENTRY;
struct _IOMMU_DMA_LOGICAL_ADDRESS_TOKEN;
struct _HALP_DMA_TRANSLATION_BUFFER;
struct _DMA_SCATTER_GATHER_LIST;
struct _SEGMENT;
struct _WHEAP_INFO_BLOCK;
struct _SECURITY_DESCRIPTOR;
union _EXT_IOMMU_DEVICE_ID_FLAGS;
struct _EXT_IOMMU_DEVICE_ID_PCI;
struct _EXT_IOMMU_DEVICE_ID;
struct wil_details_RecordUsageResult;
struct _FSRTL_PER_STREAM_CONTEXT;
union _MM_PAGE_ACCESS_INFO_FLAGS;
struct _POOL_LIMIT_INFO;
struct _IOMMU_RESERVED_DEVICE;
struct _HAL_HV_DMA_DOMAIN_CONFIG;
union _HEAP_LFH_COMMIT_UNIT_INFO;
struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS;
union _HEAP_LFH_SUBSEGMENT_UCHAR_FIELDS;
struct _HEAP_LFH_SUBSEGMENT;
struct _DEBUG_TRANSPORT_DATA;
struct _DEBUG_IOMMU_EFI_DATA;
struct _DEBUG_DEVICE_DESCRIPTOR;
struct _IOMMU_RESERVED_DEVICE_LIST;
struct _NLS_DATA_BLOCK;
struct _LOADER_PERFORMANCE_DATA;
struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION;
struct _LOADER_BUGCHECK_PARAMETERS;
struct _LOADER_RESET_REASON;
struct _VSM_PERFORMANCE_DATA;
struct _LOADER_PARAMETER_EXTENSION;
struct _TRUSTLET_MAILBOX_KEY;
struct _NETWORK_LOADER_BLOCK;
struct _INSTALLED_MEMORY_RANGE;
struct _HAL_HV_SYSTEM_PASID_CAPABILITIES;
struct _MI_COMBINE_BLOCK_BASE;
struct _CHPEV2_CPUAREA_INFO;
struct _IMAGE_DEBUG_DIRECTORY;
struct _HAL_HV_DMA_DOMAIN_INFO;
struct _HAL_HV_DMA_CREATE_DOMAIN_INFO;
struct _NON_PAGED_DEBUG_INFO;
struct _IMAGE_DOS_HEADER;
union _INVPCID_DESCRIPTOR;
struct _AUX_ACCESS_DATA;
struct _CONFIGURATION_COMPONENT;
struct _CONFIGURATION_COMPONENT_DATA;
struct _IO_PRIORITY_INFO;
struct _EVENT_HEADER_EXTENDED_DATA_ITEM;
union wil_details_FeatureStateCache;
struct FEATURE_LOGGED_TRAITS;
struct _DEVICE_FAULT_CONFIGURATION;
struct __WIL_RTL_FEATURE_USAGE_DATA;
struct _RTL_FEATURE_USAGE_REPORT;
struct _HIDDEN_PROCESSOR_POWER_INTERFACE;
struct wil_details_FeatureTestState;
struct _FSRTL_ADVANCED_FCB_HEADER;
struct _iobuf;
struct _RTL_CHASH_TABLE;
struct _RTL_ATOM_TABLE_REFERENCE;
struct _EVENT_FILTER_DESCRIPTOR;
struct _MM_PAGE_ACCESS_INFO_HEADER;
struct _PNP_DEVICE_ACTION_REQUEST_ARGUMENT;
struct _MM_PAGE_ACCESS_INFO;
struct _MMPAGING_FILE;
struct _MODWRITER_FLAGS;
struct _MMMOD_WRITER_MDL_ENTRY;
struct _MI_PAGE_HASH;
struct _IOMMU_DMA_RESERVED_REGION;
struct _MI_SLAB_ALLOCATOR_ENTRY;
struct _MAPPED_FILE_SEGMENT;
struct _MI_GETPAGE_FLAGS;
struct _MMCLONE_DESCRIPTOR;
struct _PEB32;
struct _HEAP_UCR_DESCRIPTOR;
struct _ALPC_HANDLE_ENTRY;
struct _ETW_DEBUGID_TRACKING_ENTRY;
struct _MMCLONE_HEADER;
struct _OBJECT_HEADER_CREATOR_INFO;
struct _AWEINFO;
struct _WNF_PROCESS_CONTEXT;
struct _MI_WRITE_MODES;
struct _INTERRUPT_TRACKING_ENTRY;
struct _CM_UOW_SET_SD_DATA;
struct _CM_UOW_SET_VALUE_LIST_DATA;
struct _HEAP_VS_CHUNK_FREE_HEADER;
struct _PCW_COUNTER_INFORMATION;
union _PCW_CALLBACK_INFORMATION;
struct _PCW_REGISTRATION;
struct _ETW_SESSION_PERF_COUNTERS;
struct _LOCK_HEADER;
struct _VF_POOL_TRACE;
struct _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST;
struct _CLIENT_ID64;
struct _TEB64;
struct _KEXCEPTION_FRAME;
struct _KLDTENTRY;
struct _KPROCESSOR_DESCRIPTOR_AREA;
struct _DIAGNOSTIC_CONTEXT;
struct _HEAP_TAG_ENTRY;
struct _VACB;
struct _MBCB;
struct _VF_TRACKER;
struct _EX_WORK_QUEUE_MANAGER;
struct _OB_EXTENDED_USER_INFO;
struct _WRITE_BEHIND_THROUGHPUT;
struct _ASYNC_READ_THREAD_STATS;
struct _BCB;
struct _FSRTL_COMMON_FCB_HEADER;
union _MI_FLAGS;
struct _MI_TRIAGE_DUMP_DATA;
struct _WORK_QUEUE_ENTRY;
struct _DEFERRED_WRITE;
struct _HEAP_SPAN;
struct _SEGMENT_HEAP_EXTRA;
struct _RTLP_HP_HEAP_GLOBALS;
struct _FAKE_HEAP_ENTRY;
struct _HEAP_FAILURE_INFORMATION;
struct _RTL_STACKDB_CONTEXT;
struct _HEAP_LFH_LIST_ENTRY;
struct _POP_IO_INFO;
struct _RTLP_HP_QUEUE_LOCK_HANDLE;
struct _HEAP_VS_SUBSEGMENT;
union _HEAP_SEGMENT_MGR_COMMIT_STATE;
struct _EXP_SECURE_POOL_CONTEXT;
struct _ALPC_COMPLETION_LIST_STATE;
struct _LDR_SERVICE_TAG_RECORD;
struct _PORT_MESSAGE;
struct _ALPC_MESSAGE_ATTRIBUTES;
struct _BLOB_COUNTERS;
struct _THERMAL_INFORMATION;
struct _KALPC_SECTION;
struct _ALPC_HANDLE_TABLE;
struct _OBJECT_HEADER_PADDING_INFO;
struct _ALPC_COMMUNICATION_INFO;
struct _KALPC_MESSAGE;
struct _KALPC_REGION;
struct _OB_DUPLICATE_OBJECT_STATE;
struct _KALPC_HANDLE_DATA;
struct _ALPC_COMPLETION_LIST;
struct _ALPC_COMPLETION_LIST_HEADER;
struct _OBJECT_ATTRIBUTES;
struct _OBJECT_TYPE;
struct _OBJECT_DUMP_CONTROL;
struct _OB_EXTENDED_PARSE_PARAMETERS;
struct _PORT_MESSAGE32;
struct _REMOTE_PORT_VIEW;
struct _IO_ADAPTER_CRYPTO_PARAMETERS;
struct _COPY_INFORMATION;
struct _IOP_IRP_EXTENSION;
struct _ARBITER_LIST_ENTRY;
struct _OBJECT_CREATE_INFORMATION;
struct _PNP_DEVICE_ACTION_ENTRY;
struct _SEP_LOWBOX_NUMBER_ENTRY;
struct _OBJECT_HANDLE_COUNT_DATABASE;
struct _EX_WORK_QUEUE;
struct _OBJECT_HEADER_NAME_INFO;
struct _OBJECT_HEADER_AUDIT_INFO;
struct _OBJECT_FOOTER;
struct _OBP_LOOKUP_CONTEXT;
struct _WHEAP_WORK_QUEUE;
struct _WHEAP_ERROR_SOURCE;
struct _WNF_DISPATCHER;
struct _POP_IRP_WORKER_ENTRY;
struct _POOL_LIMIT_TABLE_ENTRY;
struct _POP_HIBER_CONTEXT;
struct _INTERRUPT_TRACKING_ROOT;
struct _TRIAGE_9F_PNP;
struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE;
struct _TRIAGE_EX_WORK_QUEUE;
struct _OBJECT_SYMBOLIC_LINK;
struct _TRIAGE_DEVICE_NODE;
struct _TRIAGE_POP_IRP_DATA;
struct _PI_RESOURCE_ARBITER_ENTRY;
struct _POP_DEVICE_SYS_STATE;
struct _OBJECT_REF_INFO;
struct _FAST_ERESOURCE;
struct _EX_HEAP_SESSION_STATE;
struct _MEMORY_ALLOCATION_DESCRIPTOR;
struct _DELAY_ACK_FO;
struct HAL_PRIVATE_DISPATCH;
struct _MAP_REGISTER_ENTRY;
struct _HEADLESS_LOADER_BLOCK;
struct _NUMA_MEMORY_RANGE;
struct _COMPOSITEFS_LAYER_INFORMATION;
struct _LOADER_FEATURE_CONFIGURATION_INFORMATION2;
struct _HAL_DP_REPLACE_PARAMETERS;
struct _INPUT_MAPPING_ELEMENT;
struct _HAL_LBR_ENTRY;
struct _HAL_IOMMU_DISPATCH;
struct _IOMMU_DMA_LOGICAL_ALLOCATOR_CONFIG;
struct _IOMMU_DMA_DEVICE_INFORMATION;
struct _SECTION;
struct _MI_COMBINE_BLOCK;
struct _MI_DRIVER_VA;
struct _MI_SYSTEM_NODE_NONPAGED_POOL;
struct _MI_HUGE_PFN;
struct PROCESSOR_IDLESTATE_POLICY;
struct _EXCEPTION_POINTERS;
struct _ARBITER_ORDERING;
struct _ARBITER_ALTERNATIVE;
struct _VF_DRIVER_IO_CALLBACKS;
struct _PI_BUS_EXTENSION;
struct _RTL_ATOM_TABLE_ENTRY;
struct _TraceLoggingMetadata_t;
struct _EX_PARTITION;
struct _VERIFIER_SHARED_EXPORT_THUNK;
struct _VI_VERIFIER_POOL_HEADER;
struct _ETWP_NOTIFICATION_HEADER;
struct _ETW_PROVIDER_TRAITS;
struct _VI_TRACK_IRQL;
struct _IOV_FORCED_PENDING_TRACE;
struct _DIAGNOSTIC_BUFFER;
struct _DUMP_STACK_CONTEXT;
struct PO_MEMORY_IMAGE;
struct _ISR_THUNK;
struct _WAITING_IRP;
struct _EXP_PULLED_FILE_TABLE;
struct _TRIAGE_9F_POWER;
struct _PTE_TRACKER;
struct _POOL_TRACKER_BIG_PAGES;
struct PROCESSOR_PERFSTATE_POLICY;
struct _LDR_DDAG_NODE;
struct _POP_POWER_SETTING_VALUES;
struct _RTLP_RANGE_LIST_ENTRY;
struct _KWAIT_CHAIN_ENTRY;
struct _CALL_HASH_ENTRY;

typedef enum _DEVICE_RELATION_TYPE
{
  BusRelations = 0,
  EjectionRelations = 1,
  PowerRelations = 2,
  RemovalRelations = 3,
  TargetDeviceRelation = 4,
  SingleBusRelations = 5,
  TransportRelations = 6,
} DEVICE_RELATION_TYPE, *PDEVICE_RELATION_TYPE;

typedef enum _HALP_EMERGENCY_LA_QUEUE_TYPE
{
  HalpDmaLegacyLaQueueEntry = 0,
  HalpDmaThinLaQueueEntry = 1,
  HalpDmaLaQueueEntryMax = 2,
} HALP_EMERGENCY_LA_QUEUE_TYPE, *PHALP_EMERGENCY_LA_QUEUE_TYPE;

typedef enum _POOL_TYPE
{
  NonPagedPool = 0,
  NonPagedPoolExecute = 0,
  PagedPool = 1,
  NonPagedPoolMustSucceed = 2,
  DontUseThisType = 3,
  NonPagedPoolCacheAligned = 4,
  PagedPoolCacheAligned = 5,
  NonPagedPoolCacheAlignedMustS = 6,
  MaxPoolType = 7,
  NonPagedPoolBase = 0,
  NonPagedPoolBaseMustSucceed = 2,
  NonPagedPoolBaseCacheAligned = 4,
  NonPagedPoolBaseCacheAlignedMustS = 6,
  NonPagedPoolSession = 32,
  PagedPoolSession = 33,
  NonPagedPoolMustSucceedSession = 34,
  DontUseThisTypeSession = 35,
  NonPagedPoolCacheAlignedSession = 36,
  PagedPoolCacheAlignedSession = 37,
  NonPagedPoolCacheAlignedMustSSession = 38,
  NonPagedPoolNx = 512,
  NonPagedPoolNxCacheAligned = 516,
  NonPagedPoolSessionNx = 544,
} POOL_TYPE, *PPOOL_TYPE;

typedef struct _MI_COLOR
{
  union
  {
    /* 0x0000 */ unsigned long EntireField;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Cache : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned long Channel : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long Node : 6; /* bit position: 9 */
      /* 0x0000 */ unsigned long HighLow : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned long LargePageIndex : 2; /* bit position: 16 */
      /* 0x0000 */ unsigned long CacheAttribute : 2; /* bit position: 18 */
      /* 0x0000 */ unsigned long ListName : 1; /* bit position: 20 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} MI_COLOR, *PMI_COLOR; /* size: 0x0004 */

typedef enum _MMLISTS
{
  ZeroedPageList = 0,
  FreePageList = 1,
  StandbyPageList = 2,
  ModifiedPageList = 3,
  ModifiedNoWritePageList = 4,
  BadPageList = 5,
  ActiveAndValid = 6,
  TransitionPage = 7,
} MMLISTS, *PMMLISTS;

typedef struct _LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY* Flink;
  /* 0x0008 */ struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; /* size: 0x0010 */

typedef struct _RTL_BALANCED_NODE
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE* Children[2];
    struct
    {
      /* 0x0000 */ struct _RTL_BALANCED_NODE* Left;
      /* 0x0008 */ struct _RTL_BALANCED_NODE* Right;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  union
  {
    /* 0x0010 */ unsigned char Red : 1; /* bit position: 0 */
    /* 0x0010 */ unsigned char Balance : 2; /* bit position: 0 */
    /* 0x0010 */ unsigned __int64 ParentValue;
  }; /* size: 0x0008 */
} RTL_BALANCED_NODE, *PRTL_BALANCED_NODE; /* size: 0x0018 */

typedef struct _MI_ACTIVE_PFN
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Tradable : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 NonPagedBuddy : 43; /* bit position: 1 */
        /* 0x0000 */ unsigned __int64 Spare : 20; /* bit position: 44 */
      }; /* bitfield */
    } /* size: 0x0008 */ Leaf;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Tradable : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 NonPagedBuddy : 31; /* bit position: 1 */
        /* 0x0000 */ unsigned __int64 UsedPageTableEntries : 10; /* bit position: 32 */
        /* 0x0000 */ unsigned __int64 WsleAge : 3; /* bit position: 42 */
        /* 0x0000 */ unsigned __int64 OldestWsleLeafEntries : 10; /* bit position: 45 */
        /* 0x0000 */ unsigned __int64 OldestWsleLeafAge : 3; /* bit position: 55 */
        /* 0x0000 */ unsigned __int64 Spare : 6; /* bit position: 58 */
      }; /* bitfield */
    } /* size: 0x0008 */ PageTable;
    /* 0x0000 */ unsigned __int64 EntireActiveField;
  }; /* size: 0x0008 */
} MI_ACTIVE_PFN, *PMI_ACTIVE_PFN; /* size: 0x0008 */

typedef struct _MIPFNFLINK
{
  union
  {
    /* 0x0000 */ struct _SLIST_ENTRY* NextSlistPfn;
    /* 0x0000 */ void* Next;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Flink : 40; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 NodeFlinkLow : 24; /* bit position: 40 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 EntireField;
    /* 0x0000 */ struct _MI_ACTIVE_PFN Active;
  }; /* size: 0x0008 */
} MIPFNFLINK, *PMIPFNFLINK; /* size: 0x0008 */

typedef struct _MMPTE_HARDWARE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Dirty1 : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Owner : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 WriteThrough : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 CacheDisable : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Accessed : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Dirty : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned __int64 LargePage : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned __int64 Global : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned __int64 CopyOnWrite : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 Unused : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Write : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFrameNumber : 40; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 ReservedForSoftware : 4; /* bit position: 52 */
    /* 0x0000 */ unsigned __int64 WsleAge : 4; /* bit position: 56 */
    /* 0x0000 */ unsigned __int64 WsleProtection : 3; /* bit position: 60 */
    /* 0x0000 */ unsigned __int64 NoExecute : 1; /* bit position: 63 */
  }; /* bitfield */
} MMPTE_HARDWARE, *PMMPTE_HARDWARE; /* size: 0x0008 */

typedef struct _MMPTE_PROTOTYPE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 DemandFillProto : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 HiberVerifyConverted : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 ReadOnly : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 SwizzleBit : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Combined : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 Unused1 : 4; /* bit position: 12 */
    /* 0x0000 */ __int64 ProtoAddress : 48; /* bit position: 16 */
  }; /* bitfield */
} MMPTE_PROTOTYPE, *PMMPTE_PROTOTYPE; /* size: 0x0008 */

typedef struct _MMPTE_SOFTWARE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 PageFileReserved : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 PageFileAllocated : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 ColdPage : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 SwizzleBit : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFileLow : 4; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 UsedPageTableEntries : 10; /* bit position: 16 */
    /* 0x0000 */ unsigned __int64 ShadowStack : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned __int64 OnStandbyLookaside : 1; /* bit position: 27 */
    /* 0x0000 */ unsigned __int64 Unused : 4; /* bit position: 28 */
    /* 0x0000 */ unsigned __int64 PageFileHigh : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_SOFTWARE, *PMMPTE_SOFTWARE; /* size: 0x0008 */

typedef struct _MMPTE_TIMESTAMP
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 MustBeZero : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Unused : 3; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 SwizzleBit : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFileLow : 4; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 Reserved : 16; /* bit position: 16 */
    /* 0x0000 */ unsigned __int64 GlobalTimeStamp : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_TIMESTAMP, *PMMPTE_TIMESTAMP; /* size: 0x0008 */

typedef struct _MMPTE_TRANSITION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Write : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 OnStandbyLookaside : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 IoTracker : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 SwizzleBit : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFrameNumber : 40; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 Unused : 12; /* bit position: 52 */
  }; /* bitfield */
} MMPTE_TRANSITION, *PMMPTE_TRANSITION; /* size: 0x0008 */

typedef struct _MMPTE_SUBSECTION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Unused0 : 2; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 OnStandbyLookaside : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 SwizzleBit : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 ColdPage : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 Unused2 : 3; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 ExecutePrivilege : 1; /* bit position: 15 */
    /* 0x0000 */ __int64 SubsectionAddress : 48; /* bit position: 16 */
  }; /* bitfield */
} MMPTE_SUBSECTION, *PMMPTE_SUBSECTION; /* size: 0x0008 */

typedef struct _MMPTE_LIST
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 OneEntry : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 filler0 : 2; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 SwizzleBit : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 filler1 : 13; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 NextEntry : 39; /* bit position: 25 */
  }; /* bitfield */
} MMPTE_LIST, *PMMPTE_LIST; /* size: 0x0008 */

typedef struct _MMPTE_ACTIVE_PAGE_TABLE_LINKS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Flink : 40; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 BlinkHigh : 24; /* bit position: 40 */
  }; /* bitfield */
} MMPTE_ACTIVE_PAGE_TABLE_LINKS, *PMMPTE_ACTIVE_PAGE_TABLE_LINKS; /* size: 0x0008 */

typedef struct _MMPTE
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned __int64 Long;
      /* 0x0000 */ struct _MMPTE_HARDWARE Hard;
      /* 0x0000 */ struct _MMPTE_PROTOTYPE Proto;
      /* 0x0000 */ struct _MMPTE_SOFTWARE Soft;
      /* 0x0000 */ struct _MMPTE_TIMESTAMP TimeStamp;
      /* 0x0000 */ struct _MMPTE_TRANSITION Trans;
      /* 0x0000 */ struct _MMPTE_SUBSECTION Subsect;
      /* 0x0000 */ struct _MMPTE_LIST List;
      /* 0x0000 */ struct _MMPTE_ACTIVE_PAGE_TABLE_LINKS PageTableLinks;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u;
} MMPTE, *PMMPTE; /* size: 0x0008 */

typedef struct _MIPFNBLINK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Blink : 40; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 NodeBlinkLow : 19; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 TbFlushStamp : 3; /* bit position: 59 */
      /* 0x0000 */ unsigned __int64 PageBlinkDeleteBit : 1; /* bit position: 62 */
      /* 0x0000 */ unsigned __int64 PageBlinkLockBit : 1; /* bit position: 63 */
    }; /* bitfield */
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 ShareCount : 62; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 PageShareCountDeleteBit : 1; /* bit position: 62 */
      /* 0x0000 */ unsigned __int64 PageShareCountLockBit : 1; /* bit position: 63 */
    }; /* bitfield */
    /* 0x0000 */ __int64 EntireField;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 LockNotUsed : 62; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 DeleteBit : 1; /* bit position: 62 */
      /* 0x0000 */ unsigned __int64 LockBit : 1; /* bit position: 63 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} MIPFNBLINK, *PMIPFNBLINK; /* size: 0x0008 */

typedef struct _MMPFNENTRY1
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char PageLocation : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned char WriteInProgress : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned char Modified : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned char ReadInProgress : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned char CacheAttribute : 2; /* bit position: 6 */
  }; /* bitfield */
} MMPFNENTRY1, *PMMPFNENTRY1; /* size: 0x0001 */

typedef struct _MMPFNENTRY3
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char Priority : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned char OnProtectedStandby : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned char InPageError : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned char SystemChargedPage : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned char RemovalRequested : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned char ParityError : 1; /* bit position: 7 */
  }; /* bitfield */
} MMPFNENTRY3, *PMMPFNENTRY3; /* size: 0x0001 */

typedef struct _MI_PFN_FLAGS
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short ReferenceCount;
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned char PageLocation : 3; /* bit position: 0 */
        /* 0x0002 */ unsigned char WriteInProgress : 1; /* bit position: 3 */
        /* 0x0002 */ unsigned char Modified : 1; /* bit position: 4 */
        /* 0x0002 */ unsigned char ReadInProgress : 1; /* bit position: 5 */
        /* 0x0002 */ unsigned char CacheAttribute : 2; /* bit position: 6 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0003 */ unsigned char Priority : 3; /* bit position: 0 */
        /* 0x0003 */ unsigned char OnProtectedStandby : 1; /* bit position: 3 */
        /* 0x0003 */ unsigned char InPageError : 1; /* bit position: 4 */
        /* 0x0003 */ unsigned char SystemChargedPage : 1; /* bit position: 5 */
        /* 0x0003 */ unsigned char RemovalRequested : 1; /* bit position: 6 */
        /* 0x0003 */ unsigned char ParityError : 1; /* bit position: 7 */
      }; /* bitfield */
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long EntireField;
  }; /* size: 0x0004 */
} MI_PFN_FLAGS, *PMI_PFN_FLAGS; /* size: 0x0004 */

typedef struct _MI_PFN_FLAGS5
{
  union
  {
    /* 0x0000 */ unsigned long EntireField;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long NodeBlinkHigh : 21; /* bit position: 0 */
        /* 0x0000 */ unsigned long NodeFlinkMiddle : 11; /* bit position: 21 */
      }; /* bitfield */
    } /* size: 0x0004 */ StandbyList;
    struct
    {
      /* 0x0000 */ unsigned char ModifiedListBucketIndex : 4; /* bit position: 0 */
    } /* size: 0x0001 */ MappedPageList;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long PageTableBlinkLow : 16; /* bit position: 0 */
        /* 0x0000 */ unsigned long PageTableBuddyHigh : 10; /* bit position: 16 */
        /* 0x0000 */ unsigned long PageTableLinked : 1; /* bit position: 26 */
        /* 0x0000 */ unsigned long AnchorLargePageSize : 2; /* bit position: 27 */
        /* 0x0000 */ unsigned long Spare1 : 3; /* bit position: 29 */
      }; /* bitfield */
    } /* size: 0x0004 */ Active;
  }; /* size: 0x0004 */
} MI_PFN_FLAGS5, *PMI_PFN_FLAGS5; /* size: 0x0004 */

typedef struct _MI_PFN_FLAGS4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 PteFrame : 40; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 ResidentPage : 1; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 ResidentPageContainsBadPages : 1; /* bit position: 41 */
      /* 0x0000 */ unsigned __int64 Unused1 : 1; /* bit position: 42 */
      /* 0x0000 */ unsigned __int64 Partition : 10; /* bit position: 43 */
      /* 0x0000 */ unsigned __int64 FileOnly : 1; /* bit position: 53 */
      /* 0x0000 */ unsigned __int64 PfnExists : 1; /* bit position: 54 */
      /* 0x0000 */ unsigned __int64 NodeFlinkHigh : 5; /* bit position: 55 */
      /* 0x0000 */ unsigned __int64 PageIdentity : 3; /* bit position: 60 */
      /* 0x0000 */ unsigned __int64 PrototypePte : 1; /* bit position: 63 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 EntireField;
  }; /* size: 0x0008 */
} MI_PFN_FLAGS4, *PMI_PFN_FLAGS4; /* size: 0x0008 */

typedef struct _MMPFN
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY ListEntry;
    /* 0x0000 */ struct _RTL_BALANCED_NODE TreeNode;
    struct
    {
      /* 0x0000 */ struct _MIPFNFLINK u1;
      union
      {
        /* 0x0008 */ struct _MMPTE* PteAddress;
        /* 0x0008 */ unsigned __int64 PteLong;
      }; /* size: 0x0008 */
      /* 0x0010 */ struct _MMPTE OriginalPte;
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
  /* 0x0018 */ volatile struct _MIPFNBLINK u2;
  union
  {
    union
    {
      struct
      {
        /* 0x0020 */ unsigned short ReferenceCount;
        /* 0x0022 */ struct _MMPFNENTRY1 e1;
        /* 0x0023 */ struct _MMPFNENTRY3 e3;
      }; /* size: 0x0004 */
      struct
      {
        /* 0x0020 */ unsigned short ReferenceCount;
      } /* size: 0x0002 */ e2;
      /* 0x0020 */ volatile struct _MI_PFN_FLAGS e4;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u3;
  /* 0x0024 */ struct _MI_PFN_FLAGS5 u5;
  /* 0x0028 */ struct _MI_PFN_FLAGS4 u4;
} MMPFN, *PMMPFN; /* size: 0x0030 */

typedef struct _MMPFNLIST
{
  /* 0x0000 */ volatile unsigned __int64 Total;
  /* 0x0008 */ struct _MI_COLOR Color;
  /* 0x000c */ enum _MMLISTS ListName;
  /* 0x0010 */ volatile unsigned __int64 Flink;
  /* 0x0018 */ volatile unsigned __int64 Blink;
  /* 0x0020 */ volatile long Lock;
  /* 0x0024 */ long Padding_0;
  /* 0x0028 */ struct _MMPFN EmbeddedPfn;
} MMPFNLIST, *PMMPFNLIST; /* size: 0x0058 */

typedef struct _UNICODE_STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ long Padding_1;
  /* 0x0008 */ wchar_t* Buffer;
} UNICODE_STRING, *PUNICODE_STRING; /* size: 0x0010 */

typedef struct _MM_DRIVER_VERIFIER_DATA
{
  /* 0x0000 */ unsigned long Level;
  /* 0x0004 */ volatile unsigned long RaiseIrqls;
  /* 0x0008 */ volatile unsigned long AcquireSpinLocks;
  /* 0x000c */ volatile unsigned long SynchronizeExecutions;
  /* 0x0010 */ volatile unsigned long AllocationsAttempted;
  /* 0x0014 */ volatile unsigned long AllocationsSucceeded;
  /* 0x0018 */ volatile unsigned long AllocationsSucceededSpecialPool;
  /* 0x001c */ unsigned long AllocationsWithNoTag;
  /* 0x0020 */ unsigned long TrimRequests;
  /* 0x0024 */ unsigned long Trims;
  /* 0x0028 */ unsigned long AllocationsFailed;
  /* 0x002c */ volatile unsigned long AllocationsFailedDeliberately;
  /* 0x0030 */ volatile unsigned long AllocationFreed;
  /* 0x0034 */ volatile unsigned long Loads;
  /* 0x0038 */ volatile unsigned long Unloads;
  /* 0x003c */ unsigned long UnTrackedPool;
  /* 0x0040 */ unsigned long UserTrims;
  /* 0x0044 */ volatile unsigned long CurrentPagedPoolAllocations;
  /* 0x0048 */ volatile unsigned long CurrentNonPagedPoolAllocations;
  /* 0x004c */ unsigned long PeakPagedPoolAllocations;
  /* 0x0050 */ unsigned long PeakNonPagedPoolAllocations;
  /* 0x0054 */ long Padding_2;
  /* 0x0058 */ volatile unsigned __int64 PagedBytes;
  /* 0x0060 */ volatile unsigned __int64 NonPagedBytes;
  /* 0x0068 */ unsigned __int64 PeakPagedBytes;
  /* 0x0070 */ unsigned __int64 PeakNonPagedBytes;
  /* 0x0078 */ volatile unsigned long BurstAllocationsFailedDeliberately;
  /* 0x007c */ unsigned long SessionTrims;
  /* 0x0080 */ volatile unsigned long OptionChanges;
  /* 0x0084 */ volatile unsigned long VerifyMode;
  /* 0x0088 */ struct _UNICODE_STRING PreviousBucketName;
} MM_DRIVER_VERIFIER_DATA, *PMM_DRIVER_VERIFIER_DATA; /* size: 0x0098 */

typedef enum _EX_POOL_PRIORITY
{
  LowPoolPriority = 0,
  LowPoolPrioritySpecialPoolOverrun = 8,
  LowPoolPrioritySpecialPoolUnderrun = 9,
  NormalPoolPriority = 16,
  NormalPoolPrioritySpecialPoolOverrun = 24,
  NormalPoolPrioritySpecialPoolUnderrun = 25,
  HighPoolPriority = 32,
  HighPoolPrioritySpecialPoolOverrun = 40,
  HighPoolPrioritySpecialPoolUnderrun = 41,
} EX_POOL_PRIORITY, *PEX_POOL_PRIORITY;

typedef enum _EVENT_TYPE
{
  NotificationEvent = 0,
  SynchronizationEvent = 1,
} EVENT_TYPE, *PEVENT_TYPE;

typedef struct _KGROUP_MASK
{
  /* 0x0000 */ unsigned __int64 Masks[2];
} KGROUP_MASK, *PKGROUP_MASK; /* size: 0x0010 */

typedef union _TIMELINE_BITMAP
{
  union
  {
    /* 0x0000 */ unsigned __int64 Value;
    struct
    {
      /* 0x0000 */ unsigned long EndTime;
      /* 0x0004 */ unsigned long Bitmap;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} TIMELINE_BITMAP, *PTIMELINE_BITMAP; /* size: 0x0008 */

typedef enum _MEMORY_CACHING_TYPE
{
  MmNonCached = 0,
  MmCached = 1,
  MmWriteCombined = 2,
  MmHardwareCoherentCached = 3,
  MmNonCachedUnordered = 4,
  MmUSWCCached = 5,
  MmMaximumCacheType = 6,
  MmNotMapped = -1,
} MEMORY_CACHING_TYPE, *PMEMORY_CACHING_TYPE;

typedef struct _LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION
{
  /* 0x0000 */ unsigned char OriginalBootStatus;
  /* 0x0001 */ unsigned char NewBootStatus;
  /* 0x0002 */ unsigned char ConfigurationLoaded;
  /* 0x0003 */ unsigned char Spare;
  union
  {
    union
    {
      /* 0x0004 */ unsigned long AllFlags;
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned long LkgSupported : 1; /* bit position: 0 */
        /* 0x0004 */ unsigned long FinalBootBeforeRecovery : 1; /* bit position: 1 */
        /* 0x0004 */ unsigned long ConfigurationComparisonAttempted : 1; /* bit position: 2 */
        /* 0x0004 */ unsigned long CurrentConfigurationLoadAttempted : 1; /* bit position: 3 */
        /* 0x0004 */ unsigned long LkgConfigurationLoadAttempted : 1; /* bit position: 4 */
        /* 0x0004 */ unsigned long UsageSubscriptionLoadAttempted : 1; /* bit position: 5 */
        /* 0x0004 */ unsigned long Spare : 26; /* bit position: 6 */
      }; /* bitfield */
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Flags;
  /* 0x0008 */ long ConfigurationComparisonStatus;
  /* 0x000c */ long CurrentConfigurationLoadStatus;
  /* 0x0010 */ long LkgConfigurationLoadStatus;
  /* 0x0014 */ long UsageSubscriptionLoadStatus;
} LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION, *PLOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION; /* size: 0x0018 */

typedef enum _FILE_INFORMATION_CLASS
{
  FileDirectoryInformation = 1,
  FileFullDirectoryInformation = 2,
  FileBothDirectoryInformation = 3,
  FileBasicInformation = 4,
  FileStandardInformation = 5,
  FileInternalInformation = 6,
  FileEaInformation = 7,
  FileAccessInformation = 8,
  FileNameInformation = 9,
  FileRenameInformation = 10,
  FileLinkInformation = 11,
  FileNamesInformation = 12,
  FileDispositionInformation = 13,
  FilePositionInformation = 14,
  FileFullEaInformation = 15,
  FileModeInformation = 16,
  FileAlignmentInformation = 17,
  FileAllInformation = 18,
  FileAllocationInformation = 19,
  FileEndOfFileInformation = 20,
  FileAlternateNameInformation = 21,
  FileStreamInformation = 22,
  FilePipeInformation = 23,
  FilePipeLocalInformation = 24,
  FilePipeRemoteInformation = 25,
  FileMailslotQueryInformation = 26,
  FileMailslotSetInformation = 27,
  FileCompressionInformation = 28,
  FileObjectIdInformation = 29,
  FileCompletionInformation = 30,
  FileMoveClusterInformation = 31,
  FileQuotaInformation = 32,
  FileReparsePointInformation = 33,
  FileNetworkOpenInformation = 34,
  FileAttributeTagInformation = 35,
  FileTrackingInformation = 36,
  FileIdBothDirectoryInformation = 37,
  FileIdFullDirectoryInformation = 38,
  FileValidDataLengthInformation = 39,
  FileShortNameInformation = 40,
  FileIoCompletionNotificationInformation = 41,
  FileIoStatusBlockRangeInformation = 42,
  FileIoPriorityHintInformation = 43,
  FileSfioReserveInformation = 44,
  FileSfioVolumeInformation = 45,
  FileHardLinkInformation = 46,
  FileProcessIdsUsingFileInformation = 47,
  FileNormalizedNameInformation = 48,
  FileNetworkPhysicalNameInformation = 49,
  FileIdGlobalTxDirectoryInformation = 50,
  FileIsRemoteDeviceInformation = 51,
  FileUnusedInformation = 52,
  FileNumaNodeInformation = 53,
  FileStandardLinkInformation = 54,
  FileRemoteProtocolInformation = 55,
  FileRenameInformationBypassAccessCheck = 56,
  FileLinkInformationBypassAccessCheck = 57,
  FileVolumeNameInformation = 58,
  FileIdInformation = 59,
  FileIdExtdDirectoryInformation = 60,
  FileReplaceCompletionInformation = 61,
  FileHardLinkFullIdInformation = 62,
  FileIdExtdBothDirectoryInformation = 63,
  FileDispositionInformationEx = 64,
  FileRenameInformationEx = 65,
  FileRenameInformationExBypassAccessCheck = 66,
  FileDesiredStorageClassInformation = 67,
  FileStatInformation = 68,
  FileMemoryPartitionInformation = 69,
  FileStatLxInformation = 70,
  FileCaseSensitiveInformation = 71,
  FileLinkInformationEx = 72,
  FileLinkInformationExBypassAccessCheck = 73,
  FileStorageReserveIdInformation = 74,
  FileCaseSensitiveInformationForceAccessCheck = 75,
  FileKnownFolderInformation = 76,
  FileStatBasicInformation = 77,
  FileId64ExtdDirectoryInformation = 78,
  FileId64ExtdBothDirectoryInformation = 79,
  FileIdAllExtdDirectoryInformation = 80,
  FileIdAllExtdBothDirectoryInformation = 81,
  FileStreamReservationInformation = 82,
  FileMupProviderInfo = 83,
  FileMaximumInformation = 84,
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

typedef struct _EVENT_FILTER_LEVEL_KW
{
  /* 0x0000 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0008 */ unsigned __int64 MatchAllKeyword;
  /* 0x0010 */ unsigned char Level;
  /* 0x0011 */ unsigned char FilterIn;
  /* 0x0012 */ char __PADDING__[6];
} EVENT_FILTER_LEVEL_KW, *PEVENT_FILTER_LEVEL_KW; /* size: 0x0018 */

typedef struct _RTL_AVL_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
} RTL_AVL_TREE, *PRTL_AVL_TREE; /* size: 0x0008 */

typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS
{
  DirectoryNotifyInformation = 1,
  DirectoryNotifyExtendedInformation = 2,
  DirectoryNotifyFullInformation = 3,
  DirectoryNotifyMaximumInformation = 4,
} DIRECTORY_NOTIFY_INFORMATION_CLASS, *PDIRECTORY_NOTIFY_INFORMATION_CLASS;

typedef struct _FAULT_INFORMATION_X64_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long FaultAddressValid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long Reserved : 31; /* bit position: 1 */
  }; /* bitfield */
} FAULT_INFORMATION_X64_FLAGS, *PFAULT_INFORMATION_X64_FLAGS; /* size: 0x0004 */

typedef enum _FAULT_INFORMATION_ARM64_TYPE
{
  UnsupportedUpstreamTransaction = 0,
  AddressSizeFault = 1,
  TlbMatchConflict = 2,
  ExternalFault = 3,
  PermissionFault = 4,
  AccessFlagFault = 5,
  TranslationFault = 6,
  MaxFaultType = 7,
} FAULT_INFORMATION_ARM64_TYPE, *PFAULT_INFORMATION_ARM64_TYPE;

typedef struct _FAULT_INFORMATION_X64
{
  /* 0x0000 */ void* DomainHandle;
  /* 0x0008 */ void* FaultAddress;
  /* 0x0010 */ struct _FAULT_INFORMATION_X64_FLAGS Flags;
  /* 0x0014 */ enum _FAULT_INFORMATION_ARM64_TYPE Type;
  /* 0x0018 */ unsigned __int64 IommuBaseAddress;
  /* 0x0020 */ unsigned long PciSegment;
  /* 0x0024 */ long __PADDING__[1];
} FAULT_INFORMATION_X64, *PFAULT_INFORMATION_X64; /* size: 0x0028 */

typedef struct _MMSUPPORT_FLAGS
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned char WorkingSetType : 4; /* bit position: 0 */
        /* 0x0000 */ unsigned char Reserved0 : 2; /* bit position: 4 */
        /* 0x0000 */ unsigned char MaximumWorkingSetHard : 1; /* bit position: 6 */
        /* 0x0000 */ unsigned char MinimumWorkingSetHard : 1; /* bit position: 7 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0001 */ unsigned char Reserved1 : 1; /* bit position: 0 */
        /* 0x0001 */ unsigned char TrimmerState : 2; /* bit position: 1 */
        /* 0x0001 */ unsigned char LinearAddressProtected : 1; /* bit position: 3 */
        /* 0x0001 */ unsigned char PageStealers : 4; /* bit position: 4 */
      }; /* bitfield */
    }; /* size: 0x0002 */
    struct
    {
      /* 0x0000 */ unsigned short u1;
      /* 0x0002 */ unsigned char MemoryPriority;
      union
      {
        struct /* bitfield */
        {
          /* 0x0003 */ unsigned char WsleDeleted : 1; /* bit position: 0 */
          /* 0x0003 */ unsigned char SvmEnabled : 1; /* bit position: 1 */
          /* 0x0003 */ unsigned char ForceAge : 1; /* bit position: 2 */
          /* 0x0003 */ unsigned char ForceTrim : 1; /* bit position: 3 */
          /* 0x0003 */ unsigned char CommitReleaseState : 2; /* bit position: 4 */
          /* 0x0003 */ unsigned char Reserved2 : 2; /* bit position: 6 */
        }; /* bitfield */
        /* 0x0003 */ unsigned char u2;
      }; /* size: 0x0001 */
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long EntireFlags;
  }; /* size: 0x0004 */
} MMSUPPORT_FLAGS, *PMMSUPPORT_FLAGS; /* size: 0x0004 */

typedef struct _MMSUPPORT_INSTANCE
{
  /* 0x0000 */ unsigned long NextPageColor;
  /* 0x0004 */ volatile unsigned long PageFaultCount;
  /* 0x0008 */ unsigned __int64 TrimmedPageCount;
  /* 0x0010 */ struct _MMWSL_INSTANCE* VmWorkingSetList;
  /* 0x0018 */ struct _LIST_ENTRY WorkingSetExpansionLinks;
  /* 0x0028 */ volatile unsigned __int64 AgeDistribution[8];
  /* 0x0068 */ struct _KGATE* ExitOutswapGate;
  /* 0x0070 */ unsigned __int64 MinimumWorkingSetSize;
  /* 0x0078 */ unsigned __int64 MaximumWorkingSetSize;
  /* 0x0080 */ volatile unsigned __int64 WorkingSetLeafSize;
  /* 0x0088 */ volatile unsigned __int64 WorkingSetLeafPrivateSize;
  /* 0x0090 */ volatile unsigned __int64 WorkingSetSize;
  /* 0x0098 */ volatile unsigned __int64 WorkingSetPrivateSize;
  /* 0x00a0 */ volatile unsigned __int64 PeakWorkingSetSize;
  /* 0x00a8 */ unsigned long HardFaultCount;
  /* 0x00ac */ unsigned short LastTrimStamp;
  /* 0x00ae */ unsigned short PartitionId;
  /* 0x00b0 */ unsigned __int64 SelfmapLock;
  /* 0x00b8 */ volatile struct _MMSUPPORT_FLAGS Flags;
  /* 0x00bc */ volatile unsigned long InterlockedFlags;
} MMSUPPORT_INSTANCE, *PMMSUPPORT_INSTANCE; /* size: 0x00c0 */

typedef struct _MMSUPPORT_SHARED
{
  /* 0x0000 */ void* WorkingSetLockArray;
  /* 0x0008 */ unsigned __int64 ReleasedCommitDebt;
  /* 0x0010 */ unsigned __int64 ResetPagesRepurposedCount;
  /* 0x0018 */ void* WsSwapSupport;
  /* 0x0020 */ void* CommitReleaseContext;
  /* 0x0028 */ void* AccessLog;
  /* 0x0030 */ volatile unsigned __int64 ChargedWslePages;
  /* 0x0038 */ volatile unsigned __int64 ActualWslePages;
  /* 0x0040 */ volatile long WorkingSetCoreLock;
  /* 0x0044 */ long Padding_3;
  /* 0x0048 */ void* ShadowMapping;
  /* 0x0050 */ long __PADDING__[12];
} MMSUPPORT_SHARED, *PMMSUPPORT_SHARED; /* size: 0x0080 */

typedef struct _MMSUPPORT_FULL
{
  /* 0x0000 */ struct _MMSUPPORT_INSTANCE Instance;
  /* 0x00c0 */ struct _MMSUPPORT_SHARED Shared;
} MMSUPPORT_FULL, *PMMSUPPORT_FULL; /* size: 0x0140 */

typedef enum _FSINFOCLASS
{
  FileFsVolumeInformation = 1,
  FileFsLabelInformation = 2,
  FileFsSizeInformation = 3,
  FileFsDeviceInformation = 4,
  FileFsAttributeInformation = 5,
  FileFsControlInformation = 6,
  FileFsFullSizeInformation = 7,
  FileFsObjectIdInformation = 8,
  FileFsDriverPathInformation = 9,
  FileFsVolumeFlagsInformation = 10,
  FileFsSectorSizeInformation = 11,
  FileFsDataCopyInformation = 12,
  FileFsMetadataSizeInformation = 13,
  FileFsFullSizeInformationEx = 14,
  FileFsGuidInformation = 15,
  FileFsMaximumInformation = 16,
} FSINFOCLASS, *PFSINFOCLASS;

struct PROCESSOR_IDLESTATE_INFO
{
  /* 0x0000 */ unsigned long TimeCheck;
  /* 0x0004 */ unsigned char DemotePercent;
  /* 0x0005 */ unsigned char PromotePercent;
  /* 0x0006 */ unsigned char Spare[2];
}; /* size: 0x0008 */

typedef struct _BOOT_FIRMWARE_RAMDISK_INFO
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long BlockSize;
  /* 0x0008 */ unsigned __int64 BaseAddress;
  /* 0x0010 */ unsigned __int64 Size;
} BOOT_FIRMWARE_RAMDISK_INFO, *PBOOT_FIRMWARE_RAMDISK_INFO; /* size: 0x0018 */

enum BUS_QUERY_ID_TYPE
{
  BusQueryDeviceID = 0,
  BusQueryHardwareIDs = 1,
  BusQueryCompatibleIDs = 2,
  BusQueryInstanceID = 3,
  BusQueryDeviceSerialNumber = 4,
  BusQueryContainerID = 5,
};

enum DEVICE_TEXT_TYPE
{
  DeviceTextDescription = 0,
  DeviceTextLocationInformation = 1,
};

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE
{
  DeviceUsageTypeUndefined = 0,
  DeviceUsageTypePaging = 1,
  DeviceUsageTypeHibernation = 2,
  DeviceUsageTypeDumpFile = 3,
  DeviceUsageTypeBoot = 4,
  DeviceUsageTypePostDisplay = 5,
  DeviceUsageTypeGuestAssigned = 6,
} DEVICE_USAGE_NOTIFICATION_TYPE, *PDEVICE_USAGE_NOTIFICATION_TYPE;

typedef struct _LOADER_FEATURE_CONFIGURATION_INFORMATION
{
  /* 0x0000 */ void* FeatureConfigurationBuffer;
  /* 0x0008 */ unsigned __int64 FeatureConfigurationBufferSize;
  /* 0x0010 */ void* UsageSubscriptionBuffer;
  /* 0x0018 */ unsigned __int64 UsageSubscriptionBufferSize;
  /* 0x0020 */ void* DelayedUsageReportBuffer;
  /* 0x0028 */ unsigned __int64 DelayedUsageReportBufferSize;
  /* 0x0030 */ struct _LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION DiagnosticInformation;
} LOADER_FEATURE_CONFIGURATION_INFORMATION, *PLOADER_FEATURE_CONFIGURATION_INFORMATION; /* size: 0x0048 */

typedef enum _SYSTEM_POWER_STATE
{
  PowerSystemUnspecified = 0,
  PowerSystemWorking = 1,
  PowerSystemSleeping1 = 2,
  PowerSystemSleeping2 = 3,
  PowerSystemSleeping3 = 4,
  PowerSystemHibernate = 5,
  PowerSystemShutdown = 6,
  PowerSystemMaximum = 7,
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

typedef struct _LOADER_MEMORY_RANGE
{
  /* 0x0000 */ unsigned __int64 StartPage;
  /* 0x0008 */ unsigned __int64 NumberOfPages;
} LOADER_MEMORY_RANGE, *PLOADER_MEMORY_RANGE; /* size: 0x0010 */

typedef enum _POWER_STATE_TYPE
{
  SystemPowerState = 0,
  DevicePowerState = 1,
} POWER_STATE_TYPE, *PPOWER_STATE_TYPE;

typedef struct _DBGKD_READ_MEMORY32
{
  /* 0x0000 */ unsigned long TargetBaseAddress;
  /* 0x0004 */ unsigned long TransferCount;
  /* 0x0008 */ unsigned long ActualBytesRead;
} DBGKD_READ_MEMORY32, *PDBGKD_READ_MEMORY32; /* size: 0x000c */

enum POWER_ACTION
{
  PowerActionNone = 0,
  PowerActionReserved = 1,
  PowerActionSleep = 2,
  PowerActionHibernate = 3,
  PowerActionShutdown = 4,
  PowerActionShutdownReset = 5,
  PowerActionShutdownOff = 6,
  PowerActionWarmEject = 7,
  PowerActionDisplayOff = 8,
};

typedef union _CM_TRANS_PTR
{
  union
  {
    /* 0x0000 */ unsigned __int64 LightWeight : 1; /* bit position: 0 */
    /* 0x0000 */ void* TransPtr;
  }; /* size: 0x0008 */
} CM_TRANS_PTR, *PCM_TRANS_PTR; /* size: 0x0008 */

typedef struct _CM_KEY_BODY
{
  /* 0x0000 */ unsigned long Type;
  /* 0x0004 */ unsigned short AccessCheckedLayerHeight;
  /* 0x0006 */ char Padding_4[2];
  /* 0x0008 */ struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;
  /* 0x0010 */ struct _CM_NOTIFY_BLOCK* NotifyBlock;
  /* 0x0018 */ void* ProcessID;
  /* 0x0020 */ struct _LIST_ENTRY KeyBodyList;
  struct /* bitfield */
  {
    /* 0x0030 */ unsigned long Flags : 16; /* bit position: 0 */
    /* 0x0030 */ unsigned long HandleTags : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x0034 */ long Padding_5;
  /* 0x0038 */ union _CM_TRANS_PTR Trans;
  /* 0x0040 */ struct _GUID* KtmUow;
  /* 0x0048 */ struct _LIST_ENTRY ContextListHead;
  /* 0x0058 */ void* EnumerationResumeContext;
  /* 0x0060 */ unsigned long RestrictedAccessMask;
  /* 0x0064 */ unsigned long LastSearchedIndex;
  /* 0x0068 */ void* LockedMemoryMdls;
} CM_KEY_BODY, *PCM_KEY_BODY; /* size: 0x0070 */

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ __int64 QuadPart;
  }; /* size: 0x0008 */
} LARGE_INTEGER, *PLARGE_INTEGER; /* size: 0x0008 */

typedef enum _DEVICE_POWER_STATE
{
  PowerDeviceUnspecified = 0,
  PowerDeviceD0 = 1,
  PowerDeviceD1 = 2,
  PowerDeviceD2 = 3,
  PowerDeviceD3 = 4,
  PowerDeviceMaximum = 5,
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef struct _ARBITER_ORDERING_LIST
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ unsigned short Maximum;
  /* 0x0004 */ long Padding_6;
  /* 0x0008 */ struct _ARBITER_ORDERING* Orderings;
} ARBITER_ORDERING_LIST, *PARBITER_ORDERING_LIST; /* size: 0x0010 */

typedef struct _ARBITER_INSTANCE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ long Padding_7;
  /* 0x0008 */ struct _KEVENT* MutexEvent;
  /* 0x0010 */ wchar_t* Name;
  /* 0x0018 */ wchar_t* OrderingName;
  /* 0x0020 */ int ResourceType;
  /* 0x0024 */ long Padding_8;
  /* 0x0028 */ struct _RTL_RANGE_LIST* Allocation;
  /* 0x0030 */ struct _RTL_RANGE_LIST* PossibleAllocation;
  /* 0x0038 */ struct _ARBITER_ORDERING_LIST OrderingList;
  /* 0x0048 */ struct _ARBITER_ORDERING_LIST ReservedList;
  /* 0x0058 */ long ReferenceCount;
  /* 0x005c */ long Padding_9;
  /* 0x0060 */ struct _ARBITER_INTERFACE* Interface;
  /* 0x0068 */ unsigned long AllocationStackMaxSize;
  /* 0x006c */ long Padding_10;
  /* 0x0070 */ struct _ARBITER_ALLOCATION_STATE* AllocationStack;
  /* 0x0078 */ void* UnpackRequirement /* function */;
  /* 0x0080 */ void* PackResource /* function */;
  /* 0x0088 */ void* UnpackResource /* function */;
  /* 0x0090 */ void* ScoreRequirement /* function */;
  /* 0x0098 */ void* TestAllocation /* function */;
  /* 0x00a0 */ void* RetestAllocation /* function */;
  /* 0x00a8 */ void* CommitAllocation /* function */;
  /* 0x00b0 */ void* RollbackAllocation /* function */;
  /* 0x00b8 */ void* BootAllocation /* function */;
  /* 0x00c0 */ void* QueryArbitrate /* function */;
  /* 0x00c8 */ void* QueryConflict /* function */;
  /* 0x00d0 */ void* AddReserved /* function */;
  /* 0x00d8 */ void* StartArbiter /* function */;
  /* 0x00e0 */ void* PreprocessEntry /* function */;
  /* 0x00e8 */ void* AllocateEntry /* function */;
  /* 0x00f0 */ void* GetNextAllocationRange /* function */;
  /* 0x00f8 */ void* FindSuitableRange /* function */;
  /* 0x0100 */ void* AddAllocation /* function */;
  /* 0x0108 */ void* BacktrackAllocation /* function */;
  /* 0x0110 */ void* OverrideConflict /* function */;
  /* 0x0118 */ void* InitializeRangeList /* function */;
  /* 0x0120 */ void* DeleteOwnerRanges /* function */;
  /* 0x0128 */ unsigned char TransactionInProgress;
  /* 0x0129 */ char Padding_11[7];
  /* 0x0130 */ struct _KEVENT* TransactionEvent;
  /* 0x0138 */ void* Extension;
  /* 0x0140 */ struct _DEVICE_OBJECT* BusDeviceObject;
  /* 0x0148 */ void* ConflictCallbackContext;
  /* 0x0150 */ void* ConflictCallback /* function */;
} ARBITER_INSTANCE, *PARBITER_INSTANCE; /* size: 0x0158 */

typedef struct _GUID
{
  /* 0x0000 */ unsigned long Data1;
  /* 0x0004 */ unsigned short Data2;
  /* 0x0006 */ unsigned short Data3;
  /* 0x0008 */ unsigned char Data4[8];
} GUID, *PGUID; /* size: 0x0010 */

typedef enum _DEVICE_WAKE_DEPTH
{
  DeviceWakeDepthNotWakeable = 0,
  DeviceWakeDepthD0 = 1,
  DeviceWakeDepthD1 = 2,
  DeviceWakeDepthD2 = 3,
  DeviceWakeDepthD3hot = 4,
  DeviceWakeDepthD3cold = 5,
  DeviceWakeDepthMaximum = 6,
} DEVICE_WAKE_DEPTH, *PDEVICE_WAKE_DEPTH;

typedef enum _WHEA_ERROR_SOURCE_TYPE
{
  WheaErrSrcTypeMCE = 0,
  WheaErrSrcTypeCMC = 1,
  WheaErrSrcTypeCPE = 2,
  WheaErrSrcTypeNMI = 3,
  WheaErrSrcTypePCIe = 4,
  WheaErrSrcTypeGeneric = 5,
  WheaErrSrcTypeINIT = 6,
  WheaErrSrcTypeBOOT = 7,
  WheaErrSrcTypeSCIGeneric = 8,
  WheaErrSrcTypeIPFMCA = 9,
  WheaErrSrcTypeIPFCMC = 10,
  WheaErrSrcTypeIPFCPE = 11,
  WheaErrSrcTypeGenericV2 = 12,
  WheaErrSrcTypeSCIGenericV2 = 13,
  WheaErrSrcTypeBMC = 14,
  WheaErrSrcTypePMEM = 15,
  WheaErrSrcTypeDeviceDriver = 16,
  WheaErrSrcTypeSea = 17,
  WheaErrSrcTypeSei = 18,
  WheaErrSrcTypeMax = 19,
} WHEA_ERROR_SOURCE_TYPE, *PWHEA_ERROR_SOURCE_TYPE;

typedef enum _WHEA_ERROR_SOURCE_STATE
{
  WheaErrSrcStateStopped = 1,
  WheaErrSrcStateStarted = 2,
  WheaErrSrcStateRemoved = 3,
  WheaErrSrcStateRemovePending = 4,
} WHEA_ERROR_SOURCE_STATE, *PWHEA_ERROR_SOURCE_STATE;

typedef enum _WHEA_EVENT_LOG_ENTRY_TYPE
{
  WheaEventLogEntryTypeInformational = 0,
  WheaEventLogEntryTypeWarning = 1,
  WheaEventLogEntryTypeError = 2,
} WHEA_EVENT_LOG_ENTRY_TYPE, *PWHEA_EVENT_LOG_ENTRY_TYPE;

typedef enum _WHEA_EVENT_LOG_ENTRY_ID
{
  WheaEventLogEntryIdCmcPollingTimeout = -2147483647,
  WheaEventLogEntryIdWheaInit = -2147483646,
  WheaEventLogEntryIdCmcSwitchToPolling = -2147483645,
  WheaEventLogEntryIdDroppedCorrectedError = -2147483644,
  WheaEventLogEntryIdStartedReportHwError = -2147483643,
  WheaEventLogEntryIdPFAMemoryOfflined = -2147483642,
  WheaEventLogEntryIdPFAMemoryRemoveMonitor = -2147483641,
  WheaEventLogEntryIdPFAMemoryPolicy = -2147483640,
  WheaEventLogEntryIdPshedInjectError = -2147483639,
  WheaEventLogEntryIdOscCapabilities = -2147483638,
  WheaEventLogEntryIdPshedPluginRegister = -2147483637,
  WheaEventLogEntryIdAddRemoveErrorSource = -2147483636,
  WheaEventLogEntryIdWorkQueueItem = -2147483635,
  WheaEventLogEntryIdAttemptErrorRecovery = -2147483634,
  WheaEventLogEntryIdMcaFoundErrorInBank = -2147483633,
  WheaEventLogEntryIdMcaStuckErrorCheck = -2147483632,
  WheaEventLogEntryIdMcaErrorCleared = -2147483631,
  WheaEventLogEntryIdClearedPoison = -2147483630,
  WheaEventLogEntryIdProcessEINJ = -2147483629,
  WheaEventLogEntryIdProcessHEST = -2147483628,
  WheaEventLogEntryIdCreateGenericRecord = -2147483627,
  WheaEventLogEntryIdErrorRecord = -2147483626,
  WheaEventLogEntryIdErrorRecordLimit = -2147483625,
  WheaEventLogEntryIdAerNotGrantedToOs = -2147483624,
  WheaEventLogEntryIdErrSrcArrayInvalid = -2147483623,
  WheaEventLogEntryIdAcpiTimeOut = -2147483622,
  WheaEventLogCmciRestart = -2147483621,
  WheaEventLogCmciFinalRestart = -2147483620,
  WheaEventLogEntryEtwOverFlow = -2147483619,
  WheaEventLogAzccRootBusSearchErr = -2147483618,
  WheaEventLogAzccRootBusList = -2147483617,
  WheaEventLogEntryIdErrSrcInvalid = -2147483616,
  WheaEventLogEntryIdGenericErrMemMap = -2147483615,
  WheaEventLogEntryIdPshedCallbackCollision = -2147483614,
  WheaEventLogEntryIdSELBugCheckProgress = -2147483613,
  WheaEventLogEntryIdPshedPluginLoad = -2147483612,
  WheaEventLogEntryIdPshedPluginUnload = -2147483611,
  WheaEventLogEntryIdPshedPluginSupported = -2147483610,
  WheaEventLogEntryIdDeviceDriver = -2147483609,
  WheaEventLogEntryIdCmciImplPresent = -2147483608,
  WheaEventLogEntryIdCmciInitError = -2147483607,
  WheaEventLogEntryIdSELBugCheckRecovery = -2147483606,
  WheaEventLogEntryIdDrvErrSrcInvalid = -2147483605,
  WheaEventLogEntryIdDrvHandleBusy = -2147483604,
  WheaEventLogEntryIdWheaHeartbeat = -2147483603,
  WheaEventLogAzccRootBusPoisonSet = -2147483602,
  WheaEventLogEntryIdSELBugCheckInfo = -2147483601,
  WheaEventLogEntryIdErrDimmInfoMismatch = -2147483600,
  WheaEventLogEntryIdeDpcEnabled = -2147483599,
  WheaEventLogEntryPageOfflineDone = -2147483598,
  WheaEventLogEntryPageOfflinePendMax = -2147483597,
  WheaEventLogEntryIdBadPageLimitReached = -2147483596,
  WheaEventLogEntrySrarDetail = -2147483595,
  WheaEventLogEntryEarlyError = -2147483594,
  WheaEventLogEntryIdPcieOverrideInfo = -2147483593,
  WheaEventLogEntryIdReadPcieOverridesErr = -2147483592,
  WheaEventLogEntryIdPcieConfigInfo = -2147483591,
  WheaEventLogEntryIdPcieSummaryFailed = -2147483584,
  WheaEventLogEntryIdThrottleRegCorrupt = -2147483583,
  WheaEventLogEntryIdThrottleAddErrSrcFailed = -2147483582,
  WheaEventLogEntryIdThrottleRegDataIgnored = -2147483581,
  WheaEventLogEntryIdEnableKeyNotifFailed = -2147483580,
  WheaEventLogEntryIdKeyNotificationFailed = -2147483579,
  WheaEventLogEntryIdPcieRemoveDevice = -2147483578,
  WheaEventLogEntryIdPcieAddDevice = -2147483577,
  WheaEventLogEntryIdPcieSpuriousErrSource = -2147483576,
  WheaEventLogEntryIdMemoryAddDevice = -2147483575,
  WheaEventLogEntryIdMemoryRemoveDevice = -2147483574,
  WheaEventLogEntryIdMemorySummaryFailed = -2147483573,
  WheaEventLogEntryIdPcieDpcError = -2147483572,
  WheaEventLogEntryIdCpuBusesInitFailed = -2147483571,
  WheaEventLogEntryIdPshedPluginInitFailed = -2147483570,
  WheaEventLogEntryIdFailedAddToDefectList = -2147483569,
  WheaEventLogEntryIdDefectListFull = -2147483568,
  WheaEventLogEntryIdDefectListUEFIVarFailed = -2147483567,
  WheaEventLogEntryIdDefectListCorrupt = -2147483566,
  WheaEventLogEntryIdBadHestNotifyData = -2147483565,
  WheaEventLogEntryIdRowFailure = -2147483564,
  WheaEventLogEntryIdSrasTableNotFound = -2147483563,
  WheaEventLogEntryIdSrasTableError = -2147483562,
  WheaEventLogEntryIdSrasTableEntries = -2147483561,
  WheaEventLogEntryIdPFANotifyCallbackAction = -2147483560,
  WheaEventLogEntryIdSELBugCheckCpusQuiesced = -2147483559,
  WheaEventLogEntryIdPshedPiCpuid = -2147483558,
  WheaEventLogEntryIdSrasTableBadData = -2147483557,
  WheaEventLogEntryIdDriFsStatus = -2147483556,
  WheaEventLogEntryIdCpusFrozen = -2147483552,
  WheaEventLogEntryIdCpusFrozenNoCrashDump = -2147483551,
  WheaEventLogEntryIdRegNotifyPolicyChange = -2147483550,
  WheaEventLogEntryIdRegError = -2147483549,
  WheaEventLogEntryIdRowOfflineEvent = -2147483548,
  WheaEventLogEntryIdBitOfflineEvent = -2147483547,
  WheaEventLogEntryIdBadGasFields = -2147483546,
  WheaEventLogEntryIdCrashDumpError = -2147483545,
  WheaEventLogEntryIdCrashDumpCheckpoint = -2147483544,
  WheaEventLogEntryIdCrashDumpProgressPercent = -2147483543,
  WheaEventLogEntryIdPreviousCrashBugCheckProgress = -2147483542,
  WheaEventLogEntryIdSELBugCheckStackDump = -2147483541,
  WheaEventLogEntryIdPciePromotedAerErr = -2147483540,
  WheaEventLogEntryIdPshedPiTraceLog = -2147221488,
} WHEA_EVENT_LOG_ENTRY_ID, *PWHEA_EVENT_LOG_ENTRY_ID;

typedef struct _SINGLE_LIST_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; /* size: 0x0008 */

typedef struct _ETW_BUFFER_QUEUE
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* QueueTail;
  /* 0x0008 */ struct _SINGLE_LIST_ENTRY QueueEntry;
} ETW_BUFFER_QUEUE, *PETW_BUFFER_QUEUE; /* size: 0x0010 */

typedef enum _WHEA_ERROR_TYPE
{
  WheaErrTypeProcessor = 0,
  WheaErrTypeMemory = 1,
  WheaErrTypePCIExpress = 2,
  WheaErrTypeNMI = 3,
  WheaErrTypePCIXBus = 4,
  WheaErrTypePCIXDevice = 5,
  WheaErrTypeGeneric = 6,
  WheaErrTypePmem = 7,
} WHEA_ERROR_TYPE, *PWHEA_ERROR_TYPE;

typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Locked : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Waiting : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 Waking : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 MultipleShared : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 Shared : 60; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 Value;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0008 */
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; /* size: 0x0008 */

typedef struct _HANDLE_TABLE_FREE_LIST
{
  /* 0x0000 */ struct _EX_PUSH_LOCK FreeListLock;
  /* 0x0008 */ union _HANDLE_TABLE_ENTRY* FirstFreeHandleEntry;
  /* 0x0010 */ union _HANDLE_TABLE_ENTRY* LastFreeHandleEntry;
  /* 0x0018 */ long HandleCount;
  /* 0x001c */ unsigned long HighWaterMark;
  /* 0x0020 */ long __PADDING__[8];
} HANDLE_TABLE_FREE_LIST, *PHANDLE_TABLE_FREE_LIST; /* size: 0x0040 */

typedef enum _WHEA_ERROR_SEVERITY
{
  WheaErrSevRecoverable = 0,
  WheaErrSevFatal = 1,
  WheaErrSevCorrected = 2,
  WheaErrSevInformational = 3,
} WHEA_ERROR_SEVERITY, *PWHEA_ERROR_SEVERITY;

typedef enum _MEM_DEDICATED_ATTRIBUTE_TYPE
{
  MemDedicatedAttributeReadBandwidth = 0,
  MemDedicatedAttributeReadLatency = 1,
  MemDedicatedAttributeWriteBandwidth = 2,
  MemDedicatedAttributeWriteLatency = 3,
  MemDedicatedAttributeMax = 4,
} MEM_DEDICATED_ATTRIBUTE_TYPE, *PMEM_DEDICATED_ATTRIBUTE_TYPE;

typedef enum _TYPE_OF_MEMORY
{
  LoaderExceptionBlock = 0,
  LoaderSystemBlock = 1,
  LoaderFree = 2,
  LoaderBad = 3,
  LoaderLoadedProgram = 4,
  LoaderFirmwareTemporary = 5,
  LoaderFirmwarePermanent = 6,
  LoaderOsloaderHeap = 7,
  LoaderOsloaderStack = 8,
  LoaderSystemCode = 9,
  LoaderHalCode = 10,
  LoaderBootDriver = 11,
  LoaderConsoleInDriver = 12,
  LoaderConsoleOutDriver = 13,
  LoaderStartupDpcStack = 14,
  LoaderStartupKernelStack = 15,
  LoaderStartupPanicStack = 16,
  LoaderStartupPcrPage = 17,
  LoaderStartupPdrPage = 18,
  LoaderRegistryData = 19,
  LoaderMemoryData = 20,
  LoaderNlsData = 21,
  LoaderSpecialMemory = 22,
  LoaderBBTMemory = 23,
  LoaderZero = 24,
  LoaderXIPRom = 25,
  LoaderHALCachedMemory = 26,
  LoaderLargePageFiller = 27,
  LoaderErrorLogMemory = 28,
  LoaderVsmMemory = 29,
  LoaderFirmwareCode = 30,
  LoaderFirmwareData = 31,
  LoaderFirmwareReserved = 32,
  LoaderEnclaveMemory = 33,
  LoaderFirmwareKsr = 34,
  LoaderEnclaveKsr = 35,
  LoaderSkMemory = 36,
  LoaderSkFirmwareReserved = 37,
  LoaderIoSpaceMemoryZeroed = 38,
  LoaderIoSpaceMemoryFree = 39,
  LoaderIoSpaceMemoryKsr = 40,
  LoaderKernelShadowStack = 41,
  LoaderIsolatedHostVisible = 42,
  LoaderIsolatedKsr = 43,
  LoaderIoSpaceIsolatedKsr = 44,
  LoaderPersistentDatabase = 45,
  LoaderSyntheticFirmwareData = 46,
  LoaderMaximum = 47,
} TYPE_OF_MEMORY, *PTYPE_OF_MEMORY;

typedef struct _OSLOADER_PAGE_TABLE_LOG
{
  /* 0x0000 */ void* LegacyPte;
  /* 0x0008 */ unsigned __int64 Pfn;
  /* 0x0010 */ enum _TYPE_OF_MEMORY MemoryType;
  /* 0x0014 */ long Padding_12;
  /* 0x0018 */ unsigned __int64 BasePage;
  /* 0x0020 */ unsigned __int64 PageCount;
} OSLOADER_PAGE_TABLE_LOG, *POSLOADER_PAGE_TABLE_LOG; /* size: 0x0028 */

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT
{
  WheaDataFormatIPFSalRecord = 0,
  WheaDataFormatXPFMCA = 1,
  WheaDataFormatMemory = 2,
  WheaDataFormatPCIExpress = 3,
  WheaDataFormatNMIPort = 4,
  WheaDataFormatPCIXBus = 5,
  WheaDataFormatPCIXDevice = 6,
  WheaDataFormatGeneric = 7,
  WheaDataFormatMax = 8,
} WHEA_ERROR_PACKET_DATA_FORMAT, *PWHEA_ERROR_PACKET_DATA_FORMAT;

typedef enum _MCA_AMD_BLOCK_TYPE
{
  McaAMDBlockTypeLS = 0,
  McaAMDBlockTypeIF = 1,
  McaAMDBlockTypeL2 = 2,
  McaAMDBlockTypeDE = 3,
  McaAMDBlockTypeRAZ = 4,
  McaAMDBlockTypeEX = 5,
  McaAMDBlockTypeFP = 6,
  McaAMDBlockTypeL3 = 7,
  McaAMDBlockTypeUMC = 8,
  McaAMDBlockTypeSMU = 9,
  McaAMDBlockTypePSP = 10,
  McaAMDBlockTypePB = 11,
  McaAMDBlockTypeCS = 12,
  McaAMDBlockTypePIE = 13,
  McaAMDBlockTypeMP5 = 14,
  McaAMDBlockTypeNBIO = 15,
  McaAMDBlockTypePCIe = 16,
  McaAMDBlockTypeUnknown = 17,
} MCA_AMD_BLOCK_TYPE, *PMCA_AMD_BLOCK_TYPE;

enum LSA_FOREST_TRUST_RECORD_TYPE
{
  ForestTrustTopLevelName = 0,
  ForestTrustTopLevelNameEx = 1,
  ForestTrustDomainInfo = 2,
  ForestTrustBinaryInfo = 3,
  ForestTrustScannerInfo = 4,
  ForestTrustRecordTypeLast = 4,
};

enum IORING_OP_CODE
{
  IORING_OP_NOP = 0,
  IORING_OP_READ = 1,
  IORING_OP_REGISTER_FILES = 2,
  IORING_OP_REGISTER_BUFFERS = 3,
  IORING_OP_CANCEL = 4,
  IORING_OP_WRITE = 5,
  IORING_OP_FLUSH = 6,
  IORING_OP_READ_SCATTER = 7,
  IORING_OP_WRITE_GATHER = 8,
};

typedef enum _NT_IORING_SQE_FLAGS
{
  NT_IORING_SQE_FLAG_NONE = 0,
  NT_IORING_SQE_FLAG_DRAIN_PRECEDING_OPS = 1,
} NT_IORING_SQE_FLAGS, *PNT_IORING_SQE_FLAGS;

typedef enum _NT_IORING_OP_FLAGS
{
  NT_IORING_OP_FLAG_NONE = 0,
  NT_IORING_OP_FLAG_REGISTERED_FILE_0 = 1,
  NT_IORING_OP_FLAG_REGISTERED_FILE = 1,
  NT_IORING_OP_FLAG_REGISTERED_BUFFER_0 = 2,
  NT_IORING_OP_FLAG_REGISTERED_BUFFER = 2,
} NT_IORING_OP_FLAGS, *PNT_IORING_OP_FLAGS;

typedef union _NT_IORING_HANDLEREF
{
  union
  {
    /* 0x0000 */ void* Handle;
    /* 0x0000 */ unsigned int HandleIndex;
  }; /* size: 0x0008 */
} NT_IORING_HANDLEREF, *PNT_IORING_HANDLEREF; /* size: 0x0008 */

struct IORING_REGISTERED_BUFFER
{
  /* 0x0000 */ unsigned int BufferIndex;
  /* 0x0004 */ unsigned int Offset;
}; /* size: 0x0008 */

typedef union _NT_IORING_BUFFERREF
{
  union
  {
    /* 0x0000 */ void* Address;
    /* 0x0000 */ struct IORING_REGISTERED_BUFFER FixedBuffer;
  }; /* size: 0x0008 */
} NT_IORING_BUFFERREF, *PNT_IORING_BUFFERREF; /* size: 0x0008 */

typedef struct _NT_IORING_OP_READ
{
  /* 0x0000 */ enum _NT_IORING_OP_FLAGS CommonOpFlags;
  /* 0x0004 */ unsigned int Padding;
  /* 0x0008 */ union _NT_IORING_HANDLEREF File;
  /* 0x0010 */ union _NT_IORING_BUFFERREF Buffer;
  /* 0x0018 */ unsigned __int64 Offset;
  /* 0x0020 */ unsigned int Length;
  /* 0x0024 */ unsigned int Key;
} NT_IORING_OP_READ, *PNT_IORING_OP_READ; /* size: 0x0028 */

typedef enum _NT_IORING_REG_FILES_REQ_FLAGS
{
  NT_IORING_REG_FILES_REQ_FLAG_NONE = 0,
} NT_IORING_REG_FILES_REQ_FLAGS, *PNT_IORING_REG_FILES_REQ_FLAGS;

typedef enum _NT_IORING_REG_FILES_ADV_FLAGS
{
  NT_IORING_REG_FILES_ADV_FLAG_NONE = 0,
} NT_IORING_REG_FILES_ADV_FLAGS, *PNT_IORING_REG_FILES_ADV_FLAGS;

typedef struct _NT_IORING_REG_FILES_FLAGS
{
  /* 0x0000 */ enum _NT_IORING_REG_FILES_REQ_FLAGS Required;
  /* 0x0004 */ enum _NT_IORING_REG_FILES_ADV_FLAGS Advisory;
} NT_IORING_REG_FILES_FLAGS, *PNT_IORING_REG_FILES_FLAGS; /* size: 0x0008 */

typedef struct _NT_IORING_OP_REGISTER_FILES
{
  /* 0x0000 */ enum _NT_IORING_OP_FLAGS CommonOpFlags;
  /* 0x0004 */ struct _NT_IORING_REG_FILES_FLAGS Flags;
  /* 0x000c */ unsigned int Count;
  /* 0x0010 */ void** Handles;
} NT_IORING_OP_REGISTER_FILES, *PNT_IORING_OP_REGISTER_FILES; /* size: 0x0018 */

typedef enum _NT_IORING_REG_BUFFERS_REQ_FLAGS
{
  NT_IORING_REG_BUFFERS_REQ_FLAG_NONE = 0,
} NT_IORING_REG_BUFFERS_REQ_FLAGS, *PNT_IORING_REG_BUFFERS_REQ_FLAGS;

typedef enum _NT_IORING_REG_BUFFERS_ADV_FLAGS
{
  NT_IORING_REG_BUFFERS_ADV_FLAG_NONE = 0,
} NT_IORING_REG_BUFFERS_ADV_FLAGS, *PNT_IORING_REG_BUFFERS_ADV_FLAGS;

typedef struct _NT_IORING_REG_BUFFERS_FLAGS
{
  /* 0x0000 */ enum _NT_IORING_REG_BUFFERS_REQ_FLAGS Required;
  /* 0x0004 */ enum _NT_IORING_REG_BUFFERS_ADV_FLAGS Advisory;
} NT_IORING_REG_BUFFERS_FLAGS, *PNT_IORING_REG_BUFFERS_FLAGS; /* size: 0x0008 */

typedef struct _NT_IORING_OP_REGISTER_BUFFERS
{
  /* 0x0000 */ enum _NT_IORING_OP_FLAGS CommonOpFlags;
  /* 0x0004 */ struct _NT_IORING_REG_BUFFERS_FLAGS Flags;
  /* 0x000c */ unsigned int Count;
  /* 0x0010 */ struct IORING_BUFFER_INFO* Buffers;
} NT_IORING_OP_REGISTER_BUFFERS, *PNT_IORING_OP_REGISTER_BUFFERS; /* size: 0x0018 */

typedef struct _NT_IORING_OP_CANCEL
{
  /* 0x0000 */ enum _NT_IORING_OP_FLAGS CommonOpFlags;
  /* 0x0004 */ long Padding_13;
  /* 0x0008 */ union _NT_IORING_HANDLEREF File;
  /* 0x0010 */ unsigned __int64 CancelId;
} NT_IORING_OP_CANCEL, *PNT_IORING_OP_CANCEL; /* size: 0x0018 */

typedef enum _NT_WRITE_FLAGS
{
  NT_WRITE_FLAG_NONE = 0,
  NT_WRITE_FLAG_WRITE_THROUGH = 1,
} NT_WRITE_FLAGS, *PNT_WRITE_FLAGS;

typedef struct _NT_IORING_OP_WRITE
{
  /* 0x0000 */ enum _NT_IORING_OP_FLAGS CommonOpFlags;
  /* 0x0004 */ enum _NT_WRITE_FLAGS Flags;
  /* 0x0008 */ union _NT_IORING_HANDLEREF File;
  /* 0x0010 */ union _NT_IORING_BUFFERREF Buffer;
  /* 0x0018 */ unsigned __int64 Offset;
  /* 0x0020 */ unsigned int Length;
  /* 0x0024 */ unsigned int Key;
} NT_IORING_OP_WRITE, *PNT_IORING_OP_WRITE; /* size: 0x0028 */

typedef struct _NT_IORING_OP_FLUSH
{
  /* 0x0000 */ enum _NT_IORING_OP_FLAGS CommonOpFlags;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ union _NT_IORING_HANDLEREF File;
} NT_IORING_OP_FLUSH, *PNT_IORING_OP_FLUSH; /* size: 0x0010 */

typedef struct _NT_IORING_OP_READ_SCATTER
{
  /* 0x0000 */ enum _NT_IORING_OP_FLAGS CommonOpFlags;
  /* 0x0004 */ unsigned int Padding;
  /* 0x0008 */ union _NT_IORING_HANDLEREF File;
  /* 0x0010 */ unsigned int SegmentCount;
  /* 0x0014 */ long Padding_14;
  /* 0x0018 */ union _FILE_SEGMENT_ELEMENT* SegmentArray;
  /* 0x0020 */ unsigned __int64 Offset;
  /* 0x0028 */ unsigned int Length;
  /* 0x002c */ unsigned int Key;
} NT_IORING_OP_READ_SCATTER, *PNT_IORING_OP_READ_SCATTER; /* size: 0x0030 */

typedef struct _NT_IORING_OP_WRITE_GATHER
{
  /* 0x0000 */ enum _NT_IORING_OP_FLAGS CommonOpFlags;
  /* 0x0004 */ enum _NT_WRITE_FLAGS Flags;
  /* 0x0008 */ union _NT_IORING_HANDLEREF File;
  /* 0x0010 */ unsigned int SegmentCount;
  /* 0x0014 */ long Padding_15;
  /* 0x0018 */ union _FILE_SEGMENT_ELEMENT* SegmentArray;
  /* 0x0020 */ unsigned __int64 Offset;
  /* 0x0028 */ unsigned int Length;
  /* 0x002c */ unsigned int Key;
} NT_IORING_OP_WRITE_GATHER, *PNT_IORING_OP_WRITE_GATHER; /* size: 0x0030 */

typedef struct _NT_IORING_OP_RESERVED
{
  /* 0x0000 */ unsigned __int64 Argument1;
  /* 0x0008 */ unsigned __int64 Argument2;
  /* 0x0010 */ unsigned __int64 Argument3;
  /* 0x0018 */ unsigned __int64 Argument4;
  /* 0x0020 */ unsigned __int64 Argument5;
  /* 0x0028 */ unsigned __int64 Argument6;
} NT_IORING_OP_RESERVED, *PNT_IORING_OP_RESERVED; /* size: 0x0030 */

typedef struct _NT_IORING_SQE
{
  /* 0x0000 */ enum IORING_OP_CODE OpCode;
  /* 0x0004 */ enum _NT_IORING_SQE_FLAGS Flags;
  union
  {
    /* 0x0008 */ unsigned __int64 UserData;
    /* 0x0008 */ unsigned __int64 PaddingUserDataForWow;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0010 */ struct _NT_IORING_OP_READ Read;
    /* 0x0010 */ struct _NT_IORING_OP_REGISTER_FILES RegisterFiles;
    /* 0x0010 */ struct _NT_IORING_OP_REGISTER_BUFFERS RegisterBuffers;
    /* 0x0010 */ struct _NT_IORING_OP_CANCEL Cancel;
    /* 0x0010 */ struct _NT_IORING_OP_WRITE Write;
    /* 0x0010 */ struct _NT_IORING_OP_FLUSH Flush;
    /* 0x0010 */ struct _NT_IORING_OP_READ_SCATTER ReadScatter;
    /* 0x0010 */ struct _NT_IORING_OP_WRITE_GATHER WriteGather;
    /* 0x0010 */ struct _NT_IORING_OP_RESERVED ReservedMaxSizePadding;
  }; /* size: 0x0030 */
} NT_IORING_SQE, *PNT_IORING_SQE; /* size: 0x0040 */

typedef enum _KINTERRUPT_POLARITY
{
  InterruptPolarityUnknown = 0,
  InterruptActiveHigh = 1,
  InterruptRisingEdge = 1,
  InterruptActiveLow = 2,
  InterruptFallingEdge = 2,
  InterruptActiveBoth = 3,
  InterruptActiveBothTriggerLow = 3,
  InterruptActiveBothTriggerHigh = 4,
} KINTERRUPT_POLARITY, *PKINTERRUPT_POLARITY;

typedef struct _WNF_STATE_NAME
{
  /* 0x0000 */ unsigned long Data[2];
} WNF_STATE_NAME, *PWNF_STATE_NAME; /* size: 0x0008 */

typedef struct _WNF_TYPE_ID
{
  /* 0x0000 */ struct _GUID TypeId;
} WNF_TYPE_ID, *PWNF_TYPE_ID; /* size: 0x0010 */

typedef struct _WNF_DELIVERY_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 SubscriptionId;
  /* 0x0008 */ struct _WNF_STATE_NAME StateName;
  /* 0x0010 */ unsigned long ChangeStamp;
  /* 0x0014 */ unsigned long StateDataSize;
  /* 0x0018 */ unsigned long EventMask;
  /* 0x001c */ struct _WNF_TYPE_ID TypeId;
  /* 0x002c */ unsigned long StateDataOffset;
} WNF_DELIVERY_DESCRIPTOR, *PWNF_DELIVERY_DESCRIPTOR; /* size: 0x0030 */

typedef enum _KINTERRUPT_MODE
{
  LevelSensitive = 0,
  Latched = 1,
} KINTERRUPT_MODE, *PKINTERRUPT_MODE;

typedef enum _INBV_PIXEL_FORMAT
{
  PixelFormatUnknown = 0,
  PixelFormat4BitPlanar = 1,
  PixelFormatR8G8B8 = 2,
  PixelFormatR8G8B8X8 = 3,
  PixelFormatB8G8R8 = 4,
  PixelFormatB8G8R8X8 = 5,
} INBV_PIXEL_FORMAT, *PINBV_PIXEL_FORMAT;

typedef struct _INBV_GRAPHICS_RECTANGLE
{
  /* 0x0000 */ unsigned long Height;
  /* 0x0004 */ unsigned long Width;
  /* 0x0008 */ enum _INBV_PIXEL_FORMAT PixelFormat;
  /* 0x000c */ unsigned long Size;
  /* 0x0010 */ void* Data;
} INBV_GRAPHICS_RECTANGLE, *PINBV_GRAPHICS_RECTANGLE; /* size: 0x0018 */

typedef struct _RTL_RB_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
  union
  {
    /* 0x0008 */ unsigned char Encoded : 1; /* bit position: 0 */
    /* 0x0008 */ struct _RTL_BALANCED_NODE* Min;
  }; /* size: 0x0008 */
} RTL_RB_TREE, *PRTL_RB_TREE; /* size: 0x0010 */

typedef struct _KSCB
{
  /* 0x0000 */ unsigned __int64 GenerationCycles;
  /* 0x0008 */ unsigned __int64 MinQuotaCycleTarget;
  /* 0x0010 */ unsigned __int64 MaxQuotaCycleTarget;
  /* 0x0018 */ unsigned __int64 RankCycleTarget;
  /* 0x0020 */ unsigned __int64 LongTermCycles;
  /* 0x0028 */ unsigned __int64 LastReportedCycles;
  /* 0x0030 */ volatile unsigned __int64 OverQuotaHistory;
  /* 0x0038 */ unsigned __int64 ReadyTime;
  /* 0x0040 */ unsigned __int64 InsertTime;
  /* 0x0048 */ struct _LIST_ENTRY PerProcessorList;
  /* 0x0058 */ struct _RTL_BALANCED_NODE QueueNode;
  union
  {
    struct /* bitfield */
    {
      /* 0x0070 */ unsigned short Inserted : 1; /* bit position: 0 */
      /* 0x0070 */ unsigned short MaxOverQuota : 1; /* bit position: 1 */
      /* 0x0070 */ unsigned short MinOverQuota : 1; /* bit position: 2 */
      /* 0x0070 */ unsigned short RankBias : 1; /* bit position: 3 */
      /* 0x0070 */ unsigned short UnconstrainedMaxQuota : 1; /* bit position: 4 */
      /* 0x0070 */ unsigned short UnconstrainedMinQuota : 1; /* bit position: 5 */
      /* 0x0070 */ unsigned short ShareRankOwner : 1; /* bit position: 6 */
      /* 0x0070 */ unsigned short PerProcHardCap : 1; /* bit position: 7 */
      /* 0x0070 */ unsigned short Referenced : 1; /* bit position: 8 */
    }; /* bitfield */
    /* 0x0070 */ unsigned short PrcbLockFlags;
  }; /* size: 0x0002 */
  /* 0x0072 */ unsigned char Depth;
  /* 0x0073 */ unsigned char Pad1;
  /* 0x0074 */ unsigned long OwningProcessorIndex;
  /* 0x0078 */ unsigned short ReadySummary;
  /* 0x007a */ unsigned short Pad2;
  /* 0x007c */ unsigned long Rank;
  /* 0x0080 */ volatile unsigned long* ShareRank;
  /* 0x0088 */ volatile unsigned long OwnerShareRank;
  /* 0x008c */ long Padding_16;
  /* 0x0090 */ struct _LIST_ENTRY ReadyListHead[16];
  /* 0x0190 */ struct _RTL_RB_TREE ChildScbQueue;
  /* 0x01a0 */ struct _KSCB* Parent;
  /* 0x01a8 */ struct _KSCB* Root;
  /* 0x01b0 */ struct _SINGLE_LIST_ENTRY TracingListEntry;
} KSCB, *PKSCB; /* size: 0x01b8 */

typedef enum _REG_NOTIFY_CLASS
{
  RegNtDeleteKey = 0,
  RegNtPreDeleteKey = 0,
  RegNtSetValueKey = 1,
  RegNtPreSetValueKey = 1,
  RegNtDeleteValueKey = 2,
  RegNtPreDeleteValueKey = 2,
  RegNtSetInformationKey = 3,
  RegNtPreSetInformationKey = 3,
  RegNtRenameKey = 4,
  RegNtPreRenameKey = 4,
  RegNtEnumerateKey = 5,
  RegNtPreEnumerateKey = 5,
  RegNtEnumerateValueKey = 6,
  RegNtPreEnumerateValueKey = 6,
  RegNtQueryKey = 7,
  RegNtPreQueryKey = 7,
  RegNtQueryValueKey = 8,
  RegNtPreQueryValueKey = 8,
  RegNtQueryMultipleValueKey = 9,
  RegNtPreQueryMultipleValueKey = 9,
  RegNtPreCreateKey = 10,
  RegNtPostCreateKey = 11,
  RegNtPreOpenKey = 12,
  RegNtPostOpenKey = 13,
  RegNtKeyHandleClose = 14,
  RegNtPreKeyHandleClose = 14,
  RegNtPostDeleteKey = 15,
  RegNtPostSetValueKey = 16,
  RegNtPostDeleteValueKey = 17,
  RegNtPostSetInformationKey = 18,
  RegNtPostRenameKey = 19,
  RegNtPostEnumerateKey = 20,
  RegNtPostEnumerateValueKey = 21,
  RegNtPostQueryKey = 22,
  RegNtPostQueryValueKey = 23,
  RegNtPostQueryMultipleValueKey = 24,
  RegNtPostKeyHandleClose = 25,
  RegNtPreCreateKeyEx = 26,
  RegNtPostCreateKeyEx = 27,
  RegNtPreOpenKeyEx = 28,
  RegNtPostOpenKeyEx = 29,
  RegNtPreFlushKey = 30,
  RegNtPostFlushKey = 31,
  RegNtPreLoadKey = 32,
  RegNtPostLoadKey = 33,
  RegNtPreUnLoadKey = 34,
  RegNtPostUnLoadKey = 35,
  RegNtPreQueryKeySecurity = 36,
  RegNtPostQueryKeySecurity = 37,
  RegNtPreSetKeySecurity = 38,
  RegNtPostSetKeySecurity = 39,
  RegNtCallbackObjectContextCleanup = 40,
  RegNtPreRestoreKey = 41,
  RegNtPostRestoreKey = 42,
  RegNtPreSaveKey = 43,
  RegNtPostSaveKey = 44,
  RegNtPreReplaceKey = 45,
  RegNtPostReplaceKey = 46,
  RegNtPreQueryKeyName = 47,
  RegNtPostQueryKeyName = 48,
  RegNtPreSaveMergedKey = 49,
  RegNtPostSaveMergedKey = 50,
  MaxRegNtNotifyClass = 51,
} REG_NOTIFY_CLASS, *PREG_NOTIFY_CLASS;

typedef enum _HALP_DMA_MAP_BUFFER_TYPE
{
  HalpDmaContiguousMapBuffer = 0,
  HalpDmaNonContiguousMapBuffer = 1,
  HalpDmaMaximumMapBufferType = 2,
} HALP_DMA_MAP_BUFFER_TYPE, *PHALP_DMA_MAP_BUFFER_TYPE;

typedef struct _DBGKD_GET_CONTEXT
{
  /* 0x0000 */ unsigned long Unused;
} DBGKD_GET_CONTEXT, *PDBGKD_GET_CONTEXT; /* size: 0x0004 */

typedef struct _MI_SYSTEM_NODE_AFFINITY_INFORMATION
{
  /* 0x0000 */ struct _GROUP_AFFINITY* GroupAffinity;
  /* 0x0008 */ unsigned long NumberOfDomains;
  /* 0x000c */ unsigned long GlobalDomainIndex;
  /* 0x0010 */ unsigned short GroupAffinityCount;
  /* 0x0012 */ unsigned short ProcessorCount[3];
  /* 0x0018 */ unsigned short UsableProcessorCount[3];
  /* 0x001e */ char __PADDING__[2];
} MI_SYSTEM_NODE_AFFINITY_INFORMATION, *PMI_SYSTEM_NODE_AFFINITY_INFORMATION; /* size: 0x0020 */

typedef enum _KNOWN_CONTROLLER_TYPE
{
  InterruptControllerInvalid = 0,
  InterruptControllerPic = 1,
  InterruptControllerApic = 2,
  InterruptControllerGic = 3,
  InterruptControllerGicV3 = 4,
  InterruptControllerGicV4 = 5,
  InterruptControllerBcm = 6,
  InterruptControllerUnknown = 4096,
} KNOWN_CONTROLLER_TYPE, *PKNOWN_CONTROLLER_TYPE;

typedef struct _CLIENT_ID
{
  /* 0x0000 */ void* UniqueProcess;
  /* 0x0008 */ void* UniqueThread;
} CLIENT_ID, *PCLIENT_ID; /* size: 0x0010 */

typedef struct _HANDLE_TRACE_DB_ENTRY
{
  /* 0x0000 */ struct _CLIENT_ID ClientId;
  /* 0x0010 */ void* Handle;
  /* 0x0018 */ unsigned long Type;
  /* 0x001c */ long Padding_17;
  /* 0x0020 */ void* StackTrace[16];
} HANDLE_TRACE_DB_ENTRY, *PHANDLE_TRACE_DB_ENTRY; /* size: 0x00a0 */

typedef enum _INTERRUPT_PROBLEM
{
  InterruptProblemNone = 0,
  InterruptProblemMadtParsingFailure = 1,
  InterruptProblemNoControllersFound = 2,
  InterruptProblemFailedDiscovery = 3,
  InterruptProblemInitializeLocalUnitFailed = 4,
  InterruptProblemInitializeIoUnitFailed = 5,
  InterruptProblemSetLogicalIdFailed = 6,
  InterruptProblemSetLineStateFailed = 7,
  InterruptProblemGenerateMessageFailed = 8,
  InterruptProblemConvertIdFailed = 9,
  InterruptProblemCmciSetupFailed = 10,
  InterruptProblemQueryMaxProcessorsCalledTooEarly = 11,
  InterruptProblemProcessorReset = 12,
  InterruptProblemStartProcessorFailed = 13,
  InterruptProblemProcessorNotAlive = 14,
  InterruptProblemLowerIrqlViolation = 15,
  InterruptProblemInvalidIrql = 16,
  InterruptProblemNoSuchController = 17,
  InterruptProblemNoSuchLines = 18,
  InterruptProblemBadConnectionData = 19,
  InterruptProblemBadRoutingData = 20,
  InterruptProblemInvalidProcessor = 21,
  InterruptProblemFailedToAttainTarget = 22,
  InterruptProblemUnsupportedWiringConfiguration = 23,
  InterruptProblemSpareAlreadyStarted = 24,
  InterruptProblemClusterNotFullyReplaced = 25,
  InterruptProblemNewClusterAlreadyActive = 26,
  InterruptProblemNewClusterTooLarge = 27,
  InterruptProblemCannotHardwareQuiesce = 28,
  InterruptProblemIpiDestinationUpdateFailed = 29,
  InterruptProblemNoMemory = 30,
  InterruptProblemNoIrtEntries = 31,
  InterruptProblemConnectionDataBaitAndSwitch = 32,
  InterruptProblemInvalidLogicalFlatId = 33,
  InterruptProblemDeinitializeLocalUnitFailed = 34,
  InterruptProblemDeinitializeIoUnitFailed = 35,
  InterruptProblemMismatchedThermalLvtIsr = 36,
  InterruptProblemHvRetargetFailed = 37,
  InterruptProblemDeferredErrorSetupFailed = 38,
  InterruptProblemBadInterruptPartition = 39,
} INTERRUPT_PROBLEM, *PINTERRUPT_PROBLEM;

typedef enum _DUMP_EVENTS
{
  DUMP_EVENT_NONE = 0,
  DUMP_EVENT_HIBER_RESUME = 1,
  DUMP_EVENT_HIBER_RESUME_END = 2,
} DUMP_EVENTS, *PDUMP_EVENTS;

typedef enum _IO_ALLOCATION_ACTION
{
  KeepObject = 1,
  DeallocateObject = 2,
  DeallocateObjectKeepRegisters = 3,
} IO_ALLOCATION_ACTION, *PIO_ALLOCATION_ACTION;

typedef enum _MODE
{
  KernelMode = 0,
  UserMode = 1,
  MaximumMode = 2,
} MODE, *PMODE;

typedef enum _KTRANSACTION_STATE
{
  KTransactionUninitialized = 0,
  KTransactionActive = 1,
  KTransactionPreparing = 2,
  KTransactionPrepared = 3,
  KTransactionInDoubt = 4,
  KTransactionCommitted = 5,
  KTransactionAborted = 6,
  KTransactionDelegated = 7,
  KTransactionPrePreparing = 8,
  KTransactionForgotten = 9,
  KTransactionRecovering = 10,
  KTransactionPrePrepared = 11,
} KTRANSACTION_STATE, *PKTRANSACTION_STATE;

typedef struct _CM_KEY_REFERENCE
{
  /* 0x0000 */ unsigned long KeyCell;
  /* 0x0004 */ long Padding_18;
  /* 0x0008 */ struct _HHIVE* KeyHive;
} CM_KEY_REFERENCE, *PCM_KEY_REFERENCE; /* size: 0x0010 */

typedef union _SLIST_HEADER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned __int64 Alignment;
      /* 0x0008 */ unsigned __int64 Region;
    }; /* size: 0x0010 */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Depth : 16; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 Sequence : 48; /* bit position: 16 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned __int64 Reserved : 4; /* bit position: 0 */
        /* 0x0008 */ unsigned __int64 NextEntry : 60; /* bit position: 4 */
      }; /* bitfield */
    } /* size: 0x0010 */ HeaderX64;
  }; /* size: 0x0010 */
} SLIST_HEADER, *PSLIST_HEADER; /* size: 0x0010 */

typedef struct _RTL_LOOKASIDE
{
  /* 0x0000 */ union _SLIST_HEADER ListHead;
  /* 0x0010 */ unsigned short Depth;
  /* 0x0012 */ unsigned short MaximumDepth;
  /* 0x0014 */ unsigned long TotalAllocates;
  /* 0x0018 */ unsigned long AllocateMisses;
  /* 0x001c */ unsigned long TotalFrees;
  /* 0x0020 */ unsigned long FreeMisses;
  /* 0x0024 */ unsigned long LastTotalAllocates;
  /* 0x0028 */ unsigned long LastAllocateMisses;
  /* 0x002c */ unsigned long LastTotalFrees;
  /* 0x0030 */ long __PADDING__[4];
} RTL_LOOKASIDE, *PRTL_LOOKASIDE; /* size: 0x0040 */

typedef struct _RTL_DYNAMIC_LOOKASIDE
{
  /* 0x0000 */ unsigned __int64 EnabledBucketBitmap;
  /* 0x0008 */ unsigned long BucketCount;
  /* 0x000c */ unsigned long ActiveBucketCount;
  /* 0x0010 */ long Padding_19[12];
  /* 0x0040 */ struct _RTL_LOOKASIDE Buckets[64];
} RTL_DYNAMIC_LOOKASIDE, *PRTL_DYNAMIC_LOOKASIDE; /* size: 0x1040 */

typedef struct _EX_HEAP_POOL_NODE
{
  /* 0x0000 */ struct _SEGMENT_HEAP* Heaps[4];
  /* 0x0020 */ long Padding_20[8];
  /* 0x0040 */ struct _RTL_DYNAMIC_LOOKASIDE Lookasides[2];
} EX_HEAP_POOL_NODE, *PEX_HEAP_POOL_NODE; /* size: 0x20c0 */

typedef enum _MEMORY_CACHING_TYPE_ORIG
{
  MmFrameBufferCached = 2,
} MEMORY_CACHING_TYPE_ORIG, *PMEMORY_CACHING_TYPE_ORIG;

typedef enum _INTERLOCKED_RESULT
{
  ResultNegative = 1,
  ResultZero = 0,
  ResultPositive = 2,
} INTERLOCKED_RESULT, *PINTERLOCKED_RESULT;

typedef enum _JOBOBJECT_IO_PRIORITY_LIMIT_FLAGS
{
  JOBOBJECT_IO_PRIORITY_LIMIT_ENABLE = 1,
  JOBOBJECT_IO_PRIORITY_LIMIT_VALID_FLAGS = 1,
} JOBOBJECT_IO_PRIORITY_LIMIT_FLAGS, *PJOBOBJECT_IO_PRIORITY_LIMIT_FLAGS;

typedef enum _WHEA_CPU_VENDOR
{
  WheaCpuVendorOther = 0,
  WheaCpuVendorIntel = 1,
  WheaCpuVendorAmd = 2,
} WHEA_CPU_VENDOR, *PWHEA_CPU_VENDOR;

typedef struct _EFI_FIRMWARE_INFORMATION
{
  /* 0x0000 */ unsigned long FirmwareVersion;
  /* 0x0004 */ long Padding_21;
  /* 0x0008 */ struct _VIRTUAL_EFI_RUNTIME_SERVICES* VirtualEfiRuntimeServices;
  /* 0x0010 */ long SetVirtualAddressMapStatus;
  /* 0x0014 */ unsigned long MissedMappingsCount;
  /* 0x0018 */ struct _LIST_ENTRY FirmwareResourceList;
  /* 0x0028 */ void* EfiMemoryMap;
  /* 0x0030 */ unsigned long EfiMemoryMapSize;
  /* 0x0034 */ unsigned long EfiMemoryMapDescriptorSize;
} EFI_FIRMWARE_INFORMATION, *PEFI_FIRMWARE_INFORMATION; /* size: 0x0038 */

typedef struct _PCAT_FIRMWARE_INFORMATION
{
  /* 0x0000 */ unsigned long PlaceHolder;
} PCAT_FIRMWARE_INFORMATION, *PPCAT_FIRMWARE_INFORMATION; /* size: 0x0004 */

typedef enum _HAL_INIT_PHASE
{
  HalInitPhaseBspProcEarly = 0,
  HalInitPhaseBspProcEarlyMmReady = 1,
  HalInitPhaseBspProcEarlyTimerReady = 2,
  HalInitPhaseBspProcEarlyEnd = 3,
  HalInitPhasePnProcEarly = 4,
  HalInitPhasePnProcEarlyInterruptsReady = 5,
  HalInitPhasePnProcEarlyEnd = 6,
  HalInitPhaseBspSystemEarly = 7,
  HalInitPhaseBspSystemEarlyAcpiReady = 8,
  HalInitPhaseBspSystemEarlyHalExtensionsReady = 9,
  HalInitPhaseBspSystemEarlyInterruptsAlmostReady = 10,
  HalInitPhaseBspSystemEarlyIommusReady = 11,
  HalInitPhaseBspSystemEarlyInterruptsReady = 12,
  HalInitPhaseBspSystemEarlyDmaReady = 12,
  HalInitPhaseBspSystemEarlyProcReady = 13,
  HalInitPhaseBspSystemEarlyHwPerfCntReady = 14,
  HalInitPhaseBspSystemEarlyAllocationDone = 15,
  HalInitPhaseBspSystemEarlyEnd = 16,
  HalInitPhaseBspSystemLate = 17,
  HalInitPhaseBspSystemLateEnd = 18,
  HalInitPhasePnSystemLate = 19,
  HalInitPhasePnSystemLateEnd = 20,
  HalInitPhaseAllProcStartComplete = 21,
  HalInitPhaseAllProcStartCompleteEnd = 22,
  HalInitPhaseExPhase1Ready = 23,
  HalInitPhaseExPhase1ReadyEnd = 24,
  HalInitPhaseAcpiPdoStarted = 25,
  HalInitPhaseAcpiPdoStartedEnd = 26,
  HalInitPhaseReportResources = 27,
  HalInitPhaseReportResourcesEnd = 28,
  HalInitPhaseReportCoreSystemResources = 29,
  HalInitPhaseReportCoreSystemResourcesEnd = 30,
  HalInitPhaseLateSystemActions = 31,
  HalInitPhaseLateSystemActionsTelemetryReady = 32,
  HalInitPhaseLateSystemActionsEnd = 33,
} HAL_INIT_PHASE, *PHAL_INIT_PHASE;

typedef struct _KREQUEST_PACKET
{
  /* 0x0000 */ void* CurrentPacket[3];
  /* 0x0018 */ void* WorkerRoutine /* function */;
} KREQUEST_PACKET, *PKREQUEST_PACKET; /* size: 0x0020 */

typedef struct _REQUEST_MAILBOX
{
  /* 0x0000 */ struct _REQUEST_MAILBOX* Next;
  /* 0x0008 */ unsigned __int64 RequestSummary;
  /* 0x0010 */ struct _KREQUEST_PACKET RequestPacket;
  /* 0x0030 */ volatile long* SubNodeTargetCountAddr;
  /* 0x0038 */ volatile long SubNodeTargetCount;
  /* 0x003c */ long __PADDING__[1];
} REQUEST_MAILBOX, *PREQUEST_MAILBOX; /* size: 0x0040 */

typedef enum _PLUGPLAY_EVENT_CATEGORY
{
  HardwareProfileChangeEvent = 0,
  TargetDeviceChangeEvent = 1,
  DeviceClassChangeEvent = 2,
  CustomDeviceEvent = 3,
  DeviceInstallEvent = 4,
  DeviceArrivalEvent = 5,
  VetoEvent = 6,
  BlockedDriverEvent = 7,
  InvalidIDEvent = 8,
  DevicePropertyChangeEvent = 9,
  DeviceInstanceRemovalEvent = 10,
  DeviceInstanceStartedEvent = 11,
  MaxPlugEventCategory = 12,
} PLUGPLAY_EVENT_CATEGORY, *PPLUGPLAY_EVENT_CATEGORY;

typedef struct _IOMMU_DEVICE_CREATION_CONFIGURATION_ACPI
{
  /* 0x0000 */ unsigned int InputMappingBase;
  /* 0x0004 */ unsigned int MappingsCount;
} IOMMU_DEVICE_CREATION_CONFIGURATION_ACPI, *PIOMMU_DEVICE_CREATION_CONFIGURATION_ACPI; /* size: 0x0008 */

typedef enum _NT_IORING_CREATE_REQUIRED_FLAGS
{
  NT_IORING_CREATE_REQUIRED_FLAG_NONE = 0,
} NT_IORING_CREATE_REQUIRED_FLAGS, *PNT_IORING_CREATE_REQUIRED_FLAGS;

typedef enum _NT_IORING_CREATE_ADVISORY_FLAGS
{
  NT_IORING_CREATE_ADVISORY_FLAG_NONE = 0,
  NT_IORING_CREATE_SKIP_BUILDER_PARAM_CHECKS = 1,
} NT_IORING_CREATE_ADVISORY_FLAGS, *PNT_IORING_CREATE_ADVISORY_FLAGS;

typedef struct _NT_IORING_CREATE_FLAGS
{
  /* 0x0000 */ enum _NT_IORING_CREATE_REQUIRED_FLAGS Required;
  /* 0x0004 */ enum _NT_IORING_CREATE_ADVISORY_FLAGS Advisory;
} NT_IORING_CREATE_FLAGS, *PNT_IORING_CREATE_FLAGS; /* size: 0x0008 */

typedef struct _EXT_IOMMU_FUNCTION_TABLE
{
  /* 0x0000 */ void* ConfigureSettings /* function */;
  /* 0x0008 */ void* Initialize /* function */;
  /* 0x0010 */ void* AllocateDomain /* function */;
  /* 0x0018 */ void* FreeDomain /* function */;
  /* 0x0020 */ void* CreateDevice /* function */;
  /* 0x0028 */ void* DeleteDevice /* function */;
  /* 0x0030 */ void* OwnDevice /* function */;
  /* 0x0038 */ void* ConfigureDeviceFaultReporting /* function */;
  /* 0x0040 */ void* AttachDeviceDomain /* function */;
  /* 0x0048 */ void* DetachDeviceDomain /* function */;
  /* 0x0050 */ void* FlushDomainTb /* function */;
  /* 0x0058 */ void* SyncFlush /* function */;
  /* 0x0060 */ void* CompleteFlush /* function */;
  /* 0x0068 */ void* AllocateRemappingTableEntry /* function */;
  /* 0x0070 */ void* FreeRemappingTableEntry /* function */;
  /* 0x0078 */ void* UpdateRemappingTableEntry /* function */;
  /* 0x0080 */ void* InvalidateRemappingTableEntry /* function */;
  /* 0x0088 */ void* UpdateRemappingDestination /* function */;
  /* 0x0090 */ void* CaptureGlobalCrashdumpState /* function */;
} EXT_IOMMU_FUNCTION_TABLE, *PEXT_IOMMU_FUNCTION_TABLE; /* size: 0x0098 */

typedef struct _EXT_IOMMU_FUNCTION_TABLE_EXTENDED
{
  /* 0x0000 */ void* FindDevice /* function */;
  /* 0x0008 */ void* SetDeviceSvmCapabilities /* function */;
  /* 0x0010 */ void* SetDevicePasidTable /* function */;
  /* 0x0018 */ void* GrowPasidTable /* function */;
  /* 0x0020 */ void* SetPasidAddressSpace /* function */;
  /* 0x0028 */ void* FlushTb /* function */;
  /* 0x0030 */ void* FlushDeviceTbOnly /* function */;
  /* 0x0038 */ void* DismissPageFault /* function */;
  /* 0x0040 */ void* GetPageFault /* function */;
  /* 0x0048 */ void* SetMessageInterruptRouting /* function */;
  /* 0x0050 */ void* EnableInterrupt /* function */;
  /* 0x0058 */ void* DisableInterrupt /* function */;
  /* 0x0060 */ void* HandleInterrupt /* function */;
  /* 0x0068 */ void* CheckForReservedRegion /* function */;
  /* 0x0070 */ void* MarkHiberRegions /* function */;
  /* 0x0078 */ void* DrainSvmPageRequests /* function */;
  /* 0x0080 */ void* CancelPageRequests /* function */;
  /* 0x0088 */ void* EnumerateReservedDevices /* function */;
  /* 0x0090 */ void* ProcessReservedDomains /* function */;
  /* 0x0098 */ void* QueryAcpiDeviceMapping /* function */;
  /* 0x00a0 */ void* GetRidAcpiMapCount /* function */;
  /* 0x00a8 */ void* ConfigureAts /* function */;
} EXT_IOMMU_FUNCTION_TABLE_EXTENDED, *PEXT_IOMMU_FUNCTION_TABLE_EXTENDED; /* size: 0x00b0 */

typedef struct _IOMMU_PAGE_HANDLING_DATA
{
  /* 0x0000 */ struct _EX_PUSH_LOCK ResetLock;
  /* 0x0008 */ unsigned __int64 Lock;
  /* 0x0010 */ unsigned long ValidGroupFaultSequenceNumber;
  /* 0x0014 */ long Padding_22;
  /* 0x0018 */ void* GetPageFault /* function */;
  /* 0x0020 */ void* DismissPageFault /* function */;
} IOMMU_PAGE_HANDLING_DATA, *PIOMMU_PAGE_HANDLING_DATA; /* size: 0x0028 */

typedef struct _RTL_BITMAP
{
  /* 0x0000 */ unsigned long SizeOfBitMap;
  /* 0x0004 */ long Padding_23;
  /* 0x0008 */ unsigned long* Buffer;
} RTL_BITMAP, *PRTL_BITMAP; /* size: 0x0010 */

typedef enum _EXT_IOMMU_KNOWN_IOMMU_TYPE
{
  ExtIommuInvalid = 0,
  ExtIommuAmd = 1,
  ExtIommuIntel = 2,
  ExtIommuSmmuv1 = 3,
  ExtIommuSmmuv2 = 4,
  ExtIommuSmmuv3 = 5,
  ExtIommuIts = 6,
  ExtIommuUnknown = 4096,
} EXT_IOMMU_KNOWN_IOMMU_TYPE, *PEXT_IOMMU_KNOWN_IOMMU_TYPE;

typedef struct _PCI_SLOT_NUMBER
{
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned long DeviceNumber : 5; /* bit position: 0 */
          /* 0x0000 */ unsigned long FunctionNumber : 3; /* bit position: 5 */
          /* 0x0000 */ unsigned long Reserved : 24; /* bit position: 8 */
        }; /* bitfield */
      } /* size: 0x0004 */ bits;
      /* 0x0000 */ unsigned long AsULONG;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
} PCI_SLOT_NUMBER, *PPCI_SLOT_NUMBER; /* size: 0x0004 */

typedef struct _REGISTERED_IOMMU
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ void* InternalData;
  /* 0x0018 */ unsigned long InternalDataSize;
  /* 0x001c */ long Padding_24;
  /* 0x0020 */ void* InterruptContext;
  /* 0x0028 */ unsigned char Irql;
  /* 0x0029 */ char Padding_25[3];
  /* 0x002c */ long Gsi;
  /* 0x0030 */ enum _KINTERRUPT_POLARITY InterruptPolarity;
  /* 0x0034 */ enum _KINTERRUPT_MODE InterruptMode;
  /* 0x0038 */ struct _EXT_IOMMU_FUNCTION_TABLE FunctionTable;
  /* 0x00d0 */ struct _EXT_IOMMU_FUNCTION_TABLE_EXTENDED FunctionTableExtended;
  /* 0x0180 */ unsigned long Flags;
  /* 0x0184 */ long Padding_26;
  /* 0x0188 */ struct _IOMMU_PAGE_HANDLING_DATA PageHandling;
  /* 0x01b0 */ unsigned long MaximumDomainIds;
  /* 0x01b4 */ long Padding_27;
  /* 0x01b8 */ unsigned __int64 DomainIdBitmapLock;
  /* 0x01c0 */ struct _RTL_BITMAP DomainIdBitmap;
  /* 0x01d0 */ unsigned long Capabilities;
  /* 0x01d4 */ enum _EXT_IOMMU_KNOWN_IOMMU_TYPE KnownType;
  /* 0x01d8 */ unsigned long PciSegment;
  /* 0x01dc */ unsigned long PciBus;
  /* 0x01e0 */ struct _PCI_SLOT_NUMBER PciSlot;
  /* 0x01e4 */ long Padding_28;
  /* 0x01e8 */ union _LARGE_INTEGER MsiAddress;
  /* 0x01f0 */ unsigned __int64 MsiData;
  /* 0x01f8 */ unsigned long MaximumAsids;
  /* 0x01fc */ unsigned long Identifier;
  /* 0x0200 */ struct _UNICODE_STRING ResourceId;
  /* 0x0210 */ struct _IOMMU_RESERVED_DEVICE_LIST* ReservedDevices;
} REGISTERED_IOMMU, *PREGISTERED_IOMMU; /* size: 0x0218 */

typedef enum _USER_ACTIVITY_PRESENCE
{
  PowerUserPresent = 0,
  PowerUserNotPresent = 1,
  PowerUserInactive = 2,
  PowerUserMaximum = 3,
  PowerUserInvalid = 3,
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;

typedef struct _ARBITER_TEST_ALLOCATION_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
  /* 0x0008 */ unsigned long AllocateFromCount;
  /* 0x000c */ long Padding_29;
  /* 0x0010 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* AllocateFrom;
} ARBITER_TEST_ALLOCATION_PARAMETERS, *PARBITER_TEST_ALLOCATION_PARAMETERS; /* size: 0x0018 */

typedef struct _ARBITER_RETEST_ALLOCATION_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
  /* 0x0008 */ unsigned long AllocateFromCount;
  /* 0x000c */ long Padding_30;
  /* 0x0010 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* AllocateFrom;
} ARBITER_RETEST_ALLOCATION_PARAMETERS, *PARBITER_RETEST_ALLOCATION_PARAMETERS; /* size: 0x0018 */

typedef struct _ARBITER_BOOT_ALLOCATION_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
} ARBITER_BOOT_ALLOCATION_PARAMETERS, *PARBITER_BOOT_ALLOCATION_PARAMETERS; /* size: 0x0008 */

typedef struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS
{
  /* 0x0000 */ struct _CM_PARTIAL_RESOURCE_LIST** AllocatedResources;
} ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS, *PARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS; /* size: 0x0008 */

typedef struct _ARBITER_QUERY_CONFLICT_PARAMETERS
{
  /* 0x0000 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0008 */ struct _IO_RESOURCE_DESCRIPTOR* ConflictingResource;
  /* 0x0010 */ unsigned long* ConflictCount;
  /* 0x0018 */ struct _ARBITER_CONFLICT_INFO** Conflicts;
} ARBITER_QUERY_CONFLICT_PARAMETERS, *PARBITER_QUERY_CONFLICT_PARAMETERS; /* size: 0x0020 */

typedef struct _ARBITER_QUERY_ARBITRATE_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
} ARBITER_QUERY_ARBITRATE_PARAMETERS, *PARBITER_QUERY_ARBITRATE_PARAMETERS; /* size: 0x0008 */

typedef struct _ARBITER_ADD_RESERVED_PARAMETERS
{
  /* 0x0000 */ struct _DEVICE_OBJECT* ReserveDevice;
} ARBITER_ADD_RESERVED_PARAMETERS, *PARBITER_ADD_RESERVED_PARAMETERS; /* size: 0x0008 */

typedef struct _ARBITER_PARAMETERS
{
  union
  {
    union
    {
      /* 0x0000 */ struct _ARBITER_TEST_ALLOCATION_PARAMETERS TestAllocation;
      /* 0x0000 */ struct _ARBITER_RETEST_ALLOCATION_PARAMETERS RetestAllocation;
      /* 0x0000 */ struct _ARBITER_BOOT_ALLOCATION_PARAMETERS BootAllocation;
      /* 0x0000 */ struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS QueryAllocatedResources;
      /* 0x0000 */ struct _ARBITER_QUERY_CONFLICT_PARAMETERS QueryConflict;
      /* 0x0000 */ struct _ARBITER_QUERY_ARBITRATE_PARAMETERS QueryArbitrate;
      /* 0x0000 */ struct _ARBITER_ADD_RESERVED_PARAMETERS AddReserved;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ Parameters;
} ARBITER_PARAMETERS, *PARBITER_PARAMETERS; /* size: 0x0020 */

typedef enum _INTERFACE_TYPE
{
  InterfaceTypeUndefined = -1,
  Internal = 0,
  Isa = 1,
  Eisa = 2,
  MicroChannel = 3,
  TurboChannel = 4,
  PCIBus = 5,
  VMEBus = 6,
  NuBus = 7,
  PCMCIABus = 8,
  CBus = 9,
  MPIBus = 10,
  MPSABus = 11,
  ProcessorInternal = 12,
  InternalPowerBus = 13,
  PNPISABus = 14,
  PNPBus = 15,
  Vmcs = 16,
  ACPIBus = 17,
  MaximumInterfaceType = 18,
} INTERFACE_TYPE, *PINTERFACE_TYPE;

typedef enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution = 0,
  ExceptionContinueSearch = 1,
  ExceptionNestedException = 2,
  ExceptionCollidedUnwind = 3,
} EXCEPTION_DISPOSITION, *PEXCEPTION_DISPOSITION;

typedef enum _SECURITY_IMPERSONATION_LEVEL
{
  SecurityAnonymous = 0,
  SecurityIdentification = 1,
  SecurityImpersonation = 2,
  SecurityDelegation = 3,
} SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;

typedef enum _INTERRUPT_RESULT
{
  InterruptBeginFatalError = 0,
  InterruptBeginLine = 1,
  InterruptBeginSpurious = 2,
  InterruptBeginVector = 3,
  InterruptBeginNone = 4,
} INTERRUPT_RESULT, *PINTERRUPT_RESULT;

typedef enum _DMA_WIDTH
{
  Width8Bits = 0,
  Width16Bits = 1,
  Width32Bits = 2,
  Width64Bits = 3,
  WidthNoWrap = 4,
  MaximumDmaWidth = 5,
} DMA_WIDTH, *PDMA_WIDTH;

typedef struct _EXCEPTION_RECORD32
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ unsigned long ExceptionRecord;
  /* 0x000c */ unsigned long ExceptionAddress;
  /* 0x0010 */ unsigned long NumberParameters;
  /* 0x0014 */ unsigned long ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32; /* size: 0x0050 */

typedef struct _DBGKM_EXCEPTION32
{
  /* 0x0000 */ struct _EXCEPTION_RECORD32 ExceptionRecord;
  /* 0x0050 */ unsigned long FirstChance;
} DBGKM_EXCEPTION32, *PDBGKM_EXCEPTION32; /* size: 0x0054 */

typedef enum _LDR_DDAG_STATE
{
  LdrModulesMerged = -5,
  LdrModulesInitError = -4,
  LdrModulesSnapError = -3,
  LdrModulesUnloaded = -2,
  LdrModulesUnloading = -1,
  LdrModulesPlaceHolder = 0,
  LdrModulesMapping = 1,
  LdrModulesMapped = 2,
  LdrModulesWaitingForDependencies = 3,
  LdrModulesSnapping = 4,
  LdrModulesSnapped = 5,
  LdrModulesCondensed = 6,
  LdrModulesReadyToInit = 7,
  LdrModulesInitializing = 8,
  LdrModulesReadyToRun = 9,
} LDR_DDAG_STATE, *PLDR_DDAG_STATE;

typedef struct _FIRMWARE_INFORMATION_LOADER_BLOCK
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long FirmwareTypeUefi : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long EfiRuntimeUseIum : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long EfiRuntimePageProtectionSupported : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long Reserved1 : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long SoftRebootMpwrResume : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long Reserved2 : 27; /* bit position: 5 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_31;
  union
  {
    union
    {
      /* 0x0008 */ struct _EFI_FIRMWARE_INFORMATION EfiInformation;
      /* 0x0008 */ struct _PCAT_FIRMWARE_INFORMATION PcatInformation;
    }; /* size: 0x0038 */
  } /* size: 0x0038 */ u;
} FIRMWARE_INFORMATION_LOADER_BLOCK, *PFIRMWARE_INFORMATION_LOADER_BLOCK; /* size: 0x0040 */

typedef enum _HALP_DMA_TRANSLATION_TYPE
{
  DmaTranslationTypePassthrough = 0,
  DmaTranslationTypeSafePassthrough = 1,
  DmaTranslationTypeHybridPassthrough = 2,
  DmaTranslationTypeTranslate = 3,
  DmaTranslationTypeMax = 4,
} HALP_DMA_TRANSLATION_TYPE, *PHALP_DMA_TRANSLATION_TYPE;

typedef enum _HALP_DMA_ADAPTER_ALLOCATION_STATE
{
  HalpDmaAdapterAllocationStateNone = 0,
  HalpDmaAdapterAllocateChannel = 1,
  HalpDmaAdapterAllocateMapRegisters = 2,
  HalpDmaAdapterAllocateChannelRemapResources = 3,
  HalpDmaAdapterAllocationStateComplete = 4,
  HalpDmaAdapterAllocationStateMax = 5,
} HALP_DMA_ADAPTER_ALLOCATION_STATE, *PHALP_DMA_ADAPTER_ALLOCATION_STATE;

typedef union _KLOCK_ENTRY_LOCK_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 CrossThreadReleasable : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Busy : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 Reserved : 61; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 InTree : 1; /* bit position: 63 */
    }; /* bitfield */
    /* 0x0000 */ void* LockState;
  }; /* size: 0x0008 */
} KLOCK_ENTRY_LOCK_STATE, *PKLOCK_ENTRY_LOCK_STATE; /* size: 0x0008 */

typedef union _KLOCK_ENTRY_BOOST_BITMAP
{
  union
  {
    /* 0x0000 */ unsigned __int64 AllFields;
    struct
    {
      /* 0x0000 */ unsigned long AllBoosts;
      /* 0x0004 */ unsigned long WaiterCounts;
    }; /* size: 0x0008 */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long CpuBoostsBitmap : 30; /* bit position: 0 */
        /* 0x0000 */ unsigned long IoBoost : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long IoQoSBoost : 1; /* bit position: 31 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned long IoNormalPriorityWaiterCount : 8; /* bit position: 0 */
        /* 0x0004 */ unsigned long IoQoSWaiterCount : 7; /* bit position: 8 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} KLOCK_ENTRY_BOOST_BITMAP, *PKLOCK_ENTRY_BOOST_BITMAP; /* size: 0x0008 */

typedef struct _KLOCK_ENTRY
{
  union
  {
    /* 0x0000 */ union _KLOCK_ENTRY_LOCK_STATE LockState;
    /* 0x0000 */ void* volatile LockUnsafe;
    struct
    {
      /* 0x0000 */ volatile unsigned char CrossThreadReleasableAndBusyByte;
      /* 0x0001 */ unsigned char Reserved[6];
      /* 0x0007 */ volatile unsigned char InTreeByte;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0008 */ unsigned long EntryFlags;
    /* 0x0008 */ unsigned char StaticByte;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned char EntryIndex : 6; /* bit position: 0 */
        /* 0x0008 */ unsigned char PreWaiting : 1; /* bit position: 6 */
        /* 0x0008 */ unsigned char UserModeBit : 1; /* bit position: 7 */
      }; /* bitfield */
      /* 0x0009 */ unsigned char WaitingByte;
      /* 0x000a */ unsigned char AcquiredByte;
      union
      {
        /* 0x000b */ unsigned char CrossThreadFlags;
        struct /* bitfield */
        {
          /* 0x000b */ unsigned char HeadNodeBit : 1; /* bit position: 0 */
          /* 0x000b */ unsigned char IoPriorityBit : 1; /* bit position: 1 */
          /* 0x000b */ unsigned char IoQoSWaiter : 1; /* bit position: 2 */
          /* 0x000b */ unsigned char Spare1 : 5; /* bit position: 3 */
        }; /* bitfield */
      }; /* size: 0x0001 */
    }; /* size: 0x0004 */
    struct /* bitfield */
    {
      /* 0x0008 */ unsigned long StaticState : 8; /* bit position: 0 */
      /* 0x0008 */ unsigned long AllFlags : 24; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x000c */ unsigned long SpareFlags;
  /* 0x0010 */ struct _RTL_BALANCED_NODE TreeNode;
  union
  {
    struct
    {
      /* 0x0028 */ struct _RTL_RB_TREE OwnerTree;
      /* 0x0038 */ struct _RTL_RB_TREE WaiterTree;
    }; /* size: 0x0020 */
    /* 0x0028 */ char CpuPriorityKey;
  }; /* size: 0x0020 */
  /* 0x0048 */ unsigned __int64 EntryLock;
  /* 0x0050 */ union _KLOCK_ENTRY_BOOST_BITMAP BoostBitmap;
} KLOCK_ENTRY, *PKLOCK_ENTRY; /* size: 0x0058 */

typedef struct _KLOCK_ENTRIES
{
  /* 0x0000 */ struct _KTHREAD* Thread;
  /* 0x0008 */ unsigned short AvailableEntryBitmap;
  /* 0x000a */ unsigned short OrphanedEntryBitmap;
  /* 0x000c */ unsigned char EntryCount;
  /* 0x000d */ unsigned char Padding0[3];
  /* 0x0010 */ struct _KLOCK_ENTRY Entries[1];
} KLOCK_ENTRIES, *PKLOCK_ENTRIES; /* size: 0x0068 */

typedef enum _TAG_UNNAMED_1
{
  KTMOH_CommitTransaction_Result = 1,
  KTMOH_RollbackTransaction_Result = 2,
} TAG_UNNAMED_1, *PTAG_UNNAMED_1;

typedef enum _HAL_DMA_CRASH_DUMP_REGISTER_TYPE
{
  HalDmaCrashDumpRegisterSet1 = 0,
  HalDmaCrashDumpRegisterSet2 = 1,
  HalDmaCrashDumpRegisterSetMax = 2,
} HAL_DMA_CRASH_DUMP_REGISTER_TYPE, *PHAL_DMA_CRASH_DUMP_REGISTER_TYPE;

typedef struct _CMSI_RW_LOCK
{
  /* 0x0000 */ void* Reserved;
} CMSI_RW_LOCK, *PCMSI_RW_LOCK; /* size: 0x0008 */

typedef enum _CMP_DEVICE_NOTIFICATION_STATE
{
  CmpDeviceUsageNotificationsNotSent = 0,
  CmpDeviceUsageNotificationsSent = 1,
  CmpDeviceUsageNotificationsPending = 2,
} CMP_DEVICE_NOTIFICATION_STATE, *PCMP_DEVICE_NOTIFICATION_STATE;

typedef struct _CMP_VOLUME_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY VolumeContextListEntry;
  /* 0x0010 */ struct _CMP_VOLUME_MANAGER* VolumeManager;
  /* 0x0018 */ __int64 RefCount;
  /* 0x0020 */ struct _GUID VolumeGuid;
  /* 0x0030 */ void* VolumeFileObject;
  /* 0x0038 */ struct _CMSI_RW_LOCK VolumeContextLock;
  /* 0x0040 */ enum _CMP_DEVICE_NOTIFICATION_STATE DeviceUsageNotificationState;
  /* 0x0044 */ long __PADDING__[1];
} CMP_VOLUME_CONTEXT, *PCMP_VOLUME_CONTEXT; /* size: 0x0048 */

typedef enum _IOMMU_DMA_DEVICE_CREATION_STATE
{
  DmaDeviceCreationStateRemapping = 0,
  DmaDeviceCreationStateSvm = 1,
  DmaDeviceCreationStateUnblocked = 2,
  DmaDeviceCreationStateAtsOnly = 3,
  DmaDeviceCreationStateMax = 4,
} IOMMU_DMA_DEVICE_CREATION_STATE, *PIOMMU_DMA_DEVICE_CREATION_STATE;

typedef struct _DISPATCHER_HEADER
{
  union
  {
    /* 0x0000 */ volatile long Lock;
    /* 0x0000 */ long LockNV;
    struct
    {
      /* 0x0000 */ unsigned char Type;
      /* 0x0001 */ unsigned char Signalling;
      /* 0x0002 */ unsigned char Size;
      /* 0x0003 */ unsigned char Reserved1;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char TimerType;
      union
      {
        /* 0x0001 */ unsigned char TimerControlFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0001 */ unsigned char Absolute : 1; /* bit position: 0 */
            /* 0x0001 */ unsigned char Wake : 1; /* bit position: 1 */
            /* 0x0001 */ unsigned char EncodedTolerableDelay : 6; /* bit position: 2 */
          }; /* bitfield */
          /* 0x0002 */ unsigned char Hand;
          union
          {
            /* 0x0003 */ unsigned char TimerMiscFlags;
            struct /* bitfield */
            {
              /* 0x0003 */ unsigned char Index : 6; /* bit position: 0 */
              /* 0x0003 */ unsigned char Inserted : 1; /* bit position: 6 */
              /* 0x0003 */ volatile unsigned char Expired : 1; /* bit position: 7 */
            }; /* bitfield */
          }; /* size: 0x0001 */
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char Timer2Type;
      union
      {
        /* 0x0001 */ unsigned char Timer2Flags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0001 */ unsigned char Timer2Inserted : 1; /* bit position: 0 */
            /* 0x0001 */ unsigned char Timer2Expiring : 1; /* bit position: 1 */
            /* 0x0001 */ unsigned char Timer2CancelPending : 1; /* bit position: 2 */
            /* 0x0001 */ unsigned char Timer2SetPending : 1; /* bit position: 3 */
            /* 0x0001 */ unsigned char Timer2Running : 1; /* bit position: 4 */
            /* 0x0001 */ unsigned char Timer2Disabled : 1; /* bit position: 5 */
            /* 0x0001 */ unsigned char Timer2ReservedFlags : 2; /* bit position: 6 */
          }; /* bitfield */
          /* 0x0002 */ unsigned char Timer2ComponentId;
          /* 0x0003 */ unsigned char Timer2RelativeId;
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char QueueType;
      union
      {
        /* 0x0001 */ unsigned char QueueControlFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0001 */ unsigned char Abandoned : 1; /* bit position: 0 */
            /* 0x0001 */ unsigned char DisableIncrement : 1; /* bit position: 1 */
            /* 0x0001 */ unsigned char QueueReservedControlFlags : 6; /* bit position: 2 */
          }; /* bitfield */
          /* 0x0002 */ unsigned char QueueSize;
          /* 0x0003 */ unsigned char QueueReserved;
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char ThreadType;
      /* 0x0001 */ unsigned char ThreadReserved;
      union
      {
        /* 0x0002 */ unsigned char ThreadControlFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0002 */ unsigned char CycleProfiling : 1; /* bit position: 0 */
            /* 0x0002 */ unsigned char CounterProfiling : 1; /* bit position: 1 */
            /* 0x0002 */ unsigned char GroupScheduling : 1; /* bit position: 2 */
            /* 0x0002 */ unsigned char AffinitySet : 1; /* bit position: 3 */
            /* 0x0002 */ unsigned char Tagged : 1; /* bit position: 4 */
            /* 0x0002 */ unsigned char EnergyProfiling : 1; /* bit position: 5 */
            /* 0x0002 */ unsigned char SchedulerAssist : 1; /* bit position: 6 */
            /* 0x0002 */ unsigned char ThreadReservedControlFlags : 1; /* bit position: 7 */
          }; /* bitfield */
          union
          {
            /* 0x0003 */ unsigned char DebugActive;
            struct /* bitfield */
            {
              /* 0x0003 */ unsigned char ActiveDR7 : 1; /* bit position: 0 */
              /* 0x0003 */ unsigned char Instrumented : 1; /* bit position: 1 */
              /* 0x0003 */ unsigned char Minimal : 1; /* bit position: 2 */
              /* 0x0003 */ unsigned char Reserved4 : 2; /* bit position: 3 */
              /* 0x0003 */ unsigned char AltSyscall : 1; /* bit position: 5 */
              /* 0x0003 */ unsigned char Emulation : 1; /* bit position: 6 */
              /* 0x0003 */ unsigned char Reserved5 : 1; /* bit position: 7 */
            }; /* bitfield */
          }; /* size: 0x0001 */
        }; /* size: 0x0002 */
      }; /* size: 0x0002 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char MutantType;
      /* 0x0001 */ unsigned char MutantSize;
      /* 0x0002 */ unsigned char DpcActive;
      /* 0x0003 */ unsigned char MutantReserved;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ long SignalState;
  /* 0x0008 */ struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; /* size: 0x0018 */

typedef struct _KEVENT
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; /* size: 0x0018 */

typedef enum _KRESOURCEMANAGER_STATE
{
  KResourceManagerUninitialized = 0,
  KResourceManagerOffline = 1,
  KResourceManagerOnline = 2,
} KRESOURCEMANAGER_STATE, *PKRESOURCEMANAGER_STATE;

typedef struct _KMUTANT
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ struct _LIST_ENTRY MutantListEntry;
  /* 0x0028 */ struct _KTHREAD* OwnerThread;
  union
  {
    /* 0x0030 */ unsigned char MutantFlags;
    struct /* bitfield */
    {
      /* 0x0030 */ unsigned char Abandoned : 1; /* bit position: 0 */
      /* 0x0030 */ unsigned char Spare1 : 7; /* bit position: 1 */
    }; /* bitfield */
    struct /* bitfield */
    {
      /* 0x0030 */ unsigned char Abandoned2 : 1; /* bit position: 0 */
      /* 0x0030 */ unsigned char AbEnabled : 1; /* bit position: 1 */
      /* 0x0030 */ unsigned char Spare2 : 6; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0031 */ unsigned char ApcDisable;
  /* 0x0032 */ char __PADDING__[6];
} KMUTANT, *PKMUTANT; /* size: 0x0038 */

typedef struct _RTL_BALANCED_LINKS
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS* Parent;
  /* 0x0008 */ struct _RTL_BALANCED_LINKS* LeftChild;
  /* 0x0010 */ struct _RTL_BALANCED_LINKS* RightChild;
  /* 0x0018 */ char Balance;
  /* 0x0019 */ unsigned char Reserved[3];
  /* 0x001c */ long __PADDING__[1];
} RTL_BALANCED_LINKS, *PRTL_BALANCED_LINKS; /* size: 0x0020 */

typedef struct _KTMOBJECT_NAMESPACE_LINK
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS Links;
  /* 0x0020 */ unsigned char Expired;
  /* 0x0021 */ char __PADDING__[7];
} KTMOBJECT_NAMESPACE_LINK, *PKTMOBJECT_NAMESPACE_LINK; /* size: 0x0028 */

typedef struct _KQUEUE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ struct _LIST_ENTRY EntryListHead;
  /* 0x0028 */ volatile unsigned long CurrentCount;
  /* 0x002c */ unsigned long MaximumCount;
  /* 0x0030 */ struct _LIST_ENTRY ThreadListHead;
} KQUEUE, *PKQUEUE; /* size: 0x0040 */

typedef struct _RTL_AVL_TABLE
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS BalancedRoot;
  /* 0x0020 */ void* OrderedPointer;
  /* 0x0028 */ unsigned long WhichOrderedElement;
  /* 0x002c */ unsigned long NumberGenericTableElements;
  /* 0x0030 */ unsigned long DepthOfTree;
  /* 0x0034 */ long Padding_32;
  /* 0x0038 */ struct _RTL_BALANCED_LINKS* RestartKey;
  /* 0x0040 */ unsigned long DeleteCount;
  /* 0x0044 */ long Padding_33;
  /* 0x0048 */ void* CompareRoutine /* function */;
  /* 0x0050 */ void* AllocateRoutine /* function */;
  /* 0x0058 */ void* FreeRoutine /* function */;
  /* 0x0060 */ void* TableContext;
} RTL_AVL_TABLE, *PRTL_AVL_TABLE; /* size: 0x0068 */

typedef struct _KTMOBJECT_NAMESPACE
{
  /* 0x0000 */ struct _RTL_AVL_TABLE Table;
  /* 0x0068 */ struct _KMUTANT Mutex;
  /* 0x00a0 */ unsigned short LinksOffset;
  /* 0x00a2 */ unsigned short GuidOffset;
  /* 0x00a4 */ unsigned char Expired;
  /* 0x00a5 */ char __PADDING__[3];
} KTMOBJECT_NAMESPACE, *PKTMOBJECT_NAMESPACE; /* size: 0x00a8 */

typedef struct _KRESOURCEMANAGER_COMPLETION_BINDING
{
  /* 0x0000 */ struct _LIST_ENTRY NotificationListHead;
  /* 0x0010 */ void* Port;
  /* 0x0018 */ unsigned __int64 Key;
  /* 0x0020 */ struct _EPROCESS* BindingProcess;
} KRESOURCEMANAGER_COMPLETION_BINDING, *PKRESOURCEMANAGER_COMPLETION_BINDING; /* size: 0x0028 */

typedef struct _KRESOURCEMANAGER
{
  /* 0x0000 */ struct _KEVENT NotificationAvailable;
  /* 0x0018 */ unsigned long cookie;
  /* 0x001c */ enum _KRESOURCEMANAGER_STATE State;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ long Padding_34;
  /* 0x0028 */ struct _KMUTANT Mutex;
  /* 0x0060 */ struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  /* 0x0088 */ struct _GUID RmId;
  /* 0x0098 */ struct _KQUEUE NotificationQueue;
  /* 0x00d8 */ struct _KMUTANT NotificationMutex;
  /* 0x0110 */ struct _LIST_ENTRY EnlistmentHead;
  /* 0x0120 */ unsigned long EnlistmentCount;
  /* 0x0124 */ long Padding_35;
  /* 0x0128 */ void* NotificationRoutine /* function */;
  /* 0x0130 */ void* Key;
  /* 0x0138 */ struct _LIST_ENTRY ProtocolListHead;
  /* 0x0148 */ struct _LIST_ENTRY PendingPropReqListHead;
  /* 0x0158 */ struct _LIST_ENTRY CRMListEntry;
  /* 0x0168 */ struct _KTM* Tm;
  /* 0x0170 */ struct _UNICODE_STRING Description;
  /* 0x0180 */ struct _KTMOBJECT_NAMESPACE Enlistments;
  /* 0x0228 */ struct _KRESOURCEMANAGER_COMPLETION_BINDING CompletionBinding;
} KRESOURCEMANAGER, *PKRESOURCEMANAGER; /* size: 0x0250 */

typedef enum _PO_EFFECTIVE_POWER_MODE
{
  PoEffectivePowerModeBatterySaver = 0,
  PoEffectivePowerModeEnergySaverHighSavings = 0,
  PoEffectivePowerModeBetterBattery = 1,
  PoEffectivePowerModeEnergySaverStandard = 1,
  PoEffectivePowerModeBalanced = 2,
  PoEffectivePowerModeHighPerformance = 3,
  PoEffectivePowerModeMaxPerformance = 4,
  PoEffectivePowerModeGameMode = 5,
  PoEffectivePowerModeMixedReality = 6,
} PO_EFFECTIVE_POWER_MODE, *PPO_EFFECTIVE_POWER_MODE;

typedef struct _MI_ZERO_COST_COUNTS
{
  /* 0x0000 */ unsigned __int64 NativeSum;
  /* 0x0008 */ unsigned __int64 AlternateSum;
} MI_ZERO_COST_COUNTS, *PMI_ZERO_COST_COUNTS; /* size: 0x0010 */

typedef enum _PO_FX_PERF_STATE_UNIT
{
  PoFxPerfStateUnitOther = 0,
  PoFxPerfStateUnitFrequency = 1,
  PoFxPerfStateUnitBandwidth = 2,
  PoFxPerfStateUnitMaximum = 3,
} PO_FX_PERF_STATE_UNIT, *PPO_FX_PERF_STATE_UNIT;

union wil_details_ReportedState
{
  union
  {
    /* 0x0000 */ unsigned int exchange;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int queuedForReporting : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned int reportedDeviceUsage : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned int reportedDevicePotential : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned int reportedDeviceOpportunity : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned int reportedDevicePotentialOpportunity : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned int usageCount : 9; /* bit position: 5 */
      /* 0x0000 */ unsigned int usageCountRepresentsPotential : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned int opportunityCount : 7; /* bit position: 15 */
      /* 0x0000 */ unsigned int opportunityCountRepresentsPotential : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned int unused : 9; /* bit position: 23 */
    }; /* bitfield */
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

union wil_details_RecordedState
{
  union
  {
    /* 0x0000 */ unsigned int exchange;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int recordedDeviceUsage : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned int recordedDevicePotential : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned int recordedDeviceOpportunity : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned int recordedDevicePotentialOpportunity : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned int recordedVariantDeviceUsage : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned int recordedVariant : 6; /* bit position: 5 */
      /* 0x0000 */ unsigned int unused : 21; /* bit position: 11 */
    }; /* bitfield */
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct wil_details_FeatureReportingCache
{
  /* 0x0000 */ union wil_details_ReportedState reported;
  /* 0x0004 */ union wil_details_RecordedState recorded;
}; /* size: 0x0008 */

enum DMA_COMPLETION_STATUS
{
  DmaComplete = 0,
  DmaAborted = 1,
  DmaError = 2,
  DmaCancelled = 3,
};

typedef enum _DMA_INTERRUPT_TYPE
{
  InterruptTypeCompletion = 0,
  InterruptTypeError = 1,
  InterruptTypeCancelled = 2,
} DMA_INTERRUPT_TYPE, *PDMA_INTERRUPT_TYPE;

typedef enum _CONFIGURATION_CLASS
{
  SystemClass = 0,
  ProcessorClass = 1,
  CacheClass = 2,
  AdapterClass = 3,
  ControllerClass = 4,
  PeripheralClass = 5,
  MemoryClass = 6,
  MaximumClass = 7,
} CONFIGURATION_CLASS, *PCONFIGURATION_CLASS;

typedef enum _FAULT_INFORMATION_ARCH
{
  FaultInformationInvalid = 0,
  FaultInformationArm64 = 1,
  FaultInformationX64 = 2,
} FAULT_INFORMATION_ARCH, *PFAULT_INFORMATION_ARCH;

typedef enum _INTERRUPT_TARGET_TYPE
{
  InterruptTargetInvalid = 0,
  InterruptTargetAllIncludingSelf = 1,
  InterruptTargetAllExcludingSelf = 2,
  InterruptTargetSelfOnly = 3,
  InterruptTargetPhysical = 4,
  InterruptTargetLogicalFlat = 5,
  InterruptTargetLogicalClustered = 6,
  InterruptTargetRemapIndex = 7,
  InterruptTargetHypervisor = 8,
} INTERRUPT_TARGET_TYPE, *PINTERRUPT_TARGET_TYPE;

typedef union _PS_CLIENT_SECURITY_CONTEXT
{
  union
  {
    /* 0x0000 */ unsigned __int64 ImpersonationData;
    /* 0x0000 */ void* ImpersonationToken;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 ImpersonationLevel : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 EffectiveOnly : 1; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} PS_CLIENT_SECURITY_CONTEXT, *PPS_CLIENT_SECURITY_CONTEXT; /* size: 0x0008 */

typedef enum _FS_FILTER_SECTION_SYNC_TYPE
{
  SyncTypeOther = 0,
  SyncTypeCreateSection = 1,
} FS_FILTER_SECTION_SYNC_TYPE, *PFS_FILTER_SECTION_SYNC_TYPE;

typedef enum _HV_SUBNODE_TYPE
{
  HvSubnodeAny = 0,
  HvSubnodeSocket = 1,
  HvSubnodeCluster = 2,
  HvSubnodeL3 = 3,
  HvSubnodeCount = 4,
  HvSubnodeInvalid = -1,
} HV_SUBNODE_TYPE, *PHV_SUBNODE_TYPE;

typedef struct _ETW_SYSTEM_LOGGER
{
  /* 0x0000 */ unsigned char LoggerId;
  /* 0x0001 */ unsigned char ClockType;
} ETW_SYSTEM_LOGGER, *PETW_SYSTEM_LOGGER; /* size: 0x0002 */

typedef enum _HAL_HV_DMA_DOMAIN_CONFIG_ARCH
{
  HalHvDmaDomainConfigArm64 = 0,
  HalHvDmaDomainConfigX64 = 1,
} HAL_HV_DMA_DOMAIN_CONFIG_ARCH, *PHAL_HV_DMA_DOMAIN_CONFIG_ARCH;

typedef struct _HAL_LOG_REGISTER_CONTEXT
{
  /* 0x0000 */ void* LogRoutine /* function */;
  /* 0x0008 */ unsigned long Flag;
  /* 0x000c */ long __PADDING__[1];
} HAL_LOG_REGISTER_CONTEXT, *PHAL_LOG_REGISTER_CONTEXT; /* size: 0x0010 */

typedef enum _EXT_IOMMU_ADDRESS_TRANSLATION_POLICY
{
  ExtIommuAddressTranslationPolicyDisable = 0,
  ExtIommuAddressTranslationPolicyEnableDefaultBypass = 1,
  ExtIommuAddressTranslationPolicyEnableDefaultBlock = 2,
  ExtIommuAddressTranslationPolicyEnableDefaultTranslate = 3,
} EXT_IOMMU_ADDRESS_TRANSLATION_POLICY, *PEXT_IOMMU_ADDRESS_TRANSLATION_POLICY;

typedef enum _EXT_IOMMU_INTERRUPT_REMAPPING_POLICY
{
  ExtIommuInterruptRemappingPolicyDisable = 0,
  ExtIommuInterruptRemappingPolicyEnableLoose = 1,
  ExtIommuInterruptRemappingPolicyEnableStrict = 2,
} EXT_IOMMU_INTERRUPT_REMAPPING_POLICY, *PEXT_IOMMU_INTERRUPT_REMAPPING_POLICY;

typedef struct _EXT_IOMMU_RESERVED_MEMORY_REGION
{
  /* 0x0000 */ union _LARGE_INTEGER Base;
  /* 0x0008 */ union _LARGE_INTEGER Limit;
  /* 0x0010 */ unsigned char Ignored;
  /* 0x0011 */ char __PADDING__[7];
} EXT_IOMMU_RESERVED_MEMORY_REGION, *PEXT_IOMMU_RESERVED_MEMORY_REGION; /* size: 0x0018 */

union FAST_ERESOURCE_LOCK_STATE
{
  union
  {
    /* 0x0000 */ __int64 Value;
    struct /* bitfield */
    {
      /* 0x0000 */ __int64 Exclusive : 1; /* bit position: 0 */
      /* 0x0000 */ __int64 Conflict : 1; /* bit position: 1 */
      /* 0x0000 */ __int64 ShareCount : 62; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

typedef enum _INTERRUPT_LINE_TYPE
{
  InterruptLineInvalidType = 0,
  InterruptLineUnusable = 1,
  InterruptLineStandardPin = 2,
  InterruptLineProcessorLocal = 3,
  InterruptLineSoftwareOnly = 4,
  InterruptLineSoftwareOnlyProcessorLocal = 5,
  InterruptLineOutputPin = 6,
  InterruptLineMsi = 7,
} INTERRUPT_LINE_TYPE, *PINTERRUPT_LINE_TYPE;

typedef struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS
{
  /* 0x0000 */ struct _VERIFIER_SHARED_EXPORT_THUNK* SharedExportThunks;
  /* 0x0008 */ struct _VERIFIER_SHARED_EXPORT_THUNK* PoolSharedExportThunks;
  /* 0x0010 */ struct _VERIFIER_SHARED_EXPORT_THUNK* XdvSharedExportThunks;
} VF_TARGET_ALL_SHARED_EXPORT_THUNKS, *PVF_TARGET_ALL_SHARED_EXPORT_THUNKS; /* size: 0x0018 */

typedef enum _INTERRUPT_LINE_SUBTYPE
{
  InterruptLineSubTypeNone = 0,
  InterruptLineSubTypeV2m = 1,
  InterruptLineSubTypeLpi = 2,
} INTERRUPT_LINE_SUBTYPE, *PINTERRUPT_LINE_SUBTYPE;

typedef struct _DBGKD_SET_SPECIAL_CALL64
{
  /* 0x0000 */ unsigned __int64 SpecialCall;
} DBGKD_SET_SPECIAL_CALL64, *PDBGKD_SET_SPECIAL_CALL64; /* size: 0x0008 */

typedef enum _BOOT_ENTROPY_SOURCE_ID
{
  BootEntropySourceNone = 0,
  BootEntropySourceSeedfile = 1,
  BootEntropySourceExternal = 2,
  BootEntropySourceTpm = 3,
  BootEntropySourceRdrand = 4,
  BootEntropySourceTime = 5,
  BootEntropySourceAcpiOem0 = 6,
  BootEntropySourceUefi = 7,
  BootEntropySourceCng = 8,
  BootEntropySourceTcbTpm = 9,
  BootEntropySourceTcbRdrand = 10,
  BootMaxEntropySources = 10,
} BOOT_ENTROPY_SOURCE_ID, *PBOOT_ENTROPY_SOURCE_ID;

typedef enum _EXT_IOMMU_DOMAIN_TYPE
{
  ExtIommuDomainTypeS1 = 0,
  ExtIommuDomainTypeS2 = 1,
  ExtIommuDomainTypeInvalid = 2,
} EXT_IOMMU_DOMAIN_TYPE, *PEXT_IOMMU_DOMAIN_TYPE;

typedef struct _RTL_SPLAY_LINKS
{
  /* 0x0000 */ struct _RTL_SPLAY_LINKS* Parent;
  /* 0x0008 */ struct _RTL_SPLAY_LINKS* LeftChild;
  /* 0x0010 */ struct _RTL_SPLAY_LINKS* RightChild;
} RTL_SPLAY_LINKS, *PRTL_SPLAY_LINKS; /* size: 0x0018 */

typedef struct _EVENT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned char Version;
  /* 0x0003 */ unsigned char Channel;
  /* 0x0004 */ unsigned char Level;
  /* 0x0005 */ unsigned char Opcode;
  /* 0x0006 */ unsigned short Task;
  /* 0x0008 */ unsigned __int64 Keyword;
} EVENT_DESCRIPTOR, *PEVENT_DESCRIPTOR; /* size: 0x0010 */

typedef struct _EVENT_HEADER
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short HeaderType;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short EventProperty;
  /* 0x0008 */ unsigned long ThreadId;
  /* 0x000c */ unsigned long ProcessId;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ struct _GUID ProviderId;
  /* 0x0028 */ struct _EVENT_DESCRIPTOR EventDescriptor;
  union
  {
    struct
    {
      /* 0x0038 */ unsigned long KernelTime;
      /* 0x003c */ unsigned long UserTime;
    }; /* size: 0x0008 */
    /* 0x0038 */ unsigned __int64 ProcessorTime;
  }; /* size: 0x0008 */
  /* 0x0040 */ struct _GUID ActivityId;
} EVENT_HEADER, *PEVENT_HEADER; /* size: 0x0050 */

typedef enum _EXT_IOMMU_TRANSLATION_TYPE
{
  ExtTranslationTypePassThrough = 0,
  ExtTranslationTypeBlocked = 1,
  ExtTranslationTypeTranslate = 2,
  ExtTranslationTypeInvalid = 3,
} EXT_IOMMU_TRANSLATION_TYPE, *PEXT_IOMMU_TRANSLATION_TYPE;

struct _JOB_ACCESS_STATE;

typedef enum _IRQ_PRIORITY
{
  IrqPriorityUndefined = 0,
  IrqPriorityLow = 1,
  IrqPriorityNormal = 2,
  IrqPriorityHigh = 3,
} IRQ_PRIORITY, *PIRQ_PRIORITY;

typedef enum _DMA_COMMON_BUFFER_EXTENDED_CONFIGURATION_TYPE
{
  CommonBufferConfigTypeLogicalAddressLimits = 0,
  CommonBufferConfigTypeSubSection = 1,
  CommonBufferConfigTypeHardwareAccessPermissions = 2,
  CommonBufferConfigTypeMax = 3,
} DMA_COMMON_BUFFER_EXTENDED_CONFIGURATION_TYPE, *PDMA_COMMON_BUFFER_EXTENDED_CONFIGURATION_TYPE;

typedef struct _ETW_REPLY_QUEUE
{
  /* 0x0000 */ struct _KQUEUE Queue;
  /* 0x0040 */ long EventsLost;
  /* 0x0044 */ long __PADDING__[1];
} ETW_REPLY_QUEUE, *PETW_REPLY_QUEUE; /* size: 0x0048 */

typedef enum _DMA_COMMON_BUFFER_EXTENDED_CONFIGURATION_ACCESS_TYPE
{
  CommonBufferHardwareAccessReadOnly = 0,
  CommonBufferHardwareAccessWriteOnly = 1,
  CommonBufferHardwareAccessReadWrite = 2,
  CommonBufferHardwareAccessMax = 3,
} DMA_COMMON_BUFFER_EXTENDED_CONFIGURATION_ACCESS_TYPE, *PDMA_COMMON_BUFFER_EXTENDED_CONFIGURATION_ACCESS_TYPE;

typedef struct _VI_POOL_PAGE_HEADER
{
  /* 0x0000 */ struct _SLIST_ENTRY* NextPage;
  /* 0x0008 */ void* VerifierEntry;
  /* 0x0010 */ unsigned __int64 Signature;
} VI_POOL_PAGE_HEADER, *PVI_POOL_PAGE_HEADER; /* size: 0x0018 */

typedef struct _VI_POOL_ENTRY_INUSE
{
  /* 0x0000 */ void* VirtualAddress;
  /* 0x0008 */ void* CallingAddress;
  /* 0x0010 */ unsigned __int64 NumberOfBytes;
  /* 0x0018 */ unsigned __int64 Tag;
} VI_POOL_ENTRY_INUSE, *PVI_POOL_ENTRY_INUSE; /* size: 0x0020 */

typedef struct _VI_POOL_ENTRY
{
  union
  {
    /* 0x0000 */ struct _VI_POOL_PAGE_HEADER PageHeader;
    /* 0x0000 */ struct _VI_POOL_ENTRY_INUSE InUse;
    struct
    {
      /* 0x0000 */ struct _SLIST_ENTRY* NextFree;
      /* 0x0008 */ long __PADDING__[6];
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
} VI_POOL_ENTRY, *PVI_POOL_ENTRY; /* size: 0x0020 */

typedef enum _WHEA_RECOVERY_CONTEXT_ERROR_TYPE
{
  WheaRecoveryContextErrorTypeMemory = 1,
  WheaRecoveryContextErrorTypePmem = 2,
  WheaRecoveryContextErrorTypeMax = 3,
} WHEA_RECOVERY_CONTEXT_ERROR_TYPE, *PWHEA_RECOVERY_CONTEXT_ERROR_TYPE;

typedef struct _MI_WORKING_SET_PAGE_TABLE_AGE_LINKS
{
  /* 0x0000 */ volatile long Lock;
  /* 0x0004 */ unsigned long EntryCount;
  /* 0x0008 */ struct _MMPFN* Flink;
  /* 0x0010 */ struct _MMPFN* Blink;
} MI_WORKING_SET_PAGE_TABLE_AGE_LINKS, *PMI_WORKING_SET_PAGE_TABLE_AGE_LINKS; /* size: 0x0018 */

typedef struct _MMWSL_INSTANCE
{
  /* 0x0000 */ struct _MMPTE* PteResumePoint[3];
  /* 0x0018 */ unsigned long LastAccessClearingRemainder;
  /* 0x001c */ unsigned long LastAgingRemainder;
  /* 0x0020 */ unsigned __int64 LockedEntries;
  /* 0x0028 */ long Padding_36[6];
  /* 0x0040 */ struct _MI_WORKING_SET_PAGE_TABLE_AGE_LINKS ActivePageTableLinks[8];
} MMWSL_INSTANCE, *PMMWSL_INSTANCE; /* size: 0x0100 */

typedef enum _IOMMU_PASID_SETTING
{
  PasidSettingPreserve = 0,
  PasidSettingEnableAll = 1,
  PasidSettingEnablePasidOnly = 2,
  PasidSettingEnableDefaultOnly = 3,
  PasidSettingDisable = 4,
  PasidSettingMax = 5,
} IOMMU_PASID_SETTING, *PIOMMU_PASID_SETTING;

typedef struct _MI_AWEINFO_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long ProcessDefault : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PagesLockInitialized : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long ZeroPagesOptional : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long IoSpace : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long LazyTbFlush : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long Unused : 27; /* bit position: 5 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AllBits;
  }; /* size: 0x0004 */
} MI_AWEINFO_FLAGS, *PMI_AWEINFO_FLAGS; /* size: 0x0004 */

typedef enum _IOMMU_ATS_SETTING
{
  AtsSettingPreserve = 0,
  AtsSettingEnable = 1,
  AtsSettingDisable = 2,
} IOMMU_ATS_SETTING, *PIOMMU_ATS_SETTING;

typedef enum _EXT_IOMMU_DEVICE_TYPE
{
  EXT_IOMMU_DEVICE_TYPE_INVALID = 0,
  EXT_IOMMU_DEVICE_TYPE_PCI = 1,
  EXT_IOMMU_DEVICE_TYPE_ACPI = 2,
  EXT_IOMMU_DEVICE_TYPE_IOAPIC = 3,
  EXT_IOMMU_DEVICE_TYPE_LOGICAL = 4,
  EXT_IOMMU_DEVICE_TYPE_TEST = 5,
  EXT_IOMMU_DEVICE_TYPE_MAX = 6,
} EXT_IOMMU_DEVICE_TYPE, *PEXT_IOMMU_DEVICE_TYPE;

typedef enum _IOMMU_DMA_DOMAIN_TYPE
{
  DomainTypeTranslate = 0,
  DomainTypePassThrough = 1,
  DomainTypeUnmanaged = 2,
  DomainTypeTranslateS1 = 3,
  DomainTypeMax = 4,
} IOMMU_DMA_DOMAIN_TYPE, *PIOMMU_DMA_DOMAIN_TYPE;

typedef enum _IOMMU_DMA_LOGICAL_ALLOCATOR_TYPE
{
  IommuDmaLogicalAllocatorNone = 0,
  IommuDmaLogicalAllocatorBuddy = 1,
  IommuDmaLogicalAllocatorMax = 2,
} IOMMU_DMA_LOGICAL_ALLOCATOR_TYPE, *PIOMMU_DMA_LOGICAL_ALLOCATOR_TYPE;

struct _PCW_INSTANCE;

typedef enum _IOMMU_DMA_LOGICAL_ALLOCATOR_CAPABILITY_EXPLICIT_ADDRESS
{
  LogicalAllocatorCapabilityExplicitNotSupported = 0,
  LogicalAllocatorCapabilityExplicitReservedOnly = 1,
  LogicalAllocatorCapabilityExplicitAnyAddress = 2,
} IOMMU_DMA_LOGICAL_ALLOCATOR_CAPABILITY_EXPLICIT_ADDRESS, *PIOMMU_DMA_LOGICAL_ALLOCATOR_CAPABILITY_EXPLICIT_ADDRESS;

typedef enum _WHEA_RECOVERY_CONTEXT_ACTION_TAKEN
{
  WheaRecoveryContextActionTakenNone = 0,
  WheaRecoveryContextActionTakenOfflineDemotion = 1,
  WheaRecoveryContextActionTakenPageNotReplaced = 2,
  WheaRecoveryContextActionTakenPageReplaced = 3,
  WheaRecoveryContextActionTakenMax = 4,
} WHEA_RECOVERY_CONTEXT_ACTION_TAKEN, *PWHEA_RECOVERY_CONTEXT_ACTION_TAKEN;

typedef enum _DMA_SPEED
{
  Compatible = 0,
  TypeA = 1,
  TypeB = 2,
  TypeC = 3,
  TypeF = 4,
  MaximumDmaSpeed = 5,
} DMA_SPEED, *PDMA_SPEED;

typedef struct _ARM64_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long TraceFlag;
  /* 0x0008 */ unsigned __int64 CurrentSymbolStart;
  /* 0x0010 */ unsigned __int64 CurrentSymbolEnd;
} ARM64_DBGKD_CONTROL_SET, *PARM64_DBGKD_CONTROL_SET; /* size: 0x0018 */

enum SE_WS_APPX_SIGNATURE_ORIGIN
{
  SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
  SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
  SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
  SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
  SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4,
};

typedef enum _PS_MITIGATION_OPTION
{
  PS_MITIGATION_OPTION_NX = 0,
  PS_MITIGATION_OPTION_SEHOP = 1,
  PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,
  PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,
  PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,
  PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,
  PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,
  PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,
  PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,
  PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,
  PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,
  PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,
  PS_MITIGATION_OPTION_FONT_DISABLE = 12,
  PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,
  PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,
  PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,
  PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,
  PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,
  PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,
  PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,
  PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,
  PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,
  PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,
  PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,
  PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,
  PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25,
  PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,
  PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,
  PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28,
  PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 29,
  PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 30,
  PS_MITIGATION_OPTION_CET_USER_SHADOW_STACKS = 31,
  PS_MITIGATION_OPTION_USER_CET_SET_CONTEXT_IP_VALIDATION = 32,
  PS_MITIGATION_OPTION_BLOCK_NON_CET_BINARIES = 33,
  PS_MITIGATION_OPTION_RESERVED_WAS_XFG = 34,
  PS_MITIGATION_OPTION_POINTER_AUTH_USER_IP = 35,
  PS_MITIGATION_OPTION_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY = 36,
  PS_MITIGATION_OPTION_REDIRECTION_TRUST = 37,
  PS_MITIGATION_OPTION_RESTRICT_CORE_SHARING = 38,
  PS_MITIGATION_OPTION_FSCTL_SYSTEM_CALL_DISABLE = 39,
} PS_MITIGATION_OPTION, *PPS_MITIGATION_OPTION;

typedef enum _NT_PRODUCT_TYPE
{
  NtProductWinNt = 1,
  NtProductLanManNt = 2,
  NtProductServer = 3,
} NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
  StandardDesign = 0,
  NEC98x86 = 1,
  EndAlternatives = 2,
} ALTERNATIVE_ARCHITECTURE_TYPE, *PALTERNATIVE_ARCHITECTURE_TYPE;

typedef union _CLS_LSN
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned int idxRecord;
      /* 0x0004 */ unsigned long cidContainer;
    } /* size: 0x0008 */ offset;
    /* 0x0000 */ unsigned __int64 ullOffset;
  }; /* size: 0x0008 */
} CLS_LSN, *PCLS_LSN; /* size: 0x0008 */

typedef struct _WORK_QUEUE_ITEM
{
  /* 0x0000 */ struct _LIST_ENTRY List;
  /* 0x0010 */ void* WorkerRoutine /* function */;
  /* 0x0018 */ void* Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM; /* size: 0x0020 */

typedef struct _KDPC
{
  union
  {
    /* 0x0000 */ unsigned long TargetInfoAsUlong;
    struct
    {
      /* 0x0000 */ unsigned char Type;
      /* 0x0001 */ unsigned char Importance;
      /* 0x0002 */ volatile unsigned short Number;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_37;
  /* 0x0008 */ struct _SINGLE_LIST_ENTRY DpcListEntry;
  /* 0x0010 */ unsigned __int64 ProcessorHistory;
  /* 0x0018 */ void* DeferredRoutine /* function */;
  /* 0x0020 */ void* DeferredContext;
  /* 0x0028 */ void* SystemArgument1;
  /* 0x0030 */ void* SystemArgument2;
  /* 0x0038 */ void* DpcData;
} KDPC, *PKDPC; /* size: 0x0040 */

typedef union _ULARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ unsigned __int64 QuadPart;
  }; /* size: 0x0008 */
} ULARGE_INTEGER, *PULARGE_INTEGER; /* size: 0x0008 */

typedef struct _KTIMER
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ union _ULARGE_INTEGER DueTime;
  /* 0x0020 */ struct _LIST_ENTRY TimerListEntry;
  /* 0x0030 */ struct _KDPC* Dpc;
  /* 0x0038 */ unsigned short Processor;
  /* 0x003a */ unsigned short TimerType;
  /* 0x003c */ unsigned long Period;
} KTIMER, *PKTIMER; /* size: 0x0040 */

typedef enum _KTRANSACTION_OUTCOME
{
  KTxOutcomeUninitialized = 0,
  KTxOutcomeUndetermined = 1,
  KTxOutcomeCommitted = 2,
  KTxOutcomeAborted = 3,
  KTxOutcomeUnavailable = 4,
} KTRANSACTION_OUTCOME, *PKTRANSACTION_OUTCOME;

typedef struct _KTRANSACTION_HISTORY
{
  /* 0x0000 */ enum _TAG_UNNAMED_1 RecordType;
  /* 0x0004 */ unsigned long Payload;
} KTRANSACTION_HISTORY, *PKTRANSACTION_HISTORY; /* size: 0x0008 */

typedef struct _KTRANSACTION
{
  /* 0x0000 */ struct _KEVENT OutcomeEvent;
  /* 0x0018 */ unsigned long cookie;
  /* 0x001c */ long Padding_38;
  /* 0x0020 */ struct _KMUTANT Mutex;
  /* 0x0058 */ struct _KTRANSACTION* TreeTx;
  /* 0x0060 */ struct _KTMOBJECT_NAMESPACE_LINK GlobalNamespaceLink;
  /* 0x0088 */ struct _KTMOBJECT_NAMESPACE_LINK TmNamespaceLink;
  /* 0x00b0 */ struct _GUID UOW;
  /* 0x00c0 */ enum _KTRANSACTION_STATE State;
  /* 0x00c4 */ unsigned long Flags;
  /* 0x00c8 */ struct _LIST_ENTRY EnlistmentHead;
  /* 0x00d8 */ unsigned long EnlistmentCount;
  /* 0x00dc */ unsigned long RecoverableEnlistmentCount;
  /* 0x00e0 */ unsigned long PrePrepareRequiredEnlistmentCount;
  /* 0x00e4 */ unsigned long PrepareRequiredEnlistmentCount;
  /* 0x00e8 */ unsigned long OutcomeRequiredEnlistmentCount;
  /* 0x00ec */ unsigned long PendingResponses;
  /* 0x00f0 */ struct _KENLISTMENT* SuperiorEnlistment;
  /* 0x00f8 */ union _CLS_LSN LastLsn;
  /* 0x0100 */ struct _LIST_ENTRY PromotedEntry;
  /* 0x0110 */ struct _KTRANSACTION* PromoterTransaction;
  /* 0x0118 */ void* PromotePropagation;
  /* 0x0120 */ unsigned long IsolationLevel;
  /* 0x0124 */ unsigned long IsolationFlags;
  /* 0x0128 */ union _LARGE_INTEGER Timeout;
  /* 0x0130 */ struct _UNICODE_STRING Description;
  /* 0x0140 */ struct _KTHREAD* RollbackThread;
  /* 0x0148 */ struct _WORK_QUEUE_ITEM RollbackWorkItem;
  /* 0x0168 */ struct _KDPC RollbackDpc;
  /* 0x01a8 */ struct _KTIMER RollbackTimer;
  /* 0x01e8 */ struct _LIST_ENTRY LsnOrderedEntry;
  /* 0x01f8 */ enum _KTRANSACTION_OUTCOME Outcome;
  /* 0x01fc */ long Padding_39;
  /* 0x0200 */ struct _KTM* Tm;
  /* 0x0208 */ __int64 CommitReservation;
  /* 0x0210 */ struct _KTRANSACTION_HISTORY TransactionHistory[10];
  /* 0x0260 */ unsigned long TransactionHistoryCount;
  /* 0x0264 */ long Padding_40;
  /* 0x0268 */ void* DTCPrivateInformation;
  /* 0x0270 */ unsigned long DTCPrivateInformationLength;
  /* 0x0274 */ long Padding_41;
  /* 0x0278 */ struct _KMUTANT DTCPrivateInformationMutex;
  /* 0x02b0 */ void* PromotedTxSelfHandle;
  /* 0x02b8 */ unsigned long PendingPromotionCount;
  /* 0x02bc */ long Padding_42;
  /* 0x02c0 */ struct _KEVENT PromotionCompletedEvent;
} KTRANSACTION, *PKTRANSACTION; /* size: 0x02d8 */

typedef enum _TP_CALLBACK_PRIORITY
{
  TP_CALLBACK_PRIORITY_HIGH = 0,
  TP_CALLBACK_PRIORITY_NORMAL = 1,
  TP_CALLBACK_PRIORITY_LOW = 2,
  TP_CALLBACK_PRIORITY_INVALID = 3,
  TP_CALLBACK_PRIORITY_COUNT = 3,
} TP_CALLBACK_PRIORITY, *PTP_CALLBACK_PRIORITY;

typedef enum _PP_NPAGED_LOOKASIDE_NUMBER
{
  LookasideSmallIrpList = 0,
  LookasideMediumIrpList = 1,
  LookasideLargeIrpList = 2,
  LookasideMdlList = 3,
  LookasideCreateInfoList = 4,
  LookasideNameBufferList = 5,
  LookasideTwilightList = 6,
  LookasideCompletionList = 7,
  LookasideScratchBufferList = 8,
  LookasideXStateContextList = 9,
  LookasideCmCallbackList = 10,
  LookasideMaximumList = 11,
} PP_NPAGED_LOOKASIDE_NUMBER, *PPP_NPAGED_LOOKASIDE_NUMBER;

typedef enum _EX_GEN_RANDOM_DOMAIN
{
  ExGenRandomDomainKernel = 0,
  ExGenRandomDomainFirst = 0,
  ExGenRandomDomainUserVisible = 1,
  ExGenRandomDomainMax = 2,
} EX_GEN_RANDOM_DOMAIN, *PEX_GEN_RANDOM_DOMAIN;

typedef enum _SYSTEM_DLL_TYPE
{
  PsNativeSystemDll = 0,
  PsWowX86SystemDll = 1,
  PsWowChpeX86SystemDll = 2,
  PsChpeV2SystemDll = 3,
  PsVsmEnclaveRuntimeDll = 4,
  PsTrustedAppsRuntimeDll = 5,
  PsSystemDllTotalTypes = 6,
} SYSTEM_DLL_TYPE, *PSYSTEM_DLL_TYPE;

typedef struct _PERFINFO_GROUPMASK
{
  /* 0x0000 */ unsigned long Masks[8];
} PERFINFO_GROUPMASK, *PPERFINFO_GROUPMASK; /* size: 0x0020 */

typedef enum _IO_PRIORITY_HINT
{
  IoPriorityVeryLow = 0,
  IoPriorityLow = 1,
  IoPriorityNormal = 2,
  IoPriorityHigh = 3,
  IoPriorityCritical = 4,
  MaxIoPriorityTypes = 5,
} IO_PRIORITY_HINT, *PIO_PRIORITY_HINT;

typedef enum _PF_FILE_ACCESS_TYPE
{
  PfFileAccessTypeRead = 0,
  PfFileAccessTypeWrite = 1,
  PfFileAccessTypeMax = 2,
} PF_FILE_ACCESS_TYPE, *PPF_FILE_ACCESS_TYPE;

enum wil_FeatureVariantPayloadKind
{
  wil_FeatureVariantPayloadKind_None = 0,
  wil_FeatureVariantPayloadKind_Resident = 1,
  wil_FeatureVariantPayloadKind_External = 2,
};

typedef struct _INVERTED_FUNCTION_TABLE_ENTRY
{
  union
  {
    /* 0x0000 */ struct _IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionTable;
    /* 0x0000 */ struct _DYNAMIC_FUNCTION_TABLE* DynamicTable;
  }; /* size: 0x0008 */
  /* 0x0008 */ void* ImageBase;
  /* 0x0010 */ unsigned long SizeOfImage;
  /* 0x0014 */ unsigned long SizeOfTable;
} INVERTED_FUNCTION_TABLE_ENTRY, *PINVERTED_FUNCTION_TABLE_ENTRY; /* size: 0x0018 */

enum wil_ReportingKind
{
  wil_ReportingKind_None = 0,
  wil_ReportingKind_UniqueUsage = 1,
  wil_ReportingKind_UniqueOpportunity = 2,
  wil_ReportingKind_DeviceUsage = 3,
  wil_ReportingKind_DeviceOpportunity = 4,
  wil_ReportingKind_TotalDuration = 5,
  wil_ReportingKind_PausedDuration = 6,
};

typedef struct _DMA_ADAPTER_INFO_V1
{
  /* 0x0000 */ unsigned long ReadDmaCounterAvailable;
  /* 0x0004 */ unsigned long ScatterGatherLimit;
  /* 0x0008 */ unsigned long DmaAddressWidth;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long MinimumTransferUnit;
} DMA_ADAPTER_INFO_V1, *PDMA_ADAPTER_INFO_V1; /* size: 0x0014 */

typedef struct _DEVICE_DESCRIPTION
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned char Master;
  /* 0x0005 */ unsigned char ScatterGather;
  /* 0x0006 */ unsigned char DemandMode;
  /* 0x0007 */ unsigned char AutoInitialize;
  /* 0x0008 */ unsigned char Dma32BitAddresses;
  /* 0x0009 */ unsigned char IgnoreCount;
  /* 0x000a */ unsigned char Reserved1;
  /* 0x000b */ unsigned char Dma64BitAddresses;
  /* 0x000c */ unsigned long BusNumber;
  /* 0x0010 */ unsigned long DmaChannel;
  /* 0x0014 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0018 */ enum _DMA_WIDTH DmaWidth;
  /* 0x001c */ enum _DMA_SPEED DmaSpeed;
  /* 0x0020 */ unsigned long MaximumLength;
  /* 0x0024 */ unsigned long DmaPort;
  /* 0x0028 */ unsigned long DmaAddressWidth;
  /* 0x002c */ unsigned long DmaControllerInstance;
  /* 0x0030 */ unsigned long DmaRequestLine;
  /* 0x0034 */ long Padding_43;
  /* 0x0038 */ union _LARGE_INTEGER DeviceAddress;
} DEVICE_DESCRIPTION, *PDEVICE_DESCRIPTION; /* size: 0x0040 */

typedef struct _DMA_ADAPTER_INFO_CRASHDUMP
{
  /* 0x0000 */ struct _DEVICE_DESCRIPTION DeviceDescription;
  /* 0x0040 */ unsigned __int64 DeviceIdSize;
  /* 0x0048 */ void* DeviceId;
} DMA_ADAPTER_INFO_CRASHDUMP, *PDMA_ADAPTER_INFO_CRASHDUMP; /* size: 0x0050 */

typedef union _DMA_ADAPTER_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long Version;
      /* 0x0004 */ struct _DMA_ADAPTER_INFO_V1 V1;
    }; /* size: 0x0018 */
    struct
    {
      /* 0x0000 */ unsigned __int64 Reserved;
      /* 0x0008 */ struct _DMA_ADAPTER_INFO_CRASHDUMP Crashdump;
    }; /* size: 0x0058 */
  }; /* size: 0x0058 */
} DMA_ADAPTER_INFO, *PDMA_ADAPTER_INFO; /* size: 0x0058 */

enum EmptyCVariant_ExpiredFeature
{
  CVariant_ExpiredFeature_Empty = 0,
};

typedef struct _CLIENT_ID32
{
  /* 0x0000 */ unsigned long UniqueProcess;
  /* 0x0004 */ unsigned long UniqueThread;
} CLIENT_ID32, *PCLIENT_ID32; /* size: 0x0008 */

enum wil_VariantReportingKind
{
  wil_VariantReportingKind_None = 0,
  wil_VariantReportingKind_UniqueUsage = 1,
  wil_VariantReportingKind_DeviceUsage = 2,
};

typedef struct _KFLOATING_SAVE
{
  /* 0x0000 */ unsigned long Dummy;
} KFLOATING_SAVE, *PKFLOATING_SAVE; /* size: 0x0004 */

typedef enum _PNP_DEVNODE_STATE
{
  DeviceNodeUnspecified = 768,
  DeviceNodeUninitialized = 769,
  DeviceNodeUninitializedPending = 770,
  DeviceNodeInitializedPending = 771,
  DeviceNodeInitialized = 772,
  DeviceNodeDriversAdded = 773,
  DeviceNodeResourcesAssigned = 774,
  DeviceNodeStartPending = 775,
  DeviceNodeStartCompletion = 776,
  DeviceNodeStartPostWork = 777,
  DeviceNodeStarted = 778,
  DeviceNodeQueryStopped = 779,
  DeviceNodeStopped = 780,
  DeviceNodeRestartCompletion = 781,
  DeviceNodeEnumeratePending = 782,
  DeviceNodeEnumerateCompletion = 783,
  DeviceNodeAwaitingQueuedDeletion = 784,
  DeviceNodeAwaitingQueuedRemoval = 785,
  DeviceNodeQueryRemoved = 786,
  DeviceNodeRemovePendingCloses = 787,
  DeviceNodeRemoved = 788,
  DeviceNodeDeletePendingCloses = 789,
  DeviceNodeDeleted = 790,
  MaxDeviceNodeState = 791,
} PNP_DEVNODE_STATE, *PPNP_DEVNODE_STATE;

typedef struct _PNP_DEVICE_COMPLETION_REQUEST
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _DEVICE_NODE* DeviceNode;
  /* 0x0018 */ void* Context;
  /* 0x0020 */ enum _PNP_DEVNODE_STATE CompletionState;
  /* 0x0024 */ unsigned long IrpPended;
  /* 0x0028 */ long Status;
  /* 0x002c */ long Padding_44;
  /* 0x0030 */ void* Information;
  /* 0x0038 */ long ReferenceCount;
  /* 0x003c */ long Padding_45;
  /* 0x0040 */ struct _PNP_WATCHDOG* Watchdog;
} PNP_DEVICE_COMPLETION_REQUEST, *PPNP_DEVICE_COMPLETION_REQUEST; /* size: 0x0048 */

enum wil_details_ServiceReportingKind
{
  wil_details_ServiceReportingKind_UniqueUsage = 0,
  wil_details_ServiceReportingKind_UniqueOpportunity = 1,
  wil_details_ServiceReportingKind_DeviceUsage = 2,
  wil_details_ServiceReportingKind_DeviceOpportunity = 3,
  wil_details_ServiceReportingKind_PotentialUniqueUsage = 4,
  wil_details_ServiceReportingKind_PotentialUniqueOpportunity = 5,
  wil_details_ServiceReportingKind_PotentialDeviceUsage = 6,
  wil_details_ServiceReportingKind_PotentialDeviceOpportunity = 7,
  wil_details_ServiceReportingKind_EnabledTotalDuration = 8,
  wil_details_ServiceReportingKind_EnabledPausedDuration = 9,
  wil_details_ServiceReportingKind_DisabledTotalDuration = 10,
  wil_details_ServiceReportingKind_DisabledPausedDuration = 11,
  wil_details_ServiceReportingKind_CustomEnabledBase = 100,
  wil_details_ServiceReportingKind_CustomDisabledBase = 150,
  wil_details_ServiceReportingKind_Store = 254,
  wil_details_ServiceReportingKind_None = 255,
  wil_details_ServiceReportingKind_VariantDevicePotentialBase = 256,
  wil_details_ServiceReportingKind_VariantDeviceUsageBase = 320,
  wil_details_ServiceReportingKind_VariantUniquePotentialBase = 384,
  wil_details_ServiceReportingKind_VariantUniqueUsageBase = 448,
};

typedef struct _KAPC
{
  /* 0x0000 */ unsigned char Type;
  union
  {
    /* 0x0001 */ unsigned char AllFlags;
    struct /* bitfield */
    {
      /* 0x0001 */ unsigned char CallbackDataContext : 1; /* bit position: 0 */
      /* 0x0001 */ unsigned char Unused : 7; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0002 */ unsigned char Size;
  /* 0x0003 */ unsigned char SpareByte1;
  /* 0x0004 */ unsigned long SpareLong0;
  /* 0x0008 */ struct _KTHREAD* Thread;
  /* 0x0010 */ struct _LIST_ENTRY ApcListEntry;
  union
  {
    struct
    {
      /* 0x0020 */ void* KernelRoutine /* function */;
      /* 0x0028 */ void* RundownRoutine /* function */;
      /* 0x0030 */ void* NormalRoutine /* function */;
    }; /* size: 0x0018 */
    /* 0x0020 */ void* Reserved[3];
  }; /* size: 0x0018 */
  /* 0x0038 */ void* NormalContext;
  /* 0x0040 */ void* SystemArgument1;
  /* 0x0048 */ void* SystemArgument2;
  /* 0x0050 */ char ApcStateIndex;
  /* 0x0051 */ char ApcMode;
  /* 0x0052 */ unsigned char Inserted;
  /* 0x0053 */ char __PADDING__[5];
} KAPC, *PKAPC; /* size: 0x0058 */

typedef struct _ETIMER
{
  /* 0x0000 */ struct _KTIMER KeTimer;
  /* 0x0040 */ unsigned __int64 Lock;
  /* 0x0048 */ struct _KAPC TimerApc;
  /* 0x00a0 */ struct _KDPC TimerDpc;
  /* 0x00e0 */ struct _LIST_ENTRY ActiveTimerListEntry;
  /* 0x00f0 */ unsigned long Period;
  union
  {
    /* 0x00f4 */ char TimerFlags;
    struct /* bitfield */
    {
      /* 0x00f4 */ unsigned char ApcAssociated : 1; /* bit position: 0 */
      /* 0x00f4 */ unsigned char FlushDpcs : 1; /* bit position: 1 */
      /* 0x00f4 */ unsigned char Paused : 1; /* bit position: 2 */
      /* 0x00f4 */ unsigned char Spare1 : 5; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x00f5 */ unsigned char DueTimeType;
  /* 0x00f6 */ unsigned short Spare2;
  /* 0x00f8 */ struct _DIAGNOSTIC_CONTEXT* volatile WakeReason;
  /* 0x0100 */ struct _LIST_ENTRY WakeTimerListEntry;
  /* 0x0110 */ void* VirtualizedTimerCookie;
  /* 0x0118 */ struct _LIST_ENTRY VirtualizedTimerLinks;
  /* 0x0128 */ unsigned __int64 DueTime;
  /* 0x0130 */ unsigned long CoalescingWindow;
  /* 0x0134 */ long __PADDING__[1];
} ETIMER, *PETIMER; /* size: 0x0138 */

typedef enum _RTL_FEATURE_USAGE_PROVIDER_CALLBACK_TYPE
{
  FeatureUsageProviderCallbackDefault = 0,
  FeatureUsageProviderCallBackUsageFlushNotification = 1,
} RTL_FEATURE_USAGE_PROVIDER_CALLBACK_TYPE, *PRTL_FEATURE_USAGE_PROVIDER_CALLBACK_TYPE;

typedef struct _DBGKD_GET_VERSION32
{
  /* 0x0000 */ unsigned short MajorVersion;
  /* 0x0002 */ unsigned short MinorVersion;
  /* 0x0004 */ unsigned short ProtocolVersion;
  /* 0x0006 */ unsigned short Flags;
  /* 0x0008 */ unsigned long KernBase;
  /* 0x000c */ unsigned long PsLoadedModuleList;
  /* 0x0010 */ unsigned short MachineType;
  /* 0x0012 */ unsigned short ThCallbackStack;
  /* 0x0014 */ unsigned short NextCallback;
  /* 0x0016 */ unsigned short FramePointer;
  /* 0x0018 */ unsigned long KiCallUserMode;
  /* 0x001c */ unsigned long KeUserCallbackDispatcher;
  /* 0x0020 */ unsigned long BreakpointWithStatus;
  /* 0x0024 */ unsigned long DebuggerDataList;
} DBGKD_GET_VERSION32, *PDBGKD_GET_VERSION32; /* size: 0x0028 */

typedef struct _WNF_NODE_HEADER
{
  /* 0x0000 */ unsigned short NodeTypeCode;
  /* 0x0002 */ unsigned short NodeByteSize;
} WNF_NODE_HEADER, *PWNF_NODE_HEADER; /* size: 0x0004 */

typedef struct _EX_RUNDOWN_REF
{
  union
  {
    /* 0x0000 */ unsigned __int64 Count;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0008 */
} EX_RUNDOWN_REF, *PEX_RUNDOWN_REF; /* size: 0x0008 */

typedef enum _WNF_DATA_SCOPE
{
  WnfDataScopeSystem = 0,
  WnfDataScopeSession = 1,
  WnfDataScopeUser = 2,
  WnfDataScopeProcess = 3,
  WnfDataScopeMachine = 4,
  WnfDataScopePhysicalMachine = 5,
} WNF_DATA_SCOPE, *PWNF_DATA_SCOPE;

typedef struct _WNF_LOCK
{
  /* 0x0000 */ struct _EX_PUSH_LOCK PushLock;
} WNF_LOCK, *PWNF_LOCK; /* size: 0x0008 */

typedef struct _WNF_SCOPE_INSTANCE
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ long Padding_46;
  /* 0x0008 */ struct _EX_RUNDOWN_REF RunRef;
  /* 0x0010 */ enum _WNF_DATA_SCOPE DataScope;
  /* 0x0014 */ unsigned long InstanceIdSize;
  /* 0x0018 */ void* InstanceIdData;
  /* 0x0020 */ struct _LIST_ENTRY ResolverListEntry;
  /* 0x0030 */ struct _WNF_LOCK NameSetLock;
  /* 0x0038 */ struct _RTL_AVL_TREE NameSet;
  /* 0x0040 */ struct _WNF_PERMANENT_DATA_STORE* PermanentDataStore;
  /* 0x0048 */ struct _WNF_PERMANENT_DATA_STORE* VolatilePermanentDataStore;
} WNF_SCOPE_INSTANCE, *PWNF_SCOPE_INSTANCE; /* size: 0x0050 */

typedef enum _RTL_ARM_FEATURE_USAGE_PROVIDER_FLUSH_NOTIFICATION_FLAGS
{
  ArmFeatureUsageProviderFlushNotificationFlagsNone = 0,
  ArmFeatureUsageProviderFlushNotificationFlagsSetTimer = 1,
} RTL_ARM_FEATURE_USAGE_PROVIDER_FLUSH_NOTIFICATION_FLAGS, *PRTL_ARM_FEATURE_USAGE_PROVIDER_FLUSH_NOTIFICATION_FLAGS;

typedef struct _ETW_HASH_BUCKET
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead[3];
  /* 0x0030 */ struct _EX_PUSH_LOCK BucketLock;
} ETW_HASH_BUCKET, *PETW_HASH_BUCKET; /* size: 0x0038 */

typedef union _PPM_POLICY_SETTINGS_MASK
{
  union
  {
    /* 0x0000 */ unsigned __int64 Buffer[2];
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 PerfDecreaseTime : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 PerfIncreaseTime : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned __int64 PerfDecreasePolicy : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned __int64 PerfIncreasePolicy : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned __int64 PerfDecreaseThreshold : 1; /* bit position: 4 */
        /* 0x0000 */ unsigned __int64 PerfIncreaseThreshold : 1; /* bit position: 5 */
        /* 0x0000 */ unsigned __int64 PerfMinPolicy : 1; /* bit position: 6 */
        /* 0x0000 */ unsigned __int64 PerfMaxPolicy : 1; /* bit position: 7 */
        /* 0x0000 */ unsigned __int64 PerfTimeCheck : 1; /* bit position: 8 */
        /* 0x0000 */ unsigned __int64 PerfBoostPolicy : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned __int64 PerfBoostMode : 1; /* bit position: 10 */
        /* 0x0000 */ unsigned __int64 ThrottlingPolicy : 1; /* bit position: 11 */
        /* 0x0000 */ unsigned __int64 PerfHistoryCount : 1; /* bit position: 12 */
        /* 0x0000 */ unsigned __int64 ParkingPerfState : 1; /* bit position: 13 */
        /* 0x0000 */ unsigned __int64 LatencyHintPerf : 1; /* bit position: 14 */
        /* 0x0000 */ unsigned __int64 LatencyHintEpp : 1; /* bit position: 15 */
        /* 0x0000 */ unsigned __int64 LatencyHintUnpark : 1; /* bit position: 16 */
        /* 0x0000 */ unsigned __int64 CPMinCores : 1; /* bit position: 17 */
        /* 0x0000 */ unsigned __int64 CPMaxCores : 1; /* bit position: 18 */
        /* 0x0000 */ unsigned __int64 CPDecreasePolicy : 1; /* bit position: 19 */
        /* 0x0000 */ unsigned __int64 CPIncreasePolicy : 1; /* bit position: 20 */
        /* 0x0000 */ unsigned __int64 CPDecreaseTime : 1; /* bit position: 21 */
        /* 0x0000 */ unsigned __int64 CPIncreaseTime : 1; /* bit position: 22 */
        /* 0x0000 */ unsigned __int64 CPOverUtilizationThreshold : 1; /* bit position: 23 */
        /* 0x0000 */ unsigned __int64 CPDistributeUtility : 1; /* bit position: 24 */
        /* 0x0000 */ unsigned __int64 CPConcurrencyThreshold : 1; /* bit position: 25 */
        /* 0x0000 */ unsigned __int64 CPHeadroomThreshold : 1; /* bit position: 26 */
        /* 0x0000 */ unsigned __int64 CPDistributeThreshold : 1; /* bit position: 27 */
        /* 0x0000 */ unsigned __int64 IdleAllowScaling : 1; /* bit position: 28 */
        /* 0x0000 */ unsigned __int64 IdleDisabled : 1; /* bit position: 29 */
        /* 0x0000 */ unsigned __int64 IdleTimeCheck : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned __int64 IdleDemoteThreshold : 1; /* bit position: 31 */
        /* 0x0000 */ unsigned __int64 IdlePromoteThreshold : 1; /* bit position: 32 */
        /* 0x0000 */ unsigned __int64 EnergyPerfPreference : 1; /* bit position: 33 */
        /* 0x0000 */ unsigned __int64 AutonomousActivityWindow : 1; /* bit position: 34 */
        /* 0x0000 */ unsigned __int64 AutonomousMode : 1; /* bit position: 35 */
        /* 0x0000 */ unsigned __int64 DutyCycling : 1; /* bit position: 36 */
        /* 0x0000 */ unsigned __int64 FrequencyCap : 1; /* bit position: 37 */
        /* 0x0000 */ unsigned __int64 IdleStateMax : 1; /* bit position: 38 */
        /* 0x0000 */ unsigned __int64 ResponsivenessDisableThreshold : 1; /* bit position: 39 */
        /* 0x0000 */ unsigned __int64 ResponsivenessEnableThreshold : 1; /* bit position: 40 */
        /* 0x0000 */ unsigned __int64 ResponsivenessDisableTime : 1; /* bit position: 41 */
        /* 0x0000 */ unsigned __int64 ResponsivenessEnableTime : 1; /* bit position: 42 */
        /* 0x0000 */ unsigned __int64 ResponsivenessEppCeiling : 1; /* bit position: 43 */
        /* 0x0000 */ unsigned __int64 ResponsivenessPerfFloor : 1; /* bit position: 44 */
        /* 0x0000 */ unsigned __int64 SoftParkLatency : 1; /* bit position: 45 */
        /* 0x0000 */ unsigned __int64 ModuleUnparkPolicy : 1; /* bit position: 46 */
        /* 0x0000 */ unsigned __int64 ComplexUnparkPolicy : 1; /* bit position: 47 */
        /* 0x0000 */ unsigned __int64 SmtUnparkPolicy : 1; /* bit position: 48 */
        /* 0x0000 */ unsigned __int64 RestrictionCount : 1; /* bit position: 49 */
        /* 0x0000 */ unsigned __int64 ResourcePriority : 1; /* bit position: 50 */
        /* 0x0000 */ unsigned __int64 HeteroDecreaseTime : 1; /* bit position: 51 */
        /* 0x0000 */ unsigned __int64 HeteroIncreaseTime : 1; /* bit position: 52 */
        /* 0x0000 */ unsigned __int64 HeteroDecreaseThreshold : 1; /* bit position: 53 */
        /* 0x0000 */ unsigned __int64 HeteroIncreaseThreshold : 1; /* bit position: 54 */
        /* 0x0000 */ unsigned __int64 Class0FloorPerformance : 1; /* bit position: 55 */
        /* 0x0000 */ unsigned __int64 Class1InitialPerformance : 1; /* bit position: 56 */
        /* 0x0000 */ unsigned __int64 SchedulingPolicy : 1; /* bit position: 57 */
        /* 0x0000 */ unsigned __int64 ShortSchedulingPolicy : 1; /* bit position: 58 */
        /* 0x0000 */ unsigned __int64 ShortThreadRuntimeThreshold : 1; /* bit position: 59 */
        /* 0x0000 */ unsigned __int64 ShortThreadArchClassUpperThreshold : 1; /* bit position: 60 */
        /* 0x0000 */ unsigned __int64 ShortThreadArchClassLowerThreshold : 1; /* bit position: 61 */
        /* 0x0000 */ unsigned __int64 LongThreadArchClassUpperThreshold : 1; /* bit position: 62 */
        /* 0x0000 */ unsigned __int64 LongThreadArchClassLowerThreshold : 1; /* bit position: 63 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned __int64 HeteroPolicy : 1; /* bit position: 0 */
        /* 0x0008 */ unsigned __int64 HeteroContainmentIncreaseTime : 1; /* bit position: 1 */
        /* 0x0008 */ unsigned __int64 HeteroContainmentDecreaseTime : 1; /* bit position: 2 */
        /* 0x0008 */ unsigned __int64 HeteroEfficiencyContainmentThreshold : 1; /* bit position: 3 */
        /* 0x0008 */ unsigned __int64 HeteroHybridContainmentThreshold : 1; /* bit position: 4 */
        /* 0x0008 */ unsigned __int64 HeteroContainmentPolicy : 1; /* bit position: 5 */
      }; /* bitfield */
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} PPM_POLICY_SETTINGS_MASK, *PPPM_POLICY_SETTINGS_MASK; /* size: 0x0010 */

typedef struct _CM_UOW_KEY_STATE_MODIFICATION
{
  /* 0x0000 */ unsigned long RefCount;
  /* 0x0004 */ unsigned long SubKeyListCount[2];
  /* 0x000c */ unsigned long NewSubKeyList[2];
} CM_UOW_KEY_STATE_MODIFICATION, *PCM_UOW_KEY_STATE_MODIFICATION; /* size: 0x0014 */

enum wil_FeatureStore
{
  wil_FeatureStore_Machine = 0,
  wil_FeatureStore_User = 1,
  wil_FeatureStore_All = 2,
};

enum wil_FeatureEnabledState
{
  wil_FeatureEnabledState_Default = 0,
  wil_FeatureEnabledState_Disabled = 1,
  wil_FeatureEnabledState_Enabled = 2,
};

typedef struct _KTIMER2_COLLECTION
{
  /* 0x0000 */ struct _RTL_RB_TREE Tree;
  /* 0x0010 */ unsigned __int64 NextDueTime;
} KTIMER2_COLLECTION, *PKTIMER2_COLLECTION; /* size: 0x0018 */

typedef struct _CM_COMPONENT_HASH
{
  /* 0x0000 */ unsigned long Hash;
} CM_COMPONENT_HASH, *PCM_COMPONENT_HASH; /* size: 0x0004 */

typedef struct _CM_NAME_HASH
{
  /* 0x0000 */ struct _CM_COMPONENT_HASH ConvKey;
  /* 0x0004 */ long Padding_47;
  /* 0x0008 */ struct _CM_NAME_HASH* NextHash;
  /* 0x0010 */ unsigned short NameLength;
  /* 0x0012 */ wchar_t Name[1];
  /* 0x0014 */ long __PADDING__[1];
} CM_NAME_HASH, *PCM_NAME_HASH; /* size: 0x0018 */

typedef struct _EXT_IOMMU_FLUSH_CONTEXT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned int Status;
      /* 0x0004 */ long Padding_48;
      /* 0x0008 */ unsigned __int64 PhysicalAddress;
    } /* size: 0x0010 */ Intel;
    struct
    {
      /* 0x0000 */ unsigned __int64* StatusAddr;
      /* 0x0008 */ unsigned __int64 OldStatus;
    } /* size: 0x0010 */ Amd;
  }; /* size: 0x0010 */
} EXT_IOMMU_FLUSH_CONTEXT, *PEXT_IOMMU_FLUSH_CONTEXT; /* size: 0x0010 */

typedef struct _tlgProvider_t
{
  /* 0x0000 */ unsigned int LevelPlus1;
  /* 0x0004 */ long Padding_49;
  /* 0x0008 */ const unsigned short* ProviderMetadataPtr;
  /* 0x0010 */ unsigned __int64 KeywordAny;
  /* 0x0018 */ unsigned __int64 KeywordAll;
  /* 0x0020 */ unsigned __int64 RegHandle;
  /* 0x0028 */ void* EnableCallback /* function */;
  /* 0x0030 */ void* CallbackContext;
} tlgProvider_t, *PtlgProvider_t; /* size: 0x0038 */

enum POWER_POLICY_DEVICE_TYPE
{
  PolicyDeviceSystemButton = 0,
  PolicyDeviceThermalZone = 1,
  PolicyDeviceBattery = 2,
  PolicyDeviceMemory = 3,
  PolicyInitiatePowerActionAPI = 4,
  PolicySetPowerStateAPI = 5,
  PolicyImmediateDozeS4 = 6,
  PolicySystemIdle = 7,
  PolicyDeviceWakeAlarm = 8,
  PolicyDeviceFan = 9,
  PolicyCsBatterySaver = 10,
  PolicyImmediateDozeS4Predicted = 11,
  PolicyImmediateDozeS4PredictedNoWake = 12,
  PolicyImmediateDozeS4AdaptiveBudget = 13,
  PolicyImmediateDozeS4AdaptiveReserveNoWake = 14,
  PolicySystemInitiatedShutdown = 15,
  PolicyDeviceMax = 16,
};

enum SYSTEM_POWER_CONDITION
{
  PoAc = 0,
  PoDc = 1,
  PoHot = 2,
  PoConditionMaximum = 3,
};

struct BATTERY_REPORTING_SCALE
{
  /* 0x0000 */ unsigned long Granularity;
  /* 0x0004 */ unsigned long Capacity;
}; /* size: 0x0008 */

struct SYSTEM_POWER_CAPABILITIES
{
  /* 0x0000 */ unsigned char PowerButtonPresent;
  /* 0x0001 */ unsigned char SleepButtonPresent;
  /* 0x0002 */ unsigned char LidPresent;
  /* 0x0003 */ unsigned char SystemS1;
  /* 0x0004 */ unsigned char SystemS2;
  /* 0x0005 */ unsigned char SystemS3;
  /* 0x0006 */ unsigned char SystemS4;
  /* 0x0007 */ unsigned char SystemS5;
  /* 0x0008 */ unsigned char HiberFilePresent;
  /* 0x0009 */ unsigned char FullWake;
  /* 0x000a */ unsigned char VideoDimPresent;
  /* 0x000b */ unsigned char ApmPresent;
  /* 0x000c */ unsigned char UpsPresent;
  /* 0x000d */ unsigned char ThermalControl;
  /* 0x000e */ unsigned char ProcessorThrottle;
  /* 0x000f */ unsigned char ProcessorMinThrottle;
  /* 0x0010 */ unsigned char ProcessorMaxThrottle;
  /* 0x0011 */ unsigned char FastSystemS4;
  /* 0x0012 */ unsigned char Hiberboot;
  /* 0x0013 */ unsigned char WakeAlarmPresent;
  /* 0x0014 */ unsigned char AoAc;
  /* 0x0015 */ unsigned char DiskSpinDown;
  /* 0x0016 */ unsigned char HiberFileType;
  /* 0x0017 */ unsigned char AoAcConnectivitySupported;
  /* 0x0018 */ unsigned char spare3[6];
  /* 0x001e */ unsigned char SystemBatteriesPresent;
  /* 0x001f */ unsigned char BatteriesAreShortTerm;
  /* 0x0020 */ struct BATTERY_REPORTING_SCALE BatteryScale[3];
  /* 0x0038 */ enum _SYSTEM_POWER_STATE AcOnLineWake;
  /* 0x003c */ enum _SYSTEM_POWER_STATE SoftLidWake;
  /* 0x0040 */ enum _SYSTEM_POWER_STATE RtcWake;
  /* 0x0044 */ enum _SYSTEM_POWER_STATE MinDeviceWakeState;
  /* 0x0048 */ enum _SYSTEM_POWER_STATE DefaultLowLatencyWake;
}; /* size: 0x004c */

typedef enum _POP_POWER_ACTION_WATCHDOG_STATE
{
  PopPowerActionWatchdogStateDisabled = 0,
  PopPowerActionWatchdogStateTransitioning = 1,
  PopPowerActionWatchdogStateResuming = 2,
  PopPowerActionWatchdogStateMax = 3,
} POP_POWER_ACTION_WATCHDOG_STATE, *PPOP_POWER_ACTION_WATCHDOG_STATE;

typedef struct _POP_POWER_ACTION
{
  /* 0x0000 */ unsigned char Updates;
  /* 0x0001 */ unsigned char State;
  /* 0x0002 */ unsigned char Shutdown;
  /* 0x0003 */ char Padding_50;
  /* 0x0004 */ enum POWER_ACTION Action;
  /* 0x0008 */ enum _SYSTEM_POWER_STATE LightestState;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ long Status;
  /* 0x0014 */ enum POWER_POLICY_DEVICE_TYPE DeviceType;
  /* 0x0018 */ unsigned long DeviceTypeFlags;
  /* 0x001c */ long Padding_51;
  /* 0x0020 */ struct _DIAGNOSTIC_BUFFER* RequestorInformation;
  /* 0x0028 */ unsigned char IrpMinor;
  /* 0x0029 */ unsigned char Waking;
  /* 0x002a */ char Padding_52[2];
  /* 0x002c */ enum _SYSTEM_POWER_STATE SystemState;
  /* 0x0030 */ enum _SYSTEM_POWER_STATE NextSystemState;
  /* 0x0034 */ enum _SYSTEM_POWER_STATE EffectiveSystemState;
  /* 0x0038 */ enum _SYSTEM_POWER_STATE CurrentSystemState;
  /* 0x003c */ long Padding_53;
  /* 0x0040 */ struct _POP_SHUTDOWN_BUG_CHECK* ShutdownBugCode;
  /* 0x0048 */ struct _POP_DEVICE_SYS_STATE* DevState;
  /* 0x0050 */ struct _POP_HIBER_CONTEXT* HiberContext;
  /* 0x0058 */ unsigned __int64 WakeTime;
  /* 0x0060 */ unsigned __int64 SleepTime;
  /* 0x0068 */ unsigned __int64 WakeFirstUnattendedTime;
  /* 0x0070 */ enum SYSTEM_POWER_CONDITION WakeAlarmSignaled;
  /* 0x0074 */ long Padding_54;
  /* 0x0078 */ struct
  {
    /* 0x0078 */ unsigned __int64 RequestedTime;
    /* 0x0080 */ unsigned __int64 ProgrammedTime;
    /* 0x0088 */ struct _DIAGNOSTIC_BUFFER* TimerInfo;
  } /* size: 0x0018 */ WakeAlarm[3];
  /* 0x00c0 */ unsigned char WakeAlarmPaused;
  /* 0x00c1 */ char Padding_55[7];
  /* 0x00c8 */ unsigned __int64 WakeAlarmLastTime;
  /* 0x00d0 */ unsigned __int64 DozeDeferralStartTime;
  /* 0x00d8 */ struct SYSTEM_POWER_CAPABILITIES FilteredCapabilities;
  /* 0x0124 */ long Padding_56;
  /* 0x0128 */ unsigned __int64 WatchdogLock;
  /* 0x0130 */ struct _KDPC WatchdogDpc;
  /* 0x0170 */ struct _KTIMER WatchdogTimer;
  /* 0x01b0 */ unsigned char WatchdogInitialized;
  /* 0x01b1 */ char Padding_57[3];
  /* 0x01b4 */ enum _POP_POWER_ACTION_WATCHDOG_STATE WatchdogState;
  /* 0x01b8 */ unsigned __int64 WatchdogStartTime;
  /* 0x01c0 */ unsigned long WatchdogTimeout;
  /* 0x01c4 */ long Padding_58;
  /* 0x01c8 */ struct _KTHREAD* ActionWorkerThread;
  /* 0x01d0 */ struct _KTHREAD* PromoteActionWorkerThread;
  /* 0x01d8 */ struct _KTHREAD* UnlockAfterSleepWorkerThread;
} POP_POWER_ACTION, *PPOP_POWER_ACTION; /* size: 0x01e0 */

enum wil_FeatureChangeTime
{
  wil_FeatureChangeTime_OnRead = 0,
  wil_FeatureChangeTime_OnReload = 1,
  wil_FeatureChangeTime_OnSession = 2,
  wil_FeatureChangeTime_OnReboot = 3,
};

typedef union _IOMMU_INTERFACE_STATE_CHANGE_FIELDS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long AvailableDomainTypes : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} IOMMU_INTERFACE_STATE_CHANGE_FIELDS, *PIOMMU_INTERFACE_STATE_CHANGE_FIELDS; /* size: 0x0004 */

typedef struct _IOMMU_INTERFACE_STATE_CHANGE
{
  /* 0x0000 */ union _IOMMU_INTERFACE_STATE_CHANGE_FIELDS PresentFields;
  /* 0x0004 */ unsigned long AvailableDomainTypes;
} IOMMU_INTERFACE_STATE_CHANGE, *PIOMMU_INTERFACE_STATE_CHANGE; /* size: 0x0008 */

typedef union _PPM_COORDINATED_SYNCHRONIZATION
{
  union
  {
    /* 0x0000 */ long AsLong;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long EnterProcessor : 12; /* bit position: 0 */
      /* 0x0000 */ unsigned long ExitProcessor : 12; /* bit position: 12 */
      /* 0x0000 */ unsigned long Transition : 2; /* bit position: 24 */
      /* 0x0000 */ unsigned long Entered : 1; /* bit position: 26 */
      /* 0x0000 */ unsigned long EntryPriority : 5; /* bit position: 27 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PPM_COORDINATED_SYNCHRONIZATION, *PPPM_COORDINATED_SYNCHRONIZATION; /* size: 0x0004 */

enum wil_UsageReportingMode
{
  wil_UsageReportingMode_Default = 0,
  wil_UsageReportingMode_SuppressPotential = 1,
  wil_UsageReportingMode_SuppressImplicit = 2,
};

typedef struct _FAST_MUTEX
{
  /* 0x0000 */ long Count;
  /* 0x0004 */ long Padding_59;
  /* 0x0008 */ void* Owner;
  /* 0x0010 */ unsigned long Contention;
  /* 0x0014 */ long Padding_60;
  /* 0x0018 */ struct _KEVENT Event;
  /* 0x0030 */ unsigned long OldIrql;
  /* 0x0034 */ long __PADDING__[1];
} FAST_MUTEX, *PFAST_MUTEX; /* size: 0x0038 */

typedef enum _RTL_FEATURE_CONFIGURATION_TYPE
{
  RtlFeatureConfigurationBoot = 0,
  RtlFeatureConfigurationRuntime = 1,
  RtlFeatureConfigurationCount = 2,
} RTL_FEATURE_CONFIGURATION_TYPE, *PRTL_FEATURE_CONFIGURATION_TYPE;

typedef enum _RTL_FEATURE_USAGE_PROVIDER_FLUSH_FLAGS
{
  FlushFeatureUsageFlagDefault = 0,
  FlushFeatureUsageFlagSyncGather = 1,
  FlushFeatureUsageFlagSyncPublish = 2,
} RTL_FEATURE_USAGE_PROVIDER_FLUSH_FLAGS, *PRTL_FEATURE_USAGE_PROVIDER_FLUSH_FLAGS;

typedef struct _EXT_DELETE_PARAMETERS
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* DeleteCallback /* function */;
  /* 0x0010 */ void* DeleteContext;
} EXT_DELETE_PARAMETERS, *PEXT_DELETE_PARAMETERS; /* size: 0x0018 */

enum wil_details_FeatureTestStateKind
{
  wil_details_FeatureTestStateKind_EnabledState = 0,
  wil_details_FeatureTestStateKind_Variant = 1,
};

enum EmptyCVariant_FeatureStaging_Poncherello
{
  CVariant_FeatureStaging_Poncherello_Empty = 0,
};

typedef struct _GDI_TEB_BATCH64
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Offset : 30; /* bit position: 0 */
    /* 0x0000 */ unsigned long InProcessing : 1; /* bit position: 30 */
    /* 0x0000 */ unsigned long HasRenderingCommand : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_61;
  /* 0x0008 */ unsigned __int64 HDC;
  /* 0x0010 */ unsigned long Buffer[310];
} GDI_TEB_BATCH64, *PGDI_TEB_BATCH64; /* size: 0x04e8 */

enum FsRtlAllowReservedContext
{
  FsRtlNoReservedContext = 0,
  FsRtlYesReservedContext = 1,
};

typedef enum _EVENT_INFO_CLASS
{
  EventProviderBinaryTrackInfo = 0,
  EventProviderSetReserved1 = 1,
  EventProviderSetTraits = 2,
  EventProviderUseDescriptorType = 3,
  MaxEventInfo = 4,
} EVENT_INFO_CLASS, *PEVENT_INFO_CLASS;

enum EmptyCVariant_FeatureStaging_MemoryManager
{
  CVariant_FeatureStaging_MemoryManager_Empty = 0,
};

enum EmptyCVariant_FeatureStaging_Boot
{
  CVariant_FeatureStaging_Boot_Empty = 0,
};

typedef struct _DMA_TRANSFER_INFO_V1
{
  /* 0x0000 */ unsigned long MapRegisterCount;
  /* 0x0004 */ unsigned long ScatterGatherElementCount;
  /* 0x0008 */ unsigned long ScatterGatherListSize;
} DMA_TRANSFER_INFO_V1, *PDMA_TRANSFER_INFO_V1; /* size: 0x000c */

typedef struct _SEP_SID_VALUES_BLOCK
{
  /* 0x0000 */ unsigned long BlockLength;
  /* 0x0004 */ long Padding_62;
  /* 0x0008 */ __int64 ReferenceCount;
  /* 0x0010 */ unsigned long SidCount;
  /* 0x0014 */ long Padding_63;
  /* 0x0018 */ unsigned __int64 SidValuesStart;
} SEP_SID_VALUES_BLOCK, *PSEP_SID_VALUES_BLOCK; /* size: 0x0020 */

typedef enum _MI_SLAB_ALLOCATOR_TYPE
{
  MiSlabAllocatorTypeSlatProtectedStart = 0,
  MiSlabAllocatorTypeExecuteProtected = 0,
  MiSlabAllocatorTypeReadOnlyProtected = 1,
  MiSlabAllocatorTypeNoAccessProtected = 2,
  MiSlabAllocatorTypeKernelShadowStackProtected = 3,
  MiSlabAllocatorTypePagingProtected = 4,
  MiSlabAllocatorTypeSlatProtectedLast = 4,
  MiSlabAllocatorTypeSlatUnprotectedStart = 5,
  MiSlabAllocatorTypeImageUnprotected = 5,
  MiSlabAllocatorTypeGenericUnprotected = 6,
  MiSlabAllocatorTypeNonPagedUnprotected = 7,
  MiSlabAllocatorTypeIdentityUnprotected = 8,
  MiSlabAllocatorTypeSlatUnprotectedLast = 8,
  MiSlabAllocatorTypeMax = 9,
} MI_SLAB_ALLOCATOR_TYPE, *PMI_SLAB_ALLOCATOR_TYPE;

struct tagSWITCH_CONTEXT_ATTRIBUTE
{
  /* 0x0000 */ unsigned __int64 ulContextUpdateCounter;
  /* 0x0008 */ int fAllowContextUpdate;
  /* 0x000c */ int fEnableTrace;
  /* 0x0010 */ unsigned __int64 EtwHandle;
}; /* size: 0x0018 */

struct tagSWITCH_CONTEXT_DATA
{
  /* 0x0000 */ unsigned __int64 ullOsMaxVersionTested;
  /* 0x0008 */ unsigned long ulTargetPlatform;
  /* 0x000c */ long Padding_64;
  /* 0x0010 */ unsigned __int64 ullContextMinimum;
  /* 0x0018 */ struct _GUID guPlatform;
  /* 0x0028 */ struct _GUID guMinPlatform;
  /* 0x0038 */ unsigned long ulContextSource;
  /* 0x003c */ unsigned long ulElementCount;
  /* 0x0040 */ struct _GUID guElements[48];
}; /* size: 0x0340 */

struct tagSWITCH_CONTEXT
{
  /* 0x0000 */ struct tagSWITCH_CONTEXT_ATTRIBUTE Attribute;
  /* 0x0018 */ struct tagSWITCH_CONTEXT_DATA Data;
}; /* size: 0x0358 */

typedef enum _MI_PFN_CACHE_ATTRIBUTE
{
  MiNonCached = 0,
  MiCached = 1,
  MiWriteCombined = 2,
  MiNotMapped = 3,
} MI_PFN_CACHE_ATTRIBUTE, *PMI_PFN_CACHE_ATTRIBUTE;

typedef enum _PCW_CALLBACK_TYPE
{
  PcwCallbackAddCounter = 0,
  PcwCallbackRemoveCounter = 1,
  PcwCallbackEnumerateInstances = 2,
  PcwCallbackCollectData = 3,
} PCW_CALLBACK_TYPE, *PPCW_CALLBACK_TYPE;

typedef enum _MI_SYSTEM_VA_TYPE
{
  MiVaUnused = 0,
  MiVaProcessSpace = 1,
  MiVaBootLoaded = 2,
  MiVaPfnDatabase = 3,
  MiVaNonPagedPool = 4,
  MiVaPagedPool = 5,
  MiVaNonCachedMappings = 6,
  MiVaSystemCache = 7,
  MiVaSystemPtes = 8,
  MiVaHal = 9,
  MiVaNonCachedMappingsLarge = 10,
  MiVaDriverImages = 11,
  MiVaSystemPtesLarge = 12,
  MiVaKernelStacks = 13,
  MiVaSecureNonPagedPool = 14,
  MiVaKernelShadowStacks = 15,
  MiVaSoftWsles = 16,
  MiVaSystemDataViews = 17,
  MiVaKernelControlFlowGuard = 18,
  MiVaKasan = 19,
  MiVaMaximumType = 20,
} MI_SYSTEM_VA_TYPE, *PMI_SYSTEM_VA_TYPE;

typedef enum _CMP_COPY_TYPE
{
  Copy = 0,
  Sync = 1,
  Merge = 2,
} CMP_COPY_TYPE, *PCMP_COPY_TYPE;

typedef struct _KAB_UM_PROCESS_CONTEXT
{
  /* 0x0000 */ struct _KAB_UM_PROCESS_TREE* Trees;
  /* 0x0008 */ unsigned long TreeCount;
  /* 0x000c */ long __PADDING__[1];
} KAB_UM_PROCESS_CONTEXT, *PKAB_UM_PROCESS_CONTEXT; /* size: 0x0010 */

typedef struct _RTL_BITMAP_EX
{
  /* 0x0000 */ unsigned __int64 SizeOfBitMap;
  /* 0x0008 */ unsigned __int64* Buffer;
} RTL_BITMAP_EX, *PRTL_BITMAP_EX; /* size: 0x0010 */

typedef struct _MI_NODE_FREE_PAGE_INFORMATION
{
  /* 0x0000 */ volatile unsigned long PageColorHand;
  /* 0x0004 */ long Padding_65;
  /* 0x0008 */ unsigned __int64 FreeCount[2];
  /* 0x0018 */ unsigned __int64 FreeZeroCountByAttribute[4][2];
  /* 0x0058 */ long Padding_66[10];
  /* 0x0080 */ struct _RTL_BITMAP_EX FreePageListHeadsBitmap[2][4][2];
  /* 0x0180 */ unsigned __int64 FreePageListHeadsBitmapBuffer[64];
  /* 0x0380 */ unsigned __int64 LargePageFreeCountHiLow[2][2];
  /* 0x03a0 */ unsigned __int64 LargePageCount[2][2][2];
  /* 0x03e0 */ struct _MMPFNLIST* LargePageEntries[4][2][2][2];
  /* 0x04e0 */ long __PADDING__[8];
} MI_NODE_FREE_PAGE_INFORMATION, *PMI_NODE_FREE_PAGE_INFORMATION; /* size: 0x0500 */

enum UoWActionType
{
  UoWAddThisKey = 0,
  UoWAddChildKey = 1,
  UoWDeleteThisKey = 2,
  UoWDeleteChildKey = 3,
  UoWSetValueNew = 4,
  UoWSetValueExisting = 5,
  UoWDeleteValue = 6,
  UoWSetKeyUserFlags = 7,
  UoWSetLastWriteTime = 8,
  UoWSetSecurityDescriptor = 9,
  UoWRenameSubKeyObsolete = 10,
  UoWRenameOldSubKeyObsolete = 11,
  UoWRenameNewSubKeyObsolete = 12,
  UoWIsolation = 13,
  UoWTestFail = 14,
  UoWRecreateKey = 15,
  UoWInvalid = 16,
};

enum HSTORAGE_TYPE
{
  Stable = 0,
  Volatile = 1,
  InvalidStorage = 2,
};

typedef union _KEXECUTE_OPTIONS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char ExecuteDisable : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char ExecuteEnable : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char DisableThunkEmulation : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned char Permanent : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char ExecuteDispatchEnable : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned char ImageDispatchEnable : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned char DisableExceptionChainValidation : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned char Spare : 1; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ volatile unsigned char ExecuteOptions;
    /* 0x0000 */ unsigned char ExecuteOptionsNV;
  }; /* size: 0x0001 */
} KEXECUTE_OPTIONS, *PKEXECUTE_OPTIONS; /* size: 0x0001 */

typedef union _KSTACK_COUNT
{
  union
  {
    /* 0x0000 */ long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long State : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned long StackCount : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} KSTACK_COUNT, *PKSTACK_COUNT; /* size: 0x0004 */

typedef struct _KPROCESS
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ struct _LIST_ENTRY ProfileListHead;
  /* 0x0028 */ unsigned __int64 DirectoryTableBase;
  /* 0x0030 */ struct _LIST_ENTRY ThreadListHead;
  /* 0x0040 */ unsigned long ProcessLock;
  /* 0x0044 */ unsigned long ProcessTimerDelay;
  /* 0x0048 */ unsigned __int64 DeepFreezeStartTime;
  /* 0x0050 */ struct _KAFFINITY_EX* Affinity;
  /* 0x0058 */ struct _KAB_UM_PROCESS_CONTEXT AutoBoostState;
  /* 0x0068 */ struct _LIST_ENTRY ReadyListHead;
  /* 0x0078 */ struct _SINGLE_LIST_ENTRY SwapListEntry;
  /* 0x0080 */ volatile struct _KAFFINITY_EX* ActiveProcessors;
  union
  {
    struct /* bitfield */
    {
      /* 0x0088 */ unsigned long AutoAlignment : 1; /* bit position: 0 */
      /* 0x0088 */ unsigned long DisableBoost : 1; /* bit position: 1 */
      /* 0x0088 */ unsigned long DisableQuantum : 1; /* bit position: 2 */
      /* 0x0088 */ unsigned long DeepFreeze : 1; /* bit position: 3 */
      /* 0x0088 */ unsigned long TimerVirtualization : 1; /* bit position: 4 */
      /* 0x0088 */ unsigned long CheckStackExtents : 1; /* bit position: 5 */
      /* 0x0088 */ unsigned long CacheIsolationEnabled : 1; /* bit position: 6 */
      /* 0x0088 */ unsigned long PpmPolicy : 4; /* bit position: 7 */
      /* 0x0088 */ unsigned long VaSpaceDeleted : 1; /* bit position: 11 */
      /* 0x0088 */ unsigned long MultiGroup : 1; /* bit position: 12 */
      /* 0x0088 */ unsigned long ForegroundProcess : 1; /* bit position: 13 */
      /* 0x0088 */ unsigned long ReservedFlags : 18; /* bit position: 14 */
    }; /* bitfield */
    /* 0x0088 */ volatile long ProcessFlags;
  }; /* size: 0x0004 */
  /* 0x008c */ unsigned long Spare0c;
  /* 0x0090 */ char BasePriority;
  /* 0x0091 */ char QuantumReset;
  /* 0x0092 */ char Visited;
  /* 0x0093 */ union _KEXECUTE_OPTIONS Flags;
  /* 0x0094 */ long Padding_67;
  /* 0x0098 */ struct _KGROUP_MASK ActiveGroupsMask;
  /* 0x00a8 */ unsigned __int64 ActiveGroupPadding[2];
  /* 0x00b8 */ struct _KI_IDEAL_PROCESSOR_ASSIGNMENT_BLOCK* IdealProcessorAssignmentBlock;
  /* 0x00c0 */ unsigned __int64 Padding[8];
  /* 0x0100 */ unsigned long Spare0d;
  /* 0x0104 */ unsigned short IdealGlobalNode;
  /* 0x0106 */ unsigned short Spare1;
  /* 0x0108 */ volatile union _KSTACK_COUNT StackCount;
  /* 0x010c */ long Padding_68;
  /* 0x0110 */ struct _LIST_ENTRY ProcessListEntry;
  /* 0x0120 */ unsigned __int64 CycleTime;
  /* 0x0128 */ unsigned __int64 ContextSwitches;
  /* 0x0130 */ struct _KSCHEDULING_GROUP* SchedulingGroup;
  /* 0x0138 */ unsigned __int64 KernelTime;
  /* 0x0140 */ unsigned __int64 UserTime;
  /* 0x0148 */ unsigned __int64 ReadyTime;
  /* 0x0150 */ unsigned long FreezeCount;
  /* 0x0154 */ unsigned long Spare4;
  /* 0x0158 */ unsigned __int64 UserDirectoryTableBase;
  /* 0x0160 */ unsigned char AddressPolicy;
  /* 0x0161 */ unsigned char Spare2[7];
  /* 0x0168 */ void* InstrumentationCallback;
  union
  {
    union
    {
      /* 0x0170 */ unsigned __int64 SecureHandle;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0170 */ unsigned __int64 SecureProcess : 1; /* bit position: 0 */
          /* 0x0170 */ unsigned __int64 TrustedApp : 1; /* bit position: 1 */
        }; /* bitfield */
      } /* size: 0x0008 */ Flags;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ SecureState;
  /* 0x0178 */ unsigned __int64 KernelWaitTime;
  /* 0x0180 */ unsigned __int64 UserWaitTime;
  /* 0x0188 */ unsigned __int64 LastRebalanceQpc;
  /* 0x0190 */ void* PerProcessorCycleTimes;
  /* 0x0198 */ unsigned __int64 ExtendedFeatureDisableMask;
  /* 0x01a0 */ unsigned short PrimaryGroup;
  /* 0x01a2 */ unsigned short Spare3[3];
  /* 0x01a8 */ void* UserCetLogging;
  /* 0x01b0 */ struct _LIST_ENTRY CpuPartitionList;
  /* 0x01c0 */ struct _KPROCESS_AVAILABLE_CPU_STATE* AvailableCpuState;
} KPROCESS, *PKPROCESS; /* size: 0x01c8 */

typedef struct _EX_FAST_REF
{
  union
  {
    /* 0x0000 */ void* Object;
    /* 0x0000 */ unsigned __int64 RefCnt : 4; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Value;
  }; /* size: 0x0008 */
} EX_FAST_REF, *PEX_FAST_REF; /* size: 0x0008 */

typedef struct _SE_AUDIT_PROCESS_CREATION_INFO
{
  /* 0x0000 */ struct _OBJECT_NAME_INFORMATION* ImageFileName;
} SE_AUDIT_PROCESS_CREATION_INFO, *PSE_AUDIT_PROCESS_CREATION_INFO; /* size: 0x0008 */

typedef struct _ALPC_PROCESS_CONTEXT
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0008 */ struct _LIST_ENTRY ViewListHead;
  /* 0x0018 */ volatile unsigned __int64 PagedPoolQuotaCache;
} ALPC_PROCESS_CONTEXT, *PALPC_PROCESS_CONTEXT; /* size: 0x0020 */

typedef struct _PS_PROTECTION
{
  union
  {
    /* 0x0000 */ unsigned char Level;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char Type : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned char Audit : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char Signer : 4; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0001 */
} PS_PROTECTION, *PPS_PROTECTION; /* size: 0x0001 */

typedef union _PS_INTERLOCKED_TIMER_DELAY_VALUES
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 DelayMs : 30; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 CoalescingWindowMs : 30; /* bit position: 30 */
      /* 0x0000 */ unsigned __int64 Reserved : 1; /* bit position: 60 */
      /* 0x0000 */ unsigned __int64 NewTimerWheel : 1; /* bit position: 61 */
      /* 0x0000 */ unsigned __int64 Retry : 1; /* bit position: 62 */
      /* 0x0000 */ unsigned __int64 Locked : 1; /* bit position: 63 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 All;
  }; /* size: 0x0008 */
} PS_INTERLOCKED_TIMER_DELAY_VALUES, *PPS_INTERLOCKED_TIMER_DELAY_VALUES; /* size: 0x0008 */

typedef struct _JOBOBJECT_WAKE_FILTER
{
  /* 0x0000 */ unsigned long HighEdgeFilter;
  /* 0x0004 */ unsigned long LowEdgeFilter;
} JOBOBJECT_WAKE_FILTER, *PJOBOBJECT_WAKE_FILTER; /* size: 0x0008 */

typedef struct _PS_PROCESS_WAKE_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NotificationChannel;
  /* 0x0008 */ unsigned long WakeCounters[7];
  /* 0x0024 */ struct _JOBOBJECT_WAKE_FILTER WakeFilter;
  /* 0x002c */ unsigned long NoWakeCounter;
} PS_PROCESS_WAKE_INFORMATION, *PPS_PROCESS_WAKE_INFORMATION; /* size: 0x0030 */

typedef struct _PS_DYNAMIC_ENFORCED_ADDRESS_RANGES
{
  /* 0x0000 */ struct _RTL_AVL_TREE Tree;
  /* 0x0008 */ struct _EX_PUSH_LOCK Lock;
} PS_DYNAMIC_ENFORCED_ADDRESS_RANGES, *PPS_DYNAMIC_ENFORCED_ADDRESS_RANGES; /* size: 0x0010 */

typedef struct _PSP_SYSCALL_PROVIDER_DISPATCH_CONTEXT
{
  /* 0x0000 */ unsigned long Level;
  /* 0x0004 */ unsigned long Slot;
} PSP_SYSCALL_PROVIDER_DISPATCH_CONTEXT, *PPSP_SYSCALL_PROVIDER_DISPATCH_CONTEXT; /* size: 0x0008 */

typedef union _PROCESS_EXECUTION_TRANSITION
{
  union
  {
    /* 0x0000 */ volatile short TransitionState;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short InProgress : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short Reserved : 7; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0002 */
} PROCESS_EXECUTION_TRANSITION, *PPROCESS_EXECUTION_TRANSITION; /* size: 0x0002 */

typedef union _PROCESS_EXECUTION_STATE
{
  union
  {
    /* 0x0000 */ char State;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char ProcessFrozen : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char ProcessSwapped : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char ProcessGraphicsFreezeOptimized : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned char Reserved : 5; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0001 */
} PROCESS_EXECUTION_STATE, *PPROCESS_EXECUTION_STATE; /* size: 0x0001 */

typedef union _PROCESS_EXECUTION
{
  union
  {
    /* 0x0000 */ volatile long State;
    struct
    {
      /* 0x0000 */ volatile union _PROCESS_EXECUTION_TRANSITION Transition;
      /* 0x0002 */ union _PROCESS_EXECUTION_STATE Current;
      /* 0x0003 */ union _PROCESS_EXECUTION_STATE Requested;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} PROCESS_EXECUTION, *PPROCESS_EXECUTION; /* size: 0x0004 */

typedef struct _EPROCESS
{
  /* 0x0000 */ struct _KPROCESS Pcb;
  /* 0x01c8 */ struct _EX_PUSH_LOCK ProcessLock;
  /* 0x01d0 */ void* UniqueProcessId;
  /* 0x01d8 */ struct _LIST_ENTRY ActiveProcessLinks;
  /* 0x01e8 */ struct _EX_RUNDOWN_REF RundownProtect;
  union
  {
    /* 0x01f0 */ unsigned long Flags2;
    struct /* bitfield */
    {
      /* 0x01f0 */ unsigned long JobNotReallyActive : 1; /* bit position: 0 */
      /* 0x01f0 */ unsigned long AccountingFolded : 1; /* bit position: 1 */
      /* 0x01f0 */ unsigned long NewProcessReported : 1; /* bit position: 2 */
      /* 0x01f0 */ unsigned long ExitProcessReported : 1; /* bit position: 3 */
      /* 0x01f0 */ unsigned long ReportCommitChanges : 1; /* bit position: 4 */
      /* 0x01f0 */ unsigned long LastReportMemory : 1; /* bit position: 5 */
      /* 0x01f0 */ unsigned long ForceWakeCharge : 1; /* bit position: 6 */
      /* 0x01f0 */ unsigned long CrossSessionCreate : 1; /* bit position: 7 */
      /* 0x01f0 */ unsigned long NeedsHandleRundown : 1; /* bit position: 8 */
      /* 0x01f0 */ unsigned long RefTraceEnabled : 1; /* bit position: 9 */
      /* 0x01f0 */ unsigned long PicoCreated : 1; /* bit position: 10 */
      /* 0x01f0 */ unsigned long EmptyJobEvaluated : 1; /* bit position: 11 */
      /* 0x01f0 */ unsigned long DefaultPagePriority : 3; /* bit position: 12 */
      /* 0x01f0 */ unsigned long PrimaryTokenFrozen : 1; /* bit position: 15 */
      /* 0x01f0 */ unsigned long ProcessVerifierTarget : 1; /* bit position: 16 */
      /* 0x01f0 */ unsigned long RestrictSetThreadContext : 1; /* bit position: 17 */
      /* 0x01f0 */ unsigned long AffinityPermanent : 1; /* bit position: 18 */
      /* 0x01f0 */ unsigned long AffinityUpdateEnable : 1; /* bit position: 19 */
      /* 0x01f0 */ unsigned long PropagateNode : 1; /* bit position: 20 */
      /* 0x01f0 */ unsigned long ExplicitAffinity : 1; /* bit position: 21 */
      /* 0x01f0 */ unsigned long Flags2Available1 : 2; /* bit position: 22 */
      /* 0x01f0 */ unsigned long EnableReadVmLogging : 1; /* bit position: 24 */
      /* 0x01f0 */ unsigned long EnableWriteVmLogging : 1; /* bit position: 25 */
      /* 0x01f0 */ unsigned long FatalAccessTerminationRequested : 1; /* bit position: 26 */
      /* 0x01f0 */ unsigned long DisableSystemAllowedCpuSet : 1; /* bit position: 27 */
      /* 0x01f0 */ unsigned long Flags2Available2 : 3; /* bit position: 28 */
      /* 0x01f0 */ unsigned long InPrivate : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x01f4 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x01f4 */ unsigned long CreateReported : 1; /* bit position: 0 */
      /* 0x01f4 */ unsigned long NoDebugInherit : 1; /* bit position: 1 */
      /* 0x01f4 */ unsigned long ProcessExiting : 1; /* bit position: 2 */
      /* 0x01f4 */ unsigned long ProcessDelete : 1; /* bit position: 3 */
      /* 0x01f4 */ unsigned long ManageExecutableMemoryWrites : 1; /* bit position: 4 */
      /* 0x01f4 */ unsigned long VmDeleted : 1; /* bit position: 5 */
      /* 0x01f4 */ unsigned long OutswapEnabled : 1; /* bit position: 6 */
      /* 0x01f4 */ unsigned long Outswapped : 1; /* bit position: 7 */
      /* 0x01f4 */ unsigned long FailFastOnCommitFail : 1; /* bit position: 8 */
      /* 0x01f4 */ unsigned long Wow64VaSpace4Gb : 1; /* bit position: 9 */
      /* 0x01f4 */ unsigned long AddressSpaceInitialized : 2; /* bit position: 10 */
      /* 0x01f4 */ unsigned long SetTimerResolution : 1; /* bit position: 12 */
      /* 0x01f4 */ unsigned long BreakOnTermination : 1; /* bit position: 13 */
      /* 0x01f4 */ unsigned long DeprioritizeViews : 1; /* bit position: 14 */
      /* 0x01f4 */ unsigned long WriteWatch : 1; /* bit position: 15 */
      /* 0x01f4 */ unsigned long ProcessInSession : 1; /* bit position: 16 */
      /* 0x01f4 */ unsigned long OverrideAddressSpace : 1; /* bit position: 17 */
      /* 0x01f4 */ unsigned long HasAddressSpace : 1; /* bit position: 18 */
      /* 0x01f4 */ unsigned long LaunchPrefetched : 1; /* bit position: 19 */
      /* 0x01f4 */ unsigned long Reserved : 1; /* bit position: 20 */
      /* 0x01f4 */ unsigned long VmTopDown : 1; /* bit position: 21 */
      /* 0x01f4 */ unsigned long ImageNotifyDone : 1; /* bit position: 22 */
      /* 0x01f4 */ unsigned long PdeUpdateNeeded : 1; /* bit position: 23 */
      /* 0x01f4 */ unsigned long VdmAllowed : 1; /* bit position: 24 */
      /* 0x01f4 */ unsigned long ProcessRundown : 1; /* bit position: 25 */
      /* 0x01f4 */ unsigned long ProcessInserted : 1; /* bit position: 26 */
      /* 0x01f4 */ unsigned long DefaultIoPriority : 3; /* bit position: 27 */
      /* 0x01f4 */ unsigned long ProcessSelfDelete : 1; /* bit position: 30 */
      /* 0x01f4 */ unsigned long SetTimerResolutionLink : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x01f8 */ union _LARGE_INTEGER CreateTime;
  /* 0x0200 */ unsigned __int64 ProcessQuotaUsage[2];
  /* 0x0210 */ unsigned __int64 ProcessQuotaPeak[2];
  /* 0x0220 */ unsigned __int64 PeakVirtualSize;
  /* 0x0228 */ unsigned __int64 VirtualSize;
  /* 0x0230 */ struct _LIST_ENTRY SessionProcessLinks;
  union
  {
    /* 0x0240 */ void* ExceptionPortData;
    /* 0x0240 */ unsigned __int64 ExceptionPortValue;
    /* 0x0240 */ unsigned __int64 ExceptionPortState : 3; /* bit position: 0 */
  }; /* size: 0x0008 */
  /* 0x0248 */ struct _EX_FAST_REF Token;
  /* 0x0250 */ unsigned __int64 MmReserved;
  /* 0x0258 */ struct _EX_PUSH_LOCK AddressCreationLock;
  /* 0x0260 */ struct _EX_PUSH_LOCK PageTableCommitmentLock;
  /* 0x0268 */ struct _ETHREAD* RotateInProgress;
  /* 0x0270 */ struct _ETHREAD* ForkInProgress;
  /* 0x0278 */ struct _EJOB* volatile CommitChargeJob;
  /* 0x0280 */ struct _RTL_AVL_TREE CloneRoot;
  /* 0x0288 */ volatile unsigned __int64 NumberOfPrivatePages;
  /* 0x0290 */ volatile unsigned __int64 NumberOfLockedPages;
  /* 0x0298 */ void* Win32Process;
  /* 0x02a0 */ struct _EJOB* volatile Job;
  /* 0x02a8 */ void* SectionObject;
  /* 0x02b0 */ void* SectionBaseAddress;
  /* 0x02b8 */ unsigned long Cookie;
  /* 0x02bc */ long Padding_69;
  /* 0x02c0 */ struct _PAGEFAULT_HISTORY* WorkingSetWatch;
  /* 0x02c8 */ void* Win32WindowStation;
  /* 0x02d0 */ void* InheritedFromUniqueProcessId;
  /* 0x02d8 */ volatile unsigned __int64 OwnerProcessId;
  /* 0x02e0 */ struct _PEB* Peb;
  /* 0x02e8 */ struct _PSP_SESSION_SPACE* Session;
  /* 0x02f0 */ void* Spare1;
  /* 0x02f8 */ struct _EPROCESS_QUOTA_BLOCK* QuotaBlock;
  /* 0x0300 */ struct _HANDLE_TABLE* ObjectTable;
  /* 0x0308 */ void* DebugPort;
  /* 0x0310 */ struct _EWOW64PROCESS* WoW64Process;
  /* 0x0318 */ struct _EX_FAST_REF DeviceMap;
  /* 0x0320 */ void* EtwDataSource;
  /* 0x0328 */ unsigned __int64 PageDirectoryPte;
  /* 0x0330 */ struct _FILE_OBJECT* ImageFilePointer;
  /* 0x0338 */ unsigned char ImageFileName[15];
  /* 0x0347 */ unsigned char PriorityClass;
  /* 0x0348 */ void* SecurityPort;
  /* 0x0350 */ struct _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo;
  /* 0x0358 */ struct _LIST_ENTRY JobLinks;
  /* 0x0368 */ void* HighestUserAddress;
  /* 0x0370 */ struct _LIST_ENTRY ThreadListHead;
  /* 0x0380 */ volatile unsigned long ActiveThreads;
  /* 0x0384 */ unsigned long ImagePathHash;
  /* 0x0388 */ unsigned long DefaultHardErrorProcessing;
  /* 0x038c */ long LastThreadExitStatus;
  /* 0x0390 */ struct _EX_FAST_REF PrefetchTrace;
  /* 0x0398 */ void* LockedPagesList;
  /* 0x03a0 */ union _LARGE_INTEGER ReadOperationCount;
  /* 0x03a8 */ union _LARGE_INTEGER WriteOperationCount;
  /* 0x03b0 */ union _LARGE_INTEGER OtherOperationCount;
  /* 0x03b8 */ union _LARGE_INTEGER ReadTransferCount;
  /* 0x03c0 */ union _LARGE_INTEGER WriteTransferCount;
  /* 0x03c8 */ union _LARGE_INTEGER OtherTransferCount;
  /* 0x03d0 */ unsigned __int64 CommitChargeLimit;
  /* 0x03d8 */ volatile unsigned __int64 CommitCharge;
  /* 0x03e0 */ volatile unsigned __int64 CommitChargePeak;
  /* 0x03e8 */ long Padding_70[6];
  /* 0x0400 */ struct _MMSUPPORT_FULL Vm;
  /* 0x0540 */ struct _LIST_ENTRY MmProcessLinks;
  /* 0x0550 */ volatile unsigned long ModifiedPageCount;
  /* 0x0554 */ long ExitStatus;
  /* 0x0558 */ struct _RTL_AVL_TREE VadRoot;
  /* 0x0560 */ void* VadHint;
  /* 0x0568 */ unsigned __int64 VadCount;
  /* 0x0570 */ volatile unsigned __int64 VadPhysicalPages;
  /* 0x0578 */ unsigned __int64 VadPhysicalPagesLimit;
  /* 0x0580 */ struct _ALPC_PROCESS_CONTEXT AlpcContext;
  /* 0x05a0 */ struct _LIST_ENTRY TimerResolutionLink;
  /* 0x05b0 */ struct _PO_DIAG_STACK_RECORD* TimerResolutionStackRecord;
  /* 0x05b8 */ unsigned long RequestedTimerResolution;
  /* 0x05bc */ unsigned long SmallestTimerResolution;
  /* 0x05c0 */ union _LARGE_INTEGER ExitTime;
  /* 0x05c8 */ struct _INVERTED_FUNCTION_TABLE_KERNEL_MODE* InvertedFunctionTable;
  /* 0x05d0 */ struct _EX_PUSH_LOCK InvertedFunctionTableLock;
  /* 0x05d8 */ unsigned long ActiveThreadsHighWatermark;
  /* 0x05dc */ unsigned long LargePrivateVadCount;
  /* 0x05e0 */ struct _EX_PUSH_LOCK ThreadListLock;
  /* 0x05e8 */ void* WnfContext;
  /* 0x05f0 */ struct _EJOB* ServerSilo;
  /* 0x05f8 */ unsigned char SignatureLevel;
  /* 0x05f9 */ unsigned char SectionSignatureLevel;
  /* 0x05fa */ struct _PS_PROTECTION Protection;
  struct /* bitfield */
  {
    /* 0x05fb */ unsigned char HangCount : 3; /* bit position: 0 */
    /* 0x05fb */ unsigned char GhostCount : 3; /* bit position: 3 */
    /* 0x05fb */ unsigned char PrefilterException : 1; /* bit position: 6 */
  }; /* bitfield */
  union
  {
    /* 0x05fc */ unsigned long Flags3;
    struct /* bitfield */
    {
      /* 0x05fc */ unsigned long Minimal : 1; /* bit position: 0 */
      /* 0x05fc */ unsigned long ReplacingPageRoot : 1; /* bit position: 1 */
      /* 0x05fc */ unsigned long Crashed : 1; /* bit position: 2 */
      /* 0x05fc */ unsigned long JobVadsAreTracked : 1; /* bit position: 3 */
      /* 0x05fc */ unsigned long VadTrackingDisabled : 1; /* bit position: 4 */
      /* 0x05fc */ unsigned long AuxiliaryProcess : 1; /* bit position: 5 */
      /* 0x05fc */ unsigned long SubsystemProcess : 1; /* bit position: 6 */
      /* 0x05fc */ unsigned long IndirectCpuSets : 1; /* bit position: 7 */
      /* 0x05fc */ unsigned long RelinquishedCommit : 1; /* bit position: 8 */
      /* 0x05fc */ unsigned long HighGraphicsPriority : 1; /* bit position: 9 */
      /* 0x05fc */ unsigned long CommitFailLogged : 1; /* bit position: 10 */
      /* 0x05fc */ unsigned long ReserveFailLogged : 1; /* bit position: 11 */
      /* 0x05fc */ unsigned long SystemProcess : 1; /* bit position: 12 */
      /* 0x05fc */ unsigned long AllImagesAtBasePristineBase : 1; /* bit position: 13 */
      /* 0x05fc */ unsigned long AddressPolicyFrozen : 1; /* bit position: 14 */
      /* 0x05fc */ unsigned long ProcessFirstResume : 1; /* bit position: 15 */
      /* 0x05fc */ unsigned long ForegroundExternal : 1; /* bit position: 16 */
      /* 0x05fc */ unsigned long ForegroundSystem : 1; /* bit position: 17 */
      /* 0x05fc */ unsigned long HighMemoryPriority : 1; /* bit position: 18 */
      /* 0x05fc */ unsigned long EnableProcessSuspendResumeLogging : 1; /* bit position: 19 */
      /* 0x05fc */ unsigned long EnableThreadSuspendResumeLogging : 1; /* bit position: 20 */
      /* 0x05fc */ unsigned long SecurityDomainChanged : 1; /* bit position: 21 */
      /* 0x05fc */ unsigned long SecurityFreezeComplete : 1; /* bit position: 22 */
      /* 0x05fc */ unsigned long VmProcessorHost : 1; /* bit position: 23 */
      /* 0x05fc */ unsigned long VmProcessorHostTransition : 1; /* bit position: 24 */
      /* 0x05fc */ unsigned long AltSyscall : 1; /* bit position: 25 */
      /* 0x05fc */ unsigned long TimerResolutionIgnore : 1; /* bit position: 26 */
      /* 0x05fc */ unsigned long DisallowUserTerminate : 1; /* bit position: 27 */
      /* 0x05fc */ unsigned long EnableProcessRemoteExecProtectVmLogging : 1; /* bit position: 28 */
      /* 0x05fc */ unsigned long EnableProcessLocalExecProtectVmLogging : 1; /* bit position: 29 */
      /* 0x05fc */ unsigned long MemoryCompressionProcess : 1; /* bit position: 30 */
      /* 0x05fc */ unsigned long EnableProcessImpersonationLogging : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0600 */ long DeviceAsid;
  /* 0x0604 */ long Padding_71;
  /* 0x0608 */ void* SvmData;
  /* 0x0610 */ struct _EX_PUSH_LOCK SvmProcessLock;
  /* 0x0618 */ unsigned __int64 SvmLock;
  /* 0x0620 */ struct _LIST_ENTRY SvmProcessDeviceListHead;
  /* 0x0630 */ unsigned __int64 LastFreezeInterruptTime;
  /* 0x0638 */ struct _PROCESS_DISK_COUNTERS* DiskCounters;
  /* 0x0640 */ void* PicoContext;
  /* 0x0648 */ void* EnclaveTable;
  /* 0x0650 */ unsigned __int64 EnclaveNumber;
  /* 0x0658 */ struct _EX_PUSH_LOCK EnclaveLock;
  /* 0x0660 */ unsigned long HighPriorityFaultsAllowed;
  /* 0x0664 */ long Padding_72;
  /* 0x0668 */ struct _PO_PROCESS_ENERGY_CONTEXT* EnergyContext;
  /* 0x0670 */ void* VmContext;
  /* 0x0678 */ unsigned __int64 SequenceNumber;
  /* 0x0680 */ unsigned __int64 CreateInterruptTime;
  /* 0x0688 */ unsigned __int64 CreateUnbiasedInterruptTime;
  /* 0x0690 */ unsigned __int64 TotalUnbiasedFrozenTime;
  /* 0x0698 */ unsigned __int64 LastAppStateUpdateTime;
  struct /* bitfield */
  {
    /* 0x06a0 */ unsigned __int64 LastAppStateUptime : 61; /* bit position: 0 */
    /* 0x06a0 */ unsigned __int64 LastAppState : 3; /* bit position: 61 */
  }; /* bitfield */
  /* 0x06a8 */ volatile unsigned __int64 SharedCommitCharge;
  /* 0x06b0 */ struct _EX_PUSH_LOCK SharedCommitLock;
  /* 0x06b8 */ struct _LIST_ENTRY SharedCommitLinks;
  union
  {
    struct
    {
      /* 0x06c8 */ unsigned __int64 AllowedCpuSets;
      /* 0x06d0 */ unsigned __int64 DefaultCpuSets;
    }; /* size: 0x0010 */
    struct
    {
      /* 0x06c8 */ unsigned __int64* AllowedCpuSetsIndirect;
      /* 0x06d0 */ unsigned __int64* DefaultCpuSetsIndirect;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x06d8 */ void* DiskIoAttribution;
  /* 0x06e0 */ void* DxgProcess;
  /* 0x06e8 */ unsigned long Win32KFilterSet;
  /* 0x06ec */ unsigned short Machine;
  /* 0x06ee */ unsigned char MmSlabIdentity;
  /* 0x06ef */ unsigned char Spare0;
  /* 0x06f0 */ volatile union _PS_INTERLOCKED_TIMER_DELAY_VALUES ProcessTimerDelay;
  /* 0x06f8 */ volatile unsigned long KTimerSets;
  /* 0x06fc */ volatile unsigned long KTimer2Sets;
  /* 0x0700 */ volatile unsigned long ThreadTimerSets;
  /* 0x0704 */ long Padding_73;
  /* 0x0708 */ unsigned __int64 VirtualTimerListLock;
  /* 0x0710 */ struct _LIST_ENTRY VirtualTimerListHead;
  union
  {
    /* 0x0720 */ struct _WNF_STATE_NAME WakeChannel;
    /* 0x0720 */ struct _PS_PROCESS_WAKE_INFORMATION WakeInfo;
  }; /* size: 0x0030 */
  union
  {
    /* 0x0750 */ unsigned long MitigationFlags;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0750 */ unsigned long ControlFlowGuardEnabled : 1; /* bit position: 0 */
        /* 0x0750 */ unsigned long ControlFlowGuardExportSuppressionEnabled : 1; /* bit position: 1 */
        /* 0x0750 */ unsigned long ControlFlowGuardStrict : 1; /* bit position: 2 */
        /* 0x0750 */ unsigned long DisallowStrippedImages : 1; /* bit position: 3 */
        /* 0x0750 */ unsigned long ForceRelocateImages : 1; /* bit position: 4 */
        /* 0x0750 */ unsigned long HighEntropyASLREnabled : 1; /* bit position: 5 */
        /* 0x0750 */ unsigned long StackRandomizationDisabled : 1; /* bit position: 6 */
        /* 0x0750 */ unsigned long ExtensionPointDisable : 1; /* bit position: 7 */
        /* 0x0750 */ unsigned long DisableDynamicCode : 1; /* bit position: 8 */
        /* 0x0750 */ unsigned long DisableDynamicCodeAllowOptOut : 1; /* bit position: 9 */
        /* 0x0750 */ unsigned long DisableDynamicCodeAllowRemoteDowngrade : 1; /* bit position: 10 */
        /* 0x0750 */ unsigned long AuditDisableDynamicCode : 1; /* bit position: 11 */
        /* 0x0750 */ unsigned long DisallowWin32kSystemCalls : 1; /* bit position: 12 */
        /* 0x0750 */ unsigned long AuditDisallowWin32kSystemCalls : 1; /* bit position: 13 */
        /* 0x0750 */ unsigned long EnableFilteredWin32kAPIs : 1; /* bit position: 14 */
        /* 0x0750 */ unsigned long AuditFilteredWin32kAPIs : 1; /* bit position: 15 */
        /* 0x0750 */ unsigned long DisableNonSystemFonts : 1; /* bit position: 16 */
        /* 0x0750 */ unsigned long AuditNonSystemFontLoading : 1; /* bit position: 17 */
        /* 0x0750 */ unsigned long PreferSystem32Images : 1; /* bit position: 18 */
        /* 0x0750 */ unsigned long ProhibitRemoteImageMap : 1; /* bit position: 19 */
        /* 0x0750 */ unsigned long AuditProhibitRemoteImageMap : 1; /* bit position: 20 */
        /* 0x0750 */ unsigned long ProhibitLowILImageMap : 1; /* bit position: 21 */
        /* 0x0750 */ unsigned long AuditProhibitLowILImageMap : 1; /* bit position: 22 */
        /* 0x0750 */ unsigned long SignatureMitigationOptIn : 1; /* bit position: 23 */
        /* 0x0750 */ unsigned long AuditBlockNonMicrosoftBinaries : 1; /* bit position: 24 */
        /* 0x0750 */ unsigned long AuditBlockNonMicrosoftBinariesAllowStore : 1; /* bit position: 25 */
        /* 0x0750 */ unsigned long LoaderIntegrityContinuityEnabled : 1; /* bit position: 26 */
        /* 0x0750 */ unsigned long AuditLoaderIntegrityContinuity : 1; /* bit position: 27 */
        /* 0x0750 */ unsigned long EnableModuleTamperingProtection : 1; /* bit position: 28 */
        /* 0x0750 */ unsigned long EnableModuleTamperingProtectionNoInherit : 1; /* bit position: 29 */
        /* 0x0750 */ unsigned long RestrictIndirectBranchPrediction : 1; /* bit position: 30 */
        /* 0x0750 */ unsigned long IsolateSecurityDomain : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ MitigationFlagsValues;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0754 */ unsigned long MitigationFlags2;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0754 */ unsigned long EnableExportAddressFilter : 1; /* bit position: 0 */
        /* 0x0754 */ unsigned long AuditExportAddressFilter : 1; /* bit position: 1 */
        /* 0x0754 */ unsigned long EnableExportAddressFilterPlus : 1; /* bit position: 2 */
        /* 0x0754 */ unsigned long AuditExportAddressFilterPlus : 1; /* bit position: 3 */
        /* 0x0754 */ unsigned long EnableRopStackPivot : 1; /* bit position: 4 */
        /* 0x0754 */ unsigned long AuditRopStackPivot : 1; /* bit position: 5 */
        /* 0x0754 */ unsigned long EnableRopCallerCheck : 1; /* bit position: 6 */
        /* 0x0754 */ unsigned long AuditRopCallerCheck : 1; /* bit position: 7 */
        /* 0x0754 */ unsigned long EnableRopSimExec : 1; /* bit position: 8 */
        /* 0x0754 */ unsigned long AuditRopSimExec : 1; /* bit position: 9 */
        /* 0x0754 */ unsigned long EnableImportAddressFilter : 1; /* bit position: 10 */
        /* 0x0754 */ unsigned long AuditImportAddressFilter : 1; /* bit position: 11 */
        /* 0x0754 */ unsigned long DisablePageCombine : 1; /* bit position: 12 */
        /* 0x0754 */ unsigned long SpeculativeStoreBypassDisable : 1; /* bit position: 13 */
        /* 0x0754 */ unsigned long CetUserShadowStacks : 1; /* bit position: 14 */
        /* 0x0754 */ unsigned long AuditCetUserShadowStacks : 1; /* bit position: 15 */
        /* 0x0754 */ unsigned long AuditCetUserShadowStacksLogged : 1; /* bit position: 16 */
        /* 0x0754 */ unsigned long UserCetSetContextIpValidation : 1; /* bit position: 17 */
        /* 0x0754 */ unsigned long AuditUserCetSetContextIpValidation : 1; /* bit position: 18 */
        /* 0x0754 */ unsigned long AuditUserCetSetContextIpValidationLogged : 1; /* bit position: 19 */
        /* 0x0754 */ unsigned long CetUserShadowStacksStrictMode : 1; /* bit position: 20 */
        /* 0x0754 */ unsigned long BlockNonCetBinaries : 1; /* bit position: 21 */
        /* 0x0754 */ unsigned long BlockNonCetBinariesNonEhcont : 1; /* bit position: 22 */
        /* 0x0754 */ unsigned long AuditBlockNonCetBinaries : 1; /* bit position: 23 */
        /* 0x0754 */ unsigned long AuditBlockNonCetBinariesLogged : 1; /* bit position: 24 */
        /* 0x0754 */ unsigned long XtendedControlFlowGuard_Deprecated : 1; /* bit position: 25 */
        /* 0x0754 */ unsigned long AuditXtendedControlFlowGuard_Deprecated : 1; /* bit position: 26 */
        /* 0x0754 */ unsigned long PointerAuthUserIp : 1; /* bit position: 27 */
        /* 0x0754 */ unsigned long AuditPointerAuthUserIp : 1; /* bit position: 28 */
        /* 0x0754 */ unsigned long AuditPointerAuthUserIpLogged : 1; /* bit position: 29 */
        /* 0x0754 */ unsigned long CetDynamicApisOutOfProcOnly : 1; /* bit position: 30 */
        /* 0x0754 */ unsigned long UserCetSetContextIpValidationRelaxedMode : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ MitigationFlags2Values;
  }; /* size: 0x0004 */
  /* 0x0758 */ void* PartitionObject;
  /* 0x0760 */ unsigned __int64 SecurityDomain;
  /* 0x0768 */ unsigned __int64 ParentSecurityDomain;
  /* 0x0770 */ void* CoverageSamplerContext;
  /* 0x0778 */ void* MmHotPatchContext;
  /* 0x0780 */ struct _RTL_AVL_TREE DynamicEHContinuationTargetsTree;
  /* 0x0788 */ struct _EX_PUSH_LOCK DynamicEHContinuationTargetsLock;
  /* 0x0790 */ struct _PS_DYNAMIC_ENFORCED_ADDRESS_RANGES DynamicEnforcedCetCompatibleRanges;
  /* 0x07a0 */ unsigned long DisabledComponentFlags;
  /* 0x07a4 */ volatile long PageCombineSequence;
  /* 0x07a8 */ struct _EX_PUSH_LOCK EnableOptionalXStateFeaturesLock;
  /* 0x07b0 */ unsigned long* volatile PathRedirectionHashes;
  /* 0x07b8 */ struct _PS_SYSCALL_PROVIDER* SyscallProvider;
  /* 0x07c0 */ struct _LIST_ENTRY SyscallProviderProcessLinks;
  /* 0x07d0 */ struct _PSP_SYSCALL_PROVIDER_DISPATCH_CONTEXT SyscallProviderDispatchContext;
  union
  {
    /* 0x07d8 */ unsigned long MitigationFlags3;
    struct
    {
      struct /* bitfield */
      {
        /* 0x07d8 */ unsigned long RestrictCoreSharing : 1; /* bit position: 0 */
        /* 0x07d8 */ unsigned long DisallowFsctlSystemCalls : 1; /* bit position: 1 */
        /* 0x07d8 */ unsigned long AuditDisallowFsctlSystemCalls : 1; /* bit position: 2 */
        /* 0x07d8 */ unsigned long MitigationFlags3Spare : 29; /* bit position: 3 */
      }; /* bitfield */
    } /* size: 0x0004 */ MitigationFlags3Values;
  }; /* size: 0x0004 */
  union
  {
    /* 0x07dc */ unsigned long Flags4;
    struct /* bitfield */
    {
      /* 0x07dc */ unsigned long ThreadWasActive : 1; /* bit position: 0 */
      /* 0x07dc */ unsigned long MinimalTerminate : 1; /* bit position: 1 */
      /* 0x07dc */ unsigned long ImageExpansionDisable : 1; /* bit position: 2 */
      /* 0x07dc */ unsigned long SessionFirstProcess : 1; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x07e0 */ unsigned long SyscallUsage;
    struct
    {
      struct /* bitfield */
      {
        /* 0x07e0 */ unsigned long SystemModuleInformation : 1; /* bit position: 0 */
        /* 0x07e0 */ unsigned long SystemModuleInformationEx : 1; /* bit position: 1 */
        /* 0x07e0 */ unsigned long SystemLocksInformation : 1; /* bit position: 2 */
        /* 0x07e0 */ unsigned long SystemStackTraceInformation : 1; /* bit position: 3 */
        /* 0x07e0 */ unsigned long SystemHandleInformation : 1; /* bit position: 4 */
        /* 0x07e0 */ unsigned long SystemExtendedHandleInformation : 1; /* bit position: 5 */
        /* 0x07e0 */ unsigned long SystemObjectInformation : 1; /* bit position: 6 */
        /* 0x07e0 */ unsigned long SystemBigPoolInformation : 1; /* bit position: 7 */
        /* 0x07e0 */ unsigned long SystemExtendedProcessInformation : 1; /* bit position: 8 */
        /* 0x07e0 */ unsigned long SystemSessionProcessInformation : 1; /* bit position: 9 */
        /* 0x07e0 */ unsigned long SystemMemoryTopologyInformation : 1; /* bit position: 10 */
        /* 0x07e0 */ unsigned long SystemMemoryChannelInformation : 1; /* bit position: 11 */
        /* 0x07e0 */ unsigned long SystemUnused : 1; /* bit position: 12 */
        /* 0x07e0 */ unsigned long SystemPlatformBinaryInformation : 1; /* bit position: 13 */
        /* 0x07e0 */ unsigned long SystemFirmwareTableInformation : 1; /* bit position: 14 */
        /* 0x07e0 */ unsigned long SystemBootMetadataInformation : 1; /* bit position: 15 */
        /* 0x07e0 */ unsigned long SystemWheaIpmiHardwareInformation : 1; /* bit position: 16 */
        /* 0x07e0 */ unsigned long SystemSuperfetchPrefetch : 1; /* bit position: 17 */
        /* 0x07e0 */ unsigned long SystemSuperfetchPfnQuery : 1; /* bit position: 18 */
        /* 0x07e0 */ unsigned long SystemSuperfetchPrivSourceQuery : 1; /* bit position: 19 */
        /* 0x07e0 */ unsigned long SystemSuperfetchMemoryListQuery : 1; /* bit position: 20 */
        /* 0x07e0 */ unsigned long SystemSuperfetchMemoryRangesQuery : 1; /* bit position: 21 */
        /* 0x07e0 */ unsigned long SystemSuperfetchPfnSetPriority : 1; /* bit position: 22 */
        /* 0x07e0 */ unsigned long SystemSuperfetchMovePages : 1; /* bit position: 23 */
        /* 0x07e0 */ unsigned long SystemSuperfetchPfnSetPageHeat : 1; /* bit position: 24 */
        /* 0x07e0 */ unsigned long SysDbgGetTriageDump : 1; /* bit position: 25 */
        /* 0x07e0 */ unsigned long SysDbgGetLiveKernelDump : 1; /* bit position: 26 */
        /* 0x07e0 */ unsigned long SyscallUsageValuesSpare : 5; /* bit position: 27 */
      }; /* bitfield */
    } /* size: 0x0004 */ SyscallUsageValues;
  }; /* size: 0x0004 */
  /* 0x07e4 */ long SupervisorDeviceAsid;
  /* 0x07e8 */ void* SupervisorSvmData;
  /* 0x07f0 */ struct _PROCESS_NETWORK_COUNTERS* NetworkCounters;
  /* 0x07f8 */ union _PROCESS_EXECUTION Execution;
  /* 0x07fc */ long Padding_74;
  /* 0x0800 */ void* ThreadIndexTable;
  /* 0x0808 */ long __PADDING__[14];
} EPROCESS, *PEPROCESS; /* size: 0x0840 */

struct _PSP_STORAGE;

typedef enum _CMP_FAILURE_INJECTION_POINT
{
  CmpFailurePointPoolAllocation = 0,
  CmpFailurePointFileWrite = 1,
  CmpFailurePointFileRead = 2,
  CmpFailurePointFlush = 3,
  CmpFailurePointFlushAndPurge = 4,
  CmpFailurePointForceLargeBin = 5,
  CmpFailurePointDontFixAlignment = 6,
  CmpFailurePointAllocateCell = 7,
  CmpFailurePointMarkDirty = 8,
  CmpFailurePointForceMultiLevelMap = 9,
  CmpFailurePointAllocateContiguousLogEntry = 10,
  CmpFailurePointAllocateKcb = 11,
  CmpFailurePointCreateKeyBody = 12,
  CmpFailurePointForceFreeKcb = 13,
  CmpFailurePointKcbLockUpgrade = 14,
  CmpFailurePointKcbLockUpgradeDelay = 15,
  CmpFailurePointKeyEnumResumeContextVerification = 16,
  CmpFailurePointKeyEnumForceRetry = 17,
  CmpFailurePointForceReorganization = 18,
  CmpFailurePointForceLazyCOWByPolicy = 19,
  CmpFailurePointForceBugcheckRecoveryEnabled = 20,
  CmpFailurePointCreateHiveCacheEntry = 21,
  CmpFailurePointClaimHiveCacheEntry = 22,
  CmpFailurePointSubscribePnpNotifications = 23,
  CmpFailurePointCreateOplockMonitoringThread = 24,
  CmpFailurePointOpenHiveFile = 25,
  CmpFailurePointRequestOplockOnPrimary = 26,
  CmpFailurePointRequestOplockOnLog1 = 27,
  CmpFailurePointRequestOplockOnLog2 = 28,
  CmpFailurePointCreateHive = 29,
  CmpFailurePointOpenHiveFilesToBreakOplocks = 30,
  CmpFailureInjectionPointCount = 31,
} CMP_FAILURE_INJECTION_POINT, *PCMP_FAILURE_INJECTION_POINT;

typedef union _WHEA_IN_USE_PAGE_NOTIFY_FLAGS
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned char PlatformDirected : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned char PageSwapped : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned char PageDemoted : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned char Reserved : 3; /* bit position: 3 */
        /* 0x0000 */ unsigned char NotifyAllOfflines : 1; /* bit position: 6 */
        /* 0x0000 */ unsigned char PageOfflined : 1; /* bit position: 7 */
      }; /* bitfield */
    } /* size: 0x0001 */ Bits;
    /* 0x0000 */ unsigned char AsUCHAR;
  }; /* size: 0x0001 */
} WHEA_IN_USE_PAGE_NOTIFY_FLAGS, *PWHEA_IN_USE_PAGE_NOTIFY_FLAGS; /* size: 0x0001 */

typedef union _WHEA_RECOVERY_CONTEXT_ACTION_TAKEN_ADDITIONAL_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned __int64 Reserved : 64; /* bit position: 0 */
    } /* size: 0x0008 */ Bits;
    /* 0x0000 */ unsigned __int64 AsULONG64;
  }; /* size: 0x0008 */
} WHEA_RECOVERY_CONTEXT_ACTION_TAKEN_ADDITIONAL_INFO, *PWHEA_RECOVERY_CONTEXT_ACTION_TAKEN_ADDITIONAL_INFO; /* size: 0x0008 */

typedef struct _WHEA_RECOVERY_CONTEXT_PAGE_INFO
{
  /* 0x0000 */ unsigned long ComponentTag;
  /* 0x0004 */ long PageStatus;
  /* 0x0008 */ enum _WHEA_RECOVERY_CONTEXT_ACTION_TAKEN ActionTaken;
  /* 0x000c */ union _WHEA_IN_USE_PAGE_NOTIFY_FLAGS NotifyFlags;
  /* 0x000d */ unsigned char ImmediateSuccess;
  /* 0x000e */ unsigned short Reserved;
  /* 0x0010 */ union _WHEA_RECOVERY_CONTEXT_ACTION_TAKEN_ADDITIONAL_INFO ActionTakenAdditionalInfo;
} WHEA_RECOVERY_CONTEXT_PAGE_INFO, *PWHEA_RECOVERY_CONTEXT_PAGE_INFO; /* size: 0x0018 */

typedef struct _ETW_LAST_ENABLE_INFO
{
  /* 0x0000 */ union _LARGE_INTEGER EnableFlags;
  /* 0x0008 */ unsigned short LoggerId;
  /* 0x000a */ unsigned char Level;
  struct /* bitfield */
  {
    /* 0x000b */ unsigned char Enabled : 1; /* bit position: 0 */
    /* 0x000b */ unsigned char InternalFlag : 7; /* bit position: 1 */
  }; /* bitfield */
  /* 0x000c */ long __PADDING__[1];
} ETW_LAST_ENABLE_INFO, *PETW_LAST_ENABLE_INFO; /* size: 0x0010 */

enum PCW_REGISTRATION_FLAGS
{
  PcwRegistrationNone = 0,
  PcwRegistrationSiloNeutral = 1,
};

typedef union _IOMMU_SVM_CAPABILITIES
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long AtsCapability : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PriCapability : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long PasidCapability : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Rsvd0 : 29; /* bit position: 3 */
    }; /* bitfield */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long Padding : 3; /* bit position: 0 */
        /* 0x0000 */ unsigned long PasidMaxWidth : 5; /* bit position: 3 */
        /* 0x0000 */ unsigned long PasidExePerm : 1; /* bit position: 8 */
        /* 0x0000 */ unsigned long PasidPrivMode : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned long AtsPageAlignedRequest : 1; /* bit position: 10 */
        /* 0x0000 */ unsigned long AtsGlobalInvalidate : 1; /* bit position: 11 */
        /* 0x0000 */ unsigned long AtsInvalidateQueueDepth : 5; /* bit position: 12 */
        /* 0x0000 */ unsigned long PriPrgResponsePasidRequired : 1; /* bit position: 17 */
        /* 0x0000 */ unsigned long Rsvd : 14; /* bit position: 18 */
      }; /* bitfield */
    } /* size: 0x0004 */ CapReg;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long Padding : 18; /* bit position: 0 */
        /* 0x0000 */ unsigned long AtsEnable : 1; /* bit position: 18 */
        /* 0x0000 */ unsigned long PriEnable : 1; /* bit position: 19 */
        /* 0x0000 */ unsigned long PasidEnable : 1; /* bit position: 20 */
        /* 0x0000 */ unsigned long ExecutePermissionEnable : 1; /* bit position: 21 */
        /* 0x0000 */ unsigned long PrivilegedModeEnable : 1; /* bit position: 22 */
        /* 0x0000 */ unsigned long Rsvd : 9; /* bit position: 23 */
      }; /* bitfield */
    } /* size: 0x0004 */ EnabledCaps;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long Padding : 23; /* bit position: 0 */
        /* 0x0000 */ unsigned long IsSecureDevice : 1; /* bit position: 23 */
        /* 0x0000 */ unsigned long Rsvd : 8; /* bit position: 24 */
      }; /* bitfield */
    } /* size: 0x0004 */ DeviceInformation;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long AtsPriPasidBits : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned long CapRegBits : 15; /* bit position: 3 */
      /* 0x0000 */ unsigned long EnabledCapsBits : 5; /* bit position: 18 */
      /* 0x0000 */ unsigned long DeviceInformationBits : 1; /* bit position: 23 */
      /* 0x0000 */ unsigned long Rsvd1 : 8; /* bit position: 24 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} IOMMU_SVM_CAPABILITIES, *PIOMMU_SVM_CAPABILITIES; /* size: 0x0004 */

typedef struct _GROUP_FAULT_REFERENCE
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ unsigned long Count;
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long Pending : 1; /* bit position: 0 */
          /* 0x0004 */ unsigned long Asid : 20; /* bit position: 1 */
          /* 0x0004 */ unsigned long LastInGroupSeen : 1; /* bit position: 21 */
          /* 0x0004 */ unsigned long Error : 1; /* bit position: 22 */
          /* 0x0004 */ unsigned long Unused : 9; /* bit position: 23 */
        }; /* bitfield */
      }; /* size: 0x0008 */
      /* 0x0000 */ unsigned __int64 Long;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
} GROUP_FAULT_REFERENCE, *PGROUP_FAULT_REFERENCE; /* size: 0x0008 */

typedef struct _IOMMU_TRACKED_DEVICE
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned __int64 Lock;
  /* 0x0018 */ void* Iommu;
  /* 0x0020 */ unsigned long IommuCapabilities;
  /* 0x0024 */ unsigned long ReferenceCount;
  /* 0x0028 */ unsigned __int64 SourceId;
  /* 0x0030 */ union _IOMMU_SVM_CAPABILITIES Capabilities;
  /* 0x0034 */ unsigned long Flags;
  /* 0x0038 */ struct _LIST_ENTRY ActiveDeviceListHead;
  /* 0x0048 */ struct _IOMMU_DMA_DEVICE* DmaDevice;
  /* 0x0050 */ unsigned long LastGroupFaultSequenceNumber;
  /* 0x0054 */ long Padding_75;
  /* 0x0058 */ struct _GROUP_FAULT_REFERENCE GroupFaultReferences[512];
} IOMMU_TRACKED_DEVICE, *PIOMMU_TRACKED_DEVICE; /* size: 0x1058 */

typedef struct _CURDIR
{
  /* 0x0000 */ struct _UNICODE_STRING DosPath;
  /* 0x0010 */ void* Handle;
} CURDIR, *PCURDIR; /* size: 0x0018 */

typedef struct _STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ long Padding_76;
  /* 0x0008 */ char* Buffer;
} STRING, *PSTRING; /* size: 0x0010 */

typedef struct _RTL_DRIVE_LETTER_CURDIR
{
  /* 0x0000 */ unsigned short Flags;
  /* 0x0002 */ unsigned short Length;
  /* 0x0004 */ unsigned long TimeStamp;
  /* 0x0008 */ struct _STRING DosPath;
} RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR; /* size: 0x0018 */

typedef struct _RTL_USER_PROCESS_PARAMETERS
{
  /* 0x0000 */ unsigned long MaximumLength;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long DebugFlags;
  /* 0x0010 */ void* ConsoleHandle;
  /* 0x0018 */ unsigned long ConsoleFlags;
  /* 0x001c */ long Padding_77;
  /* 0x0020 */ void* StandardInput;
  /* 0x0028 */ void* StandardOutput;
  /* 0x0030 */ void* StandardError;
  /* 0x0038 */ struct _CURDIR CurrentDirectory;
  /* 0x0050 */ struct _UNICODE_STRING DllPath;
  /* 0x0060 */ struct _UNICODE_STRING ImagePathName;
  /* 0x0070 */ struct _UNICODE_STRING CommandLine;
  /* 0x0080 */ void* Environment;
  /* 0x0088 */ unsigned long StartingX;
  /* 0x008c */ unsigned long StartingY;
  /* 0x0090 */ unsigned long CountX;
  /* 0x0094 */ unsigned long CountY;
  /* 0x0098 */ unsigned long CountCharsX;
  /* 0x009c */ unsigned long CountCharsY;
  /* 0x00a0 */ unsigned long FillAttribute;
  /* 0x00a4 */ unsigned long WindowFlags;
  /* 0x00a8 */ unsigned long ShowWindowFlags;
  /* 0x00ac */ long Padding_78;
  /* 0x00b0 */ struct _UNICODE_STRING WindowTitle;
  /* 0x00c0 */ struct _UNICODE_STRING DesktopInfo;
  /* 0x00d0 */ struct _UNICODE_STRING ShellInfo;
  /* 0x00e0 */ struct _UNICODE_STRING RuntimeData;
  /* 0x00f0 */ struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
  /* 0x03f0 */ unsigned __int64 EnvironmentSize;
  /* 0x03f8 */ unsigned __int64 EnvironmentVersion;
  /* 0x0400 */ void* PackageDependencyData;
  /* 0x0408 */ unsigned long ProcessGroupId;
  /* 0x040c */ unsigned long LoaderThreads;
  /* 0x0410 */ struct _UNICODE_STRING RedirectionDllName;
  /* 0x0420 */ struct _UNICODE_STRING HeapPartitionName;
  /* 0x0430 */ unsigned __int64* DefaultThreadpoolCpuSetMasks;
  /* 0x0438 */ unsigned long DefaultThreadpoolCpuSetMaskCount;
  /* 0x043c */ unsigned long DefaultThreadpoolThreadMaximum;
  /* 0x0440 */ unsigned long HeapMemoryTypeMask;
  /* 0x0444 */ long __PADDING__[1];
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS; /* size: 0x0448 */

typedef enum _KHETERO_CPU_POLICY
{
  KHeteroCpuPolicyAll = 0,
  KHeteroCpuPolicyLarge = 1,
  KHeteroCpuPolicyLargeOrIdle = 2,
  KHeteroCpuPolicySmall = 3,
  KHeteroCpuPolicySmallOrIdle = 4,
  KHeteroCpuPolicyDynamic = 5,
  KHeteroCpuPolicyStaticMax = 5,
  KHeteroCpuPolicyBiasedSmall = 6,
  KHeteroCpuPolicyBiasedLarge = 7,
  KHeteroCpuPolicyDefault = 8,
  KHeteroCpuPolicyMax = 9,
} KHETERO_CPU_POLICY, *PKHETERO_CPU_POLICY;

typedef union _KI_PROCESS_CONCURRENCY_COUNT
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Fraction : 18; /* bit position: 0 */
      /* 0x0000 */ unsigned long Count : 14; /* bit position: 18 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AllFields;
  }; /* size: 0x0004 */
} KI_PROCESS_CONCURRENCY_COUNT, *PKI_PROCESS_CONCURRENCY_COUNT; /* size: 0x0004 */

enum PROFILE_STATUS
{
  DOCK_NOTDOCKDEVICE = 0,
  DOCK_QUIESCENT = 1,
  DOCK_ARRIVING = 2,
  DOCK_DEPARTING = 3,
  DOCK_EJECTIRP_COMPLETED = 4,
};

typedef struct _NB10
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Offset;
  /* 0x0008 */ unsigned long TimeStamp;
  /* 0x000c */ unsigned long Age;
  /* 0x0010 */ char PdbName[1];
  /* 0x0011 */ char __PADDING__[3];
} NB10, *PNB10; /* size: 0x0014 */

typedef struct _RSDS
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _GUID Guid;
  /* 0x0014 */ unsigned long Age;
  /* 0x0018 */ char PdbName[1];
  /* 0x0019 */ char __PADDING__[3];
} RSDS, *PRSDS; /* size: 0x001c */

typedef union _CVDD
{
  union
  {
    /* 0x0000 */ unsigned long Signature;
    /* 0x0000 */ struct _NB10 NB10;
    /* 0x0000 */ struct _RSDS RsDs;
  }; /* size: 0x001c */
} CVDD, *PCVDD; /* size: 0x001c */

typedef struct _KAFFINITY_EX
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ unsigned long Reserved;
  union
  {
    /* 0x0008 */ unsigned __int64 Bitmap[1];
    /* 0x0008 */ unsigned __int64 StaticBitmap[32];
  }; /* size: 0x0100 */
} KAFFINITY_EX, *PKAFFINITY_EX; /* size: 0x0108 */

enum EmptyCVariant_featurestaging_moments
{
  CVariant_featurestaging_moments_Empty = 0,
};

enum EmptyCVariant_FeatureStaging_servicing_releases
{
  CVariant_FeatureStaging_servicing_releases_Empty = 0,
};

typedef struct _PPM_VETO_ACCOUNTING
{
  /* 0x0000 */ volatile long VetoPresent;
  /* 0x0004 */ long Padding_79;
  /* 0x0008 */ struct _LIST_ENTRY VetoListHead;
  /* 0x0018 */ unsigned char CsAccountingBlocks;
  /* 0x0019 */ unsigned char BlocksDrips;
  /* 0x001a */ char Padding_80[2];
  /* 0x001c */ unsigned long PreallocatedVetoCount;
  /* 0x0020 */ struct _PPM_VETO_ENTRY* PreallocatedVetoList;
} PPM_VETO_ACCOUNTING, *PPPM_VETO_ACCOUNTING; /* size: 0x0028 */

typedef struct _PPM_PLATFORM_STATE
{
  /* 0x0000 */ unsigned __int64 LevelId;
  /* 0x0008 */ unsigned long Latency;
  /* 0x000c */ unsigned long BreakEvenDuration;
  /* 0x0010 */ struct _PPM_VETO_ACCOUNTING VetoAccounting;
  /* 0x0038 */ unsigned char TransitionDebugger;
  /* 0x0039 */ unsigned char Platform;
  /* 0x003a */ unsigned char Enabled;
  /* 0x003b */ unsigned char CoordinatedDependencies;
  /* 0x003c */ unsigned long DependencyListCount;
  /* 0x0040 */ struct _KAFFINITY_EX Processors;
  /* 0x0148 */ struct _UNICODE_STRING Name;
  /* 0x0158 */ struct _PPM_SELECTION_DEPENDENCY* DependencyLists;
  /* 0x0160 */ volatile union _PPM_COORDINATED_SYNCHRONIZATION Synchronization;
  /* 0x0164 */ long Padding_81;
  /* 0x0168 */ volatile unsigned __int64 EnterTime;
  /* 0x0170 */ long Padding_82[4];
  union
  {
    /* 0x0180 */ volatile long RefCount;
    /* 0x0180 */ unsigned char CacheAlign0[64];
  }; /* size: 0x0040 */
} PPM_PLATFORM_STATE, *PPPM_PLATFORM_STATE; /* size: 0x01c0 */

typedef struct _KAB_UM_PROCESS_TREE
{
  /* 0x0000 */ struct _RTL_RB_TREE Tree;
  /* 0x0010 */ unsigned __int64 TreeLock;
} KAB_UM_PROCESS_TREE, *PKAB_UM_PROCESS_TREE; /* size: 0x0018 */

enum EmptyCVariant_FeatureStaging_ContinuousDelivery
{
  CVariant_FeatureStaging_ContinuousDelivery_Empty = 0,
};

enum EmptyCVariant_FeatureStaging_KernelPnP
{
  CVariant_FeatureStaging_KernelPnP_Empty = 0,
};

typedef struct _ETW_FILTER_STRING_TOKEN_ELEMENT
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ char Padding_83[6];
  /* 0x0008 */ wchar_t* String;
} ETW_FILTER_STRING_TOKEN_ELEMENT, *PETW_FILTER_STRING_TOKEN_ELEMENT; /* size: 0x0010 */

typedef struct _ETW_FILTER_STRING_TOKEN
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ char Padding_84[6];
  /* 0x0008 */ struct _ETW_FILTER_STRING_TOKEN_ELEMENT Tokens[1];
} ETW_FILTER_STRING_TOKEN, *PETW_FILTER_STRING_TOKEN; /* size: 0x0018 */

typedef struct _KGATE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
} KGATE, *PKGATE; /* size: 0x0018 */

typedef struct _MI_EXTENT_DELETION_WAIT_BLOCK
{
  /* 0x0000 */ struct _MI_EXTENT_DELETION_WAIT_BLOCK* Next;
  /* 0x0008 */ struct _KGATE Gate;
} MI_EXTENT_DELETION_WAIT_BLOCK, *PMI_EXTENT_DELETION_WAIT_BLOCK; /* size: 0x0020 */

struct _DRIVER_PROXY_EXTENSION;

typedef enum _ARBITER_REQUEST_SOURCE
{
  ArbiterRequestUndefined = -1,
  ArbiterRequestLegacyReported = 0,
  ArbiterRequestHalReported = 1,
  ArbiterRequestLegacyAssigned = 2,
  ArbiterRequestPnpDetected = 3,
  ArbiterRequestPnpEnumerated = 4,
} ARBITER_REQUEST_SOURCE, *PARBITER_REQUEST_SOURCE;

typedef struct _CM_PATH_HASH
{
  /* 0x0000 */ unsigned long Hash;
} CM_PATH_HASH, *PCM_PATH_HASH; /* size: 0x0004 */

typedef struct _CM_KEY_HASH
{
  /* 0x0000 */ struct _CM_PATH_HASH ConvKey;
  /* 0x0004 */ long Padding_85;
  /* 0x0008 */ struct _CM_KEY_HASH* NextHash;
  /* 0x0010 */ struct _HHIVE* KeyHive;
  /* 0x0018 */ unsigned long KeyCell;
  /* 0x001c */ long __PADDING__[1];
} CM_KEY_HASH, *PCM_KEY_HASH; /* size: 0x0020 */

typedef struct _CHILD_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long List;
} CHILD_LIST, *PCHILD_LIST; /* size: 0x0008 */

typedef struct _CM_INTENT_LOCK
{
  /* 0x0000 */ unsigned long OwnerCount;
  /* 0x0004 */ long Padding_86;
  /* 0x0008 */ struct _CM_KCB_UOW** OwnerTable;
} CM_INTENT_LOCK, *PCM_INTENT_LOCK; /* size: 0x0010 */

typedef struct _CM_KEY_CONTROL_BLOCK
{
  /* 0x0000 */ unsigned __int64 RefCount;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long ExtFlags : 16; /* bit position: 0 */
    /* 0x0008 */ unsigned long Freed : 1; /* bit position: 16 */
    /* 0x0008 */ unsigned long Discarded : 1; /* bit position: 17 */
    /* 0x0008 */ unsigned long HiveUnloaded : 1; /* bit position: 18 */
    /* 0x0008 */ unsigned long Decommissioned : 1; /* bit position: 19 */
    /* 0x0008 */ unsigned long SpareExtFlag : 1; /* bit position: 20 */
    /* 0x0008 */ unsigned long TotalLevels : 10; /* bit position: 21 */
  }; /* bitfield */
  /* 0x000c */ long Padding_87;
  union
  {
    /* 0x0010 */ struct _CM_KEY_HASH KeyHash;
    struct
    {
      /* 0x0010 */ struct _CM_PATH_HASH ConvKey;
      /* 0x0014 */ long Padding_88;
      /* 0x0018 */ struct _CM_KEY_HASH* NextHash;
      /* 0x0020 */ struct _HHIVE* KeyHive;
      /* 0x0028 */ unsigned long KeyCell;
    }; /* size: 0x0018 */
  }; /* size: 0x0020 */
  /* 0x0030 */ struct _EX_PUSH_LOCK KcbPushlock;
  union
  {
    /* 0x0038 */ struct _KTHREAD* Owner;
    /* 0x0038 */ long SharedCount;
  }; /* size: 0x0008 */
  struct /* bitfield */
  {
    /* 0x0040 */ unsigned char DelayedDeref : 1; /* bit position: 0 */
    /* 0x0040 */ unsigned char DelayedClose : 1; /* bit position: 1 */
    /* 0x0040 */ unsigned char Parking : 1; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0041 */ unsigned char LayerSemantics;
  /* 0x0042 */ short LayerHeight;
  /* 0x0044 */ unsigned long Spare1;
  /* 0x0048 */ struct _CM_KEY_CONTROL_BLOCK* ParentKcb;
  /* 0x0050 */ struct _CM_NAME_CONTROL_BLOCK* NameBlock;
  /* 0x0058 */ struct _CM_KEY_SECURITY_CACHE* CachedSecurity;
  /* 0x0060 */ struct _CHILD_LIST ValueList;
  /* 0x0068 */ struct _CM_KEY_CONTROL_BLOCK* LinkTarget;
  union
  {
    /* 0x0070 */ struct _CM_INDEX_HINT_BLOCK* IndexHint;
    /* 0x0070 */ unsigned long HashKey;
    /* 0x0070 */ unsigned long SubKeyCount;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0078 */ struct _LIST_ENTRY KeyBodyListHead;
    /* 0x0078 */ struct _LIST_ENTRY ClonedListEntry;
  }; /* size: 0x0010 */
  /* 0x0088 */ struct _CM_KEY_BODY* KeyBodyArray[4];
  /* 0x00a8 */ union _LARGE_INTEGER KcbLastWriteTime;
  /* 0x00b0 */ unsigned short KcbMaxNameLen;
  /* 0x00b2 */ unsigned short KcbMaxValueNameLen;
  /* 0x00b4 */ unsigned long KcbMaxValueDataLen;
  struct /* bitfield */
  {
    /* 0x00b8 */ unsigned long KcbUserFlags : 4; /* bit position: 0 */
    /* 0x00b8 */ unsigned long KcbVirtControlFlags : 4; /* bit position: 4 */
    /* 0x00b8 */ unsigned long KcbDebug : 8; /* bit position: 8 */
    /* 0x00b8 */ unsigned long Flags : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x00bc */ unsigned long Spare3;
  /* 0x00c0 */ struct _CM_KCB_LAYER_INFO* LayerInfo;
  /* 0x00c8 */ char* RealKeyName;
  /* 0x00d0 */ struct _LIST_ENTRY KCBUoWListHead;
  union
  {
    /* 0x00e0 */ struct _LIST_ENTRY DelayQueueEntry;
    /* 0x00e0 */ volatile unsigned char* Stolen;
  }; /* size: 0x0010 */
  /* 0x00f0 */ struct _CM_TRANS* TransKCBOwner;
  /* 0x00f8 */ struct _CM_INTENT_LOCK KCBLock;
  /* 0x0108 */ struct _CM_INTENT_LOCK KeyLock;
  /* 0x0118 */ struct _CHILD_LIST TransValueCache;
  /* 0x0120 */ struct _CM_TRANS* TransValueListOwner;
  union
  {
    /* 0x0128 */ struct _UNICODE_STRING* FullKCBName;
    struct /* bitfield */
    {
      /* 0x0128 */ unsigned __int64 FullKCBNameStale : 1; /* bit position: 0 */
      /* 0x0128 */ unsigned __int64 Reserved : 63; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0008 */
  /* 0x0130 */ unsigned __int64 SequenceNumber;
} CM_KEY_CONTROL_BLOCK, *PCM_KEY_CONTROL_BLOCK; /* size: 0x0138 */

typedef enum _POWER_REQUEST_TYPE
{
  PowerRequestDisplayRequired = 0,
  PowerRequestSystemRequired = 1,
  PowerRequestAwayModeRequired = 2,
  PowerRequestExecutionRequired = 3,
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;

typedef struct _RTL_ATOM_TABLE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ volatile long ReferenceCount;
  /* 0x0008 */ struct _EX_PUSH_LOCK PushLock;
  /* 0x0010 */ struct _HANDLE_TABLE* ExHandleTable;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned long NumberOfBuckets;
  /* 0x0020 */ struct _RTL_ATOM_TABLE_ENTRY* Buckets[1];
} RTL_ATOM_TABLE, *PRTL_ATOM_TABLE; /* size: 0x0028 */

typedef enum _POWER_REQUEST_TYPE_INTERNAL
{
  PowerRequestDisplayRequiredInternal = 0,
  PowerRequestSystemRequiredInternal = 1,
  PowerRequestAwayModeRequiredInternal = 2,
  PowerRequestExecutionRequiredInternal = 3,
  PowerRequestPerfBoostRequiredInternal = 4,
  PowerRequestActiveLockScreenInternal = 5,
  PowerRequestInternalInvalid = 6,
} POWER_REQUEST_TYPE_INTERNAL, *PPOWER_REQUEST_TYPE_INTERNAL;

typedef enum _PNP_DEVICE_ACTION_REQUEST
{
  AssignResources = 0,
  ClearDeviceProblem = 1,
  ClearProblem = 2,
  ClearEjectProblem = 3,
  ReservedAction0 = 4,
  QueryPowerRelations = 5,
  Rebalance = 6,
  ReenumerateBootDevices = 7,
  ReenumerateDeviceOnly = 8,
  ReenumerateDeviceTree = 9,
  ReenumerateRootDevices = 10,
  RequeryDeviceState = 11,
  ResetDevice = 12,
  ResourceRequirementsChanged = 13,
  RestartEnumeration = 14,
  SetDeviceProblem = 15,
  StartDevice = 16,
  StartSystemDevicesPass0 = 17,
  StartSystemDevicesPass1 = 18,
  NotifyTransportRelationsChange = 19,
  NotifyEjectionRelationsChange = 20,
  ConfigureDevice = 21,
  ConfigureDeviceClass = 22,
  ConfigureDeviceExtensions = 23,
  ConfigureDeviceReset = 24,
  ClearDmaGuardProblem = 25,
  RequestDeviceReset = 26,
  UpdateConsoleLockState = 27,
  PnpDeviceActionRequestMax = 28,
} PNP_DEVICE_ACTION_REQUEST, *PPNP_DEVICE_ACTION_REQUEST;

typedef struct _PERF_CONTROL_STATE_SELECTION
{
  /* 0x0000 */ unsigned __int64 SelectedState;
  /* 0x0008 */ unsigned __int64 SelectedResourcePriority;
  /* 0x0010 */ unsigned long SelectedPercent;
  /* 0x0014 */ unsigned long SelectedFrequency;
  /* 0x0018 */ unsigned long MinPercent;
  /* 0x001c */ unsigned long MaxPercent;
  /* 0x0020 */ unsigned long TolerancePercent;
  /* 0x0024 */ unsigned long EppPercent;
  /* 0x0028 */ unsigned long AutonomousActivityWindow;
  /* 0x002c */ unsigned long ResourcePriorityPercent;
  /* 0x0030 */ unsigned char Autonomous;
  /* 0x0031 */ unsigned char InheritFromDomain;
  /* 0x0032 */ char __PADDING__[6];
} PERF_CONTROL_STATE_SELECTION, *PPERF_CONTROL_STATE_SELECTION; /* size: 0x0038 */

typedef enum _PEP_ACPI_RESOURCE_TYPE
{
  PepAcpiMemory = 0,
  PepAcpiIoPort = 1,
  PepAcpiInterrupt = 2,
  PepAcpiGpioIo = 3,
  PepAcpiGpioInt = 4,
  PepAcpiSpbI2c = 5,
  PepAcpiSpbSpi = 6,
  PepAcpiSpbUart = 7,
  PepAcpiExtendedMemory = 8,
  PepAcpiExtendedIo = 9,
} PEP_ACPI_RESOURCE_TYPE, *PPEP_ACPI_RESOURCE_TYPE;

typedef enum _GPIO_PIN_CONFIG_TYPE
{
  PullDefault = 0,
  PullUp = 1,
  PullDown = 2,
  PullNone = 3,
} GPIO_PIN_CONFIG_TYPE, *PGPIO_PIN_CONFIG_TYPE;

typedef enum _KTBFLUSH_TYPE
{
  FlushKernel = 0,
  FlushUser = 1,
  FlushEntire = 2,
  FlushEntireAttributeChange = 3,
} KTBFLUSH_TYPE, *PKTBFLUSH_TYPE;

typedef enum _GPIO_PIN_IORESTRICTION_TYPE
{
  IoRestrictionNone = 0,
  IoRestrictionInputOnly = 1,
  IoRestrictionOutputOnly = 2,
  IoRestrictionNoneAndPreserve = 3,
} GPIO_PIN_IORESTRICTION_TYPE, *PGPIO_PIN_IORESTRICTION_TYPE;

typedef struct _DMA_COMMON_BUFFER_VECTOR
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned __int64 SizeOfEntries;
  /* 0x0018 */ unsigned long NumberOfEntries;
  /* 0x001c */ long Padding_89;
  /* 0x0020 */ struct _HALP_DMA_DOMAIN_OBJECT* Domain;
  /* 0x0028 */ struct _MDL* Mdl;
  /* 0x0030 */ void* BaseAddress;
  /* 0x0038 */ unsigned __int64 BaseLogicalAddress;
  /* 0x0040 */ struct _DMA_COMMON_BUFFER_ENTRY* Entries;
  /* 0x0048 */ unsigned char LogicalAddressMapped;
  /* 0x0049 */ char __PADDING__[7];
} DMA_COMMON_BUFFER_VECTOR, *PDMA_COMMON_BUFFER_VECTOR; /* size: 0x0050 */

typedef enum _PPM_DEEP_SLEEP_STATE
{
  PpmDeepSleepStateDisabled = 0,
  PpmDeepSleepStateEnabled = 1,
  PpmDeepSleepStateAusterity = 2,
} PPM_DEEP_SLEEP_STATE, *PPPM_DEEP_SLEEP_STATE;

typedef enum _MI_KSTACK_TYPE
{
  MiRegularKstack = 0,
  MiShortLivedKstack = 1,
  MiXStateKstack = 2,
  MiKernelShadowStackTypeUserThread = 3,
  MiKernelShadowStackTypeKernelThread = 4,
  MiKernelShadowStackTypeRstorssp = 5,
  MiMaximumCachedKernelStackType = 5,
  MiKernelShadowStackTypeSetssbsy = 6,
  MiKernelShadowStackTypeSetssbsyForSystemStartup = 7,
  MiMaximumKstack = 8,
} MI_KSTACK_TYPE, *PMI_KSTACK_TYPE;

typedef enum _PPM_HETERO_POLICY
{
  PpmHeteroPolicyNone = 0,
  PpmHeteroPolicyManual = 1,
  PpmHeteroPolicySmallOnly = 2,
  PpmHeteroPolicyLargeOnly = 3,
  PpmHeteroPolicyDynamic = 4,
  PpmHeteroPolicyMaximum = 5,
} PPM_HETERO_POLICY, *PPPM_HETERO_POLICY;

typedef enum _BOOT_ENTROPY_SOURCE_RESULT_CODE
{
  BootEntropySourceStructureUninitialized = 0,
  BootEntropySourceDisabledByPolicy = 1,
  BootEntropySourceNotPresent = 2,
  BootEntropySourceError = 3,
  BootEntropySourceSuccess = 4,
} BOOT_ENTROPY_SOURCE_RESULT_CODE, *PBOOT_ENTROPY_SOURCE_RESULT_CODE;

typedef struct _BOOT_ENTROPY_SOURCE_LDR_RESULT
{
  /* 0x0000 */ enum _BOOT_ENTROPY_SOURCE_ID SourceId;
  /* 0x0004 */ long Padding_90;
  /* 0x0008 */ unsigned __int64 Policy;
  /* 0x0010 */ enum _BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode;
  /* 0x0014 */ long ResultStatus;
  /* 0x0018 */ unsigned __int64 Time;
  /* 0x0020 */ unsigned long EntropyLength;
  /* 0x0024 */ unsigned char EntropyData[64];
  /* 0x0064 */ long __PADDING__[1];
} BOOT_ENTROPY_SOURCE_LDR_RESULT, *PBOOT_ENTROPY_SOURCE_LDR_RESULT; /* size: 0x0068 */

typedef struct _BOOT_ENTROPY_LDR_RESULT
{
  /* 0x0000 */ unsigned long maxEntropySources;
  /* 0x0004 */ long Padding_91;
  /* 0x0008 */ struct _BOOT_ENTROPY_SOURCE_LDR_RESULT EntropySourceResult[10];
  /* 0x0418 */ unsigned char SeedBytesForCng[48];
  /* 0x0448 */ unsigned char RngBytesForNtoskrnl[1024];
  /* 0x0848 */ unsigned char KdEntropy[32];
} BOOT_ENTROPY_LDR_RESULT, *PBOOT_ENTROPY_LDR_RESULT; /* size: 0x0868 */

typedef enum _SYSTEM_PROCESS_CLASSIFICATION
{
  SystemProcessClassificationNormal = 0,
  SystemProcessClassificationSystem = 1,
  SystemProcessClassificationSecureSystem = 2,
  SystemProcessClassificationMemCompression = 3,
  SystemProcessClassificationRegistry = 4,
  SystemProcessClassificationMaximum = 5,
} SYSTEM_PROCESS_CLASSIFICATION, *PSYSTEM_PROCESS_CLASSIFICATION;

typedef enum _SERVERSILO_STATE
{
  SERVERSILO_INITING = 0,
  SERVERSILO_STARTED = 1,
  SERVERSILO_SHUTTING_DOWN = 2,
  SERVERSILO_TERMINATING = 3,
  SERVERSILO_TERMINATED = 4,
} SERVERSILO_STATE, *PSERVERSILO_STATE;

typedef struct _ARBITER_ALLOCATION_STATE
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
  /* 0x0010 */ unsigned __int64 CurrentMinimum;
  /* 0x0018 */ unsigned __int64 CurrentMaximum;
  /* 0x0020 */ struct _ARBITER_LIST_ENTRY* Entry;
  /* 0x0028 */ struct _ARBITER_ALTERNATIVE* CurrentAlternative;
  /* 0x0030 */ unsigned long AlternativeCount;
  /* 0x0034 */ long Padding_92;
  /* 0x0038 */ struct _ARBITER_ALTERNATIVE* Alternatives;
  /* 0x0040 */ unsigned short Flags;
  /* 0x0042 */ unsigned char RangeAttributes;
  /* 0x0043 */ unsigned char RangeAvailableAttributes;
  /* 0x0044 */ long Padding_93;
  /* 0x0048 */ unsigned __int64 WorkSpace;
} ARBITER_ALLOCATION_STATE, *PARBITER_ALLOCATION_STATE; /* size: 0x0050 */

enum EmptyCVariant_FeatureStaging_StorageAndFilesystems
{
  CVariant_FeatureStaging_StorageAndFilesystems_Empty = 0,
};

typedef union _KSR_CAPABILITIES
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PerennialDatabase : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long SkipSubAllocator : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long ExtendedNotifications : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Kseg0Vtl1Mappings64KBAligned : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long Vtl1IsolatedDatabase : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long Reserved : 27; /* bit position: 5 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULong;
  }; /* size: 0x0004 */
} KSR_CAPABILITIES, *PKSR_CAPABILITIES; /* size: 0x0004 */

typedef struct _VIRTUAL_EFI_RUNTIME_SERVICES
{
  /* 0x0000 */ unsigned __int64 GetTime;
  /* 0x0008 */ unsigned __int64 SetTime;
  /* 0x0010 */ unsigned __int64 GetWakeupTime;
  /* 0x0018 */ unsigned __int64 SetWakeupTime;
  /* 0x0020 */ unsigned __int64 SetVirtualAddressMap;
  /* 0x0028 */ unsigned __int64 ConvertPointer;
  /* 0x0030 */ unsigned __int64 GetVariable;
  /* 0x0038 */ unsigned __int64 GetNextVariableName;
  /* 0x0040 */ unsigned __int64 SetVariable;
  /* 0x0048 */ unsigned __int64 GetNextHighMonotonicCount;
  /* 0x0050 */ unsigned __int64 ResetSystem;
  /* 0x0058 */ unsigned __int64 UpdateCapsule;
  /* 0x0060 */ unsigned __int64 QueryCapsuleCapabilities;
  /* 0x0068 */ unsigned __int64 QueryVariableInfo;
} VIRTUAL_EFI_RUNTIME_SERVICES, *PVIRTUAL_EFI_RUNTIME_SERVICES; /* size: 0x0070 */

struct DEBUG_MEMORY_REQUIREMENTS
{
  /* 0x0000 */ union _LARGE_INTEGER Start;
  /* 0x0008 */ union _LARGE_INTEGER MaxEnd;
  /* 0x0010 */ void* VirtualAddress;
  /* 0x0018 */ unsigned long Length;
  /* 0x001c */ unsigned char Cached;
  /* 0x001d */ unsigned char Aligned;
  /* 0x001e */ char __PADDING__[2];
}; /* size: 0x0020 */

typedef union _KSR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long MpwrResume : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULong;
  }; /* size: 0x0004 */
} KSR_FLAGS, *PKSR_FLAGS; /* size: 0x0004 */

typedef struct _KSR_FIRMWARE_INFORMATION
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ union _KSR_CAPABILITIES DownlevelCapabilities;
  /* 0x0008 */ struct _UNICODE_STRING EfiVersionString;
  /* 0x0018 */ struct _VIRTUAL_EFI_RUNTIME_SERVICES EfiRuntimeServices;
  /* 0x0088 */ void* EfiMemoryMap;
  /* 0x0090 */ unsigned long EfiMemoryMapSize;
  /* 0x0094 */ unsigned long EfiMemoryMapDescriptorSize;
  /* 0x0098 */ struct _MEMORY_CACHING_REQUIREMENTS* CachingRequirements;
  /* 0x00a0 */ unsigned long CachingRequirementsCount;
  /* 0x00a4 */ long Padding_94;
  /* 0x00a8 */ void* Smbios;
  /* 0x00b0 */ struct _INBV_DISPLAY_CONTEXT* DisplayContext;
  /* 0x00b8 */ void* SecureBootPolicy;
  /* 0x00c0 */ unsigned long SecureBootPolicySize;
  /* 0x00c4 */ long Padding_95;
  /* 0x00c8 */ struct DEBUG_MEMORY_REQUIREMENTS DebugDeviceMemory;
  /* 0x00e8 */ unsigned long SoftRestartCount;
  /* 0x00ec */ long Padding_96;
  /* 0x00f0 */ void* CodeIntegrityPolicy;
  /* 0x00f8 */ unsigned long CodeIntegrityPolicySize;
  /* 0x00fc */ long Padding_97;
  /* 0x0100 */ void* EfiMemoryAttributes;
  /* 0x0108 */ void* Esrt;
  /* 0x0110 */ unsigned long EsrtSize;
  /* 0x0114 */ long Padding_98;
  /* 0x0118 */ void* CodeIntegrityPolicyHash;
  /* 0x0120 */ unsigned long CodeIntegrityPolicyHashSize;
  /* 0x0124 */ long Padding_99;
  /* 0x0128 */ void* CodeIntegrityPolicyOriginalHash;
  /* 0x0130 */ unsigned long CodeIntegrityPolicyOriginalHashSize;
  /* 0x0134 */ long Padding_100;
  /* 0x0138 */ struct _PHYSICAL_MEMORY_RANGE* BadPageRanges;
  /* 0x0140 */ unsigned long BadPageRangeCount;
  /* 0x0144 */ union _KSR_CAPABILITIES Capabilities;
  /* 0x0148 */ union _KSR_FLAGS Flags;
  /* 0x014c */ long __PADDING__[1];
} KSR_FIRMWARE_INFORMATION, *PKSR_FIRMWARE_INFORMATION; /* size: 0x0150 */

typedef enum _KI_CALLBACK
{
  KiCallbackNmi = 0,
  KiCallbackBound = 1,
  KiCallbackSx = 2,
  KiCallbackCount = 3,
  KiFirstCallback = 0,
} KI_CALLBACK, *PKI_CALLBACK;

typedef union _EXT_IOMMU_CREATE_DEVICE_FLAGS
{
  union
  {
    /* 0x0000 */ unsigned int AsUINT32;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int WildCard : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned int ForceCreate : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned int LiveTraffic : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned int DeviceIsReserved : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned int Reserved : 28; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} EXT_IOMMU_CREATE_DEVICE_FLAGS, *PEXT_IOMMU_CREATE_DEVICE_FLAGS; /* size: 0x0004 */

typedef struct _MI_AVAILABLE_PAGE_WAIT_STATES
{
  /* 0x0000 */ struct _KEVENT Event;
  /* 0x0018 */ unsigned long EventSets;
  /* 0x001c */ long __PADDING__[1];
} MI_AVAILABLE_PAGE_WAIT_STATES, *PMI_AVAILABLE_PAGE_WAIT_STATES; /* size: 0x0020 */

enum EmptyCVariant_FeatureStaging_kernelcachemanager
{
  CVariant_FeatureStaging_kernelcachemanager_Empty = 0,
};

typedef enum _WORKER_FUNCTION
{
  NoopFunction = 0,
  ReadAhead = 1,
  WriteBehind = 2,
  LazyWriteScan = 3,
  EventSet = 4,
  AsyncRead = 5,
  CompleteAsyncRead = 6,
  AsyncWriteBehind = 7,
  CompleteAsyncWriteBehind = 8,
} WORKER_FUNCTION, *PWORKER_FUNCTION;

typedef enum _EXQUEUEINDEX
{
  ExPoolUntrusted = 0,
  IoPoolUntrusted = 1,
  ExPoolMax = 8,
} EXQUEUEINDEX, *PEXQUEUEINDEX;

typedef enum _CC_NUMA_TYPE
{
  InvalidNumaNodeType = 0,
  PartitionNumaNode = 1,
  VolumeNumaNode = 2,
  MaxNumaNodeType = 3,
} CC_NUMA_TYPE, *PCC_NUMA_TYPE;

typedef struct _DIRTY_PAGE_STATISTICS
{
  /* 0x0000 */ unsigned __int64 DirtyPages;
  /* 0x0008 */ unsigned __int64 DirtyPagesLastScan;
  /* 0x0010 */ unsigned long DirtyPagesScheduledLastScan;
  /* 0x0014 */ long __PADDING__[1];
} DIRTY_PAGE_STATISTICS, *PDIRTY_PAGE_STATISTICS; /* size: 0x0018 */

typedef struct _DIRTY_PAGE_THRESHOLDS
{
  /* 0x0000 */ unsigned __int64 DirtyPageThreshold;
  /* 0x0008 */ unsigned __int64 DirtyPageThresholdTop;
  /* 0x0010 */ unsigned __int64 DirtyPageThresholdBottom;
  /* 0x0018 */ unsigned long DirtyPageTarget;
  /* 0x001c */ long Padding_101;
  /* 0x0020 */ unsigned __int64 AggregateAvailablePages;
  /* 0x0028 */ unsigned __int64 AggregateDirtyPages;
  /* 0x0030 */ unsigned long AvailableHistory;
  /* 0x0034 */ long __PADDING__[1];
} DIRTY_PAGE_THRESHOLDS, *PDIRTY_PAGE_THRESHOLDS; /* size: 0x0038 */

typedef struct _LOG_HANDLE_CONTEXT
{
  /* 0x0000 */ void* LogHandle;
  /* 0x0008 */ void* FlushToLsnRoutine /* function */;
  /* 0x0010 */ void* QueryLogHandleInfoRoutine /* function */;
  /* 0x0018 */ struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  /* 0x0030 */ struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;
  /* 0x0068 */ unsigned long AdditionalPagesToWrite;
  /* 0x006c */ unsigned long CcLWScanDPThreshold;
  /* 0x0070 */ union _LARGE_INTEGER LargestLsnForCurrentLWScan;
  /* 0x0078 */ struct _FILE_OBJECT* RelatedFileObject;
  /* 0x0080 */ unsigned __int64 LargestLsnFileObjectKey;
  /* 0x0088 */ union _LARGE_INTEGER LastLWTimeStamp;
  /* 0x0090 */ unsigned long Flags;
  /* 0x0094 */ long __PADDING__[1];
} LOG_HANDLE_CONTEXT, *PLOG_HANDLE_CONTEXT; /* size: 0x0098 */

typedef enum _RTLP_HP_MEMORY_TYPE
{
  HeapMemoryPaged = 0,
  HeapMemoryNonPaged = 1,
  HeapMemory64KPage = 2,
  HeapMemoryLargePage = 3,
  HeapMemoryHugePage = 4,
  HeapMemoryTypeCustom = 5,
  HeapMemoryTypeMax = 6,
} RTLP_HP_MEMORY_TYPE, *PRTLP_HP_MEMORY_TYPE;

typedef enum _MI_ASSIGNED_REGION_TYPES
{
  AssignedRegionPfnDatabase = 0,
  AssignedRegionNonPagedPool = 1,
  AssignedRegionPagedPool = 2,
  AssignedRegionSystemCache = 3,
  AssignedRegionSystemPtes = 4,
  AssignedRegionKasan = 5,
  AssignedRegionUltraZero = 6,
  AssignedRegionCfg = 7,
  AssignedRegionHyperSpace = 8,
  AssignedRegionKernelStacks = 9,
  AssignedRegionNonCachedMappings = 10,
  AssignedRegionSoftWsles = 11,
  AssignedRegionPageTables = 12,
  AssignedRegionNotUsed = 13,
  AssignedRegionSecureNonPagedPool = 14,
  AssignedRegionKernelShadowStacks = 15,
  AssignedRegionSystemDataViews = 16,
  AssignedRegionSystemImages = 17,
  AssignedRegionMaximum = 18,
} MI_ASSIGNED_REGION_TYPES, *PMI_ASSIGNED_REGION_TYPES;

typedef struct _MI_DBG_PATCH
{
  union
  {
    /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
  } /* size: 0x0008 */ u1;
  union
  {
    union
    {
      /* 0x0008 */ unsigned long EntireField;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0008 */ unsigned long Pending : 1; /* bit position: 0 */
          /* 0x0008 */ unsigned long Reserved : 1; /* bit position: 1 */
          /* 0x0008 */ unsigned long Offset : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ e2;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
  /* 0x000c */ unsigned long OriginalBytes;
  /* 0x0010 */ unsigned long NewBytes;
  /* 0x0014 */ unsigned long Padding;
} MI_DBG_PATCH, *PMI_DBG_PATCH; /* size: 0x0018 */

typedef struct _MI_DEBUGGER_STATE
{
  /* 0x0000 */ unsigned char TransientWrite;
  /* 0x0001 */ char Padding_102[7];
  /* 0x0008 */ struct _MMPTE* DebugPtes[2];
  /* 0x0018 */ unsigned long PoisonedTb;
  /* 0x001c */ volatile long InDebugger;
  /* 0x0020 */ void* volatile Pfns[32];
  /* 0x0120 */ struct _MI_DBG_PATCH PatchBuffer[256];
  /* 0x1920 */ unsigned long PatchBufferInsertIndex;
  /* 0x1924 */ unsigned long PatchBufferRemoveIndex;
  /* 0x1928 */ struct _MI_DBG_PATCH PatchTableSpace[512];
  /* 0x4928 */ struct _MI_DBG_PATCH* PatchTable[512];
  /* 0x5928 */ volatile long PatchTableLock;
  /* 0x592c */ unsigned long PatchTableFreeEntry;
  /* 0x5930 */ unsigned long PatchTableEntryCount;
  /* 0x5934 */ long __PADDING__[1];
} MI_DEBUGGER_STATE, *PMI_DEBUGGER_STATE; /* size: 0x5938 */

typedef enum _PROCESSOR_PRESENCE
{
  ProcessorPresenceNt = 0,
  ProcessorPresenceHv = 1,
  ProcessorPresenceHidden = 2,
} PROCESSOR_PRESENCE, *PPROCESSOR_PRESENCE;

typedef struct _PROC_PERF_QOS_CLASS_POLICY
{
  /* 0x0000 */ unsigned long MaxPolicyPercent;
  /* 0x0004 */ unsigned long MaxEquivalentFrequencyPercent;
  /* 0x0008 */ unsigned long MinPolicyPercent;
  /* 0x000c */ unsigned long AutonomousActivityWindow;
  /* 0x0010 */ unsigned long EnergyPerfPreference;
  /* 0x0014 */ unsigned char ProvideGuidance;
  /* 0x0015 */ unsigned char AllowThrottling;
  /* 0x0016 */ unsigned char PerfBoostMode;
  /* 0x0017 */ unsigned char LatencyHintPerf;
  /* 0x0018 */ unsigned char LatencyHintEpp;
  /* 0x0019 */ unsigned char TrackDesiredCrossClass;
  /* 0x001a */ char Padding_103[2];
  /* 0x001c */ unsigned long ResourcePriority;
} PROC_PERF_QOS_CLASS_POLICY, *PPROC_PERF_QOS_CLASS_POLICY; /* size: 0x0020 */

typedef struct _PROC_PERF_DOMAIN
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _PROC_PERF_CHECK_CONTEXT* Master;
  /* 0x0018 */ struct _KAFFINITY_EX Members;
  /* 0x0120 */ unsigned __int64 DomainContext;
  /* 0x0128 */ unsigned long ProcessorCount;
  /* 0x012c */ unsigned char EfficiencyClass;
  /* 0x012d */ unsigned char NominalPerformanceClass;
  /* 0x012e */ unsigned char PerformanceClass;
  /* 0x012f */ char Padding_104;
  /* 0x0130 */ enum _PROCESSOR_PRESENCE Presence;
  /* 0x0134 */ long Padding_105;
  /* 0x0138 */ struct _PROC_PERF_CONSTRAINT* Processors;
  /* 0x0140 */ void* GetFFHThrottleState /* function */;
  /* 0x0148 */ void* TimeWindowHandler /* function */;
  /* 0x0150 */ void* BoostPolicyHandler /* function */;
  /* 0x0158 */ void* BoostModeHandler /* function */;
  /* 0x0160 */ void* AutonomousActivityWindowHandler /* function */;
  /* 0x0168 */ void* AutonomousModeHandler /* function */;
  /* 0x0170 */ void* ReinitializeHandler /* function */;
  /* 0x0178 */ void* PerfSelectionHandler /* function */;
  /* 0x0180 */ void* PerfPriorityHandler /* function */;
  /* 0x0188 */ void* PerfControlHandler /* function */;
  /* 0x0190 */ void* PerfControlHandlerHidden /* function */;
  /* 0x0198 */ void* DomainPerfControlHandler /* function */;
  /* 0x01a0 */ void* PerfUpdateHwDebugData /* function */;
  /* 0x01a8 */ void* PerfQueryProcMeasurementCapabilities /* function */;
  /* 0x01b0 */ void* PerfQueryProcMeasurementValues /* function */;
  /* 0x01b8 */ unsigned long Id;
  /* 0x01bc */ unsigned long MaxFrequency;
  /* 0x01c0 */ unsigned long NominalFrequency;
  /* 0x01c4 */ unsigned long MaxPercent;
  /* 0x01c8 */ unsigned long MinPerfPercent;
  /* 0x01cc */ unsigned long MinThrottlePercent;
  /* 0x01d0 */ unsigned long AdvertizedMaximumFrequency;
  /* 0x01d4 */ long Padding_106;
  /* 0x01d8 */ unsigned __int64 MinimumRelativePerformance;
  /* 0x01e0 */ unsigned __int64 NominalRelativePerformance;
  /* 0x01e8 */ unsigned char NominalRelativePerformancePercent;
  /* 0x01e9 */ unsigned char Coordination;
  /* 0x01ea */ unsigned char HardPlatformCap;
  /* 0x01eb */ unsigned char AffinitizeControl;
  /* 0x01ec */ unsigned char EfficientThrottle;
  /* 0x01ed */ unsigned char AllowSchedulerDirectedPerfStates;
  /* 0x01ee */ unsigned char InitiateAllProcessors;
  /* 0x01ef */ unsigned char AllowVmPerfSelection;
  /* 0x01f0 */ unsigned char TurboRangeKnown;
  /* 0x01f1 */ char Padding_107[3];
  /* 0x01f4 */ unsigned long VmFrequencyStepMhz;
  /* 0x01f8 */ unsigned long VmHighestFrequencyMhz;
  /* 0x01fc */ unsigned long VmNominalFrequencyMhz;
  /* 0x0200 */ unsigned long VmLowestFrequencyMhz;
  /* 0x0204 */ unsigned long VmThrottlePriorityCount;
  /* 0x0208 */ unsigned char AutonomousMode;
  /* 0x0209 */ unsigned char AutonomousCapability;
  /* 0x020a */ unsigned char ProvideGuidance;
  /* 0x020b */ unsigned char EppSupported;
  /* 0x020c */ unsigned long DesiredPercent;
  /* 0x0210 */ unsigned long GuaranteedPercent;
  /* 0x0214 */ unsigned char EngageResponsivenessOverrides;
  /* 0x0215 */ char Padding_108[3];
  /* 0x0218 */ struct _PROC_PERF_QOS_CLASS_POLICY QosPolicies[7];
  /* 0x02f8 */ unsigned long QosDisableReasons[7];
  /* 0x0314 */ unsigned short QosEquivalencyMasks[7];
  /* 0x0322 */ unsigned char QosSupported;
  /* 0x0323 */ char Padding_109;
  /* 0x0324 */ volatile unsigned long SelectionGeneration;
  /* 0x0328 */ struct _PERF_CONTROL_STATE_SELECTION QosSelection[7];
  /* 0x04b0 */ unsigned __int64 PerfChangeTime;
  /* 0x04b8 */ unsigned long PerfChangeIntervalCount;
  /* 0x04bc */ unsigned char Force;
  /* 0x04bd */ unsigned char Update;
  /* 0x04be */ unsigned char Apply;
  /* 0x04bf */ char __PADDING__[1];
} PROC_PERF_DOMAIN, *PPROC_PERF_DOMAIN; /* size: 0x04c0 */

enum RTLP_CSPARSE_BITMAP_STATE
{
  CommitBitmapInvalid = 0,
  UserBitmapInvalid = 1,
  UserBitmapValid = 2,
};

typedef enum _RTLP_HP_ADDRESS_SPACE_TYPE
{
  HeapAddressUser = 0,
  HeapAddressKernel = 1,
  HeapAddressSession = 2,
  HeapAddressSecure = 3,
  HeapAddressTypeMax = 4,
} RTLP_HP_ADDRESS_SPACE_TYPE, *PRTLP_HP_ADDRESS_SPACE_TYPE;

typedef struct _OBP_SYSTEM_DOS_DEVICE_STATE
{
  /* 0x0000 */ unsigned long GlobalDeviceMap;
  /* 0x0004 */ unsigned long LocalDeviceCount[26];
} OBP_SYSTEM_DOS_DEVICE_STATE, *POBP_SYSTEM_DOS_DEVICE_STATE; /* size: 0x006c */

typedef struct _OBJECT_NAMESPACE_LOOKUPTABLE
{
  /* 0x0000 */ struct _LIST_ENTRY HashBuckets[37];
  /* 0x0250 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0258 */ unsigned long NumberOfPrivateSpaces;
  /* 0x025c */ long __PADDING__[1];
} OBJECT_NAMESPACE_LOOKUPTABLE, *POBJECT_NAMESPACE_LOOKUPTABLE; /* size: 0x0260 */

typedef struct _OBP_SILODRIVERSTATE
{
  /* 0x0000 */ struct _EX_FAST_REF SystemDeviceMap;
  /* 0x0008 */ struct _OBP_SYSTEM_DOS_DEVICE_STATE SystemDosDeviceState;
  /* 0x0074 */ long Padding_110;
  /* 0x0078 */ struct _EX_PUSH_LOCK DeviceMapLock;
  /* 0x0080 */ struct _OBJECT_NAMESPACE_LOOKUPTABLE PrivateNamespaceLookupTable;
} OBP_SILODRIVERSTATE, *POBP_SILODRIVERSTATE; /* size: 0x02e0 */

typedef enum _INTERRUPT_STEERING_MODE
{
  IntSteerModeNone = 0,
  IntSteerModeController = 1,
  IntSteerModeRedirect = 2,
  IntSteerModeControllerFixed = 3,
} INTERRUPT_STEERING_MODE, *PINTERRUPT_STEERING_MODE;

typedef enum _RTLP_HP_LOCK_TYPE
{
  HeapLockPaged = 0,
  HeapLockNonPaged = 1,
  HeapLockTypeMax = 2,
} RTLP_HP_LOCK_TYPE, *PRTLP_HP_LOCK_TYPE;

typedef enum _HEAP_LFH_LOCKMODE
{
  HeapLockNotHeld = 0,
  HeapLockShared = 1,
  HeapLockExclusive = 2,
} HEAP_LFH_LOCKMODE, *PHEAP_LFH_LOCKMODE;

typedef enum _PO_CS_DEVICE_NOTIFICATION_TYPE
{
  PoCsDeviceNotificationStorage = 0,
  PoCsDeviceNotificationWiFi = 1,
  PoCsDeviceNotificationMbn = 2,
  PoCsDeviceNotificationAudio = 3,
  PoCsDeviceNotificationEthernet = 4,
  PoCsDeviceNotificationMaximum = 5,
} PO_CS_DEVICE_NOTIFICATION_TYPE, *PPO_CS_DEVICE_NOTIFICATION_TYPE;

typedef enum _HEAP_SEG_RANGE_TYPE
{
  HeapSegRangeUser = 0,
  HeapSegRangeInternal = 1,
  HeapSegRangeLFH = 2,
  HeapSegRangeVS = 3,
  HeapSegRangeTypeMax = 3,
} HEAP_SEG_RANGE_TYPE, *PHEAP_SEG_RANGE_TYPE;

typedef enum _RTLP_HP_ALLOCATOR
{
  RtlpHpSegmentSm = 0,
  RtlpHpSegmentLg = 1,
  RtlpHpSegmentTypes = 2,
  RtlpHpHugeAllocator = 2,
  RtlpHpAllocatorMax = 3,
} RTLP_HP_ALLOCATOR, *PRTLP_HP_ALLOCATOR;

typedef enum _MM_PAGE_ACCESS_TYPE
{
  MmPteAccessType = 0,
  MmCcReadAheadType = 1,
  MmPfnRepurposeType = 2,
  MmMaximumPageAccessType = 3,
} MM_PAGE_ACCESS_TYPE, *PMM_PAGE_ACCESS_TYPE;

typedef enum _EXP_POOL_CONTEXT_TYPE
{
  ExpPoolContextInvalid = 0,
  ExpPoolContextPrivate = 1,
  ExpPoolContextSecure = 2,
} EXP_POOL_CONTEXT_TYPE, *PEXP_POOL_CONTEXT_TYPE;

typedef enum _HEAP_FAILURE_TYPE
{
  heap_failure_internal = 0,
  heap_failure_unknown = 1,
  heap_failure_generic = 2,
  heap_failure_entry_corruption = 3,
  heap_failure_multiple_entries_corruption = 4,
  heap_failure_virtual_block_corruption = 5,
  heap_failure_buffer_overrun = 6,
  heap_failure_buffer_underrun = 7,
  heap_failure_block_not_busy = 8,
  heap_failure_invalid_argument = 9,
  heap_failure_invalid_allocation_type = 10,
  heap_failure_usage_after_free = 11,
  heap_failure_cross_heap_operation = 12,
  heap_failure_freelists_corruption = 13,
  heap_failure_listentry_corruption = 14,
  heap_failure_lfh_bitmap_mismatch = 15,
  heap_failure_segment_lfh_bitmap_corruption = 16,
  heap_failure_segment_lfh_double_free = 17,
  heap_failure_vs_subsegment_corruption = 18,
  heap_failure_null_heap = 19,
  heap_failure_allocation_limit = 20,
  heap_failure_commit_limit = 21,
  heap_failure_invalid_va_mgr_query = 22,
  heap_failure_segment_lfh_delay_free_corruption = 23,
} HEAP_FAILURE_TYPE, *PHEAP_FAILURE_TYPE;

typedef enum _KPROCESS_STATE
{
  ProcessInMemory = 0,
  ProcessOutOfMemory = 1,
  ProcessInTransition = 2,
  ProcessOutTransition = 3,
  ProcessInSwap = 4,
  ProcessOutSwap = 5,
  ProcessRetryOutSwap = 6,
  ProcessAllSwapStates = 7,
} KPROCESS_STATE, *PKPROCESS_STATE;

typedef enum _BLOB_ID
{
  BLOB_TYPE_UNKNOWN = 0,
  BLOB_TYPE_CONNECTION_INFO = 1,
  BLOB_TYPE_MESSAGE = 2,
  BLOB_TYPE_SECURITY_CONTEXT = 3,
  BLOB_TYPE_SECTION = 4,
  BLOB_TYPE_REGION = 5,
  BLOB_TYPE_VIEW = 6,
  BLOB_TYPE_RESERVE = 7,
  BLOB_TYPE_DIRECT_TRANSFER = 8,
  BLOB_TYPE_HANDLE_DATA = 9,
  BLOB_TYPE_MAX_ID = 10,
} BLOB_ID, *PBLOB_ID;

typedef enum _KWAIT_REASON
{
  Executive = 0,
  FreePage = 1,
  PageIn = 2,
  PoolAllocation = 3,
  DelayExecution = 4,
  Suspended = 5,
  UserRequest = 6,
  WrExecutive = 7,
  WrFreePage = 8,
  WrPageIn = 9,
  WrPoolAllocation = 10,
  WrDelayExecution = 11,
  WrSuspended = 12,
  WrUserRequest = 13,
  WrSpare0 = 14,
  WrQueue = 15,
  WrLpcReceive = 16,
  WrLpcReply = 17,
  WrVirtualMemory = 18,
  WrPageOut = 19,
  WrRendezvous = 20,
  WrKeyedEvent = 21,
  WrTerminated = 22,
  WrProcessInSwap = 23,
  WrCpuRateControl = 24,
  WrCalloutStack = 25,
  WrKernel = 26,
  WrResource = 27,
  WrPushLock = 28,
  WrMutex = 29,
  WrQuantumEnd = 30,
  WrDispatchInt = 31,
  WrPreempted = 32,
  WrYieldExecution = 33,
  WrFastMutex = 34,
  WrGuardedMutex = 35,
  WrRundown = 36,
  WrAlertByThreadId = 37,
  WrDeferredPreempt = 38,
  WrPhysicalFault = 39,
  WrIoRing = 40,
  WrMdlCache = 41,
  WrRcu = 42,
  MaximumWaitReason = 43,
} KWAIT_REASON, *PKWAIT_REASON;

typedef enum _POP_POWER_AGGREGATOR_DOZE_TIMER_TYPE
{
  PowerAggregatorDozeTimerTypeRestrictedStandby = 0,
  PowerAggregatorDozeTimerTypeRestrictedStandbyExit = 1,
  PowerAggregatorDozeTimerTypeMax = 2,
} POP_POWER_AGGREGATOR_DOZE_TIMER_TYPE, *PPOP_POWER_AGGREGATOR_DOZE_TIMER_TYPE;

enum EmptyCVariant_FeatureStaging_IoManager
{
  CVariant_FeatureStaging_IoManager_Empty = 0,
};

typedef enum _IOP_DISPATCH_FUNCTION_TYPE
{
  IOP_DISPATCH_FUNCTION_TYPE_NORMAL = 0,
  IOP_DISPATCH_FUNCTION_TYPE_VERIFY = 1,
  IOP_DISPATCH_FUNCTION_TYPE_EXTEND = 2,
  IOP_DISPATCH_FUNCTION_TYPE_PERF = 3,
} IOP_DISPATCH_FUNCTION_TYPE, *PIOP_DISPATCH_FUNCTION_TYPE;

typedef struct _INBV_OFFSET
{
  /* 0x0000 */ unsigned long X;
  /* 0x0004 */ unsigned long Y;
} INBV_OFFSET, *PINBV_OFFSET; /* size: 0x0008 */

typedef enum _INVPCID_TYPE
{
  InvpcidIndividualAddress = 0,
  InvpcidSingleContext = 1,
  InvpcidAllContextAndGlobals = 2,
  InvpcidAllContext = 3,
} INVPCID_TYPE, *PINVPCID_TYPE;

typedef enum _LOCK_OPERATION
{
  IoReadAccess = 0,
  IoWriteAccess = 1,
  IoModifyAccess = 2,
} LOCK_OPERATION, *PLOCK_OPERATION;

typedef enum _KISOLATION_WIDTH
{
  KiIsolationWidthLogicalProcessor = 0,
  KiIsolationWidthCore = 1,
  KiIsolationWidthMax = 2,
} KISOLATION_WIDTH, *PKISOLATION_WIDTH;

typedef struct _CMSI_PROCESS_TUPLE
{
  /* 0x0000 */ void* ProcessHandle;
  /* 0x0008 */ void* ProcessReference;
  /* 0x0010 */ struct _CMSI_RW_LOCK WorkingSetLock;
  /* 0x0018 */ unsigned __int64 LockedPageCharges;
  /* 0x0020 */ unsigned __int64 WorkingSetMinimum;
  /* 0x0028 */ unsigned __int64 WorkingSetMaximum;
} CMSI_PROCESS_TUPLE, *PCMSI_PROCESS_TUPLE; /* size: 0x0030 */

typedef enum _IOP_PRIORITY_HINT
{
  IopIoPriorityNotSet = 0,
  IopIoPriorityVeryLow = 1,
  IopIoPriorityLow = 2,
  IopIoPriorityNormal = 3,
  IopIoPriorityHigh = 4,
  IopIoPriorityCritical = 5,
  MaxIopIoPriorityTypes = 6,
} IOP_PRIORITY_HINT, *PIOP_PRIORITY_HINT;

typedef enum _TRANSFER_TYPE
{
  ReadTransfer = 0,
  WriteTransfer = 1,
  OtherTransfer = 2,
} TRANSFER_TYPE, *PTRANSFER_TYPE;

typedef enum _PPM_PARK_NODE_CONTAINMENT_GROUP_TYPE
{
  ContainmentGroupTypeEfficieny = 0,
  ContainmentGroupTypeHybrid = 1,
  ContainmentGroupTypeNone = 2,
  ContainmentGroupTypeMax = 3,
} PPM_PARK_NODE_CONTAINMENT_GROUP_TYPE, *PPPM_PARK_NODE_CONTAINMENT_GROUP_TYPE;

typedef enum _CREATE_FILE_TYPE
{
  CreateFileTypeNone = 0,
  CreateFileTypeNamedPipe = 1,
  CreateFileTypeMailslot = 2,
} CREATE_FILE_TYPE, *PCREATE_FILE_TYPE;

typedef struct _MI_BEST_LARGE_PAGE_CANDIDATES_CONTEXT
{
  /* 0x0000 */ unsigned long BestCandidateCountMax;
  /* 0x0004 */ unsigned long BestCandidateCount;
  /* 0x0008 */ unsigned long BestCandidatesTried;
  /* 0x000c */ unsigned long CandidateUsed;
  /* 0x0010 */ unsigned __int64 NextLargePage;
  /* 0x0018 */ unsigned __int64 BestCandidatesBasePage[8];
} MI_BEST_LARGE_PAGE_CANDIDATES_CONTEXT, *PMI_BEST_LARGE_PAGE_CANDIDATES_CONTEXT; /* size: 0x0058 */

typedef enum _ETW_RT_EVENT_LOSS
{
  EtwRtEventNoLoss = 0,
  EtwRtEventLost = 1,
  EtwRtBufferLost = 2,
  EtwRtBackupLost = 3,
  EtwRtEventLossMax = 4,
} ETW_RT_EVENT_LOSS, *PETW_RT_EVENT_LOSS;

typedef struct _SEP_CACHED_HANDLES_TABLE
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0008 */ struct _RTL_DYNAMIC_HASH_TABLE* HashTable;
} SEP_CACHED_HANDLES_TABLE, *PSEP_CACHED_HANDLES_TABLE; /* size: 0x0010 */

typedef enum _KENLISTMENT_STATE
{
  KEnlistmentUninitialized = 0,
  KEnlistmentActive = 256,
  KEnlistmentPreparing = 257,
  KEnlistmentPrepared = 258,
  KEnlistmentInDoubt = 259,
  KEnlistmentCommitted = 260,
  KEnlistmentCommittedNotify = 261,
  KEnlistmentCommitRequested = 262,
  KEnlistmentAborted = 263,
  KEnlistmentDelegated = 264,
  KEnlistmentDelegatedDisconnected = 265,
  KEnlistmentPrePreparing = 266,
  KEnlistmentForgotten = 267,
  KEnlistmentRecovering = 268,
  KEnlistmentAborting = 269,
  KEnlistmentReadOnly = 270,
  KEnlistmentOutcomeUnavailable = 271,
  KEnlistmentOffline = 272,
  KEnlistmentPrePrepared = 273,
  KEnlistmentInitialized = 274,
} KENLISTMENT_STATE, *PKENLISTMENT_STATE;

typedef struct _PPM_ENGINE_SETTINGS
{
  /* 0x0000 */ union _PPM_POLICY_SETTINGS_MASK ExplicitSetting[2];
  /* 0x0020 */ unsigned char ThrottlingPolicy;
  /* 0x0021 */ char Padding_111[3];
  /* 0x0024 */ unsigned long PerfTimeCheck;
  /* 0x0028 */ unsigned char PerfHistoryCount[2];
  /* 0x002a */ unsigned char PerfMinPolicy[2];
  /* 0x002c */ unsigned char PerfMaxPolicy[2];
  /* 0x002e */ unsigned char PerfDecreaseTime[2];
  /* 0x0030 */ unsigned char PerfIncreaseTime[2];
  /* 0x0032 */ unsigned char PerfDecreasePolicy[2];
  /* 0x0034 */ unsigned char PerfIncreasePolicy[2];
  /* 0x0036 */ unsigned char PerfDecreaseThreshold[2];
  /* 0x0038 */ unsigned char PerfIncreaseThreshold[2];
  /* 0x003a */ char Padding_112[2];
  /* 0x003c */ unsigned long PerfFrequencyCap[2];
  /* 0x0044 */ unsigned long PerfBoostPolicy;
  /* 0x0048 */ unsigned long PerfBoostMode;
  /* 0x004c */ unsigned long PerfReductionTolerance;
  /* 0x0050 */ unsigned long EnergyPerfPreference[2];
  /* 0x0058 */ unsigned long AutonomousActivityWindow;
  /* 0x005c */ unsigned char AutonomousPreference;
  /* 0x005d */ unsigned char LatencyHintPerf[2];
  /* 0x005f */ unsigned char LatencyHintEpp[2];
  /* 0x0061 */ unsigned char LatencyHintUnpark[2];
  /* 0x0063 */ char Padding_113;
  /* 0x0064 */ unsigned long ResponsivenessDisableThreshold[2];
  /* 0x006c */ unsigned long ResponsivenessEnableThreshold[2];
  /* 0x0074 */ unsigned char ResponsivenessDisableTime[2];
  /* 0x0076 */ unsigned char ResponsivenessEnableTime[2];
  /* 0x0078 */ unsigned long ResponsivenessEppCeiling[2];
  /* 0x0080 */ unsigned long ResponsivenessPerfFloor[2];
  /* 0x0088 */ unsigned char DutyCycling;
  /* 0x0089 */ unsigned char ParkingPerfState[2];
  /* 0x008b */ unsigned char DistributeUtility;
  /* 0x008c */ unsigned char CoreParkingOverUtilizationThreshold;
  /* 0x008d */ unsigned char CoreParkingConcurrencyThreshold;
  /* 0x008e */ unsigned char CoreParkingHeadroomThreshold;
  /* 0x008f */ unsigned char CoreParkingDistributionThreshold;
  /* 0x0090 */ unsigned char CoreParkingDecreasePolicy;
  /* 0x0091 */ unsigned char CoreParkingIncreasePolicy;
  /* 0x0092 */ char Padding_114[2];
  /* 0x0094 */ unsigned long CoreParkingDecreaseTime;
  /* 0x0098 */ unsigned long CoreParkingIncreaseTime;
  /* 0x009c */ unsigned char CoreParkingMinCores[2];
  /* 0x009e */ unsigned char CoreParkingMaxCores[2];
  /* 0x00a0 */ unsigned long SoftParkLatency;
  /* 0x00a4 */ unsigned char AllowScaling;
  /* 0x00a5 */ unsigned char IdleDisabled;
  /* 0x00a6 */ char Padding_115[2];
  /* 0x00a8 */ unsigned long IdleTimeCheck;
  /* 0x00ac */ unsigned char IdleDemotePercent;
  /* 0x00ad */ unsigned char IdlePromotePercent;
  /* 0x00ae */ unsigned char IdleStateMax;
  /* 0x00af */ unsigned char ResourcePriority[2];
  /* 0x00b1 */ unsigned char HeteroDecreaseTime;
  /* 0x00b2 */ unsigned char HeteroIncreaseTime;
  /* 0x00b3 */ unsigned char HeteroDecreaseThreshold[64][2];
  /* 0x0133 */ unsigned char HeteroIncreaseThreshold[64][2];
  /* 0x01b3 */ unsigned char Class0FloorPerformance;
  /* 0x01b4 */ unsigned char Class1InitialPerformance;
  /* 0x01b5 */ char Padding_116[3];
  /* 0x01b8 */ unsigned long ShortThreadRuntimeThreshold;
  /* 0x01bc */ enum _KHETERO_CPU_POLICY ThreadPolicies[2];
  /* 0x01c4 */ unsigned char ArchClassLowerThreshold[2];
  /* 0x01c6 */ unsigned char ArchClassUpperThreshold[2];
  /* 0x01c8 */ unsigned char ModuleUnparkPolicy;
  /* 0x01c9 */ unsigned char ComplexUnparkPolicy;
  /* 0x01ca */ unsigned char SmtUnparkPolicy;
  /* 0x01cb */ char Padding_117;
  /* 0x01cc */ enum _PPM_HETERO_POLICY HeteroPolicy;
  /* 0x01d0 */ unsigned long HeteroContainmentDecreaseTime;
  /* 0x01d4 */ unsigned long HeteroContainmentIncreaseTime;
  /* 0x01d8 */ unsigned long HeteroEfficiencyContainmentThreshold;
  /* 0x01dc */ unsigned long HeteroHybridContainmentThreshold;
  /* 0x01e0 */ unsigned long HeteroContainmentPolicy;
  /* 0x01e4 */ unsigned char RestrictionCount;
  /* 0x01e5 */ char __PADDING__[3];
} PPM_ENGINE_SETTINGS, *PPPM_ENGINE_SETTINGS; /* size: 0x01e8 */

typedef struct _ECP_LIST
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _LIST_ENTRY EcpList;
} ECP_LIST, *PECP_LIST; /* size: 0x0018 */

enum ETW_COMPRESSION_RESUMPTION_MODE
{
  EtwCompressionModeRestart = 0,
  EtwCompressionModeNoDisable = 1,
  EtwCompressionModeNoRestart = 2,
};

typedef enum _ETW_BUFFER_STATE
{
  EtwBufferStateFree = 0,
  EtwBufferStateGeneralLogging = 1,
  EtwBufferStateCSwitch = 2,
  EtwBufferStateFlush = 3,
  EtwBufferStatePendingCompression = 4,
  EtwBufferStateCompressed = 5,
  EtwBufferStatePlaceholder = 6,
  EtwBufferStateMaximum = 7,
} ETW_BUFFER_STATE, *PETW_BUFFER_STATE;

enum IORING_VERSION
{
  IORING_VERSION_INVALID = 0,
  IORING_VERSION_1 = 1,
  IORING_VERSION_2 = 2,
  IORING_VERSION_3 = 300,
  IORING_VERSION_4 = 400,
};

typedef struct _DMA_ADAPTER
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ long Padding_118;
  /* 0x0008 */ struct _DMA_OPERATIONS* DmaOperations;
} DMA_ADAPTER, *PDMA_ADAPTER; /* size: 0x0010 */

typedef struct _HALP_DMA_TRANSLATION_BUFFER_POSITION
{
  /* 0x0000 */ struct _HALP_DMA_TRANSLATION_BUFFER* Buffer;
  /* 0x0008 */ unsigned long Offset;
  /* 0x000c */ long __PADDING__[1];
} HALP_DMA_TRANSLATION_BUFFER_POSITION, *PHALP_DMA_TRANSLATION_BUFFER_POSITION; /* size: 0x0010 */

typedef struct _HALP_DMA_ADAPTER_OBJECT
{
  /* 0x0000 */ struct _DMA_ADAPTER DmaHeader;
  /* 0x0010 */ unsigned long Signature;
  /* 0x0014 */ long Padding_119;
  /* 0x0018 */ struct _RTL_BITMAP* ContiguousMapRegisters;
  /* 0x0020 */ struct _HALP_DMA_TRANSLATION_ENTRY* ScatterBufferListHead;
  /* 0x0028 */ unsigned long NumberOfFreeScatterBuffers;
  /* 0x002c */ long Padding_120;
  /* 0x0030 */ struct _HALP_DMA_TRANSLATION_BUFFER* ContiguousTranslations;
  /* 0x0038 */ struct _HALP_DMA_TRANSLATION_BUFFER* ScatterTranslations;
  /* 0x0040 */ struct _HALP_DMA_TRANSLATION_BUFFER_POSITION ContiguousTranslationEnd;
  /* 0x0050 */ struct _HALP_DMA_TRANSLATION_BUFFER_POSITION ScatterTranslationEnd;
  struct
  {
    /* 0x0060 */ struct _HALP_DMA_TRANSLATION_BUFFER_POSITION ContiguousHint;
    /* 0x0070 */ struct _HALP_DMA_TRANSLATION_BUFFER_POSITION ScatterHint;
  } /* size: 0x0020 */ CrashDump;
  /* 0x0080 */ unsigned __int64 SpinLock;
  /* 0x0088 */ unsigned __int64 GrowLock;
  /* 0x0090 */ union _LARGE_INTEGER MaximumPhysicalAddress;
  /* 0x0098 */ unsigned char IsMasterAdapter;
  /* 0x0099 */ unsigned char DmaCanCross64K;
  /* 0x009a */ char Padding_121[2];
  /* 0x009c */ unsigned long LibraryVersion;
} HALP_DMA_ADAPTER_OBJECT, *PHALP_DMA_ADAPTER_OBJECT; /* size: 0x00a0 */

typedef struct _HALP_DMA_MASTER_ADAPTER_OBJECT
{
  /* 0x0000 */ struct _HALP_DMA_ADAPTER_OBJECT AdapterObject;
  /* 0x00a0 */ struct _LIST_ENTRY ContiguousAdapterQueue;
  /* 0x00b0 */ struct _LIST_ENTRY ScatterAdapterQueue;
  /* 0x00c0 */ unsigned long MapBufferSize;
  /* 0x00c4 */ long Padding_122;
  /* 0x00c8 */ union _LARGE_INTEGER MapBufferPhysicalAddress;
  /* 0x00d0 */ unsigned long ContiguousPageCount;
  /* 0x00d4 */ unsigned long ContiguousPageLimit;
  /* 0x00d8 */ unsigned long ScatterPageCount;
  /* 0x00dc */ unsigned long ScatterPageLimit;
} HALP_DMA_MASTER_ADAPTER_OBJECT, *PHALP_DMA_MASTER_ADAPTER_OBJECT; /* size: 0x00e0 */

typedef enum _KPROFILE_SOURCE
{
  ProfileTime = 0,
  ProfileAlignmentFixup = 1,
  ProfileTotalIssues = 2,
  ProfilePipelineDry = 3,
  ProfileLoadInstructions = 4,
  ProfilePipelineFrozen = 5,
  ProfileBranchInstructions = 6,
  ProfileTotalNonissues = 7,
  ProfileDcacheMisses = 8,
  ProfileIcacheMisses = 9,
  ProfileCacheMisses = 10,
  ProfileBranchMispredictions = 11,
  ProfileStoreInstructions = 12,
  ProfileFpInstructions = 13,
  ProfileIntegerInstructions = 14,
  Profile2Issue = 15,
  Profile3Issue = 16,
  Profile4Issue = 17,
  ProfileSpecialInstructions = 18,
  ProfileTotalCycles = 19,
  ProfileIcacheIssues = 20,
  ProfileDcacheAccesses = 21,
  ProfileMemoryBarrierCycles = 22,
  ProfileLoadLinkedIssues = 23,
  ProfileMaximum = 24,
} KPROFILE_SOURCE, *PKPROFILE_SOURCE;

typedef enum _TOKEN_TYPE
{
  TokenPrimary = 1,
  TokenImpersonation = 2,
} TOKEN_TYPE, *PTOKEN_TYPE;

typedef enum _WNF_STATE_NAME_LIFETIME
{
  WnfWellKnownStateName = 0,
  WnfPermanentStateName = 1,
  WnfPersistentStateName = 2,
  WnfTemporaryStateName = 3,
} WNF_STATE_NAME_LIFETIME, *PWNF_STATE_NAME_LIFETIME;

struct _CHPEV2_PROCESS_INFO;

typedef struct _MMVAD_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Lock : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long LockContended : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long DeleteInProgress : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long NoChange : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long VadType : 3; /* bit position: 4 */
      /* 0x0000 */ unsigned long Protection : 5; /* bit position: 7 */
      /* 0x0000 */ unsigned long PreferredNode : 7; /* bit position: 12 */
      /* 0x0000 */ unsigned long PageSize : 2; /* bit position: 19 */
      /* 0x0000 */ unsigned long PrivateMemory : 1; /* bit position: 21 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long EntireField;
  }; /* size: 0x0004 */
} MMVAD_FLAGS, *PMMVAD_FLAGS; /* size: 0x0004 */

typedef struct _MM_PRIVATE_VAD_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Lock : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long LockContended : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long DeleteInProgress : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long NoChange : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long VadType : 3; /* bit position: 4 */
    /* 0x0000 */ unsigned long Protection : 5; /* bit position: 7 */
    /* 0x0000 */ unsigned long PreferredNode : 7; /* bit position: 12 */
    /* 0x0000 */ unsigned long PageSize : 2; /* bit position: 19 */
    /* 0x0000 */ unsigned long PrivateMemoryAlwaysSet : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long WriteWatch : 1; /* bit position: 22 */
    /* 0x0000 */ unsigned long FixedLargePageSize : 1; /* bit position: 23 */
    /* 0x0000 */ unsigned long ZeroFillPagesOptional : 1; /* bit position: 24 */
    /* 0x0000 */ unsigned long MemCommit : 1; /* bit position: 25 */
    /* 0x0000 */ unsigned long Graphics : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned long Enclave : 1; /* bit position: 27 */
    /* 0x0000 */ unsigned long ShadowStack : 1; /* bit position: 28 */
    /* 0x0000 */ unsigned long PhysicalMemoryPfnsReferenced : 1; /* bit position: 29 */
  }; /* bitfield */
} MM_PRIVATE_VAD_FLAGS, *PMM_PRIVATE_VAD_FLAGS; /* size: 0x0004 */

typedef struct _MM_GRAPHICS_VAD_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Lock : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long LockContended : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long DeleteInProgress : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long NoChange : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long VadType : 3; /* bit position: 4 */
    /* 0x0000 */ unsigned long Protection : 5; /* bit position: 7 */
    /* 0x0000 */ unsigned long PreferredNode : 7; /* bit position: 12 */
    /* 0x0000 */ unsigned long PageSize : 2; /* bit position: 19 */
    /* 0x0000 */ unsigned long PrivateMemoryAlwaysSet : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long WriteWatch : 1; /* bit position: 22 */
    /* 0x0000 */ unsigned long FixedLargePageSize : 1; /* bit position: 23 */
    /* 0x0000 */ unsigned long ZeroFillPagesOptional : 1; /* bit position: 24 */
    /* 0x0000 */ unsigned long MemCommit : 1; /* bit position: 25 */
    /* 0x0000 */ unsigned long GraphicsAlwaysSet : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned long GraphicsUseCoherentBus : 1; /* bit position: 27 */
    /* 0x0000 */ unsigned long GraphicsNoCache : 1; /* bit position: 28 */
    /* 0x0000 */ unsigned long GraphicsPageProtection : 3; /* bit position: 29 */
  }; /* bitfield */
} MM_GRAPHICS_VAD_FLAGS, *PMM_GRAPHICS_VAD_FLAGS; /* size: 0x0004 */

typedef struct _MM_SHARED_VAD_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Lock : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long LockContended : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long DeleteInProgress : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long NoChange : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long VadType : 3; /* bit position: 4 */
    /* 0x0000 */ unsigned long Protection : 5; /* bit position: 7 */
    /* 0x0000 */ unsigned long PreferredNode : 7; /* bit position: 12 */
    /* 0x0000 */ unsigned long PageSize : 2; /* bit position: 19 */
    /* 0x0000 */ unsigned long PrivateMemoryAlwaysClear : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long PrivateFixup : 1; /* bit position: 22 */
    /* 0x0000 */ unsigned long HotPatchState : 2; /* bit position: 23 */
  }; /* bitfield */
} MM_SHARED_VAD_FLAGS, *PMM_SHARED_VAD_FLAGS; /* size: 0x0004 */

typedef struct _MI_NODE_NUMBER_ZERO_BASED
{
  /* 0x0000 */ unsigned long ZeroBased;
} MI_NODE_NUMBER_ZERO_BASED, *PMI_NODE_NUMBER_ZERO_BASED; /* size: 0x0004 */

typedef struct _MI_SLAB_ALLOCATOR_CONTEXT
{
  /* 0x0000 */ struct _RTL_RB_TREE SlabTree;
  /* 0x0010 */ volatile long Lock;
  /* 0x0014 */ long Padding_123;
  /* 0x0018 */ struct _MI_PARTITION* Partition;
  struct
  {
    union
    {
      struct
      {
        /* 0x0020 */ struct _MI_SLAB_ALLOCATOR_ENTRY* AllocationHint;
        /* 0x0028 */ struct _MI_SLAB_ALLOCATOR_ENTRY* FreeHint;
      } /* size: 0x0010 */ NonIdentity;
      struct
      {
        /* 0x0020 */ struct _MI_SLAB_ALLOCATOR_ENTRY** AllocationHints;
        /* 0x0028 */ struct _MI_SLAB_ALLOCATOR_ENTRY** FreeHints;
      } /* size: 0x0010 */ Identity;
    }; /* size: 0x0010 */
    /* 0x0030 */ struct _MI_SLAB_ALLOCATOR_ENTRY* DefragSourceEntry;
    /* 0x0038 */ struct _MI_SLAB_ALLOCATOR_ENTRY* DefragTargetEntry;
  } /* size: 0x0020 */ Hints;
  /* 0x0040 */ void* StandbyPageCache;
  /* 0x0048 */ void* StandbyPageList;
  /* 0x0050 */ struct _MMPFNLIST* RepurposedStandbyPageList;
  /* 0x0058 */ struct _LIST_ENTRY* SlabListsByIdentity;
  /* 0x0060 */ unsigned __int64 FreePageCount;
  /* 0x0068 */ unsigned __int64 AvailablePagesGoal;
  /* 0x0070 */ unsigned __int64 ChargedPageCount;
  /* 0x0078 */ unsigned __int64 SlabEntryCount;
  /* 0x0080 */ enum _MI_SLAB_ALLOCATOR_TYPE Type;
  /* 0x0084 */ struct _MI_NODE_NUMBER_ZERO_BASED NumaNodeIndex;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0088 */ unsigned long EntryBecameEmpty : 1; /* bit position: 0 */
        /* 0x0088 */ unsigned long DemoteInProgress : 1; /* bit position: 1 */
        /* 0x0088 */ unsigned long PreferZeroedPages : 1; /* bit position: 2 */
        /* 0x0088 */ unsigned long ZeroOnFree : 1; /* bit position: 3 */
        /* 0x0088 */ unsigned long LargePageIndex : 2; /* bit position: 4 */
        /* 0x0088 */ unsigned long Spare : 26; /* bit position: 6 */
      }; /* bitfield */
      /* 0x0088 */ unsigned long AllFlags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Flags;
  /* 0x008c */ volatile long ReEvaluateAllocationHint;
  /* 0x0090 */ unsigned long SlabEntriesAllocated;
  /* 0x0094 */ unsigned long SlabEntriesDemoted;
  /* 0x0098 */ unsigned long SlabEntriesFailedFast;
  /* 0x009c */ unsigned long SlabEntriesFailedSlow;
  /* 0x00a0 */ unsigned long SlabPagesFreedNonZeroed;
  /* 0x00a4 */ unsigned long SlabPagesCrossIdentity;
  /* 0x00a8 */ unsigned __int64 LastReplenishTime;
  /* 0x00b0 */ unsigned __int64 LastFailureTime;
  /* 0x00b8 */ struct _WORK_QUEUE_ITEM ReplenishWorkItem;
  /* 0x00d8 */ struct _LIST_ENTRY ReplenishWaitList;
} MI_SLAB_ALLOCATOR_CONTEXT, *PMI_SLAB_ALLOCATOR_CONTEXT; /* size: 0x00e8 */

typedef struct _LUID
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long HighPart;
} LUID, *PLUID; /* size: 0x0008 */

typedef struct _TOKEN_MANDATORY_POLICY
{
  /* 0x0000 */ unsigned long Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY; /* size: 0x0004 */

typedef struct _TOKEN_ACCESS_INFORMATION
{
  /* 0x0000 */ struct _SID_AND_ATTRIBUTES_HASH* SidHash;
  /* 0x0008 */ struct _SID_AND_ATTRIBUTES_HASH* RestrictedSidHash;
  /* 0x0010 */ struct _TOKEN_PRIVILEGES* Privileges;
  /* 0x0018 */ struct _LUID AuthenticationId;
  /* 0x0020 */ enum _TOKEN_TYPE TokenType;
  /* 0x0024 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0028 */ struct _TOKEN_MANDATORY_POLICY MandatoryPolicy;
  /* 0x002c */ unsigned long Flags;
  /* 0x0030 */ unsigned long AppContainerNumber;
  /* 0x0034 */ long Padding_124;
  /* 0x0038 */ void* PackageSid;
  /* 0x0040 */ struct _SID_AND_ATTRIBUTES_HASH* CapabilitiesHash;
  /* 0x0048 */ void* TrustLevelSid;
  /* 0x0050 */ void* SecurityAttributes;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION; /* size: 0x0058 */

typedef enum _WNF_SUBSCRIPTION_STATE
{
  WNF_SUB_STATE_QUIESCENT = 0,
  WNF_SUB_STATE_READY_TO_DELIVER = 1,
  WNF_SUB_STATE_IN_DELIVERY = 2,
  WNF_SUB_STATE_RETRY = 3,
} WNF_SUBSCRIPTION_STATE, *PWNF_SUBSCRIPTION_STATE;

typedef enum _KCLOCK_TIMER_DEADLINE_TYPE
{
  KClockTimerKTimerExpirationNonHr = 0,
  KClockTimerKTimerExpirationPseudoHr = 1,
  KClockTimerKTimer2ExpirationHr = 2,
  KClockTimerKTimersMax = 2,
  KClockTimerQuantumEnd = 3,
  KClockTimerGroupSchedulingGenerationEnd = 4,
  KClockTimerIdlePromotion = 5,
  KClockTimerBamQosHysteresisEnd = 6,
  KClockTimerMax = 7,
} KCLOCK_TIMER_DEADLINE_TYPE, *PKCLOCK_TIMER_DEADLINE_TYPE;

typedef struct _PEBS_DS_SAVE_AREA32
{
  /* 0x0000 */ unsigned long BtsBufferBase;
  /* 0x0004 */ unsigned long BtsIndex;
  /* 0x0008 */ unsigned long BtsAbsoluteMaximum;
  /* 0x000c */ unsigned long BtsInterruptThreshold;
  /* 0x0010 */ unsigned long PebsBufferBase;
  /* 0x0014 */ unsigned long PebsIndex;
  /* 0x0018 */ unsigned long PebsAbsoluteMaximum;
  /* 0x001c */ unsigned long PebsInterruptThreshold;
  /* 0x0020 */ unsigned __int64 PebsGpCounterReset[8];
  /* 0x0060 */ unsigned __int64 PebsFixedCounterReset[4];
} PEBS_DS_SAVE_AREA32, *PPEBS_DS_SAVE_AREA32; /* size: 0x0080 */

typedef struct _PEBS_DS_SAVE_AREA64
{
  /* 0x0000 */ unsigned __int64 BtsBufferBase;
  /* 0x0008 */ unsigned __int64 BtsIndex;
  /* 0x0010 */ unsigned __int64 BtsAbsoluteMaximum;
  /* 0x0018 */ unsigned __int64 BtsInterruptThreshold;
  /* 0x0020 */ unsigned __int64 PebsBufferBase;
  /* 0x0028 */ unsigned __int64 PebsIndex;
  /* 0x0030 */ unsigned __int64 PebsAbsoluteMaximum;
  /* 0x0038 */ unsigned __int64 PebsInterruptThreshold;
  /* 0x0040 */ unsigned __int64 PebsGpCounterReset[8];
  /* 0x0080 */ unsigned __int64 PebsFixedCounterReset[4];
} PEBS_DS_SAVE_AREA64, *PPEBS_DS_SAVE_AREA64; /* size: 0x00a0 */

typedef struct _PEBS_DS_SAVE_AREA
{
  union
  {
    /* 0x0000 */ struct _PEBS_DS_SAVE_AREA32 As32Bit;
    /* 0x0000 */ struct _PEBS_DS_SAVE_AREA64 As64Bit;
  }; /* size: 0x00a0 */
} PEBS_DS_SAVE_AREA, *PPEBS_DS_SAVE_AREA; /* size: 0x00a0 */

typedef struct _PROCESSOR_PROFILE_CONTROL_AREA
{
  union
  {
    /* 0x0000 */ struct _PEBS_DS_SAVE_AREA PebsDsSaveArea;
    struct
    {
      /* 0x0000 */ void* RawBuffer;
      /* 0x0008 */ long __PADDING__[38];
    }; /* size: 0x00a0 */
  }; /* size: 0x00a0 */
} PROCESSOR_PROFILE_CONTROL_AREA, *PPROCESSOR_PROFILE_CONTROL_AREA; /* size: 0x00a0 */

typedef enum _MI_IO_PFN_TYPE
{
  MiIoPfnProbes = 0,
  MiIoPfnMaps = 1,
  MiMaximumIoPfnType = 2,
} MI_IO_PFN_TYPE, *PMI_IO_PFN_TYPE;

typedef union _XPF_MC_BANK_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char ClearOnInitializationRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char ControlDataRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char Reserved : 6; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AsUCHAR;
  }; /* size: 0x0001 */
} XPF_MC_BANK_FLAGS, *PXPF_MC_BANK_FLAGS; /* size: 0x0001 */

typedef enum _IO_RATE_CONTROL_TYPE
{
  IoRateControlTypeCapMin = 0,
  IoRateControlTypeIopsCap = 0,
  IoRateControlTypeBandwidthCap = 1,
  IoRateControlTypeTimePercentCap = 2,
  IoRateControlTypeCapMax = 2,
  IoRateControlTypeReservationMin = 3,
  IoRateControlTypeIopsReservation = 3,
  IoRateControlTypeBandwidthReservation = 4,
  IoRateControlTypeTimePercentReservation = 5,
  IoRateControlTypeReservationMax = 5,
  IoRateControlTypeCriticalReservationMin = 6,
  IoRateControlTypeIopsCriticalReservation = 6,
  IoRateControlTypeBandwidthCriticalReservation = 7,
  IoRateControlTypeTimePercentCriticalReservation = 8,
  IoRateControlTypeCriticalReservationMax = 8,
  IoRateControlTypeSoftCapMin = 9,
  IoRateControlTypeIopsSoftCap = 9,
  IoRateControlTypeBandwidthSoftCap = 10,
  IoRateControlTypeTimePercentSoftCap = 11,
  IoRateControlTypeSoftCapMax = 11,
  IoRateControlTypeLimitExcessNotifyMin = 12,
  IoRateControlTypeIopsLimitExcessNotify = 12,
  IoRateControlTypeBandwidthLimitExcessNotify = 13,
  IoRateControlTypeTimePercentLimitExcessNotify = 14,
  IoRateControlTypeLimitExcessNotifyMax = 14,
  IoRateControlTypeMax = 15,
} IO_RATE_CONTROL_TYPE, *PIO_RATE_CONTROL_TYPE;

typedef struct _DBGKD_LOAD_SYMBOLS64
{
  /* 0x0000 */ unsigned long PathNameLength;
  /* 0x0004 */ long Padding_125;
  /* 0x0008 */ unsigned __int64 BaseOfDll;
  /* 0x0010 */ unsigned __int64 ProcessId;
  /* 0x0018 */ unsigned long CheckSum;
  /* 0x001c */ unsigned long SizeOfImage;
  /* 0x0020 */ unsigned char UnloadSymbols;
  /* 0x0021 */ char __PADDING__[7];
} DBGKD_LOAD_SYMBOLS64, *PDBGKD_LOAD_SYMBOLS64; /* size: 0x0028 */

typedef enum _JOBOBJECTINFOCLASS
{
  JobObjectBasicAccountingInformation = 1,
  JobObjectBasicLimitInformation = 2,
  JobObjectBasicProcessIdList = 3,
  JobObjectBasicUIRestrictions = 4,
  JobObjectSecurityLimitInformation = 5,
  JobObjectEndOfJobTimeInformation = 6,
  JobObjectAssociateCompletionPortInformation = 7,
  JobObjectBasicAndIoAccountingInformation = 8,
  JobObjectExtendedLimitInformation = 9,
  JobObjectJobSetInformation = 10,
  JobObjectGroupInformation = 11,
  JobObjectNotificationLimitInformation = 12,
  JobObjectLimitViolationInformation = 13,
  JobObjectGroupInformationEx = 14,
  JobObjectCpuRateControlInformation = 15,
  JobObjectCompletionFilter = 16,
  JobObjectCompletionCounter = 17,
  JobObjectFreezeInformation = 18,
  JobObjectExtendedAccountingInformation = 19,
  JobObjectWakeInformation = 20,
  JobObjectBackgroundInformation = 21,
  JobObjectSchedulingRankBiasInformation = 22,
  JobObjectTimerVirtualizationInformation = 23,
  JobObjectCycleTimeNotification = 24,
  JobObjectClearEvent = 25,
  JobObjectInterferenceInformation = 26,
  JobObjectClearPeakJobMemoryUsed = 27,
  JobObjectMemoryUsageInformation = 28,
  JobObjectSharedCommit = 29,
  JobObjectContainerId = 30,
  JobObjectIoRateControlInformation = 31,
  JobObjectSiloRootDirectory = 37,
  JobObjectServerSiloBasicInformation = 38,
  JobObjectServerSiloUserSharedData = 39,
  JobObjectServerSiloInitialize = 40,
  JobObjectServerSiloRunningState = 41,
  JobObjectIoAttribution = 42,
  JobObjectMemoryPartitionInformation = 43,
  JobObjectContainerTelemetryId = 44,
  JobObjectSiloSystemRoot = 45,
  JobObjectEnergyTrackingState = 46,
  JobObjectThreadImpersonationInformation = 47,
  JobObjectIoPriorityLimit = 48,
  JobObjectPagePriorityLimit = 49,
  JobObjectServerSiloDiagnosticInformation = 50,
  JobObjectReserved1Information = 18,
  JobObjectReserved2Information = 19,
  JobObjectReserved3Information = 20,
  JobObjectReserved4Information = 21,
  JobObjectReserved5Information = 22,
  JobObjectReserved6Information = 23,
  JobObjectReserved7Information = 24,
  JobObjectReserved8Information = 25,
  JobObjectReserved9Information = 26,
  JobObjectReserved10Information = 27,
  JobObjectReserved11Information = 28,
  JobObjectReserved12Information = 29,
  JobObjectReserved13Information = 30,
  JobObjectReserved14Information = 31,
  JobObjectNetRateControlInformation = 32,
  JobObjectNotificationLimitInformation2 = 33,
  JobObjectLimitViolationInformation2 = 34,
  JobObjectCreateSilo = 35,
  JobObjectSiloBasicInformation = 36,
  JobObjectReserved15Information = 37,
  JobObjectReserved16Information = 38,
  JobObjectReserved17Information = 39,
  JobObjectReserved18Information = 40,
  JobObjectReserved19Information = 41,
  JobObjectReserved20Information = 42,
  JobObjectReserved21Information = 43,
  JobObjectReserved22Information = 44,
  JobObjectReserved23Information = 45,
  JobObjectReserved24Information = 46,
  JobObjectReserved25Information = 47,
  JobObjectReserved26Information = 48,
  JobObjectReserved27Information = 49,
  JobObjectReserved28Information = 50,
  JobObjectNetworkAccountingInformation = 51,
  MaxJobObjectInfoClass = 52,
} JOBOBJECTINFOCLASS, *PJOBOBJECTINFOCLASS;

typedef enum _OBJECT_INFORMATION_CLASS
{
  ObjectBasicInformation = 0,
  ObjectNameInformation = 1,
  ObjectTypeInformation = 2,
  ObjectTypesInformation = 3,
  ObjectHandleFlagInformation = 4,
  ObjectSessionInformation = 5,
  ObjectSessionObjectInformation = 6,
  MaxObjectInfoClass = 7,
} OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;

typedef enum _KE_WAKE_SOURCE_TYPE
{
  KeWakeSourceTypeSpuriousWake = 0,
  KeWakeSourceTypeSpuriousClock = 1,
  KeWakeSourceTypeSpuriousInterrupt = 2,
  KeWakeSourceTypeQueryFailure = 3,
  KeWakeSourceTypeAccountingFailure = 4,
  KeWakeSourceTypeNonIrTimer = 5,
  KeWakeSourceTypeDebugPoll = 6,
  KeWakeSourceTypeClockWatchdog = 7,
  KeWakeSourceTypeClockInternal = 8,
  KeWakeSourceTypeClockNotOwner = 9,
  KeWakeSourceTypeClockNotArmed = 10,
  KeWakeSourceTypeExTimer = 11,
  KeWakeSourceTypeStaticSourceMax = 11,
  KeWakeSourceTypeInterrupt = 128,
  KeWakeSourceTypeIRTimer = 129,
  KeWakeSourceTypeMax = 130,
} KE_WAKE_SOURCE_TYPE, *PKE_WAKE_SOURCE_TYPE;

typedef struct _CACHE_MANAGER_CALLBACK_FUNCTIONS
{
  /* 0x0000 */ void* AcquireForLazyWriteEx /* function */;
  /* 0x0008 */ void* ReleaseFromLazyWrite /* function */;
  /* 0x0010 */ void* AcquireForReadAhead /* function */;
  /* 0x0018 */ void* ReleaseFromReadAhead /* function */;
} CACHE_MANAGER_CALLBACK_FUNCTIONS, *PCACHE_MANAGER_CALLBACK_FUNCTIONS; /* size: 0x0020 */

enum PPM_IDLE_BUCKET_TIME_TYPE
{
  PpmIdleBucketTimeInQpc = 0,
  PpmIdleBucketTimeIn100ns = 1,
  PpmIdleBucketTimeMaximum = 2,
};

typedef enum _PROCESS_SECTION_TYPE
{
  ProcessSectionData = 0,
  ProcessSectionImage = 1,
  ProcessSectionImageNx = 2,
  ProcessSectionPagefileBacked = 3,
  ProcessSectionMax = 4,
} PROCESS_SECTION_TYPE, *PPROCESS_SECTION_TYPE;

typedef struct _WHEA_IPF_MCA_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
} WHEA_IPF_MCA_DESCRIPTOR, *PWHEA_IPF_MCA_DESCRIPTOR; /* size: 0x0004 */

typedef enum _POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON
{
  DirectedDripsProblemDeviceReasonSpecialDevice = 0,
  DirectedDripsProblemDeviceReasonNoDfx = 1,
  DirectedDripsProblemDeviceReasonNoPs4 = 2,
  DirectedDripsProblemDeviceReasonNoPs4Root = 3,
  DirectedDripsProblemDeviceReasonComponentContraint = 4,
  DirectedDripsProblemDeviceReasonDfxFailure = 5,
  DirectedDripsProblemDeviceReasonPagingDevice = 6,
  DirectedDripsProblemDeviceReasonDebuggingDevice = 7,
  DirectedDripsProblemDeviceReasonDfxNotAllowed = 8,
  DirectedDripsProblemDeviceReasonDfxOptOut = 9,
  DirectedDripsProblemDeviceReasonMax = 10,
} POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON, *PPOP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON;

enum FEATURE_CHANGE_TIME
{
  FEATURE_CHANGE_TIME_READ = 0,
  FEATURE_CHANGE_TIME_MODULE_RELOAD = 1,
  FEATURE_CHANGE_TIME_SESSION = 2,
  FEATURE_CHANGE_TIME_REBOOT = 3,
  FEATURE_CHANGE_TIME_USER_FLAG = 128,
};

typedef enum _EX_HEAP_TYPE
{
  ExHeapTypeNonPagedMin = 0,
  ExHeapTypeNonPaged = 0,
  ExHeapTypeNonPagedMax = 1,
  ExHeapTypeNonPagedNx = 1,
  ExHeapTypePagedMin = 2,
  ExHeapTypePaged = 2,
  ExHeapTypePagedMax = 3,
  ExHeapTypeMmSt = 3,
  ExHeapTypeMax = 4,
  ExHeapTypeSpecialMax = 4,
} EX_HEAP_TYPE, *PEX_HEAP_TYPE;

typedef enum _OB_OPEN_REASON
{
  ObCreateHandle = 0,
  ObOpenHandle = 1,
  ObDuplicateHandle = 2,
  ObInheritHandle = 3,
  ObMaxOpenReason = 4,
} OB_OPEN_REASON, *POB_OPEN_REASON;

typedef enum _SECURITY_OPERATION_CODE
{
  SetSecurityDescriptor = 0,
  QuerySecurityDescriptor = 1,
  DeleteSecurityDescriptor = 2,
  AssignSecurityDescriptor = 3,
} SECURITY_OPERATION_CODE, *PSECURITY_OPERATION_CODE;

typedef enum _RTL_FEATURE_ENABLED_STATE_OPTIONS
{
  FeatureEnabledStateOptionsNone = 0,
  FeatureEnabledStateOptionsWexpConfig = 1,
} RTL_FEATURE_ENABLED_STATE_OPTIONS, *PRTL_FEATURE_ENABLED_STATE_OPTIONS;

typedef enum _POP_PEP_NOTIFY_DEVICE_DSTATE_REASON
{
  PepNotifyDeviceDStateReasonNone = 0,
  PepNotifyDeviceDStateReasonSystemTransition = 1,
  PepNotifyDeviceDStateReasonDfx = 2,
  PepNotifyDeviceDStateReasonMax = 3,
} POP_PEP_NOTIFY_DEVICE_DSTATE_REASON, *PPOP_PEP_NOTIFY_DEVICE_DSTATE_REASON;

typedef enum _POP_IRP_WATCHDOG_STATE
{
  IrpWatchdogStateDisabled = 0,
  IrpWatchdogStateEnabled = 1,
  IrpWatchdogStateCompleted = 2,
} POP_IRP_WATCHDOG_STATE, *PPOP_IRP_WATCHDOG_STATE;

typedef enum _DEVPROP_OPERATOR
{
  DEVPROP_OPERATOR_MODIFIER_NOT = 0x10000,
  DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE = 0x20000,
  DEVPROP_OPERATOR_NONE = 0,
  DEVPROP_OPERATOR_EXISTS = 1,
  DEVPROP_OPERATOR_NOT_EXISTS = 0x10001,
  DEVPROP_OPERATOR_EQUALS = 2,
  DEVPROP_OPERATOR_NOT_EQUALS = 0x10002,
  DEVPROP_OPERATOR_GREATER_THAN = 3,
  DEVPROP_OPERATOR_LESS_THAN = 4,
  DEVPROP_OPERATOR_GREATER_THAN_EQUALS = 5,
  DEVPROP_OPERATOR_LESS_THAN_EQUALS = 6,
  DEVPROP_OPERATOR_EQUALS_IGNORE_CASE = 0x20002,
  DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE = 0x30002,
  DEVPROP_OPERATOR_BITWISE_AND = 7,
  DEVPROP_OPERATOR_BITWISE_OR = 8,
  DEVPROP_OPERATOR_BEGINS_WITH = 9,
  DEVPROP_OPERATOR_ENDS_WITH = 10,
  DEVPROP_OPERATOR_CONTAINS = 11,
  DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE = 0x20009,
  DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE = 0x2000a,
  DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE = 0x2000b,
  DEVPROP_OPERATOR_LIST_CONTAINS = 4096,
  DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH = 8192,
  DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH = 12288,
  DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS = 16384,
  DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE = 0x21000,
  DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE = 0x22000,
  DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE = 0x23000,
  DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE = 0x24000,
  DEVPROP_OPERATOR_AND_OPEN = 0x100000,
  DEVPROP_OPERATOR_AND_CLOSE = 0x200000,
  DEVPROP_OPERATOR_OR_OPEN = 0x300000,
  DEVPROP_OPERATOR_OR_CLOSE = 0x400000,
  DEVPROP_OPERATOR_NOT_OPEN = 0x500000,
  DEVPROP_OPERATOR_NOT_CLOSE = 0x600000,
  DEVPROP_OPERATOR_ARRAY_CONTAINS = 0x10000000,
  DEVPROP_OPERATOR_MASK_EVAL = 4095,
  DEVPROP_OPERATOR_MASK_LIST = 0xfffff000,
  DEVPROP_OPERATOR_MASK_MODIFIER = 0xf0000,
  DEVPROP_OPERATOR_MASK_NOT_LOGICAL = -267386881,
  DEVPROP_OPERATOR_MASK_LOGICAL = 0xff00000,
  DEVPROP_OPERATOR_MASK_ARRAY = -268435456,
} DEVPROP_OPERATOR, *PDEVPROP_OPERATOR;

typedef enum _OBP_LOOKUP_DIR_ENTRY_FLAGS
{
  OBP_LOOKUP_SEARCH_SHADOW = 1,
  OBP_LOOKUP_IS_SANDBOXED = 2,
  OBP_LOOKUP_IS_NOT_SANDBOXED = 4,
  OBP_LOOKUP_SANDBOX_COMPUTED = 6,
  OBP_LOOKUP_CASE_INSENSITIVE = 64,
} OBP_LOOKUP_DIR_ENTRY_FLAGS, *POBP_LOOKUP_DIR_ENTRY_FLAGS;

typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT64
{
  /* 0x0000 */ unsigned __int64 BreakpointAddress;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long Calls;
  /* 0x0010 */ unsigned long MaxCallsPerPeriod;
  /* 0x0014 */ unsigned long MinInstructions;
  /* 0x0018 */ unsigned long MaxInstructions;
  /* 0x001c */ unsigned long TotalInstructions;
} DBGKD_GET_INTERNAL_BREAKPOINT64, *PDBGKD_GET_INTERNAL_BREAKPOINT64; /* size: 0x0020 */

typedef enum _MI_ENGINE_TYPE
{
  MiEngineAccelerator = 0,
  MiEngineFastProcessor = 1,
  MiEngineSlowProcessor = 2,
  MiEngineMaximumTypes = 3,
} MI_ENGINE_TYPE, *PMI_ENGINE_TYPE;

typedef enum _KCLOCK_TIMER_ONE_SHOT_STATE
{
  KClockTimerOneShotUnarmed = 0,
  KClockTimerOneShotArmed = 1,
  KClockTimerOneShotRearmRequired = 2,
  KClockTimerOneShotInvalid = 3,
} KCLOCK_TIMER_ONE_SHOT_STATE, *PKCLOCK_TIMER_ONE_SHOT_STATE;

typedef enum _IOP_MC_BUFFER_ENTRY_FLAGS
{
  IOP_MCBF_UNLOCK = 1,
  IOP_MCBF_SIGNAL_RUNDOWN = 2,
  IOP_MCBF_CLEANED_UP = 4,
} IOP_MC_BUFFER_ENTRY_FLAGS, *PIOP_MC_BUFFER_ENTRY_FLAGS;

typedef enum _KWAIT_BLOCK_STATE
{
  WaitBlockBypassStart = 0,
  WaitBlockBypassComplete = 1,
  WaitBlockSuspendBypassStart = 2,
  WaitBlockSuspendBypassComplete = 3,
  WaitBlockActive = 4,
  WaitBlockInactive = 5,
  WaitBlockSuspended = 6,
  WaitBlockAllStates = 7,
} KWAIT_BLOCK_STATE, *PKWAIT_BLOCK_STATE;

typedef enum _VI_DEADLOCK_RESOURCE_TYPE
{
  VfDeadlockUnknown = 0,
  VfDeadlockMutex = 1,
  VfDeadlockMutexAbandoned = 2,
  VfDeadlockFastMutex = 3,
  VfDeadlockFastMutexUnsafe = 4,
  VfDeadlockSpinLock = 5,
  VfDeadlockInStackQueuedSpinLock = 6,
  VfDeadlockUnusedSpinLock = 7,
  VfDeadlockEresource = 8,
  VfDeadlockTypeMaximum = 9,
} VI_DEADLOCK_RESOURCE_TYPE, *PVI_DEADLOCK_RESOURCE_TYPE;

typedef struct _MMINPAGE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long GetExtents : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long VmType : 4; /* bit position: 1 */
    /* 0x0000 */ unsigned long VaPrefetchReadBlock : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long CollidedFlowThrough : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long ForceCollisions : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long InPageExpanded : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned long IssuedAtLowPriority : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned long FaultFromStore : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned long PagePriority : 3; /* bit position: 11 */
    /* 0x0000 */ unsigned long ClusteredPagePriority : 3; /* bit position: 14 */
    /* 0x0000 */ unsigned long MakeClusterValid : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned long ZeroLastPage : 1; /* bit position: 18 */
    /* 0x0000 */ unsigned long UserFault : 1; /* bit position: 19 */
    /* 0x0000 */ unsigned long StandbyProtectionNeeded : 1; /* bit position: 20 */
    /* 0x0000 */ unsigned long PteChanged : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long PageFileFault : 1; /* bit position: 22 */
    /* 0x0000 */ unsigned long PageFilePageHashActive : 1; /* bit position: 23 */
    /* 0x0000 */ unsigned long CoalescedIo : 1; /* bit position: 24 */
    /* 0x0000 */ unsigned long VmLockNotNeeded : 1; /* bit position: 25 */
    /* 0x0000 */ unsigned long PartitionReferenced : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned long Spare0 : 1; /* bit position: 27 */
    /* 0x0000 */ unsigned long Spare1 : 4; /* bit position: 28 */
  }; /* bitfield */
} MMINPAGE_FLAGS, *PMMINPAGE_FLAGS; /* size: 0x0004 */

typedef enum _RTL_FEATURE_CONFIGURATION_PRIORITY
{
  FeatureConfigurationPriorityImageDefault = 0,
  FeatureConfigurationPriorityEKB = 1,
  FeatureConfigurationPrioritySafeguard = 2,
  FeatureConfigurationPriorityPersistent = 2,
  FeatureConfigurationPriorityReserved3 = 3,
  FeatureConfigurationPriorityService = 4,
  FeatureConfigurationPriorityReserved5 = 5,
  FeatureConfigurationPriorityDynamic = 6,
  FeatureConfigurationPriorityReserved7 = 7,
  FeatureConfigurationPriorityUser = 8,
  FeatureConfigurationPrioritySecurity = 9,
  FeatureConfigurationPriorityUserPolicy = 10,
  FeatureConfigurationPriorityReserved11 = 11,
  FeatureConfigurationPriorityTest = 12,
  FeatureConfigurationPriorityReserved13 = 13,
  FeatureConfigurationPriorityReserved14 = 14,
  FeatureConfigurationPriorityImageOverride = 15,
  FeatureConfigurationPriorityMax = 15,
} RTL_FEATURE_CONFIGURATION_PRIORITY, *PRTL_FEATURE_CONFIGURATION_PRIORITY;

typedef struct _PO_DEVICE_NOTIFY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _LIST_ENTRY PowerChildren;
  /* 0x0020 */ struct _LIST_ENTRY PowerParents;
  /* 0x0030 */ struct _DEVICE_OBJECT* TargetDevice;
  /* 0x0038 */ unsigned char OrderLevel;
  /* 0x0039 */ char Padding_126[7];
  /* 0x0040 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0048 */ wchar_t* DeviceName;
  /* 0x0050 */ wchar_t* DriverName;
  /* 0x0058 */ unsigned long ChildCount;
  /* 0x005c */ unsigned long ActiveChild;
  /* 0x0060 */ unsigned long ParentCount;
  /* 0x0064 */ unsigned long ActiveParent;
} PO_DEVICE_NOTIFY, *PPO_DEVICE_NOTIFY; /* size: 0x0068 */

typedef enum _MI_ALTERNATE_LOCK_VA_TYPE
{
  AlternateLockVaTypeSystemPtes = 0,
  AlternateLockVaTypeNonPagedPool = 1,
  AlternateLockVaTypeUser = 2,
  AlternateLockVaTypeSystem = 3,
  AlternateLockVaTypeMaximum = 4,
} MI_ALTERNATE_LOCK_VA_TYPE, *PMI_ALTERNATE_LOCK_VA_TYPE;

typedef enum _POP_SLEEP_CHECKPOINT
{
  PopSleepCheckpointInvalid = 0,
  PopSleepCheckpointPowerTransitionStart = 1,
  PopSleepCheckpointSuspendAppsBefore = 2,
  PopSleepCheckpointSuspendAppsAfter = 3,
  PopSleepCheckpointSuspendServicesBefore = 4,
  PopSleepCheckpointSuspendServicesAfter = 5,
  PopSleepCheckpointNotifySuperfetchBefore = 6,
  PopSleepCheckpointNotifySuperfetchAfter = 7,
  PopSleepCheckpointNotifyCallbacksBefore = 8,
  PopSleepCheckpointNotifyCallbacksAfter = 9,
  PopSleepCheckpointSleepTransactionCommitted = 10,
  PopSleepCheckpointQueryDriversBefore = 11,
  PopSleepCheckpointQueryDriversAfter = 12,
  PopSleepCheckpointAllocatingHiberContext = 13,
  PopSleepCheckpointSuspendDriversBefore = 14,
  PopSleepCheckpointPreSleepNotification = 16,
  PopSleepCheckpointInterruptsDisabledBegin = 17,
  PopSleepCheckpointInvokeHandlerBefore = 18,
  PopSleepCheckpointSaveHiberContextBegin = 19,
  PopSleepCheckpointInitializeDumpStackFailed = 20,
  PopSleepCheckpointHiberWriteFailed = 21,
  PopSleepCheckpointHiberFileTooSmall = 22,
  PopSleepCheckpointSaveHiberContextFailed = 23,
  PopSleepCheckpointSaveHiberContextEnd = 24,
  PopSleepCheckpointHiberKernelHandoff = 25,
  PopSleepCheckpointInvokeHandlerAfter = 26,
  PopSleepCheckpointReadHiberfileBefore = 27,
  PopSleepCheckpointInitializeDumpStackForReadFailed = 28,
  PopSleepCheckpointHiberReadFailed = 29,
  PopSleepCheckpointChecksumFailure = 30,
  PopSleepCheckpointDecompressionFailed = 31,
  PopSleepCheckpointReadHiberfileAfter = 32,
  PopSleepCheckpointInterruptsDisabledEnd = 33,
  PopSleepCheckpointWakeDriversAfter = 36,
  PopSleepCheckpointResumeAppsBefore = 37,
  PopSleepCheckpointResumeAppsAfter = 38,
  PopSleepCheckpointResumeServicesBefore = 39,
  PopSleepCheckpointResumeServicesAfter = 40,
  PopSleepCheckpointPowerTransitionEnd = 41,
  PopSleepCheckpointAllocatingHiberContextNoFileObject = 42,
  PopSleepCheckpointAllocatingHiberContextGetDumpStackFailed = 43,
  PopSleepCheckpointAllocatingHiberContextLoadResumeContextFailed = 44,
  PopSleepCheckpointAllocatingHiberContextBcdOpenFailed = 45,
  PopSleepCheckpointAllocatingHiberContextEstablishResumeObjectFailed = 46,
  PopSleepCheckpointAllocatingHiberContextSetPendingResumeFailed = 47,
  PopSleepCheckpointAllocatingHiberContextAllocateIoPagesPagesFailed = 48,
  PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid1 = 49,
  PopSleepCheckpointAllocatingHiberContextAllocateDumpPagesFailed = 50,
  PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid2 = 51,
  PopSleepCheckpointAllocatingHiberContextUnHibernatedMdlFailed = 52,
  PopSleepCheckpointAllocatingHiberContextSecureResourcesFailed = 53,
  PopSleepCheckpointPrepareSleepBefore = 54,
  PopSleepCheckpointPrepareSleepAfter = 55,
  PopSleepCheckpointBootstatAvailable = 56,
  PopSleepCheckpointMax = 57,
} POP_SLEEP_CHECKPOINT, *PPOP_SLEEP_CHECKPOINT;

typedef enum _CM_HIVE_CACHE_EVENT_TYPE
{
  OplockEventOnPrimary = 0,
  OplockEventOnLog1 = 1,
  OplockEventOnLog2 = 2,
  OplockBreakThreadKillEvent = 3,
  HiveCachePopulateFinished = 4,
  HiveCachePopulateExit = 5,
  OplockBreakThreadWaitEventsMax = 4,
  HiveCacheRelatedEventsMax = 6,
} CM_HIVE_CACHE_EVENT_TYPE, *PCM_HIVE_CACHE_EVENT_TYPE;

typedef struct _PROC_PERF_LOAD
{
  /* 0x0000 */ unsigned char BusyPercentage;
  /* 0x0001 */ unsigned char FrequencyPercentage;
} PROC_PERF_LOAD, *PPROC_PERF_LOAD; /* size: 0x0002 */

typedef union _WHEA_REVISION
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char MinorRevision;
      /* 0x0001 */ unsigned char MajorRevision;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} WHEA_REVISION, *PWHEA_REVISION; /* size: 0x0002 */

typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PlatformId : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Timestamp : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long PartitionId : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_HEADER_VALIDBITS, *PWHEA_ERROR_RECORD_HEADER_VALIDBITS; /* size: 0x0004 */

typedef union _WHEA_TIMESTAMP
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Seconds : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Minutes : 8; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Hours : 8; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Precise : 1; /* bit position: 24 */
      /* 0x0000 */ unsigned __int64 Reserved : 7; /* bit position: 25 */
      /* 0x0000 */ unsigned __int64 Day : 8; /* bit position: 32 */
      /* 0x0000 */ unsigned __int64 Month : 8; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Year : 8; /* bit position: 48 */
      /* 0x0000 */ unsigned __int64 Century : 8; /* bit position: 56 */
    }; /* bitfield */
    /* 0x0000 */ union _LARGE_INTEGER AsLARGE_INTEGER;
  }; /* size: 0x0008 */
} WHEA_TIMESTAMP, *PWHEA_TIMESTAMP; /* size: 0x0008 */

typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Recovered : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PreviousError : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Simulated : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long DeviceDriver : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long CriticalEvent : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long PersistPfn : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long SectionsTruncated : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long RecoveryInProgress : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long Throttle : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long Reserved : 23; /* bit position: 9 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_HEADER_FLAGS, *PWHEA_ERROR_RECORD_HEADER_FLAGS; /* size: 0x0004 */

typedef union _WHEA_PERSISTENCE_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Signature : 16; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Length : 24; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Identifier : 16; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Attributes : 2; /* bit position: 56 */
      /* 0x0000 */ unsigned __int64 DoNotLog : 1; /* bit position: 58 */
      /* 0x0000 */ unsigned __int64 Reserved : 5; /* bit position: 59 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 AsULONGLONG;
  }; /* size: 0x0008 */
} WHEA_PERSISTENCE_INFO, *PWHEA_PERSISTENCE_INFO; /* size: 0x0008 */

typedef struct _WHEA_ERROR_RECORD_HEADER
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ union _WHEA_REVISION Revision;
  /* 0x0006 */ unsigned long SignatureEnd;
  /* 0x000a */ unsigned short SectionCount;
  /* 0x000c */ enum _WHEA_ERROR_SEVERITY Severity;
  /* 0x0010 */ union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
  /* 0x0014 */ unsigned long Length;
  /* 0x0018 */ union _WHEA_TIMESTAMP Timestamp;
  /* 0x0020 */ struct _GUID PlatformId;
  /* 0x0030 */ struct _GUID PartitionId;
  /* 0x0040 */ struct _GUID CreatorId;
  /* 0x0050 */ struct _GUID NotifyType;
  /* 0x0060 */ unsigned __int64 RecordId;
  /* 0x0068 */ union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
  /* 0x006c */ union _WHEA_PERSISTENCE_INFO PersistenceInfo;
  union
  {
    struct
    {
      /* 0x0074 */ unsigned long OsBuildNumber;
      /* 0x0078 */ unsigned char Reserved2[8];
    }; /* size: 0x000c */
    /* 0x0074 */ unsigned char Reserved[12];
  }; /* size: 0x000c */
} WHEA_ERROR_RECORD_HEADER, *PWHEA_ERROR_RECORD_HEADER; /* size: 0x0080 */

enum PDC_CS_PHASE
{
  PdcNoCsPhase = 0,
  PdcConnectionPhase = 1,
  PdcShellPhase = 2,
  PdcPlmPhase = 3,
  PdcMaintenancePhase = 4,
  PdcDamPhase = 5,
  PdcLowPowerPhase = 6,
  PdcResiliencyNotificationPhase = 7,
  PdcResiliencyPhase = 8,
  PdcInvalidPhase = 9,
  PdcMaxPhase = 9,
};

typedef enum _MI_PAGELIST_LOCK_TYPES
{
  MiPageListPreviousGlobal = 0,
  MiPageListNextGlobal = 1,
  MiPageListPreviousSecondary = 2,
  MiPageListNextSecondary = 3,
  MiPageListPageMaximum = 4,
} MI_PAGELIST_LOCK_TYPES, *PMI_PAGELIST_LOCK_TYPES;

typedef enum _ARBITER_RESULT
{
  ArbiterResultUndefined = -1,
  ArbiterResultSuccess = 0,
  ArbiterResultExternalConflict = 1,
  ArbiterResultNullRequest = 2,
} ARBITER_RESULT, *PARBITER_RESULT;

enum MI_NEXT_PTE_ACTION
{
  NextPteToTrim = 0,
  NextPteToAge = 1,
  NextPteToAccessClear = 2,
  NextPteMaximum = 3,
};

typedef union _WHEA_NOTIFICATION_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short PollIntervalRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short SwitchToPollingThresholdRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short SwitchToPollingWindowRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short ErrorThresholdRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short ErrorThresholdWindowRW : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned short Reserved : 11; /* bit position: 5 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} WHEA_NOTIFICATION_FLAGS, *PWHEA_NOTIFICATION_FLAGS; /* size: 0x0002 */

typedef enum _MI_FILE_EXTENT_TYPES
{
  MiExtentCopyImage = 0,
  MiExtentCopyData = 1,
  MiExtentCopyMaximum = 2,
} MI_FILE_EXTENT_TYPES, *PMI_FILE_EXTENT_TYPES;

typedef enum _PROCESS_TERMINATE_REQUEST_REASON
{
  ProcessTerminateRequestReasonNone = 0,
  ProcessTerminateCommitFail = 1,
  ProcessTerminateWriteToExecuteMemory = 2,
  ProcessTerminateAttachedWriteToExecuteMemory = 3,
  ProcessTerminateRequestReasonMax = 4,
} PROCESS_TERMINATE_REQUEST_REASON, *PPROCESS_TERMINATE_REQUEST_REASON;

typedef struct _VF_AVL_TABLE
{
  /* 0x0000 */ struct _RTL_AVL_TABLE RtlTable;
  /* 0x0068 */ struct _VF_AVL_TREE_NODE* ReservedNode;
  /* 0x0070 */ void* NodeToFree;
  /* 0x0078 */ long Padding_127[2];
  /* 0x0080 */ volatile long Lock;
  /* 0x0084 */ long Padding_128;
  /* 0x0088 */ struct _KTHREAD* volatile ExclusiveOwnerThread;
  /* 0x0090 */ long __PADDING__[12];
} VF_AVL_TABLE, *PVF_AVL_TABLE; /* size: 0x00c0 */

typedef enum _FREQUENCY_QOS_BUCKET
{
  FrequencyQosBucketHigh = 0,
  FrequencyQosBucketLow = 1,
  FrequencyQosBucketTotal = 2,
  FrequencyQosBucketMax = 3,
} FREQUENCY_QOS_BUCKET, *PFREQUENCY_QOS_BUCKET;

typedef enum _VRF_RULE_CLASS_ID
{
  DifPluginSpecialPool = 0,
  DifPluginIrqlRuleClass = 1,
  DifPluginLowResourceSimulation = 2,
  DifPluginPoolTracking = 3,
  DifPluginIoRuleClass = 4,
  DifPluginDeadlock = 5,
  DifPluginAdvancedIo = 6,
  DifPluginDmaRuleClass = 7,
  DifPluginSecurity = 8,
  DifPluginForceIOPending = 9,
  DifPluginIrpTracking = 10,
  DifPluginMiscellaneous = 11,
  DifMoreDebugging = 12,
  VrfMDLInvariantStackRuleClass = 13,
  VrfMDLInvariantDriverRuleClass = 14,
  DifPluginPowerDelayFuzzing = 15,
  DifKsAudioRuleClass = 16,
  DifPluginDdiStandard = 17,
  DifPluginAutoFail = 18,
  DifPluginDdiStateful = 19,
  VrfRuleClassBase = 20,
  DifPluginNdisWifiRuleClass = 21,
  DifPluginDriverLogging = 22,
  DifPluginSyncDelayFuzzing = 23,
  DifVMSwitchingRuleClass = 24,
  DifPluginHvci = 25,
  DifBelow4GBAllocation = 26,
  DifProcessorBranchTraceRuleClass = 27,
  DifAdvancedMm = 28,
  DifExtendingXDVTimeLimit = 29,
  DifSystemBios = 30,
  DifHardware = 31,
  DifPluginDriverIsolation = 32,
  DifPluginWdfRuleClass = 33,
  DifPluginDdiMoreirql = 34,
  DifPluginXdvLaunch = 35,
  DifPluginFsFilterVerification = 36,
  DifPluginTest = 37,
  DifPluginInfoDisclosureIRPRule = 38,
  DifPluginLwSP = 39,
  DifPluginAvxCorruption = 40,
  DifPluginAccessModeMismatch = 41,
  DifPluginScsiPortVerification = 42,
  DifPluginStorPortVerification = 43,
  DifPluginWin32Verification = 44,
  DifPluginExResource = 45,
  DifWfpVerification = 46,
  DifPluginObjTrkDemo = 47,
  ReservedForDVRF48 = 48,
  ReservedForDVRF49 = 49,
  ReservedForDVRF50 = 50,
  ReservedForDVRF51 = 51,
  ReservedForDVRF52 = 52,
  ReservedForDVRF53 = 53,
  ReservedForDVRF54 = 54,
  ReservedForDVRF55 = 55,
  ReservedForDVRF56 = 56,
  ReservedForDVRF57 = 57,
  ReservedForDVRF58 = 58,
  ReservedForDVRF59 = 59,
  ReservedForDVRF60 = 60,
  ReservedForDVRF61 = 61,
  ReservedForDVRF62 = 62,
  ReservedForDVRF63 = 63,
  VrfRuleClassSizeMax = 64,
} VRF_RULE_CLASS_ID, *PVRF_RULE_CLASS_ID;

typedef struct _EVENT_PAYLOAD_PREDICATE
{
  /* 0x0000 */ unsigned short FieldIndex;
  /* 0x0002 */ unsigned short CompareOp;
  /* 0x0004 */ long Padding_129;
  /* 0x0008 */ unsigned __int64 Value[2];
} EVENT_PAYLOAD_PREDICATE, *PEVENT_PAYLOAD_PREDICATE; /* size: 0x0018 */

typedef enum _MI_PROCESSOR_ACTIVITY_TYPE
{
  MiProcessorActivityBackground = 0,
  MiProcessorActivityOnDemand = 1,
  MiProcessorActivityMaximum = 2,
} MI_PROCESSOR_ACTIVITY_TYPE, *PMI_PROCESSOR_ACTIVITY_TYPE;

typedef enum _MI_MEMORY_EVENT_TYPES
{
  LowPagedPoolEvent = 0,
  HighPagedPoolEvent = 1,
  LowNonPagedPoolEvent = 2,
  HighNonPagedPoolEvent = 3,
  LowAvailablePagesEvent = 4,
  HighAvailablePagesEvent = 5,
  LowCommitEvent = 6,
  HighCommitEvent = 7,
  MaximumCommitEvent = 8,
  BadMemoryDetectedEvent = 9,
  PhysicalMemoryChangeEvent = 10,
  TotalNumberOfMemoryEvents = 11,
} MI_MEMORY_EVENT_TYPES, *PMI_MEMORY_EVENT_TYPES;

enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
  JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
  JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
  JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
  JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15,
};

typedef struct _DBGKD_QUERY_SPECIAL_CALLS
{
  /* 0x0000 */ unsigned long NumberOfSpecialCalls;
} DBGKD_QUERY_SPECIAL_CALLS, *PDBGKD_QUERY_SPECIAL_CALLS; /* size: 0x0004 */

enum PROFILE_DEPARTURE_STYLE
{
  PDS_UPDATE_DEFAULT = 1,
  PDS_UPDATE_ON_REMOVE = 2,
  PDS_UPDATE_ON_INTERFACE = 3,
  PDS_UPDATE_ON_EJECT = 4,
};

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char FRUId : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char FRUText : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char Reserved : 6; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AsUCHAR;
  }; /* size: 0x0001 */
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS; /* size: 0x0001 */

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Primary : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long ContainmentWarning : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reset : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long ThresholdExceeded : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long ResourceNotAvailable : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long LatentError : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Propagated : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long FruTextByPlugin : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long Reserved : 24; /* bit position: 8 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
{
  /* 0x0000 */ unsigned long SectionOffset;
  /* 0x0004 */ unsigned long SectionLength;
  /* 0x0008 */ union _WHEA_REVISION Revision;
  /* 0x000a */ union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
  /* 0x000b */ unsigned char Reserved;
  /* 0x000c */ union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ struct _GUID SectionType;
  /* 0x0020 */ struct _GUID FRUId;
  /* 0x0030 */ enum _WHEA_ERROR_SEVERITY SectionSeverity;
  /* 0x0034 */ char FRUText[20];
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR; /* size: 0x0048 */

typedef union _MI_PAGE_MOVE_PROGRESS_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 InProgressProcessors : 16; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 SequenceNumber : 48; /* bit position: 16 */
    }; /* bitfield */
    /* 0x0000 */ __int64 EntireValue;
  }; /* size: 0x0008 */
} MI_PAGE_MOVE_PROGRESS_STATE, *PMI_PAGE_MOVE_PROGRESS_STATE; /* size: 0x0008 */

typedef enum _KOBJECTS
{
  EventNotificationObject = 0,
  EventSynchronizationObject = 1,
  MutantObject = 2,
  ProcessObject = 3,
  QueueObject = 4,
  SemaphoreObject = 5,
  ThreadObject = 6,
  GateObject = 7,
  TimerNotificationObject = 8,
  TimerSynchronizationObject = 9,
  Spare2Object = 10,
  Spare3Object = 11,
  Spare4Object = 12,
  Spare5Object = 13,
  Spare6Object = 14,
  Spare7Object = 15,
  Spare8Object = 16,
  ProfileCallbackObject = 17,
  ApcObject = 18,
  DpcObject = 19,
  DeviceQueueObject = 20,
  PriQueueObject = 21,
  InterruptObject = 22,
  ProfileObject = 23,
  Timer2NotificationObject = 24,
  Timer2SynchronizationObject = 25,
  ThreadedDpcObject = 26,
  MaximumKernelObject = 27,
} KOBJECTS, *PKOBJECTS;

typedef enum _POP_SLEEP_CHECKPOINT_STATUS
{
  PopSleepCheckpointStatusDisabled = 0,
  PopSleepCheckpointStatusEnabledDueToDirtyShutdown = 1,
  PopSleepCheckpointStatusEnabledManually = 4,
  PopSleepCheckpointStatusEnabledExperiment = 4,
  PopSleepCheckpointStatusEnabledMax = 7,
  PopSleepCheckpointStatusFailedNotEfiSystem = 8,
  PopSleepCheckpointStatusFailedInsufficientSpace = 9,
  PopSleepCheckpointStatusFailedTooSlow = 10,
  PopSleepCheckpointStatusFailedOtherError = 15,
  PopSleepCheckpointStatusMax = 15,
} POP_SLEEP_CHECKPOINT_STATUS, *PPOP_SLEEP_CHECKPOINT_STATUS;

typedef enum _PPM_RESTRICTION_STATE
{
  PpmRestrictionUninit = 0,
  PpmRestrictionInitFailed = 1,
  PpmRestrictionDisabled = 2,
  PpmRestrictionEnabled = 3,
} PPM_RESTRICTION_STATE, *PPPM_RESTRICTION_STATE;

typedef enum _CM_DIRTY_VECTOR_OPERATION
{
  DirtyVectorModified = 0,
  DirtyDataCaptureStart = 1,
  DirtyDataCaptureEnd = 2,
} CM_DIRTY_VECTOR_OPERATION, *PCM_DIRTY_VECTOR_OPERATION;

typedef struct _CM_DIRTY_VECTOR_LOG_ENTRY
{
  /* 0x0000 */ struct _ETHREAD* Thread;
  /* 0x0008 */ enum _CM_DIRTY_VECTOR_OPERATION Operation;
  union
  {
    union
    {
      struct
      {
        /* 0x000c */ unsigned long Start;
        /* 0x0010 */ unsigned long Length;
      } /* size: 0x0008 */ DirtyVectorModifiedContext;
      struct
      {
        /* 0x000c */ unsigned long RangeCount;
        /* 0x0010 */ unsigned long SetBitCount;
      } /* size: 0x0008 */ DirtyDataCaptureContext;
      struct
      {
        /* 0x000c */ unsigned long Context1;
        /* 0x0010 */ unsigned long Context2;
      } /* size: 0x0008 */ Raw;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Data;
  /* 0x0014 */ long Padding_130;
  /* 0x0018 */ void* Stack[6];
} CM_DIRTY_VECTOR_LOG_ENTRY, *PCM_DIRTY_VECTOR_LOG_ENTRY; /* size: 0x0048 */

typedef struct _CM_DIRTY_VECTOR_LOG
{
  /* 0x0000 */ volatile unsigned long Next;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ struct _CM_DIRTY_VECTOR_LOG_ENTRY Log[16];
} CM_DIRTY_VECTOR_LOG, *PCM_DIRTY_VECTOR_LOG; /* size: 0x0488 */

typedef enum _HEAP_LFH_SUBSEGMENT_LOCATION
{
  HeapLfhAvailable = 0,
  HeapLfhFull = 1,
  HeapLfhFullToAvailable = 2,
  HeapLfhNoList = 3,
  HeapLfhLocationMax = 4,
} HEAP_LFH_SUBSEGMENT_LOCATION, *PHEAP_LFH_SUBSEGMENT_LOCATION;

enum PDC_RESOURCE
{
  PdcResourceSystemForeground = 0,
  PdcResourceUniversalApplications = 1,
  PdcResourceWin32 = 2,
  PdcResourceNetwork = 3,
  PdcResourceSystemBackground = 4,
  PdcResourceAutonomousClient = 5,
  PdcResourceMin = 0,
  PdcResourceMax = 5,
};

enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
  JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
  JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
  JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7,
};

typedef struct _PROC_PERF_CHECK_CYCLE_SNAP
{
  /* 0x0000 */ unsigned __int64 CyclesActive;
  /* 0x0008 */ unsigned __int64 CyclesAffinitized;
  /* 0x0010 */ unsigned __int64 TaggedThreadCycles[4];
  /* 0x0030 */ unsigned long WorkloadClasses;
  /* 0x0034 */ long Padding_131;
  /* 0x0038 */ unsigned __int64 ThreadTypeCycles[1];
} PROC_PERF_CHECK_CYCLE_SNAP, *PPROC_PERF_CHECK_CYCLE_SNAP; /* size: 0x0040 */

typedef struct _HALP_ALLOC_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY BufferList;
  /* 0x0010 */ unsigned __int64 Lock;
} HALP_ALLOC_CONTEXT, *PHALP_ALLOC_CONTEXT; /* size: 0x0018 */

enum TlgIn_t
{
  TlgInNULL = 0,
  TlgInUNICODESTRING = 1,
  TlgInANSISTRING = 2,
  TlgInINT8 = 3,
  TlgInUINT8 = 4,
  TlgInINT16 = 5,
  TlgInUINT16 = 6,
  TlgInINT32 = 7,
  TlgInUINT32 = 8,
  TlgInINT64 = 9,
  TlgInUINT64 = 10,
  TlgInFLOAT = 11,
  TlgInDOUBLE = 12,
  TlgInBOOL32 = 13,
  TlgInBINARY = 14,
  TlgInGUID = 15,
  _TlgInPOINTER_unsupported = 16,
  TlgInFILETIME = 17,
  TlgInSYSTEMTIME = 18,
  TlgInSID = 19,
  TlgInHEXINT32 = 20,
  TlgInHEXINT64 = 21,
  TlgInCOUNTEDSTRING = 22,
  TlgInCOUNTEDANSISTRING = 23,
  _TlgInSTRUCT = 24,
  TlgInCOUNTEDBINARY = 25,
  _TlgInMax = 26,
  TlgInINTPTR = 9,
  TlgInUINTPTR = 10,
  TlgInPOINTER = 21,
  TlgInLONG = 7,
  TlgInULONG = 8,
  TlgInHEXLONG = 20,
  _TlgInCcount = 32,
  TlgInVcount = 64,
  _TlgInChain = 128,
  _TlgInCustom = 96,
  _TlgInTypeMask = 31,
  _TlgInCountMask = 96,
  _TlgInFlagMask = 224,
};

typedef enum _BUGCHECK_RECOVERY_LOG_EVENT
{
  RecoveryEventStart = 0,
  RecoveryEventPhase1Status = 1,
  RecoveryEventPhase2Status = 2,
  RecoveryEventMultipleBugcheckStatus = 3,
  RecoveryEventMax = 4,
} BUGCHECK_RECOVERY_LOG_EVENT, *PBUGCHECK_RECOVERY_LOG_EVENT;

typedef enum _VRF_TRIAGE_CONTEXT
{
  VRF_TRIAGE_CONTEXT_NONE = 0,
  VRF_TRIAGE_CONTEXT_DEFAULT = 1,
  VRF_TRIAGE_CONTEXT_DEVELOPMENT = 1,
  VRF_TRIAGE_CONTEXT_CERTIFICATION = 2,
  VRF_TRIAGE_CONTEXT_CERTIFICATION_STRICT = 3,
  VRF_TRIAGE_CONTEXT_FLIGHT_TARGETED = 4,
  VRF_TRIAGE_CONTEXT_FLIGHT_DIAGNOSTICS = 5,
  VRF_TRIAGE_CONTEXT_FLIGHT_MONITORING = 6,
  NUM_VRF_TRIAGE_CONTEXTS = 7,
} VRF_TRIAGE_CONTEXT, *PVRF_TRIAGE_CONTEXT;

typedef enum _POWER_INFORMATION_LEVEL_INTERNAL
{
  PowerInternalAcpiInterfaceRegister = 0,
  PowerInternalS0LowPowerIdleInfo = 1,
  PowerInternalReapplyBrightnessSettings = 2,
  PowerInternalUserAbsencePrediction = 3,
  PowerInternalUserAbsencePredictionCapability = 4,
  PowerInternalPoProcessorLatencyHint = 5,
  PowerInternalStandbyNetworkRequest = 6,
  PowerInternalDirtyTransitionInformation = 7,
  PowerInternalSetBackgroundTaskState = 8,
  PowerInternalReservedDoNotUseEnum9 = 9,
  PowerInternalReservedDoNotUseEnum10 = 10,
  PowerInternalReservedDoNotUseEnum11 = 11,
  PowerInternalReservedDoNotUseEnum12 = 12,
  PowerInternalReservedDoNotUseEnum13 = 13,
  PowerInternalReservedDoNotUseEnum14 = 14,
  PowerInternalReservedDoNotUseEnum15 = 15,
  PowerInternalReservedDoNotUseEnum16 = 16,
  PowerInternalReservedDoNotUseEnum17 = 17,
  PowerInternalBootSessionStandbyActivationInformation = 18,
  PowerInternalSessionPowerState = 19,
  PowerInternalSessionTerminalInput = 20,
  PowerInternalSetWatchdog = 21,
  PowerInternalPhysicalPowerButtonPressInfoAtBoot = 22,
  PowerInternalExternalMonitorConnected = 23,
  PowerInternalHighPrecisionBrightnessSettings = 24,
  PowerInternalWinrtScreenToggle = 25,
  PowerInternalPpmQosDisable = 26,
  PowerInternalTransitionCheckpoint = 27,
  PowerInternalInputControllerState = 28,
  PowerInternalFirmwareResetReason = 29,
  PowerInternalPpmSchedulerQosSupport = 30,
  PowerInternalBootStatGet = 31,
  PowerInternalBootStatSet = 32,
  PowerInternalCallHasNotReturnedWatchdog = 33,
  PowerInternalBootStatCheckIntegrity = 34,
  PowerInternalBootStatRestoreDefaults = 35,
  PowerInternalHostEsStateUpdate = 36,
  PowerInternalGetPowerActionState = 37,
  PowerInternalBootStatUnlock = 38,
  PowerInternalWakeOnVoiceState = 39,
  PowerInternalDeepSleepBlock = 40,
  PowerInternalIsPoFxDevice = 41,
  PowerInternalPowerTransitionExtensionAtBoot = 42,
  PowerInternalProcessorBrandedFrequency = 43,
  PowerInternalTimeBrokerExpirationReason = 44,
  PowerInternalNotifyUserShutdownStatus = 45,
  PowerInternalPowerRequestTerminalCoreWindow = 46,
  PowerInternalProcessorIdleVeto = 47,
  PowerInternalPlatformIdleVeto = 48,
  PowerInternalIsLongPowerButtonBugcheckEnabled = 49,
  PowerInternalAutoChkCausedReboot = 50,
  PowerInternalSetWakeAlarmOverride = 51,
  PowerInternalDirectedFxAddTestDevice = 53,
  PowerInternalDirectedFxRemoveTestDevice = 54,
  PowerInternalDirectedFxSetMode = 56,
  PowerInternalRegisterPowerPlane = 57,
  PowerInternalSetDirectedDripsFlags = 58,
  PowerInternalClearDirectedDripsFlags = 59,
  PowerInternalRetrieveHiberFileResumeContext = 60,
  PowerInternalReadHiberFilePage = 61,
  PowerInternalLastBootSucceeded = 62,
  PowerInternalQuerySleepStudyHelperRoutineBlock = 63,
  PowerInternalDirectedDripsQueryCapabilities = 64,
  PowerInternalClearConstraints = 65,
  PowerInternalSoftParkVelocityEnabled = 66,
  PowerInternalQueryIntelPepCapabilities = 67,
  PowerInternalGetSystemIdleLoopEnablement = 68,
  PowerInternalGetVmPerfControlSupport = 69,
  PowerInternalGetVmPerfControlConfig = 70,
  PowerInternalSleepDetailedDiagUpdate = 71,
  PowerInternalProcessorClassFrequencyBandsStats = 72,
  PowerInternalHostGlobalUserPresenceStateUpdate = 73,
  PowerInternalCpuNodeIdleIntervalStats = 74,
  PowerInternalClassIdleIntervalStats = 75,
  PowerInternalCpuNodeConcurrencyStats = 76,
  PowerInternalClassConcurrencyStats = 77,
  PowerInternalQueryProcMeasurementCapabilities = 78,
  PowerInternalQueryProcMeasurementValues = 79,
  PowerInternalPrepareForSystemInitiatedReboot = 80,
  PowerInternalGetAdaptiveSessionState = 81,
  PowerInternalSetConsoleLockedState = 82,
  PowerInternalOverrideSystemInitiatedRebootState = 83,
  PowerInternalFanImpactStats = 84,
  PowerInternalFanRpmBuckets = 85,
  PowerInternalPowerBootAppDiagInfo = 86,
  PowerInternalUnregisterShutdownNotification = 87,
  PowerInternalManageTransitionStateRecord = 88,
  PowerInternalGetAcpiTimeAndAlarmCapabilities = 89,
  PowerInternalSuspendResumeRequest = 90,
  PowerInternalEnergyEstimationInfo = 91,
  PowerInternalProvSocIdentifierOperation = 92,
  PowerInternalGetVmPerfPrioritySupport = 93,
  PowerInternalGetVmPerfPriorityConfig = 94,
  PowerInternalNotifyWin32kPowerRequestQueued = 95,
  PowerInternalNotifyWin32kPowerRequestCompleted = 96,
  PowerInformationInternalMaximum = 97,
} POWER_INFORMATION_LEVEL_INTERNAL, *PPOWER_INFORMATION_LEVEL_INTERNAL;

typedef enum _PS_STD_HANDLE_STATE
{
  PsNeverDuplicate = 0,
  PsRequestDuplicate = 1,
  PsAlwaysDuplicate = 2,
  PsMaxStdHandleStates = 3,
} PS_STD_HANDLE_STATE, *PPS_STD_HANDLE_STATE;

typedef enum _HAL_PROCESSOR_STAT_TYPE
{
  HalProcessorStatResidency = 0,
  HalProcessorStatCount = 1,
  HalProcessorStatMax = 2,
} HAL_PROCESSOR_STAT_TYPE, *PHAL_PROCESSOR_STAT_TYPE;

typedef enum _MI_MIRROR_BITMAP_TYPES
{
  MirrorBitmapTypeNormal = 0,
  MirrorBitmapTypeInterlocked = 1,
  MirrorBitmapTypeMaximum = 2,
} MI_MIRROR_BITMAP_TYPES, *PMI_MIRROR_BITMAP_TYPES;

typedef struct _DEVPROPKEY
{
  /* 0x0000 */ struct _GUID fmtid;
  /* 0x0010 */ unsigned long pid;
} DEVPROPKEY, *PDEVPROPKEY; /* size: 0x0014 */

typedef enum _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE
{
  MemoryNotContiguous = 0,
  MemoryAlignedAndContiguous = 1,
  MemoryNotResident = 2,
  MemoryNotEligibleToMakeContiguous = 3,
  MemoryContiguityStateMax = 4,
} MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE, *PMEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE;

typedef enum _PS_WAKE_REASON
{
  PsWakeReasonUser = 0,
  PsWakeReasonExecutionRequired = 1,
  PsWakeReasonKernel = 2,
  PsWakeReasonInstrumentation = 3,
  PsWakeReasonPreserveProcess = 4,
  PsWakeReasonActivityReference = 5,
  PsWakeReasonWorkOnBehalf = 6,
  PsMaxWakeReasons = 7,
} PS_WAKE_REASON, *PPS_WAKE_REASON;

typedef enum _MI_AVAILABLE_PAGE_WAIT_TYPES
{
  AvailablePagesWaitLow = 0,
  AvailablePagesWaitHigh = 1,
  AvailablePagesWaitVeryHigh = 2,
  AvailablePagesWaitMaximum = 3,
} MI_AVAILABLE_PAGE_WAIT_TYPES, *PMI_AVAILABLE_PAGE_WAIT_TYPES;

typedef enum _RTL_MEMORY_TYPE
{
  MemoryTypePaged = 0,
  MemoryTypeNonPaged = 1,
  MemoryType64KPage = 2,
  MemoryTypeLargePage = 3,
  MemoryTypeHugePage = 4,
  MemoryTypeCustom = 5,
  MemoryTypeMax = 6,
} RTL_MEMORY_TYPE, *PRTL_MEMORY_TYPE;

enum wil_FeatureStage
{
  wil_FeatureStage_AlwaysDisabled = 0,
  wil_FeatureStage_DisabledByDefault = 1,
  wil_FeatureStage_EnabledByDefault = 2,
  wil_FeatureStage_AlwaysEnabled = 3,
};

typedef struct _SECURITY_DESCRIPTOR_RELATIVE
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short Control;
  /* 0x0004 */ unsigned long Owner;
  /* 0x0008 */ unsigned long Group;
  /* 0x000c */ unsigned long Sacl;
  /* 0x0010 */ unsigned long Dacl;
} SECURITY_DESCRIPTOR_RELATIVE, *PSECURITY_DESCRIPTOR_RELATIVE; /* size: 0x0014 */

typedef struct _CM_KEY_SECURITY
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned long Flink;
  /* 0x0008 */ unsigned long Blink;
  /* 0x000c */ unsigned long ReferenceCount;
  /* 0x0010 */ unsigned long DescriptorLength;
  /* 0x0014 */ struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
} CM_KEY_SECURITY, *PCM_KEY_SECURITY; /* size: 0x0028 */

typedef enum _LDR_DLL_LOAD_REASON
{
  LoadReasonStaticDependency = 0,
  LoadReasonStaticForwarderDependency = 1,
  LoadReasonDynamicForwarderDependency = 2,
  LoadReasonDelayloadDependency = 3,
  LoadReasonDynamicLoad = 4,
  LoadReasonAsImageLoad = 5,
  LoadReasonAsDataLoad = 6,
  LoadReasonEnclavePrimary = 7,
  LoadReasonEnclaveDependency = 8,
  LoadReasonPatchImage = 9,
  LoadReasonUnknown = -1,
} LDR_DLL_LOAD_REASON, *PLDR_DLL_LOAD_REASON;

typedef union _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 LocalAPICId : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 CpuId : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 ProcInfoCount : 6; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 ContextInfoCount : 6; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Reserved : 50; /* bit position: 14 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 ValidBits;
  }; /* size: 0x0008 */
} WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS, *PWHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS; /* size: 0x0008 */

typedef struct _PROC_PERF_HISTORY_ENTRY
{
  /* 0x0000 */ unsigned short Utility;
  /* 0x0002 */ unsigned short AffinitizedUtility;
  /* 0x0004 */ unsigned short Frequency;
  /* 0x0006 */ unsigned char ImportantPercent;
  /* 0x0007 */ unsigned char IdealPercent;
  /* 0x0008 */ unsigned char TaggedPercent[4];
} PROC_PERF_HISTORY_ENTRY, *PPROC_PERF_HISTORY_ENTRY; /* size: 0x000c */

typedef enum _MI_IMAGE_VIEW_EXTENSION_TYPE
{
  MiImageViewExtensionScpCfg = 0,
  MiImageViewExtensionEmulatedScpCfg = 1,
  MiImageViewExtensionHPAT = 2,
  MiImageViewExtensionMax = 3,
} MI_IMAGE_VIEW_EXTENSION_TYPE, *PMI_IMAGE_VIEW_EXTENSION_TYPE;

typedef enum _MI_BANDWIDTH_TYPES
{
  MiBandwidthMemory = 0,
  MiBandwidthBus = 1,
  MiBandwidthMaximum = 2,
} MI_BANDWIDTH_TYPES, *PMI_BANDWIDTH_TYPES;

typedef struct _ETW_BUFFER_CONTEXT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char ProcessorNumber;
      /* 0x0001 */ unsigned char Alignment;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short ProcessorIndex;
  }; /* size: 0x0002 */
  /* 0x0002 */ unsigned short LoggerId;
} ETW_BUFFER_CONTEXT, *PETW_BUFFER_CONTEXT; /* size: 0x0004 */

typedef enum _MI_INPAGE_SUPPORT_TYPES
{
  MiInPageSupportExpanded = 0,
  MiInPageSupportRegular = 1,
  MiInPageSupportMaximum = 2,
} MI_INPAGE_SUPPORT_TYPES, *PMI_INPAGE_SUPPORT_TYPES;

typedef struct _SECONDARY_INTERRUPT_LINE_STATE
{
  /* 0x0000 */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x0004 */ enum _KINTERRUPT_MODE Mode;
  /* 0x0008 */ unsigned long Vector;
  /* 0x000c */ unsigned char Unmasked;
  /* 0x000d */ char __PADDING__[3];
} SECONDARY_INTERRUPT_LINE_STATE, *PSECONDARY_INTERRUPT_LINE_STATE; /* size: 0x0010 */

typedef enum _KHETERO_RUNNING_TYPE
{
  KHeteroShortRunning = 0,
  KHeteroLongRunning = 1,
  KHeteroRunningTypeMax = 2,
} KHETERO_RUNNING_TYPE, *PKHETERO_RUNNING_TYPE;

typedef enum _HARDWARE_COUNTER_TYPE
{
  PMCCounter = 0,
  MaxHardwareCounterType = 1,
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;

typedef struct _DEVICE_DATA_SET_RANGE
{
  /* 0x0000 */ __int64 StartingOffset;
  /* 0x0008 */ unsigned __int64 LengthInBytes;
} DEVICE_DATA_SET_RANGE, *PDEVICE_DATA_SET_RANGE; /* size: 0x0010 */

typedef enum _PO_MODERN_SLEEP_ACTION
{
  PoModernSleepActionGlobalActivatorsVeto = 0,
  PoModernSleepActionNonBlockingPhases = 1,
  PoModernSleepActionForceIdle = 2,
  PoModernSleepActionMinimalBlockingNotificationClients = 3,
  PoModernSleepActionMax = 4,
} PO_MODERN_SLEEP_ACTION, *PPO_MODERN_SLEEP_ACTION;

typedef struct _VI_FAULT_TRACE
{
  /* 0x0000 */ struct _ETHREAD* Thread;
  /* 0x0008 */ void* StackTrace[8];
} VI_FAULT_TRACE, *PVI_FAULT_TRACE; /* size: 0x0048 */

typedef enum _KTHREAD_TAG
{
  KThreadTagNone = 0,
  KThreadTagMediaBuffering = 1,
  KThreadTagDeadline = 2,
  KThreadTagMediaOther = 3,
  KThreadTagMax = 4,
} KTHREAD_TAG, *PKTHREAD_TAG;

typedef enum _MI_ENCLAVE_TYPE
{
  MiEnclaveNone = 0,
  MiEnclaveHardware = 1,
  MiEnclaveVsm = 2,
  MiEnclaveMax = 3,
} MI_ENCLAVE_TYPE, *PMI_ENCLAVE_TYPE;

typedef enum _MI_PAGE_HASH_ERROR_BEHAVIOR
{
  MiPageHashErrorBugcheck = 0,
  MiPageHashErrorReturnError = 1,
  MiPageHashErrorIgnore = 2,
} MI_PAGE_HASH_ERROR_BEHAVIOR, *PMI_PAGE_HASH_ERROR_BEHAVIOR;

typedef struct _KENLISTMENT_HISTORY
{
  /* 0x0000 */ unsigned long Notification;
  /* 0x0004 */ enum _KENLISTMENT_STATE NewState;
} KENLISTMENT_HISTORY, *PKENLISTMENT_HISTORY; /* size: 0x0008 */

typedef struct _KENLISTMENT
{
  /* 0x0000 */ unsigned long cookie;
  /* 0x0004 */ long Padding_132;
  /* 0x0008 */ struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  /* 0x0030 */ struct _GUID EnlistmentId;
  /* 0x0040 */ struct _KMUTANT Mutex;
  /* 0x0078 */ struct _LIST_ENTRY NextSameTx;
  /* 0x0088 */ struct _LIST_ENTRY NextSameRm;
  /* 0x0098 */ struct _KRESOURCEMANAGER* ResourceManager;
  /* 0x00a0 */ struct _KTRANSACTION* Transaction;
  /* 0x00a8 */ enum _KENLISTMENT_STATE State;
  /* 0x00ac */ unsigned long Flags;
  /* 0x00b0 */ unsigned long NotificationMask;
  /* 0x00b4 */ long Padding_133;
  /* 0x00b8 */ void* Key;
  /* 0x00c0 */ unsigned long KeyRefCount;
  /* 0x00c4 */ long Padding_134;
  /* 0x00c8 */ void* RecoveryInformation;
  /* 0x00d0 */ unsigned long RecoveryInformationLength;
  /* 0x00d4 */ long Padding_135;
  /* 0x00d8 */ void* DynamicNameInformation;
  /* 0x00e0 */ unsigned long DynamicNameInformationLength;
  /* 0x00e4 */ long Padding_136;
  /* 0x00e8 */ struct _KTMNOTIFICATION_PACKET* FinalNotification;
  /* 0x00f0 */ struct _KENLISTMENT* SupSubEnlistment;
  /* 0x00f8 */ void* SupSubEnlHandle;
  /* 0x0100 */ void* SubordinateTxHandle;
  /* 0x0108 */ struct _GUID CrmEnlistmentEnId;
  /* 0x0118 */ struct _GUID CrmEnlistmentTmId;
  /* 0x0128 */ struct _GUID CrmEnlistmentRmId;
  /* 0x0138 */ unsigned long NextHistory;
  /* 0x013c */ struct _KENLISTMENT_HISTORY History[20];
  /* 0x01dc */ long __PADDING__[1];
} KENLISTMENT, *PKENLISTMENT; /* size: 0x01e0 */

typedef enum _EVENT_TRACE_PROFILE_ADD_INFORMATION_VERSIONS
{
  EventTraceProfileAddInformationMinVersion = 2,
  EventTraceProfileAddInformationV2 = 2,
  EventTraceProfileAddInformationV3 = 3,
  EventTraceProfileAddInformationMaxVersion = 3,
} EVENT_TRACE_PROFILE_ADD_INFORMATION_VERSIONS, *PEVENT_TRACE_PROFILE_ADD_INFORMATION_VERSIONS;

typedef enum _POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI
{
  PowerInformationInternalTtmFirst = 4096,
  PowerInternalTtmOpenTerminal = 4096,
  PowerInternalTtmCreateTerminal = 4097,
  PowerInternalTtmEvacuateDevices = 4098,
  PowerInternalTtmCreateTerminalEventQueue = 4099,
  PowerInternalTtmGetTerminalEvent = 4100,
  PowerInternalTtmSetDefaultDeviceAssignment = 4101,
  PowerInternalTtmAssignDevice = 4102,
  PowerInternalTtmSetDisplayState = 4103,
  PowerInternalTtmSetDisplayTimeouts = 4104,
  PowerInternalTtmSetDisplayPowerRequest = 4105,
  PowerInternalTtmSetInputWakeCapability = 4106,
  PowerInformationInternalTtmLast = 4106,
} POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI, *PPOWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI;

typedef enum _CM_HIVE_CACHE_OPLOCK_FILE_TYPE
{
  OplockOnPrimary = 0,
  OplockOnLog1 = 1,
  OplockOnLog2 = 2,
  OplocksOnFilesMax = 3,
} CM_HIVE_CACHE_OPLOCK_FILE_TYPE, *PCM_HIVE_CACHE_OPLOCK_FILE_TYPE;

typedef struct _IO_STATUS_BLOCK
{
  union
  {
    /* 0x0000 */ long Status;
    /* 0x0000 */ void* Pointer;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned __int64 Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK; /* size: 0x0010 */

typedef struct _KDEVICE_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY DeviceListEntry;
  /* 0x0010 */ unsigned long SortKey;
  /* 0x0014 */ unsigned char Inserted;
  /* 0x0015 */ char __PADDING__[3];
} KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY; /* size: 0x0018 */

typedef struct _IRP
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ unsigned short AllocationProcessorNumber;
  /* 0x0006 */ unsigned short Reserved1;
  /* 0x0008 */ struct _MDL* MdlAddress;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ unsigned long Reserved2;
  union
  {
    union
    {
      /* 0x0018 */ struct _IRP* MasterIrp;
      /* 0x0018 */ long IrpCount;
      /* 0x0018 */ void* SystemBuffer;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ AssociatedIrp;
  /* 0x0020 */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x0030 */ struct _IO_STATUS_BLOCK IoStatus;
  /* 0x0040 */ char RequestorMode;
  /* 0x0041 */ unsigned char PendingReturned;
  /* 0x0042 */ char StackCount;
  /* 0x0043 */ char CurrentLocation;
  /* 0x0044 */ unsigned char Cancel;
  /* 0x0045 */ unsigned char CancelIrql;
  /* 0x0046 */ char ApcEnvironment;
  /* 0x0047 */ unsigned char AllocationFlags;
  union
  {
    /* 0x0048 */ struct _IO_STATUS_BLOCK* UserIosb;
    /* 0x0048 */ void* IoRingContext;
  }; /* size: 0x0008 */
  /* 0x0050 */ struct _KEVENT* UserEvent;
  union
  {
    union
    {
      struct
      {
        union
        {
          /* 0x0058 */ void* UserApcRoutine /* function */;
          /* 0x0058 */ void* IssuingProcess;
        }; /* size: 0x0008 */
        union
        {
          /* 0x0060 */ void* UserApcContext;
          /* 0x0060 */ struct _IORING_OBJECT* IoRing;
        }; /* size: 0x0008 */
      } /* size: 0x0010 */ AsynchronousParameters;
      /* 0x0058 */ union _LARGE_INTEGER AllocationSize;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Overlay;
  /* 0x0068 */ void* CancelRoutine /* function */;
  /* 0x0070 */ void* UserBuffer;
  union
  {
    union
    {
      struct
      {
        union
        {
          /* 0x0078 */ struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
          /* 0x0078 */ void* DriverContext[4];
        }; /* size: 0x0020 */
        /* 0x0098 */ struct _ETHREAD* Thread;
        /* 0x00a0 */ char* AuxiliaryBuffer;
        /* 0x00a8 */ struct _LIST_ENTRY ListEntry;
        union
        {
          /* 0x00b8 */ struct _IO_STACK_LOCATION* CurrentStackLocation;
          /* 0x00b8 */ unsigned long PacketType;
        }; /* size: 0x0008 */
        /* 0x00c0 */ struct _FILE_OBJECT* OriginalFileObject;
        /* 0x00c8 */ void* IrpExtension;
      } /* size: 0x0058 */ Overlay;
      /* 0x0078 */ struct _KAPC Apc;
      /* 0x0078 */ void* CompletionKey;
    }; /* size: 0x0058 */
  } /* size: 0x0058 */ Tail;
} IRP, *PIRP; /* size: 0x00d0 */

typedef struct _POP_PER_PROCESSOR_CONTEXT
{
  /* 0x0000 */ unsigned char* UncompressedData;
  /* 0x0008 */ void* MappingVa;
  /* 0x0010 */ void* XpressEncodeWorkspace;
  /* 0x0018 */ unsigned char* CompressedDataBuffer;
  /* 0x0020 */ unsigned __int64 CopyTicks;
  /* 0x0028 */ unsigned __int64 CompressTicks;
  /* 0x0030 */ unsigned __int64 BytesCopied;
  /* 0x0038 */ unsigned __int64 PagesProcessed;
  /* 0x0040 */ unsigned __int64 DecompressTicks;
  /* 0x0048 */ unsigned __int64 ResumeCopyTicks;
  /* 0x0050 */ unsigned __int64 SharedBufferTicks;
  /* 0x0058 */ unsigned __int64 BlockCountByMethod[5];
  /* 0x0080 */ unsigned __int64 DecompressTicksByMethod[2];
  /* 0x0090 */ unsigned __int64 DecompressSizeByMethod[2];
  /* 0x00a0 */ unsigned long CompressCount;
  /* 0x00a4 */ unsigned long HuffCompressCount;
} POP_PER_PROCESSOR_CONTEXT, *PPOP_PER_PROCESSOR_CONTEXT; /* size: 0x00a8 */

typedef enum _FAN_NOISE_ZONES_
{
  FanNoiseZoneLow = 0,
  FanNoiseZoneMedium = 1,
  FanNoiseZoneMediumHigh = 2,
  FanNoiseZoneHigh = 3,
  FanNoiseZoneLast = 3,
  FanNoiseZoneMax = 4,
} FAN_NOISE_ZONES_, *PFAN_NOISE_ZONES_;

typedef struct _TOKEN_SOURCE
{
  /* 0x0000 */ char SourceName[8];
  /* 0x0008 */ struct _LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE; /* size: 0x0010 */

typedef enum _MI_PAGE_HEAT_LOCK_TYPE
{
  MiPageHeatLockTypeNone = 0,
  MiPageHeatLockTypeShared = 1,
  MiPageHeatLockTypeTryShared = 2,
  MiPageHeatLockTypeMax = 3,
} MI_PAGE_HEAT_LOCK_TYPE, *PMI_PAGE_HEAT_LOCK_TYPE;

typedef struct _SHARED_CACHE_MAP_LIST_CURSOR
{
  /* 0x0000 */ struct _LIST_ENTRY SharedCacheMapLinks;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ long __PADDING__[1];
} SHARED_CACHE_MAP_LIST_CURSOR, *PSHARED_CACHE_MAP_LIST_CURSOR; /* size: 0x0018 */

typedef enum _KSOFTWARE_INTERRUPT_TARGET
{
  KSoftwareInterruptTargetNone = 0,
  KSoftwareInterruptTargetSingleProcessor = 1,
  KSoftwareInterruptTargetMultipleProcessors = 2,
  KSoftwareInterruptTargetMax = 3,
} KSOFTWARE_INTERRUPT_TARGET, *PKSOFTWARE_INTERRUPT_TARGET;

enum INTERRUPT_CONNECTION_TYPE
{
  InterruptTypeControllerInput = 0,
  InterruptTypeXapicMessage = 1,
  InterruptTypeHypertransport = 2,
  InterruptTypeMessageRequest = 3,
};

typedef union _EXT_IOMMU_CAPABILITIES
{
  union
  {
    /* 0x0000 */ unsigned __int64 AsUINT64;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 GeneratesMsiInterrupts : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 CoherentTableWalks : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 InterruptsNotSubjectToRemapping : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 InterruptRemapping : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 Stage2DmaRemapping : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 Svm : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 PcieFunctionBased : 1; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} EXT_IOMMU_CAPABILITIES, *PEXT_IOMMU_CAPABILITIES; /* size: 0x0008 */

typedef struct _EXT_IOMMU
{
  /* 0x0000 */ void* Context;
  /* 0x0008 */ enum _EXT_IOMMU_KNOWN_IOMMU_TYPE Type;
  /* 0x000c */ long Padding_137;
  /* 0x0010 */ union _EXT_IOMMU_CAPABILITIES Capabilities;
  /* 0x0018 */ unsigned int MaxOutputAddressWidth;
  struct
  {
    /* 0x001c */ unsigned short PciSegment : 1; /* bit position: 0 */
  } /* size: 0x0002 */ Flags;
  /* 0x001e */ unsigned short PciSegmentNumber;
  /* 0x0020 */ struct _EXT_IOMMU_FUNCTION_TABLE FunctionTable;
} EXT_IOMMU, *PEXT_IOMMU; /* size: 0x00b8 */

typedef struct _POP_POLICY_DEVICE
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ enum POWER_POLICY_DEVICE_TYPE DeviceType;
  /* 0x0014 */ long Padding_138;
  /* 0x0018 */ void* Notification;
  /* 0x0020 */ struct _UNICODE_STRING Name;
  /* 0x0030 */ struct _DEVICE_OBJECT* Device;
  /* 0x0038 */ struct _IRP* Irp;
} POP_POLICY_DEVICE, *PPOP_POLICY_DEVICE; /* size: 0x0040 */

enum HAL_APIC_DESTINATION_MODE
{
  ApicDestinationModePhysical = 1,
  ApicDestinationModeLogicalFlat = 2,
  ApicDestinationModeLogicalClustered = 3,
  ApicDestinationModeUnknown = 4,
};

typedef enum _MI_WORKING_SET_TYPE
{
  MiWorkingSetTypeSystemCache = 0,
  MiWorkingSetTypePartitionMaximum = 1,
  MiWorkingSetTypeSystemViews = 1,
  MiWorkingSetTypeSystemDataViews = 2,
  MiWorkingSetTypePagedPool = 3,
  MiWorkingSetTypePagableMaximumInclusive = 3,
  MiWorkingSetTypeSystemPtes = 4,
  MiWorkingSetTypeKernelStacks = 5,
  MiWorkingSetTypeNonPagedPool = 6,
  MiWorkingSetTypeSystemSoftWsles = 7,
  MiWorkingSetTypeLinearProtected = 8,
  MiWorkingSetTypeMaximum = 9,
} MI_WORKING_SET_TYPE, *PMI_WORKING_SET_TYPE;

typedef enum _DEVICE_RELATION_LEVEL
{
  RELATION_LEVEL_REMOVE_EJECT = 0,
  RELATION_LEVEL_DEPENDENT = 1,
  RELATION_LEVEL_DIRECT_DESCENDANT = 2,
} DEVICE_RELATION_LEVEL, *PDEVICE_RELATION_LEVEL;

typedef enum _KTIMER2_COLLECTION_INDEX
{
  KTimer2CollectionNoWake = 0,
  KTimer2CollectionNoWakeHr = 1,
  KTimer2CollectionHr = 2,
  KTimer2CollectionPseudoHr = 3,
  KTimer2CollectionFinite = 4,
  KTimer2CollectionIr = 5,
  KTimer2CollectionAr = 6,
  KTimer2CollectionNotInserted = 16,
  KTimer2CollectionInvalid = 23,
  KTimer2CollectionOptional = 32,
  KTimer2CollectionMin = 0,
  KTimer2CollectionMax = 7,
  KTimer2CollectionNode1 = 3,
} KTIMER2_COLLECTION_INDEX, *PKTIMER2_COLLECTION_INDEX;

typedef enum _CM_SHARE_DISPOSITION
{
  CmResourceShareUndetermined = 0,
  CmResourceShareDeviceExclusive = 1,
  CmResourceShareDriverExclusive = 2,
  CmResourceShareShared = 3,
} CM_SHARE_DISPOSITION, *PCM_SHARE_DISPOSITION;

typedef struct _GIC_MSIFRAME_ENTRY
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned short Reserved1;
  /* 0x0004 */ unsigned long Identifier;
  /* 0x0008 */ unsigned __int64 PhysicalAddress;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ unsigned short SpiCount;
  /* 0x0016 */ unsigned short SpiBase;
} GIC_MSIFRAME_ENTRY, *PGIC_MSIFRAME_ENTRY; /* size: 0x0018 */

typedef enum _SKSERVICE
{
  SECURESERVICE_NONE = 0,
  SECURESERVICE_PHASE4_INIT = 1,
  SECURESERVICE_START_PROCESSOR = 2,
  SECURESERVICE_FINISH_START_PROCESSOR = 3,
  SECURESERVICE_REGISTER_SYSTEM_DLLS = 4,
  SECURESERVICE_REGISTER_SYSTEM_PROCESS = 5,
  SECURESERVICE_CREATE_PROCESS = 6,
  SECURESERVICE_INITIALIZE_PROCESS = 7,
  SECURESERVICE_CREATE_THREAD = 8,
  SECURESERVICE_REQUEST_THREAD_EXIT = 9,
  SECURESERVICE_TERMINATE_THREAD = 10,
  SECURESERVICE_RUNDOWN_PROCESS = 11,
  SECURESERVICE_DEBUG_PROCESS = 12,
  SECURESERVICE_GET_TEB_ADDRESS = 13,
  SECURESERVICE_GET_CONTEXT = 14,
  SECURESERVICE_SET_CONTEXT = 15,
  SECURESERVICE_SEND_ATTACH_NOTIFICATIONS = 16,
  SECURESERVICE_GET_ETW_DEBUG_ID = 17,
  SECURESERVICE_GET_ON_DEMAND_DEBUG_CHALLENGE = 18,
  SECURESERVICE_ENABLE_ON_DEMAND_DEBUG_WITH_RESPONSE = 19,
  SECURESERVICE_RETRIEVE_MAILBOX = 20,
  SECURESERVICE_IS_TRUSTLET_RUNNING = 21,
  SECURESERVICE_CREATE_SECURE_ALLOCATION = 22,
  SECURESERVICE_FILL_SECURE_ALLOCATION = 23,
  SECURESERVICE_MAKE_CODE_CATALOG = 24,
  SECURESERVICE_CREATE_SECURE_IMAGE = 25,
  SECURESERVICE_FINALIZE_SECURE_IMAGE_HASH = 26,
  SECURESERVICE_FINISH_SECURE_IMAGE_VALIDATION = 27,
  SECURESERVICE_CAPTURE_IMAGE_HOT_PATCH_METADATA = 28,
  SECURESERVICE_PREPARE_IMAGE_RELOCATIONS = 29,
  SECURESERVICE_RELOCATE_IMAGE = 30,
  SECURESERVICE_CLOSE_SECURE_HANDLE = 31,
  SECURESERVICE_VALIDATE_DYNAMIC_CODE = 32,
  SECURESERVICE_TRANSFER_IMAGE_VERSION_RESOURCE = 33,
  SECURESERVICE_SET_CODE_INTEGRITY_POLICY = 34,
  SECURESERVICE_EXCHANGE_ENTROPY = 35,
  SECURESERVICE_IS_ENCRYPTION_KEY_AVAILABLE = 36,
  SECURESERVICE_ALLOCATE_HIBERNATE_RESOURCES = 37,
  SECURESERVICE_FREE_HIBERNATE_RESOURCES = 38,
  SECURESERVICE_CONFIGURE_DYNAMIC_MEMORY = 39,
  SECURESERVICE_DEBUG_PROTECT_MEMORY = 40,
  SECURESERVICE_DEBUG_READ_WRITE_MEMORY = 41,
  SECURESERVICE_QUERY_VIRTUAL_MEMORY = 42,
  SECURESERVICE_CAPTURE_IMAGE_IAT = 43,
  SECURESERVICE_FREE_IMAGE_IAT = 44,
  SECURESERVICE_APPLY_FIXUPS = 45,
  SECURESERVICE_MARK_IMAGE_PROTECTED = 46,
  SECURESERVICE_CREATE_ENCLAVE = 47,
  SECURESERVICE_LOAD_ENCLAVE_DATA = 48,
  SECURESERVICE_LOAD_ENCLAVE_MODULE = 49,
  SECURESERVICE_INITIALIZE_ENCLAVE = 50,
  SECURESERVICE_TERMINATE_ENCLAVE = 51,
  SECURESERVICE_DELETE_ENCLAVE = 52,
  SECURESERVICE_QUERY_TRUSTED_APPS_RUNTIME = 53,
  SECURESERVICE_DELEGATE_TRUSTED_APPS_RUNTIME_DLL = 54,
  SECURESERVICE_CONNECT_SW_INTERRUPT = 55,
  SECURESERVICE_RELAX_HYPERGUARD_QUOTA = 56,
  SECURESERVICE_REGISTER_BOOT_DRIVERS = 57,
  SECURESERVICE_LIVEDUMP_QUERY_SECONDARYDATA_SIZE = 58,
  SECURESERVICE_LIVEDUMP_START = 59,
  SECURESERVICE_LIVEDUMP_ADD_BUFFER = 60,
  SECURESERVICE_LIVEDUMP_SETUP_BUFFER = 61,
  SECURESERVICE_LIVEDUMP_FINALIZE = 62,
  SECURESERVICE_LIVEDUMP_ABORT = 63,
  SECURESERVICE_LIVEDUMP_CAPTURE_PROCESS = 64,
  SECURESERVICE_NOTIFY_POWER_STATE = 65,
  SECURESERVICE_QUERY_PROFILE_INFORMATION = 66,
  SECURESERVICE_UPDATE_FREEZE_BIAS = 67,
  SECURESERVICE_CREATE_SECURE_SECTION = 68,
  SECURESERVICE_DELETE_SECURE_SECTION = 69,
  SECURESERVICE_QUERY_SECURE_DEVICE = 70,
  SECURESERVICE_UNPROTECT_SECURE_DEVICE = 71,
  SECURESERVICE_REGISTER_SECURE_PATCH = 72,
  SECURESERVICE_QUERY_ACTIVE_SECURE_PATCH = 73,
  SECURESERVICE_DETERMINE_HOT_PATCH_TYPE = 74,
  SECURESERVICE_OBTAIN_PATCH_UNDO_TABLE_SIZE = 75,
  SECURESERVICE_OBTAIN_PATCH_UNDO_TABLE = 76,
  SECURESERVICE_APPLY_HOT_PATCH = 77,
  SECURESERVICE_PREPARE_DRIVER_FOR_PATCH = 78,
  SECURESERVICE_PROVISION_DUMP_KEYS = 79,
  SECURESERVICE_CAPTURE_PGO_DATA = 80,
  SECURESERVICE_START_PROFILE = 81,
  SECURESERVICE_STOP_PROFILE = 82,
  SECURESERVICE_SECURE_POOL_CREATE = 83,
  SECURESERVICE_SECURE_POOL_DESTROY = 84,
  SECURESERVICE_SECURE_POOL_ALLOCATE = 85,
  SECURESERVICE_SECURE_POOL_FREE = 86,
  SECURESERVICE_SECURE_POOL_UPDATE = 87,
  SECURESERVICE_SET_TRACEPOINT = 88,
  SECURESERVICE_TRANSFORM_DUMP_KEY = 89,
  SECURESERVICE_PUBLISH_SYSCALL_PROVIDER_SERVICE_TABLES = 90,
  SECURESERVICE_REVOKE_SYSCALL_PROVIDER_SERVICE_TABLES = 91,
  SECURESERVICE_NO_TRACING_FIRST = 191,
  SECURESERVICE_GET_PEB_ADDRESS = 192,
  SECURESERVICE_VALIDATE_SECURE_IMAGE_PAGES = 193,
  SECURESERVICE_PRE_INIT_FIRST = 207,
  SECURESERVICE_PHASE3_INIT = 208,
  SECURESERVICE_PERIODIC = 209,
  SECURESERVICE_WORK_QUEUE = 210,
  SECURESERVICE_RESERVE_PROTECTED_PAGES = 211,
  SECURESERVICE_APPLY_DYNAMIC_RELOCATIONS = 212,
  SECURESERVICE_ETW_ENABLE_CALLBACK = 213,
  SECURESERVICE_INITIALIZE_SECURE_POOL = 214,
  SECURESERVICE_INITIALIZE_KERNEL_CFG = 215,
  SECURESERVICE_INITIALIZE_KSCP_FUNCTIONS = 216,
  SECURESERVICE_LOAD_DRIVER = 217,
  SECURESERVICE_UNLOAD_DRIVER = 218,
  SECURESERVICE_MAP_KERNEL_SCP = 219,
  SECURESERVICE_ENABLE_CFG_TARGET = 220,
  SECURESERVICE_COMPLETE_SLAB_CONFIGURATION = 221,
  SECURESERVICE_REAPPLY_BOOT_DRIVER_PATCH = 222,
  SECURESERVICE_INITIALIZE_NT_DYNAMIC_FIXUPS = 223,
  SECURESERVICE_PERFORM_RETPOLINE_RELOCATIONS = 224,
  SECURESERVICE_UPDATE_IMPORT_RELOCATIONS = 225,
  SECURESERVICE_REAPPLY_IMPORT_RELOCATIONS = 226,
  SECURESERVICE_INIT_FUNCTION_OVERRIDES = 227,
  SECURESERVICE_PERFORM_DRIVER_FUNCTION_OVERRIDES = 228,
  SECURESERVICE_SYNCHRONIZE_XSAVE = 229,
  SECURESERVICE_ALLOCATE_SHADOW_STACK = 230,
  SECURESERVICE_FREE_SHADOW_STACK = 231,
  SECURESERVICE_RESET_SHADOW_STACK = 232,
  SECURESERVICE_REGISTER_SYSCALL_PROVIDER_SERVICE_TABLE_MD = 233,
  SECURESERVICE_INITIALIZE_SYSCALL_PROVIDERS = 234,
  SECURESERVICE_DRIVER_PROXY_ENDPOINT_WRAPPER_SECTIONS_CREATE = 235,
  SECURESERVICE_DRIVER_PROXY_ENDPOINT_WRAPPER_SECTION_REGISTER = 236,
  SECURESERVICE_DISPATCH_LEVEL_FIRST = 239,
  SECURESERVICE_FLUSH_ADDRESS_SPACE = 240,
  SECURESERVICE_FAST_FLUSH_RANGE_LIST = 241,
  SECURESERVICE_SLOW_FLUSH_RANGE_LIST = 242,
  SECURESERVICE_REMOVE_PROTECTED_PAGE = 243,
  SECURESERVICE_COPY_PROTECTED_PAGE = 244,
  SECURESERVICE_WRITE_PROTECTED_PAGE = 245,
  SECURESERVICE_REGISTER_PROTECTED_PAGE = 246,
  SECURESERVICE_SET_PROTECTED_PTE = 247,
  SECURESERVICE_QUERY_PTE_ACCESSED_STATE = 248,
  SECURESERVICE_VALIDATE_PROTECTED_PAGE_TABLES = 249,
  SECURESERVICE_MAKE_PROTECTED_PAGE_EXECUTABLE = 250,
  SECURESERVICE_QUERY_STRONG_CODE_FEATURES = 251,
  SECURESERVICE_INVOKE_EFI_RUNTIME_SERVICE = 252,
  SECURESERVICE_LIVEDUMP_COLLECT_LIVE_DUMP = 253,
  SECURESERVICE_REGISTER_LOG_PAGES = 254,
  SECURESERVICE_RECLAIM_PARTITION_PAGES = 255,
  SECURESERVICE_BIND_NT_KERNEL_IMPORTS = 256,
  SECURESERVICE_SET_PLACEHOLDER_PAGES = 257,
  SECURESERVICE_QUERY_SPECULATION_CONTROL_FEATURES = 258,
  SECURESERVICE_PROTECT_KERNEL_DATA_PAGE = 259,
  SECURESERVICE_EXEMPT_SECURE_PTE_RANGE = 260,
  SECURESERVICE_VERIFY_PAGE = 261,
  SECURESERVICE_PREPARE_FOR_HIBERNATION = 262,
  SECURESERVICE_PREPARE_FOR_CRASHDUMP = 263,
  SECURESERVICE_REPORT_BUGCHECK_PROGRESS = 264,
  SECURESERVICE_SWAP_HIBER_SHADOW_STACKS = 265,
  SECURESERVICE_SHUTDOWN = 266,
  SECURESERVICE_QUERY_SECURE_PCI_INFO = 267,
  SECURESERVICE_ACCESS_PCI_DEVICE = 268,
  SECURESERVICE_QUERY_SECURE_PCI_BOOT_CONFIG = 269,
  SECURESERVICE_REINITIALIZE_DEBUGGER_TRANSPORT = 270,
  SECURESERVICE_KSR_CALL = 271,
  SECURESERVICE_SVC_CALL = 272,
  SECURESERVICE_DRIVER_PROXY_ENDPOINT_SWAP = 273,
  SECURESERVICE_SHADOW_STACK_ASSIST = 274,
  SECURESERVICE_REQUEST_BREAK_IN = 275,
  SECURESERVICE_CONFIGURE_SECURE_ATS_DEVICE = 276,
  SECURESERVICE_BUGCHECK = 1792,
  SECURESERVICE_LIMITED_MODE_SERVICE_START = 2048,
} SKSERVICE, *PSKSERVICE;

typedef enum _PS_PROTECTED_TYPE
{
  PsProtectedTypeNone = 0,
  PsProtectedTypeProtectedLight = 1,
  PsProtectedTypeProtected = 2,
  PsProtectedTypeMax = 3,
} PS_PROTECTED_TYPE, *PPS_PROTECTED_TYPE;

typedef union _KSWAPPABLE_PAGE_REF_COUNT
{
  union
  {
    /* 0x0000 */ unsigned __int64 Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Resident : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 RefCount : 63; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} KSWAPPABLE_PAGE_REF_COUNT, *PKSWAPPABLE_PAGE_REF_COUNT; /* size: 0x0008 */

typedef struct _MDL
{
  /* 0x0000 */ struct _MDL* Next;
  /* 0x0008 */ short Size;
  /* 0x000a */ short MdlFlags;
  /* 0x000c */ unsigned short AllocationProcessorNumber;
  /* 0x000e */ unsigned short Reserved;
  /* 0x0010 */ struct _EPROCESS* Process;
  /* 0x0018 */ void* MappedSystemVa;
  /* 0x0020 */ void* StartVa;
  /* 0x0028 */ unsigned long ByteCount;
  /* 0x002c */ unsigned long ByteOffset;
} MDL, *PMDL; /* size: 0x0030 */

typedef struct _KSWAPPABLE_PAGE
{
  /* 0x0000 */ void* RegionStart;
  /* 0x0008 */ unsigned __int64 TransitionLock;
  /* 0x0010 */ volatile union _KSWAPPABLE_PAGE_REF_COUNT LockCount;
  /* 0x0018 */ struct _MDL Mdl;
  /* 0x0048 */ unsigned __int64 PageNumber;
} KSWAPPABLE_PAGE, *PKSWAPPABLE_PAGE; /* size: 0x0050 */

typedef enum _MI_AFFINITY_WALK_CANDIDATE_TYPE
{
  MiAffinityCandidateIdle = 0,
  MiAffinityCandidateIdlePoweredDown = 1,
  MiAffinityCandidatePartiallyIdle = 2,
  MiAffinityCandidatePartiallyIdlePoweredDown = 3,
  MiAffinityCandidateBusy = 4,
  MiAffinityCandidateMaximum = 5,
} MI_AFFINITY_WALK_CANDIDATE_TYPE, *PMI_AFFINITY_WALK_CANDIDATE_TYPE;

typedef enum _BUS_DATA_TYPE
{
  ConfigurationSpaceUndefined = -1,
  Cmos = 0,
  EisaConfiguration = 1,
  Pos = 2,
  CbusConfiguration = 3,
  PCIConfiguration = 4,
  VMEConfiguration = 5,
  NuBusConfiguration = 6,
  PCMCIAConfiguration = 7,
  MPIConfiguration = 8,
  MPSAConfiguration = 9,
  PNPISAConfiguration = 10,
  SgiInternalConfiguration = 11,
  MaximumBusDataType = 12,
} BUS_DATA_TYPE, *PBUS_DATA_TYPE;

typedef struct _THERMAL_INFORMATION_EX
{
  /* 0x0000 */ unsigned long ThermalStamp;
  /* 0x0004 */ unsigned long ThermalConstant1;
  /* 0x0008 */ unsigned long ThermalConstant2;
  /* 0x000c */ unsigned long SamplingPeriod;
  /* 0x0010 */ unsigned long CurrentTemperature;
  /* 0x0014 */ unsigned long PassiveTripPoint;
  /* 0x0018 */ unsigned long ThermalStandbyTripPoint;
  /* 0x001c */ unsigned long CriticalTripPoint;
  /* 0x0020 */ unsigned char ActiveTripPointCount;
  /* 0x0021 */ unsigned char PassiveCoolingDevicesPresent;
  /* 0x0022 */ char Padding_139[2];
  /* 0x0024 */ unsigned long ActiveTripPoint[10];
  /* 0x004c */ unsigned long S4TransitionTripPoint;
  /* 0x0050 */ unsigned long MinimumThrottle;
  /* 0x0054 */ unsigned long OverThrottleThreshold;
  /* 0x0058 */ unsigned long PollingPeriod;
} THERMAL_INFORMATION_EX, *PTHERMAL_INFORMATION_EX; /* size: 0x005c */

typedef struct _THERMAL_POLICY
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned char WaitForUpdate;
  /* 0x0005 */ unsigned char Hibernate;
  /* 0x0006 */ unsigned char Critical;
  /* 0x0007 */ unsigned char ThermalStandby;
  /* 0x0008 */ unsigned long ActivationReasons;
  /* 0x000c */ unsigned long PassiveLimit;
  /* 0x0010 */ unsigned long ActiveLevel;
  /* 0x0014 */ unsigned char OverThrottled;
  /* 0x0015 */ char __PADDING__[3];
} THERMAL_POLICY, *PTHERMAL_POLICY; /* size: 0x0018 */

typedef struct _KTIMER2
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  union
  {
    /* 0x0018 */ struct _RTL_BALANCED_NODE RbNodes[2];
    /* 0x0018 */ struct _LIST_ENTRY ListEntry;
  }; /* size: 0x0030 */
  /* 0x0048 */ unsigned __int64 DueTime[2];
  /* 0x0058 */ __int64 Period;
  /* 0x0060 */ void* Callback /* function */;
  /* 0x0068 */ void* CallbackContext;
  /* 0x0070 */ void* DisableCallback /* function */;
  /* 0x0078 */ void* DisableContext;
  /* 0x0080 */ unsigned char AbsoluteSystemTime;
  union
  {
    /* 0x0081 */ unsigned char TypeFlags;
    struct /* bitfield */
    {
      /* 0x0081 */ unsigned char Unused : 1; /* bit position: 0 */
      /* 0x0081 */ unsigned char IdleResilient : 1; /* bit position: 1 */
      /* 0x0081 */ unsigned char HighResolution : 1; /* bit position: 2 */
      /* 0x0081 */ unsigned char NoWake : 1; /* bit position: 3 */
      /* 0x0081 */ unsigned char PseudoHighRes : 1; /* bit position: 4 */
      /* 0x0081 */ unsigned char AusterityResilient : 1; /* bit position: 5 */
      /* 0x0081 */ unsigned char Unused1 : 2; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0082 */ unsigned char CollectionIndex[2];
  /* 0x0084 */ long __PADDING__[1];
} KTIMER2, *PKTIMER2; /* size: 0x0088 */

typedef struct _POP_RW_LOCK
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0008 */ struct _KTHREAD* Thread;
} POP_RW_LOCK, *PPOP_RW_LOCK; /* size: 0x0010 */

typedef struct _POP_THERMAL_TELEMETRY_TRACKER
{
  /* 0x0000 */ unsigned char AccountingDisabled;
  /* 0x0001 */ unsigned char ActiveLevels;
  /* 0x0002 */ char Padding_140[6];
  /* 0x0008 */ unsigned __int64 LastPassiveUpdateTime;
  /* 0x0010 */ unsigned __int64 LastActiveUpdateTime;
  /* 0x0018 */ unsigned __int64 TotalPassiveTime[21];
  /* 0x00c0 */ unsigned __int64 PassiveTimeSnap[21];
  /* 0x0168 */ unsigned __int64 TotalActiveTime[10];
  /* 0x01b8 */ unsigned __int64 ActiveTimeSnap[10];
  /* 0x0208 */ unsigned __int64 TotalTime;
  /* 0x0210 */ unsigned __int64 TotalTimeSnap;
} POP_THERMAL_TELEMETRY_TRACKER, *PPOP_THERMAL_TELEMETRY_TRACKER; /* size: 0x0218 */

typedef struct _POP_THERMAL_ZONE
{
  union
  {
    /* 0x0000 */ struct _POP_POLICY_DEVICE PolicyDevice;
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY Link;
      /* 0x0010 */ enum POWER_POLICY_DEVICE_TYPE DeviceType;
      /* 0x0014 */ long Padding_141;
      /* 0x0018 */ void* Notification;
      /* 0x0020 */ struct _UNICODE_STRING Name;
      /* 0x0030 */ struct _DEVICE_OBJECT* Device;
      /* 0x0038 */ struct _IRP* Irp;
    }; /* size: 0x003c */
  }; /* size: 0x0040 */
  /* 0x0040 */ unsigned char State;
  /* 0x0041 */ unsigned char Flags;
  /* 0x0042 */ unsigned char Removing;
  /* 0x0043 */ unsigned char Mode;
  /* 0x0044 */ unsigned char PendingMode;
  /* 0x0045 */ unsigned char ActivePoint;
  /* 0x0046 */ unsigned char PendingActivePoint;
  /* 0x0047 */ unsigned char Critical;
  /* 0x0048 */ unsigned char ThermalStandby;
  /* 0x0049 */ unsigned char OverThrottled;
  /* 0x004a */ char Padding_142[2];
  /* 0x004c */ long HighPrecisionThrottle;
  /* 0x0050 */ long Throttle;
  /* 0x0054 */ long PendingThrottle;
  /* 0x0058 */ unsigned long ThrottleReasons;
  /* 0x005c */ long Padding_143;
  /* 0x0060 */ unsigned __int64 LastPassiveTime;
  /* 0x0068 */ unsigned long SampleRate;
  /* 0x006c */ unsigned long LastTemp;
  /* 0x0070 */ struct _THERMAL_INFORMATION_EX Info;
  /* 0x00cc */ struct _THERMAL_POLICY Policy;
  /* 0x00e4 */ unsigned char PolicyDriver;
  /* 0x00e5 */ char Padding_144[3];
  /* 0x00e8 */ unsigned __int64 PollingRate;
  /* 0x00f0 */ unsigned __int64 LastTemperatureTime;
  /* 0x00f8 */ unsigned __int64 LastActiveStartTime;
  /* 0x0100 */ unsigned __int64 LastPassiveStartTime;
  /* 0x0108 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0128 */ struct _KTIMER2 ZoneUpdateTimer;
  /* 0x01b0 */ struct _POP_RW_LOCK Lock;
  /* 0x01c0 */ struct _KEVENT ZoneStopped;
  /* 0x01d8 */ struct _KEVENT TemperatureUpdated;
  /* 0x01f0 */ unsigned long InstanceId;
  /* 0x01f4 */ long Padding_145;
  /* 0x01f8 */ struct _POP_THERMAL_TELEMETRY_TRACKER TelemetryTracker;
  /* 0x0410 */ struct _UNICODE_STRING Description;
} POP_THERMAL_ZONE, *PPOP_THERMAL_ZONE; /* size: 0x0420 */

enum KD_CALLBACK_ACTION
{
  KdConfigureDeviceAndContinue = 0,
  KdSkipDeviceAndContinue = 1,
  KdConfigureDeviceAndStop = 2,
  KdSkipDeviceAndStop = 3,
};

typedef enum _WORKING_SET_TYPE
{
  WorkingSetTypeUser = 0,
  WorkingSetTypeSystemCache = 1,
  WorkingSetTypeSystemTypes = 1,
  WorkingSetTypePagedPool = 2,
  WorkingSetTypeSystemViews = 3,
  WorkingSetTypeSystemDataViews = 4,
  WorkingSetTypePagableMaximum = 4,
  WorkingSetTypeSystemPtes = 5,
  WorkingSetTypeKernelStacks = 6,
  WorkingSetTypeNonPagedPool = 7,
  WorkingSetTypeSystemSoftWsles = 8,
  WorkingSetTypeLinearAddressProtected = 9,
  WorkingSetTypeMaximum = 10,
} WORKING_SET_TYPE, *PWORKING_SET_TYPE;

typedef struct _PROC_IDLE_POLICY
{
  /* 0x0000 */ unsigned char PromotePercent;
  /* 0x0001 */ unsigned char DemotePercent;
  /* 0x0002 */ unsigned char PromotePercentBase;
  /* 0x0003 */ unsigned char DemotePercentBase;
  /* 0x0004 */ unsigned char AllowScaling;
  /* 0x0005 */ unsigned char ForceLightIdle;
} PROC_IDLE_POLICY, *PPROC_IDLE_POLICY; /* size: 0x0006 */

typedef struct _MMPAGE_FILE_EXPANSION_FLAGS
{
  /* 0x0000 */ unsigned char PageFileNumber : 8; /* bit position: 0 */
  /* 0x0001 */ unsigned char Spare1 : 8; /* bit position: 0 */
  /* 0x0002 */ unsigned char Spare2 : 8; /* bit position: 0 */
  struct /* bitfield */
  {
    /* 0x0003 */ unsigned char IgnoreCurrentCommit : 1; /* bit position: 0 */
    /* 0x0003 */ unsigned char IncreaseMinimumSize : 1; /* bit position: 1 */
    /* 0x0003 */ unsigned char AttemptForCantExtend : 1; /* bit position: 2 */
    /* 0x0003 */ unsigned char UnusedSegmentDeletion : 1; /* bit position: 3 */
    /* 0x0003 */ unsigned char PageFileContract : 1; /* bit position: 4 */
    /* 0x0003 */ unsigned char NoWait : 1; /* bit position: 5 */
    /* 0x0003 */ unsigned char BeingProcessed : 1; /* bit position: 6 */
    /* 0x0003 */ unsigned char Spare3 : 1; /* bit position: 7 */
  }; /* bitfield */
} MMPAGE_FILE_EXPANSION_FLAGS, *PMMPAGE_FILE_EXPANSION_FLAGS; /* size: 0x0004 */

typedef enum _HAL_CLOCK_TIMER_MODE
{
  HalClockTimerModePeriodic = 0,
  HalClockTimerModeOneShot = 1,
  HalClockTimerModeMax = 2,
} HAL_CLOCK_TIMER_MODE, *PHAL_CLOCK_TIMER_MODE;

typedef enum _POP_FX_RELATION_TYPE
{
  PopFxRelationTypeDevice = 0,
  PopFxRelationTypeComponent = 1,
  PopFxRelationTypeMax = 2,
} POP_FX_RELATION_TYPE, *PPOP_FX_RELATION_TYPE;

typedef struct _CM_KEY_NODE
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x000c */ unsigned char AccessBits;
  struct /* bitfield */
  {
    /* 0x000d */ unsigned char LayerSemantics : 2; /* bit position: 0 */
    /* 0x000d */ unsigned char Spare1 : 5; /* bit position: 2 */
    /* 0x000d */ unsigned char InheritClass : 1; /* bit position: 7 */
  }; /* bitfield */
  /* 0x000e */ unsigned short Spare2;
  /* 0x0010 */ unsigned long Parent;
  /* 0x0014 */ unsigned long SubKeyCounts[2];
  union
  {
    struct
    {
      /* 0x001c */ unsigned long SubKeyLists[2];
      /* 0x0024 */ struct _CHILD_LIST ValueList;
    }; /* size: 0x0010 */
    /* 0x001c */ struct _CM_KEY_REFERENCE ChildHiveReference;
  }; /* size: 0x0010 */
  /* 0x002c */ unsigned long Security;
  /* 0x0030 */ unsigned long Class;
  struct /* bitfield */
  {
    /* 0x0034 */ unsigned long MaxNameLen : 16; /* bit position: 0 */
    /* 0x0034 */ unsigned long UserFlags : 4; /* bit position: 16 */
    /* 0x0034 */ unsigned long VirtControlFlags : 4; /* bit position: 20 */
    /* 0x0034 */ unsigned long Debug : 8; /* bit position: 24 */
  }; /* bitfield */
  /* 0x0038 */ unsigned long MaxClassLen;
  /* 0x003c */ unsigned long MaxValueNameLen;
  /* 0x0040 */ unsigned long MaxValueDataLen;
  /* 0x0044 */ unsigned long WorkVar;
  /* 0x0048 */ unsigned short NameLength;
  /* 0x004a */ unsigned short ClassLength;
  /* 0x004c */ wchar_t Name[1];
  /* 0x004e */ char __PADDING__[2];
} CM_KEY_NODE, *PCM_KEY_NODE; /* size: 0x0050 */

typedef struct _CM_KEY_VALUE
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short NameLength;
  /* 0x0004 */ unsigned long DataLength;
  /* 0x0008 */ unsigned long Data;
  /* 0x000c */ unsigned long Type;
  /* 0x0010 */ unsigned short Flags;
  /* 0x0012 */ unsigned short Spare;
  /* 0x0014 */ wchar_t Name[1];
  /* 0x0016 */ char __PADDING__[2];
} CM_KEY_VALUE, *PCM_KEY_VALUE; /* size: 0x0018 */

typedef struct _CM_KEY_INDEX
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Count;
  /* 0x0004 */ unsigned long List[1];
} CM_KEY_INDEX, *PCM_KEY_INDEX; /* size: 0x0008 */

typedef struct _CM_BIG_DATA
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Count;
  /* 0x0004 */ unsigned long List;
} CM_BIG_DATA, *PCM_BIG_DATA; /* size: 0x0008 */

typedef union _u
{
  union
  {
    /* 0x0000 */ struct _CM_KEY_NODE KeyNode;
    /* 0x0000 */ struct _CM_KEY_VALUE KeyValue;
    /* 0x0000 */ struct _CM_KEY_SECURITY KeySecurity;
    /* 0x0000 */ struct _CM_KEY_INDEX KeyIndex;
    /* 0x0000 */ struct _CM_BIG_DATA ValueData;
    /* 0x0000 */ unsigned long KeyList[1];
    /* 0x0000 */ wchar_t KeyString[1];
  }; /* size: 0x0050 */
} u, *Pu; /* size: 0x0050 */

typedef struct _I386_LOADER_BLOCK
{
  /* 0x0000 */ void* CommonDataArea;
  /* 0x0008 */ unsigned long MachineType;
  /* 0x000c */ unsigned long VirtualBias;
} I386_LOADER_BLOCK, *PI386_LOADER_BLOCK; /* size: 0x0010 */

typedef struct _ARM_LOADER_BLOCK
{
  /* 0x0000 */ unsigned long PlaceHolder;
} ARM_LOADER_BLOCK, *PARM_LOADER_BLOCK; /* size: 0x0004 */

typedef struct _LOADER_PARAMETER_BLOCK
{
  /* 0x0000 */ unsigned long OsMajorVersion;
  /* 0x0004 */ unsigned long OsMinorVersion;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long OsLoaderSecurityVersion;
  /* 0x0010 */ struct _LIST_ENTRY LoadOrderListHead;
  /* 0x0020 */ struct _LIST_ENTRY MemoryDescriptorListHead;
  /* 0x0030 */ struct _LIST_ENTRY BootDriverListHead;
  /* 0x0040 */ struct _LIST_ENTRY EarlyLaunchListHead;
  /* 0x0050 */ struct _LIST_ENTRY CoreDriverListHead;
  /* 0x0060 */ struct _LIST_ENTRY CoreExtensionsDriverListHead;
  /* 0x0070 */ struct _LIST_ENTRY TpmCoreDriverListHead;
  /* 0x0080 */ unsigned __int64 KernelStack;
  /* 0x0088 */ unsigned __int64 Prcb;
  /* 0x0090 */ unsigned __int64 Process;
  /* 0x0098 */ unsigned __int64 Thread;
  /* 0x00a0 */ unsigned long KernelStackSize;
  /* 0x00a4 */ unsigned long RegistryLength;
  /* 0x00a8 */ void* RegistryBase;
  /* 0x00b0 */ struct _CONFIGURATION_COMPONENT_DATA* ConfigurationRoot;
  /* 0x00b8 */ char* ArcBootDeviceName;
  /* 0x00c0 */ char* ArcHalDeviceName;
  /* 0x00c8 */ char* NtBootPathName;
  /* 0x00d0 */ char* NtHalPathName;
  /* 0x00d8 */ char* LoadOptions;
  /* 0x00e0 */ struct _NLS_DATA_BLOCK* NlsData;
  /* 0x00e8 */ struct _ARC_DISK_INFORMATION* ArcDiskInformation;
  /* 0x00f0 */ struct _LOADER_PARAMETER_EXTENSION* Extension;
  union
  {
    union
    {
      /* 0x00f8 */ struct _I386_LOADER_BLOCK I386;
      /* 0x00f8 */ struct _ARM_LOADER_BLOCK Arm;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ u;
  /* 0x0108 */ struct _FIRMWARE_INFORMATION_LOADER_BLOCK FirmwareInformation;
  /* 0x0148 */ char* OsBootstatPathName;
  /* 0x0150 */ char* ArcOSDataDeviceName;
  /* 0x0158 */ char* ArcWindowsSysPartName;
  /* 0x0160 */ struct _RTL_RB_TREE MemoryDescriptorTree;
} LOADER_PARAMETER_BLOCK, *PLOADER_PARAMETER_BLOCK; /* size: 0x0170 */

enum _HAL_PMU_COUNTER_TYPEtypedef struct _MI_WRITE_CALIBRATION
{
  /* 0x0000 */ unsigned long MaximumNumberProcessors;
  /* 0x0004 */ unsigned char OptimalWriteType;
  /* 0x0005 */ unsigned char CalibrationCompleted;
  /* 0x0006 */ unsigned char CalibrationFinal[2];
  /* 0x0008 */ unsigned __int64 PerProcessorNumberOfBytes;
  /* 0x0010 */ unsigned __int64 PerProcessorBandwidth[2];
  /* 0x0020 */ unsigned long OptimalWriteProcessors[2][2];
  /* 0x0030 */ struct _MI_WRITE_MODES* PureZeroing;
} MI_WRITE_CALIBRATION, *PMI_WRITE_CALIBRATION; /* size: 0x0038 */

typedef struct _PPM_IDLE_STATE
{
  /* 0x0000 */ struct _KAFFINITY_EX DomainMembers;
  /* 0x0108 */ struct _UNICODE_STRING Name;
  /* 0x0118 */ unsigned long Latency;
  /* 0x011c */ unsigned long BreakEvenDuration;
  /* 0x0120 */ unsigned long Power;
  /* 0x0124 */ unsigned long StateFlags;
  /* 0x0128 */ struct _PPM_VETO_ACCOUNTING VetoAccounting;
  /* 0x0150 */ unsigned char StateType;
  /* 0x0151 */ unsigned char InterruptsEnabled;
  /* 0x0152 */ unsigned char Interruptible;
  /* 0x0153 */ unsigned char ContextRetained;
  /* 0x0154 */ unsigned char CacheCoherent;
  /* 0x0155 */ unsigned char WakesSpuriously;
  /* 0x0156 */ unsigned char PlatformOnly;
  /* 0x0157 */ unsigned char NoCState;
} PPM_IDLE_STATE, *PPPM_IDLE_STATE; /* size: 0x0158 */

typedef enum _PROCESSOR_CACHE_TYPE
{
  CacheUnified = 0,
  CacheInstruction = 1,
  CacheData = 2,
  CacheTrace = 3,
  CacheUnknown = 4,
} PROCESSOR_CACHE_TYPE, *PPROCESSOR_CACHE_TYPE;

typedef enum _CC_LWS_PACKET_TYPE
{
  LWSPacket_Invalid = 0,
  LWSPacket_Partition = 1,
  LWSPacket_PrivateVCM = 2,
  LWSPacket_Max = 3,
} CC_LWS_PACKET_TYPE, *PCC_LWS_PACKET_TYPE;

typedef enum _PS_PROTECTED_SIGNER
{
  PsProtectedSignerNone = 0,
  PsProtectedSignerAuthenticode = 1,
  PsProtectedSignerCodeGen = 2,
  PsProtectedSignerAntimalware = 3,
  PsProtectedSignerLsa = 4,
  PsProtectedSignerWindows = 5,
  PsProtectedSignerWinTcb = 6,
  PsProtectedSignerWinSystem = 7,
  PsProtectedSignerApp = 8,
  PsProtectedSignerMax = 9,
} PS_PROTECTED_SIGNER, *PPS_PROTECTED_SIGNER;

typedef struct _DBGKD_BREAKPOINTEX
{
  /* 0x0000 */ unsigned long BreakPointCount;
  /* 0x0004 */ long ContinueStatus;
} DBGKD_BREAKPOINTEX, *PDBGKD_BREAKPOINTEX; /* size: 0x0008 */

typedef struct _DEVICE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Failed : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReadOnly : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long Removable : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long ConsoleIn : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long ConsoleOut : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long Input : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long Output : 1; /* bit position: 6 */
  }; /* bitfield */
} DEVICE_FLAGS, *PDEVICE_FLAGS; /* size: 0x0004 */

typedef enum _ETW_PERIODIC_TIMER_STATE
{
  EtwpPeriodicTimerUnset = 0,
  EtwpPeriodicTimerSet = 1,
} ETW_PERIODIC_TIMER_STATE, *PETW_PERIODIC_TIMER_STATE;

typedef enum _MI_CFG_BITMAP_TYPE
{
  CfgBitMapNative = 0,
  CfgBitMapWow64 = 1,
  CfgBitMapMax = 2,
} MI_CFG_BITMAP_TYPE, *PMI_CFG_BITMAP_TYPE;

typedef enum _KTHREAD_PPM_POLICY
{
  ThreadPpmDefault = 0,
  ThreadPpmThrottle = 1,
  ThreadPpmSemiThrottle = 2,
  ThreadPpmNoThrottle = 3,
  ThreadPpmMaximumThrottle = 4,
  MaxThreadPpmPolicy = 5,
} KTHREAD_PPM_POLICY, *PKTHREAD_PPM_POLICY;

typedef enum _ACCEL_COMPRESSION_FORMAT
{
  AccelCompressionFormatNone = 0,
  AccelCompressionFormatDeflate = 1,
  AccelCompressionFormatHuffman = 2,
  AccelCompressionFormatMax = 3,
} ACCEL_COMPRESSION_FORMAT, *PACCEL_COMPRESSION_FORMAT;

typedef struct _SMBIOS3_TABLE_HEADER
{
  /* 0x0000 */ unsigned char Signature[5];
  /* 0x0005 */ unsigned char Checksum;
  /* 0x0006 */ unsigned char Length;
  /* 0x0007 */ unsigned char MajorVersion;
  /* 0x0008 */ unsigned char MinorVersion;
  /* 0x0009 */ unsigned char Docrev;
  /* 0x000a */ unsigned char EntryPointRevision;
  /* 0x000b */ unsigned char Reserved;
  /* 0x000c */ unsigned long StructureTableMaximumSize;
  /* 0x0010 */ unsigned __int64 StructureTableAddress;
} SMBIOS3_TABLE_HEADER, *PSMBIOS3_TABLE_HEADER; /* size: 0x0018 */

typedef enum _PROCESS_VA_TYPE
{
  ProcessVAImage = 0,
  ProcessVASection = 1,
  ProcessVAPrivate = 2,
  ProcessVAMax = 3,
} PROCESS_VA_TYPE, *PPROCESS_VA_TYPE;

typedef enum _KTHREAD_STATE
{
  Initialized = 0,
  Ready = 1,
  Running = 2,
  Standby = 3,
  Terminated = 4,
  Waiting = 5,
  Transition = 6,
  DeferredReady = 7,
  GateWaitObsolete = 8,
  WaitingForProcessInSwap = 9,
} KTHREAD_STATE, *PKTHREAD_STATE;

typedef struct _ARC_DISK_INFORMATION
{
  /* 0x0000 */ struct _LIST_ENTRY DiskSignatures;
} ARC_DISK_INFORMATION, *PARC_DISK_INFORMATION; /* size: 0x0010 */

typedef enum _PS_RESOURCE_TYPE
{
  PsResourceNonPagedPool = 0,
  PsResourcePagedPool = 1,
  PsResourcePageFile = 2,
  PsResourceWorkingSet = 3,
  PsResourceMax = 4,
} PS_RESOURCE_TYPE, *PPS_RESOURCE_TYPE;

typedef enum _RTL_SYSTEM_OVERRIDE_ENUM
{
  RtlSysOvrdUserAmd64First = 0,
  RtlSysOvrdUserAmd64CfgDispatchRva = 0,
  RtlSysOvrdUserAmd64CfgDispatchESRva = 1,
  RtlSysOvrdUserAmd64CfgCheckRva = 2,
  RtlSysOvrdUserAmd64CfgCheckESRva = 3,
  RtlSysOvrdUserAmd64Last = 3,
  RtlSysOvrdKernelAmd64First = 4,
  RtlSysOvrdKernelAmd64CfgDispatchRva = 4,
  RtlSysOvrdKernelAmd64CfgCheckRva = 5,
  RtlSysOvrdKernelAmd64Last = 5,
  RtlSysOvrdUserArm64First = 6,
  RtlSysOvrdUserArm64CfgDispatchRva = 6,
  RtlSysOvrdUserArm64CfgDispatchESRva = 7,
  RtlSysOvrdUserArm64CfgCheckRva = 8,
  RtlSysOvrdUserArm64CfgCheckESRva = 9,
  RtlSysOvrdUserArm64EcCfgCheckRva = 10,
  RtlSysOvrdUserArm64EcCfgCheckESRva = 11,
  RtlSysOvrdUserArm64EcCallCheckRva = 12,
  RtlSysOvrdUserArm64Last = 12,
  RtlSysOvrdKernelArm64First = 13,
  RtlSysOvrdKernelArm64CfgDispatchRva = 13,
  RtlSysOvrdKernelArm64CfgCheckRva = 14,
  RtlSysOvrdKernelArm64Last = 14,
  RtlSysOvrdCount = 15,
} RTL_SYSTEM_OVERRIDE_ENUM, *PRTL_SYSTEM_OVERRIDE_ENUM;

typedef enum _MI_SHARED_USER_PAGE_TYPES
{
  MiSharedUserPageKernel = 0,
  MiSharedUserPageHypervisor = 1,
  MiSharedUserPageMaximum = 2,
} MI_SHARED_USER_PAGE_TYPES, *PMI_SHARED_USER_PAGE_TYPES;

typedef struct _PPM_SELECTION_STATISTICS
{
  /* 0x0000 */ unsigned __int64 SelectedCount;
  /* 0x0008 */ unsigned __int64 VetoCount;
  /* 0x0010 */ unsigned __int64 PreVetoCount;
  /* 0x0018 */ unsigned __int64 WrongProcessorCount;
  /* 0x0020 */ unsigned __int64 LatencyCount;
  /* 0x0028 */ unsigned __int64 IdleDurationCount;
  /* 0x0030 */ unsigned __int64 DeviceDependencyCount;
  /* 0x0038 */ unsigned __int64 ProcessorDependencyCount;
  /* 0x0040 */ unsigned __int64 PlatformOnlyCount;
  /* 0x0048 */ unsigned __int64 InterruptibleCount;
  /* 0x0050 */ unsigned __int64 LegacyOverrideCount;
  /* 0x0058 */ unsigned __int64 CstateCheckCount;
  /* 0x0060 */ unsigned __int64 NoCStateCount;
  /* 0x0068 */ unsigned __int64 CoordinatedDependencyCount;
  /* 0x0070 */ unsigned __int64 NotClockOwnerCount;
  /* 0x0078 */ unsigned __int64 DependencyIdleDurationCount;
  /* 0x0080 */ unsigned __int64 DependencyLatencyCount;
  /* 0x0088 */ struct _PPM_VETO_ACCOUNTING* PreVetoAccounting;
} PPM_SELECTION_STATISTICS, *PPPM_SELECTION_STATISTICS; /* size: 0x0090 */

typedef union _PPM_IDLE_SYNCHRONIZATION_STATE
{
  union
  {
    /* 0x0000 */ long AsLong;
    struct /* bitfield */
    {
      /* 0x0000 */ long RefCount : 24; /* bit position: 0 */
      /* 0x0000 */ unsigned long State : 8; /* bit position: 24 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PPM_IDLE_SYNCHRONIZATION_STATE, *PPPM_IDLE_SYNCHRONIZATION_STATE; /* size: 0x0004 */

typedef enum _HEAP_SEGMGR_LARGE_PAGE_POLICY
{
  HeapSegMgrNoLargePages = 0,
  HeapSegMgrEnableLargePages = 1,
  HeapSegMgrNormalPolicy = 1,
  HeapSegMgrForceSmall = 2,
  HeapSegMgrForceLarge = 3,
  HeapSegMgrForceRandom = 4,
  HeapSegMgrLargePagePolicyMax = 5,
} HEAP_SEGMGR_LARGE_PAGE_POLICY, *PHEAP_SEGMGR_LARGE_PAGE_POLICY;

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE
{
  PerfInfoMemUsagePfnMetadata = 0,
  PerfInfoMemUsageMax = 1,
} PERFINFO_KERNELMEMORY_USAGE_TYPE, *PPERFINFO_KERNELMEMORY_USAGE_TYPE;

typedef enum _MI_DYNAMICBASE_BITMAP
{
  DynamicBaseBitMapNative = 0,
  DynamicBaseBitMap64Low = 1,
  DynamicBaseBitMap64LowWow = 2,
  DynamicBaseBitMap32WowFirst = 3,
  DynamicBaseBitMap32WowLast = 3,
  DynamicBaseBitMapInvalid = 4,
  DynamicBaseBitMapMax = 4,
} MI_DYNAMICBASE_BITMAP, *PMI_DYNAMICBASE_BITMAP;

typedef enum _MI_PAGE_MOVE_IN_PROGRESS_TYPES
{
  MiPageMoveInProgressSmall = 0,
  MiPageMoveInProgressLarge = 1,
  MiPageMoveInProgressHugeRange = 2,
  MiPageMoveInProgressMaximum = 3,
} MI_PAGE_MOVE_IN_PROGRESS_TYPES, *PMI_PAGE_MOVE_IN_PROGRESS_TYPES;

typedef struct _IOMMU_DMA_DOMAIN
{
  /* 0x0000 */ struct _HALP_DMA_DOMAIN_OBJECT* DmaDomainOwner;
  /* 0x0008 */ enum _IOMMU_DMA_DOMAIN_TYPE DomainType;
  /* 0x000c */ enum _EXT_IOMMU_TRANSLATION_TYPE TranslationType;
  /* 0x0010 */ struct _LIST_ENTRY HardwareDomainListHead;
  /* 0x0020 */ unsigned __int64 HardwareDomainListLock;
  /* 0x0028 */ struct _DMAR_PAGE_TABLE_STATE* DmarptState;
  /* 0x0030 */ unsigned long DomainId;
  /* 0x0034 */ unsigned char IsStage1;
  /* 0x0035 */ char Padding_146[3];
  /* 0x0038 */ unsigned long Asid;
  /* 0x003c */ long Padding_147;
  /* 0x0040 */ struct _IOMMU_DMA_LOGICAL_ALLOCATOR* LogicalAllocator;
  /* 0x0048 */ struct _LIST_ENTRY AttachedDevicesList;
  /* 0x0058 */ volatile long AttachedDevicesListLock;
  /* 0x005c */ unsigned long HvReferences;
  /* 0x0060 */ unsigned char HvDomainIdAllocated;
  /* 0x0061 */ char Padding_148[7];
  /* 0x0068 */ struct _EX_PUSH_LOCK HvPushLock;
} IOMMU_DMA_DOMAIN, *PIOMMU_DMA_DOMAIN; /* size: 0x0070 */

typedef enum _HEAP_LFH_METADATA_TYPE
{
  HeapLfhMetadataSlotMap = 0,
  HeapLfhMetadataHeatMap = 1,
  HeapLfhMetadataSlot = 2,
  HeapLfhMetadataSlotStandby = 3,
  HeapLfhMetadataMax = 4,
} HEAP_LFH_METADATA_TYPE, *PHEAP_LFH_METADATA_TYPE;

typedef struct _POP_PPM_PROFILE
{
  /* 0x0000 */ wchar_t* Name;
  /* 0x0008 */ unsigned char Id;
  /* 0x0009 */ char Padding_149[3];
  /* 0x000c */ struct _GUID Guid;
  /* 0x001c */ unsigned long Flags;
  /* 0x0020 */ unsigned char Priority;
  /* 0x0021 */ char Padding_150[7];
  /* 0x0028 */ struct _PPM_ENGINE_SETTINGS Settings[2];
  /* 0x03f8 */ unsigned __int64 StartTime;
  /* 0x0400 */ unsigned __int64 Count;
  /* 0x0408 */ unsigned __int64 MaxDuration;
  /* 0x0410 */ unsigned __int64 MinDuration;
  /* 0x0418 */ unsigned __int64 TotalDuration;
} POP_PPM_PROFILE, *PPOP_PPM_PROFILE; /* size: 0x0420 */

typedef enum _PPM_PERF_QOS_DISABLE_REASON
{
  PpmPerfQosDisableInternal = 0,
  PpmPerfQosDisableNoProfile = 1,
  PpmPerfQosDisableNoPolicy = 2,
  PpmPerfQosDisableInsufficientPolicy = 3,
  PpmPerfQosDisableMaxOverride = 4,
  PpmPerfQosDisableLowLatency = 5,
  PpmPerfQosDisableSmtScheduler = 6,
  PpmPerfQosDisableNoHardwareSupport = 7,
  PpmPerfQosDisableGroupPolicy = 8,
  PpmPerfQosDisableMax = 9,
} PPM_PERF_QOS_DISABLE_REASON, *PPPM_PERF_QOS_DISABLE_REASON;

typedef struct _PPM_FFH_THROTTLE_STATE_INFO
{
  /* 0x0000 */ unsigned char EnableLogging;
  /* 0x0001 */ char Padding_151[3];
  /* 0x0004 */ unsigned long MismatchCount;
  /* 0x0008 */ unsigned char Initialized;
  /* 0x0009 */ char Padding_152[7];
  /* 0x0010 */ unsigned __int64 LastValue;
  /* 0x0018 */ union _LARGE_INTEGER LastLogTickCount;
} PPM_FFH_THROTTLE_STATE_INFO, *PPPM_FFH_THROTTLE_STATE_INFO; /* size: 0x0020 */

typedef struct _MMDEREFERENCE_SEGMENT_HEADER
{
  /* 0x0000 */ struct _KEVENT Event;
  /* 0x0018 */ struct _LIST_ENTRY ControlAreaDeleteListHead;
  /* 0x0028 */ struct _LIST_ENTRY UnusedSegmentDeleteListHead;
  /* 0x0038 */ struct _LIST_ENTRY PagefileExtensionListHead;
} MMDEREFERENCE_SEGMENT_HEADER, *PMMDEREFERENCE_SEGMENT_HEADER; /* size: 0x0048 */

typedef enum _REFS_STREAM_SNAPSHOT_OPERATION
{
  REFS_STREAM_SNAPSHOT_OPERATION_INVALID = 0,
  REFS_STREAM_SNAPSHOT_OPERATION_CREATE = 1,
  REFS_STREAM_SNAPSHOT_OPERATION_LIST = 2,
  REFS_STREAM_SNAPSHOT_OPERATION_QUERY_DELTAS = 3,
  REFS_STREAM_SNAPSHOT_OPERATION_REVERT = 4,
  REFS_STREAM_SNAPSHOT_OPERATION_SET_SHADOW_BTREE = 5,
  REFS_STREAM_SNAPSHOT_OPERATION_CLEAR_SHADOW_BTREE = 6,
  REFS_STREAM_SNAPSHOT_OPERATION_MAX = 6,
} REFS_STREAM_SNAPSHOT_OPERATION, *PREFS_STREAM_SNAPSHOT_OPERATION;

typedef enum _MI_STORE_VIRTUAL_PAGEFILE_VALUE
{
  MiStoreVirtualPagefileValueInvalid = 0,
  MiStoreVirtualPagefileValueStart = 2,
  MiStoreVirtualPagefileSwap = 2,
  MiStoreVirtualPagefileCompress = 3,
  MiStoreVirtualPagefileNoCompress = 4,
  MiStoreVirtualPagefileMax = 5,
} MI_STORE_VIRTUAL_PAGEFILE_VALUE, *PMI_STORE_VIRTUAL_PAGEFILE_VALUE;

typedef enum _PPM_HETERO_CONTAINMENT_POLICY
{
  PpmHeteroContainmentPolicyDisabled = 0,
  PpmHeteroContainmentPolicyEnabled = 1,
  PpmHeteroContainmentPolicyMaximum = 1,
} PPM_HETERO_CONTAINMENT_POLICY, *PPPM_HETERO_CONTAINMENT_POLICY;

enum FEATURE_ENABLED_STATE
{
  FEATURE_ENABLED_STATE_DEFAULT = 0,
  FEATURE_ENABLED_STATE_DISABLED = 1,
  FEATURE_ENABLED_STATE_ENABLED = 2,
  FEATURE_ENABLED_STATE_HAS_NOTIFICATION = 128,
  FEATURE_ENABLED_STATE_IS_WEXP_CONFIGURATION = 64,
};

enum IRPLOCK
{
  IRPLOCK_CANCELABLE = 0,
  IRPLOCK_CANCEL_STARTED = 1,
  IRPLOCK_CANCEL_COMPLETE = 2,
  IRPLOCK_COMPLETED = 3,
};

typedef enum _KTHREAD_CORE_ISOLATION_REASON
{
  KThreadCoreIsolationReasonSimulation = 0,
  KThreadCoreIsolationReasonMitigationPolicy = 1,
  KThreadCoreIsolationReasonSecureCall = 2,
  KThreadCoreIsolationReasonMax = 3,
} KTHREAD_CORE_ISOLATION_REASON, *PKTHREAD_CORE_ISOLATION_REASON;

typedef struct _MI_VAD_SEQUENTIAL_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Length : 12; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Vpn : 51; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 MustBeZero : 1; /* bit position: 63 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 EntireField;
  }; /* size: 0x0008 */
} MI_VAD_SEQUENTIAL_INFO, *PMI_VAD_SEQUENTIAL_INFO; /* size: 0x0008 */

typedef enum _PNP_DEVICE_DELETE_TYPE
{
  QueryRemoveDevice = 0,
  CancelRemoveDevice = 1,
  RemoveDevice = 2,
  SurpriseRemoveDevice = 3,
  EjectDevice = 4,
  RemoveFailedDevice = 5,
  RemoveUnstartedFailedDevice = 6,
  MaxDeviceDeleteType = 7,
} PNP_DEVICE_DELETE_TYPE, *PPNP_DEVICE_DELETE_TYPE;

typedef struct _HALP_DMA_DOMAIN_OBJECT
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ union _LARGE_INTEGER MaximumPhysicalAddress;
  /* 0x0018 */ union _LARGE_INTEGER BoundaryAddressMultiple;
  /* 0x0020 */ unsigned char CacheCoherent;
  /* 0x0021 */ unsigned char FirmwareReserved;
  /* 0x0022 */ char Padding_153[6];
  /* 0x0028 */ struct _IOMMU_DMA_DOMAIN* IommuDomainPointer;
  /* 0x0030 */ enum _HALP_DMA_TRANSLATION_TYPE TranslationType;
  /* 0x0034 */ long Padding_154;
  /* 0x0038 */ struct _ADAPTER_OBJECT* OwningAdapter;
  /* 0x0040 */ struct _RTL_RB_TREE CommonBufferRoot;
  /* 0x0050 */ unsigned __int64 CommonBufferTreeLock;
  /* 0x0058 */ struct _LIST_ENTRY VectorCommonBufferListHead;
  /* 0x0068 */ unsigned __int64 VectorCommonBufferLock;
  /* 0x0070 */ unsigned long DomainRefCount;
  /* 0x0074 */ long __PADDING__[1];
} HALP_DMA_DOMAIN_OBJECT, *PHALP_DMA_DOMAIN_OBJECT; /* size: 0x0078 */

typedef struct _PROFILE_PARAMETER_BLOCK
{
  /* 0x0000 */ unsigned short Status;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned short DockingState;
  /* 0x0006 */ unsigned short Capabilities;
  /* 0x0008 */ unsigned long DockID;
  /* 0x000c */ unsigned long SerialNumber;
} PROFILE_PARAMETER_BLOCK, *PPROFILE_PARAMETER_BLOCK; /* size: 0x0010 */

typedef enum _MI_MEMORY_HIGHLOW
{
  MiMemoryHigh = 0,
  MiMemoryLow = 1,
  MiMemoryHighLow = 2,
} MI_MEMORY_HIGHLOW, *PMI_MEMORY_HIGHLOW;

typedef enum _KI_FORCE_PARK_DUTY_CYCLE_TRANSITION
{
  KiForceParkDutyCycleTransitionNone = 0,
  KiForceParkDutyCycleTransitionArm = 1,
  KiForceParkDutyCycleTransitionStart = 2,
  KiForceParkDutyCycleTransitionStop = 3,
  KiForceParkDutyCycleTransitionDisarm = 4,
} KI_FORCE_PARK_DUTY_CYCLE_TRANSITION, *PKI_FORCE_PARK_DUTY_CYCLE_TRANSITION;

typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long Action;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long OperationStatus;
  /* 0x0010 */ unsigned long ExtendedError;
  /* 0x0014 */ unsigned long TargetDetailedError;
  /* 0x0018 */ unsigned long ReservedStatus;
  /* 0x001c */ unsigned long OutputBlockOffset;
  /* 0x0020 */ unsigned long OutputBlockLength;
} DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT; /* size: 0x0024 */

typedef enum _PCI_BUSMASTER_RID_TYPE
{
  BusmasterRidInvalid = 0,
  BusmasterRidFromDeviceRid = 1,
  BusmasterRidFromBridgeRid = 2,
  BusmasterRidFromMultipleBridges = 3,
} PCI_BUSMASTER_RID_TYPE, *PPCI_BUSMASTER_RID_TYPE;

typedef enum _JOBOBJECT_PAGE_PRIORITY_LIMIT_FLAGS
{
  JOBOBJECT_PAGE_PRIORITY_LIMIT_ENABLE = 1,
  JOBOBJECT_PAGE_PRIORITY_LIMIT_VALID_FLAGS = 1,
} JOBOBJECT_PAGE_PRIORITY_LIMIT_FLAGS, *PJOBOBJECT_PAGE_PRIORITY_LIMIT_FLAGS;

typedef enum _POP_FX_WORK_POOL_QUEUE
{
  PopFxWorkPoolQueueEmergency = 0,
  PopFxWorkPoolQueuePlugin = 1,
  PopFxWorkPoolQueueMax = 2,
} POP_FX_WORK_POOL_QUEUE, *PPOP_FX_WORK_POOL_QUEUE;

typedef enum _PPM_POLICY_SETTINGS
{
  PpmPolicySettingPerfDecreaseTime = 0,
  PpmPolicySettingPerfIncreaseTime = 1,
  PpmPolicySettingPerfDecreasePolicy = 2,
  PpmPolicySettingPerfIncreasePolicy = 3,
  PpmPolicySettingPerfDecreaseThreshold = 4,
  PpmPolicySettingPerfIncreaseThreshold = 5,
  PpmPolicySettingPerfMinPolicy = 6,
  PpmPolicySettingPerfMaxPolicy = 7,
  PpmPolicySettingPerfTimeCheck = 8,
  PpmPolicySettingPerfBoostPolicy = 9,
  PpmPolicySettingPerfBoostMode = 10,
  PpmPolicySettingThrottlingPolicy = 11,
  PpmPolicySettingPerfHistoryCount = 12,
  PpmPolicySettingParkingPerfState = 13,
  PpmPolicySettingLatencyHintPerf = 14,
  PpmPolicySettingLatencyHintEpp = 15,
  PpmPolicySettingLatencyHintUnpark = 16,
  PpmPolicySettingCPMinCores = 17,
  PpmPolicySettingCPMaxCores = 18,
  PpmPolicySettingCPDecreasePolicy = 19,
  PpmPolicySettingCPIncreasePolicy = 20,
  PpmPolicySettingCPDecreaseTime = 21,
  PpmPolicySettingCPIncreaseTime = 22,
  PpmPolicySettingCPOverUtilizationThreshold = 23,
  PpmPolicySettingCPDistributeUtility = 24,
  PpmPolicySettingCPConcurrencyThreshold = 25,
  PpmPolicySettingCPHeadroomThreshold = 26,
  PpmPolicySettingCPDistributeThreshold = 27,
  PpmPolicySettingIdleAllowScaling = 28,
  PpmPolicySettingIdleDisabled = 29,
  PpmPolicySettingIdleTimeCheck = 30,
  PpmPolicySettingIdleDemoteThreshold = 31,
  PpmPolicySettingIdlePromoteThreshold = 32,
  PpmPolicySettingEnergyPerfPreference = 33,
  PpmPolicySettingAutonomousActivityWindow = 34,
  PpmPolicySettingAutonomousMode = 35,
  PpmPolicySettingDutyCycling = 36,
  PpmPolicySettingFrequencyCap = 37,
  PpmPolicySettingIdleStateMax = 38,
  PpmPolicySettingResponsivenessDisableThreshold = 39,
  PpmPolicySettingResponsivenessEnableThreshold = 40,
  PpmPolicySettingResponsivenessDisableTime = 41,
  PpmPolicySettingResponsivenessEnableTime = 42,
  PpmPolicySettingResponsivenessEppCeiling = 43,
  PpmPolicySettingResponsivenessPerfFloor = 44,
  PpmPolicySettingSoftParkLatency = 45,
  PpmPolicySettingModuleUnparkPolicy = 46,
  PpmPolicySettingComplexUnparkPolicy = 47,
  PpmPolicySettingSmtUnparkPolicy = 48,
  PpmPolicySettingRestrictionCount = 49,
  PpmPolicySettingResourcePriority = 50,
  PpmPolicySettingHeteroDecreaseTime = 51,
  PpmPolicySettingHeteroIncreaseTime = 52,
  PpmPolicySettingHeteroDecreaseThreshold = 53,
  PpmPolicySettingHeteroIncreaseThreshold = 54,
  PpmPolicySettingClass0FloorPerformance = 55,
  PpmPolicySettingClass1InitialPerformance = 56,
  PpmPolicySettingSchedulingPolicy = 57,
  PpmPolicySettingShortSchedulingPolicy = 58,
  PpmPolicySettingShortThreadRuntimeThreshold = 59,
  PpmPolicySettingShortThreadArchClassUpperThreshold = 60,
  PpmPolicySettingShortThreadArchClassLowerThreshold = 61,
  PpmPolicySettingLongThreadArchClassUpperThreshold = 62,
  PpmPolicySettingLongThreadArchClassLowerThreshold = 63,
  PpmPolicySettingHeteroPolicy = 64,
  PpmPolicySettingHeteroContainmentIncreaseTime = 65,
  PpmPolicySettingHeteroContainmentDecreaseTime = 66,
  PpmPolicySettingHeteroEfficiencyContainmentThreshold = 67,
  PpmPolicySettingHeteroHybridContainmentThreshold = 68,
  PpmPolicySettingHeteroContainmentPolicy = 69,
  PpmPolicySettingMax = 70,
} PPM_POLICY_SETTINGS, *PPPM_POLICY_SETTINGS;

typedef enum _POP_SYSTEM_IDLE_EVENT_TYPE
{
  PopSystemIdleEventTypeMonitorOffUserInput = 0,
  PopSystemIdleEventTypeMonitorOnUserInput = 1,
  PopSystemIdleEventTypeUserPresence = 2,
  PopSystemIdleEventTypeResumeFromSxSystemPowerState = 3,
  PopSystemIdleEventTypeMax = 4,
  PopSystemIdleEventTypeInvalid = 4,
} POP_SYSTEM_IDLE_EVENT_TYPE, *PPOP_SYSTEM_IDLE_EVENT_TYPE;

typedef struct _EXT_IOMMU_DEVICE_ID_ACPI
{
  /* 0x0000 */ const char* ObjectName;
} EXT_IOMMU_DEVICE_ID_ACPI, *PEXT_IOMMU_DEVICE_ID_ACPI; /* size: 0x0008 */

enum PS_CREATE_STATE
{
  PsCreateInitialState = 0,
  PsCreateFailOnFileOpen = 1,
  PsCreateFailOnSectionCreate = 2,
  PsCreateFailExeFormat = 3,
  PsCreateFailMachineMismatch = 4,
  PsCreateFailExeName = 5,
  PsCreateSuccess = 6,
  PsCreateMaximumStates = 7,
};

enum MiAttributeChangeCases
{
  PreZeroAttributeChangePfnList = 0,
  PostZeroAttributeChangePfnList = 1,
  MakeCachedPfnList = 2,
  AlreadyCachedPfnList = 3,
  PageAttributeChangeMaximum = 4,
};

typedef enum _KPROCESS_PPM_POLICY
{
  ProcessPpmDefault = 0,
  ProcessPpmThrottle = 1,
  ProcessPpmSemiThrottle = 2,
  ProcessPpmNoThrottle = 3,
  ProcessPpmWindowMinimized = 4,
  ProcessPpmWindowOccluded = 5,
  ProcessPpmWindowVisible = 6,
  ProcessPpmWindowInFocus = 7,
  ProcessPpmMaximumThrottle = 8,
  ProcessPpmWindowInFocusUserIdle = 9,
  MaxProcessPpmPolicy = 10,
} KPROCESS_PPM_POLICY, *PKPROCESS_PPM_POLICY;

typedef struct _PS_TRUSTLET_TKSESSION_ID
{
  /* 0x0000 */ unsigned __int64 SessionId[4];
} PS_TRUSTLET_TKSESSION_ID, *PPS_TRUSTLET_TKSESSION_ID; /* size: 0x0020 */

typedef enum _KI_FORCE_PARK_DUTY_CYCLE_STATE
{
  KiForceParkDutyCycleUnarmed = 0,
  KiForceParkDutyCycleArmed = 1,
  KiForceParkDutyCycleActive = 2,
  KiForceParkDutyCycleMax = 3,
} KI_FORCE_PARK_DUTY_CYCLE_STATE, *PKI_FORCE_PARK_DUTY_CYCLE_STATE;

typedef struct _DBGKD_CONTEXT_EX
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ unsigned long ByteCount;
  /* 0x0008 */ unsigned long BytesCopied;
} DBGKD_CONTEXT_EX, *PDBGKD_CONTEXT_EX; /* size: 0x000c */

typedef enum _MI_UNLINK_MOVE_IN_PROGRESS_ACTION
{
  MiUnlinkMoveInProgressNone = 0,
  MiUnlinkMoveInProgressIncrementLarge = 1,
  MiUnlinkMoveInProgressIncrementSmall = 2,
  MiUnlinkMoveInProgressIncrementBoth = 3,
} MI_UNLINK_MOVE_IN_PROGRESS_ACTION, *PMI_UNLINK_MOVE_IN_PROGRESS_ACTION;

typedef struct _INTERRUPT_TARGET
{
  /* 0x0000 */ enum _INTERRUPT_TARGET_TYPE Target;
  /* 0x0004 */ long Padding_155;
  union
  {
    /* 0x0008 */ unsigned long PhysicalTarget;
    /* 0x0008 */ unsigned long LogicalFlatTarget;
    /* 0x0008 */ unsigned long RemapIndex;
    struct
    {
      /* 0x0008 */ unsigned long ClusterId;
      /* 0x000c */ unsigned long ClusterMask;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0008 */ unsigned long Low32;
      /* 0x000c */ unsigned long High32;
      /* 0x0010 */ unsigned __int64 InterruptData;
    } /* size: 0x0010 */ HypervisorTarget;
  }; /* size: 0x0010 */
} INTERRUPT_TARGET, *PINTERRUPT_TARGET; /* size: 0x0018 */

typedef struct _PPM_SELECTION_MENU_ENTRY
{
  /* 0x0000 */ unsigned char StrictDependency;
  /* 0x0001 */ unsigned char InitiatingState;
  /* 0x0002 */ unsigned char DependentState;
  /* 0x0003 */ char Padding_156;
  /* 0x0004 */ unsigned long StateIndex;
  /* 0x0008 */ unsigned long Dependencies;
  /* 0x000c */ long Padding_157;
  /* 0x0010 */ struct _PPM_SELECTION_DEPENDENCY* DependencyList;
} PPM_SELECTION_MENU_ENTRY, *PPPM_SELECTION_MENU_ENTRY; /* size: 0x0018 */

typedef enum _TlgBlob_t
{
  _TlgBlobNone = 0,
  _TlgBlobEnd = 1,
  _TlgBlobProvider = 2,
  _TlgBlobEvent3 = 3,
  _TlgBlobProvider3 = 4,
  _TlgBlobEvent2 = 5,
  _TlgBlobEvent4 = 6,
  _TlgBlobMax = 7,
} TlgBlob_t, *PTlgBlob_t;

typedef enum _REQUESTER_TYPE
{
  KernelRequester = 0,
  UserProcessRequester = 1,
  UserSharedServiceRequester = 2,
} REQUESTER_TYPE, *PREQUESTER_TYPE;

typedef struct _IOV_IRP_TRACE
{
  /* 0x0000 */ struct _IRP* Irp;
  /* 0x0008 */ struct _KTHREAD* Thread;
  union
  {
    struct
    {
      /* 0x0010 */ short KernelApcDisable;
      /* 0x0012 */ short SpecialApcDisable;
    }; /* size: 0x0004 */
    /* 0x0010 */ unsigned long CombinedApcDisable;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned char Irql;
  /* 0x0015 */ char Padding_158[3];
  /* 0x0018 */ void* StackTrace[13];
} IOV_IRP_TRACE, *PIOV_IRP_TRACE; /* size: 0x0080 */

typedef enum _POP_FX_DEVICE_REFERENCE_TAG
{
  PopFxDeviceReferenceTagIrp = 0,
  PopFxDeviceReferenceTagDriverCallback = 1,
  PopFxDeviceReferenceTagVetoMaskUpdate = 2,
  PopFxDeviceReferenceTagWatchdogList = 3,
  PopFxDeviceReferenceTagWorkQueueItem = 4,
  PopFxDeviceReferenceTagDfx = 5,
  PopFxDeviceReferenceTagRelation = 6,
  PopFxDeviceReferenceTagDeviceActivation = 7,
  PopFxDeviceReferenceTagComponentActivation = 8,
  PopFxDeviceReferenceTagUnregister = 9,
  PopFxDeviceReferenceTagMax = 10,
} POP_FX_DEVICE_REFERENCE_TAG, *PPOP_FX_DEVICE_REFERENCE_TAG;

typedef struct _IOMMU_DMA_LOGICAL_ALLOCATOR
{
  /* 0x0000 */ struct _IOMMU_DMA_LOGICAL_ALLOCATOR_OPERATIONS_V1* Operations;
  /* 0x0008 */ unsigned long Version;
  /* 0x000c */ unsigned long Size;
  /* 0x0010 */ enum _IOMMU_DMA_LOGICAL_ALLOCATOR_TYPE AllocatorType;
  /* 0x0014 */ long __PADDING__[1];
} IOMMU_DMA_LOGICAL_ALLOCATOR, *PIOMMU_DMA_LOGICAL_ALLOCATOR; /* size: 0x0018 */

typedef enum _PO_HIBER_FORCE_DISABLE_REASON
{
  PoHiberForceDisableReasonPolicy = 0,
  PoHiberForceDisableReasonGuardedHost = 1,
  PoHiberForceDisableReasonMax = 2,
} PO_HIBER_FORCE_DISABLE_REASON, *PPO_HIBER_FORCE_DISABLE_REASON;

typedef enum _WOW64_SHARED_INFORMATION
{
  SharedNtdll32LdrInitializeThunk = 0,
  SharedNtdll32KiUserExceptionDispatcher = 1,
  SharedNtdll32KiUserApcDispatcher = 2,
  SharedNtdll32KiUserCallbackDispatcher = 3,
  SharedNtdll32RtlUserThreadStart = 4,
  SharedNtdll32pQueryProcessDebugInformationRemote = 5,
  SharedNtdll32BaseAddress = 6,
  SharedNtdll32LdrSystemDllInitBlock = 7,
  SharedNtdll32RtlpFreezeTimeBias = 8,
  Wow64SharedPageEntriesCount = 9,
} WOW64_SHARED_INFORMATION, *PWOW64_SHARED_INFORMATION;

typedef struct _INTERRUPT_LINE
{
  /* 0x0000 */ unsigned long UnitId;
  /* 0x0004 */ long Line;
} INTERRUPT_LINE, *PINTERRUPT_LINE; /* size: 0x0008 */

typedef struct _PERFINFO_PPM_STATE_SELECTION
{
  /* 0x0000 */ unsigned long SelectedState;
  /* 0x0004 */ unsigned long VetoedStates;
  /* 0x0008 */ unsigned long VetoReason[1];
} PERFINFO_PPM_STATE_SELECTION, *PPERFINFO_PPM_STATE_SELECTION; /* size: 0x000c */

typedef enum _ETW_GUID_TYPE
{
  EtwTraceGuidType = 0,
  EtwNotificationGuidType = 1,
  EtwGroupGuidType = 2,
  EtwGuidTypeMax = 3,
} ETW_GUID_TYPE, *PETW_GUID_TYPE;

typedef union _PEP_ACPI_RESOURCE_FLAGS
{
  union
  {
    /* 0x0000 */ unsigned long AsULong;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Shared : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Wake : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long ResourceUsage : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long SlaveMode : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long AddressingMode : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long SharedMode : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Reserved : 26; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PEP_ACPI_RESOURCE_FLAGS, *PPEP_ACPI_RESOURCE_FLAGS; /* size: 0x0004 */

typedef struct _PEP_ACPI_SPB_RESOURCE
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ union _PEP_ACPI_RESOURCE_FLAGS Flags;
  /* 0x0008 */ unsigned short TypeSpecificFlags;
  /* 0x000a */ unsigned char ResourceSourceIndex;
  /* 0x000b */ char Padding_159[5];
  /* 0x0010 */ struct _UNICODE_STRING* ResourceSourceName;
  /* 0x0018 */ char* VendorData;
  /* 0x0020 */ unsigned short VendorDataLength;
  /* 0x0022 */ char __PADDING__[6];
} PEP_ACPI_SPB_RESOURCE, *PPEP_ACPI_SPB_RESOURCE; /* size: 0x0028 */

typedef enum _POP_DEEP_SLEEP_DISENGAGE_REASON
{
  PopDeepSleepDisengageReasonInactive = 0,
  PopDeepSleepDisengageReasonNonAoAc = 1,
  PopDeepSleepDisengageReasonPendingIrps = 2,
  PopDeepSleepDisengageReasonPowerSettings = 3,
  PopDeepSleepDisengageReasonDozeS4WorkerQueued = 4,
  PopDeepSleepDisengageReasonSystemPowerTransition = 5,
  PopDeepSleepDisengageReasonDeviceBlockingDrips = 6,
  PopDeepSleepDisengageReasonAcpi = 7,
  PopDeepSleepDisengageReasonDirectedDripsTransition = 8,
  PopDeepSleepDisengageReasonPepPreVeto = 9,
  PopDeepSleepDisengageReasonThermal = 10,
  PopDeepSleepDisengageReasonMax = 11,
} POP_DEEP_SLEEP_DISENGAGE_REASON, *PPOP_DEEP_SLEEP_DISENGAGE_REASON;

typedef enum _KWAIT_STATE
{
  WaitInProgress = 0,
  WaitCommitted = 1,
  WaitAborted = 2,
  WaitSuspendInProgress = 3,
  WaitSuspended = 4,
  WaitResumeInProgress = 5,
  WaitResumeAborted = 6,
  WaitFirstSuspendState = 3,
  WaitLastSuspendState = 6,
  MaximumWaitState = 7,
} KWAIT_STATE, *PKWAIT_STATE;

typedef enum _MI_SUBVAD_LISTS
{
  MiSubVadPebTebAny = 0,
  MiSubVadMaximum = 1,
} MI_SUBVAD_LISTS, *PMI_SUBVAD_LISTS;

typedef enum _POLICY_AUDIT_EVENT_TYPE
{
  AuditCategorySystem = 0,
  AuditCategoryLogon = 1,
  AuditCategoryObjectAccess = 2,
  AuditCategoryPrivilegeUse = 3,
  AuditCategoryDetailedTracking = 4,
  AuditCategoryPolicyChange = 5,
  AuditCategoryAccountManagement = 6,
  AuditCategoryDirectoryServiceAccess = 7,
  AuditCategoryAccountLogon = 8,
} POLICY_AUDIT_EVENT_TYPE, *PPOLICY_AUDIT_EVENT_TYPE;

enum KD_NAMESPACE_ENUM
{
  KdNameSpacePCI = 0,
  KdNameSpaceACPI = 1,
  KdNameSpaceAny = 2,
  KdNameSpaceNone = 3,
  KdNameSpaceMax = 4,
};

typedef enum _MI_VAD_64K_TYPES
{
  MiVad64KPrivate = 0,
  MiVad64KShared = 1,
  MiVad64KTypes = 2,
} MI_VAD_64K_TYPES, *PMI_VAD_64K_TYPES;

typedef enum _RTL_SCP_CFG_PAGE_TYPE
{
  RtlScpCfgPageTypeNop = 0,
  RtlScpCfgPageTypeDefault = 1,
  RtlScpCfgPageTypeExportSuppression = 2,
  RtlScpCfgPageTypeFptr = 3,
  RtlScpCfgPageTypeMax = 4,
  RtlScpCfgPageTypeNone = 4,
} RTL_SCP_CFG_PAGE_TYPE, *PRTL_SCP_CFG_PAGE_TYPE;

typedef struct _GENERAL_LOOKASIDE_POOL
{
  union
  {
    /* 0x0000 */ union _SLIST_HEADER ListHead;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SingleListHead;
  }; /* size: 0x0010 */
  /* 0x0010 */ unsigned short Depth;
  /* 0x0012 */ unsigned short MaximumDepth;
  /* 0x0014 */ unsigned long TotalAllocates;
  union
  {
    /* 0x0018 */ unsigned long AllocateMisses;
    /* 0x0018 */ unsigned long AllocateHits;
  }; /* size: 0x0004 */
  /* 0x001c */ unsigned long TotalFrees;
  union
  {
    /* 0x0020 */ unsigned long FreeMisses;
    /* 0x0020 */ unsigned long FreeHits;
  }; /* size: 0x0004 */
  /* 0x0024 */ enum _POOL_TYPE Type;
  /* 0x0028 */ unsigned long Tag;
  /* 0x002c */ unsigned long Size;
  union
  {
    /* 0x0030 */ void* AllocateEx /* function */;
    /* 0x0030 */ void* Allocate /* function */;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0038 */ void* FreeEx /* function */;
    /* 0x0038 */ void* Free /* function */;
  }; /* size: 0x0008 */
  /* 0x0040 */ struct _LIST_ENTRY ListEntry;
  /* 0x0050 */ unsigned long LastTotalAllocates;
  union
  {
    /* 0x0054 */ unsigned long LastAllocateMisses;
    /* 0x0054 */ unsigned long LastAllocateHits;
  }; /* size: 0x0004 */
  /* 0x0058 */ unsigned long Future[2];
} GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL; /* size: 0x0060 */

typedef enum _PNP_DEVICE_IOMMU_DOMAIN_POLICY
{
  IommuDomainPolicyAllowAll = 0,
  IommuDomainPolicyBlockPassthrough = 1,
  IommuDomainPolicyMax = 2,
} PNP_DEVICE_IOMMU_DOMAIN_POLICY, *PPNP_DEVICE_IOMMU_DOMAIN_POLICY;

typedef struct _PROC_IDLE_STATE_BUCKET
{
  /* 0x0000 */ unsigned __int64 TotalTime;
  /* 0x0008 */ unsigned __int64 MinTime;
  /* 0x0010 */ unsigned __int64 MaxTime;
  /* 0x0018 */ unsigned long Count;
  /* 0x001c */ long __PADDING__[1];
} PROC_IDLE_STATE_BUCKET, *PPROC_IDLE_STATE_BUCKET; /* size: 0x0020 */

typedef struct _PLATFORM_IDLE_STATE_ACCOUNTING
{
  /* 0x0000 */ unsigned long CancelCount;
  /* 0x0004 */ unsigned long FailureCount;
  /* 0x0008 */ unsigned long SuccessCount;
  /* 0x000c */ long Padding_160;
  /* 0x0010 */ unsigned __int64 MaxTime;
  /* 0x0018 */ unsigned __int64 MinTime;
  /* 0x0020 */ unsigned __int64 TotalTime;
  /* 0x0028 */ unsigned long InvalidBucketIndex;
  /* 0x002c */ long Padding_161;
  /* 0x0030 */ struct _PPM_SELECTION_STATISTICS SelectionStatistics;
  /* 0x00c0 */ struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];
} PLATFORM_IDLE_STATE_ACCOUNTING, *PPLATFORM_IDLE_STATE_ACCOUNTING; /* size: 0x0400 */

typedef struct _PLATFORM_IDLE_ACCOUNTING
{
  /* 0x0000 */ unsigned long ResetCount;
  /* 0x0004 */ unsigned long StateCount;
  /* 0x0008 */ unsigned long DeepSleepCount;
  /* 0x000c */ long Padding_162;
  /* 0x0010 */ unsigned __int64 DripsWakeSkipCount;
  /* 0x0018 */ enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;
  /* 0x001c */ long Padding_163;
  /* 0x0020 */ unsigned __int64 StartTime;
  /* 0x0028 */ struct _PLATFORM_IDLE_STATE_ACCOUNTING State[1];
} PLATFORM_IDLE_ACCOUNTING, *PPLATFORM_IDLE_ACCOUNTING; /* size: 0x0428 */

typedef struct _KSEMAPHORE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ long Limit;
  /* 0x001c */ long __PADDING__[1];
} KSEMAPHORE, *PKSEMAPHORE; /* size: 0x0020 */

typedef enum _ADD_DRIVER_STAGE
{
  ClassConfigFilters = 0,
  LowerDeviceFilters = 1,
  LowerClassFilters = 2,
  DeviceService = 3,
  UpperDeviceFilters = 4,
  UpperClassFilters = 5,
  MaximumAddStage = 6,
} ADD_DRIVER_STAGE, *PADD_DRIVER_STAGE;

typedef enum _PO_HIBER_COMPRESS_METHOD
{
  CompressMethodXpressFast = 0,
  CompressMethodXpressMax = 1,
  CompressMethodXpressHuffFast = 2,
  CompressMethodXpressHuffMax = 3,
  CompressMethodLz4 = 4,
  CompressMethodMax = 5,
} PO_HIBER_COMPRESS_METHOD, *PPO_HIBER_COMPRESS_METHOD;

enum TlgOut_t
{
  TlgOutNULL = 0,
  TlgOutNOPRINT = 1,
  TlgOutSTRING = 2,
  TlgOutBOOLEAN = 3,
  TlgOutHEX = 4,
  TlgOutPID = 5,
  TlgOutTID = 6,
  TlgOutPORT = 7,
  TlgOutIPV4 = 8,
  TlgOutIPV6 = 9,
  TlgOutSOCKETADDRESS = 10,
  TlgOutXML = 11,
  TlgOutJSON = 12,
  TlgOutWIN32ERROR = 13,
  TlgOutNTSTATUS = 14,
  TlgOutHRESULT = 15,
  TlgOutFILETIME = 16,
  TlgOutSIGNED = 17,
  TlgOutUNSIGNED = 18,
  TlgOutUTF8 = 35,
  TlgOutPKCS7_WITH_TYPE_INFO = 36,
  TlgOutCODE_POINTER = 37,
  TlgOutDATETIME_UTC = 38,
  _TlgOutMax = 39,
  _TlgOutChain = 128,
  _TlgOutTypeMask = 127,
};

typedef enum _PHYSICAL_MEMORY_HEAT_TYPE
{
  PhysicalMemoryCold = 0,
  PhysicalMemoryHot = 1,
  PhysicalMemoryHeatTypeMax = 2,
} PHYSICAL_MEMORY_HEAT_TYPE, *PPHYSICAL_MEMORY_HEAT_TYPE;

typedef enum _TRACE_INFORMATION_CLASS
{
  TraceIdClass = 0,
  TraceHandleClass = 1,
  TraceEnableFlagsClass = 2,
  TraceEnableLevelClass = 3,
  GlobalLoggerHandleClass = 4,
  EventLoggerHandleClass = 5,
  AllLoggerHandlesClass = 6,
  TraceHandleByNameClass = 7,
  LoggerEventsLostClass = 8,
  TraceSessionSettingsClass = 9,
  LoggerEventsLoggedClass = 10,
  DiskIoNotifyRoutinesClass = 11,
  TraceInformationClassReserved1 = 12,
  AllPossibleNotifyRoutinesClass = 12,
  FltIoNotifyRoutinesClass = 13,
  TraceInformationClassReserved2 = 14,
  WdfNotifyRoutinesClass = 15,
  MaxTraceInformationClass = 16,
} TRACE_INFORMATION_CLASS, *PTRACE_INFORMATION_CLASS;

typedef struct _LDRP_CSLIST
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* Tail;
} LDRP_CSLIST, *PLDRP_CSLIST; /* size: 0x0008 */

typedef enum _MI_PARTITION_THREAD
{
  MiZeroPageThreadSlot = 0,
  MiRebuildLargePagesThreadSlot = 1,
  MiPartitionWorkingSetManagerSlot = 2,
  MiDereferenceSegmentThreadSlot = 3,
  MiMappedPageWriterSlot = 4,
  MiModifiedPageWriterSlot = 5,
  MiNumberOfPartitionThreads = 6,
} MI_PARTITION_THREAD, *PMI_PARTITION_THREAD;

typedef union _AER_ROOTPORT_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UncorrectableErrorMaskRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short UncorrectableErrorSeverityRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short CorrectableErrorMaskRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short AdvancedCapsAndControlRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short RootErrorCommandRW : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned short Reserved : 11; /* bit position: 5 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} AER_ROOTPORT_DESCRIPTOR_FLAGS, *PAER_ROOTPORT_DESCRIPTOR_FLAGS; /* size: 0x0002 */

typedef enum _KERNEL_SHADOW_STACK_TYPE
{
  KernelShadowStackTypeUserThread = 0,
  KernelShadowStackTypeKernelThread = 1,
  KernelShadowStackTypeRstorssp = 2,
  KernelShadowStackTypeSetssbsy = 3,
  KernelShadowStackTypeSetssbsyForSystemStartup = 4,
  KernelShadowStackTypeMax = 5,
} KERNEL_SHADOW_STACK_TYPE, *PKERNEL_SHADOW_STACK_TYPE;

typedef enum _PERFINFO_MM_STAT
{
  PerfInfoMMStatNotUsed = 0,
  PerfInfoMMStatAggregatePageCombine = 1,
  PerfInfoMMStatIterationPageCombine = 2,
  PerfInfoMMStatMax = 3,
} PERFINFO_MM_STAT, *PPERFINFO_MM_STAT;

typedef enum _MI_WRITE_TYPES
{
  WriteTypeCached = 0,
  WriteTypeNonTemporal = 1,
  WriteTypeMaximum = 2,
} MI_WRITE_TYPES, *PMI_WRITE_TYPES;

struct _LDRP_LOAD_CONTEXT;

typedef enum _PNP_VETO_TYPE
{
  PNP_VetoTypeUnknown = 0,
  PNP_VetoLegacyDevice = 1,
  PNP_VetoPendingClose = 2,
  PNP_VetoWindowsApp = 3,
  PNP_VetoWindowsService = 4,
  PNP_VetoOutstandingOpen = 5,
  PNP_VetoDevice = 6,
  PNP_VetoDriver = 7,
  PNP_VetoIllegalDeviceRequest = 8,
  PNP_VetoInsufficientPower = 9,
  PNP_VetoNonDisableable = 10,
  PNP_VetoLegacyDriver = 11,
  PNP_VetoInsufficientRights = 12,
  PNP_VetoAlreadyRemoved = 13,
} PNP_VETO_TYPE, *PPNP_VETO_TYPE;

typedef struct _WHEA_PCI_SLOT_NUMBER
{
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned long DeviceNumber : 5; /* bit position: 0 */
          /* 0x0000 */ unsigned long FunctionNumber : 3; /* bit position: 5 */
          /* 0x0000 */ unsigned long Reserved : 24; /* bit position: 8 */
        }; /* bitfield */
      } /* size: 0x0004 */ bits;
      /* 0x0000 */ unsigned long AsULONG;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
} WHEA_PCI_SLOT_NUMBER, *PWHEA_PCI_SLOT_NUMBER; /* size: 0x0004 */

enum PDCCLIENTID
{
  PDC_INVALID_CLIENT = 0,
  PDC_PLM_CLIENT = 1,
  PDC_NQM_CLIENT = 2,
  PDC_WNS_CLIENT = 3,
  PDC_DAM_CLIENT = 4,
  PDC_WCM_CLIENT = 5,
  PDC_NCSI_CLIENT = 7,
  PDC_DHCP_CLIENT = 8,
  PDC_TCPIP_CLIENT = 9,
  PDC_WU_CLIENT = 11,
  PDC_GP_CLIENT = 12,
  PDC_NCA_CLIENT = 14,
  PDC_BI_CLIENT = 15,
  PDC_MSCHED_CLIENT = 16,
  PDC_SUSPENDRESUME_CLIENT = 17,
  PDC_INTERNAL_CLIENT = 18,
  PDC_DEFAULT_KM_TEST_CLIENT_EXEMPTED = 19,
  PDC_DEFAULT_UM_TEST_CLIENT_EXEMPTED = 20,
  PDC_DAM_PHASE_TEST_CLIENT = 21,
  PDC_LOW_POWER_PHASE_TEST_CLIENT = 22,
  PDC_RESILIENCY_NOTIFICATION_PHASE_TEST_CLIENT = 23,
  PDC_NQM_RESILIENCY_TEST_CLIENT = 24,
  PDC_DAM_RESILIENCY_TEST_CLIENT = 25,
  PDC_DAM_KM_TEST_CLIENT = 26,
  PDC_DAM_UM_TEST_CLIENT = 27,
  PDC_SINGLETON_TEST_CLIENT = 28,
  PDC_NETWORK_SERVICE_TEST_CLIENT = 29,
  PDC_NETWORK_SERVICE2_TEST_CLIENT = 30,
  PDC_SYSTEM_SERVICE_TEST_CLIENT = 31,
  PDC_ACTIV_NOTIF_DAM_RESIL_TEST_CLIENT = 32,
  PDC_ACTIV_NOTIF_NET_RESIL_TEST_CLIENT = 33,
  PDC_SHELL_CLIENT = 34,
  PDC_MAINTENANCE_CLIENT = 35,
  PDC_SYNC_CLIENT = 36,
  PDC_IDM_CLIENT = 37,
  PDC_CORTANA_VOICE_ACTIVATION_CLIENT = 38,
  PDC_TETHERING_CLIENT = 39,
  PDC_AUDIO_CLIENT = 40,
  PDC_LOCK_SCREEN = 41,
  PDC_LREC_CLIENT = 42,
  PDC_WP_BW_CLIENT = 43,
  PDC_WP_MEDIA_STREAMING_CLIENT = 44,
  PDC_WP_MAPS_CLIENT = 46,
  PDC_WP_SYNC_CLIENT = 47,
  PDC_SETTING_SYNC_CLIENT = 48,
  PDC_WP_EDM_CLIENT = 49,
  PDC_WP_WALLET_CLIENT = 50,
  PDC_WP_LOCATION_CLIENT = 51,
  PDC_WP_CM_CLIENT = 53,
  PDC_WP_DCP_CLIENT = 54,
  PDC_WP_WIFIAUTO_CLIENT = 55,
  PDC_BITLOCKER_CLIENT = 56,
  PDC_MDM_CERTINSTALLER_CLIENT = 57,
  PDC_WP_IM_CLIENT = 58,
  PDC_WP_MMS_CLIENT = 59,
  PDC_DEVICEENROLLER_CLIENT = 60,
  PDC_WP_WIFI_SCANNING_CLIENT = 61,
  PDC_WP_OMADM_CLIENT = 62,
  PDC_WP_TELEMETRY_CHECK_CLIENT = 63,
  PDC_WP_DIS_CLIENT = 64,
  PDC_BITS_CLIENT = 65,
  PDC_WP_VOIP_EXECUTION_CLIENT = 66,
  PDC_WP_RESERVED_CLIENT3 = 67,
  PDC_SLEEP_STUDY_CLIENT = 68,
  PDC_WP_AUTOTIMEUPDATE_CLIENT = 69,
  PDC_HYPERV_CLIENT = 70,
  PDC_KM_SIGNAL_CLIENT = 71,
  PDC_UM_SIGNAL_CLIENT = 72,
  PDC_DEVICE_HEALTH_ATTESTATION_CLIENT = 73,
  PDC_XB_SYSTEM_CLIENT = 74,
  PDC_XB_HOST_CLIENT = 75,
  PDC_PRINT_JOB_MANAGER_CLIENT = 76,
  PDC_TELEMETRY_CLIENT = 77,
  PDC_ERROR_REPORTING_CLIENT = 78,
  PDC_XBOX_NTM = 79,
  PDC_CBE_CLIENT = 80,
  PDC_FIND_MY_PHONE_CLIENT = 81,
  PDC_COMMAND_CHANNEL_CLIENT = 82,
  PDC_PPM_PROFILES_CLIENT = 83,
  PDC_WIFI_CALLING_CLIENT = 84,
  PDC_WU_REBOOT_CLIENT = 85,
  PDC_SYSMAIN_CLIENT = 86,
  PDC_XBOX_UPDATE_CLIENT = 87,
  PDC_CHAT_SERVICE_CLIENT = 88,
  PDC_FIND_MY_DEVICE_CLIENT = 89,
  PDC_NOTIFICATION_FORWARDING_AND_ACTION_CLIENT = 90,
  PDC_INSTALL_AGENT_CLIENT = 91,
  PDC_XBOX_WAKE_ON_VOICE = 92,
  PDC_PLM_AUDIO_CLIENT = 93,
  PDC_WP_BCKAUDIO_CLIENT = 94,
  PDC_WAKE_ON_LAN_CLIENT = 95,
  PDC_WP_CLOUD_MESSAGING_CLIENT = 96,
  PDC_DATA_MIGRATION_MANAGER = 97,
  PDC_EVENT_SOUND_MANAGER_CLIENT = 98,
  PDC_WWAN_DORMANCY_HINT_CLIENT = 99,
  PDC_HAM_CLIENT = 100,
  PDC_FILESHARINGSERVER_CLIENT = 101,
  PDC_DIRECTED_DRIPS_TASK_CLIENT = 102,
  PDC_DIRECTED_DRIPS_LPE_CLIENT = 103,
  PDC_DIRECTED_DRIPS_PLM_CLIENT = 104,
  PDC_HTTPSDATASOURCE_CLIENT = 105,
  PDC_TERMINALSERVER_CONNECTION_CLIENT = 106,
  PDC_TERMINALSERVER_SESSION_CLIENT = 107,
  PDC_ANYNETWORK_RESILIENCY_CLIENT = 108,
  PDC_XBOX_NUI_CLIENT = 110,
  PDC_WIFI_CALLING_IMS_CLIENT = 111,
  PDC_SLEEPSTUDY_HELPER_USER_CLIENT = 112,
  PDC_SLEEPSTUDY_HELPER_KERNEL_CLIENT = 113,
  PDC_CONTAINER_MANAGER_CLIENT = 114,
  PDC_UPDATE_ORCHESTRATOR_CLIENT = 115,
  PDC_UPDATE_UX_CLIENT = 116,
  PDC_HOT_KEY_MANAGER_CLIENT = 117,
  PDC_SERVICING_PLATFORM = 118,
  PDC_TNC_CLIENT = 119,
  PDC_USER_SHUTDOWN_CLIENT = 120,
  PDC_KERNEL_PLUG_AND_PLAY = 121,
  PDC_USER_MDMDIAGNOSTICS_CLIENT = 122,
  PDC_WIN32K_ACTIVATOR_CLIENT = 123,
  PDC_NUMBER_OF_CLIENTS = 124,
};

typedef enum _MI_MIRROR_BITMAP_STATE
{
  MirrorBitmapStateDormant = 0,
  MirrorBitmapStateFailedInitialize = 1,
  MirrorBitmapStateFullyInitialized = 2,
} MI_MIRROR_BITMAP_STATE, *PMI_MIRROR_BITMAP_STATE;

typedef enum _SYSTEM_POOL_LIMIT_MEM_TYPE
{
  SysPlMemPaged = 0,
  SysPlMemNonPaged = 1,
  SysPlMemTypeMax = 2,
} SYSTEM_POOL_LIMIT_MEM_TYPE, *PSYSTEM_POOL_LIMIT_MEM_TYPE;

typedef struct _OBJECT_DIRECTORY
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY_ENTRY* HashBuckets[37];
  /* 0x0128 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0130 */ struct _DEVICE_MAP* DeviceMap;
  /* 0x0138 */ struct _OBJECT_DIRECTORY* ShadowDirectory;
  /* 0x0140 */ void* NamespaceEntry;
  /* 0x0148 */ void* SessionObject;
  /* 0x0150 */ unsigned long Flags;
  /* 0x0154 */ unsigned long SessionId;
} OBJECT_DIRECTORY, *POBJECT_DIRECTORY; /* size: 0x0158 */

typedef enum _PROC_HYPERVISOR_STATE
{
  ProcHypervisorNone = 0,
  ProcHypervisorPresent = 1,
  ProcHypervisorPower = 2,
  ProcHypervisorHvCounters = 3,
} PROC_HYPERVISOR_STATE, *PPROC_HYPERVISOR_STATE;

typedef struct _KIST_BASE_FRAME
{
  /* 0x0000 */ struct _KPCR* KernelGsBase;
  /* 0x0008 */ struct _KIST_LINK_FRAME* IstStack;
  /* 0x0010 */ unsigned __int64 PreviousGsBase;
  /* 0x0018 */ unsigned __int64 PreviousCr3;
  /* 0x0020 */ unsigned __int64 IstPad;
  /* 0x0028 */ unsigned __int64 Reserved;
} KIST_BASE_FRAME, *PKIST_BASE_FRAME; /* size: 0x0030 */

typedef struct _KTRANSITION_STACK
{
  union
  {
    /* 0x0000 */ unsigned char Stack[512];
    struct
    {
      /* 0x0000 */ unsigned char IstStack[464];
      /* 0x01d0 */ struct _KIST_BASE_FRAME IstFrame;
    }; /* size: 0x0200 */
  }; /* size: 0x0200 */
} KTRANSITION_STACK, *PKTRANSITION_STACK; /* size: 0x0200 */

typedef enum _KHETERO_CPU_QOS
{
  KHeteroCpuQosDefault = 0,
  KHeteroCpuQosHigh = 0,
  KHeteroCpuQosMedium = 1,
  KHeteroCpuQosLow = 2,
  KHeteroCpuQosMultimedia = 3,
  KHeteroCpuQosDeadline = 4,
  KHeteroCpuQosEco = 5,
  KHeteroCpuQosUtility = 6,
  KHeteroCpuQosDynamic = 7,
  KHeteroCpuQosMax = 7,
} KHETERO_CPU_QOS, *PKHETERO_CPU_QOS;

typedef enum _THREAD_WORKLOAD_CLASS
{
  ThreadWorkloadClassDefault = 0,
  ThreadWorkloadClassGraphics = 1,
  MaxThreadWorkloadClass = 2,
} THREAD_WORKLOAD_CLASS, *PTHREAD_WORKLOAD_CLASS;

typedef enum _SEP_CACHED_HANDLES_ENTRY_TYPE
{
  SepCachedHandlesEntryLowbox = 0,
  SepCachedHandlesEntryBnoIsolation = 1,
} SEP_CACHED_HANDLES_ENTRY_TYPE, *PSEP_CACHED_HANDLES_ENTRY_TYPE;

typedef enum _POP_DEVICE_IDLE_TYPE
{
  DeviceIdleNormal = 0,
  DeviceIdleDisk = 1,
} POP_DEVICE_IDLE_TYPE, *PPOP_DEVICE_IDLE_TYPE;

typedef enum _NT_IORING_SQ_FLAGS
{
  NT_IORING_SQ_FLAG_NONE = 0,
} NT_IORING_SQ_FLAGS, *PNT_IORING_SQ_FLAGS;

typedef struct _LOCAL_X2APIC_NMISOURCE
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned long ProcessorID;
  /* 0x0008 */ unsigned char LINTIN;
  /* 0x0009 */ unsigned char Reserved[3];
} LOCAL_X2APIC_NMISOURCE, *PLOCAL_X2APIC_NMISOURCE; /* size: 0x000c */

typedef enum _MI_CROSS_PARTITION_CHARGE_TYPE
{
  MiCrossPartitionSectionResAvailCharge = 0,
  MiCrossPartitionSectionCommitCharge = 1,
  MiCrossPartitionLargePageResAvailCharge = 2,
  MiCrossPartitionLargePageCommitCharge = 3,
  MiCrossPartitionSmallAweResAvailCharge = 4,
  MiCrossPartitionSmallAweCommitCharge = 5,
  MiCrossPartitionPageCloneResAvailCharge = 6,
  MiCrossPartitionAggregateResAvailCharge = 7,
  MiCrossPartitionAggregateCommitCharge = 8,
  MiCrossPartitionMaximumCharge = 9,
} MI_CROSS_PARTITION_CHARGE_TYPE, *PMI_CROSS_PARTITION_CHARGE_TYPE;

typedef enum _KTOPOLOGY_LEVEL
{
  KTopologyLevelProcessor = 0,
  KTopologyLevelCore = 1,
  KTopologyLevelModule = 2,
  KTopologyLevelDie = 3,
  KTopologyLevelPackage = 4,
  KTopologyLevelCount = 5,
} KTOPOLOGY_LEVEL, *PKTOPOLOGY_LEVEL;

typedef enum _HV_EXT_EPF_MODE
{
  HvExtEpfModeMin = 0,
  HvExtEpfModeNt = 0,
  HvExtEpfModeMax = 1,
} HV_EXT_EPF_MODE, *PHV_EXT_EPF_MODE;

typedef enum _MI_RVA_LIST_FILTER_TYPE
{
  MiRvaListFilterCfgValid = 0,
  MiRvaListFilterCfgFirst = 0,
  MiRvaListFilterCfgLast = 1,
  MiRvaListFilterInvalid = 2,
} MI_RVA_LIST_FILTER_TYPE, *PMI_RVA_LIST_FILTER_TYPE;

typedef enum _PO_S0_DISCONNECTED_REASON
{
  PoS0DisconnectedReasonNone = 0,
  PoS0DisconnectedReasonNonCompliantNic = 1,
  PoS0DisconnectedReasonSettingPolicy = 2,
  PoS0DisconnectedReasonEnforceDsPolicy = 3,
  PoS0DisconnectedReasonCsChecksFailed = 4,
  PoS0DisconnectedReasonOpportunisticDs = 5,
  PoS0DisconnectedReasonAdaptiveCs = 5,
  PoS0DisconnectedReasonMaximum = 6,
} PO_S0_DISCONNECTED_REASON, *PPO_S0_DISCONNECTED_REASON;

typedef struct _VACB_ARRAY_HEADER
{
  /* 0x0000 */ unsigned long VacbArrayIndex;
  /* 0x0004 */ unsigned long MappingCount;
  /* 0x0008 */ unsigned long HighestMappedIndex;
  /* 0x000c */ unsigned long Reserved;
} VACB_ARRAY_HEADER, *PVACB_ARRAY_HEADER; /* size: 0x0010 */

typedef enum _PNP_REBALANCE_REASON
{
  RebalanceReasonUnknown = 0,
  RebalanceReasonRequirementsChanged = 1,
  RebalanceReasonNewDevice = 2,
} PNP_REBALANCE_REASON, *PPNP_REBALANCE_REASON;

typedef struct _PROCLOCALSAPIC
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned char ACPIProcessorID;
  /* 0x0003 */ unsigned char APICID;
  /* 0x0004 */ unsigned char APICEID;
  /* 0x0005 */ unsigned char Reserved[3];
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long ACPIProcessorUIDInteger;
  /* 0x0010 */ char ACPIProcessorUIDString[1];
} PROCLOCALSAPIC, *PPROCLOCALSAPIC; /* size: 0x0011 */

typedef enum _PNP_REBALANCE_FAILURE
{
  RebalanceFailureNone = 0,
  RebalanceFailureDisabled = 1,
  RebalanceFailureNoMemory = 2,
  RebalanceFailureQueryStopUnexpectedVeto = 3,
  RebalanceFailureNoRequirements = 4,
  RebalanceFailureNoCandidates = 5,
  RebalanceFailureNoConfiguration = 6,
} PNP_REBALANCE_FAILURE, *PPNP_REBALANCE_FAILURE;

typedef enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON
{
  DeviceQueryRebalanceSucceeded = 0,
  DeviceQueryStopFailed = 1,
  DeviceFailedGetNewResourceRequirement = 2,
  DeviceInUnexpectedState = 3,
  DeviceNotSupportQueryRebalance = 4,
} PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON, *PPNP_DEVNODE_QUERY_REBALANCE_VETO_REASON;

typedef struct _DMA_REQUEST_LINE_BINDING_DESCRIPTION
{
  /* 0x0000 */ unsigned long RequestLine;
  /* 0x0004 */ unsigned long ChannelNumber;
} DMA_REQUEST_LINE_BINDING_DESCRIPTION, *PDMA_REQUEST_LINE_BINDING_DESCRIPTION; /* size: 0x0008 */

typedef enum _PNP_PROBLEM_CODE_LOG_OPERATION
{
  ProblemCodeOpInvalid = 0,
  ProblemCodeOpSet = 1,
  ProblemCodeOpClear = 2,
  ProblemCodeOpMax = 3,
} PNP_PROBLEM_CODE_LOG_OPERATION, *PPNP_PROBLEM_CODE_LOG_OPERATION;

typedef struct _WHEA_ERROR_SOURCE_CONFIGURATION_DD
{
  /* 0x0000 */ void* Initialize /* function */;
  /* 0x0008 */ void* Uninitialize /* function */;
  /* 0x0010 */ void* Correct /* function */;
} WHEA_ERROR_SOURCE_CONFIGURATION_DD, *PWHEA_ERROR_SOURCE_CONFIGURATION_DD; /* size: 0x0018 */

typedef struct _WHEA_DEVICE_DRIVER_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ struct _GUID SourceGuid;
  /* 0x0014 */ unsigned short LogTag;
  /* 0x0016 */ unsigned short Reserved2;
  /* 0x0018 */ unsigned long PacketLength;
  /* 0x001c */ unsigned long PacketCount;
  /* 0x0020 */ unsigned char* PacketBuffer;
  /* 0x0028 */ struct _WHEA_ERROR_SOURCE_CONFIGURATION_DD Config;
  /* 0x0040 */ struct _GUID CreatorId;
  /* 0x0050 */ struct _GUID PartitionId;
  /* 0x0060 */ unsigned long MaxSectionDataLength;
  /* 0x0064 */ unsigned long MaxSectionsPerRecord;
  /* 0x0068 */ unsigned char* PacketStateBuffer;
  /* 0x0070 */ long OpenHandles;
} WHEA_DEVICE_DRIVER_DESCRIPTOR, *PWHEA_DEVICE_DRIVER_DESCRIPTOR; /* size: 0x0074 */

typedef enum _SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE
{
  SystemFeatureConfigurationSectionTypeBoot = 0,
  SystemFeatureConfigurationSectionTypeRuntime = 1,
  SystemFeatureConfigurationSectionTypeUsageTriggers = 2,
  SystemFeatureConfigurationSectionTypeCount = 3,
} SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE, *PSYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE;

typedef struct _KTB_FLUSH_VA
{
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 NumberOfEntries : 10; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 PageSize : 2; /* bit position: 10 */
      }; /* bitfield */
      /* 0x0000 */ void* Va;
      /* 0x0000 */ unsigned __int64 VaLong;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
} KTB_FLUSH_VA, *PKTB_FLUSH_VA; /* size: 0x0008 */

typedef enum _PS_ATTRIBUTE_NUM
{
  PsAttributeParentProcess = 0,
  PsAttributeDebugObject = 1,
  PsAttributeToken = 2,
  PsAttributeClientId = 3,
  PsAttributeTebAddress = 4,
  PsAttributeImageName = 5,
  PsAttributeImageInfo = 6,
  PsAttributeMemoryReserve = 7,
  PsAttributePriorityClass = 8,
  PsAttributeErrorMode = 9,
  PsAttributeStdHandleInfo = 10,
  PsAttributeHandleList = 11,
  PsAttributeGroupAffinity = 12,
  PsAttributePreferredNode = 13,
  PsAttributeIdealProcessor = 14,
  PsAttributeUmsThread = 15,
  PsAttributeMitigationOptions = 16,
  PsAttributeProtectionLevel = 17,
  PsAttributeSecureProcess = 18,
  PsAttributeJobList = 19,
  PsAttributeChildProcessPolicy = 20,
  PsAttributeAllApplicationPackagesPolicy = 21,
  PsAttributeWin32kFilter = 22,
  PsAttributeSafeOpenPromptOriginClaim = 23,
  PsAttributeBnoIsolation = 24,
  PsAttributeDesktopAppPolicy = 25,
  PsAttributeChpe = 26,
  PsAttributeMitigationAuditOptions = 27,
  PsAttributeMachineType = 28,
  PsAttributeComponentFilter = 29,
  PsAttributeEnableOptionalXStateFeatures = 30,
  PsAttributeSupportedMachines = 31,
  PsAttributeSveVectorLength = 32,
  PsAttributeMax = 33,
} PS_ATTRIBUTE_NUM, *PPS_ATTRIBUTE_NUM;

typedef struct _WAIT_CONTEXT_BLOCK
{
  union
  {
    /* 0x0000 */ struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY DmaWaitEntry;
      /* 0x0010 */ unsigned long NumberOfChannels;
      struct /* bitfield */
      {
        /* 0x0014 */ unsigned long SyncCallback : 1; /* bit position: 0 */
        /* 0x0014 */ unsigned long DmaContext : 1; /* bit position: 1 */
        /* 0x0014 */ unsigned long ZeroMapRegisters : 1; /* bit position: 2 */
        /* 0x0014 */ unsigned long Reserved : 9; /* bit position: 3 */
        /* 0x0014 */ unsigned long NumberOfRemapPages : 20; /* bit position: 12 */
      }; /* bitfield */
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
  /* 0x0018 */ void* DeviceRoutine /* function */;
  /* 0x0020 */ void* DeviceContext;
  /* 0x0028 */ unsigned long NumberOfMapRegisters;
  /* 0x002c */ long Padding_164;
  /* 0x0030 */ void* DeviceObject;
  /* 0x0038 */ void* CurrentIrp;
  /* 0x0040 */ struct _KDPC* BufferChainingDpc;
} WAIT_CONTEXT_BLOCK, *PWAIT_CONTEXT_BLOCK; /* size: 0x0048 */

typedef struct _DMA_TRANSFER_CONTEXT_V1
{
  /* 0x0000 */ long DmaState;
  /* 0x0004 */ unsigned long TransferState;
  /* 0x0008 */ struct _WAIT_CONTEXT_BLOCK Wcb;
  /* 0x0050 */ void* HalWcb;
} DMA_TRANSFER_CONTEXT_V1, *PDMA_TRANSFER_CONTEXT_V1; /* size: 0x0058 */

typedef struct _DMA_TRANSFER_CONTEXT
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ long Padding_165;
  /* 0x0008 */ struct _DMA_TRANSFER_CONTEXT_V1 V1;
} DMA_TRANSFER_CONTEXT, *PDMA_TRANSFER_CONTEXT; /* size: 0x0060 */

typedef enum _MI_VAD_ALLOCATION_CELL_TYPE
{
  MiVadBottomUp = 0,
  MiVadStackPebTeb = 1,
  MiVadReserved64 = 2,
  MiVadAllocationCellMaximum = 3,
} MI_VAD_ALLOCATION_CELL_TYPE, *PMI_VAD_ALLOCATION_CELL_TYPE;

typedef struct _KFORCE_PARK_DUTY_CYCLE_DATA
{
  /* 0x0000 */ struct _KDPC DutyCycleDpc;
  /* 0x0040 */ struct _KTIMER2 StartSingleDutyCycleTimer;
  /* 0x00c8 */ struct _KTIMER2 StopSingleDutyCycleTimer;
  /* 0x0150 */ enum _KI_FORCE_PARK_DUTY_CYCLE_STATE CurrentState;
  /* 0x0154 */ enum _KI_FORCE_PARK_DUTY_CYCLE_TRANSITION DpcTransition;
} KFORCE_PARK_DUTY_CYCLE_DATA, *PKFORCE_PARK_DUTY_CYCLE_DATA; /* size: 0x0158 */

typedef enum _ConnectionResourceConsumerDesc
{
  ConnectionResourceConsumerDescIsUndefined = 0,
  ConnectionResourceConsumerDescIsDevice = 1,
  ConnectionResourceConsumerDescIsOpregion = 2,
  ConnectionResourceConsumerDescMax = 3,
} ConnectionResourceConsumerDesc, *PConnectionResourceConsumerDesc;

typedef struct _XPF_RECOVERY_INFO
{
  struct
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int NotSupported : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned int Overflow : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned int ContextCorrupt : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned int RestartIpErrorIpNotValid : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned int NoRecoveryContext : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned int MiscOrAddrNotValid : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned int InvalidAddressMode : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned int HighIrql : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned int InterruptsDisabled : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned int SwapBusy : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned int StackOverflow : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned int Reserved : 21; /* bit position: 11 */
    }; /* bitfield */
  } /* size: 0x0004 */ FailureReason;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned int RecoveryAttempted : 1; /* bit position: 0 */
      /* 0x0004 */ unsigned int HvHandled : 1; /* bit position: 1 */
      /* 0x0004 */ unsigned int Reserved : 30; /* bit position: 2 */
    }; /* bitfield */
  } /* size: 0x0004 */ Action;
  /* 0x0008 */ unsigned char ActionRequired;
  /* 0x0009 */ unsigned char RecoverySucceeded;
  /* 0x000a */ unsigned char RecoveryKernel;
  /* 0x000b */ unsigned char Reserved;
  /* 0x000c */ unsigned short Reserved2;
  /* 0x000e */ unsigned short Reserved3;
  /* 0x0010 */ unsigned int Reserved4;
} XPF_RECOVERY_INFO, *PXPF_RECOVERY_INFO; /* size: 0x0014 */

typedef enum _SYSTEM_INFORMATION_CLASS
{
  SystemBasicInformation = 0,
  SystemProcessorInformation = 1,
  SystemPerformanceInformation = 2,
  SystemTimeOfDayInformation = 3,
  SystemPathInformation = 4,
  SystemProcessInformation = 5,
  SystemCallCountInformation = 6,
  SystemDeviceInformation = 7,
  SystemProcessorPerformanceInformation = 8,
  SystemFlagsInformation = 9,
  SystemCallTimeInformation = 10,
  SystemModuleInformation = 11,
  SystemLocksInformation = 12,
  SystemStackTraceInformation = 13,
  SystemPagedPoolInformation = 14,
  SystemNonPagedPoolInformation = 15,
  SystemHandleInformation = 16,
  SystemObjectInformation = 17,
  SystemPageFileInformation = 18,
  SystemVdmInstemulInformation = 19,
  SystemVdmBopInformation = 20,
  SystemFileCacheInformation = 21,
  SystemPoolTagInformation = 22,
  SystemInterruptInformation = 23,
  SystemDpcBehaviorInformation = 24,
  SystemFullMemoryInformation = 25,
  SystemLoadGdiDriverInformation = 26,
  SystemUnloadGdiDriverInformation = 27,
  SystemTimeAdjustmentInformation = 28,
  SystemSummaryMemoryInformation = 29,
  SystemMirrorMemoryInformation = 30,
  SystemPerformanceTraceInformation = 31,
  SystemObsolete0 = 32,
  SystemExceptionInformation = 33,
  SystemCrashDumpStateInformation = 34,
  SystemKernelDebuggerInformation = 35,
  SystemContextSwitchInformation = 36,
  SystemRegistryQuotaInformation = 37,
  SystemExtendServiceTableInformation = 38,
  SystemPrioritySeperation = 39,
  SystemVerifierAddDriverInformation = 40,
  SystemVerifierRemoveDriverInformation = 41,
  SystemProcessorIdleInformation = 42,
  SystemLegacyDriverInformation = 43,
  SystemCurrentTimeZoneInformation = 44,
  SystemLookasideInformation = 45,
  SystemTimeSlipNotification = 46,
  SystemSessionCreate = 47,
  SystemSessionDetach = 48,
  SystemSessionInformation = 49,
  SystemRangeStartInformation = 50,
  SystemVerifierInformation = 51,
  SystemVerifierReserved = 52,
  SystemSessionProcessInformation = 53,
  SystemLoadGdiDriverInSystemSpace = 54,
  SystemNumaProcessorMap = 55,
  SystemPrefetcherInformation = 56,
  SystemExtendedProcessInformation = 57,
  SystemRecommendedSharedDataAlignment = 58,
  SystemComPlusPackage = 59,
  SystemNumaAvailableMemory = 60,
  SystemProcessorPowerInformation = 61,
  SystemEmulationBasicInformation = 62,
  SystemEmulationProcessorInformation = 63,
  SystemExtendedHandleInformation = 64,
  SystemLostDelayedWriteInformation = 65,
  SystemBigPoolInformation = 66,
  SystemSessionPoolTagInformation = 67,
  SystemSessionMappedViewInformation = 68,
  SystemHotpatchInformation = 69,
  SystemObjectSecurityMode = 70,
  SystemWatchdogTimerHandler = 71,
  SystemWatchdogTimerInformation = 72,
  SystemLogicalProcessorInformation = 73,
  SystemWow64SharedInformationObsolete = 74,
  SystemRegisterFirmwareTableInformationHandler = 75,
  SystemFirmwareTableInformation = 76,
  SystemModuleInformationEx = 77,
  SystemVerifierTriageInformation = 78,
  SystemSuperfetchInformation = 79,
  SystemMemoryListInformation = 80,
  SystemFileCacheInformationEx = 81,
  SystemThreadPriorityClientIdInformation = 82,
  SystemProcessorIdleCycleTimeInformation = 83,
  SystemVerifierCancellationInformation = 84,
  SystemProcessorPowerInformationEx = 85,
  SystemRefTraceInformation = 86,
  SystemSpecialPoolInformation = 87,
  SystemProcessIdInformation = 88,
  SystemErrorPortInformation = 89,
  SystemBootEnvironmentInformation = 90,
  SystemHypervisorInformation = 91,
  SystemVerifierInformationEx = 92,
  SystemTimeZoneInformation = 93,
  SystemImageFileExecutionOptionsInformation = 94,
  SystemCoverageInformation = 95,
  SystemPrefetchPatchInformation = 96,
  SystemVerifierFaultsInformation = 97,
  SystemSystemPartitionInformation = 98,
  SystemSystemDiskInformation = 99,
  SystemProcessorPerformanceDistribution = 100,
  SystemNumaProximityNodeInformation = 101,
  SystemDynamicTimeZoneInformation = 102,
  SystemCodeIntegrityInformation = 103,
  SystemProcessorMicrocodeUpdateInformation = 104,
  SystemProcessorBrandString = 105,
  SystemVirtualAddressInformation = 106,
  SystemLogicalProcessorAndGroupInformation = 107,
  SystemProcessorCycleTimeInformation = 108,
  SystemStoreInformation = 109,
  SystemRegistryAppendString = 110,
  SystemAitSamplingValue = 111,
  SystemVhdBootInformation = 112,
  SystemCpuQuotaInformation = 113,
  SystemNativeBasicInformation = 114,
  SystemErrorPortTimeouts = 115,
  SystemLowPriorityIoInformation = 116,
  SystemBootEntropyInformation = 117,
  SystemVerifierCountersInformation = 118,
  SystemPagedPoolInformationEx = 119,
  SystemSystemPtesInformationEx = 120,
  SystemNodeDistanceInformation = 121,
  SystemAcpiAuditInformation = 122,
  SystemBasicPerformanceInformation = 123,
  SystemQueryPerformanceCounterInformation = 124,
  SystemSessionBigPoolInformation = 125,
  SystemBootGraphicsInformation = 126,
  SystemScrubPhysicalMemoryInformation = 127,
  SystemBadPageInformation = 128,
  SystemProcessorProfileControlArea = 129,
  SystemCombinePhysicalMemoryInformation = 130,
  SystemEntropyInterruptTimingInformation = 131,
  SystemConsoleInformation = 132,
  SystemPlatformBinaryInformation = 133,
  SystemPolicyInformation = 134,
  SystemHypervisorProcessorCountInformation = 135,
  SystemDeviceDataInformation = 136,
  SystemDeviceDataEnumerationInformation = 137,
  SystemMemoryTopologyInformation = 138,
  SystemMemoryChannelInformation = 139,
  SystemBootLogoInformation = 140,
  SystemProcessorPerformanceInformationEx = 141,
  SystemCriticalProcessErrorLogInformation = 142,
  SystemSecureBootPolicyInformation = 143,
  SystemPageFileInformationEx = 144,
  SystemSecureBootInformation = 145,
  SystemEntropyInterruptTimingRawInformation = 146,
  SystemPortableWorkspaceEfiLauncherInformation = 147,
  SystemFullProcessInformation = 148,
  SystemKernelDebuggerInformationEx = 149,
  SystemBootMetadataInformation = 150,
  SystemSoftRebootInformation = 151,
  SystemElamCertificateInformation = 152,
  SystemOfflineDumpConfigInformation = 153,
  SystemProcessorFeaturesInformation = 154,
  SystemRegistryReconciliationInformation = 155,
  SystemEdidInformation = 156,
  SystemManufacturingInformation = 157,
  SystemEnergyEstimationConfigInformation = 158,
  SystemHypervisorDetailInformation = 159,
  SystemProcessorCycleStatsInformation = 160,
  SystemVmGenerationCountInformation = 161,
  SystemTrustedPlatformModuleInformation = 162,
  SystemKernelDebuggerFlags = 163,
  SystemCodeIntegrityPolicyInformation = 164,
  SystemIsolatedUserModeInformation = 165,
  SystemHardwareSecurityTestInterfaceResultsInformation = 166,
  SystemSingleModuleInformation = 167,
  SystemAllowedCpuSetsInformation = 168,
  SystemVsmProtectionInformation = 169,
  SystemInterruptCpuSetsInformation = 170,
  SystemSecureBootPolicyFullInformation = 171,
  SystemCodeIntegrityPolicyFullInformation = 172,
  SystemAffinitizedInterruptProcessorInformation = 173,
  SystemRootSiloInformation = 174,
  SystemCpuSetInformation = 175,
  SystemCpuSetTagInformation = 176,
  SystemWin32WerStartCallout = 177,
  SystemSecureKernelProfileInformation = 178,
  SystemCodeIntegrityPlatformManifestInformation = 179,
  SystemInterruptSteeringInformation = 180,
  SystemSupportedProcessorArchitectures = 181,
  SystemMemoryUsageInformation = 182,
  SystemCodeIntegrityCertificateInformation = 183,
  SystemPhysicalMemoryInformation = 184,
  SystemControlFlowTransition = 185,
  SystemKernelDebuggingAllowed = 186,
  SystemActivityModerationExeState = 187,
  SystemActivityModerationUserSettings = 188,
  SystemCodeIntegrityPoliciesFullInformation = 189,
  SystemCodeIntegrityUnlockInformation = 190,
  SystemIntegrityQuotaInformation = 191,
  SystemFlushInformation = 192,
  SystemProcessorIdleMaskInformation = 193,
  SystemSecureDumpEncryptionInformation = 194,
  SystemWriteConstraintInformation = 195,
  SystemKernelVaShadowInformation = 196,
  SystemHypervisorSharedPageInformation = 197,
  SystemFirmwareBootPerformanceInformation = 198,
  SystemCodeIntegrityVerificationInformation = 199,
  SystemFirmwarePartitionInformation = 200,
  SystemSpeculationControlInformation = 201,
  SystemDmaGuardPolicyInformation = 202,
  SystemEnclaveLaunchControlInformation = 203,
  SystemWorkloadAllowedCpuSetsInformation = 204,
  SystemCodeIntegrityUnlockModeInformation = 205,
  SystemLeapSecondInformation = 206,
  SystemFlags2Information = 207,
  SystemSecurityModelInformation = 208,
  SystemCodeIntegritySyntheticCacheInformation = 209,
  SystemFeatureConfigurationInformation = 210,
  SystemFeatureConfigurationSectionInformation = 211,
  SystemFeatureUsageSubscriptionInformation = 212,
  SystemSecureSpeculationControlInformation = 213,
  SystemSpacesBootInformation = 214,
  SystemFwRamdiskInformation = 215,
  SystemWheaIpmiHardwareInformation = 216,
  SystemDifSetRuleClassInformation = 217,
  SystemDifClearRuleClassInformation = 218,
  SystemDifApplyPluginVerificationOnDriver = 219,
  SystemDifRemovePluginVerificationOnDriver = 220,
  SystemShadowStackInformation = 221,
  SystemBuildVersionInformation = 222,
  SystemPoolLimitInformation = 223,
  SystemCodeIntegrityAddDynamicStore = 224,
  SystemCodeIntegrityClearDynamicStores = 225,
  SystemDifPoolTrackingInformation = 226,
  SystemPoolZeroingInformation = 227,
  SystemDpcWatchdogInformation = 228,
  SystemDpcWatchdogInformation2 = 229,
  SystemSupportedProcessorArchitectures2 = 230,
  SystemSingleProcessorRelationshipInformation = 231,
  SystemXfgCheckFailureInformation = 232,
  SystemIommuStateInformation = 233,
  SystemHypervisorMinrootInformation = 234,
  SystemHypervisorBootPagesInformation = 235,
  SystemPointerAuthInformation = 236,
  SystemSecureKernelDebuggerInformation = 237,
  SystemOriginalImageFeatureInformation = 238,
  SystemMemoryNumaInformation = 239,
  SystemMemoryNumaPerformanceInformation = 240,
  SystemCodeIntegritySignedPoliciesFullInformation = 241,
  SystemSecureSecretsInformation = 242,
  SystemTrustedAppsRuntimeInformation = 243,
  SystemBadPageInformationEx = 244,
  SystemResourceDeadlockTimeout = 245,
  SystemBreakOnContextUnwindFailureInformation = 246,
  SystemOslRamdiskInformation = 247,
  MaxSystemInfoClass = 248,
} SYSTEM_INFORMATION_CLASS, *PSYSTEM_INFORMATION_CLASS;

enum MM_BOOT_MARK
{
  BuiltLoaderTree = 0,
  AppliedMemoryLicense = 1,
  RemovedLargeDescriptors = 2,
  WalkedBootMappings = 3,
  CreatedPfnDatabase = 4,
  InitializedPfnsForValidMappings = 5,
  CreateInitialPfnsForMemoryBlock = 6,
  InitializedGapFrames = 7,
  EmployedGapFrames = 8,
  UnmappedSparseRanges = 9,
  BuiltNodeStructures = 10,
  CreatedPfnBitMaps = 11,
  InitializedLargePageRuns = 12,
  NotUsed = 13,
  InitializedSpecialPurposeMemory = 14,
  CreatedSlabs = 15,
  InitializedDriverImages = 16,
  InitializedHotPatching = 17,
  InitializedRelocations = 18,
  InitializedTbFlushing = 19,
  MaximumBootMark = 20,
};

typedef struct _MCI_STATUS_AMD_BITS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 McaErrorCode : 16; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 ModelErrorCode : 16; /* bit position: 16 */
    /* 0x0000 */ unsigned __int64 ImplementationSpecific2 : 11; /* bit position: 32 */
    /* 0x0000 */ unsigned __int64 Poison : 1; /* bit position: 43 */
    /* 0x0000 */ unsigned __int64 Deferred : 1; /* bit position: 44 */
    /* 0x0000 */ unsigned __int64 ImplementationSpecific1 : 12; /* bit position: 45 */
    /* 0x0000 */ unsigned __int64 ContextCorrupt : 1; /* bit position: 57 */
    /* 0x0000 */ unsigned __int64 AddressValid : 1; /* bit position: 58 */
    /* 0x0000 */ unsigned __int64 MiscValid : 1; /* bit position: 59 */
    /* 0x0000 */ unsigned __int64 ErrorEnabled : 1; /* bit position: 60 */
    /* 0x0000 */ unsigned __int64 UncorrectedError : 1; /* bit position: 61 */
    /* 0x0000 */ unsigned __int64 StatusOverFlow : 1; /* bit position: 62 */
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 63 */
  }; /* bitfield */
} MCI_STATUS_AMD_BITS, *PMCI_STATUS_AMD_BITS; /* size: 0x0008 */

typedef enum _IOMMU_MAP_PHYSICAL_ADDRESS_TYPE
{
  MapPhysicalAddressTypeMdl = 0,
  MapPhysicalAddressTypeContiguousRange = 1,
  MapPhysicalAddressTypePfn = 2,
  MapPhysicalAddressTypeMax = 3,
} IOMMU_MAP_PHYSICAL_ADDRESS_TYPE, *PIOMMU_MAP_PHYSICAL_ADDRESS_TYPE;

typedef struct _GIC_REDISTRIBUTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned __int64 DiscoveryRangeBaseAddress;
  /* 0x000c */ unsigned long DiscoveryRangeLength;
} GIC_REDISTRIBUTOR, *PGIC_REDISTRIBUTOR; /* size: 0x0010 */

typedef enum _KERNEL_STACK_LIMITS
{
  BugcheckStackLimits = 0,
  DPCStackLimits = 1,
  ExpandedStackLimits = 2,
  NormalStackLimits = 3,
  Win32kStackLimits = 4,
  SwapBusyStackLimits = 5,
  IsrStackLimits = 6,
  DebuggerStackLimits = 7,
  NmiStackLimits = 8,
  MachineCheckStackLimits = 9,
  ExceptionStackLimits = 10,
  MaximumStackLimits = 11,
} KERNEL_STACK_LIMITS, *PKERNEL_STACK_LIMITS;

enum ReplacesCorHdrNumericDefines
{
  COMIMAGE_FLAGS_ILONLY = 1,
  COMIMAGE_FLAGS_32BITREQUIRED = 2,
  COMIMAGE_FLAGS_IL_LIBRARY = 4,
  COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
  COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
  COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
  COMIMAGE_FLAGS_32BITPREFERRED = 0x20000,
  COR_VERSION_MAJOR_V2 = 2,
  COR_VERSION_MAJOR = 2,
  COR_VERSION_MINOR = 5,
  COR_DELETED_NAME_LENGTH = 8,
  COR_VTABLEGAP_NAME_LENGTH = 8,
  NATIVE_TYPE_MAX_CB = 1,
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
  IMAGE_COR_MIH_METHODRVA = 1,
  IMAGE_COR_MIH_EHRVA = 2,
  IMAGE_COR_MIH_BASICBLOCK = 8,
  COR_VTABLE_32BIT = 1,
  COR_VTABLE_64BIT = 2,
  COR_VTABLE_FROM_UNMANAGED = 4,
  COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
  COR_VTABLE_CALL_MOST_DERIVED = 16,
  IMAGE_COR_EATJ_THUNK_SIZE = 32,
  MAX_CLASS_NAME = 1024,
  MAX_PACKAGE_NAME = 1024,
};

enum PDC_ACTIVITY_TYPE
{
  PdcNetwork = 0,
  PdcSystem = 1,
  PdcTimer = 2,
  PdcAllNetworks = 3,
  PdcAnyNetwork = 4,
  PdcInvalidActivity = 5,
  PdcMaxActivity = 5,
};

enum SLEEPSTUDY_SPM_SCENARIO_CS_EXIT
{
  SpmScenarioStopReasonUnspecified = 16,
  SpmScenarioStopReasonCsExit = 17,
  SpmScenarioStopReasonInternalSegmentTransition = 18,
  SpmScenarioStopReasonMax = 19,
};

typedef enum _KCONTINUE_TYPE
{
  KCONTINUE_UNWIND = 0,
  KCONTINUE_RESUME = 1,
  KCONTINUE_LONGJUMP = 2,
  KCONTINUE_SET = 3,
  KCONTINUE_LAST = 4,
  KCONTINUE_INVALID = 4,
} KCONTINUE_TYPE, *PKCONTINUE_TYPE;

typedef struct _KAPC_STATE
{
  /* 0x0000 */ struct _LIST_ENTRY ApcListHead[2];
  /* 0x0020 */ struct _KPROCESS* Process;
  union
  {
    /* 0x0028 */ unsigned char InProgressFlags;
    struct /* bitfield */
    {
      /* 0x0028 */ unsigned char KernelApcInProgress : 1; /* bit position: 0 */
      /* 0x0028 */ unsigned char SpecialApcInProgress : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0029 */ unsigned char KernelApcPending;
  union
  {
    /* 0x002a */ unsigned char UserApcPendingAll;
    struct /* bitfield */
    {
      /* 0x002a */ unsigned char SpecialUserApcPending : 1; /* bit position: 0 */
      /* 0x002a */ unsigned char UserApcPending : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x002b */ char __PADDING__[5];
} KAPC_STATE, *PKAPC_STATE; /* size: 0x0030 */

typedef struct _MI_STORE_INPAGE_COMPLETE_FLAGS
{
  union
  {
    /* 0x0000 */ unsigned long EntireFlags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long StoreFault : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long LowResourceFailure : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Spare : 30; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} MI_STORE_INPAGE_COMPLETE_FLAGS, *PMI_STORE_INPAGE_COMPLETE_FLAGS; /* size: 0x0004 */

typedef struct _MI_HARD_FAULT_STATE
{
  /* 0x0000 */ struct _MMPFN* SwapPfn;
  /* 0x0008 */ struct _MI_STORE_INPAGE_COMPLETE_FLAGS StoreFlags;
  /* 0x000c */ long __PADDING__[1];
} MI_HARD_FAULT_STATE, *PMI_HARD_FAULT_STATE; /* size: 0x0010 */

typedef enum _POP_IO_STATUS
{
  IoReady = 0,
  IoPending = 1,
  IoDone = 2,
} POP_IO_STATUS, *PPOP_IO_STATUS;

enum KTM_STATE
{
  KKtmUninitialized = 0,
  KKtmInitialized = 1,
  KKtmRecovering = 2,
  KKtmOnline = 3,
  KKtmRecoveryFailed = 4,
  KKtmOffline = 5,
};

typedef struct _PROCLOCALGIC
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned long Identifier;
  /* 0x0008 */ unsigned long AcpiProcessorId;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long ParkingProtocolVersion;
  /* 0x0014 */ unsigned long PerformanceInterruptGsi;
  /* 0x0018 */ unsigned __int64 ParkedPhysicalAddress;
  /* 0x0020 */ unsigned __int64 ControllerPhysicalAddress;
  /* 0x0028 */ unsigned __int64 Gicv;
  /* 0x0030 */ unsigned __int64 Gich;
  /* 0x0038 */ unsigned long VgicMaintenanceInterrupt;
  /* 0x003c */ unsigned __int64 GicrBaseAddress;
  /* 0x0044 */ unsigned __int64 Mpidr;
  /* 0x004c */ unsigned char ProcessorPowerEfficiencyClass;
  /* 0x004d */ unsigned char Reserved77;
  /* 0x004e */ unsigned short SpeInterruptGsi;
} PROCLOCALGIC, *PPROCLOCALGIC; /* size: 0x0050 */

typedef enum _LDR_HOT_PATCH_STATE
{
  LdrHotPatchBaseImage = 0,
  LdrHotPatchNotApplied = 1,
  LdrHotPatchAppliedReverse = 2,
  LdrHotPatchAppliedForward = 3,
  LdrHotPatchFailedToPatch = 4,
  LdrHotPatchStateMax = 5,
} LDR_HOT_PATCH_STATE, *PLDR_HOT_PATCH_STATE;

typedef struct _IOSAPIC
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned char IOSAPICID;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long SystemVectorBase;
  /* 0x0008 */ unsigned __int64 IOSAPICAddress;
} IOSAPIC, *PIOSAPIC; /* size: 0x0010 */

typedef struct _PRIVATE_CACHE_MAP_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long DontUse : 16; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReadAheadActive : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned long ReadAheadEnabled : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned long PagePriority : 3; /* bit position: 18 */
    /* 0x0000 */ unsigned long PipelineReadAheads : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long Available : 10; /* bit position: 22 */
  }; /* bitfield */
} PRIVATE_CACHE_MAP_FLAGS, *PPRIVATE_CACHE_MAP_FLAGS; /* size: 0x0004 */

typedef enum _RTL_GENERIC_COMPARE_RESULTS
{
  GenericLessThan = 0,
  GenericGreaterThan = 1,
  GenericEqual = 2,
} RTL_GENERIC_COMPARE_RESULTS, *PRTL_GENERIC_COMPARE_RESULTS;

typedef struct _PLATFORM_INTERRUPT
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned char InterruptType;
  /* 0x0005 */ unsigned char APICID;
  /* 0x0006 */ unsigned char ACPIEID;
  /* 0x0007 */ unsigned char IOSAPICVector;
  /* 0x0008 */ unsigned long GlobalVector;
  /* 0x000c */ unsigned long Reserved;
} PLATFORM_INTERRUPT, *PPLATFORM_INTERRUPT; /* size: 0x0010 */

typedef enum _POP_FX_ACCOUNTING_MODE
{
  PopFxAccountingModeDisabled = 0,
  PopFxAccountingModeBasic = 1,
  PopFxAccountingModeEnhanced = 2,
  PopFxAccountingModeMax = 3,
} POP_FX_ACCOUNTING_MODE, *PPOP_FX_ACCOUNTING_MODE;

typedef struct _KCLOCK_INCREMENT_TRACE
{
  /* 0x0000 */ unsigned long ActualIncrement;
  /* 0x0004 */ unsigned long RequestedIncrement;
  /* 0x0008 */ unsigned __int64 InterruptTime;
  /* 0x0010 */ unsigned __int64 PerformanceCounter;
  /* 0x0018 */ unsigned char OneShot;
  /* 0x0019 */ char __PADDING__[7];
} KCLOCK_INCREMENT_TRACE, *PKCLOCK_INCREMENT_TRACE; /* size: 0x0020 */

typedef enum _DOMAIN_CONFIGURATION_ARCH
{
  DomainConfigurationArm64 = 0,
  DomainConfigurationX64 = 1,
  DomainConfigurationInvalid = 2,
} DOMAIN_CONFIGURATION_ARCH, *PDOMAIN_CONFIGURATION_ARCH;

typedef enum _FUNCTION_TABLE_TYPE
{
  RF_SORTED = 0,
  RF_UNSORTED = 1,
  RF_CALLBACK = 2,
  RF_KERNEL_DYNAMIC = 3,
} FUNCTION_TABLE_TYPE, *PFUNCTION_TABLE_TYPE;

typedef struct _MMVAD_SHORT
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _MMVAD_SHORT* NextVad;
      /* 0x0008 */ void* ExtraCreateInfo;
    }; /* size: 0x0010 */
    /* 0x0000 */ struct _RTL_BALANCED_NODE VadNode;
  }; /* size: 0x0018 */
  /* 0x0018 */ unsigned long StartingVpn;
  /* 0x001c */ unsigned long EndingVpn;
  /* 0x0020 */ unsigned char StartingVpnHigh;
  /* 0x0021 */ unsigned char EndingVpnHigh;
  /* 0x0022 */ unsigned char CommitChargeHigh;
  /* 0x0023 */ unsigned char SpareNT64VadUChar;
  /* 0x0024 */ volatile long ReferenceCount;
  /* 0x0028 */ struct _EX_PUSH_LOCK PushLock;
  union
  {
    union
    {
      /* 0x0030 */ unsigned long LongFlags;
      /* 0x0030 */ struct _MMVAD_FLAGS VadFlags;
      /* 0x0030 */ struct _MM_PRIVATE_VAD_FLAGS PrivateVadFlags;
      /* 0x0030 */ struct _MM_GRAPHICS_VAD_FLAGS GraphicsVadFlags;
      /* 0x0030 */ struct _MM_SHARED_VAD_FLAGS SharedVadFlags;
      /* 0x0030 */ volatile unsigned long VolatileVadLong;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0034 */ unsigned long CommitCharge;
  union
  {
    /* 0x0038 */ struct _MI_VAD_EVENT_BLOCK* EventList;
  } /* size: 0x0008 */ u5;
} MMVAD_SHORT, *PMMVAD_SHORT; /* size: 0x0040 */

typedef enum _MI_PRE_PHASE0_BUGCHECK_PARAMETER
{
  LoaderPfnDatabaseAllGood = 0,
  LoaderPfnDatabaseNoBytes = 1,
  LoaderPfnDatabaseBadPxeFormat = 2,
  LoaderPfnDatabaseInsufficientSetPxes = 3,
  LoaderPfnDatabaseInconsistentBits = 4,
  LoaderPfnDatabaseNoRegionSpace = 5,
} MI_PRE_PHASE0_BUGCHECK_PARAMETER, *PMI_PRE_PHASE0_BUGCHECK_PARAMETER;

typedef struct _INTERRUPT_FUNCTION_TABLE
{
  /* 0x0000 */ void* InitializeLocalUnit /* function */;
  /* 0x0008 */ void* InitializeIoUnit /* function */;
  /* 0x0010 */ void* SetPriority /* function */;
  /* 0x0018 */ void* GetLocalUnitError /* function */;
  /* 0x0020 */ void* ClearLocalUnitError /* function */;
  /* 0x0028 */ void* GetLogicalId /* function */;
  /* 0x0030 */ void* SetLogicalId /* function */;
  /* 0x0038 */ void* AcceptAndGetSource /* function */;
  /* 0x0040 */ void* EndOfInterrupt /* function */;
  /* 0x0048 */ void* FastEndOfInterrupt /* function */;
  /* 0x0050 */ void* SetLineState /* function */;
  /* 0x0058 */ void* RequestInterrupt /* function */;
  /* 0x0060 */ void* StartProcessor /* function */;
  /* 0x0068 */ void* GenerateMessage /* function */;
  /* 0x0070 */ void* ConvertId /* function */;
  /* 0x0078 */ void* SaveLocalInterrupts /* function */;
  /* 0x0080 */ void* ReplayLocalInterrupts /* function */;
  /* 0x0088 */ void* DeinitializeLocalUnit /* function */;
  /* 0x0090 */ void* DeinitializeIoUnit /* function */;
  /* 0x0098 */ void* QueryAndGetSource /* function */;
  /* 0x00a0 */ void* DeactivateInterrupt /* function */;
  /* 0x00a8 */ void* DirectedEndOfInterrupt /* function */;
  /* 0x00b0 */ void* QueryLocalUnitInfo /* function */;
  /* 0x00b8 */ void* QueryPendingState /* function */;
  /* 0x00c0 */ void* CaptureGlobalCrashdumpState /* function */;
  /* 0x00c8 */ void* CaptureProcessorCrashdumpState /* function */;
} INTERRUPT_FUNCTION_TABLE, *PINTERRUPT_FUNCTION_TABLE; /* size: 0x00d0 */

typedef struct _DOMAIN_CONFIGURATION_ARM64
{
  /* 0x0000 */ union _LARGE_INTEGER Ttbr0;
  /* 0x0008 */ union _LARGE_INTEGER Ttbr1;
  /* 0x0010 */ unsigned long Mair0;
  /* 0x0014 */ unsigned long Mair1;
  /* 0x0018 */ unsigned char InputSize0;
  /* 0x0019 */ unsigned char InputSize1;
  /* 0x001a */ unsigned char CoherentTableWalks;
  /* 0x001b */ unsigned char TranslationEnabled;
  /* 0x001c */ long __PADDING__[1];
} DOMAIN_CONFIGURATION_ARM64, *PDOMAIN_CONFIGURATION_ARM64; /* size: 0x0020 */

typedef struct _DOMAIN_CONFIGURATION_X64
{
  /* 0x0000 */ union _LARGE_INTEGER FirstLevelPageTableRoot;
  /* 0x0008 */ unsigned char TranslationEnabled;
  /* 0x0009 */ char __PADDING__[7];
} DOMAIN_CONFIGURATION_X64, *PDOMAIN_CONFIGURATION_X64; /* size: 0x0010 */

typedef struct _DOMAIN_CONFIGURATION
{
  /* 0x0000 */ enum _DOMAIN_CONFIGURATION_ARCH Type;
  /* 0x0004 */ long Padding_166;
  union
  {
    /* 0x0008 */ struct _DOMAIN_CONFIGURATION_ARM64 Arm64;
    struct
    {
      /* 0x0008 */ struct _DOMAIN_CONFIGURATION_X64 X64;
      /* 0x0018 */ long __PADDING__[4];
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
} DOMAIN_CONFIGURATION, *PDOMAIN_CONFIGURATION; /* size: 0x0028 */

typedef enum _POWER_LIMIT_TYPES
{
  PowerLimitContinuous = 0,
  PowerLimitBurst = 1,
  PowerLimitRapid = 2,
  PowerLimitPreemptive = 3,
  PowerLimitPreemptiveOffset = 4,
  PowerLimitTypeMax = 5,
} POWER_LIMIT_TYPES, *PPOWER_LIMIT_TYPES;

typedef struct _X86_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long TraceFlag;
  /* 0x0004 */ unsigned long Dr7;
  /* 0x0008 */ unsigned long CurrentSymbolStart;
  /* 0x000c */ unsigned long CurrentSymbolEnd;
} X86_DBGKD_CONTROL_SET, *PX86_DBGKD_CONTROL_SET; /* size: 0x0010 */

typedef struct _IA64_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned __int64 CurrentSymbolStart;
  /* 0x000c */ unsigned __int64 CurrentSymbolEnd;
} IA64_DBGKD_CONTROL_SET, *PIA64_DBGKD_CONTROL_SET; /* size: 0x0014 */

typedef struct _AMD64_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long TraceFlag;
  /* 0x0004 */ unsigned __int64 Dr7;
  /* 0x000c */ unsigned __int64 CurrentSymbolStart;
  /* 0x0014 */ unsigned __int64 CurrentSymbolEnd;
} AMD64_DBGKD_CONTROL_SET, *PAMD64_DBGKD_CONTROL_SET; /* size: 0x001c */

typedef struct _ARM_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long CurrentSymbolStart;
  /* 0x0008 */ unsigned long CurrentSymbolEnd;
} ARM_DBGKD_CONTROL_SET, *PARM_DBGKD_CONTROL_SET; /* size: 0x000c */

typedef struct _ARMCE_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long CurrentSymbolStart;
  /* 0x0008 */ unsigned long CurrentSymbolEnd;
} ARMCE_DBGKD_CONTROL_SET, *PARMCE_DBGKD_CONTROL_SET; /* size: 0x000c */

typedef struct _PPC_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long CurrentSymbolStart;
  /* 0x0008 */ unsigned long CurrentSymbolEnd;
} PPC_DBGKD_CONTROL_SET, *PPPC_DBGKD_CONTROL_SET; /* size: 0x000c */

typedef struct _DBGKD_ANY_CONTROL_SET
{
  union
  {
    /* 0x0000 */ struct _X86_DBGKD_CONTROL_SET X86ControlSet;
    /* 0x0000 */ unsigned long AlphaControlSet;
    /* 0x0000 */ struct _IA64_DBGKD_CONTROL_SET IA64ControlSet;
    /* 0x0000 */ struct _AMD64_DBGKD_CONTROL_SET Amd64ControlSet;
    /* 0x0000 */ struct _ARM_DBGKD_CONTROL_SET ArmControlSet;
    /* 0x0000 */ struct _ARM64_DBGKD_CONTROL_SET Arm64ControlSet;
    /* 0x0000 */ struct _ARMCE_DBGKD_CONTROL_SET ArmCeControlSet;
    struct
    {
      /* 0x0000 */ struct _PPC_DBGKD_CONTROL_SET PpcControlSet;
      /* 0x000c */ long __PADDING__[4];
    }; /* size: 0x001c */
  }; /* size: 0x001c */
} DBGKD_ANY_CONTROL_SET, *PDBGKD_ANY_CONTROL_SET; /* size: 0x001c */

typedef enum _IOMMU_DEVICE_CREATION_CONFIGURATION_TYPE
{
  IommuDeviceCreationConfigTypeNone = 0,
  IommuDeviceCreationConfigTypeAcpi = 1,
  IommuDeviceCreationConfigTypeDeviceId = 2,
  IommuDeviceCreationConfigTypePasid = 3,
  IommuDeviceCreationConfigTypeMax = 4,
} IOMMU_DEVICE_CREATION_CONFIGURATION_TYPE, *PIOMMU_DEVICE_CREATION_CONFIGURATION_TYPE;

typedef enum _ARBITER_ACTION
{
  ArbiterActionTestAllocation = 0,
  ArbiterActionRetestAllocation = 1,
  ArbiterActionCommitAllocation = 2,
  ArbiterActionRollbackAllocation = 3,
  ArbiterActionQueryAllocatedResources = 4,
  ArbiterActionWriteReservedResources = 5,
  ArbiterActionQueryConflict = 6,
  ArbiterActionQueryArbitrate = 7,
  ArbiterActionAddReserved = 8,
  ArbiterActionBootAllocation = 9,
} ARBITER_ACTION, *PARBITER_ACTION;

typedef enum _MACHINE_CHECK_NESTING_LEVEL
{
  McheckNormal = 0,
  McheckNmi = 1,
  McheckNestingLevels = 2,
} MACHINE_CHECK_NESTING_LEVEL, *PMACHINE_CHECK_NESTING_LEVEL;

typedef struct _M128A
{
  /* 0x0000 */ unsigned __int64 Low;
  /* 0x0008 */ __int64 High;
} M128A, *PM128A; /* size: 0x0010 */

typedef struct _KTRAP_FRAME
{
  /* 0x0000 */ unsigned __int64 P1Home;
  /* 0x0008 */ unsigned __int64 P2Home;
  /* 0x0010 */ unsigned __int64 P3Home;
  /* 0x0018 */ unsigned __int64 P4Home;
  /* 0x0020 */ unsigned __int64 P5;
  union
  {
    /* 0x0028 */ char PreviousMode;
    /* 0x0028 */ unsigned char InterruptRetpolineState;
  }; /* size: 0x0001 */
  /* 0x0029 */ unsigned char PreviousIrql;
  union
  {
    /* 0x002a */ unsigned char FaultIndicator;
    /* 0x002a */ unsigned char NmiMsrIbrs;
  }; /* size: 0x0001 */
  /* 0x002b */ unsigned char ExceptionActive;
  /* 0x002c */ unsigned long MxCsr;
  /* 0x0030 */ unsigned __int64 Rax;
  /* 0x0038 */ unsigned __int64 Rcx;
  /* 0x0040 */ unsigned __int64 Rdx;
  /* 0x0048 */ unsigned __int64 R8;
  /* 0x0050 */ unsigned __int64 R9;
  /* 0x0058 */ unsigned __int64 R10;
  /* 0x0060 */ unsigned __int64 R11;
  union
  {
    /* 0x0068 */ unsigned __int64 GsBase;
    /* 0x0068 */ unsigned __int64 GsSwap;
  }; /* size: 0x0008 */
  /* 0x0070 */ struct _M128A Xmm0;
  /* 0x0080 */ struct _M128A Xmm1;
  /* 0x0090 */ struct _M128A Xmm2;
  /* 0x00a0 */ struct _M128A Xmm3;
  /* 0x00b0 */ struct _M128A Xmm4;
  /* 0x00c0 */ struct _M128A Xmm5;
  union
  {
    /* 0x00d0 */ unsigned __int64 FaultAddress;
    /* 0x00d0 */ unsigned __int64 ContextRecord;
  }; /* size: 0x0008 */
  union
  {
    struct
    {
      /* 0x00d8 */ unsigned __int64 Dr0;
      /* 0x00e0 */ unsigned __int64 Dr1;
      /* 0x00e8 */ unsigned __int64 Dr2;
      /* 0x00f0 */ unsigned __int64 Dr3;
      /* 0x00f8 */ unsigned __int64 Dr6;
      /* 0x0100 */ unsigned __int64 Dr7;
    }; /* size: 0x0030 */
    struct
    {
      /* 0x00d8 */ unsigned __int64 ShadowStackFrame;
      /* 0x00e0 */ unsigned __int64 Spare[5];
    }; /* size: 0x0030 */
  }; /* size: 0x0030 */
  /* 0x0108 */ unsigned __int64 DebugControl;
  /* 0x0110 */ unsigned __int64 LastBranchToRip;
  /* 0x0118 */ unsigned __int64 LastBranchFromRip;
  /* 0x0120 */ unsigned __int64 LastExceptionToRip;
  /* 0x0128 */ unsigned __int64 LastExceptionFromRip;
  /* 0x0130 */ unsigned short SegDs;
  /* 0x0132 */ unsigned short SegEs;
  /* 0x0134 */ unsigned short SegFs;
  /* 0x0136 */ unsigned short SegGs;
  /* 0x0138 */ unsigned __int64 TrapFrame;
  union
  {
    struct
    {
      /* 0x0140 */ unsigned long NmiPreviousSpecCtrl;
      /* 0x0144 */ unsigned long NmiPreviousSpecCtrlPad;
    }; /* size: 0x0008 */
    /* 0x0140 */ unsigned __int64 Rbx;
  }; /* size: 0x0008 */
  /* 0x0148 */ unsigned __int64 Rdi;
  /* 0x0150 */ unsigned __int64 Rsi;
  /* 0x0158 */ unsigned __int64 Rbp;
  union
  {
    /* 0x0160 */ unsigned __int64 ErrorCode;
    /* 0x0160 */ unsigned __int64 ExceptionFrame;
  }; /* size: 0x0008 */
  /* 0x0168 */ unsigned __int64 Rip;
  /* 0x0170 */ unsigned short SegCs;
  /* 0x0172 */ unsigned char Fill0;
  /* 0x0173 */ unsigned char Logging;
  /* 0x0174 */ unsigned short Fill1[2];
  /* 0x0178 */ unsigned long EFlags;
  /* 0x017c */ unsigned long Fill2;
  /* 0x0180 */ unsigned __int64 Rsp;
  /* 0x0188 */ unsigned short SegSs;
  /* 0x018a */ unsigned short Fill3;
  /* 0x018c */ unsigned long Fill4;
} KTRAP_FRAME, *PKTRAP_FRAME; /* size: 0x0190 */

typedef enum _PNP_WATCHDOG_TYPE
{
  PNP_WATCHDOG_NONE = 0,
  PNP_EVENT_WORKER_WATCHDOG = 1,
  PNP_DEVICE_COMPLETION_QUEUE_WATCHDOG = 2,
  PNP_DELAYED_REMOVE_WORKER_WATCHDOG = 3,
  PNP_ADD_DEVICE_WATCHDOG = 4,
  PNP_DRIVER_ENTRY_WATCHDOG = 5,
} PNP_WATCHDOG_TYPE, *PPNP_WATCHDOG_TYPE;

typedef struct _OWNER_ENTRY
{
  /* 0x0000 */ unsigned __int64 OwnerThread;
  union
  {
    struct /* bitfield */
    {
      /* 0x0008 */ unsigned long IoPriorityBoosted : 1; /* bit position: 0 */
      /* 0x0008 */ unsigned long OwnerReferenced : 1; /* bit position: 1 */
      /* 0x0008 */ unsigned long IoQoSPriorityBoosted : 1; /* bit position: 2 */
      /* 0x0008 */ unsigned long OwnerCount : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0008 */ unsigned long TableSize;
  }; /* size: 0x0004 */
  /* 0x000c */ long __PADDING__[1];
} OWNER_ENTRY, *POWNER_ENTRY; /* size: 0x0010 */

typedef struct _ERESOURCE
{
  /* 0x0000 */ struct _LIST_ENTRY SystemResourcesList;
  /* 0x0010 */ struct _OWNER_ENTRY* OwnerTable;
  /* 0x0018 */ short ActiveCount;
  union
  {
    /* 0x001a */ unsigned short Flag;
    struct
    {
      /* 0x001a */ unsigned char ReservedLowFlags;
      /* 0x001b */ unsigned char WaiterPriority;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x001c */ long Padding_167;
  /* 0x0020 */ void* SharedWaiters;
  /* 0x0028 */ void* ExclusiveWaiters;
  /* 0x0030 */ struct _OWNER_ENTRY OwnerEntry;
  /* 0x0040 */ unsigned long ActiveEntries;
  /* 0x0044 */ unsigned long ContentionCount;
  /* 0x0048 */ unsigned long NumberOfSharedWaiters;
  /* 0x004c */ unsigned long NumberOfExclusiveWaiters;
  /* 0x0050 */ volatile char MiscFlags;
  /* 0x0051 */ unsigned char Reserved1[3];
  /* 0x0054 */ unsigned long ResourceTimeoutCount;
  union
  {
    /* 0x0058 */ void* Address;
    /* 0x0058 */ unsigned __int64 CreatorBackTraceIndex;
  }; /* size: 0x0008 */
  /* 0x0060 */ unsigned __int64 SpinLock;
} ERESOURCE, *PERESOURCE; /* size: 0x0068 */

typedef struct _KTM
{
  /* 0x0000 */ unsigned long cookie;
  /* 0x0004 */ long Padding_168;
  /* 0x0008 */ struct _KMUTANT Mutex;
  /* 0x0040 */ enum KTM_STATE State;
  /* 0x0044 */ long Padding_169;
  /* 0x0048 */ struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  /* 0x0070 */ struct _GUID TmIdentity;
  /* 0x0080 */ unsigned long Flags;
  /* 0x0084 */ unsigned long VolatileFlags;
  /* 0x0088 */ struct _UNICODE_STRING LogFileName;
  /* 0x0098 */ struct _FILE_OBJECT* LogFileObject;
  /* 0x00a0 */ void* MarshallingContext;
  /* 0x00a8 */ void* LogManagementContext;
  /* 0x00b0 */ struct _KTMOBJECT_NAMESPACE Transactions;
  /* 0x0158 */ struct _KTMOBJECT_NAMESPACE ResourceManagers;
  /* 0x0200 */ struct _KMUTANT LsnOrderedMutex;
  /* 0x0238 */ struct _LIST_ENTRY LsnOrderedList;
  /* 0x0248 */ union _LARGE_INTEGER CommitVirtualClock;
  /* 0x0250 */ struct _FAST_MUTEX CommitVirtualClockMutex;
  /* 0x0288 */ union _CLS_LSN BaseLsn;
  /* 0x0290 */ union _CLS_LSN CurrentReadLsn;
  /* 0x0298 */ union _CLS_LSN LastRecoveredLsn;
  /* 0x02a0 */ void* TmRmHandle;
  /* 0x02a8 */ struct _KRESOURCEMANAGER* TmRm;
  /* 0x02b0 */ struct _KEVENT LogFullNotifyEvent;
  /* 0x02c8 */ struct _WORK_QUEUE_ITEM CheckpointWorkItem;
  /* 0x02e8 */ union _CLS_LSN CheckpointTargetLsn;
  /* 0x02f0 */ struct _WORK_QUEUE_ITEM LogFullCompletedWorkItem;
  /* 0x0310 */ struct _ERESOURCE LogWriteResource;
  /* 0x0378 */ unsigned long LogFlags;
  /* 0x037c */ long LogFullStatus;
  /* 0x0380 */ long RecoveryStatus;
  /* 0x0384 */ long Padding_170;
  /* 0x0388 */ union _CLS_LSN LastCheckBaseLsn;
  /* 0x0390 */ struct _LIST_ENTRY RestartOrderedList;
  /* 0x03a0 */ struct _WORK_QUEUE_ITEM OfflineWorkItem;
} KTM, *PKTM; /* size: 0x03c0 */

typedef struct _DMA_IOMMU_INTERFACE_V2
{
  /* 0x0000 */ void* CreateDomainEx /* function */;
  /* 0x0008 */ void* DeleteDomain /* function */;
  /* 0x0010 */ void* AttachDeviceEx /* function */;
  /* 0x0018 */ void* DetachDeviceEx /* function */;
  /* 0x0020 */ void* FlushDomain /* function */;
  /* 0x0028 */ void* FlushDomainByVaList /* function */;
  /* 0x0030 */ void* QueryInputMappings /* function */;
  /* 0x0038 */ void* MapLogicalRangeEx /* function */;
  /* 0x0040 */ void* UnmapLogicalRange /* function */;
  /* 0x0048 */ void* MapIdentityRangeEx /* function */;
  /* 0x0050 */ void* UnmapIdentityRangeEx /* function */;
  /* 0x0058 */ void* SetDeviceFaultReportingEx /* function */;
  /* 0x0060 */ void* ConfigureDomain /* function */;
  /* 0x0068 */ void* QueryAvailableDomainTypes /* function */;
  /* 0x0070 */ void* RegisterInterfaceStateChangeCallback /* function */;
  /* 0x0078 */ void* UnregisterInterfaceStateChangeCallback /* function */;
  /* 0x0080 */ void* ReserveLogicalAddressRange /* function */;
  /* 0x0088 */ void* FreeReservedLogicalAddressRange /* function */;
  /* 0x0090 */ void* MapReservedLogicalRange /* function */;
  /* 0x0098 */ void* UnmapReservedLogicalRange /* function */;
  /* 0x00a0 */ void* CreateDevice /* function */;
  /* 0x00a8 */ void* DeleteDevice /* function */;
} DMA_IOMMU_INTERFACE_V2, *PDMA_IOMMU_INTERFACE_V2; /* size: 0x00b0 */

typedef struct _KWAIT_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY WaitListEntry;
  /* 0x0010 */ unsigned char WaitType;
  /* 0x0011 */ volatile unsigned char BlockState;
  /* 0x0012 */ unsigned short WaitKey;
  /* 0x0014 */ long SpareLong;
  union
  {
    /* 0x0018 */ struct _KTHREAD* Thread;
    /* 0x0018 */ struct _KQUEUE* NotificationQueue;
    /* 0x0018 */ struct _KDPC* Dpc;
  }; /* size: 0x0008 */
  /* 0x0020 */ void* Object;
  /* 0x0028 */ void* SparePtr;
} KWAIT_BLOCK, *PKWAIT_BLOCK; /* size: 0x0030 */

typedef enum _IOMMU_PASID_CONFIGURATION_TYPE
{
  PasidConfigTypeDefaultPasidOnly = 0,
  PasidConfigTypePasidTaggedDma = 1,
  PasidConfigTypeMax = 2,
} IOMMU_PASID_CONFIGURATION_TYPE, *PIOMMU_PASID_CONFIGURATION_TYPE;

typedef enum _PEP_WORK_TYPE
{
  PepWorkActiveComplete = 0,
  PepWorkRequestIdleState = 1,
  PepWorkDevicePower = 2,
  PepWorkRequestPowerControl = 3,
  PepWorkDeviceIdle = 4,
  PepWorkCompleteIdleState = 5,
  PepWorkCompletePerfState = 6,
  PepWorkAcpiNotify = 7,
  PepWorkAcpiEvaluateControlMethodComplete = 8,
  PepWorkMax = 9,
} PEP_WORK_TYPE, *PPEP_WORK_TYPE;

typedef enum _CONFIGURATION_TYPE
{
  ArcSystem = 0,
  CentralProcessor = 1,
  FloatingPointProcessor = 2,
  PrimaryIcache = 3,
  PrimaryDcache = 4,
  SecondaryIcache = 5,
  SecondaryDcache = 6,
  SecondaryCache = 7,
  EisaAdapter = 8,
  TcAdapter = 9,
  ScsiAdapter = 10,
  DtiAdapter = 11,
  MultiFunctionAdapter = 12,
  DiskController = 13,
  TapeController = 14,
  CdromController = 15,
  WormController = 16,
  SerialController = 17,
  NetworkController = 18,
  DisplayController = 19,
  ParallelController = 20,
  PointerController = 21,
  KeyboardController = 22,
  AudioController = 23,
  OtherController = 24,
  DiskPeripheral = 25,
  FloppyDiskPeripheral = 26,
  TapePeripheral = 27,
  ModemPeripheral = 28,
  MonitorPeripheral = 29,
  PrinterPeripheral = 30,
  PointerPeripheral = 31,
  KeyboardPeripheral = 32,
  TerminalPeripheral = 33,
  OtherPeripheral = 34,
  LinePeripheral = 35,
  NetworkPeripheral = 36,
  SystemMemory = 37,
  DockingInformation = 38,
  RealModeIrqRoutingTable = 39,
  RealModePCIEnumeration = 40,
  MaximumType = 41,
} CONFIGURATION_TYPE, *PCONFIGURATION_TYPE;

typedef enum _ETW_NOTIFICATION_TYPE
{
  EtwNotificationTypeNoReply = 1,
  EtwNotificationTypeLegacyEnable = 2,
  EtwNotificationTypeEnable = 3,
  EtwNotificationTypePrivateLogger = 4,
  EtwNotificationTypePerflib = 5,
  EtwNotificationTypeAudio = 6,
  EtwNotificationTypeSession = 7,
  EtwNotificationTypeReserved = 8,
  EtwNotificationTypeCredentialUI = 9,
  EtwNotificationTypeInProcSession = 10,
  EtwNotificationTypeFilteredPrivateLogger = 11,
  EtwNotificationTypeMax = 12,
} ETW_NOTIFICATION_TYPE, *PETW_NOTIFICATION_TYPE;

typedef struct _KWAIT_CHAIN
{
  /* 0x0000 */ void* Head;
} KWAIT_CHAIN, *PKWAIT_CHAIN; /* size: 0x0008 */

typedef struct _FAST_OWNER_ENTRY_INTERNAL
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ void* ThreadAddressAndDisowned;
  /* 0x0018 */ void* LockAddress;
  /* 0x0020 */ long RecursiveReferenceCount;
  /* 0x0024 */ unsigned char AbLockHandle;
  struct /* bitfield */
  {
    /* 0x0025 */ unsigned char DynamicallyAllocated : 1; /* bit position: 0 */
    /* 0x0025 */ unsigned char CallerExclusive : 1; /* bit position: 1 */
    /* 0x0025 */ unsigned char CurrentlyWaitingShared : 1; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0026 */ unsigned char Reserved[2];
} FAST_OWNER_ENTRY_INTERNAL, *PFAST_OWNER_ENTRY_INTERNAL; /* size: 0x0028 */

typedef struct _FAST_ERESOURCE_INTERNAL
{
  /* 0x0000 */ volatile union FAST_ERESOURCE_LOCK_STATE LockWord;
  /* 0x0008 */ struct _KWAIT_CHAIN SharedWaiters;
  /* 0x0010 */ struct _KWAIT_CHAIN ExclusiveWaiters;
  /* 0x0018 */ unsigned char Reserved;
  /* 0x0019 */ volatile char MiscFlags;
  /* 0x001a */ unsigned short Flag;
  /* 0x001c */ unsigned long ResourceTimeoutCount;
  /* 0x0020 */ unsigned long Reserved1;
  /* 0x0024 */ long Padding_171;
  /* 0x0028 */ unsigned __int64 CreatorBackTraceIndex;
  /* 0x0030 */ unsigned __int64 SpinLock;
  /* 0x0038 */ unsigned long NumberOfSharedWaiters;
  /* 0x003c */ unsigned long ContentionCount;
  /* 0x0040 */ struct _FAST_OWNER_ENTRY_INTERNAL ExclusiveOwnerEntry;
} FAST_ERESOURCE_INTERNAL, *PFAST_ERESOURCE_INTERNAL; /* size: 0x0068 */

typedef enum _PO_FX_PERF_STATE_TYPE
{
  PoFxPerfStateTypeDiscrete = 0,
  PoFxPerfStateTypeRange = 1,
  PoFxPerfStateTypeMaximum = 2,
} PO_FX_PERF_STATE_TYPE, *PPO_FX_PERF_STATE_TYPE;

typedef struct _PROCESSOR_NUMBER
{
  /* 0x0000 */ unsigned short Group;
  /* 0x0002 */ unsigned char Number;
  /* 0x0003 */ unsigned char Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER; /* size: 0x0004 */

struct LIST_ENTRY64
{
  /* 0x0000 */ unsigned __int64 Flink;
  /* 0x0008 */ unsigned __int64 Blink;
}; /* size: 0x0010 */

typedef struct _SYNCH_COUNTERS
{
  /* 0x0000 */ unsigned long SpinLockAcquireCount;
  /* 0x0004 */ unsigned long SpinLockContentionCount;
  /* 0x0008 */ unsigned long SpinLockSpinCount;
  /* 0x000c */ unsigned long IpiSendRequestBroadcastCount;
  /* 0x0010 */ unsigned long IpiSendRequestRoutineCount;
  /* 0x0014 */ unsigned long IpiSendSoftwareInterruptCount;
  /* 0x0018 */ unsigned long ExInitializeResourceCount;
  /* 0x001c */ unsigned long ExReInitializeResourceCount;
  /* 0x0020 */ unsigned long ExDeleteResourceCount;
  /* 0x0024 */ unsigned long ExecutiveResourceAcquiresCount;
  /* 0x0028 */ unsigned long ExecutiveResourceContentionsCount;
  /* 0x002c */ unsigned long ExecutiveResourceReleaseExclusiveCount;
  /* 0x0030 */ unsigned long ExecutiveResourceReleaseSharedCount;
  /* 0x0034 */ unsigned long ExecutiveResourceConvertsCount;
  /* 0x0038 */ unsigned long ExAcqResExclusiveAttempts;
  /* 0x003c */ unsigned long ExAcqResExclusiveAcquiresExclusive;
  /* 0x0040 */ unsigned long ExAcqResExclusiveAcquiresExclusiveRecursive;
  /* 0x0044 */ unsigned long ExAcqResExclusiveWaits;
  /* 0x0048 */ unsigned long ExAcqResExclusiveNotAcquires;
  /* 0x004c */ unsigned long ExAcqResSharedAttempts;
  /* 0x0050 */ unsigned long ExAcqResSharedAcquiresExclusive;
  /* 0x0054 */ unsigned long ExAcqResSharedAcquiresShared;
  /* 0x0058 */ unsigned long ExAcqResSharedAcquiresSharedRecursive;
  /* 0x005c */ unsigned long ExAcqResSharedWaits;
  /* 0x0060 */ unsigned long ExAcqResSharedNotAcquires;
  /* 0x0064 */ unsigned long ExAcqResSharedStarveExclusiveAttempts;
  /* 0x0068 */ unsigned long ExAcqResSharedStarveExclusiveAcquiresExclusive;
  /* 0x006c */ unsigned long ExAcqResSharedStarveExclusiveAcquiresShared;
  /* 0x0070 */ unsigned long ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;
  /* 0x0074 */ unsigned long ExAcqResSharedStarveExclusiveWaits;
  /* 0x0078 */ unsigned long ExAcqResSharedStarveExclusiveNotAcquires;
  /* 0x007c */ unsigned long ExAcqResSharedWaitForExclusiveAttempts;
  /* 0x0080 */ unsigned long ExAcqResSharedWaitForExclusiveAcquiresExclusive;
  /* 0x0084 */ unsigned long ExAcqResSharedWaitForExclusiveAcquiresShared;
  /* 0x0088 */ unsigned long ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;
  /* 0x008c */ unsigned long ExAcqResSharedWaitForExclusiveWaits;
  /* 0x0090 */ unsigned long ExAcqResSharedWaitForExclusiveNotAcquires;
  /* 0x0094 */ unsigned long ExSetResOwnerPointerExclusive;
  /* 0x0098 */ unsigned long ExSetResOwnerPointerSharedNew;
  /* 0x009c */ unsigned long ExSetResOwnerPointerSharedOld;
  /* 0x00a0 */ unsigned long ExTryToAcqExclusiveAttempts;
  /* 0x00a4 */ unsigned long ExTryToAcqExclusiveAcquires;
  /* 0x00a8 */ unsigned long ExBoostExclusiveOwner;
  /* 0x00ac */ unsigned long ExBoostSharedOwners;
  /* 0x00b0 */ unsigned long ExEtwSynchTrackingNotificationsCount;
  /* 0x00b4 */ unsigned long ExEtwSynchTrackingNotificationsAccountedCount;
} SYNCH_COUNTERS, *PSYNCH_COUNTERS; /* size: 0x00b8 */

struct LIST_ENTRY32
{
  /* 0x0000 */ unsigned long Flink;
  /* 0x0004 */ unsigned long Blink;
}; /* size: 0x0008 */

typedef struct _STRING64
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ long Padding_172;
  /* 0x0008 */ unsigned __int64 Buffer;
} STRING64, *PSTRING64; /* size: 0x0010 */

typedef struct _PEB64
{
  /* 0x0000 */ unsigned char InheritedAddressSpace;
  /* 0x0001 */ unsigned char ReadImageFileExecOptions;
  /* 0x0002 */ unsigned char BeingDebugged;
  union
  {
    /* 0x0003 */ unsigned char BitField;
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char ImageUsesLargePages : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char IsProtectedProcess : 1; /* bit position: 1 */
      /* 0x0003 */ unsigned char IsImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0003 */ unsigned char SkipPatchingUser32Forwarders : 1; /* bit position: 3 */
      /* 0x0003 */ unsigned char IsPackagedProcess : 1; /* bit position: 4 */
      /* 0x0003 */ unsigned char IsAppContainer : 1; /* bit position: 5 */
      /* 0x0003 */ unsigned char IsProtectedProcessLight : 1; /* bit position: 6 */
      /* 0x0003 */ unsigned char IsLongPathAwareProcess : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0004 */ unsigned char Padding0[4];
  /* 0x0008 */ unsigned __int64 Mutant;
  /* 0x0010 */ unsigned __int64 ImageBaseAddress;
  /* 0x0018 */ unsigned __int64 Ldr;
  /* 0x0020 */ unsigned __int64 ProcessParameters;
  /* 0x0028 */ unsigned __int64 SubSystemData;
  /* 0x0030 */ unsigned __int64 ProcessHeap;
  /* 0x0038 */ unsigned __int64 FastPebLock;
  /* 0x0040 */ unsigned __int64 AtlThunkSListPtr;
  /* 0x0048 */ unsigned __int64 IFEOKey;
  union
  {
    /* 0x0050 */ unsigned long CrossProcessFlags;
    struct /* bitfield */
    {
      /* 0x0050 */ unsigned long ProcessInJob : 1; /* bit position: 0 */
      /* 0x0050 */ unsigned long ProcessInitializing : 1; /* bit position: 1 */
      /* 0x0050 */ unsigned long ProcessUsingVEH : 1; /* bit position: 2 */
      /* 0x0050 */ unsigned long ProcessUsingVCH : 1; /* bit position: 3 */
      /* 0x0050 */ unsigned long ProcessUsingFTH : 1; /* bit position: 4 */
      /* 0x0050 */ unsigned long ProcessPreviouslyThrottled : 1; /* bit position: 5 */
      /* 0x0050 */ unsigned long ProcessCurrentlyThrottled : 1; /* bit position: 6 */
      /* 0x0050 */ unsigned long ProcessImagesHotPatched : 1; /* bit position: 7 */
      /* 0x0050 */ unsigned long ReservedBits0 : 24; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0054 */ unsigned char Padding1[4];
  union
  {
    /* 0x0058 */ unsigned __int64 KernelCallbackTable;
    /* 0x0058 */ unsigned __int64 UserSharedInfoPtr;
  }; /* size: 0x0008 */
  /* 0x0060 */ unsigned long SystemReserved;
  /* 0x0064 */ unsigned long AtlThunkSListPtr32;
  /* 0x0068 */ unsigned __int64 ApiSetMap;
  /* 0x0070 */ unsigned long TlsExpansionCounter;
  /* 0x0074 */ unsigned char Padding2[4];
  /* 0x0078 */ unsigned __int64 TlsBitmap;
  /* 0x0080 */ unsigned long TlsBitmapBits[2];
  /* 0x0088 */ unsigned __int64 ReadOnlySharedMemoryBase;
  /* 0x0090 */ unsigned __int64 SharedData;
  /* 0x0098 */ unsigned __int64 ReadOnlyStaticServerData;
  /* 0x00a0 */ unsigned __int64 AnsiCodePageData;
  /* 0x00a8 */ unsigned __int64 OemCodePageData;
  /* 0x00b0 */ unsigned __int64 UnicodeCaseTableData;
  /* 0x00b8 */ unsigned long NumberOfProcessors;
  /* 0x00bc */ unsigned long NtGlobalFlag;
  /* 0x00c0 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x00c8 */ unsigned __int64 HeapSegmentReserve;
  /* 0x00d0 */ unsigned __int64 HeapSegmentCommit;
  /* 0x00d8 */ unsigned __int64 HeapDeCommitTotalFreeThreshold;
  /* 0x00e0 */ unsigned __int64 HeapDeCommitFreeBlockThreshold;
  /* 0x00e8 */ unsigned long NumberOfHeaps;
  /* 0x00ec */ unsigned long MaximumNumberOfHeaps;
  /* 0x00f0 */ unsigned __int64 ProcessHeaps;
  /* 0x00f8 */ unsigned __int64 GdiSharedHandleTable;
  /* 0x0100 */ unsigned __int64 ProcessStarterHelper;
  /* 0x0108 */ unsigned long GdiDCAttributeList;
  /* 0x010c */ unsigned char Padding3[4];
  /* 0x0110 */ unsigned __int64 LoaderLock;
  /* 0x0118 */ unsigned long OSMajorVersion;
  /* 0x011c */ unsigned long OSMinorVersion;
  /* 0x0120 */ unsigned short OSBuildNumber;
  /* 0x0122 */ unsigned short OSCSDVersion;
  /* 0x0124 */ unsigned long OSPlatformId;
  /* 0x0128 */ unsigned long ImageSubsystem;
  /* 0x012c */ unsigned long ImageSubsystemMajorVersion;
  /* 0x0130 */ unsigned long ImageSubsystemMinorVersion;
  /* 0x0134 */ unsigned char Padding4[4];
  /* 0x0138 */ unsigned __int64 ActiveProcessAffinityMask;
  /* 0x0140 */ unsigned long GdiHandleBuffer[60];
  /* 0x0230 */ unsigned __int64 PostProcessInitRoutine;
  /* 0x0238 */ unsigned __int64 TlsExpansionBitmap;
  /* 0x0240 */ unsigned long TlsExpansionBitmapBits[32];
  /* 0x02c0 */ unsigned long SessionId;
  /* 0x02c4 */ unsigned char Padding5[4];
  /* 0x02c8 */ union _ULARGE_INTEGER AppCompatFlags;
  /* 0x02d0 */ union _ULARGE_INTEGER AppCompatFlagsUser;
  /* 0x02d8 */ unsigned __int64 pShimData;
  /* 0x02e0 */ unsigned __int64 AppCompatInfo;
  /* 0x02e8 */ struct _STRING64 CSDVersion;
  /* 0x02f8 */ unsigned __int64 ActivationContextData;
  /* 0x0300 */ unsigned __int64 ProcessAssemblyStorageMap;
  /* 0x0308 */ unsigned __int64 SystemDefaultActivationContextData;
  /* 0x0310 */ unsigned __int64 SystemAssemblyStorageMap;
  /* 0x0318 */ unsigned __int64 MinimumStackCommit;
  /* 0x0320 */ unsigned __int64 SparePointers[2];
  /* 0x0330 */ unsigned __int64 PatchLoaderData;
  /* 0x0338 */ unsigned __int64 ChpeV2ProcessInfo;
  /* 0x0340 */ unsigned long AppModelFeatureState;
  /* 0x0344 */ unsigned long SpareUlongs[2];
  /* 0x034c */ unsigned short ActiveCodePage;
  /* 0x034e */ unsigned short OemCodePage;
  /* 0x0350 */ unsigned short UseCaseMapping;
  /* 0x0352 */ unsigned short UnusedNlsField;
  /* 0x0354 */ long Padding_173;
  /* 0x0358 */ unsigned __int64 WerRegistrationData;
  /* 0x0360 */ unsigned __int64 WerShipAssertPtr;
  /* 0x0368 */ unsigned __int64 EcCodeBitMap;
  /* 0x0370 */ unsigned __int64 pImageHeaderHash;
  union
  {
    /* 0x0378 */ unsigned long TracingFlags;
    struct /* bitfield */
    {
      /* 0x0378 */ unsigned long HeapTracingEnabled : 1; /* bit position: 0 */
      /* 0x0378 */ unsigned long CritSecTracingEnabled : 1; /* bit position: 1 */
      /* 0x0378 */ unsigned long LibLoaderTracingEnabled : 1; /* bit position: 2 */
      /* 0x0378 */ unsigned long SpareTracingBits : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x037c */ unsigned char Padding6[4];
  /* 0x0380 */ unsigned __int64 CsrServerReadOnlySharedMemoryBase;
  /* 0x0388 */ unsigned __int64 TppWorkerpListLock;
  /* 0x0390 */ struct LIST_ENTRY64 TppWorkerpList;
  /* 0x03a0 */ unsigned __int64 WaitOnAddressHashTable[128];
  /* 0x07a0 */ unsigned __int64 TelemetryCoverageHeader;
  /* 0x07a8 */ unsigned long CloudFileFlags;
  /* 0x07ac */ unsigned long CloudFileDiagFlags;
  /* 0x07b0 */ char PlaceholderCompatibilityMode;
  /* 0x07b1 */ char PlaceholderCompatibilityModeReserved[7];
  /* 0x07b8 */ unsigned __int64 LeapSecondData;
  union
  {
    /* 0x07c0 */ unsigned long LeapSecondFlags;
    struct /* bitfield */
    {
      /* 0x07c0 */ unsigned long SixtySecondEnabled : 1; /* bit position: 0 */
      /* 0x07c0 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x07c4 */ unsigned long NtGlobalFlag2;
  /* 0x07c8 */ unsigned __int64 ExtendedFeatureDisableMask;
} PEB64, *PPEB64; /* size: 0x07d0 */

typedef struct _INTERRUPT_LINE_STATE
{
  /* 0x0000 */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x0004 */ unsigned char EmulateActiveBoth;
  /* 0x0005 */ char Padding_174[3];
  /* 0x0008 */ enum _KINTERRUPT_MODE TriggerMode;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ struct _INTERRUPT_LINE Routing;
  /* 0x0018 */ struct _INTERRUPT_TARGET ProcessorTarget;
  /* 0x0030 */ unsigned long Vector;
  /* 0x0034 */ unsigned long Priority;
} INTERRUPT_LINE_STATE, *PINTERRUPT_LINE_STATE; /* size: 0x0038 */

typedef struct _UNEXPECTED_INTERRUPT
{
  /* 0x0000 */ unsigned char PushImm;
  /* 0x0001 */ unsigned char Vector;
  /* 0x0002 */ unsigned char PushRbp;
  /* 0x0003 */ unsigned char JmpOp;
  /* 0x0004 */ long JmpOffset;
} UNEXPECTED_INTERRUPT, *PUNEXPECTED_INTERRUPT; /* size: 0x0008 */

typedef struct _CM_KCB_UOW
{
  /* 0x0000 */ struct _LIST_ENTRY TransactionListEntry;
  /* 0x0010 */ struct _CM_INTENT_LOCK* KCBLock;
  /* 0x0018 */ struct _CM_INTENT_LOCK* KeyLock;
  /* 0x0020 */ struct _LIST_ENTRY KCBListEntry;
  /* 0x0030 */ struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;
  /* 0x0038 */ struct _CM_TRANS* Transaction;
  /* 0x0040 */ unsigned long UoWState;
  /* 0x0044 */ enum UoWActionType ActionType;
  /* 0x0048 */ enum HSTORAGE_TYPE StorageType;
  /* 0x004c */ long Padding_175;
  /* 0x0050 */ struct _CM_KCB_UOW* ParentUoW;
  union
  {
    /* 0x0058 */ struct _CM_KEY_CONTROL_BLOCK* ChildKCB;
    /* 0x0058 */ unsigned long VolatileKeyCell;
    struct
    {
      /* 0x0058 */ unsigned long OldValueCell;
      /* 0x005c */ unsigned long NewValueCell;
    }; /* size: 0x0008 */
    /* 0x0058 */ unsigned long UserFlags;
    /* 0x0058 */ union _LARGE_INTEGER LastWriteTime;
    /* 0x0058 */ struct _CM_KEY_SECURITY_CACHE* TxCachedSecurity;
  }; /* size: 0x0008 */
  /* 0x0060 */ unsigned long TxSecurityCell;
  /* 0x0064 */ unsigned char UpdateEntireSecurity;
  /* 0x0065 */ char Padding_176[3];
  union
  {
    /* 0x0068 */ void* PrepareDataPointer;
    /* 0x0068 */ struct _CM_UOW_SET_SD_DATA* SecurityData;
    /* 0x0068 */ struct _CM_UOW_KEY_STATE_MODIFICATION* ModifyKeysData;
    /* 0x0068 */ struct _CM_UOW_SET_VALUE_LIST_DATA* SetValueData;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0070 */ struct _CM_UOW_SET_VALUE_KEY_DATA* ValueData;
    /* 0x0070 */ struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT* DiscardReplaceContext;
  }; /* size: 0x0008 */
} CM_KCB_UOW, *PCM_KCB_UOW; /* size: 0x0078 */

typedef struct _RTL_QUERY_REGISTRY_TABLE
{
  /* 0x0000 */ void* QueryRoutine /* function */;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ long Padding_177;
  /* 0x0010 */ wchar_t* Name;
  /* 0x0018 */ void* EntryContext;
  /* 0x0020 */ unsigned long DefaultType;
  /* 0x0024 */ long Padding_178;
  /* 0x0028 */ void* DefaultData;
  /* 0x0030 */ unsigned long DefaultLength;
  /* 0x0034 */ long __PADDING__[1];
} RTL_QUERY_REGISTRY_TABLE, *PRTL_QUERY_REGISTRY_TABLE; /* size: 0x0038 */

typedef struct _GDI_TEB_BATCH32
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Offset : 30; /* bit position: 0 */
    /* 0x0000 */ unsigned long InProcessing : 1; /* bit position: 30 */
    /* 0x0000 */ unsigned long HasRenderingCommand : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long HDC;
  /* 0x0008 */ unsigned long Buffer[310];
} GDI_TEB_BATCH32, *PGDI_TEB_BATCH32; /* size: 0x04e0 */

typedef union _IOMMU_ATS_SETTINGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char AtsSupported : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char AtsRequired : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char Rsvd : 6; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AsUCHAR;
  }; /* size: 0x0001 */
} IOMMU_ATS_SETTINGS, *PIOMMU_ATS_SETTINGS; /* size: 0x0001 */

typedef struct _LDR_DATA_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY InLoadOrderLinks;
  /* 0x0010 */ struct _LIST_ENTRY InMemoryOrderLinks;
  /* 0x0020 */ struct _LIST_ENTRY InInitializationOrderLinks;
  /* 0x0030 */ void* DllBase;
  /* 0x0038 */ void* EntryPoint;
  /* 0x0040 */ unsigned long SizeOfImage;
  /* 0x0044 */ long Padding_179;
  /* 0x0048 */ struct _UNICODE_STRING FullDllName;
  /* 0x0058 */ struct _UNICODE_STRING BaseDllName;
  union
  {
    /* 0x0068 */ unsigned char FlagGroup[4];
    /* 0x0068 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0068 */ unsigned long PackagedBinary : 1; /* bit position: 0 */
      /* 0x0068 */ unsigned long MarkedForRemoval : 1; /* bit position: 1 */
      /* 0x0068 */ unsigned long ImageDll : 1; /* bit position: 2 */
      /* 0x0068 */ unsigned long LoadNotificationsSent : 1; /* bit position: 3 */
      /* 0x0068 */ unsigned long TelemetryEntryProcessed : 1; /* bit position: 4 */
      /* 0x0068 */ unsigned long ProcessStaticImport : 1; /* bit position: 5 */
      /* 0x0068 */ unsigned long InLegacyLists : 1; /* bit position: 6 */
      /* 0x0068 */ unsigned long InIndexes : 1; /* bit position: 7 */
      /* 0x0068 */ unsigned long ShimDll : 1; /* bit position: 8 */
      /* 0x0068 */ unsigned long InExceptionTable : 1; /* bit position: 9 */
      /* 0x0068 */ unsigned long VerifierProvider : 1; /* bit position: 10 */
      /* 0x0068 */ unsigned long ShimEngineCalloutSent : 1; /* bit position: 11 */
      /* 0x0068 */ unsigned long LoadInProgress : 1; /* bit position: 12 */
      /* 0x0068 */ unsigned long LoadConfigProcessed : 1; /* bit position: 13 */
      /* 0x0068 */ unsigned long EntryProcessed : 1; /* bit position: 14 */
      /* 0x0068 */ unsigned long ProtectDelayLoad : 1; /* bit position: 15 */
      /* 0x0068 */ unsigned long AuxIatCopyPrivate : 1; /* bit position: 16 */
      /* 0x0068 */ unsigned long ReservedFlags3 : 1; /* bit position: 17 */
      /* 0x0068 */ unsigned long DontCallForThreads : 1; /* bit position: 18 */
      /* 0x0068 */ unsigned long ProcessAttachCalled : 1; /* bit position: 19 */
      /* 0x0068 */ unsigned long ProcessAttachFailed : 1; /* bit position: 20 */
      /* 0x0068 */ unsigned long ScpInExceptionTable : 1; /* bit position: 21 */
      /* 0x0068 */ unsigned long CorImage : 1; /* bit position: 22 */
      /* 0x0068 */ unsigned long DontRelocate : 1; /* bit position: 23 */
      /* 0x0068 */ unsigned long CorILOnly : 1; /* bit position: 24 */
      /* 0x0068 */ unsigned long ChpeImage : 1; /* bit position: 25 */
      /* 0x0068 */ unsigned long ChpeEmulatorImage : 1; /* bit position: 26 */
      /* 0x0068 */ unsigned long ReservedFlags5 : 1; /* bit position: 27 */
      /* 0x0068 */ unsigned long Redirected : 1; /* bit position: 28 */
      /* 0x0068 */ unsigned long ReservedFlags6 : 2; /* bit position: 29 */
      /* 0x0068 */ unsigned long CompatDatabaseProcessed : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x006c */ unsigned short ObsoleteLoadCount;
  /* 0x006e */ unsigned short TlsIndex;
  /* 0x0070 */ struct _LIST_ENTRY HashLinks;
  /* 0x0080 */ unsigned long TimeDateStamp;
  /* 0x0084 */ long Padding_180;
  /* 0x0088 */ struct _ACTIVATION_CONTEXT* EntryPointActivationContext;
  /* 0x0090 */ void* Lock;
  /* 0x0098 */ struct _LDR_DDAG_NODE* DdagNode;
  /* 0x00a0 */ struct _LIST_ENTRY NodeModuleLink;
  /* 0x00b0 */ struct _LDRP_LOAD_CONTEXT* LoadContext;
  /* 0x00b8 */ void* ParentDllBase;
  /* 0x00c0 */ void* SwitchBackContext;
  /* 0x00c8 */ struct _RTL_BALANCED_NODE BaseAddressIndexNode;
  /* 0x00e0 */ struct _RTL_BALANCED_NODE MappingInfoIndexNode;
  /* 0x00f8 */ unsigned __int64 OriginalBase;
  /* 0x0100 */ union _LARGE_INTEGER LoadTime;
  /* 0x0108 */ unsigned long BaseNameHashValue;
  /* 0x010c */ enum _LDR_DLL_LOAD_REASON LoadReason;
  /* 0x0110 */ unsigned long ImplicitPathOptions;
  /* 0x0114 */ unsigned long ReferenceCount;
  /* 0x0118 */ unsigned long DependentLoadFlags;
  /* 0x011c */ unsigned char SigningLevel;
  /* 0x011d */ char Padding_181[3];
  /* 0x0120 */ unsigned long CheckSum;
  /* 0x0124 */ long Padding_182;
  /* 0x0128 */ void* ActivePatchImageBase;
  /* 0x0130 */ enum _LDR_HOT_PATCH_STATE HotPatchState;
  /* 0x0134 */ long __PADDING__[1];
} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY; /* size: 0x0138 */

typedef struct _PCW_REGISTRATION_INFORMATION
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ long Padding_183;
  /* 0x0008 */ const struct _UNICODE_STRING* Name;
  /* 0x0010 */ unsigned long CounterCount;
  /* 0x0014 */ long Padding_184;
  /* 0x0018 */ struct _PCW_COUNTER_DESCRIPTOR* Counters;
  /* 0x0020 */ void* Callback /* function */;
  /* 0x0028 */ void* CallbackContext;
  /* 0x0030 */ enum PCW_REGISTRATION_FLAGS Flags;
  /* 0x0034 */ long __PADDING__[1];
} PCW_REGISTRATION_INFORMATION, *PPCW_REGISTRATION_INFORMATION; /* size: 0x0038 */

typedef struct _GROUP_AFFINITY64
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned short Group;
  /* 0x000a */ unsigned short Reserved[3];
} GROUP_AFFINITY64, *PGROUP_AFFINITY64; /* size: 0x0010 */

typedef struct _PCI_BUSMASTER_DESCRIPTOR
{
  /* 0x0000 */ enum _PCI_BUSMASTER_RID_TYPE Type;
  /* 0x0004 */ unsigned long Segment;
  union
  {
    struct
    {
      /* 0x0008 */ unsigned char Bus;
      /* 0x0009 */ unsigned char Device;
      /* 0x000a */ unsigned char Function;
      /* 0x000b */ unsigned char Reserved;
    } /* size: 0x0004 */ DeviceRid;
    struct
    {
      /* 0x0008 */ unsigned char Bus;
      /* 0x0009 */ unsigned char Device;
      /* 0x000a */ unsigned char Function;
      /* 0x000b */ unsigned char Reserved;
    } /* size: 0x0004 */ BridgeRid;
    struct
    {
      struct
      {
        /* 0x0008 */ unsigned char SecondaryBus;
        /* 0x0009 */ unsigned char SubordinateBus;
      } /* size: 0x0002 */ MultipleBridges;
      /* 0x000a */ char __PADDING__[2];
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} PCI_BUSMASTER_DESCRIPTOR, *PPCI_BUSMASTER_DESCRIPTOR; /* size: 0x000c */

typedef union _POP_FX_PERF_FLAGS
{
  union
  {
    /* 0x0000 */ long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Progress : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved : 24; /* bit position: 3 */
      /* 0x0000 */ unsigned long Synchronicity : 2; /* bit position: 27 */
      /* 0x0000 */ unsigned long RequestPepCompleted : 1; /* bit position: 29 */
      /* 0x0000 */ unsigned long RequestSucceeded : 1; /* bit position: 30 */
      /* 0x0000 */ unsigned long NestedCallback : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} POP_FX_PERF_FLAGS, *PPOP_FX_PERF_FLAGS; /* size: 0x0004 */

typedef union __m128
{
  union
  {
    /* 0x0000 */ float m128_f32[4];
    /* 0x0000 */ unsigned __int64 m128_u64[2];
    /* 0x0000 */ char m128_i8[16];
    /* 0x0000 */ short m128_i16[8];
    /* 0x0000 */ int m128_i32[4];
    /* 0x0000 */ __int64 m128_i64[2];
    /* 0x0000 */ unsigned char m128_u8[16];
    /* 0x0000 */ unsigned short m128_u16[8];
    /* 0x0000 */ unsigned int m128_u32[4];
  }; /* size: 0x0010 */
} _m128, *P_m128; /* size: 0x0010 */

typedef union _KRANK_LIST
{
  union
  {
    /* 0x0000 */ unsigned char Ranks[64];
    /* 0x0000 */ unsigned __int64 AsUlong64s[8];
  }; /* size: 0x0040 */
} KRANK_LIST, *PKRANK_LIST; /* size: 0x0040 */

typedef struct _VF_WATCHDOG_IRP
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0018 */ unsigned long DueTickCount;
  /* 0x001c */ volatile unsigned char Inserted;
  /* 0x001d */ char TrackedStackLocation;
  /* 0x001e */ unsigned short CancelTimeoutTicks;
} VF_WATCHDOG_IRP, *PVF_WATCHDOG_IRP; /* size: 0x0020 */

typedef struct _EXT_SET_PARAMETERS_V0
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ __int64 NoWakeTolerance;
} EXT_SET_PARAMETERS_V0, *PEXT_SET_PARAMETERS_V0; /* size: 0x0010 */

typedef struct _PS_NTDLL_EXPORTS
{
  /* 0x0000 */ void* LdrSystemDllInitBlock;
  /* 0x0008 */ void* LdrInitializeThunk;
  /* 0x0010 */ void* RtlUserThreadStart;
  /* 0x0018 */ void* RtlUserFiberStart;
  /* 0x0020 */ void* KiUserExceptionDispatcher;
  /* 0x0028 */ void* KiUserApcDispatcher;
  /* 0x0030 */ void* KiUserCallbackDispatcher;
  /* 0x0038 */ void* KiUserCallbackDispatcherReturn;
  /* 0x0040 */ void* KiRaiseUserExceptionDispatcher;
  /* 0x0048 */ void* ExpInterlockedPopEntrySListEnd;
  /* 0x0050 */ void* ExpInterlockedPopEntrySListFault;
  /* 0x0058 */ void* ExpInterlockedPopEntrySListResume;
  /* 0x0060 */ void* RtlpFreezeTimeBias;
  /* 0x0068 */ void* KiUserInvertedFunctionTable;
  /* 0x0070 */ void* WerReportExceptionWorker;
  /* 0x0078 */ void* RtlCallEnclaveReturn;
  /* 0x0080 */ void* RtlEnclaveCallDispatch;
  /* 0x0088 */ void* RtlEnclaveCallDispatchReturn;
  /* 0x0090 */ void* RtlRaiseExceptionForReturnAddressHijack;
  /* 0x0098 */ void* KiUserEmulationDispatcher;
  /* 0x00a0 */ void* LdrHotPatchNotify;
} PS_NTDLL_EXPORTS, *PPS_NTDLL_EXPORTS; /* size: 0x00a8 */

typedef struct _flags
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char SmtSetsPresent : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned char Fill : 7; /* bit position: 1 */
  }; /* bitfield */
} flags, *Pflags; /* size: 0x0001 */

typedef struct _KDESCRIPTOR
{
  /* 0x0000 */ unsigned short Pad[3];
  /* 0x0006 */ unsigned short Limit;
  /* 0x0008 */ void* Base;
} KDESCRIPTOR, *PKDESCRIPTOR; /* size: 0x0010 */

typedef struct _KSPECIAL_REGISTERS
{
  /* 0x0000 */ unsigned __int64 Cr0;
  /* 0x0008 */ unsigned __int64 Cr2;
  /* 0x0010 */ unsigned __int64 Cr3;
  /* 0x0018 */ unsigned __int64 Cr4;
  /* 0x0020 */ unsigned __int64 KernelDr0;
  /* 0x0028 */ unsigned __int64 KernelDr1;
  /* 0x0030 */ unsigned __int64 KernelDr2;
  /* 0x0038 */ unsigned __int64 KernelDr3;
  /* 0x0040 */ unsigned __int64 KernelDr6;
  /* 0x0048 */ unsigned __int64 KernelDr7;
  /* 0x0050 */ struct _KDESCRIPTOR Gdtr;
  /* 0x0060 */ struct _KDESCRIPTOR Idtr;
  /* 0x0070 */ unsigned short Tr;
  /* 0x0072 */ unsigned short Ldtr;
  /* 0x0074 */ unsigned long MxCsr;
  /* 0x0078 */ unsigned __int64 DebugControl;
  /* 0x0080 */ unsigned __int64 LastBranchToRip;
  /* 0x0088 */ unsigned __int64 LastBranchFromRip;
  /* 0x0090 */ unsigned __int64 LastExceptionToRip;
  /* 0x0098 */ unsigned __int64 LastExceptionFromRip;
  /* 0x00a0 */ unsigned __int64 Cr8;
  /* 0x00a8 */ unsigned __int64 MsrGsBase;
  /* 0x00b0 */ unsigned __int64 MsrGsSwap;
  /* 0x00b8 */ unsigned __int64 MsrStar;
  /* 0x00c0 */ unsigned __int64 MsrLStar;
  /* 0x00c8 */ unsigned __int64 MsrCStar;
  /* 0x00d0 */ unsigned __int64 MsrSyscallMask;
  /* 0x00d8 */ unsigned __int64 Xcr0;
  /* 0x00e0 */ unsigned __int64 MsrFsBase;
  /* 0x00e8 */ unsigned __int64 SpecialPadding0;
} KSPECIAL_REGISTERS, *PKSPECIAL_REGISTERS; /* size: 0x00f0 */

typedef struct _XSAVE_FORMAT
{
  /* 0x0000 */ unsigned short ControlWord;
  /* 0x0002 */ unsigned short StatusWord;
  /* 0x0004 */ unsigned char TagWord;
  /* 0x0005 */ unsigned char Reserved1;
  /* 0x0006 */ unsigned short ErrorOpcode;
  /* 0x0008 */ unsigned long ErrorOffset;
  /* 0x000c */ unsigned short ErrorSelector;
  /* 0x000e */ unsigned short Reserved2;
  /* 0x0010 */ unsigned long DataOffset;
  /* 0x0014 */ unsigned short DataSelector;
  /* 0x0016 */ unsigned short Reserved3;
  /* 0x0018 */ unsigned long MxCsr;
  /* 0x001c */ unsigned long MxCsr_Mask;
  /* 0x0020 */ struct _M128A FloatRegisters[8];
  /* 0x00a0 */ struct _M128A XmmRegisters[16];
  /* 0x01a0 */ unsigned char Reserved4[96];
} XSAVE_FORMAT, *PXSAVE_FORMAT; /* size: 0x0200 */

typedef struct _CONTEXT
{
  /* 0x0000 */ unsigned __int64 P1Home;
  /* 0x0008 */ unsigned __int64 P2Home;
  /* 0x0010 */ unsigned __int64 P3Home;
  /* 0x0018 */ unsigned __int64 P4Home;
  /* 0x0020 */ unsigned __int64 P5Home;
  /* 0x0028 */ unsigned __int64 P6Home;
  /* 0x0030 */ unsigned long ContextFlags;
  /* 0x0034 */ unsigned long MxCsr;
  /* 0x0038 */ unsigned short SegCs;
  /* 0x003a */ unsigned short SegDs;
  /* 0x003c */ unsigned short SegEs;
  /* 0x003e */ unsigned short SegFs;
  /* 0x0040 */ unsigned short SegGs;
  /* 0x0042 */ unsigned short SegSs;
  /* 0x0044 */ unsigned long EFlags;
  /* 0x0048 */ unsigned __int64 Dr0;
  /* 0x0050 */ unsigned __int64 Dr1;
  /* 0x0058 */ unsigned __int64 Dr2;
  /* 0x0060 */ unsigned __int64 Dr3;
  /* 0x0068 */ unsigned __int64 Dr6;
  /* 0x0070 */ unsigned __int64 Dr7;
  /* 0x0078 */ unsigned __int64 Rax;
  /* 0x0080 */ unsigned __int64 Rcx;
  /* 0x0088 */ unsigned __int64 Rdx;
  /* 0x0090 */ unsigned __int64 Rbx;
  /* 0x0098 */ unsigned __int64 Rsp;
  /* 0x00a0 */ unsigned __int64 Rbp;
  /* 0x00a8 */ unsigned __int64 Rsi;
  /* 0x00b0 */ unsigned __int64 Rdi;
  /* 0x00b8 */ unsigned __int64 R8;
  /* 0x00c0 */ unsigned __int64 R9;
  /* 0x00c8 */ unsigned __int64 R10;
  /* 0x00d0 */ unsigned __int64 R11;
  /* 0x00d8 */ unsigned __int64 R12;
  /* 0x00e0 */ unsigned __int64 R13;
  /* 0x00e8 */ unsigned __int64 R14;
  /* 0x00f0 */ unsigned __int64 R15;
  /* 0x00f8 */ unsigned __int64 Rip;
  union
  {
    /* 0x0100 */ struct _XSAVE_FORMAT FltSave;
    struct
    {
      /* 0x0100 */ struct _M128A Header[2];
      /* 0x0120 */ struct _M128A Legacy[8];
      /* 0x01a0 */ struct _M128A Xmm0;
      /* 0x01b0 */ struct _M128A Xmm1;
      /* 0x01c0 */ struct _M128A Xmm2;
      /* 0x01d0 */ struct _M128A Xmm3;
      /* 0x01e0 */ struct _M128A Xmm4;
      /* 0x01f0 */ struct _M128A Xmm5;
      /* 0x0200 */ struct _M128A Xmm6;
      /* 0x0210 */ struct _M128A Xmm7;
      /* 0x0220 */ struct _M128A Xmm8;
      /* 0x0230 */ struct _M128A Xmm9;
      /* 0x0240 */ struct _M128A Xmm10;
      /* 0x0250 */ struct _M128A Xmm11;
      /* 0x0260 */ struct _M128A Xmm12;
      /* 0x0270 */ struct _M128A Xmm13;
      /* 0x0280 */ struct _M128A Xmm14;
      /* 0x0290 */ struct _M128A Xmm15;
    }; /* size: 0x01a0 */
  }; /* size: 0x0200 */
  /* 0x0300 */ struct _M128A VectorRegister[26];
  /* 0x04a0 */ unsigned __int64 VectorControl;
  /* 0x04a8 */ unsigned __int64 DebugControl;
  /* 0x04b0 */ unsigned __int64 LastBranchToRip;
  /* 0x04b8 */ unsigned __int64 LastBranchFromRip;
  /* 0x04c0 */ unsigned __int64 LastExceptionToRip;
  /* 0x04c8 */ unsigned __int64 LastExceptionFromRip;
} CONTEXT, *PCONTEXT; /* size: 0x04d0 */

typedef struct _KPROCESSOR_STATE
{
  /* 0x0000 */ struct _KSPECIAL_REGISTERS SpecialRegisters;
  /* 0x00f0 */ struct _CONTEXT ContextFrame;
} KPROCESSOR_STATE, *PKPROCESSOR_STATE; /* size: 0x05c0 */

typedef struct _MCI_STATUS_INTEL_BITS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 McaErrorCode : 16; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 ModelErrorCode : 16; /* bit position: 16 */
    /* 0x0000 */ unsigned __int64 OtherInfo : 5; /* bit position: 32 */
    /* 0x0000 */ unsigned __int64 FirmwareUpdateError : 1; /* bit position: 37 */
    /* 0x0000 */ unsigned __int64 CorrectedErrorCount : 15; /* bit position: 38 */
    /* 0x0000 */ unsigned __int64 ThresholdErrorStatus : 2; /* bit position: 53 */
    /* 0x0000 */ unsigned __int64 ActionRequired : 1; /* bit position: 55 */
    /* 0x0000 */ unsigned __int64 Signalling : 1; /* bit position: 56 */
    /* 0x0000 */ unsigned __int64 ContextCorrupt : 1; /* bit position: 57 */
    /* 0x0000 */ unsigned __int64 AddressValid : 1; /* bit position: 58 */
    /* 0x0000 */ unsigned __int64 MiscValid : 1; /* bit position: 59 */
    /* 0x0000 */ unsigned __int64 ErrorEnabled : 1; /* bit position: 60 */
    /* 0x0000 */ unsigned __int64 UncorrectedError : 1; /* bit position: 61 */
    /* 0x0000 */ unsigned __int64 StatusOverFlow : 1; /* bit position: 62 */
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 63 */
  }; /* bitfield */
} MCI_STATUS_INTEL_BITS, *PMCI_STATUS_INTEL_BITS; /* size: 0x0008 */

typedef struct _GENERAL_LOOKASIDE
{
  union
  {
    /* 0x0000 */ union _SLIST_HEADER ListHead;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SingleListHead;
  }; /* size: 0x0010 */
  /* 0x0010 */ unsigned short Depth;
  /* 0x0012 */ unsigned short MaximumDepth;
  /* 0x0014 */ unsigned long TotalAllocates;
  union
  {
    /* 0x0018 */ unsigned long AllocateMisses;
    /* 0x0018 */ unsigned long AllocateHits;
  }; /* size: 0x0004 */
  /* 0x001c */ unsigned long TotalFrees;
  union
  {
    /* 0x0020 */ unsigned long FreeMisses;
    /* 0x0020 */ unsigned long FreeHits;
  }; /* size: 0x0004 */
  /* 0x0024 */ enum _POOL_TYPE Type;
  /* 0x0028 */ unsigned long Tag;
  /* 0x002c */ unsigned long Size;
  union
  {
    /* 0x0030 */ void* AllocateEx /* function */;
    /* 0x0030 */ void* Allocate /* function */;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0038 */ void* FreeEx /* function */;
    /* 0x0038 */ void* Free /* function */;
  }; /* size: 0x0008 */
  /* 0x0040 */ struct _LIST_ENTRY ListEntry;
  /* 0x0050 */ unsigned long LastTotalAllocates;
  union
  {
    /* 0x0054 */ unsigned long LastAllocateMisses;
    /* 0x0054 */ unsigned long LastAllocateHits;
  }; /* size: 0x0004 */
  /* 0x0058 */ unsigned long Future[2];
  /* 0x0060 */ long __PADDING__[8];
} GENERAL_LOOKASIDE, *PGENERAL_LOOKASIDE; /* size: 0x0080 */

typedef union _KPRCB_BPB_FEATURES
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char ClearOnIdle : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char Enabled : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char Smep : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned char KCet : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char BhbFlushSequence : 2; /* bit position: 4 */
      /* 0x0000 */ unsigned char FeaturesReserved : 2; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AllFlags;
  }; /* size: 0x0001 */
} KPRCB_BPB_FEATURES, *PKPRCB_BPB_FEATURES; /* size: 0x0001 */

typedef struct _MCI_STATUS_BITS_COMMON
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 McaErrorCode : 16; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 ModelErrorCode : 16; /* bit position: 16 */
    /* 0x0000 */ unsigned __int64 Reserved : 25; /* bit position: 32 */
    /* 0x0000 */ unsigned __int64 ContextCorrupt : 1; /* bit position: 57 */
    /* 0x0000 */ unsigned __int64 AddressValid : 1; /* bit position: 58 */
    /* 0x0000 */ unsigned __int64 MiscValid : 1; /* bit position: 59 */
    /* 0x0000 */ unsigned __int64 ErrorEnabled : 1; /* bit position: 60 */
    /* 0x0000 */ unsigned __int64 UncorrectedError : 1; /* bit position: 61 */
    /* 0x0000 */ unsigned __int64 StatusOverFlow : 1; /* bit position: 62 */
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 63 */
  }; /* bitfield */
} MCI_STATUS_BITS_COMMON, *PMCI_STATUS_BITS_COMMON; /* size: 0x0008 */

typedef struct _MEMORY_CACHING_REQUIREMENTS
{
  /* 0x0000 */ unsigned __int64 BasePage;
  /* 0x0008 */ unsigned __int64 PageCount;
  /* 0x0010 */ enum _MEMORY_CACHING_TYPE MemoryCachingType;
  /* 0x0014 */ long __PADDING__[1];
} MEMORY_CACHING_REQUIREMENTS, *PMEMORY_CACHING_REQUIREMENTS; /* size: 0x0018 */

typedef union _RTL_TICK_LOCK
{
  union
  {
    /* 0x0000 */ unsigned __int64 AsULong64;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Busy : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Ticks : 63; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} RTL_TICK_LOCK, *PRTL_TICK_LOCK; /* size: 0x0008 */

typedef struct _WHEA_AMD_EXTENDED_REGISTERS
{
  /* 0x0000 */ unsigned __int64 IPID;
  /* 0x0008 */ unsigned __int64 SYND;
  /* 0x0010 */ unsigned __int64 CONFIG;
  /* 0x0018 */ unsigned __int64 DESTAT;
  /* 0x0020 */ unsigned __int64 DEADDR;
  /* 0x0028 */ unsigned __int64 MISC1;
  /* 0x0030 */ unsigned __int64 MISC2;
  /* 0x0038 */ unsigned __int64 MISC3;
  /* 0x0040 */ unsigned __int64 MISC4;
  /* 0x0048 */ unsigned __int64 RasCap;
  /* 0x0050 */ unsigned __int64 Reserved[14];
} WHEA_AMD_EXTENDED_REGISTERS, *PWHEA_AMD_EXTENDED_REGISTERS; /* size: 0x00c0 */

typedef union _MCG_STATUS
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long RestartIpValid : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long ErrorIpValid : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long MachineCheckInProgress : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned long LocalMceValid : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned long Reserved1 : 28; /* bit position: 4 */
      }; /* bitfield */
      /* 0x0004 */ unsigned long Reserved2;
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 QuadPart;
  }; /* size: 0x0008 */
} MCG_STATUS, *PMCG_STATUS; /* size: 0x0008 */

typedef struct _KI_IDEAL_PROCESSOR_SET_BREAKPOINTS
{
  /* 0x0000 */ union _KI_PROCESS_CONCURRENCY_COUNT Low;
  /* 0x0004 */ union _KI_PROCESS_CONCURRENCY_COUNT High;
} KI_IDEAL_PROCESSOR_SET_BREAKPOINTS, *PKI_IDEAL_PROCESSOR_SET_BREAKPOINTS; /* size: 0x0008 */

typedef struct _KI_IDEAL_PROCESSOR_ASSIGNMENT_BLOCK
{
  /* 0x0000 */ union _KI_PROCESS_CONCURRENCY_COUNT ExpectedConcurrencyCount;
  /* 0x0004 */ struct _KI_IDEAL_PROCESSOR_SET_BREAKPOINTS Breakpoints;
  union
  {
    union
    {
      /* 0x000c */ unsigned long ConcurrencyCountFixed : 1; /* bit position: 0 */
      /* 0x000c */ unsigned long AllFlags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ AssignmentFlags;
  /* 0x0010 */ unsigned short ThreadSeed[32];
  /* 0x0050 */ unsigned short IdealProcessor[32];
  /* 0x0090 */ unsigned short IdealNode[32];
  /* 0x00d0 */ struct _KAFFINITY_EX IdealProcessorSets;
} KI_IDEAL_PROCESSOR_ASSIGNMENT_BLOCK, *PKI_IDEAL_PROCESSOR_ASSIGNMENT_BLOCK; /* size: 0x01d8 */

typedef struct _PROCLOCALAPIC
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned char ACPIProcessorID;
  /* 0x0003 */ unsigned char APICID;
  /* 0x0004 */ unsigned long Flags;
} PROCLOCALAPIC, *PPROCLOCALAPIC; /* size: 0x0008 */

typedef struct _TRIAGE_9F_DIRECTED_TRANSITION
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ long Padding_185;
  /* 0x0008 */ struct _LIST_ENTRY* IrpList;
  /* 0x0010 */ struct _LIST_ENTRY* ThreadList;
  /* 0x0018 */ struct _TRIAGE_EX_WORK_QUEUE* DelayedWorkQueue;
  /* 0x0020 */ struct _TRIAGE_EX_WORK_QUEUE* DelayedIoWorkQueue;
  /* 0x0028 */ unsigned long WatchdogTimeout;
  /* 0x002c */ long Padding_186;
  /* 0x0030 */ unsigned __int64 WatchdogStartTimestamp;
  /* 0x0038 */ struct _KTHREAD* WatchdogStartThread;
  /* 0x0040 */ unsigned long DirectedTransitionStatus;
  /* 0x0044 */ unsigned long DirectedTransitionCallCount;
} TRIAGE_9F_DIRECTED_TRANSITION, *PTRIAGE_9F_DIRECTED_TRANSITION; /* size: 0x0048 */

typedef struct _SYSPTES_HEADER
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead[16];
  /* 0x0100 */ unsigned __int64 Count;
  /* 0x0108 */ unsigned __int64 NumberOfEntries;
  /* 0x0110 */ unsigned __int64 NumberOfEntriesPeak;
} SYSPTES_HEADER, *PSYSPTES_HEADER; /* size: 0x0118 */

typedef union _KWAIT_STATUS_REGISTER
{
  union
  {
    /* 0x0000 */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char State : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned char Affinity : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char Priority : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned char Apc : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned char UserApc : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned char Alert : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
} KWAIT_STATUS_REGISTER, *PKWAIT_STATUS_REGISTER; /* size: 0x0001 */

typedef union _KERNEL_SHADOW_STACK_LIMIT
{
  union
  {
    /* 0x0000 */ unsigned __int64 AllFields;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 ShadowStackType : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Unused : 9; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 ShadowStackLimitPfn : 52; /* bit position: 12 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} KERNEL_SHADOW_STACK_LIMIT, *PKERNEL_SHADOW_STACK_LIMIT; /* size: 0x0008 */

typedef struct _KTHREAD
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ void* SListFaultAddress;
  /* 0x0020 */ unsigned __int64 QuantumTarget;
  /* 0x0028 */ void* InitialStack;
  /* 0x0030 */ void* volatile StackLimit;
  /* 0x0038 */ void* StackBase;
  /* 0x0040 */ unsigned __int64 ThreadLock;
  /* 0x0048 */ volatile unsigned __int64 CycleTime;
  /* 0x0050 */ unsigned long CurrentRunTime;
  /* 0x0054 */ unsigned long ExpectedRunTime;
  /* 0x0058 */ void* KernelStack;
  /* 0x0060 */ struct _XSAVE_FORMAT* StateSaveArea;
  /* 0x0068 */ struct _KSCHEDULING_GROUP* volatile SchedulingGroup;
  /* 0x0070 */ union _KWAIT_STATUS_REGISTER WaitRegister;
  /* 0x0071 */ volatile unsigned char Running;
  /* 0x0072 */ unsigned char Alerted[2];
  union
  {
    struct /* bitfield */
    {
      /* 0x0074 */ unsigned long AutoBoostActive : 1; /* bit position: 0 */
      /* 0x0074 */ unsigned long ReadyTransition : 1; /* bit position: 1 */
      /* 0x0074 */ unsigned long WaitNext : 1; /* bit position: 2 */
      /* 0x0074 */ unsigned long SystemAffinityActive : 1; /* bit position: 3 */
      /* 0x0074 */ unsigned long Alertable : 1; /* bit position: 4 */
      /* 0x0074 */ unsigned long Reserved1 : 1; /* bit position: 5 */
      /* 0x0074 */ unsigned long ApcInterruptRequest : 1; /* bit position: 6 */
      /* 0x0074 */ unsigned long QuantumEndMigrate : 1; /* bit position: 7 */
      /* 0x0074 */ unsigned long SecureThread : 1; /* bit position: 8 */
      /* 0x0074 */ unsigned long TimerActive : 1; /* bit position: 9 */
      /* 0x0074 */ unsigned long SystemThread : 1; /* bit position: 10 */
      /* 0x0074 */ unsigned long ProcessDetachActive : 1; /* bit position: 11 */
      /* 0x0074 */ unsigned long Reserved2 : 1; /* bit position: 12 */
      /* 0x0074 */ unsigned long ScbReadyQueue : 1; /* bit position: 13 */
      /* 0x0074 */ unsigned long ApcQueueable : 1; /* bit position: 14 */
      /* 0x0074 */ unsigned long Reserved3 : 1; /* bit position: 15 */
      /* 0x0074 */ unsigned long WaitNextClearWobPriorityFloor : 1; /* bit position: 16 */
      /* 0x0074 */ unsigned long TimerSuspended : 1; /* bit position: 17 */
      /* 0x0074 */ unsigned long SuspendedWaitMode : 1; /* bit position: 18 */
      /* 0x0074 */ unsigned long SuspendSchedulerApcWait : 1; /* bit position: 19 */
      /* 0x0074 */ unsigned long CetUserShadowStack : 1; /* bit position: 20 */
      /* 0x0074 */ unsigned long BypassProcessFreeze : 1; /* bit position: 21 */
      /* 0x0074 */ unsigned long CetKernelShadowStack : 1; /* bit position: 22 */
      /* 0x0074 */ unsigned long StateSaveAreaDecoupled : 1; /* bit position: 23 */
      /* 0x0074 */ unsigned long Reserved : 8; /* bit position: 24 */
    }; /* bitfield */
    /* 0x0074 */ long MiscFlags;
  }; /* size: 0x0004 */
  union
  {
    struct /* bitfield */
    {
      /* 0x0078 */ unsigned long UserIdealProcessorFixed : 1; /* bit position: 0 */
      /* 0x0078 */ unsigned long IsolationWidth : 1; /* bit position: 1 */
      /* 0x0078 */ unsigned long AutoAlignment : 1; /* bit position: 2 */
      /* 0x0078 */ unsigned long DisableBoost : 1; /* bit position: 3 */
      /* 0x0078 */ unsigned long AlertedByThreadId : 1; /* bit position: 4 */
      /* 0x0078 */ unsigned long QuantumDonation : 1; /* bit position: 5 */
      /* 0x0078 */ unsigned long EnableStackSwap : 1; /* bit position: 6 */
      /* 0x0078 */ unsigned long GuiThread : 1; /* bit position: 7 */
      /* 0x0078 */ unsigned long DisableQuantum : 1; /* bit position: 8 */
      /* 0x0078 */ unsigned long ChargeOnlySchedulingGroup : 1; /* bit position: 9 */
      /* 0x0078 */ unsigned long DeferPreemption : 1; /* bit position: 10 */
      /* 0x0078 */ unsigned long QueueDeferPreemption : 1; /* bit position: 11 */
      /* 0x0078 */ unsigned long ForceDeferSchedule : 1; /* bit position: 12 */
      /* 0x0078 */ unsigned long SharedReadyQueueAffinity : 1; /* bit position: 13 */
      /* 0x0078 */ unsigned long FreezeCount : 1; /* bit position: 14 */
      /* 0x0078 */ unsigned long TerminationApcRequest : 1; /* bit position: 15 */
      /* 0x0078 */ unsigned long AutoBoostEntriesExhausted : 1; /* bit position: 16 */
      /* 0x0078 */ unsigned long KernelStackResident : 1; /* bit position: 17 */
      /* 0x0078 */ unsigned long TerminateRequestReason : 2; /* bit position: 18 */
      /* 0x0078 */ unsigned long ProcessStackCountDecremented : 1; /* bit position: 20 */
      /* 0x0078 */ unsigned long RestrictedGuiThread : 1; /* bit position: 21 */
      /* 0x0078 */ unsigned long VpBackingThread : 1; /* bit position: 22 */
      /* 0x0078 */ unsigned long EtwStackTraceCrimsonApcDisabled : 1; /* bit position: 23 */
      /* 0x0078 */ unsigned long EtwStackTraceApcInserted : 8; /* bit position: 24 */
    }; /* bitfield */
    /* 0x0078 */ volatile long ThreadFlags;
  }; /* size: 0x0004 */
  /* 0x007c */ volatile unsigned char Tag;
  union
  {
    struct /* bitfield */
    {
      /* 0x007d */ unsigned char CalloutActive : 1; /* bit position: 0 */
      /* 0x007d */ unsigned char ReservedStackInUse : 1; /* bit position: 1 */
      /* 0x007d */ unsigned char UserStackWalkActive : 1; /* bit position: 2 */
      /* 0x007d */ unsigned char SameThreadTransientFlagsReserved : 5; /* bit position: 3 */
    }; /* bitfield */
    /* 0x007d */ char SameThreadTransientFlags;
  }; /* size: 0x0001 */
  union
  {
    struct /* bitfield */
    {
      /* 0x007e */ unsigned char RunningNonRetpolineCode : 1; /* bit position: 0 */
      /* 0x007e */ unsigned char SpecCtrlSpare : 7; /* bit position: 1 */
    }; /* bitfield */
    /* 0x007e */ unsigned char SpecCtrl;
  }; /* size: 0x0001 */
  /* 0x007f */ char Padding_187;
  /* 0x0080 */ unsigned long SystemCallNumber;
  /* 0x0084 */ unsigned long ReadyTime;
  /* 0x0088 */ void* FirstArgument;
  /* 0x0090 */ struct _KTRAP_FRAME* TrapFrame;
  union
  {
    /* 0x0098 */ struct _KAPC_STATE ApcState;
    struct
    {
      /* 0x0098 */ unsigned char ApcStateFill[43];
      /* 0x00c3 */ char Priority;
      /* 0x00c4 */ unsigned long UserIdealProcessor;
    }; /* size: 0x0030 */
  }; /* size: 0x0030 */
  /* 0x00c8 */ volatile __int64 WaitStatus;
  /* 0x00d0 */ struct _KWAIT_BLOCK* WaitBlockList;
  union
  {
    /* 0x00d8 */ struct _LIST_ENTRY WaitListEntry;
    /* 0x00d8 */ struct _SINGLE_LIST_ENTRY SwapListEntry;
  }; /* size: 0x0010 */
  /* 0x00e8 */ struct _DISPATCHER_HEADER* volatile Queue;
  /* 0x00f0 */ void* Teb;
  /* 0x00f8 */ unsigned __int64 RelativeTimerBias;
  /* 0x0100 */ struct _KTIMER Timer;
  union
  {
    /* 0x0140 */ struct _KWAIT_BLOCK WaitBlock[4];
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill4[20];
      /* 0x0154 */ unsigned long ContextSwitches;
    }; /* size: 0x0018 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill5[68];
      /* 0x0184 */ volatile unsigned char State;
      /* 0x0185 */ char Spare13;
      /* 0x0186 */ unsigned char WaitIrql;
      /* 0x0187 */ char WaitMode;
    }; /* size: 0x0048 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill6[116];
      /* 0x01b4 */ unsigned long WaitTime;
    }; /* size: 0x0078 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill7[164];
      union
      {
        struct
        {
          /* 0x01e4 */ short KernelApcDisable;
          /* 0x01e6 */ short SpecialApcDisable;
        }; /* size: 0x0004 */
        /* 0x01e4 */ unsigned long CombinedApcDisable;
      }; /* size: 0x0004 */
    }; /* size: 0x00a8 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill8[40];
      /* 0x0168 */ struct _KTHREAD_COUNTERS* ThreadCounters;
    }; /* size: 0x0030 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill9[88];
      /* 0x0198 */ struct _XSTATE_SAVE* XStateSave;
    }; /* size: 0x0060 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill10[136];
      /* 0x01c8 */ void* volatile Win32Thread;
    }; /* size: 0x0090 */
    struct
    {
      /* 0x0140 */ unsigned char WaitBlockFill11[176];
      /* 0x01f0 */ unsigned __int64 Spare18;
      /* 0x01f8 */ unsigned __int64 LastXStateSaveDebugInfo;
    }; /* size: 0x00c0 */
  }; /* size: 0x00c0 */
  union
  {
    /* 0x0200 */ volatile long ThreadFlags2;
    struct /* bitfield */
    {
      /* 0x0200 */ unsigned long DisableKasan : 1; /* bit position: 0 */
      /* 0x0200 */ unsigned long AbContextSwitchState : 1; /* bit position: 1 */
      /* 0x0200 */ unsigned long ThreadFlags2Reserved : 30; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0204 */ volatile unsigned char BamQosLevel;
  /* 0x0205 */ unsigned char HardwareFeedbackClass;
  /* 0x0206 */ unsigned char Spare23[2];
  /* 0x0208 */ struct _LIST_ENTRY QueueListEntry;
  union
  {
    /* 0x0218 */ volatile unsigned long NextProcessor;
    struct /* bitfield */
    {
      /* 0x0218 */ unsigned long NextProcessorNumber : 31; /* bit position: 0 */
      /* 0x0218 */ unsigned long SharedReadyQueue : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x021c */ long QueuePriority;
  /* 0x0220 */ struct _KPROCESS* Process;
  /* 0x0228 */ struct _KAFFINITY_EX* UserAffinity;
  /* 0x0230 */ unsigned short UserAffinityPrimaryGroup;
  /* 0x0232 */ char PreviousMode;
  /* 0x0233 */ char BasePriority;
  union
  {
    /* 0x0234 */ char PriorityDecrement;
    struct /* bitfield */
    {
      /* 0x0234 */ unsigned char ForegroundBoost : 4; /* bit position: 0 */
      /* 0x0234 */ unsigned char UnusualBoost : 4; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0235 */ unsigned char Preempted;
  /* 0x0236 */ unsigned char AdjustReason;
  /* 0x0237 */ char AdjustIncrement;
  /* 0x0238 */ unsigned __int64 AffinityVersion;
  /* 0x0240 */ struct _KAFFINITY_EX* Affinity;
  /* 0x0248 */ unsigned short AffinityPrimaryGroup;
  /* 0x024a */ unsigned char ApcStateIndex;
  /* 0x024b */ unsigned char WaitBlockCount;
  /* 0x024c */ unsigned long IdealProcessor;
  /* 0x0250 */ unsigned __int64 NpxState;
  union
  {
    /* 0x0258 */ struct _KAPC_STATE SavedApcState;
    struct
    {
      /* 0x0258 */ unsigned char SavedApcStateFill[43];
      /* 0x0283 */ unsigned char WaitReason;
      /* 0x0284 */ char SuspendCount;
      /* 0x0285 */ char Saturation;
      /* 0x0286 */ unsigned short SListFaultCount;
    }; /* size: 0x0030 */
  }; /* size: 0x0030 */
  union
  {
    /* 0x0288 */ struct _KAPC SchedulerApc;
    struct
    {
      /* 0x0288 */ unsigned char SchedulerApcFill1[3];
      /* 0x028b */ unsigned char QuantumReset;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0288 */ unsigned char SchedulerApcFill2[4];
      /* 0x028c */ unsigned long KernelTime;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0288 */ unsigned char SchedulerApcFill3[64];
      /* 0x02c8 */ struct _KPRCB* volatile WaitPrcb;
    }; /* size: 0x0048 */
    struct
    {
      /* 0x0288 */ unsigned char SchedulerApcFill4[72];
      /* 0x02d0 */ void* LegoData;
    }; /* size: 0x0050 */
    struct
    {
      /* 0x0288 */ unsigned char SchedulerApcFill5[83];
      /* 0x02db */ unsigned char CallbackNestingLevel;
      /* 0x02dc */ unsigned long UserTime;
    }; /* size: 0x0058 */
  }; /* size: 0x0058 */
  /* 0x02e0 */ struct _KEVENT SuspendEvent;
  /* 0x02f8 */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x0308 */ struct _LIST_ENTRY MutantListHead;
  union
  {
    struct
    {
      /* 0x0318 */ volatile unsigned char AbWaitEntryCount;
      /* 0x0319 */ volatile unsigned char AbOwnedEntryCount;
    }; /* size: 0x0002 */
    /* 0x0318 */ volatile unsigned short AbEntryCountValue;
  }; /* size: 0x0002 */
  union
  {
    /* 0x031a */ unsigned char FreezeFlags;
    struct /* bitfield */
    {
      /* 0x031a */ unsigned char FreezeCount2 : 1; /* bit position: 0 */
      /* 0x031a */ unsigned char FreezeNormal : 1; /* bit position: 1 */
      /* 0x031a */ unsigned char FreezeDeep : 1; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x031b */ char WobPriority;
  /* 0x031c */ unsigned long SecureThreadCookie;
  /* 0x0320 */ void* SchedulerSharedSystemSlot;
  /* 0x0328 */ struct _SINGLE_LIST_ENTRY PropagateBoostsEntry;
  /* 0x0330 */ struct _SINGLE_LIST_ENTRY IoSelfBoostsEntry;
  /* 0x0338 */ unsigned char PriorityFloorCounts[32];
  /* 0x0358 */ unsigned long PriorityFloorSummary;
  /* 0x035c */ volatile long AbCompletedIoBoostCount;
  /* 0x0360 */ volatile long AbCompletedIoQoSBoostCount;
  /* 0x0364 */ volatile short KeReferenceCount;
  /* 0x0366 */ char DecayBoost;
  /* 0x0367 */ unsigned char Spare6;
  /* 0x0368 */ unsigned long ForegroundLossTime;
  /* 0x036c */ long Padding_188;
  union
  {
    /* 0x0370 */ struct _LIST_ENTRY GlobalForegroundListEntry;
    struct
    {
      /* 0x0370 */ struct _SINGLE_LIST_ENTRY ForegroundDpcStackListEntry;
      /* 0x0378 */ unsigned __int64 InGlobalForegroundList;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0380 */ __int64 ReadOperationCount;
  /* 0x0388 */ __int64 WriteOperationCount;
  /* 0x0390 */ __int64 OtherOperationCount;
  /* 0x0398 */ __int64 ReadTransferCount;
  /* 0x03a0 */ __int64 WriteTransferCount;
  /* 0x03a8 */ __int64 OtherTransferCount;
  /* 0x03b0 */ struct _KSCB* QueuedScb;
  /* 0x03b8 */ volatile unsigned long ThreadTimerDelay;
  /* 0x03bc */ unsigned short Spare26;
  /* 0x03be */ volatile unsigned char PpmPolicy;
  /* 0x03bf */ unsigned char Spare27;
  /* 0x03c0 */ unsigned __int64 TracingPrivate[1];
  /* 0x03c8 */ void* SchedulerAssist;
  /* 0x03d0 */ void* volatile AbWaitObject;
  /* 0x03d8 */ unsigned long ReservedPreviousReadyTimeValue;
  /* 0x03dc */ long Padding_189;
  /* 0x03e0 */ unsigned __int64 KernelWaitTime;
  /* 0x03e8 */ unsigned __int64 UserWaitTime;
  union
  {
    /* 0x03f0 */ struct _LIST_ENTRY GlobalUpdateVpThreadPriorityListEntry;
    struct
    {
      /* 0x03f0 */ struct _SINGLE_LIST_ENTRY UpdateVpThreadPriorityDpcStackListEntry;
      /* 0x03f8 */ unsigned __int64 InGlobalUpdateVpThreadPriorityList;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0400 */ long SchedulerAssistPriorityFloor;
  /* 0x0404 */ long RealtimePriorityFloor;
  /* 0x0408 */ void* KernelShadowStack;
  /* 0x0410 */ void* KernelShadowStackInitial;
  /* 0x0418 */ void* KernelShadowStackBase;
  /* 0x0420 */ union _KERNEL_SHADOW_STACK_LIMIT KernelShadowStackLimit;
  /* 0x0428 */ unsigned __int64 ExtendedFeatureDisableMask;
  /* 0x0430 */ unsigned __int64 HgsFeedbackStartTime;
  /* 0x0438 */ unsigned __int64 HgsFeedbackCycles;
  /* 0x0440 */ unsigned long HgsInvalidFeedbackCount;
  /* 0x0444 */ unsigned long HgsLowerPerfClassFeedbackCount;
  /* 0x0448 */ unsigned long HgsHigherPerfClassFeedbackCount;
  /* 0x044c */ volatile unsigned long ModeHistory;
  /* 0x0450 */ struct _SINGLE_LIST_ENTRY SystemAffinityTokenListHead;
  /* 0x0458 */ void* IptSaveArea;
  /* 0x0460 */ unsigned char ResourceIndex;
  /* 0x0461 */ volatile unsigned char CoreIsolationReasons;
  /* 0x0462 */ unsigned char BamQosLevelFromAssistPage;
  /* 0x0463 */ unsigned char SecureCallCoreIsolationCount;
  /* 0x0464 */ unsigned long SchedulerSharedOffset;
  /* 0x0468 */ struct _KSWAPPABLE_PAGE* SchedulerSharedSwappablePage;
  /* 0x0470 */ struct _KLOCK_ENTRIES* KernelAbEntries;
  /* 0x0478 */ struct _KLOCK_ENTRIES* UserAbEntries;
  /* 0x0480 */ unsigned __int64 KcsanThread;
  /* 0x0488 */ unsigned __int64 Padding[7];
} KTHREAD, *PKTHREAD; /* size: 0x04c0 */

typedef struct _KSCHEDULING_GROUP_POLICY
{
  union
  {
    /* 0x0000 */ unsigned long Value;
    /* 0x0000 */ unsigned short Weight;
    struct
    {
      /* 0x0000 */ unsigned short MinRate;
      /* 0x0002 */ unsigned short MaxRate;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  union
  {
    /* 0x0004 */ unsigned long AllFlags;
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long Type : 1; /* bit position: 0 */
      /* 0x0004 */ unsigned long Disabled : 1; /* bit position: 1 */
      /* 0x0004 */ unsigned long RankBias : 1; /* bit position: 2 */
      /* 0x0004 */ unsigned long PerProcessorLimits : 1; /* bit position: 3 */
      /* 0x0004 */ unsigned long Spare1 : 28; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} KSCHEDULING_GROUP_POLICY, *PKSCHEDULING_GROUP_POLICY; /* size: 0x0008 */

typedef struct _KSCHEDULING_GROUP
{
  /* 0x0000 */ struct _KSCHEDULING_GROUP_POLICY Policy;
  /* 0x0008 */ unsigned long RelativeWeight;
  /* 0x000c */ unsigned long ChildMinRate;
  /* 0x0010 */ unsigned long ChildMinWeight;
  /* 0x0014 */ unsigned long ChildTotalWeight;
  /* 0x0018 */ unsigned __int64 QueryHistoryTimeStamp;
  /* 0x0020 */ __int64 NotificationCycles;
  /* 0x0028 */ __int64 MaxQuotaLimitCycles;
  /* 0x0030 */ volatile __int64 MaxQuotaCyclesRemaining;
  union
  {
    /* 0x0038 */ struct _LIST_ENTRY SchedulingGroupList;
    /* 0x0038 */ struct _LIST_ENTRY Sibling;
  }; /* size: 0x0010 */
  /* 0x0048 */ struct _KDPC* NotificationDpc;
  /* 0x0050 */ struct _LIST_ENTRY ChildList;
  /* 0x0060 */ struct _KSCHEDULING_GROUP* Parent;
  /* 0x0068 */ long Padding_190[6];
  /* 0x0080 */ struct _KSCB PerProcessor[1];
  /* 0x0238 */ long __PADDING__[2];
} KSCHEDULING_GROUP, *PKSCHEDULING_GROUP; /* size: 0x0240 */

typedef struct _DESCRIPTION_HEADER
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned char Revision;
  /* 0x0009 */ unsigned char Checksum;
  /* 0x000a */ char OEMID[6];
  /* 0x0010 */ char OEMTableID[8];
  /* 0x0018 */ unsigned long OEMRevision;
  /* 0x001c */ char CreatorID[4];
  /* 0x0020 */ unsigned long CreatorRev;
} DESCRIPTION_HEADER, *PDESCRIPTION_HEADER; /* size: 0x0024 */

typedef struct _GEN_ADDR
{
  /* 0x0000 */ unsigned char AddressSpaceID;
  /* 0x0001 */ unsigned char BitWidth;
  /* 0x0002 */ unsigned char BitOffset;
  /* 0x0003 */ unsigned char AccessSize;
  /* 0x0004 */ union _LARGE_INTEGER Address;
} GEN_ADDR, *PGEN_ADDR; /* size: 0x000c */

typedef struct _FADT
{
  /* 0x0000 */ struct _DESCRIPTION_HEADER Header;
  /* 0x0024 */ unsigned long facs;
  /* 0x0028 */ unsigned long dsdt;
  /* 0x002c */ unsigned char int_model;
  /* 0x002d */ unsigned char pm_profile;
  /* 0x002e */ unsigned short sci_int_vector;
  /* 0x0030 */ unsigned long smi_cmd_io_port;
  /* 0x0034 */ unsigned char acpi_on_value;
  /* 0x0035 */ unsigned char acpi_off_value;
  /* 0x0036 */ unsigned char s4bios_req;
  /* 0x0037 */ unsigned char pstate_control;
  /* 0x0038 */ unsigned long pm1a_evt_blk_io_port;
  /* 0x003c */ unsigned long pm1b_evt_blk_io_port;
  /* 0x0040 */ unsigned long pm1a_ctrl_blk_io_port;
  /* 0x0044 */ unsigned long pm1b_ctrl_blk_io_port;
  /* 0x0048 */ unsigned long pm2_ctrl_blk_io_port;
  /* 0x004c */ unsigned long pm_tmr_blk_io_port;
  /* 0x0050 */ unsigned long gp0_blk_io_port;
  /* 0x0054 */ unsigned long gp1_blk_io_port;
  /* 0x0058 */ unsigned char pm1_evt_len;
  /* 0x0059 */ unsigned char pm1_ctrl_len;
  /* 0x005a */ unsigned char pm2_ctrl_len;
  /* 0x005b */ unsigned char pm_tmr_len;
  /* 0x005c */ unsigned char gp0_blk_len;
  /* 0x005d */ unsigned char gp1_blk_len;
  /* 0x005e */ unsigned char gp1_base;
  /* 0x005f */ unsigned char cstate_control;
  /* 0x0060 */ unsigned short lvl2_latency;
  /* 0x0062 */ unsigned short lvl3_latency;
  /* 0x0064 */ unsigned short flush_size;
  /* 0x0066 */ unsigned short flush_stride;
  /* 0x0068 */ unsigned char duty_offset;
  /* 0x0069 */ unsigned char duty_width;
  /* 0x006a */ unsigned char day_alarm_index;
  /* 0x006b */ unsigned char month_alarm_index;
  /* 0x006c */ unsigned char century_alarm_index;
  /* 0x006d */ unsigned short boot_arch;
  /* 0x006f */ unsigned char reserved3[1];
  /* 0x0070 */ unsigned long flags;
  /* 0x0074 */ struct _GEN_ADDR reset_reg;
  /* 0x0080 */ unsigned char reset_val;
  /* 0x0081 */ unsigned short arm_boot_arch;
  /* 0x0083 */ unsigned char minor_version_number;
  /* 0x0084 */ union _LARGE_INTEGER x_firmware_ctrl;
  /* 0x008c */ union _LARGE_INTEGER x_dsdt;
  /* 0x0094 */ struct _GEN_ADDR x_pm1a_evt_blk;
  /* 0x00a0 */ struct _GEN_ADDR x_pm1b_evt_blk;
  /* 0x00ac */ struct _GEN_ADDR x_pm1a_ctrl_blk;
  /* 0x00b8 */ struct _GEN_ADDR x_pm1b_ctrl_blk;
  /* 0x00c4 */ struct _GEN_ADDR x_pm2_ctrl_blk;
  /* 0x00d0 */ struct _GEN_ADDR x_pm_tmr_blk;
  /* 0x00dc */ struct _GEN_ADDR x_gp0_blk;
  /* 0x00e8 */ struct _GEN_ADDR x_gp1_blk;
  /* 0x00f4 */ struct _GEN_ADDR sleep_control_reg;
  /* 0x0100 */ struct _GEN_ADDR sleep_status_reg;
  /* 0x010c */ unsigned __int64 hypervisor_vendor_identity;
} FADT, *PFADT; /* size: 0x0114 */

typedef struct _PHYSICAL_MEMORY_RANGE
{
  /* 0x0000 */ union _LARGE_INTEGER BaseAddress;
  /* 0x0008 */ union _LARGE_INTEGER NumberOfBytes;
} PHYSICAL_MEMORY_RANGE, *PPHYSICAL_MEMORY_RANGE; /* size: 0x0010 */

typedef struct _LOCAL_NMISOURCE
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned char ProcessorID;
  /* 0x0003 */ unsigned short Flags;
  /* 0x0005 */ unsigned char LINTIN;
} LOCAL_NMISOURCE, *PLOCAL_NMISOURCE; /* size: 0x0006 */

typedef union _KI_AVAILABLE_CPUS_WORK_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long WorkerExecuting : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long WorkPresent : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reserved : 30; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AllFields;
  }; /* size: 0x0004 */
} KI_AVAILABLE_CPUS_WORK_STATE, *PKI_AVAILABLE_CPUS_WORK_STATE; /* size: 0x0004 */

typedef struct _ETW_APC_POOL
{
  /* 0x0000 */ struct _WMI_LOGGER_CONTEXT* LoggerContext;
  /* 0x0008 */ unsigned __int64 ApcSpinLock;
  /* 0x0010 */ union _SLIST_HEADER ApcGlobalListHead;
  /* 0x0020 */ union _SLIST_HEADER ApcFreeListHead;
  /* 0x0030 */ void* DpcContext1;
  /* 0x0038 */ void* DpcContext2;
  /* 0x0040 */ void* DpcContext3;
  /* 0x0048 */ void* DpcNormalRoutine /* function */;
  /* 0x0050 */ void* DpcCancelRoutine /* function */;
  /* 0x0058 */ struct _ETHREAD* DpcThread;
  /* 0x0060 */ struct _KDPC Dpc;
  /* 0x00a0 */ long Flags;
  /* 0x00a4 */ long ApcCount;
  /* 0x00a8 */ unsigned long MinimumApcCount;
  /* 0x00ac */ unsigned long MaximumApcCount;
  /* 0x00b0 */ long OutstandingApcCount;
  /* 0x00b4 */ long MaxOutstandingApcCount;
  /* 0x00b8 */ long __PADDING__[2];
} ETW_APC_POOL, *PETW_APC_POOL; /* size: 0x00c0 */

typedef struct _ETW_STACK_TRACE_BLOCK
{
  /* 0x0000 */ struct _ETW_APC_POOL ApcPool;
  /* 0x00c0 */ long StackCaptureAttemptCount;
  /* 0x00c4 */ long StackExpansionFailureCount;
  /* 0x00c8 */ long __PADDING__[2];
} ETW_STACK_TRACE_BLOCK, *PETW_STACK_TRACE_BLOCK; /* size: 0x00d0 */

typedef struct _DBGKD_WRITE_MEMORY64
{
  /* 0x0000 */ unsigned __int64 TargetBaseAddress;
  /* 0x0008 */ unsigned long TransferCount;
  /* 0x000c */ unsigned long ActualBytesWritten;
} DBGKD_WRITE_MEMORY64, *PDBGKD_WRITE_MEMORY64; /* size: 0x0010 */

typedef struct _KI_AVAILABLE_CPUS_WORK_ITEM
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM ExWorkItem;
  /* 0x0020 */ struct _EX_RUNDOWN_REF RundownRef;
  /* 0x0028 */ union _KI_AVAILABLE_CPUS_WORK_STATE WorkState;
  /* 0x002c */ long Padding_191;
  /* 0x0030 */ void* Callback /* function */;
  /* 0x0038 */ void* Context;
} KI_AVAILABLE_CPUS_WORK_ITEM, *PKI_AVAILABLE_CPUS_WORK_ITEM; /* size: 0x0040 */

typedef struct _KPROCESS_AVAILABLE_CPU_STATE
{
  /* 0x0000 */ union _RTL_TICK_LOCK SequenceNumber;
  /* 0x0008 */ unsigned __int64 CpuSetSequenceNumber;
  /* 0x0010 */ unsigned __int64 ForceParkSequenceNumber;
  /* 0x0018 */ struct _KAFFINITY_EX* Affinity;
  /* 0x0020 */ struct _EX_PUSH_LOCK SubscriptionLock;
  /* 0x0028 */ struct _LIST_ENTRY SubscriptionList;
  /* 0x0038 */ struct _KI_AVAILABLE_CPUS_WORK_ITEM WorkItem;
} KPROCESS_AVAILABLE_CPU_STATE, *PKPROCESS_AVAILABLE_CPU_STATE; /* size: 0x0078 */

typedef struct _WHEAP_ERROR_SOURCE_TABLE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ long Count;
  /* 0x0008 */ unsigned long NextId;
  /* 0x000c */ long Padding_192;
  /* 0x0010 */ struct _LIST_ENTRY Items;
  /* 0x0020 */ struct _KEVENT InsertLock;
} WHEAP_ERROR_SOURCE_TABLE, *PWHEAP_ERROR_SOURCE_TABLE; /* size: 0x0038 */

typedef struct _PHYSICAL_MEMORY_RUN
{
  /* 0x0000 */ unsigned __int64 BasePage;
  /* 0x0008 */ unsigned __int64 PageCount;
} PHYSICAL_MEMORY_RUN, *PPHYSICAL_MEMORY_RUN; /* size: 0x0010 */

typedef struct _HEAP_ENTRY_EXTRA
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short AllocatorBackTraceIndex;
      /* 0x0002 */ unsigned short TagIndex;
      /* 0x0004 */ long Padding_193;
      /* 0x0008 */ unsigned __int64 Settable;
    }; /* size: 0x000c */
    struct
    {
      /* 0x0000 */ unsigned __int64 ZeroInit;
      /* 0x0008 */ unsigned __int64 ZeroInit1;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} HEAP_ENTRY_EXTRA, *PHEAP_ENTRY_EXTRA; /* size: 0x0010 */

typedef struct _PS_PROPERTY_SET
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0010 */ unsigned __int64 Lock;
} PS_PROPERTY_SET, *PPS_PROPERTY_SET; /* size: 0x0018 */

typedef struct _GROUP_AFFINITY
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned short Group;
  /* 0x000a */ unsigned short Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY; /* size: 0x0010 */

typedef union _RTL_THREAD_RNG_STATE
{
  union
  {
    /* 0x0000 */ unsigned __int64 State64[2];
    /* 0x0000 */ unsigned long State32[4];
  }; /* size: 0x0010 */
} RTL_THREAD_RNG_STATE, *PRTL_THREAD_RNG_STATE; /* size: 0x0010 */

typedef struct _ETHREAD
{
  /* 0x0000 */ struct _KTHREAD Tcb;
  /* 0x04c0 */ union _LARGE_INTEGER CreateTime;
  union
  {
    /* 0x04c8 */ union _LARGE_INTEGER ExitTime;
    /* 0x04c8 */ struct _LIST_ENTRY KeyedWaitChain;
  }; /* size: 0x0010 */
  union
  {
    /* 0x04d8 */ struct _LIST_ENTRY PostBlockList;
    struct
    {
      /* 0x04d8 */ void* ForwardLinkShadow;
      /* 0x04e0 */ void* StartAddress;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  union
  {
    /* 0x04e8 */ struct _TERMINATION_PORT* TerminationPort;
    /* 0x04e8 */ struct _ETHREAD* ReaperLink;
    /* 0x04e8 */ void* KeyedWaitValue;
  }; /* size: 0x0008 */
  /* 0x04f0 */ unsigned __int64 ActiveTimerListLock;
  /* 0x04f8 */ struct _LIST_ENTRY ActiveTimerListHead;
  /* 0x0508 */ struct _CLIENT_ID Cid;
  union
  {
    /* 0x0518 */ struct _KSEMAPHORE KeyedWaitSemaphore;
    /* 0x0518 */ struct _KSEMAPHORE AlpcWaitSemaphore;
  }; /* size: 0x0020 */
  /* 0x0538 */ union _PS_CLIENT_SECURITY_CONTEXT ClientSecurity;
  /* 0x0540 */ struct _LIST_ENTRY IrpList;
  /* 0x0550 */ unsigned __int64 TopLevelIrp;
  /* 0x0558 */ struct _DEVICE_OBJECT* DeviceToVerify;
  /* 0x0560 */ void* Win32StartAddress;
  /* 0x0568 */ void* ChargeOnlySession;
  /* 0x0570 */ void* LegacyPowerObject;
  /* 0x0578 */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x0588 */ struct _EX_RUNDOWN_REF RundownProtect;
  /* 0x0590 */ struct _EX_PUSH_LOCK ThreadLock;
  /* 0x0598 */ unsigned long ReadClusterSize;
  /* 0x059c */ volatile unsigned long MmLockOrdering;
  union
  {
    /* 0x05a0 */ unsigned long CrossThreadFlags;
    struct /* bitfield */
    {
      /* 0x05a0 */ unsigned long Terminated : 1; /* bit position: 0 */
      /* 0x05a0 */ unsigned long ThreadInserted : 1; /* bit position: 1 */
      /* 0x05a0 */ unsigned long HideFromDebugger : 1; /* bit position: 2 */
      /* 0x05a0 */ unsigned long ActiveImpersonationInfo : 1; /* bit position: 3 */
      /* 0x05a0 */ unsigned long HardErrorsAreDisabled : 1; /* bit position: 4 */
      /* 0x05a0 */ unsigned long BreakOnTermination : 1; /* bit position: 5 */
      /* 0x05a0 */ unsigned long SkipCreationMsg : 1; /* bit position: 6 */
      /* 0x05a0 */ unsigned long SkipTerminationMsg : 1; /* bit position: 7 */
      /* 0x05a0 */ unsigned long CopyTokenOnOpen : 1; /* bit position: 8 */
      /* 0x05a0 */ unsigned long ThreadIoPriority : 3; /* bit position: 9 */
      /* 0x05a0 */ unsigned long ThreadPagePriority : 3; /* bit position: 12 */
      /* 0x05a0 */ unsigned long RundownFail : 1; /* bit position: 15 */
      /* 0x05a0 */ unsigned long UmsForceQueueTermination : 1; /* bit position: 16 */
      /* 0x05a0 */ unsigned long IndirectCpuSets : 1; /* bit position: 17 */
      /* 0x05a0 */ unsigned long DisableDynamicCodeOptOut : 1; /* bit position: 18 */
      /* 0x05a0 */ unsigned long ExplicitCaseSensitivity : 1; /* bit position: 19 */
      /* 0x05a0 */ unsigned long PicoNotifyExit : 1; /* bit position: 20 */
      /* 0x05a0 */ unsigned long DbgWerUserReportActive : 1; /* bit position: 21 */
      /* 0x05a0 */ unsigned long ForcedSelfTrimActive : 1; /* bit position: 22 */
      /* 0x05a0 */ unsigned long SamplingCoverage : 1; /* bit position: 23 */
      /* 0x05a0 */ unsigned long ImpersonationSchedulingGroup : 1; /* bit position: 24 */
      /* 0x05a0 */ unsigned long ReservedCrossThreadFlags : 7; /* bit position: 25 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x05a4 */ unsigned long SameThreadPassiveFlags;
    struct /* bitfield */
    {
      /* 0x05a4 */ unsigned long ActiveExWorker : 1; /* bit position: 0 */
      /* 0x05a4 */ unsigned long MemoryMaker : 1; /* bit position: 1 */
      /* 0x05a4 */ unsigned long StoreLockThread : 2; /* bit position: 2 */
      /* 0x05a4 */ unsigned long ClonedThread : 1; /* bit position: 4 */
      /* 0x05a4 */ unsigned long KeyedEventInUse : 1; /* bit position: 5 */
      /* 0x05a4 */ unsigned long SelfTerminate : 1; /* bit position: 6 */
      /* 0x05a4 */ unsigned long RespectIoPriority : 1; /* bit position: 7 */
      /* 0x05a4 */ unsigned long ActivePageLists : 1; /* bit position: 8 */
      /* 0x05a4 */ unsigned long SecureContext : 1; /* bit position: 9 */
      /* 0x05a4 */ unsigned long ZeroPageThread : 1; /* bit position: 10 */
      /* 0x05a4 */ unsigned long WorkloadClass : 1; /* bit position: 11 */
      /* 0x05a4 */ unsigned long GenerateDumpOnBadHandleAccess : 1; /* bit position: 12 */
      /* 0x05a4 */ unsigned long BalanceSetManager : 1; /* bit position: 13 */
      /* 0x05a4 */ unsigned long ReservedSameThreadPassiveFlags : 18; /* bit position: 14 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x05a8 */ unsigned long SameThreadApcFlags;
    struct
    {
      struct /* bitfield */
      {
        /* 0x05a8 */ unsigned char OwnsProcessAddressSpaceExclusive : 1; /* bit position: 0 */
        /* 0x05a8 */ unsigned char OwnsProcessAddressSpaceShared : 1; /* bit position: 1 */
        /* 0x05a8 */ unsigned char HardFaultBehavior : 1; /* bit position: 2 */
        /* 0x05a8 */ volatile unsigned char StartAddressInvalid : 1; /* bit position: 3 */
        /* 0x05a8 */ unsigned char EtwCalloutActive : 1; /* bit position: 4 */
        /* 0x05a8 */ unsigned char SuppressSymbolLoad : 1; /* bit position: 5 */
        /* 0x05a8 */ unsigned char Prefetching : 1; /* bit position: 6 */
        /* 0x05a8 */ unsigned char OwnsVadExclusive : 1; /* bit position: 7 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x05a9 */ unsigned char SystemPagePriorityActive : 1; /* bit position: 0 */
        /* 0x05a9 */ unsigned char SystemPagePriority : 3; /* bit position: 1 */
        /* 0x05a9 */ unsigned char AllowUserWritesToExecutableMemory : 1; /* bit position: 4 */
        /* 0x05a9 */ unsigned char AllowKernelWritesToExecutableMemory : 1; /* bit position: 5 */
        /* 0x05a9 */ unsigned char OwnsVadShared : 1; /* bit position: 6 */
        /* 0x05a9 */ unsigned char PasidMsrValid : 1; /* bit position: 7 */
      }; /* bitfield */
      /* 0x05aa */ unsigned char SlabReplenishInProgress : 1; /* bit position: 0 */
    }; /* size: 0x0003 */
  }; /* size: 0x0004 */
  /* 0x05ac */ unsigned char CacheManagerActive;
  /* 0x05ad */ unsigned char DisablePageFaultClustering;
  /* 0x05ae */ unsigned char ActiveFaultCount;
  /* 0x05af */ unsigned char LockOrderState;
  /* 0x05b0 */ unsigned long SharedPsModuleLockAcquires;
  /* 0x05b4 */ unsigned long MmReserved;
  /* 0x05b8 */ unsigned __int64 AlpcMessageId;
  union
  {
    /* 0x05c0 */ void* AlpcMessage;
    /* 0x05c0 */ unsigned long AlpcReceiveAttributeSet;
  }; /* size: 0x0008 */
  /* 0x05c8 */ struct _LIST_ENTRY AlpcWaitListEntry;
  /* 0x05d8 */ long ExitStatus;
  /* 0x05dc */ unsigned long CacheManagerCount;
  /* 0x05e0 */ unsigned long IoBoostCount;
  /* 0x05e4 */ unsigned long IoQoSBoostCount;
  /* 0x05e8 */ unsigned long IoQoSThrottleCount;
  /* 0x05ec */ unsigned long KernelStackReference;
  /* 0x05f0 */ struct _LIST_ENTRY BoostList;
  /* 0x0600 */ struct _LIST_ENTRY DeboostList;
  /* 0x0610 */ unsigned __int64 BoostListLock;
  /* 0x0618 */ unsigned __int64 IrpListLock;
  /* 0x0620 */ void* ReservedForSynchTracking;
  /* 0x0628 */ struct _SINGLE_LIST_ENTRY CmCallbackListHead;
  /* 0x0630 */ const struct _GUID* ActivityId;
  /* 0x0638 */ struct _SINGLE_LIST_ENTRY SeLearningModeListHead;
  /* 0x0640 */ void* VerifierContext;
  /* 0x0648 */ void* AdjustedClientToken;
  /* 0x0650 */ void* WorkOnBehalfThread;
  /* 0x0658 */ struct _PS_PROPERTY_SET PropertySet;
  /* 0x0670 */ void* PicoContext;
  /* 0x0678 */ unsigned __int64 UserFsBase;
  /* 0x0680 */ unsigned __int64 UserGsBase;
  /* 0x0688 */ struct _THREAD_ENERGY_VALUES* EnergyValues;
  union
  {
    /* 0x0690 */ unsigned __int64 SelectedCpuSets;
    /* 0x0690 */ unsigned __int64* SelectedCpuSetsIndirect;
  }; /* size: 0x0008 */
  /* 0x0698 */ struct _EJOB* Silo;
  /* 0x06a0 */ struct _UNICODE_STRING* ThreadName;
  /* 0x06a8 */ struct _CONTEXT* SetContextState;
  /* 0x06b0 */ void* EtwSupport;
  /* 0x06b8 */ struct _LIST_ENTRY OwnerEntryListHead;
  /* 0x06c8 */ unsigned __int64 DisownedOwnerEntryListLock;
  /* 0x06d0 */ struct _LIST_ENTRY DisownedOwnerEntryListHead;
  /* 0x06e0 */ void* SchedulerSharedDataObject;
  /* 0x06e8 */ void* CmThreadInfo;
  /* 0x06f0 */ void* FlsData;
  /* 0x06f8 */ unsigned long LastExpectedRunTime;
  /* 0x06fc */ unsigned long LastSoftParkElectionRunTime;
  /* 0x0700 */ unsigned __int64 LastSoftParkElectionGeneration;
  /* 0x0708 */ struct _GROUP_AFFINITY LastSoftParkElectionGroupAffinity;
  /* 0x0718 */ unsigned __int64 UserIsolationDomain;
  union
  {
    /* 0x0720 */ struct _KAPC UpdateTebApc;
    struct
    {
      /* 0x0720 */ unsigned char UpdateTebApcFill1[3];
      /* 0x0723 */ char Win32kPriorityFloor;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0720 */ unsigned char UpdateTebApcFill2[4];
      /* 0x0724 */ unsigned char LastSoftParkElectionQos;
      /* 0x0725 */ unsigned char LastSoftParkElectionWorkloadType;
      /* 0x0726 */ unsigned char LastSoftParkElectionRunningType;
      /* 0x0727 */ unsigned char MmSlabIdentity;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0720 */ unsigned char UpdateTebApcFill3[64];
      /* 0x0760 */ union _RTL_THREAD_RNG_STATE RngState;
    }; /* size: 0x0050 */
    struct
    {
      /* 0x0720 */ unsigned char UpdateTebApcFill4[72];
      /* 0x0768 */ void* UsedByRngState;
    }; /* size: 0x0050 */
    struct
    {
      /* 0x0720 */ unsigned char UpdateTebApcFill5[83];
      /* 0x0773 */ unsigned char UpdateTebSpareByte2;
      /* 0x0774 */ unsigned long UpdateTebSpareLong2;
    }; /* size: 0x0058 */
  }; /* size: 0x0058 */
  /* 0x0778 */ unsigned __int64 Win32kThreadLock;
  /* 0x0780 */ void* ThreadIndex;
} ETHREAD, *PETHREAD; /* size: 0x0788 */

typedef struct _XSTATE_FEATURE
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ unsigned long Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE; /* size: 0x0008 */

typedef union _IOMMU_DEVICE_PROPERTIES
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long IsThunderbolt : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long DmaCapableAtBoot : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long ForceDisableDmaRemapping : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long IsUntrustedPort : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long ForceEnableDmaRemapping : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long Rsvd : 27; /* bit position: 5 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} IOMMU_DEVICE_PROPERTIES, *PIOMMU_DEVICE_PROPERTIES; /* size: 0x0004 */

typedef struct _HEAP_UNPACKED_ENTRY
{
  /* 0x0000 */ void* PreviousBlockPrivateData;
  union
  {
    struct
    {
      /* 0x0008 */ unsigned short Size;
      /* 0x000a */ unsigned char Flags;
      /* 0x000b */ unsigned char SmallTagIndex;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0008 */ unsigned long SubSegmentCode;
      /* 0x000c */ unsigned short PreviousSize;
      union
      {
        /* 0x000e */ unsigned char SegmentOffset;
        struct
        {
          /* 0x000e */ unsigned char LFHFlags;
          /* 0x000f */ unsigned char UnusedBytes;
        }; /* size: 0x0002 */
      }; /* size: 0x0002 */
    }; /* size: 0x0008 */
    /* 0x0008 */ unsigned __int64 CompactHeader;
  }; /* size: 0x0008 */
} HEAP_UNPACKED_ENTRY, *PHEAP_UNPACKED_ENTRY; /* size: 0x0010 */

typedef struct _HEAP_EXTENDED_ENTRY
{
  /* 0x0000 */ void* Reserved;
  union
  {
    struct
    {
      /* 0x0008 */ unsigned short FunctionIndex;
      /* 0x000a */ unsigned short ContextValue;
    }; /* size: 0x0004 */
    /* 0x0008 */ unsigned long InterceptorValue;
  }; /* size: 0x0004 */
  /* 0x000c */ unsigned short UnusedBytesLength;
  /* 0x000e */ unsigned char EntryOffset;
  /* 0x000f */ unsigned char ExtendedBlockSignature;
} HEAP_EXTENDED_ENTRY, *PHEAP_EXTENDED_ENTRY; /* size: 0x0010 */

typedef struct _HEAP_ENTRY
{
  union
  {
    /* 0x0000 */ struct _HEAP_UNPACKED_ENTRY UnpackedEntry;
    struct
    {
      /* 0x0000 */ void* PreviousBlockPrivateData;
      union
      {
        struct
        {
          /* 0x0008 */ unsigned short Size;
          /* 0x000a */ unsigned char Flags;
          /* 0x000b */ unsigned char SmallTagIndex;
        }; /* size: 0x0004 */
        struct
        {
          /* 0x0008 */ unsigned long SubSegmentCode;
          /* 0x000c */ unsigned short PreviousSize;
          union
          {
            /* 0x000e */ unsigned char SegmentOffset;
            struct
            {
              /* 0x000e */ unsigned char LFHFlags;
              /* 0x000f */ unsigned char UnusedBytes;
            }; /* size: 0x0002 */
          }; /* size: 0x0002 */
        }; /* size: 0x0008 */
        /* 0x0008 */ unsigned __int64 CompactHeader;
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
    /* 0x0000 */ struct _HEAP_EXTENDED_ENTRY ExtendedEntry;
    struct
    {
      /* 0x0000 */ void* Reserved;
      union
      {
        struct
        {
          /* 0x0008 */ unsigned short FunctionIndex;
          /* 0x000a */ unsigned short ContextValue;
        }; /* size: 0x0004 */
        struct
        {
          /* 0x0008 */ unsigned long InterceptorValue;
          /* 0x000c */ unsigned short UnusedBytesLength;
          /* 0x000e */ unsigned char EntryOffset;
          /* 0x000f */ unsigned char ExtendedBlockSignature;
        }; /* size: 0x0008 */
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0000 */ void* ReservedForAlignment;
      union
      {
        struct
        {
          /* 0x0008 */ unsigned long Code1;
          union
          {
            struct
            {
              /* 0x000c */ unsigned short Code2;
              /* 0x000e */ unsigned char Code3;
              /* 0x000f */ unsigned char Code4;
            }; /* size: 0x0004 */
            /* 0x000c */ unsigned long Code234;
          }; /* size: 0x0004 */
        }; /* size: 0x0008 */
        /* 0x0008 */ unsigned __int64 AgregateCode;
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} HEAP_ENTRY, *PHEAP_ENTRY; /* size: 0x0010 */

typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0010 */ struct _HEAP_ENTRY_EXTRA ExtraStuff;
  /* 0x0020 */ unsigned __int64 CommitSize;
  /* 0x0028 */ unsigned __int64 ReserveSize;
  /* 0x0030 */ struct _HEAP_ENTRY BusyBlock;
} HEAP_VIRTUAL_ALLOC_ENTRY, *PHEAP_VIRTUAL_ALLOC_ENTRY; /* size: 0x0040 */

typedef struct _WNF_STATE_NAME_STRUCT
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Version : 4; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 NameLifetime : 2; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 DataScope : 4; /* bit position: 6 */
    /* 0x0000 */ unsigned __int64 PermanentData : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Sequence : 53; /* bit position: 11 */
  }; /* bitfield */
} WNF_STATE_NAME_STRUCT, *PWNF_STATE_NAME_STRUCT; /* size: 0x0008 */

typedef struct _WDT_HANDLE
{
  /* 0x0000 */ char Reserved;
} WDT_HANDLE, *PWDT_HANDLE; /* size: 0x0001 */

typedef struct _NT_IORING_INFO
{
  /* 0x0000 */ enum IORING_VERSION IoRingVersion;
  /* 0x0004 */ struct _NT_IORING_CREATE_FLAGS Flags;
  /* 0x000c */ unsigned int SubmissionQueueSize;
  /* 0x0010 */ unsigned int SubmissionQueueRingMask;
  /* 0x0014 */ unsigned int CompletionQueueSize;
  /* 0x0018 */ unsigned int CompletionQueueRingMask;
  /* 0x001c */ long Padding_194;
  /* 0x0020 */ struct _NT_IORING_SUBMISSION_QUEUE* SubmissionQueue;
  /* 0x0028 */ struct _NT_IORING_COMPLETION_QUEUE* CompletionQueue;
} NT_IORING_INFO, *PNT_IORING_INFO; /* size: 0x0030 */

typedef struct _XSDT
{
  /* 0x0000 */ struct _DESCRIPTION_HEADER Header;
  /* 0x0024 */ union _LARGE_INTEGER Tables[1];
} XSDT, *PXSDT; /* size: 0x002c */

typedef struct _NT_IORING_SUBMISSION_QUEUE
{
  /* 0x0000 */ unsigned int Head;
  /* 0x0004 */ unsigned int Tail;
  /* 0x0008 */ enum _NT_IORING_SQ_FLAGS Flags;
  /* 0x000c */ long Padding_195;
  /* 0x0010 */ struct _NT_IORING_SQE Entries[1];
} NT_IORING_SUBMISSION_QUEUE, *PNT_IORING_SUBMISSION_QUEUE; /* size: 0x0050 */

typedef union _MI_IMAGE_INFO_REF
{
  union
  {
    /* 0x0000 */ long LongValue;
    /* 0x0000 */ unsigned __int64 FullValue;
    /* 0x0000 */ struct _MI_IMAGE_ADDITIONAL_INFO* PointerValue;
    /* 0x0000 */ unsigned __int64 AllFlags : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 DebugRecordsPresent : 1; /* bit position: 0 */
  }; /* size: 0x0008 */
} MI_IMAGE_INFO_REF, *PMI_IMAGE_INFO_REF; /* size: 0x0008 */

typedef struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION
{
  /* 0x0000 */ unsigned long Enlightenments;
  /* 0x0004 */ unsigned long HypervisorConnected;
  /* 0x0008 */ void* EndOfInterrupt /* function */;
  /* 0x0010 */ void* ApicWriteIcr /* function */;
  /* 0x0018 */ unsigned long Reserved0;
  /* 0x001c */ unsigned long SpinCountMask;
  /* 0x0020 */ void* LongSpinWait /* function */;
  /* 0x0028 */ void* GetReferenceTime /* function */;
  /* 0x0030 */ void* SetSystemSleepProperty /* function */;
  /* 0x0038 */ void* EnterSleepState /* function */;
  /* 0x0040 */ void* NotifyDebugDeviceAvailable /* function */;
  /* 0x0048 */ void* MapDeviceInterrupt /* function */;
  /* 0x0050 */ void* UnmapDeviceInterrupt /* function */;
  /* 0x0058 */ void* RetargetDeviceInterrupt /* function */;
  /* 0x0060 */ void* SetHpetConfig /* function */;
  /* 0x0068 */ void* NotifyHpetEnabled /* function */;
  /* 0x0070 */ void* QueryAssociatedProcessors /* function */;
  /* 0x0078 */ void* ReadMultipleMsr /* function */;
  /* 0x0080 */ void* WriteMultipleMsr /* function */;
  /* 0x0088 */ void* ReadCpuid /* function */;
  /* 0x0090 */ void* LpWritebackInvalidate /* function */;
  /* 0x0098 */ void* GetMachineCheckContext /* function */;
  /* 0x00a0 */ void* SuspendPartition /* function */;
  /* 0x00a8 */ void* ResumePartition /* function */;
  /* 0x00b0 */ void* SetSystemMachineCheckProperty /* function */;
  /* 0x00b8 */ void* WheaErrorNotification /* function */;
  /* 0x00c0 */ void* GetProcessorIndexFromVpIndex /* function */;
  /* 0x00c8 */ void* SyntheticClusterIpi /* function */;
  /* 0x00d0 */ void* VpStartEnabled /* function */;
  /* 0x00d8 */ void* StartVirtualProcessor /* function */;
  /* 0x00e0 */ void* GetVpIndexFromApicId /* function */;
  /* 0x00e8 */ void* IumAccessPciDevice /* function */;
  /* 0x00f0 */ void* IumEfiRuntimeService /* function */;
  /* 0x00f8 */ void* GetSystemPasidCapabilities /* function */;
  /* 0x0100 */ void* GetDeviceCapabilities /* function */;
  /* 0x0108 */ void* CreatePasidSpace /* function */;
  /* 0x0110 */ void* SetPasidAddressSpace /* function */;
  /* 0x0118 */ void* FlushPasid /* function */;
  /* 0x0120 */ void* AttachPasidSpace /* function */;
  /* 0x0128 */ void* DetachPasidSpace /* function */;
  /* 0x0130 */ void* EnablePasid /* function */;
  /* 0x0138 */ void* DisablePasid /* function */;
  /* 0x0140 */ void* AcknowledgePageRequest /* function */;
  /* 0x0148 */ void* CreatePrQueue /* function */;
  /* 0x0150 */ void* DeletePrQueue /* function */;
  /* 0x0158 */ void* ClearPrqStalled /* function */;
  /* 0x0160 */ void* SetDeviceDmaEnabled /* function */;
  /* 0x0168 */ void* SetDeviceCapabilities /* function */;
  /* 0x0170 */ void* AttachPrQueue /* function */;
  /* 0x0178 */ void* DetachPrQueue /* function */;
  /* 0x0180 */ void* HvDebuggerPowerHandler /* function */;
  /* 0x0188 */ void* SetQpcBias /* function */;
  /* 0x0190 */ void* GetQpcBias /* function */;
  /* 0x0198 */ void* RegisterDeviceId /* function */;
  /* 0x01a0 */ void* UnregisterDeviceId /* function */;
  /* 0x01a8 */ void* AllocateDeviceDomain /* function */;
  /* 0x01b0 */ void* AttachDeviceDomain /* function */;
  /* 0x01b8 */ void* DetachDeviceDomain /* function */;
  /* 0x01c0 */ void* DeleteDeviceDomain /* function */;
  /* 0x01c8 */ void* MapDeviceLogicalRange /* function */;
  /* 0x01d0 */ void* UnmapDeviceLogicalRange /* function */;
  /* 0x01d8 */ void* MapDeviceSparsePages /* function */;
  /* 0x01e0 */ void* UnmapDeviceSparsePages /* function */;
  /* 0x01e8 */ void* GetDmaGuardEnabled /* function */;
  /* 0x01f0 */ void* UpdateMicrocode /* function */;
  /* 0x01f8 */ void* GetMicrocodeLatency /* function */;
  /* 0x0200 */ void* GetSintMessage /* function */;
  /* 0x0208 */ void* GetSintMessagePage /* function */;
  /* 0x0210 */ void* RestoreTime /* function */;
  /* 0x0218 */ void* GetLogicalProcessorHwId /* function */;
  /* 0x0220 */ void* WakeVirtualProcessors /* function */;
  /* 0x0228 */ void* SetRootFaultReportingReady /* function */;
  /* 0x0230 */ void* ConfigureDeviceDomain /* function */;
  /* 0x0238 */ void* UnblockDefaultDma /* function */;
  /* 0x0240 */ void* FlushDeviceDomain /* function */;
  /* 0x0248 */ void* FlushDeviceDomainVaList /* function */;
  /* 0x0250 */ void* GetHybridPassthroughReservedRegions /* function */;
  /* 0x0258 */ void* ReserveDeviceDomainAttachment /* function */;
  /* 0x0260 */ void* UnreserveDeviceDomainAttachment /* function */;
  /* 0x0268 */ void* ChangeIsolatedMemoryVisibility /* function */;
} HAL_INTEL_ENLIGHTENMENT_INFORMATION, *PHAL_INTEL_ENLIGHTENMENT_INFORMATION; /* size: 0x0270 */

typedef struct _IOMMU_DEVICE_CREATION_CONFIGURATION_PASID
{
  /* 0x0000 */ enum _IOMMU_PASID_CONFIGURATION_TYPE ConfigType;
  /* 0x0004 */ unsigned char SuppressPasidFaults;
  /* 0x0005 */ char __PADDING__[3];
} IOMMU_DEVICE_CREATION_CONFIGURATION_PASID, *PIOMMU_DEVICE_CREATION_CONFIGURATION_PASID; /* size: 0x0008 */

typedef struct _IOMMU_DEVICE_CREATION_CONFIGURATION
{
  /* 0x0000 */ struct _LIST_ENTRY NextConfiguration;
  /* 0x0010 */ enum _IOMMU_DEVICE_CREATION_CONFIGURATION_TYPE ConfigType;
  /* 0x0014 */ long Padding_196;
  union
  {
    /* 0x0018 */ struct _IOMMU_DEVICE_CREATION_CONFIGURATION_ACPI Acpi;
    /* 0x0018 */ void* DeviceId;
    /* 0x0018 */ struct _IOMMU_DEVICE_CREATION_CONFIGURATION_PASID Pasid;
  }; /* size: 0x0008 */
} IOMMU_DEVICE_CREATION_CONFIGURATION, *PIOMMU_DEVICE_CREATION_CONFIGURATION; /* size: 0x0020 */

typedef union _FILE_SEGMENT_ELEMENT
{
  union
  {
    /* 0x0000 */ void* Buffer;
    /* 0x0000 */ unsigned __int64 Alignment;
  }; /* size: 0x0008 */
} FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT; /* size: 0x0008 */

struct IORING_BUFFER_INFO
{
  /* 0x0000 */ void* Address;
  /* 0x0008 */ unsigned int Length;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

typedef struct _MI_PARTITION_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long BeingDeleted : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PageListsInitialized : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long StoreReservedPagesCharged : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long UseProtectedSlabAllocators : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long PureHolding : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long ZeroPagesOptional : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long BackgroundZeroingDisabled : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long SpecialPurposeMemory : 1; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ long EntireField;
  }; /* size: 0x0004 */
} MI_PARTITION_FLAGS, *PMI_PARTITION_FLAGS; /* size: 0x0004 */

typedef struct _MI_PARTITION_CORE
{
  /* 0x0000 */ unsigned short PartitionId;
  /* 0x0002 */ char Padding_197[2];
  /* 0x0004 */ struct _MI_PARTITION_FLAGS Flags;
  /* 0x0008 */ unsigned long Signature;
  /* 0x000c */ unsigned char MemoryConfigurationChanged;
  /* 0x000d */ char Padding_198[3];
  /* 0x0010 */ struct _MI_NODE_INFORMATION* NodeInformation;
  /* 0x0018 */ struct _RTL_AVL_TREE PageRoot;
  /* 0x0020 */ struct _PHYSICAL_MEMORY_DESCRIPTOR* MemoryNodeRuns;
  /* 0x0028 */ struct _WORK_QUEUE_ITEM PfnUnmapWorkItem;
  /* 0x0048 */ unsigned __int64 PfnUnmapCount;
  /* 0x0050 */ struct _PHYSICAL_MEMORY_DESCRIPTOR* MemoryRuns;
  /* 0x0058 */ struct _KEVENT ExitEvent;
  /* 0x0070 */ struct _KEVENT ConductorNeededEvent;
  /* 0x0088 */ void* SystemThreadHandles[6];
  /* 0x00b8 */ struct _EPARTITION* PartitionObject;
  /* 0x00c0 */ struct _EX_PUSH_LOCK DynamicMemoryPushLock;
  /* 0x00c8 */ volatile long DynamicMemoryLock;
  /* 0x00cc */ unsigned char PfnUnmapActive;
  /* 0x00cd */ char Padding_199[3];
  /* 0x00d0 */ struct _KEVENT TemporaryMemoryEvent;
  /* 0x00e8 */ void* RootDirectory;
  /* 0x00f0 */ void* KernelObjectsDirectory;
  /* 0x00f8 */ struct _KEVENT* MemoryEvents[11];
  /* 0x0150 */ void* MemoryEventHandles[11];
  /* 0x01a8 */ unsigned __int64 TotalHugeIoRanges;
  /* 0x01b0 */ unsigned __int64 NonChargedSecurePages;
  /* 0x01b8 */ long Padding_200[2];
  /* 0x01c0 */ union _SLIST_HEADER FreeKernelShadowStackCacheEntries;
  /* 0x01d0 */ unsigned __int64 KernelShadowStackPages;
  /* 0x01d8 */ long __PADDING__[2];
} MI_PARTITION_CORE, *PMI_PARTITION_CORE; /* size: 0x01e0 */

typedef struct _SECURITY_QUALITY_OF_SERVICE
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0008 */ unsigned char ContextTrackingMode;
  /* 0x0009 */ unsigned char EffectiveOnly;
  /* 0x000a */ char __PADDING__[2];
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE; /* size: 0x000c */

typedef struct _TOKEN_CONTROL
{
  /* 0x0000 */ struct _LUID TokenId;
  /* 0x0008 */ struct _LUID AuthenticationId;
  /* 0x0010 */ struct _LUID ModifiedId;
  /* 0x0018 */ struct _TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL; /* size: 0x0028 */

typedef struct _SECURITY_CLIENT_CONTEXT
{
  /* 0x0000 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  /* 0x000c */ long Padding_201;
  /* 0x0010 */ void* ClientToken;
  /* 0x0018 */ unsigned char DirectlyAccessClientToken;
  /* 0x0019 */ unsigned char DirectAccessEffectiveOnly;
  /* 0x001a */ unsigned char ServerIsRemote;
  /* 0x001b */ char Padding_202;
  /* 0x001c */ struct _TOKEN_CONTROL ClientTokenControl;
  /* 0x0044 */ long __PADDING__[1];
} SECURITY_CLIENT_CONTEXT, *PSECURITY_CLIENT_CONTEXT; /* size: 0x0048 */

typedef struct _ALPC_PORT_ATTRIBUTES
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  /* 0x0010 */ unsigned __int64 MaxMessageLength;
  /* 0x0018 */ unsigned __int64 MemoryBandwidth;
  /* 0x0020 */ unsigned __int64 MaxPoolUsage;
  /* 0x0028 */ unsigned __int64 MaxSectionSize;
  /* 0x0030 */ unsigned __int64 MaxViewSize;
  /* 0x0038 */ unsigned __int64 MaxTotalSectionSize;
  /* 0x0040 */ unsigned long DupObjectTypes;
  /* 0x0044 */ unsigned long Reserved;
} ALPC_PORT_ATTRIBUTES, *PALPC_PORT_ATTRIBUTES; /* size: 0x0048 */

typedef struct _ALPC_PORT
{
  /* 0x0000 */ struct _LIST_ENTRY PortListEntry;
  /* 0x0010 */ struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;
  /* 0x0018 */ struct _EPROCESS* OwnerProcess;
  /* 0x0020 */ struct _KQUEUE* CompletionPort;
  /* 0x0028 */ void* CompletionKey;
  /* 0x0030 */ struct _ALPC_COMPLETION_PACKET_LOOKASIDE* CompletionPacketLookaside;
  /* 0x0038 */ void* PortContext;
  /* 0x0040 */ struct _SECURITY_CLIENT_CONTEXT StaticSecurity;
  /* 0x0088 */ struct _EX_PUSH_LOCK IncomingQueueLock;
  /* 0x0090 */ struct _LIST_ENTRY MainQueue;
  /* 0x00a0 */ struct _LIST_ENTRY LargeMessageQueue;
  /* 0x00b0 */ struct _EX_PUSH_LOCK PendingQueueLock;
  /* 0x00b8 */ struct _LIST_ENTRY PendingQueue;
  /* 0x00c8 */ struct _EX_PUSH_LOCK DirectQueueLock;
  /* 0x00d0 */ struct _LIST_ENTRY DirectQueue;
  /* 0x00e0 */ struct _EX_PUSH_LOCK WaitQueueLock;
  /* 0x00e8 */ struct _LIST_ENTRY WaitQueue;
  union
  {
    /* 0x00f8 */ struct _KSEMAPHORE* Semaphore;
    /* 0x00f8 */ struct _KEVENT* DummyEvent;
  }; /* size: 0x0008 */
  /* 0x0100 */ struct _ALPC_PORT_ATTRIBUTES PortAttributes;
  /* 0x0148 */ struct _EX_PUSH_LOCK ResourceListLock;
  /* 0x0150 */ struct _LIST_ENTRY ResourceListHead;
  /* 0x0160 */ struct _EX_PUSH_LOCK PortObjectLock;
  /* 0x0168 */ struct _ALPC_COMPLETION_LIST* CompletionList;
  /* 0x0170 */ struct _CALLBACK_OBJECT* CallbackObject;
  /* 0x0178 */ void* CallbackContext;
  /* 0x0180 */ struct _LIST_ENTRY CanceledQueue;
  /* 0x0190 */ long SequenceNo;
  /* 0x0194 */ long ReferenceNo;
  /* 0x0198 */ struct _PALPC_PORT_REFERENCE_WAIT_BLOCK* ReferenceNoWait;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x01a0 */ unsigned long Initialized : 1; /* bit position: 0 */
          /* 0x01a0 */ unsigned long Type : 2; /* bit position: 1 */
          /* 0x01a0 */ unsigned long ConnectionPending : 1; /* bit position: 3 */
          /* 0x01a0 */ unsigned long ConnectionRefused : 1; /* bit position: 4 */
          /* 0x01a0 */ unsigned long Disconnected : 1; /* bit position: 5 */
          /* 0x01a0 */ unsigned long Closed : 1; /* bit position: 6 */
          /* 0x01a0 */ unsigned long NoFlushOnClose : 1; /* bit position: 7 */
          /* 0x01a0 */ unsigned long ReturnExtendedInfo : 1; /* bit position: 8 */
          /* 0x01a0 */ unsigned long Waitable : 1; /* bit position: 9 */
          /* 0x01a0 */ unsigned long DynamicSecurity : 1; /* bit position: 10 */
          /* 0x01a0 */ unsigned long Wow64CompletionList : 1; /* bit position: 11 */
          /* 0x01a0 */ unsigned long Lpc : 1; /* bit position: 12 */
          /* 0x01a0 */ unsigned long LpcToLpc : 1; /* bit position: 13 */
          /* 0x01a0 */ unsigned long HasCompletionList : 1; /* bit position: 14 */
          /* 0x01a0 */ unsigned long HadCompletionList : 1; /* bit position: 15 */
          /* 0x01a0 */ unsigned long EnableCompletionList : 1; /* bit position: 16 */
        }; /* bitfield */
      } /* size: 0x0004 */ s1;
      /* 0x01a0 */ unsigned long State;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x01a4 */ long Padding_203;
  /* 0x01a8 */ struct _ALPC_PORT* TargetQueuePort;
  /* 0x01b0 */ struct _ALPC_PORT* TargetSequencePort;
  /* 0x01b8 */ struct _KALPC_MESSAGE* CachedMessage;
  /* 0x01c0 */ unsigned long MainQueueLength;
  /* 0x01c4 */ unsigned long LargeMessageQueueLength;
  /* 0x01c8 */ unsigned long PendingQueueLength;
  /* 0x01cc */ unsigned long DirectQueueLength;
  /* 0x01d0 */ unsigned long CanceledQueueLength;
  /* 0x01d4 */ unsigned long WaitQueueLength;
} ALPC_PORT, *PALPC_PORT; /* size: 0x01d8 */

typedef union _KALPC_DIRECT_EVENT
{
  union
  {
    /* 0x0000 */ unsigned __int64 Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 DirectType : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 EventReferenced : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 EventObjectBits : 62; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} KALPC_DIRECT_EVENT, *PKALPC_DIRECT_EVENT; /* size: 0x0008 */

typedef struct _ALPC_WORK_ON_BEHALF_TICKET
{
  /* 0x0000 */ unsigned long ThreadId;
  /* 0x0004 */ unsigned long ThreadCreationTimeLow;
} ALPC_WORK_ON_BEHALF_TICKET, *PALPC_WORK_ON_BEHALF_TICKET; /* size: 0x0008 */

typedef struct _KALPC_WORK_ON_BEHALF_DATA
{
  /* 0x0000 */ struct _ALPC_WORK_ON_BEHALF_TICKET Ticket;
} KALPC_WORK_ON_BEHALF_DATA, *PKALPC_WORK_ON_BEHALF_DATA; /* size: 0x0008 */

typedef struct _KALPC_MESSAGE_ATTRIBUTES
{
  /* 0x0000 */ void* ClientContext;
  /* 0x0008 */ void* ServerContext;
  /* 0x0010 */ void* PortContext;
  /* 0x0018 */ void* CancelPortContext;
  /* 0x0020 */ struct _KALPC_SECURITY_DATA* SecurityData;
  /* 0x0028 */ struct _KALPC_VIEW* View;
  /* 0x0030 */ struct _KALPC_HANDLE_DATA* HandleData;
  /* 0x0038 */ union _KALPC_DIRECT_EVENT DirectEvent;
  /* 0x0040 */ struct _KALPC_WORK_ON_BEHALF_DATA WorkOnBehalfData;
} KALPC_MESSAGE_ATTRIBUTES, *PKALPC_MESSAGE_ATTRIBUTES; /* size: 0x0048 */

typedef struct _COUNTER_READING
{
  /* 0x0000 */ enum _HARDWARE_COUNTER_TYPE Type;
  /* 0x0004 */ unsigned long Index;
  /* 0x0008 */ unsigned __int64 Start;
  /* 0x0010 */ unsigned __int64 Total;
} COUNTER_READING, *PCOUNTER_READING; /* size: 0x0018 */

typedef struct _KTHREAD_COUNTERS
{
  /* 0x0000 */ unsigned __int64 WaitReasonBitMap;
  /* 0x0008 */ struct _THREAD_PERFORMANCE_DATA* UserData;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ unsigned long ContextSwitches;
  /* 0x0018 */ unsigned __int64 CycleTimeBias;
  /* 0x0020 */ unsigned __int64 HardwareCounters;
  /* 0x0028 */ struct _COUNTER_READING HwCounter[16];
} KTHREAD_COUNTERS, *PKTHREAD_COUNTERS; /* size: 0x01a8 */

typedef struct _THREAD_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ struct _PROCESSOR_NUMBER ProcessorNumber;
  /* 0x0008 */ unsigned long ContextSwitches;
  /* 0x000c */ unsigned long HwCountersCount;
  /* 0x0010 */ volatile unsigned __int64 UpdateCount;
  /* 0x0018 */ unsigned __int64 WaitReasonBitMap;
  /* 0x0020 */ unsigned __int64 HardwareCounters;
  /* 0x0028 */ struct _COUNTER_READING CycleTime;
  /* 0x0040 */ struct _COUNTER_READING HwCounters[16];
} THREAD_PERFORMANCE_DATA, *PTHREAD_PERFORMANCE_DATA; /* size: 0x01c0 */

typedef struct _KALPC_RESERVE
{
  /* 0x0000 */ struct _ALPC_PORT* OwnerPort;
  /* 0x0008 */ struct _ALPC_HANDLE_TABLE* HandleTable;
  /* 0x0010 */ void* Handle;
  /* 0x0018 */ struct _KALPC_MESSAGE* Message;
  /* 0x0020 */ unsigned __int64 Size;
  /* 0x0028 */ long Active;
  /* 0x002c */ long __PADDING__[1];
} KALPC_RESERVE, *PKALPC_RESERVE; /* size: 0x0030 */

typedef struct _NT_IORING_CQE
{
  union
  {
    /* 0x0000 */ unsigned __int64 UserData;
    /* 0x0000 */ unsigned __int64 PaddingUserDataForWow;
  }; /* size: 0x0008 */
  /* 0x0008 */ struct _IO_STATUS_BLOCK IoStatus;
} NT_IORING_CQE, *PNT_IORING_CQE; /* size: 0x0018 */

typedef struct _KDEVICE_QUEUE
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ long Padding_204;
  /* 0x0008 */ struct _LIST_ENTRY DeviceListHead;
  /* 0x0018 */ unsigned __int64 Lock;
  union
  {
    /* 0x0020 */ unsigned char Busy;
    struct /* bitfield */
    {
      /* 0x0020 */ __int64 Reserved : 8; /* bit position: 0 */
      /* 0x0020 */ __int64 Hint : 56; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} KDEVICE_QUEUE, *PKDEVICE_QUEUE; /* size: 0x0028 */

typedef struct _DEVICE_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ long ReferenceCount;
  /* 0x0008 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0010 */ struct _DEVICE_OBJECT* NextDevice;
  /* 0x0018 */ struct _DEVICE_OBJECT* AttachedDevice;
  /* 0x0020 */ struct _IRP* CurrentIrp;
  /* 0x0028 */ struct _IO_TIMER* Timer;
  /* 0x0030 */ unsigned long Flags;
  /* 0x0034 */ unsigned long Characteristics;
  /* 0x0038 */ struct _VPB* Vpb;
  /* 0x0040 */ void* DeviceExtension;
  /* 0x0048 */ unsigned long DeviceType;
  /* 0x004c */ char StackSize;
  /* 0x004d */ char Padding_205[3];
  union
  {
    union
    {
      /* 0x0050 */ struct _LIST_ENTRY ListEntry;
      /* 0x0050 */ struct _WAIT_CONTEXT_BLOCK Wcb;
    }; /* size: 0x0048 */
  } /* size: 0x0048 */ Queue;
  /* 0x0098 */ unsigned long AlignmentRequirement;
  /* 0x009c */ long Padding_206;
  /* 0x00a0 */ struct _KDEVICE_QUEUE DeviceQueue;
  /* 0x00c8 */ struct _KDPC Dpc;
  /* 0x0108 */ unsigned long ActiveThreadCount;
  /* 0x010c */ long Padding_207;
  /* 0x0110 */ void* SecurityDescriptor;
  /* 0x0118 */ struct _KEVENT DeviceLock;
  /* 0x0130 */ unsigned short SectorSize;
  /* 0x0132 */ unsigned short Spare1;
  /* 0x0134 */ long Padding_208;
  /* 0x0138 */ struct _DEVOBJ_EXTENSION* DeviceObjectExtension;
  /* 0x0140 */ void* Reserved;
  /* 0x0148 */ long __PADDING__[2];
} DEVICE_OBJECT, *PDEVICE_OBJECT; /* size: 0x0150 */

typedef struct _XSTATE_CONTEXT
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned char Flags;
  /* 0x000d */ unsigned char Reserved0[3];
  /* 0x0010 */ struct _XSAVE_AREA* Area;
  /* 0x0018 */ void* Buffer;
} XSTATE_CONTEXT, *PXSTATE_CONTEXT; /* size: 0x0020 */

typedef struct _XSTATE_SAVE
{
  /* 0x0000 */ struct _XSTATE_SAVE* Prev;
  /* 0x0008 */ struct _KTHREAD* Thread;
  /* 0x0010 */ unsigned char Level;
  /* 0x0011 */ char Padding_209[7];
  /* 0x0018 */ struct _XSTATE_CONTEXT XStateContext;
} XSTATE_SAVE, *PXSTATE_SAVE; /* size: 0x0038 */

typedef union _RTL_HP_LFH_CONFIG
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short MaxBlockSize;
      /* 0x0002 */ unsigned short WitholdPageCrossingBlocks : 1; /* bit position: 0 */
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long AllFields;
  }; /* size: 0x0004 */
} RTL_HP_LFH_CONFIG, *PRTL_HP_LFH_CONFIG; /* size: 0x0004 */

typedef struct _IOP_MC_BE_PAGE_NODE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE Node;
  /* 0x0018 */ unsigned int PageIndex;
  /* 0x001c */ long __PADDING__[1];
} IOP_MC_BE_PAGE_NODE, *PIOP_MC_BE_PAGE_NODE; /* size: 0x0020 */

typedef struct _NT_IORING_COMPLETION_QUEUE
{
  /* 0x0000 */ unsigned int Head;
  /* 0x0004 */ unsigned int Tail;
  /* 0x0008 */ struct _NT_IORING_CQE Entries[1];
} NT_IORING_COMPLETION_QUEUE, *PNT_IORING_COMPLETION_QUEUE; /* size: 0x0020 */

typedef struct _XSAVE_AREA_HEADER
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned __int64 CompactionMask;
  /* 0x0010 */ unsigned __int64 Reserved2[6];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER; /* size: 0x0040 */

typedef struct _XSAVE_AREA
{
  /* 0x0000 */ struct _XSAVE_FORMAT LegacyState;
  /* 0x0200 */ struct _XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA; /* size: 0x0240 */

typedef struct _MMSECTION_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int BeingDeleted : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned int BeingCreated : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned int BeingPurged : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned int NoModifiedWriting : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned int FailAllIo : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned int Image : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned int Based : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned int File : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned int SectionOfInterest : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned int PrefetchCreated : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned int PhysicalMemory : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned int ImageControlAreaOnRemovableMedia : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned int Reserve : 1; /* bit position: 12 */
    /* 0x0000 */ unsigned int Commit : 1; /* bit position: 13 */
    /* 0x0000 */ unsigned int NoChange : 1; /* bit position: 14 */
    /* 0x0000 */ unsigned int WasPurged : 1; /* bit position: 15 */
    /* 0x0000 */ unsigned int UserReference : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned int GlobalMemory : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned int DeleteOnClose : 1; /* bit position: 18 */
    /* 0x0000 */ unsigned int FilePointerNull : 1; /* bit position: 19 */
    /* 0x0000 */ unsigned long PreferredNode : 7; /* bit position: 20 */
    /* 0x0000 */ unsigned int GlobalOnlyPerSession : 1; /* bit position: 27 */
    /* 0x0000 */ unsigned int ControlAreaOnUnusedList : 1; /* bit position: 28 */
    /* 0x0000 */ unsigned int SystemVaAllocated : 1; /* bit position: 29 */
    /* 0x0000 */ unsigned int NotBeingUsed : 1; /* bit position: 30 */
    /* 0x0000 */ unsigned int PageSize64K : 1; /* bit position: 31 */
  }; /* bitfield */
} MMSECTION_FLAGS, *PMMSECTION_FLAGS; /* size: 0x0004 */

struct wil_FeatureState
{
  /* 0x0000 */ enum wil_FeatureEnabledState enabledState;
  /* 0x0004 */ unsigned char variant;
  /* 0x0005 */ char Padding_210[3];
  /* 0x0008 */ enum wil_FeatureVariantPayloadKind payloadKind;
  /* 0x000c */ unsigned int payload;
  /* 0x0010 */ int hasNotification;
  /* 0x0014 */ int isWexpConfiguration;
}; /* size: 0x0018 */

typedef struct _PNP_PROBLEM_CODE_LOG_ENTRY
{
  /* 0x0000 */ union _LARGE_INTEGER Timestamp;
  /* 0x0008 */ enum _PNP_PROBLEM_CODE_LOG_OPERATION Operation;
  /* 0x000c */ unsigned long ProblemCode;
  /* 0x0010 */ long ProblemStatus;
  /* 0x0014 */ long __PADDING__[1];
} PNP_PROBLEM_CODE_LOG_ENTRY, *PPNP_PROBLEM_CODE_LOG_ENTRY; /* size: 0x0018 */

typedef struct _DEVICE_OBJECT_LIST_ENTRY
{
  /* 0x0000 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0008 */ enum _DEVICE_RELATION_LEVEL RelationLevel;
  /* 0x000c */ unsigned long Ordinal;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ long __PADDING__[1];
} DEVICE_OBJECT_LIST_ENTRY, *PDEVICE_OBJECT_LIST_ENTRY; /* size: 0x0018 */

typedef struct _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS
{
  /* 0x0000 */ volatile unsigned __int64 SmallPagesInUseWithinLarge;
  /* 0x0008 */ volatile unsigned __int64 OpportunisticLargePageCount;
} HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS, *PHEAP_OPPORTUNISTIC_LARGE_PAGE_STATS; /* size: 0x0010 */

struct wil_details_FeatureDescriptor
{
  /* 0x0000 */ union wil_details_FeatureStateCache* featureStateCache;
  /* 0x0008 */ struct wil_details_FeatureReportingCache* featureReportingCache;
  /* 0x0010 */ const struct FEATURE_LOGGED_TRAITS* featureLoggedTraits;
  /* 0x0018 */ unsigned int featureId;
  /* 0x001c */ unsigned char changeTime;
  /* 0x001d */ unsigned char isAlwaysDisabled;
  /* 0x001e */ unsigned char isAlwaysEnabled;
  /* 0x001f */ unsigned char isEnabledByDefault;
  /* 0x0020 */ const struct wil_details_FeatureDescriptor* const* requiresFeatures;
  /* 0x0028 */ unsigned char variant;
  /* 0x0029 */ char Padding_211[3];
  /* 0x002c */ enum wil_FeatureVariantPayloadKind payloadKind;
  /* 0x0030 */ unsigned int payload;
  /* 0x0034 */ long __PADDING__[1];
}; /* size: 0x0038 */

typedef struct _MI_IMAGE_ADDITIONAL_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long SizeOfHeader : 12; /* bit position: 0 */
    /* 0x0000 */ unsigned long FilesystemWantsRva : 1; /* bit position: 12 */
  }; /* bitfield */
} MI_IMAGE_ADDITIONAL_FLAGS, *PMI_IMAGE_ADDITIONAL_FLAGS; /* size: 0x0004 */

typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _IO_MINI_COMPLETION_PACKET_USER* Packet;
  /* 0x0010 */ struct _ALPC_COMPLETION_PACKET_LOOKASIDE* Lookaside;
} ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY, *PALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY; /* size: 0x0018 */

typedef union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char Trustlet : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char Ntos : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char WriteHandle : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned char ReadHandle : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char Reserved : 4; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AccessRights;
  }; /* size: 0x0001 */
} PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS, *PPS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS; /* size: 0x0001 */

typedef struct _PS_TRUSTLET_ATTRIBUTE_TYPE
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char Version;
      /* 0x0001 */ unsigned char DataCount;
      /* 0x0002 */ unsigned char SemanticType;
      /* 0x0003 */ union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS AccessRights;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long AttributeType;
  }; /* size: 0x0004 */
} PS_TRUSTLET_ATTRIBUTE_TYPE, *PPS_TRUSTLET_ATTRIBUTE_TYPE; /* size: 0x0004 */

typedef struct _PS_TRUSTLET_ATTRIBUTE_HEADER
{
  /* 0x0000 */ struct _PS_TRUSTLET_ATTRIBUTE_TYPE AttributeType;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long InstanceNumber : 8; /* bit position: 0 */
    /* 0x0004 */ unsigned long Reserved : 24; /* bit position: 8 */
  }; /* bitfield */
} PS_TRUSTLET_ATTRIBUTE_HEADER, *PPS_TRUSTLET_ATTRIBUTE_HEADER; /* size: 0x0008 */

typedef struct _PS_TRUSTLET_ATTRIBUTE_DATA
{
  /* 0x0000 */ struct _PS_TRUSTLET_ATTRIBUTE_HEADER Header;
  /* 0x0008 */ unsigned __int64 Data[1];
} PS_TRUSTLET_ATTRIBUTE_DATA, *PPS_TRUSTLET_ATTRIBUTE_DATA; /* size: 0x0010 */

typedef struct _TRUSTLET_COLLABORATION_ID
{
  /* 0x0000 */ unsigned __int64 Value[2];
} TRUSTLET_COLLABORATION_ID, *PTRUSTLET_COLLABORATION_ID; /* size: 0x0010 */

typedef struct _PALPC_PORT_REFERENCE_WAIT_BLOCK
{
  /* 0x0000 */ struct _KEVENT DesiredReferenceNoEvent;
  /* 0x0018 */ long DesiredReferenceNo;
  /* 0x001c */ long __PADDING__[1];
} PALPC_PORT_REFERENCE_WAIT_BLOCK, *PPALPC_PORT_REFERENCE_WAIT_BLOCK; /* size: 0x0020 */

typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK
{
  /* 0x0000 */ unsigned char Removed;
  /* 0x0001 */ unsigned char Reserved[3];
  /* 0x0004 */ long IoCount;
  /* 0x0008 */ struct _KEVENT RemoveEvent;
} IO_REMOVE_LOCK_COMMON_BLOCK, *PIO_REMOVE_LOCK_COMMON_BLOCK; /* size: 0x0020 */

typedef struct _IO_REMOVE_LOCK
{
  /* 0x0000 */ struct _IO_REMOVE_LOCK_COMMON_BLOCK Common;
} IO_REMOVE_LOCK, *PIO_REMOVE_LOCK; /* size: 0x0020 */

typedef union _KPRCBFLAG
{
  union
  {
    /* 0x0000 */ volatile long PrcbFlags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long BamQosLevel : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned long PendingQosUpdate : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long CacheIsolationEnabled : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned long TracepointActive : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned long LongDpcRunning : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned long PrcbFlagsReserved : 20; /* bit position: 12 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} KPRCBFLAG, *PKPRCBFLAG; /* size: 0x0004 */

typedef union _KPRCB_BPB_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short CpuIdle : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short FlushRsbOnTrap : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short IbpbOnReturn : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short IbpbOnTrap : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short IbpbOnRetpolineExit : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned short FlushRsbOnReturn : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned short FlushRsbOnRetpolineExit : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned short FlushBhbOnTrap : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned short DivideOnReturn : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned short VerwOnNonKvaReturn : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned short Spare : 6; /* bit position: 10 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AllFlags;
  }; /* size: 0x0002 */
} KPRCB_BPB_STATE, *PKPRCB_BPB_STATE; /* size: 0x0002 */

typedef union _KPRCB_BPB_RETPOLINE_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char RunningNonRetpolineCode : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char IndirectCallsSafe : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char RetpolineEnabled : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned char RetpolineStateReserved : 5; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AllFlags;
  }; /* size: 0x0001 */
} KPRCB_BPB_RETPOLINE_STATE, *PKPRCB_BPB_RETPOLINE_STATE; /* size: 0x0001 */

typedef struct _KSPIN_LOCK_QUEUE
{
  /* 0x0000 */ struct _KSPIN_LOCK_QUEUE* volatile Next;
  /* 0x0008 */ unsigned __int64* volatile Lock;
} KSPIN_LOCK_QUEUE, *PKSPIN_LOCK_QUEUE; /* size: 0x0010 */

typedef struct _PP_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE* P;
  /* 0x0008 */ struct _GENERAL_LOOKASIDE* L;
} PP_LOOKASIDE_LIST, *PPP_LOOKASIDE_LIST; /* size: 0x0010 */

typedef struct _KSTATIC_AFFINITY_BLOCK
{
  union
  {
    /* 0x0000 */ struct _KAFFINITY_EX KeFlushTbAffinity;
    /* 0x0000 */ struct _KAFFINITY_EX KeFlushWbAffinity;
    /* 0x0000 */ struct _KAFFINITY_EX KeSlistRollbackAffinity;
    /* 0x0000 */ struct _KAFFINITY_EX KeSyncContextAffinity;
    /* 0x0000 */ struct _KAFFINITY_EX KeRcuAffinity;
  }; /* size: 0x0108 */
  /* 0x0108 */ struct _KAFFINITY_EX KeFlushTbDeepIdleAffinity;
  /* 0x0210 */ struct _KAFFINITY_EX KeIpiSendAffinity;
  /* 0x0318 */ struct _KAFFINITY_EX KeIpiSendIpiSet;
  /* 0x0420 */ unsigned __int64 Padding[128];
} KSTATIC_AFFINITY_BLOCK, *PKSTATIC_AFFINITY_BLOCK; /* size: 0x0820 */

typedef struct _KSOFTWARE_INTERRUPT_BATCH
{
  /* 0x0000 */ unsigned char Level;
  /* 0x0001 */ unsigned char TargetType;
  /* 0x0002 */ unsigned char ReservedBatchInProgress;
  /* 0x0003 */ unsigned char Spare;
  /* 0x0004 */ unsigned long SingleTargetIndex;
  /* 0x0008 */ struct _KAFFINITY_EX MultipleTargetAffinity;
  /* 0x0110 */ unsigned __int64 Padding[32];
} KSOFTWARE_INTERRUPT_BATCH, *PKSOFTWARE_INTERRUPT_BATCH; /* size: 0x0210 */

typedef struct _KDPC_LIST
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY ListHead;
  /* 0x0008 */ struct _SINGLE_LIST_ENTRY* LastEntry;
} KDPC_LIST, *PKDPC_LIST; /* size: 0x0010 */

typedef struct _KDPC_DATA
{
  /* 0x0000 */ struct _KDPC_LIST DpcList;
  /* 0x0010 */ unsigned __int64 DpcLock;
  /* 0x0018 */ volatile long DpcQueueDepth;
  /* 0x001c */ unsigned long DpcCount;
  /* 0x0020 */ struct _KDPC* volatile ActiveDpc;
  /* 0x0028 */ unsigned long LongDpcPresent;
  /* 0x002c */ unsigned long Padding;
} KDPC_DATA, *PKDPC_DATA; /* size: 0x0030 */

typedef struct _KE_PRCB_RCU_DATA
{
  /* 0x0000 */ unsigned long NestingLevel;
  /* 0x0004 */ unsigned char DispatchPin;
  /* 0x0005 */ unsigned char GracePeriodNeeded;
  /* 0x0006 */ unsigned char ExpediteReporting;
  /* 0x0007 */ char IdleState;
  /* 0x0008 */ unsigned __int64 GraceSequenceQuiescent;
  /* 0x0010 */ unsigned __int64 GraceSequenceReported;
  /* 0x0018 */ struct _LIST_ENTRY* AwaitingCompletion;
} KE_PRCB_RCU_DATA, *PKE_PRCB_RCU_DATA; /* size: 0x0020 */

typedef struct _KTIMER_TABLE_ENTRY
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ struct _LIST_ENTRY Entry;
  /* 0x0018 */ union _ULARGE_INTEGER Time;
} KTIMER_TABLE_ENTRY, *PKTIMER_TABLE_ENTRY; /* size: 0x0020 */

typedef struct _KTIMER_TABLE_STATE
{
  /* 0x0000 */ unsigned __int64 LastTimerExpiration[2];
  /* 0x0010 */ unsigned long LastTimerHand[2];
} KTIMER_TABLE_STATE, *PKTIMER_TABLE_STATE; /* size: 0x0018 */

typedef struct _KTIMER_TABLE
{
  /* 0x0000 */ struct _KTIMER* TimerExpiry[64];
  /* 0x0200 */ struct _KTIMER_TABLE_ENTRY TimerEntries[256][2];
  /* 0x4200 */ struct _KTIMER_TABLE_STATE TableState;
} KTIMER_TABLE, *PKTIMER_TABLE; /* size: 0x4218 */

typedef struct _KMCE_RECOVERY_CONTEXT
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long Reserved;
  union
  {
    /* 0x0008 */ unsigned __int64 PhysicalAddress;
    /* 0x0008 */ void* Record;
  }; /* size: 0x0008 */
} KMCE_RECOVERY_CONTEXT, *PKMCE_RECOVERY_CONTEXT; /* size: 0x0010 */

typedef struct _PROC_FEEDBACK
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ unsigned __int64 CyclesLast;
  /* 0x0010 */ unsigned __int64 CyclesActive;
  /* 0x0018 */ struct _PROC_FEEDBACK_COUNTER* Counters[2];
  /* 0x0028 */ unsigned __int64 LastUpdateTime;
  /* 0x0030 */ unsigned __int64 UnscaledTime;
  /* 0x0038 */ volatile __int64 UnaccountedTime;
  /* 0x0040 */ unsigned __int64 ScaledTime[2];
  /* 0x0050 */ unsigned __int64 UnaccountedKernelTime;
  /* 0x0058 */ unsigned __int64 PerformanceScaledKernelTime;
  /* 0x0060 */ unsigned long UserTimeLast;
  /* 0x0064 */ unsigned long KernelTimeLast;
  /* 0x0068 */ unsigned __int64 IdleGenerationNumberLast;
  /* 0x0070 */ unsigned __int64 HvActiveTimeLast;
  /* 0x0078 */ unsigned __int64 StallCyclesLast;
  /* 0x0080 */ unsigned __int64 StallTime;
  /* 0x0088 */ unsigned char KernelTimesIndex;
  /* 0x0089 */ unsigned char CounterDiscardsIdleTime;
  /* 0x008a */ unsigned char CounterReadOptimize;
  /* 0x008b */ char __PADDING__[5];
} PROC_FEEDBACK, *PPROC_FEEDBACK; /* size: 0x0090 */

typedef struct _PROC_IDLE_SNAP
{
  /* 0x0000 */ unsigned __int64 Time;
  /* 0x0008 */ unsigned __int64 Idle;
} PROC_IDLE_SNAP, *PPROC_IDLE_SNAP; /* size: 0x0010 */

typedef struct _PROC_PERF_CHECK_CONTEXT
{
  /* 0x0000 */ struct _PROC_PERF_DOMAIN* Domain;
  /* 0x0008 */ struct _PROC_PERF_CONSTRAINT* Constraint;
  /* 0x0010 */ struct _PROC_PERF_CHECK* PerfCheck;
  /* 0x0018 */ struct _PROC_PERF_LOAD* Load;
  /* 0x0020 */ struct _PROC_PERF_HISTORY* PerfHistory;
  /* 0x0028 */ unsigned long Utility;
  /* 0x002c */ unsigned long AffinitizedUtility;
  /* 0x0030 */ unsigned long MediaUtility;
  /* 0x0034 */ unsigned long ImportantUtility;
  /* 0x0038 */ unsigned long IdealUtility;
  /* 0x003c */ unsigned short LatestAffinitizedPercent;
  /* 0x003e */ unsigned short AveragePerformancePercent;
  /* 0x0040 */ unsigned long RelativePerformance;
  /* 0x0044 */ unsigned char NtProcessor;
  /* 0x0045 */ char __PADDING__[3];
} PROC_PERF_CHECK_CONTEXT, *PPROC_PERF_CHECK_CONTEXT; /* size: 0x0048 */

typedef struct _PROCESSOR_POWER_STATE
{
  /* 0x0000 */ struct _PPM_IDLE_STATES* IdleStates;
  /* 0x0008 */ struct _PROC_IDLE_ACCOUNTING* IdleAccounting;
  /* 0x0010 */ unsigned __int64 IdleTimeLast;
  /* 0x0018 */ unsigned __int64 IdleTimeTotal;
  /* 0x0020 */ volatile unsigned __int64 IdleSequenceNumber;
  /* 0x0028 */ unsigned __int64 IdleTimeEntry;
  union
  {
    /* 0x0030 */ unsigned __int64 IdleTimeExpiration;
    /* 0x0030 */ volatile __int64 IdleWakeTime;
  }; /* size: 0x0008 */
  /* 0x0038 */ unsigned long IdleWakeLatencyLimit;
  /* 0x003c */ unsigned char NonInterruptibleTransition;
  /* 0x003d */ unsigned char PepWokenTransition;
  /* 0x003e */ unsigned char HvTargetState;
  /* 0x003f */ char Padding_212;
  /* 0x0040 */ unsigned long TargetIdleState;
  /* 0x0044 */ struct _PROC_IDLE_POLICY IdlePolicy;
  /* 0x004a */ char Padding_213[2];
  /* 0x004c */ volatile union _PPM_IDLE_SYNCHRONIZATION_STATE Synchronization;
  /* 0x0050 */ struct _PROC_FEEDBACK PerfFeedback;
  /* 0x00e0 */ enum _PROC_HYPERVISOR_STATE Hypervisor;
  /* 0x00e4 */ unsigned long LastSysTime;
  /* 0x00e8 */ unsigned __int64 WmiDispatchPtr;
  /* 0x00f0 */ long WmiInterfaceEnabled;
  /* 0x00f4 */ long Padding_214;
  /* 0x00f8 */ struct _PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo;
  /* 0x0118 */ struct _KDPC PerfActionDpc;
  /* 0x0158 */ volatile long PerfActionMask;
  /* 0x015c */ long Padding_215;
  /* 0x0160 */ struct _PROC_IDLE_SNAP HvIdleCheck;
  /* 0x0170 */ struct _PROC_PERF_CHECK_CONTEXT CheckContext;
  /* 0x01b8 */ struct _PPM_CONCURRENCY_ACCOUNTING* Concurrency;
  /* 0x01c0 */ struct _PPM_CONCURRENCY_ACCOUNTING* ClassConcurrency;
  /* 0x01c8 */ unsigned char ArchitecturalEfficiencyClass;
  /* 0x01c9 */ volatile unsigned char PerformanceSchedulingClass;
  /* 0x01ca */ volatile unsigned char EfficiencySchedulingClass;
  /* 0x01cb */ unsigned char Reserved;
  /* 0x01cc */ unsigned char Parked;
  /* 0x01cd */ unsigned char SoftParked;
  /* 0x01ce */ unsigned char LongPriorQosPeriod;
  /* 0x01cf */ char Padding_216;
  union
  {
    /* 0x01d0 */ unsigned __int64 SnapTimeLast;
    /* 0x01d0 */ unsigned __int64 EnergyConsumed;
  }; /* size: 0x0008 */
  /* 0x01d8 */ unsigned __int64 ActiveTime;
  /* 0x01e0 */ unsigned __int64 TotalTime;
  /* 0x01e8 */ struct _POP_FX_DEVICE* FxDevice;
  /* 0x01f0 */ unsigned __int64 LastQosTransitionTime;
  /* 0x01f8 */ unsigned __int64 QosTransitionHysteresis;
  /* 0x0200 */ enum _KHETERO_CPU_QOS RequestedQosClass;
  /* 0x0204 */ enum _KHETERO_CPU_QOS ResolvedQosClass;
  /* 0x0208 */ unsigned short QosEquivalencyMask;
  /* 0x020a */ unsigned short HwFeedbackTableOffset;
  /* 0x020c */ unsigned char HwFeedbackParkHint;
  /* 0x020d */ unsigned char HeteroCoreType;
  /* 0x020e */ unsigned short HwFeedbackTableIndex;
  /* 0x0210 */ struct _KHETRO_HWFEEDBACK_TYPE* HwFeedbackClassList;
  /* 0x0218 */ struct _PROCESSOR_CYCLES_WORKLOAD_CLASS* EeCyclesWorkloadClassList;
  /* 0x0220 */ struct _PROCESSOR_CYCLES_WORKLOAD_CLASS* PerfCyclesWorkloadClassList;
  /* 0x0228 */ unsigned char ContainmentGroupType;
  /* 0x0229 */ char Padding_217;
  /* 0x022a */ unsigned short FrequencyBucketThresholds[4];
  /* 0x0232 */ char __PADDING__[6];
} PROCESSOR_POWER_STATE, *PPROCESSOR_POWER_STATE; /* size: 0x0238 */

typedef struct _CACHE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Level;
  /* 0x0001 */ unsigned char Associativity;
  /* 0x0002 */ unsigned short LineSize;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ enum _PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR; /* size: 0x000c */

typedef struct _FILESYSTEM_DISK_COUNTERS
{
  /* 0x0000 */ unsigned __int64 FsBytesRead;
  /* 0x0008 */ unsigned __int64 FsBytesWritten;
} FILESYSTEM_DISK_COUNTERS, *PFILESYSTEM_DISK_COUNTERS; /* size: 0x0010 */

typedef struct _KENTROPY_TIMING_STATE
{
  /* 0x0000 */ unsigned long EntropyCount;
  /* 0x0004 */ unsigned long Buffer[64];
  /* 0x0104 */ long Padding_218;
  /* 0x0108 */ struct _KDPC Dpc;
  /* 0x0148 */ unsigned long LastDeliveredBuffer;
  /* 0x014c */ long Padding_219;
  /* 0x0150 */ void* ReservedRawDataBuffer;
} KENTROPY_TIMING_STATE, *PKENTROPY_TIMING_STATE; /* size: 0x0158 */

typedef struct _SYMCRYPT_ENTROPY_ACCUMULATOR_STATE
{
  /* 0x0000 */ unsigned char buffer[256];
  /* 0x0100 */ struct _KDPC Dpc;
  /* 0x0140 */ unsigned __int64 nSamplesAccumulated;
  /* 0x0148 */ unsigned __int64 nHealthTestFailures;
  /* 0x0150 */ unsigned char* pCombinedSampleBuffer;
  /* 0x0158 */ unsigned __int64 nRawSamples;
  /* 0x0160 */ unsigned int accumulatorId;
  /* 0x0164 */ unsigned int nDPCScheduleFailures;
  /* 0x0168 */ unsigned char dpcInProgress;
  /* 0x0169 */ char __PADDING__[23];
} SYMCRYPT_ENTROPY_ACCUMULATOR_STATE, *PSYMCRYPT_ENTROPY_ACCUMULATOR_STATE; /* size: 0x0180 */

typedef struct _IOP_IRP_STACK_PROFILER
{
  /* 0x0000 */ unsigned long Profile[20];
  /* 0x0050 */ unsigned long TotalIrps;
} IOP_IRP_STACK_PROFILER, *PIOP_IRP_STACK_PROFILER; /* size: 0x0054 */

typedef struct _KSECURE_FAULT_INFORMATION
{
  /* 0x0000 */ unsigned __int64 FaultCode;
  /* 0x0008 */ unsigned __int64 FaultVa;
  /* 0x0010 */ unsigned __int64 FaultPa;
} KSECURE_FAULT_INFORMATION, *PKSECURE_FAULT_INFORMATION; /* size: 0x0018 */

typedef struct _KTIMER_EXPIRATION_TRACE
{
  /* 0x0000 */ unsigned __int64 InterruptTime;
  /* 0x0008 */ union _LARGE_INTEGER PerformanceCounter;
} KTIMER_EXPIRATION_TRACE, *PKTIMER_EXPIRATION_TRACE; /* size: 0x0010 */

typedef struct _KCLOCK_TIMER_DEADLINE_ENTRY
{
  /* 0x0000 */ unsigned __int64 DueTime;
  /* 0x0008 */ unsigned long TolerableDelay;
  union
  {
    /* 0x000c */ unsigned char TypeFlags;
    struct /* bitfield */
    {
      /* 0x000c */ unsigned char Valid : 1; /* bit position: 0 */
      /* 0x000c */ unsigned char NoWake : 1; /* bit position: 1 */
      /* 0x000c */ unsigned char Unused : 6; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x000d */ char __PADDING__[3];
} KCLOCK_TIMER_DEADLINE_ENTRY, *PKCLOCK_TIMER_DEADLINE_ENTRY; /* size: 0x0010 */

typedef struct _KCLOCK_TICK_TRACE
{
  /* 0x0000 */ unsigned __int64 PerformanceCounter;
  /* 0x0008 */ unsigned __int64 PreInterruptTime;
  /* 0x0010 */ unsigned __int64 PostInterruptTime;
  /* 0x0018 */ unsigned __int64 TimeStampCounter;
  /* 0x0020 */ unsigned char IsClockOwner;
  /* 0x0021 */ char __PADDING__[7];
} KCLOCK_TICK_TRACE, *PKCLOCK_TICK_TRACE; /* size: 0x0028 */

typedef struct _KCLOCK_TIMER_STATE
{
  /* 0x0000 */ unsigned __int64 NextTickDueTime;
  /* 0x0008 */ unsigned long TimeIncrement;
  /* 0x000c */ unsigned long LastRequestedTimeIncrement;
  /* 0x0010 */ enum _KCLOCK_TIMER_ONE_SHOT_STATE OneShotState;
  /* 0x0014 */ enum _KCLOCK_TIMER_DEADLINE_TYPE ExpectedWakeReason;
  /* 0x0018 */ struct _KCLOCK_TIMER_DEADLINE_ENTRY ClockTimerEntries[7];
  /* 0x0088 */ unsigned char ClockActive;
  /* 0x0089 */ unsigned char ClockArmedForIdle;
  /* 0x008a */ char Padding_220[2];
  /* 0x008c */ unsigned long ClockTickTraceIndex;
  /* 0x0090 */ unsigned long ClockIncrementTraceIndex;
  /* 0x0094 */ long Padding_221;
  /* 0x0098 */ struct _KCLOCK_TICK_TRACE ClockTickTraces[16];
  /* 0x0318 */ struct _KCLOCK_INCREMENT_TRACE ClockIncrementTraces[16];
} KCLOCK_TIMER_STATE, *PKCLOCK_TIMER_STATE; /* size: 0x0518 */

typedef struct _MACHINE_FRAME
{
  /* 0x0000 */ unsigned __int64 Rip;
  /* 0x0008 */ unsigned short SegCs;
  /* 0x000a */ unsigned short Fill1[3];
  /* 0x0010 */ unsigned long EFlags;
  /* 0x0014 */ unsigned long Fill2;
  /* 0x0018 */ unsigned __int64 Rsp;
  /* 0x0020 */ unsigned short SegSs;
  /* 0x0022 */ unsigned short Fill3[3];
} MACHINE_FRAME, *PMACHINE_FRAME; /* size: 0x0028 */

typedef struct _MACHINE_CHECK_CONTEXT
{
  /* 0x0000 */ struct _MACHINE_FRAME MachineFrame;
  /* 0x0028 */ unsigned __int64 Rax;
  /* 0x0030 */ unsigned __int64 Rcx;
  /* 0x0038 */ unsigned __int64 Rdx;
  /* 0x0040 */ unsigned __int64 GsBase;
  /* 0x0048 */ unsigned __int64 Cr3;
} MACHINE_CHECK_CONTEXT, *PMACHINE_CHECK_CONTEXT; /* size: 0x0050 */

typedef struct _KLOCK_QUEUE_HANDLE
{
  /* 0x0000 */ struct _KSPIN_LOCK_QUEUE LockQueue;
  /* 0x0010 */ unsigned char OldIrql;
  /* 0x0011 */ char __PADDING__[7];
} KLOCK_QUEUE_HANDLE, *PKLOCK_QUEUE_HANDLE; /* size: 0x0018 */

typedef struct _KCORE_CONTROL_BLOCK
{
  /* 0x0000 */ unsigned char ProcessorCount;
  /* 0x0001 */ unsigned char ScanStartIndex;
  /* 0x0002 */ unsigned char Spare[6];
  /* 0x0008 */ struct _KPRCB* Prcbs[4];
  /* 0x0028 */ struct _KCORE_CONTROL_BLOCK_SHADOW* CoreControlBlockShadow;
} KCORE_CONTROL_BLOCK, *PKCORE_CONTROL_BLOCK; /* size: 0x0030 */

typedef union _KCCB_SHADOW_PROCESSOR_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char Idle : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char Transitioning : 1; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AllState;
  }; /* size: 0x0001 */
} KCCB_SHADOW_PROCESSOR_STATE, *PKCCB_SHADOW_PROCESSOR_STATE; /* size: 0x0001 */

typedef struct _KCORE_CONTROL_BLOCK_SHADOW
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ volatile unsigned __int64 CurrentIsolationDomain;
  /* 0x0010 */ volatile unsigned __int64 NextIsolationDomain;
  /* 0x0018 */ unsigned char TotalProcessors;
  /* 0x0019 */ unsigned char IdleProcessors;
  /* 0x001a */ unsigned char NewDomainProcessors;
  /* 0x001b */ unsigned char Spare;
  /* 0x001c */ union _KCCB_SHADOW_PROCESSOR_STATE ProcessorStates[4];
  /* 0x0020 */ unsigned __int64 InterruptTargets[4];
} KCORE_CONTROL_BLOCK_SHADOW, *PKCORE_CONTROL_BLOCK_SHADOW; /* size: 0x0040 */

typedef struct _KPRCB
{
  /* 0x0000 */ unsigned long MxCsr;
  /* 0x0004 */ unsigned char LegacyNumber;
  /* 0x0005 */ unsigned char ReservedMustBeZero;
  /* 0x0006 */ unsigned char InterruptRequest;
  /* 0x0007 */ unsigned char IdleHalt;
  /* 0x0008 */ struct _KTHREAD* CurrentThread;
  /* 0x0010 */ struct _KTHREAD* NextThread;
  /* 0x0018 */ struct _KTHREAD* IdleThread;
  /* 0x0020 */ unsigned char NestingLevel;
  /* 0x0021 */ unsigned char ClockOwner;
  union
  {
    /* 0x0022 */ unsigned char PendingTickFlags;
    struct /* bitfield */
    {
      /* 0x0022 */ unsigned char PendingTick : 1; /* bit position: 0 */
      /* 0x0022 */ unsigned char PendingBackupTick : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0023 */ unsigned char IdleState;
  /* 0x0024 */ unsigned long Number;
  /* 0x0028 */ unsigned __int64 RspBase;
  /* 0x0030 */ unsigned __int64 PrcbLock;
  /* 0x0038 */ union _KPRIORITY_STATE* PriorityState;
  /* 0x0040 */ char CpuType;
  /* 0x0041 */ char CpuID;
  union
  {
    /* 0x0042 */ unsigned short CpuStep;
    struct
    {
      /* 0x0042 */ unsigned char CpuStepping;
      /* 0x0043 */ unsigned char CpuModel;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x0044 */ unsigned long MHz;
  /* 0x0048 */ unsigned __int64 HalReserved[8];
  /* 0x0088 */ unsigned short MinorVersion;
  /* 0x008a */ unsigned short MajorVersion;
  /* 0x008c */ unsigned char BuildType;
  /* 0x008d */ unsigned char CpuVendor;
  /* 0x008e */ unsigned char LegacyCoresPerPhysicalProcessor;
  /* 0x008f */ unsigned char LegacyLogicalProcessorsPerCore;
  /* 0x0090 */ unsigned __int64 TscFrequency;
  /* 0x0098 */ struct _KPRCB_TRACEPOINT_LOG* TracepointLog;
  /* 0x00a0 */ unsigned long CoresPerPhysicalProcessor;
  /* 0x00a4 */ unsigned long LogicalProcessorsPerCore;
  /* 0x00a8 */ unsigned long SelfIpiRequestSummary;
  /* 0x00ac */ unsigned char QpcToTscIncrementShift;
  /* 0x00ad */ unsigned char PrcbPad03[3];
  /* 0x00b0 */ unsigned __int64 QpcToTscIncrement;
  /* 0x00b8 */ unsigned __int64 PrcbPad04;
  /* 0x00c0 */ struct _KSCHEDULER_SUBNODE* SchedulerSubNode;
  /* 0x00c8 */ unsigned __int64 GroupSetMember;
  /* 0x00d0 */ unsigned char Group;
  /* 0x00d1 */ unsigned char GroupIndex;
  /* 0x00d2 */ unsigned char PrcbPad05[2];
  /* 0x00d4 */ unsigned long InitialApicId;
  /* 0x00d8 */ unsigned long ScbOffset;
  /* 0x00dc */ unsigned long ApicMask;
  /* 0x00e0 */ void* AcpiReserved;
  /* 0x00e8 */ unsigned long CFlushSize;
  union
  {
    /* 0x00ec */ union _KPRCBFLAG PrcbFlags;
    /* 0x00ec */ unsigned long PrcbFlagsReserved;
  }; /* size: 0x0004 */
  /* 0x00f0 */ unsigned __int64 PrcbPad11[2];
  /* 0x0100 */ struct _KPROCESSOR_STATE ProcessorState;
  /* 0x06c0 */ struct _XSAVE_AREA_HEADER* ExtendedSupervisorState;
  /* 0x06c8 */ unsigned long ProcessorSignature;
  /* 0x06cc */ unsigned long ProcessorFlags;
  union
  {
    struct
    {
      /* 0x06d0 */ unsigned __int64 TrappedSecurityDomain;
      /* 0x06d8 */ union _KPRCB_BPB_STATE BpbState;
      /* 0x06da */ union _KPRCB_BPB_STATE BpbTrappedBpbState;
      /* 0x06dc */ union _KPRCB_BPB_FEATURES BpbFeatures;
      /* 0x06dd */ unsigned char PrcbPad12b;
      /* 0x06de */ union _KPRCB_BPB_RETPOLINE_STATE BpbRetpolineState;
      /* 0x06df */ unsigned char BpbRetpolineStateOverflow;
      /* 0x06e0 */ volatile short PairRegister;
      /* 0x06e2 */ unsigned short BpbRetpolineExitSpecCtrl;
      /* 0x06e4 */ unsigned short BpbTrappedRetpolineExitSpecCtrl;
      /* 0x06e6 */ unsigned short BpbCurrentSpecCtrl;
      /* 0x06e8 */ unsigned short BpbKernelSpecCtrl;
      /* 0x06ea */ unsigned short BpbNmiSpecCtrl;
      /* 0x06ec */ unsigned short BpbUserSpecCtrl;
      /* 0x06ee */ unsigned short PrcbPad12c[1];
    }; /* size: 0x0020 */
    /* 0x06d0 */ unsigned __int64 PrcbPad12a[4];
  }; /* size: 0x0020 */
  /* 0x06f0 */ struct _KSPIN_LOCK_QUEUE LockQueue[17];
  /* 0x0800 */ struct _PP_LOOKASIDE_LIST PPLookasideList[16];
  /* 0x0900 */ struct _GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];
  /* 0x1500 */ struct _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];
  /* 0x2100 */ struct _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];
  /* 0x2d00 */ unsigned __int64 MsrIa32TsxCtrl;
  /* 0x2d08 */ struct _SINGLE_LIST_ENTRY DeferredReadyListHead;
  /* 0x2d10 */ volatile long MmPageFaultCount;
  /* 0x2d14 */ volatile long MmCopyOnWriteCount;
  /* 0x2d18 */ volatile long MmTransitionCount;
  /* 0x2d1c */ volatile long MmDemandZeroCount;
  /* 0x2d20 */ volatile long MmPageReadCount;
  /* 0x2d24 */ volatile long MmPageReadIoCount;
  /* 0x2d28 */ volatile long MmDirtyPagesWriteCount;
  /* 0x2d2c */ volatile long MmDirtyWriteIoCount;
  /* 0x2d30 */ volatile long MmMappedPagesWriteCount;
  /* 0x2d34 */ volatile long MmMappedWriteIoCount;
  /* 0x2d38 */ unsigned long KeSystemCalls;
  /* 0x2d3c */ unsigned long KeContextSwitches;
  /* 0x2d40 */ unsigned long PrcbPad40;
  /* 0x2d44 */ unsigned long CcFastReadNoWait;
  /* 0x2d48 */ unsigned long CcFastReadWait;
  /* 0x2d4c */ unsigned long CcFastReadNotPossible;
  /* 0x2d50 */ unsigned long CcCopyReadNoWait;
  /* 0x2d54 */ unsigned long CcCopyReadWait;
  /* 0x2d58 */ unsigned long CcCopyReadNoWaitMiss;
  /* 0x2d5c */ volatile long IoReadOperationCount;
  /* 0x2d60 */ volatile long IoWriteOperationCount;
  /* 0x2d64 */ volatile long IoOtherOperationCount;
  /* 0x2d68 */ union _LARGE_INTEGER IoReadTransferCount;
  /* 0x2d70 */ union _LARGE_INTEGER IoWriteTransferCount;
  /* 0x2d78 */ union _LARGE_INTEGER IoOtherTransferCount;
  /* 0x2d80 */ volatile long PacketBarrier;
  /* 0x2d84 */ volatile long TargetCount;
  /* 0x2d88 */ volatile unsigned long IpiFrozen;
  /* 0x2d8c */ unsigned long PrcbPad30;
  /* 0x2d90 */ void* IsrDpcStats;
  /* 0x2d98 */ unsigned long DeviceInterrupts;
  /* 0x2d9c */ long LookasideIrpFloat;
  /* 0x2da0 */ unsigned long InterruptLastCount;
  /* 0x2da4 */ unsigned long InterruptRate;
  /* 0x2da8 */ unsigned __int64 PrcbPad31;
  /* 0x2db0 */ struct _KPRCB* PairPrcb;
  /* 0x2db8 */ struct _KSTATIC_AFFINITY_BLOCK StaticAffinity;
  /* 0x35d8 */ struct _KSOFTWARE_INTERRUPT_BATCH DeferredDispatchInterrupts;
  /* 0x37e8 */ struct _KI_RESCHEDULE_CONTEXT* StaticRescheduleContext;
  /* 0x37f0 */ struct _KCPU_PARTITION* volatile CpuPartition;
  /* 0x37f8 */ unsigned __int64 PrcbPad35[1];
  /* 0x3800 */ union _SLIST_HEADER InterruptObjectPool;
  /* 0x3810 */ struct _RTL_HASH_TABLE* DpcRuntimeHistoryHashTable;
  /* 0x3818 */ struct _KDPC* DpcRuntimeHistoryHashTableCleanupDpc;
  /* 0x3820 */ void* CurrentDpcRoutine /* function */;
  /* 0x3828 */ unsigned __int64 CurrentDpcRuntimeHistoryCached;
  /* 0x3830 */ unsigned __int64 CurrentDpcStartTime;
  /* 0x3838 */ struct _KTHREAD* DpcDelegateThread;
  /* 0x3840 */ struct _KDPC_DATA DpcData[2];
  /* 0x38a0 */ void* DpcStack;
  /* 0x38a8 */ long MaximumDpcQueueDepth;
  /* 0x38ac */ unsigned long DpcRequestRate;
  /* 0x38b0 */ unsigned long MinimumDpcRate;
  /* 0x38b4 */ unsigned long DpcLastCount;
  /* 0x38b8 */ unsigned char ThreadDpcEnable;
  /* 0x38b9 */ volatile unsigned char QuantumEnd;
  /* 0x38ba */ volatile unsigned char DpcRoutineActive;
  /* 0x38bb */ volatile unsigned char IdleSchedule;
  union
  {
    /* 0x38bc */ volatile long DpcRequestSummary;
    /* 0x38bc */ short DpcRequestSlot[2];
    struct
    {
      /* 0x38bc */ short NormalDpcState;
      /* 0x38be */ short ThreadDpcState;
    }; /* size: 0x0004 */
    struct /* bitfield */
    {
      /* 0x38bc */ unsigned long DpcNormalProcessingActive : 1; /* bit position: 0 */
      /* 0x38bc */ unsigned long DpcNormalProcessingRequested : 1; /* bit position: 1 */
      /* 0x38bc */ unsigned long DpcNormalThreadSignal : 1; /* bit position: 2 */
      /* 0x38bc */ unsigned long DpcNormalTimerExpiration : 1; /* bit position: 3 */
      /* 0x38bc */ unsigned long DpcNormalDpcPresent : 1; /* bit position: 4 */
      /* 0x38bc */ unsigned long DpcNormalLocalInterrupt : 1; /* bit position: 5 */
      /* 0x38bc */ unsigned long DpcNormalPriorityAntiStarvation : 1; /* bit position: 6 */
      /* 0x38bc */ unsigned long DpcNormalSwapToDpcDelegate : 1; /* bit position: 7 */
      /* 0x38bc */ unsigned long DpcNormalSpare : 8; /* bit position: 8 */
      /* 0x38bc */ unsigned long DpcThreadActive : 1; /* bit position: 16 */
      /* 0x38bc */ unsigned long DpcThreadRequested : 1; /* bit position: 17 */
      /* 0x38bc */ unsigned long DpcThreadSpare : 14; /* bit position: 18 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x38c0 */ unsigned long LastTick;
  /* 0x38c4 */ unsigned long ClockInterrupts;
  /* 0x38c8 */ unsigned long ReadyScanTick;
  /* 0x38cc */ unsigned long SingleDpcSoftTimeLimitTicks;
  /* 0x38d0 */ struct _KSINGLE_DPC_SOFT_TIMEOUT_EVENT_INFO* SingleDpcSoftTimeoutEventInfo;
  /* 0x38d8 */ unsigned long CumulativeDpcSoftTimeLimitTicks;
  /* 0x38dc */ unsigned long DpcWatchdogProfileBufferSize;
  /* 0x38e0 */ struct _KE_PRCB_RCU_DATA RcuData;
  /* 0x3900 */ void* InterruptObject[256];
  /* 0x4100 */ struct _KTIMER_TABLE TimerTable;
  /* 0x8318 */ void* DpcLog;
  /* 0x8320 */ unsigned long DpcLogIndex;
  /* 0x8324 */ unsigned long DpcLogBufferSize;
  /* 0x8328 */ unsigned long PrcbPad92[6];
  /* 0x8340 */ struct _KGATE DpcGate;
  /* 0x8358 */ void* PrcbPad52;
  /* 0x8360 */ struct _KDPC CallDpc;
  /* 0x83a0 */ long ClockKeepAlive;
  /* 0x83a4 */ unsigned char PrcbPad60[2];
  union
  {
    struct
    {
      /* 0x83a6 */ unsigned char NmiActive;
      /* 0x83a7 */ unsigned char MceActive;
    }; /* size: 0x0002 */
    /* 0x83a6 */ unsigned short CombinedNmiMceActive;
  }; /* size: 0x0002 */
  /* 0x83a8 */ long DpcWatchdogPeriodTicks;
  /* 0x83ac */ long DpcWatchdogCount;
  /* 0x83b0 */ volatile long KeSpinLockOrdering;
  /* 0x83b4 */ unsigned long DpcWatchdogProfileCumulativeDpcThresholdTicks;
  /* 0x83b8 */ void* CachedPtes;
  /* 0x83c0 */ struct _LIST_ENTRY WaitListHead;
  /* 0x83d0 */ unsigned __int64 WaitLock;
  /* 0x83d8 */ unsigned long ReadySummary;
  /* 0x83dc */ long AffinitizedSelectionMask;
  /* 0x83e0 */ unsigned long QueueIndex;
  /* 0x83e4 */ unsigned long NormalPriorityQueueIndex;
  /* 0x83e8 */ unsigned long NormalPriorityReadyScanTick;
  /* 0x83ec */ unsigned long DpcWatchdogSequenceNumber;
  /* 0x83f0 */ struct _KDPC TimerExpirationDpc;
  /* 0x8430 */ struct _RTL_RB_TREE ScbQueue;
  /* 0x8440 */ struct _LIST_ENTRY DispatcherReadyListHead[32];
  /* 0x8640 */ unsigned long InterruptCount;
  /* 0x8644 */ unsigned long KernelTime;
  /* 0x8648 */ unsigned long UserTime;
  /* 0x864c */ unsigned long DpcTime;
  /* 0x8650 */ unsigned long InterruptTime;
  /* 0x8654 */ unsigned long AdjustDpcThreshold;
  /* 0x8658 */ unsigned char DebuggerSavedIRQL;
  /* 0x8659 */ unsigned char GroupSchedulingOverQuota;
  /* 0x865a */ volatile unsigned char DeepSleep;
  /* 0x865b */ unsigned char PrcbPad80;
  /* 0x865c */ unsigned long DpcTimeCount;
  /* 0x8660 */ unsigned long DpcTimeLimitTicks;
  /* 0x8664 */ unsigned long PeriodicCount;
  /* 0x8668 */ unsigned long PeriodicBias;
  /* 0x866c */ unsigned long AvailableTime;
  /* 0x8670 */ unsigned long KeExceptionDispatchCount;
  /* 0x8674 */ unsigned long ReadyThreadCount;
  /* 0x8678 */ unsigned __int64 ReadyQueueExpectedRunTime;
  /* 0x8680 */ unsigned __int64 StartCycles;
  /* 0x8688 */ unsigned __int64 TaggedCycles[4];
  /* 0x86a8 */ unsigned __int64 AffinitizedCycles;
  /* 0x86b0 */ unsigned __int64* CyclesByThreadType;
  /* 0x86b8 */ unsigned long CpuCycleScalingFactor;
  /* 0x86bc */ volatile unsigned short PerformanceScoreByClass[8];
  /* 0x86cc */ volatile unsigned short EfficiencyScoreByClass[8];
  /* 0x86dc */ unsigned char CycleAccumulationInitialized;
  /* 0x86dd */ unsigned char PrcbPad83[3];
  /* 0x86e0 */ struct _KMCE_RECOVERY_CONTEXT MceRecoveryContext;
  /* 0x86f0 */ struct _KFORCE_PARK_DUTY_CYCLE_DATA* ForceParkDutyCycleData;
  /* 0x86f8 */ unsigned __int64 StartCyclesQpc;
  /* 0x8700 */ unsigned __int64 CycleTimeQpc;
  /* 0x8708 */ unsigned __int64 NumberOfSecureFaults;
  /* 0x8710 */ unsigned long PrcbPad84[8];
  /* 0x8730 */ void* volatile CachedStacks[2];
  /* 0x8740 */ unsigned long DpcWatchdogProfileSingleDpcThresholdTicks;
  /* 0x8744 */ long PrcbPad82[3];
  /* 0x8750 */ unsigned long PageColor;
  /* 0x8754 */ unsigned long NodeColor;
  /* 0x8758 */ unsigned long PrcbPad87[2];
  /* 0x8760 */ unsigned char PrcbPad81[5];
  /* 0x8765 */ unsigned char SystemWorkKickInProgress;
  /* 0x8766 */ unsigned char ExceptionStackActive;
  /* 0x8767 */ unsigned char TbFlushListActive;
  /* 0x8768 */ void* ExceptionStack;
  /* 0x8770 */ volatile __int64 MmSpinLockOrdering;
  /* 0x8778 */ unsigned __int64 CycleTime;
  /* 0x8780 */ unsigned __int64 Cycles[2][4];
  /* 0x87c0 */ unsigned long CcFastMdlReadNoWait;
  /* 0x87c4 */ unsigned long CcFastMdlReadWait;
  /* 0x87c8 */ unsigned long CcFastMdlReadNotPossible;
  /* 0x87cc */ unsigned long CcMapDataNoWait;
  /* 0x87d0 */ unsigned long CcMapDataWait;
  /* 0x87d4 */ unsigned long CcPinMappedDataCount;
  /* 0x87d8 */ unsigned long CcPinReadNoWait;
  /* 0x87dc */ unsigned long CcPinReadWait;
  /* 0x87e0 */ unsigned long CcMdlReadNoWait;
  /* 0x87e4 */ unsigned long CcMdlReadWait;
  /* 0x87e8 */ unsigned long CcLazyWriteHotSpots;
  /* 0x87ec */ unsigned long CcLazyWriteIos;
  /* 0x87f0 */ unsigned long CcLazyWritePages;
  /* 0x87f4 */ unsigned long CcDataFlushes;
  /* 0x87f8 */ unsigned long CcDataPages;
  /* 0x87fc */ unsigned long CcLostDelayedWrites;
  /* 0x8800 */ unsigned long CcFastReadResourceMiss;
  /* 0x8804 */ unsigned long CcCopyReadWaitMiss;
  /* 0x8808 */ unsigned long CcFastMdlReadResourceMiss;
  /* 0x880c */ unsigned long CcMapDataNoWaitMiss;
  /* 0x8810 */ unsigned long CcMapDataWaitMiss;
  /* 0x8814 */ unsigned long CcPinReadNoWaitMiss;
  /* 0x8818 */ unsigned long CcPinReadWaitMiss;
  /* 0x881c */ unsigned long CcMdlReadNoWaitMiss;
  /* 0x8820 */ unsigned long CcMdlReadWaitMiss;
  /* 0x8824 */ unsigned long CcReadAheadIos;
  /* 0x8828 */ volatile long MmCacheTransitionCount;
  /* 0x882c */ volatile long MmCacheReadCount;
  /* 0x8830 */ volatile long MmCacheIoCount;
  /* 0x8834 */ unsigned long PrcbPad91;
  /* 0x8838 */ void* MmInternal;
  /* 0x8840 */ struct _PROCESSOR_POWER_STATE PowerState;
  /* 0x8a78 */ unsigned __int64 PrcbPad96[1];
  /* 0x8a80 */ void* PrcbPad90;
  /* 0x8a88 */ struct _LIST_ENTRY ScbList;
  /* 0x8a98 */ struct _KDPC ForceIdleDpc;
  /* 0x8ad8 */ struct _KDPC DpcWatchdogDpc;
  /* 0x8b18 */ unsigned __int64 PrcbPad98[7];
  /* 0x8b50 */ void* VmInternal;
  /* 0x8b58 */ struct _CACHE_DESCRIPTOR Cache[5];
  /* 0x8b94 */ unsigned long CacheCount;
  /* 0x8b98 */ volatile unsigned long CachedCommit;
  /* 0x8b9c */ volatile unsigned long CachedResidentAvailable;
  /* 0x8ba0 */ void* WheaInfo;
  /* 0x8ba8 */ void* EtwSupport;
  /* 0x8bb0 */ void* ExSaPageArray;
  /* 0x8bb8 */ unsigned long KeAlignmentFixupCount;
  /* 0x8bbc */ unsigned long PrcbPad95;
  /* 0x8bc0 */ union _SLIST_HEADER HypercallPageList;
  /* 0x8bd0 */ unsigned __int64* StatisticsPage;
  /* 0x8bd8 */ unsigned __int64 GenerationTarget;
  /* 0x8be0 */ union _LARGE_INTEGER VirtualApicAssistPage;
  /* 0x8be8 */ unsigned __int64 PrcbPad85[3];
  /* 0x8c00 */ void* HypercallCachedPages;
  /* 0x8c08 */ void* VirtualApicAssist;
  /* 0x8c10 */ struct _KAFFINITY_EX PackageProcessorSet;
  /* 0x8d18 */ unsigned __int64 PrcbPad86[32];
  union
  {
    struct
    {
      /* 0x8e18 */ unsigned long ProcessorId;
      /* 0x8e1c */ unsigned long CoreId;
      /* 0x8e20 */ unsigned long ModuleId;
      /* 0x8e24 */ unsigned long DieId;
      /* 0x8e28 */ unsigned long PackageId;
    }; /* size: 0x0014 */
    /* 0x8e18 */ unsigned long TopologyId[5];
  }; /* size: 0x0014 */
  /* 0x8e2c */ unsigned long NodeRelativeTopologyIndex[5];
  /* 0x8e40 */ unsigned __int64 SharedReadyQueueMask;
  /* 0x8e48 */ struct _KSHARED_READY_QUEUE* SharedReadyQueue;
  /* 0x8e50 */ unsigned long SharedQueueScanOwner;
  /* 0x8e54 */ unsigned long ScanSiblingIndex;
  /* 0x8e58 */ struct _KCORE_CONTROL_BLOCK* CoreControlBlock;
  /* 0x8e60 */ unsigned __int64 CoreProcessorSet;
  /* 0x8e68 */ unsigned __int64 ScanSiblingMask;
  /* 0x8e70 */ unsigned __int64 LLCMask;
  /* 0x8e78 */ unsigned __int64 GroupModuleProcessorSet;
  /* 0x8e80 */ struct _KTHREAD* SmtIsolationThread;
  /* 0x8e88 */ unsigned __int64 PrcbPad97[2];
  /* 0x8e98 */ struct _PROCESSOR_PROFILE_CONTROL_AREA* ProcessorProfileControlArea;
  /* 0x8ea0 */ void* ProfileEventIndexAddress;
  /* 0x8ea8 */ void** DpcWatchdogProfile;
  /* 0x8eb0 */ void** DpcWatchdogProfileCurrentEmptyCapture;
  /* 0x8eb8 */ void* SchedulerAssist;
  /* 0x8ec0 */ struct _SYNCH_COUNTERS SynchCounters;
  /* 0x8f78 */ unsigned __int64 PrcbPad94;
  /* 0x8f80 */ struct _FILESYSTEM_DISK_COUNTERS FsCounters;
  /* 0x8f90 */ unsigned char VendorString[13];
  /* 0x8f9d */ unsigned char PrcbPad100[3];
  /* 0x8fa0 */ unsigned __int64 FeatureBits;
  /* 0x8fa8 */ union _LARGE_INTEGER UpdateSignature;
  /* 0x8fb0 */ unsigned __int64 PteBitCache;
  /* 0x8fb8 */ unsigned long PteBitOffset;
  /* 0x8fbc */ unsigned long PrcbPad105;
  /* 0x8fc0 */ struct _CONTEXT* Context;
  /* 0x8fc8 */ unsigned long ContextFlagsInit;
  /* 0x8fcc */ unsigned long PrcbPad115;
  /* 0x8fd0 */ struct _XSAVE_AREA* ExtendedState;
  /* 0x8fd8 */ void* IsrStack;
  /* 0x8fe0 */ struct _KENTROPY_TIMING_STATE EntropyTimingState;
  struct
  {
    /* 0x9138 */ unsigned long UpdateCycle;
    union
    {
      /* 0x913c */ short PairLocal;
      struct
      {
        /* 0x913c */ unsigned char PairLocalLow;
        struct /* bitfield */
        {
          /* 0x913d */ unsigned char PairLocalForceStibp : 1; /* bit position: 0 */
          /* 0x913d */ unsigned char Reserved : 4; /* bit position: 1 */
          /* 0x913d */ unsigned char Frozen : 1; /* bit position: 5 */
          /* 0x913d */ unsigned char ForceUntrusted : 1; /* bit position: 6 */
          /* 0x913d */ unsigned char SynchIpi : 1; /* bit position: 7 */
        }; /* bitfield */
      }; /* size: 0x0002 */
    }; /* size: 0x0002 */
    union
    {
      /* 0x913e */ short PairRemote;
      struct
      {
        /* 0x913e */ unsigned char PairRemoteLow;
        /* 0x913f */ unsigned char Reserved2;
      }; /* size: 0x0002 */
    }; /* size: 0x0002 */
    /* 0x9140 */ unsigned char Trace[24];
    /* 0x9158 */ unsigned __int64 LocalDomain;
    /* 0x9160 */ unsigned __int64 RemoteDomain;
    /* 0x9168 */ struct _KTHREAD* Thread;
  } /* size: 0x0038 */ StibpPairingTrace;
  /* 0x9170 */ struct _SINGLE_LIST_ENTRY AbSelfIoBoostsList;
  /* 0x9178 */ struct _SINGLE_LIST_ENTRY AbPropagateBoostsList;
  /* 0x9180 */ struct _KDPC AbDpc;
  /* 0x91c0 */ struct _SYMCRYPT_ENTROPY_ACCUMULATOR_STATE SymCryptEntropyAccumulatorState;
  /* 0x9340 */ struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerCurrent;
  /* 0x9394 */ struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerPrevious;
  /* 0x93e8 */ struct _KSECURE_FAULT_INFORMATION SecureFault;
  /* 0x9400 */ struct _KSHARED_READY_QUEUE* LocalSharedReadyQueue;
  /* 0x9408 */ struct _KI_COOPERATIVE_IDLE_SEARCH_CONTEXT* LocalSearchContexts[2];
  /* 0x9418 */ struct _KI_COOPERATIVE_IDLE_SEARCH_CONTEXT* SearchContexts[2];
  /* 0x9428 */ struct _KI_COOPERATIVE_IDLE_SEARCH_GENERATION* SearchGenerations[2];
  /* 0x9438 */ unsigned __int64 PrcbPad125[1];
  /* 0x9440 */ unsigned long TimerExpirationTraceCount;
  /* 0x9444 */ unsigned long PrcbPad127;
  /* 0x9448 */ struct _KTIMER_EXPIRATION_TRACE TimerExpirationTrace[16];
  /* 0x9548 */ unsigned __int64 PrcbPad128[7];
  /* 0x9580 */ struct _KCLOCK_TIMER_STATE ClockTimerState;
  /* 0x9a98 */ struct _KTRAP_FRAME* IpiFrame;
  /* 0x9aa0 */ unsigned char PrcbPad129[32];
  /* 0x9ac0 */ struct _REQUEST_MAILBOX* Mailbox;
  /* 0x9ac8 */ unsigned __int64 PrcbPad130[7];
  /* 0x9b00 */ struct _MACHINE_CHECK_CONTEXT McheckContext[2];
  /* 0x9ba0 */ unsigned __int64 TransitionShadowStack;
  /* 0x9ba8 */ unsigned __int64 KernelShadowStackInitial;
  /* 0x9bb0 */ unsigned __int64* IstShadowStacksTable;
  /* 0x9bb8 */ void* HiberSwapShadowStacks[5];
  /* 0x9be0 */ void* HiberSwapShadowStackBases[5];
  /* 0x9c08 */ void* MmFaultCompletionInfo;
  /* 0x9c10 */ unsigned __int64 PrcbPad132[6];
  /* 0x9c40 */ struct _KLOCK_QUEUE_HANDLE SelfmapLockHandle[4];
  /* 0x9ca0 */ unsigned __int64 PrcbPad134b[4];
  /* 0x9cc0 */ struct _KAFFINITY_EX DieProcessorSet;
  /* 0x9dc8 */ unsigned __int64 PrcbPad135[32];
  /* 0x9ec8 */ unsigned long CoresPerPhysicalDie;
  /* 0x9ecc */ unsigned long LogicalProcessorsPerModule;
  /* 0x9ed0 */ struct _KDPC FreezeForRecoveryDpc;
  /* 0x9f10 */ struct _KAFFINITY_EX ModuleProcessorSet;
  /* 0xa018 */ unsigned __int64 PrcbPad136[32];
  /* 0xa118 */ struct _KCORE_CONTROL_BLOCK LocalCoreControlBlock;
  /* 0xa148 */ unsigned __int64 PrcbPad137a;
  /* 0xa150 */ struct _KDPC KstackFreeDpc;
  /* 0xa190 */ struct _KDPC SlistRollbackDpc;
  /* 0xa1d0 */ union _SLIST_HEADER KstackFreeList;
  /* 0xa1e0 */ unsigned long IsrStackNesting;
  /* 0xa1e4 */ unsigned char PrcbPad138[3228];
  /* 0xae80 */ unsigned __int64 KernelDirectoryTableBase;
  /* 0xae88 */ unsigned __int64 RspBaseShadow;
  /* 0xae90 */ unsigned __int64 UserRspShadow;
  /* 0xae98 */ unsigned long ShadowFlags;
  /* 0xae9c */ unsigned long PrcbPad138b;
  /* 0xaea0 */ unsigned __int64 PrcbPad138c;
  /* 0xaea8 */ unsigned short PrcbPad138d;
  /* 0xaeaa */ unsigned short VerwSelector;
  /* 0xaeac */ unsigned long DbgMceNestingLevel;
  /* 0xaeb0 */ unsigned long DbgMceFlags;
  /* 0xaeb4 */ unsigned long CoreControlBlockIndex;
  /* 0xaeb8 */ struct _KCORE_CONTROL_BLOCK_SHADOW* CoreControlBlockShadow;
  /* 0xaec0 */ struct _KCORE_CONTROL_BLOCK_SHADOW LocalCoreControlBlockShadow;
  /* 0xaf00 */ struct _KAFFINITY_EX CacheProcessorSet[5];
  /* 0xb428 */ unsigned __int64 PrcbPad139[160];
  /* 0xb928 */ unsigned __int64 PrcbPad140[171];
  /* 0xbe80 */ unsigned __int64 PrcbPad140a[8];
  /* 0xbec0 */ unsigned __int64 PrcbPad141[512];
  /* 0xcec0 */ struct _REQUEST_MAILBOX RequestMailbox[1];
} KPRCB, *PKPRCB; /* size: 0xcf00 */

typedef struct _MI_ALIGNED_SLIST
{
  /* 0x0000 */ union _SLIST_HEADER SList;
  /* 0x0010 */ long __PADDING__[12];
} MI_ALIGNED_SLIST, *PMI_ALIGNED_SLIST; /* size: 0x0040 */

typedef struct _IO_COMPLETION_CONTEXT
{
  /* 0x0000 */ void* Port;
  /* 0x0008 */ void* Key;
  /* 0x0010 */ __int64 UsageCount;
} IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT; /* size: 0x0018 */

typedef union _KPRIORITY_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char Priority : 7; /* bit position: 0 */
      /* 0x0000 */ unsigned char IsolationWidth : 1; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AllFields;
  }; /* size: 0x0001 */
} KPRIORITY_STATE, *PKPRIORITY_STATE; /* size: 0x0001 */

typedef struct _KPRCB_TRACEPOINT_LOG_ENTRY
{
  /* 0x0000 */ unsigned __int64 OldPc;
  /* 0x0008 */ unsigned __int64 OldSp;
  /* 0x0010 */ unsigned __int64 NewPc;
  /* 0x0018 */ unsigned __int64 NewSp;
} KPRCB_TRACEPOINT_LOG_ENTRY, *PKPRCB_TRACEPOINT_LOG_ENTRY; /* size: 0x0020 */

typedef struct _KPRCB_TRACEPOINT_LOG
{
  /* 0x0000 */ struct _KPRCB_TRACEPOINT_LOG_ENTRY Entries[256];
  /* 0x2000 */ unsigned long LogIndex;
  /* 0x2004 */ long __PADDING__[1];
} KPRCB_TRACEPOINT_LOG, *PKPRCB_TRACEPOINT_LOG; /* size: 0x2008 */

typedef union _MI_RESERVATION_CLUSTER_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long ClusterSize : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned long SequenceNumber : 22; /* bit position: 10 */
    }; /* bitfield */
    /* 0x0000 */ long EntireInfo;
  }; /* size: 0x0004 */
} MI_RESERVATION_CLUSTER_INFO, *PMI_RESERVATION_CLUSTER_INFO; /* size: 0x0004 */

typedef struct _POWER_SEQUENCE
{
  /* 0x0000 */ unsigned long SequenceD1;
  /* 0x0004 */ unsigned long SequenceD2;
  /* 0x0008 */ unsigned long SequenceD3;
} POWER_SEQUENCE, *PPOWER_SEQUENCE; /* size: 0x000c */

typedef struct _VF_TRACKER_STAMP
{
  /* 0x0000 */ void* Thread;
  /* 0x0008 */ unsigned char Flags : 8; /* bit position: 0 */
  /* 0x0009 */ unsigned char OldIrql : 8; /* bit position: 0 */
  /* 0x000a */ unsigned char NewIrql : 8; /* bit position: 0 */
  /* 0x000b */ unsigned char Processor : 8; /* bit position: 0 */
  /* 0x000c */ long __PADDING__[1];
} VF_TRACKER_STAMP, *PVF_TRACKER_STAMP; /* size: 0x0010 */

typedef struct _IO_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Option;
  /* 0x0001 */ unsigned char Type;
  /* 0x0002 */ unsigned char ShareDisposition;
  /* 0x0003 */ unsigned char Spare1;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short Spare2;
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Port;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory;
      struct
      {
        /* 0x0008 */ unsigned long MinimumVector;
        /* 0x000c */ unsigned long MaximumVector;
        /* 0x0010 */ unsigned short AffinityPolicy;
        /* 0x0012 */ unsigned short Group;
        /* 0x0014 */ enum _IRQ_PRIORITY PriorityPolicy;
        /* 0x0018 */ unsigned __int64 TargetedProcessors;
      } /* size: 0x0018 */ Interrupt;
      struct
      {
        /* 0x0008 */ unsigned long MinimumChannel;
        /* 0x000c */ unsigned long MaximumChannel;
      } /* size: 0x0008 */ Dma;
      struct
      {
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned long Reserved;
        /* 0x0010 */ unsigned long Channel;
        /* 0x0014 */ unsigned long TransferWidth;
      } /* size: 0x0010 */ DmaV3;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Generic;
      struct
      {
        /* 0x0008 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long MinBusNumber;
        /* 0x0010 */ unsigned long MaxBusNumber;
        /* 0x0014 */ unsigned long Reserved;
      } /* size: 0x0010 */ BusNumber;
      struct
      {
        /* 0x0008 */ unsigned long Priority;
        /* 0x000c */ unsigned long Reserved1;
        /* 0x0010 */ unsigned long Reserved2;
      } /* size: 0x000c */ ConfigData;
      struct
      {
        /* 0x0008 */ unsigned long Length40;
        /* 0x000c */ unsigned long Alignment40;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory40;
      struct
      {
        /* 0x0008 */ unsigned long Length48;
        /* 0x000c */ unsigned long Alignment48;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory48;
      struct
      {
        /* 0x0008 */ unsigned long Length64;
        /* 0x000c */ unsigned long Alignment64;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory64;
      struct
      {
        /* 0x0008 */ unsigned char Class;
        /* 0x0009 */ unsigned char Type;
        /* 0x000a */ unsigned char Reserved1;
        /* 0x000b */ unsigned char Reserved2;
        /* 0x000c */ unsigned long IdLowPart;
        /* 0x0010 */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u;
} IO_RESOURCE_DESCRIPTOR, *PIO_RESOURCE_DESCRIPTOR; /* size: 0x0020 */

typedef struct _IO_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
} IO_RESOURCE_LIST, *PIO_RESOURCE_LIST; /* size: 0x0028 */

typedef struct _MI_LARGE_PAGE_COALESCE_WORKER_CONTEXT
{
  /* 0x0000 */ struct _KEVENT CandidatesExistEvent;
  /* 0x0018 */ unsigned __int64 InProgressBitmapIndex;
  /* 0x0020 */ long DemandCoalesceAttempted;
  /* 0x0024 */ long DemandCoalesceTimedOut;
  /* 0x0028 */ long DemandCoalesceTimedOutCSwitch;
  /* 0x002c */ long DemandCoalesceSucceeded;
} MI_LARGE_PAGE_COALESCE_WORKER_CONTEXT, *PMI_LARGE_PAGE_COALESCE_WORKER_CONTEXT; /* size: 0x0030 */

typedef struct _KERNEL_STACK_SEGMENT
{
  /* 0x0000 */ unsigned __int64 StackBase;
  /* 0x0008 */ unsigned __int64 StackLimit;
  /* 0x0010 */ unsigned __int64 KernelStack;
  /* 0x0018 */ unsigned __int64 InitialStack;
  /* 0x0020 */ unsigned __int64 KernelShadowStackBase;
  /* 0x0028 */ union _KERNEL_SHADOW_STACK_LIMIT KernelShadowStackLimit;
  /* 0x0030 */ unsigned __int64 KernelShadowStack;
  /* 0x0038 */ unsigned __int64 KernelShadowStackInitial;
} KERNEL_STACK_SEGMENT, *PKERNEL_STACK_SEGMENT; /* size: 0x0040 */

typedef struct _KSTACK_CONTROL
{
  /* 0x0000 */ unsigned __int64 StackBase;
  union
  {
    /* 0x0008 */ unsigned __int64 ActualLimit;
    /* 0x0008 */ unsigned __int64 StackExpansion : 1; /* bit position: 0 */
  }; /* size: 0x0008 */
  /* 0x0010 */ struct _KERNEL_STACK_SEGMENT Previous;
} KSTACK_CONTROL, *PKSTACK_CONTROL; /* size: 0x0050 */

typedef struct _PEP_WORK_ACTIVE_COMPLETE
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0008 */ unsigned long Component;
  /* 0x000c */ long __PADDING__[1];
} PEP_WORK_ACTIVE_COMPLETE, *PPEP_WORK_ACTIVE_COMPLETE; /* size: 0x0010 */

typedef struct _PEP_WORK_IDLE_STATE
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0008 */ unsigned long Component;
  /* 0x000c */ unsigned long State;
} PEP_WORK_IDLE_STATE, *PPEP_WORK_IDLE_STATE; /* size: 0x0010 */

typedef struct _PEP_WORK_DEVICE_POWER
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0008 */ unsigned char PowerRequired;
  /* 0x0009 */ char __PADDING__[7];
} PEP_WORK_DEVICE_POWER, *PPEP_WORK_DEVICE_POWER; /* size: 0x0010 */

typedef struct _PEP_WORK_POWER_CONTROL
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0008 */ const struct _GUID* PowerControlCode;
  /* 0x0010 */ void* RequestContext;
  /* 0x0018 */ void* InBuffer;
  /* 0x0020 */ unsigned __int64 InBufferSize;
  /* 0x0028 */ void* OutBuffer;
  /* 0x0030 */ unsigned __int64 OutBufferSize;
} PEP_WORK_POWER_CONTROL, *PPEP_WORK_POWER_CONTROL; /* size: 0x0038 */

typedef struct _PEP_WORK_DEVICE_IDLE
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0008 */ unsigned char IgnoreIdleTimeout;
  /* 0x0009 */ char __PADDING__[7];
} PEP_WORK_DEVICE_IDLE, *PPEP_WORK_DEVICE_IDLE; /* size: 0x0010 */

typedef struct _PEP_WORK_COMPLETE_IDLE_STATE
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0008 */ unsigned long Component;
  /* 0x000c */ long __PADDING__[1];
} PEP_WORK_COMPLETE_IDLE_STATE, *PPEP_WORK_COMPLETE_IDLE_STATE; /* size: 0x0010 */

typedef struct _PEP_WORK_COMPLETE_PERF_STATE
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0008 */ unsigned long Component;
  /* 0x000c */ unsigned char Succeeded;
  /* 0x000d */ char __PADDING__[3];
} PEP_WORK_COMPLETE_PERF_STATE, *PPEP_WORK_COMPLETE_PERF_STATE; /* size: 0x0010 */

typedef struct _PEP_WORK_ACPI_NOTIFY
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0008 */ unsigned long NotifyCode;
  /* 0x000c */ long __PADDING__[1];
} PEP_WORK_ACPI_NOTIFY, *PPEP_WORK_ACPI_NOTIFY; /* size: 0x0010 */

typedef struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0008 */ unsigned long CompletionFlags;
  /* 0x000c */ long MethodStatus;
  /* 0x0010 */ void* CompletionContext;
  /* 0x0018 */ unsigned __int64 OutputArgumentSize;
  /* 0x0020 */ struct _ACPI_METHOD_ARGUMENT_V1* OutputArguments;
} PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE, *PPEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE; /* size: 0x0028 */

typedef struct _PEP_WORK_INFORMATION
{
  /* 0x0000 */ enum _PEP_WORK_TYPE WorkType;
  /* 0x0004 */ long Padding_222;
  union
  {
    /* 0x0008 */ struct _PEP_WORK_ACTIVE_COMPLETE ActiveComplete;
    /* 0x0008 */ struct _PEP_WORK_IDLE_STATE IdleState;
    /* 0x0008 */ struct _PEP_WORK_DEVICE_POWER DevicePower;
    /* 0x0008 */ struct _PEP_WORK_POWER_CONTROL PowerControl;
    /* 0x0008 */ struct _PEP_WORK_DEVICE_IDLE DeviceIdle;
    /* 0x0008 */ struct _PEP_WORK_COMPLETE_IDLE_STATE CompleteIdleState;
    /* 0x0008 */ struct _PEP_WORK_COMPLETE_PERF_STATE CompletePerfState;
    /* 0x0008 */ struct _PEP_WORK_ACPI_NOTIFY AcpiNotify;
    struct
    {
      /* 0x0008 */ struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE ControlMethodComplete;
      /* 0x0030 */ long __PADDING__[4];
    }; /* size: 0x0038 */
  }; /* size: 0x0038 */
} PEP_WORK_INFORMATION, *PPEP_WORK_INFORMATION; /* size: 0x0040 */

typedef union _KQOS_GROUPING_SETS
{
  /* 0x0000 */ unsigned __int64 SingleCoreSet;
  /* 0x0008 */ unsigned __int64 SmtSet;
} KQOS_GROUPING_SETS, *PKQOS_GROUPING_SETS; /* size: 0x0010 */

typedef struct _KSCHEDULER_SUBNODE
{
  /* 0x0000 */ unsigned __int64 SubNodeLock;
  /* 0x0008 */ unsigned __int64 IdleNonParkedCpuSet;
  union
  {
    struct
    {
      /* 0x0010 */ unsigned __int64 IdleCpuSet;
      /* 0x0018 */ unsigned __int64 IdleSmtSet;
      /* 0x0020 */ unsigned __int64 IdleModuleSet;
    }; /* size: 0x0018 */
    /* 0x0010 */ unsigned __int64 IdleIsolationUnitSet[2];
  }; /* size: 0x0018 */
  /* 0x0028 */ unsigned __int64 NonPairedSmtSet;
  /* 0x0030 */ unsigned __int64 ThreadQosGroupingSet;
  /* 0x0038 */ unsigned __int64 Spare1[1];
  /* 0x0040 */ unsigned __int64 DeepIdleSet;
  /* 0x0048 */ unsigned __int64 IdleConstrainedSet;
  /* 0x0050 */ unsigned __int64 NonParkedSet;
  /* 0x0058 */ unsigned __int64 ParkRequestSet;
  /* 0x0060 */ unsigned __int64 SoftParkRequestSet;
  /* 0x0068 */ unsigned __int64 ForceParkRequestSet;
  /* 0x0070 */ unsigned __int64 NonIsrTargetedSet;
  /* 0x0078 */ long ParkLock;
  /* 0x007c */ unsigned char ProcessSeed;
  /* 0x007d */ unsigned char Spare5[3];
  union
  {
    /* 0x0080 */ struct _GROUP_AFFINITY Affinity;
    struct
    {
      /* 0x0080 */ unsigned char AffinityFill[10];
      /* 0x008a */ unsigned short ParentNodeNumber;
      /* 0x008c */ unsigned short SubNodeNumber;
      /* 0x008e */ unsigned short Spare;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0090 */ unsigned __int64 SiblingMask;
  /* 0x0098 */ unsigned __int64 SharedReadyQueueMask;
  /* 0x00a0 */ unsigned __int64 StrideMask;
  /* 0x00a8 */ unsigned __int64 LLCLeaders;
  /* 0x00b0 */ unsigned long Lowest;
  /* 0x00b4 */ unsigned long Highest;
  /* 0x00b8 */ struct _flags Flags;
  /* 0x00b9 */ unsigned char WorkloadClasses;
  /* 0x00ba */ char Padding_223[6];
  /* 0x00c0 */ struct _KHETERO_PROCESSOR_SET* HeteroSets;
  /* 0x00c8 */ union _KRANK_LIST* PerformanceRanks;
  /* 0x00d0 */ union _KRANK_LIST* EfficiencyRanks;
  /* 0x00d8 */ unsigned __int64 Spare6[5];
  /* 0x0100 */ unsigned __int64 PpmConfiguredQosSets[7];
  /* 0x0138 */ unsigned __int64 Spare7;
  /* 0x0140 */ union _KQOS_GROUPING_SETS PpmQosGroupingSets;
  /* 0x0150 */ unsigned __int64 Spare8[6];
  /* 0x0180 */ volatile unsigned __int64 StealableLocalReadyQueues;
  /* 0x0188 */ volatile unsigned __int64 StealableSharedReadyQueues;
  /* 0x0190 */ volatile unsigned __int64 StealableStandbyThreads;
  /* 0x0198 */ unsigned __int64 Spare9[5];
  /* 0x01c0 */ union _KRANK_LIST SoftParkRanks;
  /* 0x0200 */ union _KRANK_LIST CoreShareCounts;
  /* 0x0240 */ union _KRANK_LIST ModuleShareCounts;
  /* 0x0280 */ union _KRANK_LIST ThreadQosGroupingCoreShareCounts;
  /* 0x02c0 */ union _KRANK_LIST ThreadQosGroupingModuleShareCounts;
} KSCHEDULER_SUBNODE, *PKSCHEDULER_SUBNODE; /* size: 0x0300 */

typedef struct _KNODE_SUBNODE_SEARCH_RANKS
{
  /* 0x0000 */ unsigned char Ranks[32];
} KNODE_SUBNODE_SEARCH_RANKS, *PKNODE_SUBNODE_SEARCH_RANKS; /* size: 0x0020 */

typedef struct _KNODE
{
  /* 0x0000 */ unsigned short NodeNumber;
  /* 0x0002 */ unsigned short PrimaryNodeNumber;
  /* 0x0004 */ unsigned long ProximityId;
  /* 0x0008 */ unsigned short MaximumProcessors;
  struct
  {
    struct /* bitfield */
    {
      /* 0x000a */ unsigned char ProcessorOnly : 1; /* bit position: 0 */
      /* 0x000a */ unsigned char GroupsAssigned : 1; /* bit position: 1 */
      /* 0x000a */ unsigned char MeasurableDistance : 1; /* bit position: 2 */
    }; /* bitfield */
  } /* size: 0x0001 */ Flags;
  /* 0x000b */ unsigned char GroupSeed;
  /* 0x000c */ unsigned char PrimaryGroup;
  /* 0x000d */ unsigned char Padding[3];
  /* 0x0010 */ struct _KGROUP_MASK ActiveGroups;
  /* 0x0020 */ struct _KSCHEDULER_SUBNODE* SchedulerSubNodes[32];
  /* 0x0120 */ unsigned long ActiveTopologyElements[5];
  /* 0x0134 */ struct _KNODE_SUBNODE_SEARCH_RANKS PerformanceSearchRanks[8];
  /* 0x0234 */ struct _KNODE_SUBNODE_SEARCH_RANKS EfficiencySearchRanks[8];
  /* 0x0334 */ long __PADDING__[1];
} KNODE, *PKNODE; /* size: 0x0338 */

typedef struct _ENODE
{
  /* 0x0000 */ struct _KNODE Ncb;
  /* 0x0338 */ struct _WORK_QUEUE_ITEM HotAddProcessorWorkItem;
  /* 0x0358 */ long __PADDING__[10];
} ENODE, *PENODE; /* size: 0x0380 */

typedef struct _IOMMU_INTERFACE_CALLBACK_RECORD
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ void* CallbackRoutine /* function */;
  /* 0x0018 */ void* CallbackContext;
  /* 0x0020 */ struct _IOMMU_DMA_DEVICE* DmaDevice;
  /* 0x0028 */ struct _IOMMU_INTERFACE_STATE_CHANGE LastReportedState;
} IOMMU_INTERFACE_CALLBACK_RECORD, *PIOMMU_INTERFACE_CALLBACK_RECORD; /* size: 0x0030 */

struct _IOP_FILE_OBJECT_EXTENSION;

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char ShareDisposition;
  /* 0x0002 */ unsigned short Flags;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Generic;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Port;
      struct
      {
        /* 0x0004 */ unsigned short Level;
        /* 0x0006 */ unsigned short Group;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned __int64 Affinity;
      } /* size: 0x0010 */ Interrupt;
      struct
      {
        union
        {
          struct
          {
            /* 0x0004 */ unsigned short Group;
            /* 0x0006 */ unsigned short MessageCount;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned __int64 Affinity;
          } /* size: 0x0010 */ Raw;
          struct
          {
            /* 0x0004 */ unsigned short Level;
            /* 0x0006 */ unsigned short Group;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned __int64 Affinity;
          } /* size: 0x0010 */ Translated;
        }; /* size: 0x0010 */
      } /* size: 0x0010 */ MessageInterrupt;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Memory;
      struct
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long Port;
        /* 0x000c */ unsigned long Reserved1;
      } /* size: 0x000c */ Dma;
      struct
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned char TransferWidth;
        /* 0x000d */ unsigned char Reserved1;
        /* 0x000e */ unsigned char Reserved2;
        /* 0x000f */ unsigned char Reserved3;
      } /* size: 0x000c */ DmaV3;
      struct
      {
        /* 0x0004 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct
      {
        /* 0x0004 */ unsigned long Start;
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Reserved;
      } /* size: 0x000c */ BusNumber;
      struct
      {
        /* 0x0004 */ unsigned long DataSize;
        /* 0x0008 */ unsigned long Reserved1;
        /* 0x000c */ unsigned long Reserved2;
      } /* size: 0x000c */ DeviceSpecificData;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length40;
      } /* size: 0x000c */ Memory40;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length48;
      } /* size: 0x000c */ Memory48;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length64;
      } /* size: 0x000c */ Memory64;
      struct
      {
        /* 0x0004 */ unsigned char Class;
        /* 0x0005 */ unsigned char Type;
        /* 0x0006 */ unsigned char Reserved1;
        /* 0x0007 */ unsigned char Reserved2;
        /* 0x0008 */ unsigned long IdLowPart;
        /* 0x000c */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ u;
} CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR; /* size: 0x0014 */

typedef struct _CM_PARTIAL_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
} CM_PARTIAL_RESOURCE_LIST, *PCM_PARTIAL_RESOURCE_LIST; /* size: 0x001c */

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
} CM_FULL_RESOURCE_DESCRIPTOR, *PCM_FULL_RESOURCE_DESCRIPTOR; /* size: 0x0024 */

typedef struct _KHETERO_PROCESSOR_SET
{
  /* 0x0000 */ unsigned __int64 IdealMask;
  /* 0x0008 */ unsigned __int64 PreferredMask;
  /* 0x0010 */ unsigned __int64 AvailableMask;
} KHETERO_PROCESSOR_SET, *PKHETERO_PROCESSOR_SET; /* size: 0x0018 */

typedef struct _RTL_HASH_TABLE_ITERATOR
{
  /* 0x0000 */ struct _RTL_HASH_TABLE* Hash;
  /* 0x0008 */ struct _RTL_HASH_ENTRY* HashEntry;
  /* 0x0010 */ struct _SINGLE_LIST_ENTRY* Bucket;
} RTL_HASH_TABLE_ITERATOR, *PRTL_HASH_TABLE_ITERATOR; /* size: 0x0018 */

typedef struct _ACL
{
  /* 0x0000 */ unsigned char AclRevision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short AclSize;
  /* 0x0004 */ unsigned short AceCount;
  /* 0x0006 */ unsigned short Sbz2;
} ACL, *PACL; /* size: 0x0008 */

typedef struct _MI_CROSS_PARTITION_CHARGES
{
  /* 0x0000 */ unsigned __int64 CurrentCharges;
  /* 0x0008 */ unsigned __int64 ChargeFailures;
  /* 0x0010 */ unsigned __int64 ChargePeak;
  /* 0x0018 */ unsigned __int64 MaximumAllowed;
} MI_CROSS_PARTITION_CHARGES, *PMI_CROSS_PARTITION_CHARGES; /* size: 0x0020 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Linkage;
  /* 0x0010 */ unsigned __int64 Signature;
} RTL_DYNAMIC_HASH_TABLE_ENTRY, *PRTL_DYNAMIC_HASH_TABLE_ENTRY; /* size: 0x0018 */

typedef struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR
{
  /* 0x0000 */ enum _SEP_CACHED_HANDLES_ENTRY_TYPE DescriptorType;
  /* 0x0004 */ long Padding_224;
  union
  {
    /* 0x0008 */ void* PackageSid;
    /* 0x0008 */ struct _UNICODE_STRING IsolationPrefix;
  }; /* size: 0x0010 */
} SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR, *PSEP_CACHED_HANDLES_ENTRY_DESCRIPTOR; /* size: 0x0018 */

typedef struct _SEP_CACHED_HANDLES_ENTRY
{
  /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  /* 0x0018 */ __int64 ReferenceCount;
  /* 0x0020 */ struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR EntryDescriptor;
  /* 0x0038 */ unsigned long HandleCount;
  /* 0x003c */ long Padding_225;
  /* 0x0040 */ void** Handles;
} SEP_CACHED_HANDLES_ENTRY, *PSEP_CACHED_HANDLES_ENTRY; /* size: 0x0048 */

typedef union __m64
{
  union
  {
    /* 0x0000 */ unsigned __int64 m64_u64;
    /* 0x0000 */ float m64_f32[2];
    /* 0x0000 */ char m64_i8[8];
    /* 0x0000 */ short m64_i16[4];
    /* 0x0000 */ int m64_i32[2];
    /* 0x0000 */ __int64 m64_i64;
    /* 0x0000 */ unsigned char m64_u8[8];
    /* 0x0000 */ unsigned short m64_u16[4];
    /* 0x0000 */ unsigned int m64_u32[2];
  }; /* size: 0x0008 */
} _m64, *P_m64; /* size: 0x0008 */

typedef struct _KSYSTEM_TIME
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long High1Time;
  /* 0x0008 */ long High2Time;
} KSYSTEM_TIME, *PKSYSTEM_TIME; /* size: 0x000c */

typedef struct _XSTATE_CONFIGURATION
{
  /* 0x0000 */ unsigned __int64 EnabledFeatures;
  /* 0x0008 */ unsigned __int64 EnabledVolatileFeatures;
  /* 0x0010 */ unsigned long Size;
  union
  {
    /* 0x0014 */ unsigned long ControlFlags;
    struct /* bitfield */
    {
      /* 0x0014 */ unsigned long OptimizedSave : 1; /* bit position: 0 */
      /* 0x0014 */ unsigned long CompactionEnabled : 1; /* bit position: 1 */
      /* 0x0014 */ unsigned long ExtendedFeatureDisable : 1; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0018 */ struct _XSTATE_FEATURE Features[64];
  /* 0x0218 */ unsigned __int64 EnabledSupervisorFeatures;
  /* 0x0220 */ unsigned __int64 AlignedFeatures;
  /* 0x0228 */ unsigned long AllFeatureSize;
  /* 0x022c */ unsigned long AllFeatures[64];
  /* 0x032c */ long Padding_226;
  /* 0x0330 */ unsigned __int64 EnabledUserVisibleSupervisorFeatures;
  /* 0x0338 */ unsigned __int64 ExtendedFeatureDisableFeatures;
  /* 0x0340 */ unsigned long AllNonLargeFeatureSize;
  /* 0x0344 */ unsigned short MaxSveVectorLength;
  /* 0x0346 */ unsigned short Spare1;
} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION; /* size: 0x0348 */

typedef struct _KUSER_SHARED_DATA
{
  /* 0x0000 */ unsigned long TickCountLowDeprecated;
  /* 0x0004 */ unsigned long TickCountMultiplier;
  /* 0x0008 */ volatile struct _KSYSTEM_TIME InterruptTime;
  /* 0x0014 */ volatile struct _KSYSTEM_TIME SystemTime;
  /* 0x0020 */ volatile struct _KSYSTEM_TIME TimeZoneBias;
  /* 0x002c */ unsigned short ImageNumberLow;
  /* 0x002e */ unsigned short ImageNumberHigh;
  /* 0x0030 */ wchar_t NtSystemRoot[260];
  /* 0x0238 */ unsigned long MaxStackTraceDepth;
  /* 0x023c */ unsigned long CryptoExponent;
  /* 0x0240 */ unsigned long TimeZoneId;
  /* 0x0244 */ unsigned long LargePageMinimum;
  /* 0x0248 */ unsigned long AitSamplingValue;
  /* 0x024c */ unsigned long AppCompatFlag;
  /* 0x0250 */ unsigned __int64 RNGSeedVersion;
  /* 0x0258 */ unsigned long GlobalValidationRunlevel;
  /* 0x025c */ volatile long TimeZoneBiasStamp;
  /* 0x0260 */ unsigned long NtBuildNumber;
  /* 0x0264 */ enum _NT_PRODUCT_TYPE NtProductType;
  /* 0x0268 */ unsigned char ProductTypeIsValid;
  /* 0x0269 */ unsigned char Reserved0[1];
  /* 0x026a */ unsigned short NativeProcessorArchitecture;
  /* 0x026c */ unsigned long NtMajorVersion;
  /* 0x0270 */ unsigned long NtMinorVersion;
  /* 0x0274 */ unsigned char ProcessorFeatures[64];
  /* 0x02b4 */ unsigned long Reserved1;
  /* 0x02b8 */ unsigned long Reserved3;
  /* 0x02bc */ volatile unsigned long TimeSlip;
  /* 0x02c0 */ enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
  /* 0x02c4 */ unsigned long BootId;
  /* 0x02c8 */ union _LARGE_INTEGER SystemExpirationDate;
  /* 0x02d0 */ unsigned long SuiteMask;
  /* 0x02d4 */ unsigned char KdDebuggerEnabled;
  union
  {
    /* 0x02d5 */ unsigned char MitigationPolicies;
    struct /* bitfield */
    {
      /* 0x02d5 */ unsigned char NXSupportPolicy : 2; /* bit position: 0 */
      /* 0x02d5 */ unsigned char SEHValidationPolicy : 2; /* bit position: 2 */
      /* 0x02d5 */ unsigned char CurDirDevicesSkippedForDlls : 2; /* bit position: 4 */
      /* 0x02d5 */ unsigned char Reserved : 2; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x02d6 */ unsigned short CyclesPerYield;
  /* 0x02d8 */ volatile unsigned long ActiveConsoleId;
  /* 0x02dc */ volatile unsigned long DismountCount;
  /* 0x02e0 */ unsigned long ComPlusPackage;
  /* 0x02e4 */ unsigned long LastSystemRITEventTickCount;
  /* 0x02e8 */ unsigned long NumberOfPhysicalPages;
  /* 0x02ec */ unsigned char SafeBootMode;
  /* 0x02ed */ unsigned char VirtualizationFlags;
  /* 0x02ee */ unsigned char Reserved12[2];
  union
  {
    /* 0x02f0 */ unsigned long SharedDataFlags;
    struct /* bitfield */
    {
      /* 0x02f0 */ unsigned long DbgErrorPortPresent : 1; /* bit position: 0 */
      /* 0x02f0 */ unsigned long DbgElevationEnabled : 1; /* bit position: 1 */
      /* 0x02f0 */ unsigned long DbgVirtEnabled : 1; /* bit position: 2 */
      /* 0x02f0 */ unsigned long DbgInstallerDetectEnabled : 1; /* bit position: 3 */
      /* 0x02f0 */ unsigned long DbgLkgEnabled : 1; /* bit position: 4 */
      /* 0x02f0 */ unsigned long DbgDynProcessorEnabled : 1; /* bit position: 5 */
      /* 0x02f0 */ unsigned long DbgConsoleBrokerEnabled : 1; /* bit position: 6 */
      /* 0x02f0 */ unsigned long DbgSecureBootEnabled : 1; /* bit position: 7 */
      /* 0x02f0 */ unsigned long DbgMultiSessionSku : 1; /* bit position: 8 */
      /* 0x02f0 */ unsigned long DbgMultiUsersInSessionSku : 1; /* bit position: 9 */
      /* 0x02f0 */ unsigned long DbgStateSeparationEnabled : 1; /* bit position: 10 */
      /* 0x02f0 */ unsigned long SpareBits : 21; /* bit position: 11 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x02f4 */ unsigned long DataFlagsPad[1];
  /* 0x02f8 */ unsigned __int64 TestRetInstruction;
  /* 0x0300 */ __int64 QpcFrequency;
  /* 0x0308 */ unsigned long SystemCall;
  /* 0x030c */ unsigned long Reserved2;
  /* 0x0310 */ unsigned __int64 FullNumberOfPhysicalPages;
  /* 0x0318 */ unsigned __int64 SystemCallPad[1];
  union
  {
    /* 0x0320 */ volatile struct _KSYSTEM_TIME TickCount;
    /* 0x0320 */ volatile unsigned __int64 TickCountQuad;
    /* 0x0320 */ unsigned long ReservedTickCountOverlay[3];
  }; /* size: 0x000c */
  /* 0x032c */ unsigned long TickCountPad[1];
  /* 0x0330 */ unsigned long Cookie;
  /* 0x0334 */ unsigned long CookiePad[1];
  /* 0x0338 */ __int64 ConsoleSessionForegroundProcessId;
  /* 0x0340 */ unsigned __int64 TimeUpdateLock;
  /* 0x0348 */ unsigned __int64 BaselineSystemTimeQpc;
  /* 0x0350 */ unsigned __int64 BaselineInterruptTimeQpc;
  /* 0x0358 */ unsigned __int64 QpcSystemTimeIncrement;
  /* 0x0360 */ unsigned __int64 QpcInterruptTimeIncrement;
  /* 0x0368 */ unsigned char QpcSystemTimeIncrementShift;
  /* 0x0369 */ unsigned char QpcInterruptTimeIncrementShift;
  /* 0x036a */ unsigned short UnparkedProcessorCount;
  /* 0x036c */ unsigned long EnclaveFeatureMask[4];
  /* 0x037c */ unsigned long TelemetryCoverageRound;
  /* 0x0380 */ unsigned short UserModeGlobalLogger[16];
  /* 0x03a0 */ unsigned long ImageFileExecutionOptions;
  /* 0x03a4 */ unsigned long LangGenerationCount;
  /* 0x03a8 */ unsigned __int64 Reserved4;
  /* 0x03b0 */ volatile unsigned __int64 InterruptTimeBias;
  /* 0x03b8 */ volatile unsigned __int64 QpcBias;
  /* 0x03c0 */ unsigned long ActiveProcessorCount;
  /* 0x03c4 */ volatile unsigned char ActiveGroupCount;
  /* 0x03c5 */ unsigned char Reserved9;
  union
  {
    /* 0x03c6 */ unsigned short QpcData;
    struct
    {
      /* 0x03c6 */ volatile unsigned char QpcBypassEnabled;
      /* 0x03c7 */ unsigned char QpcReserved;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x03c8 */ union _LARGE_INTEGER TimeZoneBiasEffectiveStart;
  /* 0x03d0 */ union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
  /* 0x03d8 */ struct _XSTATE_CONFIGURATION XState;
  /* 0x0720 */ struct _KSYSTEM_TIME FeatureConfigurationChangeStamp;
  /* 0x072c */ unsigned long Spare;
  /* 0x0730 */ unsigned __int64 UserPointerAuthMask;
  /* 0x0738 */ unsigned long Reserved10[210];
} KUSER_SHARED_DATA, *PKUSER_SHARED_DATA; /* size: 0x0a80 */

typedef struct _SEP_LUID_TO_INDEX_MAP_ENTRY
{
  /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  /* 0x0018 */ __int64 ReferenceCount;
  /* 0x0020 */ unsigned __int64 Luid;
  /* 0x0028 */ unsigned __int64 IndexIntoGlobalSingletonTable;
  /* 0x0030 */ unsigned char MarkedForDeletion;
  /* 0x0031 */ char __PADDING__[7];
} SEP_LUID_TO_INDEX_MAP_ENTRY, *PSEP_LUID_TO_INDEX_MAP_ENTRY; /* size: 0x0038 */

typedef struct _PROCLOCALX2APIC
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned long APICID;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long ACPIProcessorID;
} PROCLOCALX2APIC, *PPROCLOCALX2APIC; /* size: 0x0010 */

typedef struct _FAST_IO_DISPATCH
{
  /* 0x0000 */ unsigned long SizeOfFastIoDispatch;
  /* 0x0004 */ long Padding_227;
  /* 0x0008 */ void* FastIoCheckIfPossible /* function */;
  /* 0x0010 */ void* FastIoRead /* function */;
  /* 0x0018 */ void* FastIoWrite /* function */;
  /* 0x0020 */ void* FastIoQueryBasicInfo /* function */;
  /* 0x0028 */ void* FastIoQueryStandardInfo /* function */;
  /* 0x0030 */ void* FastIoLock /* function */;
  /* 0x0038 */ void* FastIoUnlockSingle /* function */;
  /* 0x0040 */ void* FastIoUnlockAll /* function */;
  /* 0x0048 */ void* FastIoUnlockAllByKey /* function */;
  /* 0x0050 */ void* FastIoDeviceControl /* function */;
  /* 0x0058 */ void* AcquireFileForNtCreateSection /* function */;
  /* 0x0060 */ void* ReleaseFileForNtCreateSection /* function */;
  /* 0x0068 */ void* FastIoDetachDevice /* function */;
  /* 0x0070 */ void* FastIoQueryNetworkOpenInfo /* function */;
  /* 0x0078 */ void* AcquireForModWrite /* function */;
  /* 0x0080 */ void* MdlRead /* function */;
  /* 0x0088 */ void* MdlReadComplete /* function */;
  /* 0x0090 */ void* PrepareMdlWrite /* function */;
  /* 0x0098 */ void* MdlWriteComplete /* function */;
  /* 0x00a0 */ void* FastIoReadCompressed /* function */;
  /* 0x00a8 */ void* FastIoWriteCompressed /* function */;
  /* 0x00b0 */ void* MdlReadCompleteCompressed /* function */;
  /* 0x00b8 */ void* MdlWriteCompleteCompressed /* function */;
  /* 0x00c0 */ void* FastIoQueryOpen /* function */;
  /* 0x00c8 */ void* ReleaseForModWrite /* function */;
  /* 0x00d0 */ void* AcquireForCcFlush /* function */;
  /* 0x00d8 */ void* ReleaseForCcFlush /* function */;
} FAST_IO_DISPATCH, *PFAST_IO_DISPATCH; /* size: 0x00e0 */

typedef struct _OBJECT_HEADER_QUOTA_INFO
{
  /* 0x0000 */ unsigned long PagedPoolCharge;
  /* 0x0004 */ unsigned long NonPagedPoolCharge;
  /* 0x0008 */ unsigned long SecurityDescriptorCharge;
  /* 0x000c */ unsigned long Reserved1;
  /* 0x0010 */ void* SecurityDescriptorQuotaBlock;
  /* 0x0018 */ unsigned __int64 Reserved2;
} OBJECT_HEADER_QUOTA_INFO, *POBJECT_HEADER_QUOTA_INFO; /* size: 0x0020 */

typedef union _MCI_STATUS
{
  union
  {
    /* 0x0000 */ struct _MCI_STATUS_BITS_COMMON CommonBits;
    /* 0x0000 */ struct _MCI_STATUS_AMD_BITS AmdBits;
    /* 0x0000 */ struct _MCI_STATUS_INTEL_BITS IntelBits;
    /* 0x0000 */ unsigned __int64 QuadPart;
  }; /* size: 0x0008 */
} MCI_STATUS, *PMCI_STATUS; /* size: 0x0008 */

typedef union _MCG_CAP
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 CountField : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 ControlMsrPresent : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 ExtendedMsrsPresent : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 SignalingExtensionPresent : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 ThresholdErrorStatusPresent : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 Reserved : 4; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 ExtendedRegisterCount : 8; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 SoftwareErrorRecoverySupported : 1; /* bit position: 24 */
      /* 0x0000 */ unsigned __int64 EnhancedMachineCheckCapability : 1; /* bit position: 25 */
      /* 0x0000 */ unsigned __int64 ExtendedErrorLogging : 1; /* bit position: 26 */
      /* 0x0000 */ unsigned __int64 LocalMachineCheckException : 1; /* bit position: 27 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 QuadPart;
  }; /* size: 0x0008 */
} MCG_CAP, *PMCG_CAP; /* size: 0x0008 */

typedef struct _WHEA_XPF_MCA_SECTION
{
  /* 0x0000 */ unsigned long VersionNumber;
  /* 0x0004 */ enum _WHEA_CPU_VENDOR CpuVendor;
  /* 0x0008 */ union _LARGE_INTEGER Timestamp;
  /* 0x0010 */ unsigned long ProcessorNumber;
  /* 0x0014 */ union _MCG_STATUS GlobalStatus;
  /* 0x001c */ unsigned __int64 InstructionPointer;
  /* 0x0024 */ unsigned long BankNumber;
  /* 0x0028 */ union _MCI_STATUS Status;
  /* 0x0030 */ unsigned __int64 Address;
  /* 0x0038 */ unsigned __int64 Misc;
  /* 0x0040 */ unsigned long ExtendedRegisterCount;
  /* 0x0044 */ unsigned long ApicId;
  union
  {
    /* 0x0048 */ unsigned __int64 ExtendedRegisters[24];
    /* 0x0048 */ struct _WHEA_AMD_EXTENDED_REGISTERS AMDExtendedRegisters;
  }; /* size: 0x00c0 */
  /* 0x0108 */ union _MCG_CAP GlobalCapability;
  /* 0x0110 */ struct _XPF_RECOVERY_INFO RecoveryInfo;
  /* 0x0124 */ unsigned long ExBankCount;
  /* 0x0128 */ unsigned long BankNumberEx[32];
  /* 0x01a8 */ union _MCI_STATUS StatusEx[32];
  /* 0x02a8 */ unsigned __int64 AddressEx[32];
  /* 0x03a8 */ unsigned __int64 MiscEx[32];
} WHEA_XPF_MCA_SECTION, *PWHEA_XPF_MCA_SECTION; /* size: 0x04a8 */

typedef struct _HEAP_PSEUDO_TAG_ENTRY
{
  /* 0x0000 */ unsigned long Allocs;
  /* 0x0004 */ unsigned long Frees;
  /* 0x0008 */ unsigned __int64 Size;
} HEAP_PSEUDO_TAG_ENTRY, *PHEAP_PSEUDO_TAG_ENTRY; /* size: 0x0010 */

typedef struct _MI_PAGE_CHAIN_HEAD
{
  /* 0x0000 */ struct _MMPFN* Head;
  /* 0x0008 */ struct _MMPFN* Tail;
  /* 0x0010 */ unsigned __int64 NumberOfEntries;
} MI_PAGE_CHAIN_HEAD, *PMI_PAGE_CHAIN_HEAD; /* size: 0x0018 */

typedef union _POWER_STATE
{
  union
  {
    /* 0x0000 */ enum _SYSTEM_POWER_STATE SystemState;
    /* 0x0000 */ enum _DEVICE_POWER_STATE DeviceState;
  }; /* size: 0x0004 */
} POWER_STATE, *PPOWER_STATE; /* size: 0x0004 */

typedef struct _POP_IRP_DATA
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0018 */ struct _DEVICE_OBJECT* Pdo;
  /* 0x0020 */ struct _DEVICE_OBJECT* TargetDevice;
  /* 0x0028 */ struct _DEVICE_OBJECT* CurrentDevice;
  /* 0x0030 */ unsigned __int64 WatchdogStart;
  /* 0x0038 */ struct _KTIMER WatchdogTimer;
  /* 0x0078 */ struct _KDPC WatchdogDpc;
  /* 0x00b8 */ unsigned char MinorFunction;
  /* 0x00b9 */ char Padding_228[3];
  /* 0x00bc */ enum _POWER_STATE_TYPE PowerStateType;
  /* 0x00c0 */ union _POWER_STATE PowerState;
  /* 0x00c4 */ long Padding_229;
  /* 0x00c8 */ struct _POP_FX_DEVICE* FxDevice;
  /* 0x00d0 */ unsigned char SystemTransition;
  /* 0x00d1 */ unsigned char NotifyPEP;
  /* 0x00d2 */ char Padding_230[2];
  /* 0x00d4 */ long IrpSequenceID;
  union
  {
    struct
    {
      /* 0x00d8 */ void* CallerCompletion /* function */;
      /* 0x00e0 */ void* CallerContext;
      /* 0x00e8 */ struct _DEVICE_OBJECT* CallerDevice;
      /* 0x00f0 */ unsigned char SystemWake;
      /* 0x0019 */ char Padding_231[7];
      /* 0x00f8 */ struct _WORK_QUEUE_ITEM PassiveCompletionWorkItem;
    } /* size: 0x0040 */ Device;
    struct
    {
      /* 0x00d8 */ struct _PO_DEVICE_NOTIFY* NotifyDevice;
      /* 0x00e0 */ unsigned char FxDeviceActivated;
      /* 0x00e1 */ char __PADDING__[7];
    } /* size: 0x0010 */ System;
  }; /* size: 0x0040 */
  /* 0x0118 */ enum _POP_PEP_NOTIFY_DEVICE_DSTATE_REASON DStateReason;
  /* 0x011c */ long Padding_232;
  /* 0x0120 */ unsigned __int64 WatchdogLock;
  /* 0x0128 */ enum _POP_IRP_WATCHDOG_STATE WatchdogState;
  /* 0x012c */ long Padding_233;
  /* 0x0130 */ unsigned __int64 BlackboxWatchdogStartTime;
} POP_IRP_DATA, *PPOP_IRP_DATA; /* size: 0x0138 */

typedef struct _MI_REBUILD_LARGE_PAGE_TIMER
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0020 */ unsigned char SecondsLeft;
  /* 0x0021 */ unsigned char RebuildActive;
  /* 0x0022 */ unsigned char NextPassDelta;
  /* 0x0023 */ unsigned char LargeSubPagesActive;
  /* 0x0024 */ long __PADDING__[1];
} MI_REBUILD_LARGE_PAGE_TIMER, *PMI_REBUILD_LARGE_PAGE_TIMER; /* size: 0x0028 */

typedef struct _POP_FX_PROVIDER
{
  /* 0x0000 */ unsigned long Index;
  /* 0x0004 */ unsigned char Activating;
  /* 0x0005 */ char __PADDING__[3];
} POP_FX_PROVIDER, *PPOP_FX_PROVIDER; /* size: 0x0008 */

typedef struct _MI_RESUME_WORKITEM
{
  /* 0x0000 */ struct _KEVENT ResumeCompleteEvent;
  /* 0x0018 */ struct _WORK_QUEUE_ITEM WorkItem;
} MI_RESUME_WORKITEM, *PMI_RESUME_WORKITEM; /* size: 0x0038 */

typedef struct _MI_SHUTDOWN_STATE
{
  /* 0x0000 */ unsigned char CrashDumpInitialized;
  /* 0x0001 */ unsigned char ConnectedStandbyActive;
  /* 0x0002 */ unsigned char ZeroPageFileAtShutdown;
  /* 0x0003 */ unsigned char CacheConflictsAllowed;
  /* 0x0004 */ unsigned long SystemShutdown;
  /* 0x0008 */ long ShutdownFlushInProgress;
  /* 0x000c */ unsigned long MirroringActive;
  /* 0x0010 */ struct _MI_RESUME_WORKITEM ResumeItem;
  /* 0x0048 */ struct _ETHREAD* MirrorHoldsPfn;
  /* 0x0050 */ struct _RTL_BITMAP_EX MirrorBitMaps[2];
  /* 0x0070 */ enum _MI_MIRROR_BITMAP_STATE MirrorBitMapState;
  /* 0x0074 */ long Padding_234;
  /* 0x0078 */ struct _MMPTE* CrashDumpPte;
} MI_SHUTDOWN_STATE, *PMI_SHUTDOWN_STATE; /* size: 0x0080 */

typedef struct _SEP_LOWBOX_NUMBER_MAPPING
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0008 */ struct _RTL_BITMAP Bitmap;
  /* 0x0018 */ struct _RTL_DYNAMIC_HASH_TABLE* HashTable;
  /* 0x0020 */ unsigned char Active;
  /* 0x0021 */ char __PADDING__[7];
} SEP_LOWBOX_NUMBER_MAPPING, *PSEP_LOWBOX_NUMBER_MAPPING; /* size: 0x0028 */

typedef struct _SESSION_LOWBOX_MAP
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned long SessionId;
  /* 0x0014 */ long Padding_235;
  /* 0x0018 */ struct _SEP_LOWBOX_NUMBER_MAPPING LowboxMap;
} SESSION_LOWBOX_MAP, *PSESSION_LOWBOX_MAP; /* size: 0x0040 */

typedef struct _HEAP_LIST_LOOKUP
{
  /* 0x0000 */ struct _HEAP_LIST_LOOKUP* ExtendedLookup;
  /* 0x0008 */ unsigned long ArraySize;
  /* 0x000c */ unsigned long ExtraItem;
  /* 0x0010 */ unsigned long ItemCount;
  /* 0x0014 */ unsigned long OutOfRangeItems;
  /* 0x0018 */ unsigned long BaseIndex;
  /* 0x001c */ long Padding_236;
  /* 0x0020 */ struct _LIST_ENTRY* ListHead;
  /* 0x0028 */ unsigned long* ListsInUseUlong;
  /* 0x0030 */ struct _LIST_ENTRY** ListHints;
} HEAP_LIST_LOOKUP, *PHEAP_LIST_LOOKUP; /* size: 0x0038 */

typedef struct _LOOKASIDE_LIST_EX
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE_POOL L;
} LOOKASIDE_LIST_EX, *PLOOKASIDE_LIST_EX; /* size: 0x0060 */

typedef struct _STATIC_NUMA_CONFIG
{
  /* 0x0000 */ unsigned long* ProcessorLocalId;
  /* 0x0008 */ unsigned long* ProcessorUid;
  /* 0x0010 */ unsigned long* ProcessorProximity;
  /* 0x0018 */ unsigned long* ProximityId;
  /* 0x0020 */ unsigned long* OrigProximityId;
  /* 0x0028 */ unsigned long* NodeCapacity;
  /* 0x0030 */ unsigned short* NodeDistance;
  /* 0x0038 */ unsigned long NodeCount;
  /* 0x003c */ unsigned long ProcessorCount;
  /* 0x0040 */ unsigned long AllocatedNodeCount;
  /* 0x0044 */ unsigned long AllocatedProcCount;
} STATIC_NUMA_CONFIG, *PSTATIC_NUMA_CONFIG; /* size: 0x0048 */

typedef struct _PPM_PERF_SNAPSHOT
{
  /* 0x0000 */ unsigned long Initiator;
  /* 0x0004 */ unsigned char LogType;
  /* 0x0005 */ unsigned char Reset;
  /* 0x0006 */ unsigned char Remote;
  /* 0x0007 */ char Padding_237;
  /* 0x0008 */ unsigned __int64 InterruptTime;
  /* 0x0010 */ unsigned __int64 RawUnscaledTime;
  /* 0x0018 */ unsigned __int64 TotalUnscaleTime;
  /* 0x0020 */ unsigned long CachedScalingFactor[2];
  /* 0x0028 */ unsigned __int64 RawReferenceCount[2];
  /* 0x0038 */ unsigned __int64 RawActualCount[2];
  /* 0x0048 */ unsigned __int64 RawScaledTime[2];
  /* 0x0058 */ unsigned __int64 TotalScaleTime[2];
  /* 0x0068 */ unsigned __int64 HvCurrentTime;
  /* 0x0070 */ unsigned __int64 IdleAccumulation;
  /* 0x0078 */ unsigned long Value[2];
} PPM_PERF_SNAPSHOT, *PPPM_PERF_SNAPSHOT; /* size: 0x0080 */

typedef struct _PROC_PERF_CONSTRAINT
{
  /* 0x0000 */ struct _PROC_PERF_CHECK_CONTEXT* CheckContext;
  /* 0x0008 */ unsigned __int64 PerfContext;
  /* 0x0010 */ enum _PROCESSOR_PRESENCE Presence;
  /* 0x0014 */ unsigned long ProcessorId;
  /* 0x0018 */ unsigned long PlatformCap;
  /* 0x001c */ unsigned long ThermalCap;
  /* 0x0020 */ unsigned long LimitReasons;
  /* 0x0024 */ long Padding_238;
  /* 0x0028 */ unsigned __int64 PlatformCapStartTime;
  /* 0x0030 */ unsigned long ProcCap;
  /* 0x0034 */ unsigned long ProcFloor;
  /* 0x0038 */ unsigned long TargetPercent;
  /* 0x003c */ unsigned char EngageResponsivenessOverrides;
  /* 0x003d */ unsigned char ResponsivenessChangeCount;
  /* 0x003e */ char Padding_239[2];
  /* 0x0040 */ struct _PERF_CONTROL_STATE_SELECTION Selection;
  /* 0x0078 */ unsigned long DomainSelectionGeneration;
  /* 0x007c */ unsigned long PreviousFrequency;
  /* 0x0080 */ unsigned long PreviousPercent;
  /* 0x0084 */ unsigned long LatestFrequencyPercent;
  /* 0x0088 */ unsigned long LatestPerformancePercent;
  /* 0x008c */ unsigned char Force;
  /* 0x008d */ unsigned char UseQosUpdateLock;
  /* 0x008e */ char Padding_240[2];
  /* 0x0090 */ unsigned __int64 QosUpdateLock;
  /* 0x0098 */ unsigned long CurrentLogEntry;
  /* 0x009c */ long Padding_241;
  /* 0x00a0 */ struct _PPM_PERF_SNAPSHOT SnapshotLog[8];
  /* 0x04a0 */ unsigned long IncreasePerfCheckCount;
  /* 0x04a4 */ unsigned long DecreasePerfCheckCount;
} PROC_PERF_CONSTRAINT, *PPROC_PERF_CONSTRAINT; /* size: 0x04a8 */

typedef struct _POP_FX_WORK_POOL_ITEM
{
  /* 0x0000 */ struct _POP_FX_WORK_POOL* WorkPool;
  /* 0x0008 */ struct _WORK_QUEUE_ITEM WorkItem;
} POP_FX_WORK_POOL_ITEM, *PPOP_FX_WORK_POOL_ITEM; /* size: 0x0028 */

typedef struct _POP_FX_WORK_POOL
{
  /* 0x0000 */ struct _POP_FX_PLUGIN* Plugin;
  /* 0x0008 */ unsigned __int64 EmergencyWorkQueueLock;
  /* 0x0010 */ struct _LIST_ENTRY EmergencyWorkQueue;
  /* 0x0020 */ struct _KSEMAPHORE WorkPoolQueues[2];
  /* 0x0060 */ volatile long WorkItemStatus;
  /* 0x0064 */ long Padding_242;
  /* 0x0068 */ struct _POP_FX_WORK_POOL_ITEM WorkItems[4];
  /* 0x0108 */ struct _KTHREAD* PoolWorkerThreads[5];
} POP_FX_WORK_POOL, *PPOP_FX_WORK_POOL; /* size: 0x0130 */

typedef struct _POP_FX_PLUGIN
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ unsigned long Version;
  /* 0x0014 */ long Padding_243;
  /* 0x0018 */ unsigned __int64 Flags;
  /* 0x0020 */ struct _KQUEUE WorkQueue;
  /* 0x0060 */ void* AcceptDeviceNotification /* function */;
  /* 0x0068 */ void* AcceptProcessorNotification /* function */;
  /* 0x0070 */ void* AcceptAcpiNotification /* function */;
  /* 0x0078 */ struct _POP_FX_WORK_POOL PluginWorkPool;
} POP_FX_PLUGIN, *PPOP_FX_PLUGIN; /* size: 0x01a8 */

typedef struct _POP_SHUTDOWN_BUG_CHECK
{
  /* 0x0000 */ struct _ETHREAD* InitiatingThread;
  /* 0x0008 */ struct _EPROCESS* InitiatingProcess;
  /* 0x0010 */ void* ThreadId;
  /* 0x0018 */ void* ProcessId;
  /* 0x0020 */ unsigned long Code;
  /* 0x0024 */ long Padding_244;
  /* 0x0028 */ unsigned __int64 Parameter1;
  /* 0x0030 */ unsigned __int64 Parameter2;
  /* 0x0038 */ unsigned __int64 Parameter3;
  /* 0x0040 */ unsigned __int64 Parameter4;
} POP_SHUTDOWN_BUG_CHECK, *PPOP_SHUTDOWN_BUG_CHECK; /* size: 0x0048 */

typedef struct _CC_FLUSH_PACKET
{
  /* 0x0000 */ struct _CC_PARTITION* Partition;
  /* 0x0008 */ struct _PRIVATE_VOLUME_CACHEMAP* PrivateVolumeCacheMap;
  /* 0x0010 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
  /* 0x0018 */ struct _SECTION_OBJECT_POINTERS* SectionObjectPointer;
  /* 0x0020 */ union _LARGE_INTEGER TargetOffset;
  /* 0x0028 */ union _LARGE_INTEGER NextFileOffset;
  /* 0x0030 */ unsigned long NextLength;
  /* 0x0034 */ unsigned long BytesWritten;
  /* 0x0038 */ unsigned long MmFlushFlags;
  /* 0x003c */ unsigned long HotSpot;
  /* 0x0040 */ unsigned long VerifyRequired;
  /* 0x0044 */ long Padding_245;
  /* 0x0048 */ struct _KEVENT* FlushEvent;
  /* 0x0050 */ union _LARGE_INTEGER FlushLargestLsn;
  /* 0x0058 */ union _LARGE_INTEGER* LargestLsn;
  /* 0x0060 */ union _LARGE_INTEGER* CallersFileOffset;
  /* 0x0068 */ unsigned long CallersLength;
  /* 0x006c */ unsigned char MarkWritethrough;
  /* 0x006d */ char Padding_246[3];
  /* 0x0070 */ struct _IO_STATUS_BLOCK* CallersIoStatus;
  /* 0x0078 */ struct _BCB* FirstBcb;
  /* 0x0080 */ long FirstFailureStatus;
  /* 0x0084 */ unsigned char IsLazyWriter;
  /* 0x0085 */ unsigned char FastLazyWrite;
  /* 0x0086 */ unsigned char ForceFullFlush;
  /* 0x0087 */ unsigned char PerformedFlushForMemMapped;
  /* 0x0088 */ unsigned char TeardownFlagBeforeFlush;
  /* 0x0089 */ unsigned char ShouldRetryTeardown;
  /* 0x008a */ unsigned char FlushForImageSection;
  /* 0x008b */ unsigned char ForceSynchronousLazyWrite;
  /* 0x008c */ unsigned long AcquireForLazyWriteOutFlags;
  /* 0x0090 */ unsigned char FlushDontTrustHints;
  /* 0x0091 */ char Padding_247[7];
  /* 0x0098 */ union _LARGE_INTEGER StartTick;
  /* 0x00a0 */ union _LARGE_INTEGER EndTick;
  /* 0x00a8 */ struct _FSRTL_COMMON_FCB_HEADER* FsContext;
  /* 0x00b0 */ struct _WORK_QUEUE_ENTRY* WorkEntry;
  /* 0x00b8 */ struct _LIST_ENTRY* DeferredWritesList;
  /* 0x00c0 */ unsigned char* CoalescingState;
  /* 0x00c8 */ unsigned char DoSinglePassFlush;
  /* 0x00c9 */ unsigned char RecordedSinglePassStartOffset;
  /* 0x00ca */ char Padding_248[6];
  /* 0x00d0 */ union _LARGE_INTEGER SinglePassStartOffset;
  /* 0x00d8 */ unsigned __int64 DirtyPagesAtStart;
  /* 0x00e0 */ unsigned __int64 TotalBytesWritten;
  /* 0x00e8 */ union _LARGE_INTEGER LwFlushStart;
  /* 0x00f0 */ union _LARGE_INTEGER LwFlushEnd;
  /* 0x00f8 */ unsigned long TotalPagesFlushed;
  /* 0x00fc */ unsigned long PagesToWrite;
  /* 0x0100 */ unsigned long RequeueToHeadCount;
  /* 0x0104 */ long Padding_249;
  /* 0x0108 */ struct _WORK_QUEUE_ENTRY* WorkQueueEntry;
} CC_FLUSH_PACKET, *PCC_FLUSH_PACKET; /* size: 0x0110 */

typedef struct _MI_ULTRA_MDL_NODE
{
  /* 0x0000 */ struct _MI_ALIGNED_SLIST UltraMdlMaps[8];
} MI_ULTRA_MDL_NODE, *PMI_ULTRA_MDL_NODE; /* size: 0x0200 */

typedef struct _KI_RESCHEDULE_CONTEXT_ENTRY
{
  /* 0x0000 */ struct _KPRCB* Prcb;
  /* 0x0008 */ struct _KSHARED_READY_QUEUE* SharedReadyQueue;
  /* 0x0010 */ struct _KTHREAD* CompareThread;
  /* 0x0018 */ struct _KTHREAD* NewThread;
  union
  {
    struct /* bitfield */
    {
      /* 0x0020 */ unsigned char Idle : 1; /* bit position: 0 */
      /* 0x0020 */ unsigned char IsolationWidth : 1; /* bit position: 1 */
      /* 0x0020 */ unsigned char CanCheckDeferredPreemption : 1; /* bit position: 2 */
      /* 0x0020 */ unsigned char PartialYield : 1; /* bit position: 3 */
      /* 0x0020 */ unsigned char FullYield : 1; /* bit position: 4 */
      /* 0x0020 */ unsigned char IsolationPlaceholder : 1; /* bit position: 5 */
      /* 0x0020 */ unsigned char SpareCompateThreadStateFlags : 2; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0020 */ unsigned char AllCompareThreadStateFlags;
  }; /* size: 0x0001 */
  union
  {
    struct /* bitfield */
    {
      /* 0x0021 */ unsigned char ReadyTransition : 1; /* bit position: 0 */
      /* 0x0021 */ unsigned char SpareNewThreadStateFlags : 7; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0021 */ unsigned char AllNewThreadStateFlags;
  }; /* size: 0x0001 */
  union
  {
    struct /* bitfield */
    {
      /* 0x0022 */ unsigned char SkipStandbyReschedule : 1; /* bit position: 0 */
      /* 0x0022 */ unsigned char DoNotSetPreemptionBit : 1; /* bit position: 1 */
      /* 0x0022 */ unsigned char SpareCommitFlags : 6; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0022 */ unsigned char AllCommitFlags;
  }; /* size: 0x0001 */
  union
  {
    struct /* bitfield */
    {
      /* 0x0023 */ unsigned char NewThreadReferenced : 1; /* bit position: 0 */
      /* 0x0023 */ unsigned char LogEtw : 1; /* bit position: 1 */
      /* 0x0023 */ unsigned char IssuePriorityKick : 1; /* bit position: 2 */
      /* 0x0023 */ unsigned char DispatchInterruptIfHalted : 1; /* bit position: 3 */
      /* 0x0023 */ unsigned char DispatchInterruptAlways : 1; /* bit position: 4 */
      /* 0x0023 */ unsigned char SpareCompletionFlags : 3; /* bit position: 5 */
    }; /* bitfield */
    /* 0x0023 */ unsigned char AllCompletionFlags;
  }; /* size: 0x0001 */
  /* 0x0024 */ char KickPriority;
  /* 0x0025 */ unsigned char Spare[3];
} KI_RESCHEDULE_CONTEXT_ENTRY, *PKI_RESCHEDULE_CONTEXT_ENTRY; /* size: 0x0028 */

typedef struct _KI_RESCHEDULE_CONTEXT
{
  /* 0x0000 */ unsigned char ProcessorCount;
  /* 0x0001 */ unsigned char ScanStart;
  /* 0x0002 */ char Padding_250[2];
  /* 0x0004 */ enum _KISOLATION_WIDTH MaximumThreadIsolationWidth;
  /* 0x0008 */ enum _KISOLATION_WIDTH IsolationWidth;
  /* 0x000c */ long Padding_251;
  /* 0x0010 */ struct _KI_RESCHEDULE_CONTEXT_ENTRY ProcessorEntries[4];
} KI_RESCHEDULE_CONTEXT, *PKI_RESCHEDULE_CONTEXT; /* size: 0x00b0 */

typedef struct _MI_PARTITION_WORKING_SET
{
  /* 0x0000 */ struct _MMSUPPORT_INSTANCE VmInstance;
  /* 0x00c0 */ struct _MMWSL_INSTANCE VmWorkingSetList;
} MI_PARTITION_WORKING_SET, *PMI_PARTITION_WORKING_SET; /* size: 0x01c0 */

typedef struct _MI_PAGEFILE_TRACES
{
  /* 0x0000 */ long Status;
  /* 0x0004 */ unsigned char PagefileNumber;
  /* 0x0005 */ unsigned char Priority;
  /* 0x0006 */ unsigned char IrpPriority;
  /* 0x0007 */ unsigned char ReservationWrite;
  /* 0x0008 */ unsigned __int64 CurrentTime;
  /* 0x0010 */ unsigned __int64 AvailablePages;
  /* 0x0018 */ unsigned __int64 ModifiedPagesTotal;
  /* 0x0020 */ unsigned __int64 ModifiedPagefilePages;
  /* 0x0028 */ unsigned __int64 ModifiedNoWritePages;
  /* 0x0030 */ unsigned __int64 ModifiedPagefileNoReservationPages;
  /* 0x0038 */ unsigned __int64 ModifiedPageFileNoReservationCompressPages;
  /* 0x0040 */ unsigned __int64 ModifiedPagefileReservationPages;
  struct
  {
    /* 0x0048 */ struct _MDL Mdl;
    /* 0x0078 */ unsigned __int64 Page[1];
  } /* size: 0x0038 */ LocalMdl;
} MI_PAGEFILE_TRACES, *PMI_PAGEFILE_TRACES; /* size: 0x0080 */

typedef struct _MI_VISIBLE_PARTITION
{
  /* 0x0000 */ unsigned __int64 LowestPhysicalPage;
  /* 0x0008 */ unsigned __int64 HighestPhysicalPage;
  /* 0x0010 */ unsigned __int64 NumberOfPhysicalPages;
  /* 0x0018 */ volatile unsigned long NumberOfPagingFiles;
  /* 0x001c */ unsigned char SystemCacheInitialized;
  /* 0x001d */ char Padding_252[3];
  /* 0x0020 */ struct _MMPAGING_FILE* PagingFile[16];
  /* 0x00a0 */ long Padding_253[8];
  /* 0x00c0 */ volatile unsigned __int64 AvailablePages;
  /* 0x00c8 */ long Padding_254[14];
  /* 0x0100 */ volatile unsigned __int64 ResidentAvailablePages;
  /* 0x0108 */ long Padding_255[14];
  /* 0x0140 */ struct _MI_PARTITION_WORKING_SET PartitionWs[1];
  /* 0x0300 */ volatile unsigned __int64 TotalCommittedPages;
  /* 0x0308 */ long Padding_256[14];
  /* 0x0340 */ volatile unsigned __int64 TotalCommittedPagesExposed;
  /* 0x0348 */ long Padding_257[14];
  /* 0x0380 */ struct _MMPFNLIST ModifiedPageListHead;
  /* 0x03d8 */ long Padding_258[10];
  /* 0x0400 */ struct _MMPFNLIST ModifiedNoWritePageListHead;
  /* 0x0458 */ volatile unsigned __int64 TotalCommitLimit;
  /* 0x0460 */ unsigned __int64 TotalPagesForPagingFile;
  /* 0x0468 */ unsigned __int64 VadPhysicalPages;
  /* 0x0470 */ unsigned __int64 ProcessLockedFilePages;
  /* 0x0478 */ volatile unsigned __int64 SharedCommit;
  /* 0x0480 */ volatile unsigned __int64 MdlPagesAllocated;
  /* 0x0488 */ volatile unsigned __int64 ContiguousPagesAllocated;
  /* 0x0490 */ unsigned __int64 SlabAllocatorPages;
  /* 0x0498 */ unsigned __int64 SlabAllocatorPagesUncharged;
  /* 0x04a0 */ unsigned __int64 BootSlabPages;
  /* 0x04a8 */ unsigned __int64 SecureKernelPagesFromNonChargedSlabs;
  /* 0x04b0 */ unsigned long ChargeCommitmentFailures[4];
  /* 0x04c0 */ volatile long PageFileTraceIndex;
  /* 0x04c4 */ long Padding_259;
  /* 0x04c8 */ struct _MI_PAGEFILE_TRACES PageFileTraces[32];
  /* 0x14c8 */ long __PADDING__[14];
} MI_VISIBLE_PARTITION, *PMI_VISIBLE_PARTITION; /* size: 0x1500 */

typedef union _KHETERO_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char Qos : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned char WorkloadClass : 3; /* bit position: 3 */
      /* 0x0000 */ unsigned char RunningType : 1; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AllFields;
  }; /* size: 0x0001 */
} KHETERO_STATE, *PKHETERO_STATE; /* size: 0x0001 */

typedef struct _KSHARED_READY_QUEUE_HETERO_STATISTICS
{
  /* 0x0000 */ unsigned __int64 ExpectedRuntimeByClass[8][2][7];
} KSHARED_READY_QUEUE_HETERO_STATISTICS, *PKSHARED_READY_QUEUE_HETERO_STATISTICS; /* size: 0x0380 */

typedef struct _KSHARED_READY_QUEUE_AFFINITY_STATISTICS
{
  /* 0x0000 */ unsigned __int64 AffinitySummary;
} KSHARED_READY_QUEUE_AFFINITY_STATISTICS, *PKSHARED_READY_QUEUE_AFFINITY_STATISTICS; /* size: 0x0008 */

typedef struct _KSHARED_READY_QUEUE
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ unsigned long ReadySummary;
  /* 0x000c */ unsigned long ReadyThreadCount;
  /* 0x0010 */ unsigned __int64 ReadyQueueExpectedRunTime;
  /* 0x0018 */ unsigned __int64 Spare1[5];
  /* 0x0040 */ struct _LIST_ENTRY ReadyListHead[32];
  /* 0x0240 */ union _KPRIORITY_STATE RunningSummary[64];
  /* 0x0280 */ union _KHETERO_STATE HeteroRunningSummary[64];
  /* 0x02c0 */ unsigned char Span;
  /* 0x02c1 */ unsigned char LowProcIndex;
  /* 0x02c2 */ unsigned char QueueIndex;
  /* 0x02c3 */ unsigned char NormalPriorityQueueIndex;
  /* 0x02c4 */ unsigned char ProcCount;
  /* 0x02c5 */ unsigned char ScanOwner;
  /* 0x02c6 */ unsigned short Group;
  /* 0x02c8 */ unsigned __int64 Affinity;
  /* 0x02d0 */ struct _KSCHEDULER_SUBNODE* SubNode;
  /* 0x02d8 */ unsigned __int64 Spare2[3];
  /* 0x02f0 */ long Padding_260[4];
  /* 0x0300 */ unsigned __int64 SoftParkElectionLock;
  /* 0x0308 */ volatile unsigned __int64 SoftParkElectionGeneration;
  /* 0x0310 */ unsigned long SoftParkElectionThreadCount;
  /* 0x0314 */ unsigned char SoftParkElectionScheduled;
  /* 0x0315 */ unsigned char Spare4[3];
  /* 0x0318 */ unsigned __int64 SoftParkElectionRunTime;
  /* 0x0320 */ struct _KDPC SoftParkElectionDpc;
  /* 0x0360 */ struct _KSHARED_READY_QUEUE_HETERO_STATISTICS SoftParkElectionHeteroStats;
  /* 0x06e0 */ struct _KSHARED_READY_QUEUE_AFFINITY_STATISTICS SoftParkElectionAffinityStats;
  /* 0x06e8 */ volatile unsigned __int64 ForceParkDutyCyclingArmedMask;
  /* 0x06f0 */ long __PADDING__[4];
} KSHARED_READY_QUEUE, *PKSHARED_READY_QUEUE; /* size: 0x0700 */

typedef struct _PO_POWER_PLANE_PROFILE
{
  /* 0x0000 */ unsigned long ExclusivePowerMw;
  /* 0x0004 */ unsigned long PeakPowerMw;
} PO_POWER_PLANE_PROFILE, *PPO_POWER_PLANE_PROFILE; /* size: 0x0008 */

typedef union _AER_BRIDGE_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UncorrectableErrorMaskRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short UncorrectableErrorSeverityRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short CorrectableErrorMaskRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short AdvancedCapsAndControlRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short SecondaryUncorrectableErrorMaskRW : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned short SecondaryUncorrectableErrorSevRW : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned short SecondaryCapsAndControlRW : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned short Reserved : 9; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} AER_BRIDGE_DESCRIPTOR_FLAGS, *PAER_BRIDGE_DESCRIPTOR_FLAGS; /* size: 0x0002 */

typedef struct _WHEA_AER_BRIDGE_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _WHEA_PCI_SLOT_NUMBER Slot;
  /* 0x000c */ unsigned short DeviceControl;
  /* 0x000e */ union _AER_BRIDGE_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ unsigned long UncorrectableErrorMask;
  /* 0x0014 */ unsigned long UncorrectableErrorSeverity;
  /* 0x0018 */ unsigned long CorrectableErrorMask;
  /* 0x001c */ unsigned long AdvancedCapsAndControl;
  /* 0x0020 */ unsigned long SecondaryUncorrectableErrorMask;
  /* 0x0024 */ unsigned long SecondaryUncorrectableErrorSev;
  /* 0x0028 */ unsigned long SecondaryCapsAndControl;
} WHEA_AER_BRIDGE_DESCRIPTOR, *PWHEA_AER_BRIDGE_DESCRIPTOR; /* size: 0x002c */

typedef struct _IOAPIC
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned char IOAPICID;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long IOAPICAddress;
  /* 0x0008 */ unsigned long SystemVectorBase;
} IOAPIC, *PIOAPIC; /* size: 0x000c */

typedef struct _HALP_EMERGENCY_LA_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ enum _HALP_EMERGENCY_LA_QUEUE_TYPE EntryType;
  /* 0x0014 */ long __PADDING__[1];
} HALP_EMERGENCY_LA_QUEUE_ENTRY, *PHALP_EMERGENCY_LA_QUEUE_ENTRY; /* size: 0x0018 */

typedef struct _LUID_AND_ATTRIBUTES
{
  /* 0x0000 */ struct _LUID Luid;
  /* 0x0008 */ unsigned long Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES; /* size: 0x000c */

typedef struct _DEVICE_RELATIONS
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_261;
  /* 0x0008 */ struct _DEVICE_OBJECT* Objects[1];
} DEVICE_RELATIONS, *PDEVICE_RELATIONS; /* size: 0x0010 */

typedef struct _KHETERO_HWFEEDBACK_CLASS
{
  /* 0x0000 */ unsigned char PerformanceClass;
  /* 0x0001 */ unsigned char EfficiencyClass;
  /* 0x0002 */ unsigned char PerformanceClassRawValue;
  /* 0x0003 */ unsigned char EfficiencyClassRawValue;
} KHETERO_HWFEEDBACK_CLASS, *PKHETERO_HWFEEDBACK_CLASS; /* size: 0x0004 */

typedef struct _KCPU_PARTITION
{
  /* 0x0000 */ struct _KAFFINITY_EX* Affinity;
  /* 0x0008 */ unsigned __int64 Lock;
  /* 0x0010 */ struct _LIST_ENTRY ProcessList;
  /* 0x0020 */ struct _PS_CPU_PARTITION* CpuPartitionObject;
  /* 0x0028 */ struct _KI_AVAILABLE_CPUS_WORK_ITEM AvailableCpusNotificationWorkItem;
  /* 0x0068 */ unsigned long Flags;
  /* 0x006c */ long __PADDING__[1];
} KCPU_PARTITION, *PKCPU_PARTITION; /* size: 0x0070 */

typedef struct _HEAP_VAMGR_RANGE
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE RbNode;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY Next;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned char Allocated : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned char Internal : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned char Standalone : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned char Spare0 : 5; /* bit position: 3 */
      }; /* bitfield */
      /* 0x0001 */ unsigned char AllocatorIndex;
      /* 0x0002 */ unsigned short CommitBitmap;
      /* 0x0004 */ long Padding_262;
      /* 0x0008 */ unsigned __int64 OwnerCtx[2];
    }; /* size: 0x0014 */
  }; /* size: 0x0018 */
  union
  {
    /* 0x0018 */ unsigned __int64 SizeInChunks;
    struct
    {
      /* 0x0018 */ unsigned short ChunkCount;
      /* 0x001a */ unsigned short PrevChunkCount;
    }; /* size: 0x0004 */
    /* 0x0018 */ unsigned __int64 Signature;
  }; /* size: 0x0008 */
} HEAP_VAMGR_RANGE, *PHEAP_VAMGR_RANGE; /* size: 0x0020 */

typedef struct _PS_CPU_PARTITION
{
  /* 0x0000 */ struct _KCPU_PARTITION* Partition;
  /* 0x0008 */ struct _PS_CPU_PARTITION* Parent;
  /* 0x0010 */ struct _LIST_ENTRY PartitionListEntry;
} PS_CPU_PARTITION, *PPS_CPU_PARTITION; /* size: 0x0020 */

typedef struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE LengthTreeNode;
    /* 0x0000 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0018 */
  /* 0x0018 */ struct _RTL_BALANCED_NODE LocationTreeNode;
  /* 0x0030 */ unsigned long StartingIndex;
  /* 0x0034 */ unsigned long Length;
} MI_PAGEFILE_BITMAPS_CACHE_ENTRY, *PMI_PAGEFILE_BITMAPS_CACHE_ENTRY; /* size: 0x0038 */

typedef struct _PLUGPLAY_EVENT_BLOCK
{
  /* 0x0000 */ struct _GUID EventGuid;
  /* 0x0010 */ enum _PLUGPLAY_EVENT_CATEGORY EventCategory;
  /* 0x0014 */ long Padding_263;
  /* 0x0018 */ unsigned long* Result;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long TotalSize;
  /* 0x0028 */ void* DeviceObject;
  union
  {
    union
    {
      struct
      {
        /* 0x0030 */ struct _GUID ClassGuid;
        /* 0x0040 */ wchar_t SymbolicLinkName[1];
        /* 0x0042 */ char __PADDING__[2];
      } /* size: 0x0014 */ DeviceClass;
      struct
      {
        /* 0x0030 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ TargetDevice;
      struct
      {
        /* 0x0030 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ InstallDevice;
      struct
      {
        /* 0x0030 */ void* NotificationStructure;
        /* 0x0038 */ wchar_t DeviceId[1];
        /* 0x003a */ char __PADDING__[6];
      } /* size: 0x0010 */ CustomNotification;
      struct
      {
        /* 0x0030 */ void* Notification;
      } /* size: 0x0008 */ ProfileNotification;
      struct
      {
        /* 0x0030 */ unsigned long NotificationCode;
        /* 0x0034 */ unsigned long NotificationData;
      } /* size: 0x0008 */ PowerNotification;
      struct
      {
        /* 0x0030 */ enum _PNP_VETO_TYPE VetoType;
        /* 0x0034 */ wchar_t DeviceIdVetoNameBuffer[1];
        /* 0x0036 */ char __PADDING__[2];
      } /* size: 0x0008 */ VetoNotification;
      struct
      {
        /* 0x0030 */ struct _GUID BlockedDriverGuid;
      } /* size: 0x0010 */ BlockedDriverNotification;
      struct
      {
        /* 0x0030 */ wchar_t ParentId[1];
      } /* size: 0x0002 */ InvalidIDNotification;
      struct
      {
        /* 0x0030 */ struct _GUID PowerSettingGuid;
        /* 0x0040 */ unsigned long Flags;
        /* 0x0044 */ unsigned long SessionId;
        /* 0x0048 */ unsigned long DataLength;
        /* 0x004c */ unsigned char Data[1];
        /* 0x004d */ char __PADDING__[3];
      } /* size: 0x0020 */ PowerSettingNotification;
      struct
      {
        /* 0x0030 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ PropertyChangeNotification;
      struct
      {
        /* 0x0030 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ DeviceInstanceNotification;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ u;
} PLUGPLAY_EVENT_BLOCK, *PPLUGPLAY_EVENT_BLOCK; /* size: 0x0050 */

typedef struct _PNP_DEVICE_EVENT_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned long Argument;
  /* 0x0014 */ long ArgumentStatus;
  /* 0x0018 */ struct _KEVENT* CallerEvent;
  /* 0x0020 */ void* Callback /* function */;
  /* 0x0028 */ void* Context;
  /* 0x0030 */ enum _PNP_VETO_TYPE* VetoType;
  /* 0x0038 */ struct _UNICODE_STRING* VetoName;
  /* 0x0040 */ unsigned long RefCount;
  /* 0x0044 */ unsigned long Lock;
  /* 0x0048 */ unsigned char Cancel;
  /* 0x0049 */ char Padding_264[7];
  /* 0x0050 */ struct _PNP_DEVICE_EVENT_ENTRY* Parent;
  /* 0x0058 */ struct _GUID ActivityId;
  /* 0x0068 */ struct _PNP_WATCHDOG* Watchdog;
  /* 0x0070 */ void* PdcActivatorHandle;
  /* 0x0078 */ struct _PLUGPLAY_EVENT_BLOCK Data;
} PNP_DEVICE_EVENT_ENTRY, *PPNP_DEVICE_EVENT_ENTRY; /* size: 0x00c8 */

typedef struct _RTL_HASH_TABLE
{
  /* 0x0000 */ unsigned long EntryCount;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long MaskBitCount : 5; /* bit position: 0 */
    /* 0x0004 */ unsigned long BucketCount : 27; /* bit position: 5 */
  }; /* bitfield */
  /* 0x0008 */ struct _SINGLE_LIST_ENTRY* Buckets;
} RTL_HASH_TABLE, *PRTL_HASH_TABLE; /* size: 0x0010 */

struct RTL_HP_ENV_HANDLE
{
  /* 0x0000 */ void* h[2];
}; /* size: 0x0010 */

typedef struct _RTLP_HEAP_COMMIT_LIMIT_DATA
{
  /* 0x0000 */ unsigned __int64 CommitLimitBytes;
  /* 0x0008 */ unsigned __int64 CommitLimitFailureCode;
} RTLP_HEAP_COMMIT_LIMIT_DATA, *PRTLP_HEAP_COMMIT_LIMIT_DATA; /* size: 0x0010 */

typedef union _RTL_RUN_ONCE
{
  union
  {
    /* 0x0000 */ void* Ptr;
    /* 0x0000 */ unsigned __int64 Value;
    /* 0x0000 */ unsigned __int64 State : 2; /* bit position: 0 */
  }; /* size: 0x0008 */
} RTL_RUN_ONCE, *PRTL_RUN_ONCE; /* size: 0x0008 */

typedef struct _RTL_HP_SEG_ALLOC_POLICY
{
  /* 0x0000 */ unsigned __int64 MinLargePages;
  /* 0x0008 */ unsigned __int64 MaxLargePages;
  /* 0x0010 */ unsigned char MinUtilization;
  /* 0x0011 */ char __PADDING__[7];
} RTL_HP_SEG_ALLOC_POLICY, *PRTL_HP_SEG_ALLOC_POLICY; /* size: 0x0018 */

typedef struct _HEAP_RUNTIME_MEMORY_STATS
{
  /* 0x0000 */ volatile unsigned __int64 TotalReservedPages;
  /* 0x0008 */ volatile unsigned __int64 TotalCommittedPages;
  /* 0x0010 */ unsigned __int64 FreeCommittedPages;
  /* 0x0018 */ unsigned __int64 LfhFreeCommittedPages;
  /* 0x0020 */ unsigned __int64 VsFreeCommittedPages;
  /* 0x0028 */ struct _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS LargePageStats[2];
  /* 0x0048 */ struct _RTL_HP_SEG_ALLOC_POLICY LargePageUtilizationPolicy;
} HEAP_RUNTIME_MEMORY_STATS, *PHEAP_RUNTIME_MEMORY_STATS; /* size: 0x0060 */

typedef struct _RTL_HP_HEAP_VA_CALLBACKS_ENCODED
{
  /* 0x0000 */ unsigned __int64 CallbackContext;
  /* 0x0008 */ unsigned __int64 AllocateVirtualMemoryEncoded;
  /* 0x0010 */ unsigned __int64 FreeVirtualMemoryEncoded;
  /* 0x0018 */ unsigned __int64 QueryVirtualMemoryEncoded;
} RTL_HP_HEAP_VA_CALLBACKS_ENCODED, *PRTL_HP_HEAP_VA_CALLBACKS_ENCODED; /* size: 0x0020 */

typedef struct _HEAP_SEG_CONTEXT
{
  /* 0x0000 */ unsigned __int64 SegmentMask;
  /* 0x0008 */ unsigned char UnitShift;
  /* 0x0009 */ unsigned char PagesPerUnitShift;
  /* 0x000a */ unsigned char FirstDescriptorIndex;
  /* 0x000b */ unsigned char CachedCommitSoftShift;
  /* 0x000c */ unsigned char CachedCommitHighShift;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x000d */ unsigned char LargePagePolicy : 3; /* bit position: 0 */
        /* 0x000d */ unsigned char FullDecommit : 1; /* bit position: 3 */
        /* 0x000d */ unsigned char ReleaseEmptySegments : 1; /* bit position: 4 */
      }; /* bitfield */
      /* 0x000d */ unsigned char AllFlags;
    }; /* size: 0x0001 */
  } /* size: 0x0001 */ Flags;
  /* 0x000e */ char Padding_265[2];
  /* 0x0010 */ unsigned long MaxAllocationSize;
  /* 0x0014 */ short OlpStatsOffset;
  /* 0x0016 */ short MemStatsOffset;
  /* 0x0018 */ void* LfhContext;
  /* 0x0020 */ void* VsContext;
  /* 0x0028 */ struct RTL_HP_ENV_HANDLE EnvHandle;
  /* 0x0038 */ void* Heap;
  /* 0x0040 */ unsigned __int64 SegmentLock;
  /* 0x0048 */ struct _LIST_ENTRY SegmentListHead;
  /* 0x0058 */ unsigned __int64 SegmentCount;
  /* 0x0060 */ struct _RTL_RB_TREE FreePageRanges;
  /* 0x0070 */ unsigned __int64 FreeSegmentListLock;
  /* 0x0078 */ struct _SINGLE_LIST_ENTRY FreeSegmentList[2];
  /* 0x0088 */ long __PADDING__[14];
} HEAP_SEG_CONTEXT, *PHEAP_SEG_CONTEXT; /* size: 0x00c0 */

typedef struct _HEAP_VS_DELAY_FREE_CONTEXT
{
  /* 0x0000 */ union _SLIST_HEADER ListHead;
} HEAP_VS_DELAY_FREE_CONTEXT, *PHEAP_VS_DELAY_FREE_CONTEXT; /* size: 0x0010 */

typedef struct _HEAP_SUBALLOCATOR_CALLBACKS
{
  /* 0x0000 */ unsigned __int64 Allocate;
  /* 0x0008 */ unsigned __int64 Free;
  /* 0x0010 */ unsigned __int64 Commit;
  /* 0x0018 */ unsigned __int64 Decommit;
  /* 0x0020 */ unsigned __int64 ExtendContext;
  /* 0x0028 */ unsigned __int64 TlsCleanup;
} HEAP_SUBALLOCATOR_CALLBACKS, *PHEAP_SUBALLOCATOR_CALLBACKS; /* size: 0x0030 */

typedef struct _RTL_HP_VS_CONFIG
{
  struct
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PageAlignLargeAllocs : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long EnableDelayFree : 1; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0004 */ Flags;
} RTL_HP_VS_CONFIG, *PRTL_HP_VS_CONFIG; /* size: 0x0004 */

typedef struct _HEAP_VS_CONTEXT
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ enum _RTLP_HP_LOCK_TYPE LockType;
  /* 0x000c */ short MemStatsOffset;
  /* 0x000e */ char Padding_266[2];
  /* 0x0010 */ struct _RTL_RB_TREE FreeChunkTree;
  /* 0x0020 */ struct _LIST_ENTRY SubsegmentList;
  /* 0x0030 */ unsigned __int64 TotalCommittedUnits;
  /* 0x0038 */ unsigned __int64 FreeCommittedUnits;
  /* 0x0040 */ struct _HEAP_VS_DELAY_FREE_CONTEXT DelayFreeContext;
  /* 0x0050 */ long Padding_267[12];
  /* 0x0080 */ void* BackendCtx;
  /* 0x0088 */ struct _HEAP_SUBALLOCATOR_CALLBACKS Callbacks;
  /* 0x00b8 */ struct _RTL_HP_VS_CONFIG Config;
  /* 0x00bc */ unsigned long EliminatePointers : 1; /* bit position: 0 */
} HEAP_VS_CONTEXT, *PHEAP_VS_CONTEXT; /* size: 0x00c0 */

typedef struct _HEAP_LFH_CONFIG
{
  /* 0x0000 */ union _RTL_HP_LFH_CONFIG Global;
  /* 0x0004 */ unsigned long EnablePrivateSlots : 1; /* bit position: 0 */
} HEAP_LFH_CONFIG, *PHEAP_LFH_CONFIG; /* size: 0x0008 */

typedef struct _HEAP_LFH_HEAT_MAP
{
  /* 0x0000 */ unsigned short Counts[126];
  /* 0x00fc */ unsigned long LastDecayPeriod;
} HEAP_LFH_HEAT_MAP, *PHEAP_LFH_HEAT_MAP; /* size: 0x0100 */

typedef struct _HEAP_LFH_SLOT_MAP
{
  /* 0x0000 */ unsigned short Map[128];
} HEAP_LFH_SLOT_MAP, *PHEAP_LFH_SLOT_MAP; /* size: 0x0100 */

typedef struct _HEAP_LFH_CONTEXT
{
  /* 0x0000 */ void* BackendCtx;
  /* 0x0008 */ struct _HEAP_SUBALLOCATOR_CALLBACKS Callbacks;
  /* 0x0038 */ const unsigned char* AffinityModArray;
  /* 0x0040 */ unsigned char MaxAffinity;
  /* 0x0041 */ unsigned char LockType;
  /* 0x0042 */ short MemStatsOffset;
  /* 0x0044 */ struct _HEAP_LFH_CONFIG Config;
  /* 0x004c */ unsigned long TlsSlotIndex;
  /* 0x0050 */ unsigned __int64 EncodeKey;
  /* 0x0058 */ long Padding_268[10];
  /* 0x0080 */ unsigned __int64 ExtensionLock;
  /* 0x0088 */ struct _SINGLE_LIST_ENTRY MetadataList[4];
  /* 0x00a8 */ long Padding_269[6];
  /* 0x00c0 */ struct _HEAP_LFH_HEAT_MAP HeatMap;
  /* 0x01c0 */ struct _HEAP_LFH_BUCKET* Buckets[128];
  /* 0x05c0 */ struct _HEAP_LFH_SLOT_MAP SlotMaps[1];
} HEAP_LFH_CONTEXT, *PHEAP_LFH_CONTEXT; /* size: 0x06c0 */

typedef struct _SEGMENT_HEAP
{
  /* 0x0000 */ struct RTL_HP_ENV_HANDLE EnvHandle;
  /* 0x0010 */ unsigned long Signature;
  /* 0x0014 */ unsigned long GlobalFlags;
  /* 0x0018 */ unsigned long Interceptor;
  /* 0x001c */ unsigned short ProcessHeapListIndex;
  union
  {
    struct /* bitfield */
    {
      /* 0x001e */ unsigned short AllocatedFromMetadata : 1; /* bit position: 0 */
      /* 0x001e */ unsigned short ReadOnly : 1; /* bit position: 1 */
    }; /* bitfield */
    /* 0x001e */ unsigned short InternalFlags;
  }; /* size: 0x0002 */
  /* 0x0020 */ struct _RTLP_HEAP_COMMIT_LIMIT_DATA CommitLimitData;
  /* 0x0030 */ unsigned __int64 ReservedMustBeZero;
  /* 0x0038 */ void* UserContext;
  /* 0x0040 */ unsigned __int64 LargeMetadataLock;
  /* 0x0048 */ struct _RTL_RB_TREE LargeAllocMetadata;
  /* 0x0058 */ volatile unsigned __int64 LargeReservedPages;
  /* 0x0060 */ volatile unsigned __int64 LargeCommittedPages;
  /* 0x0068 */ unsigned __int64 Tag;
  /* 0x0070 */ union _RTL_RUN_ONCE StackTraceInitVar;
  /* 0x0078 */ long Padding_270[2];
  /* 0x0080 */ struct _HEAP_RUNTIME_MEMORY_STATS MemStats;
  /* 0x00e0 */ unsigned long GlobalLockOwner;
  /* 0x00e4 */ long Padding_271;
  /* 0x00e8 */ unsigned __int64 ContextExtendLock;
  /* 0x00f0 */ unsigned char* AllocatedBase;
  /* 0x00f8 */ unsigned char* UncommittedBase;
  /* 0x0100 */ unsigned char* ReservedLimit;
  /* 0x0108 */ unsigned char* ReservedRegionEnd;
  /* 0x0110 */ struct _RTL_HP_HEAP_VA_CALLBACKS_ENCODED CallbacksEncoded;
  /* 0x0130 */ long Padding_272[4];
  /* 0x0140 */ struct _HEAP_SEG_CONTEXT SegContexts[2];
  /* 0x02c0 */ struct _HEAP_VS_CONTEXT VsContext;
  /* 0x0380 */ struct _HEAP_LFH_CONTEXT LfhContext;
} SEGMENT_HEAP, *PSEGMENT_HEAP; /* size: 0x0a40 */

typedef struct _KSINGLE_DPC_SOFT_TIMEOUT_EVENT_INFO
{
  /* 0x0000 */ struct _KDPC EventDpc;
  /* 0x0040 */ void* DeferredRoutine;
  /* 0x0048 */ volatile unsigned long TickCount;
  /* 0x004c */ long __PADDING__[1];
} KSINGLE_DPC_SOFT_TIMEOUT_EVENT_INFO, *PKSINGLE_DPC_SOFT_TIMEOUT_EVENT_INFO; /* size: 0x0050 */

typedef struct _RTLP_HP_METADATA_HEAP_CTX
{
  /* 0x0000 */ struct _SEGMENT_HEAP* Heap;
  /* 0x0008 */ union _RTL_RUN_ONCE InitOnce;
} RTLP_HP_METADATA_HEAP_CTX, *PRTLP_HP_METADATA_HEAP_CTX; /* size: 0x0010 */

typedef union _PNP_REBALANCE_FLAGS
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long RebalanceDueToDynamicPartitioning : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long ResetDeviceWhileStopped : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long Reserved : 30; /* bit position: 2 */
      }; /* bitfield */
    } /* size: 0x0004 */ u;
    /* 0x0000 */ unsigned long AsUlong;
  }; /* size: 0x0004 */
} PNP_REBALANCE_FLAGS, *PPNP_REBALANCE_FLAGS; /* size: 0x0004 */

typedef struct _IOMMU_MAP_PHYSICAL_ADDRESS
{
  /* 0x0000 */ enum _IOMMU_MAP_PHYSICAL_ADDRESS_TYPE MapType;
  /* 0x0004 */ long Padding_273;
  union
  {
    struct
    {
      /* 0x0008 */ struct _MDL* Mdl;
    } /* size: 0x0008 */ Mdl;
    struct
    {
      /* 0x0008 */ union _LARGE_INTEGER Base;
      /* 0x0010 */ unsigned __int64 Size;
    } /* size: 0x0010 */ ContiguousRange;
    struct
    {
      /* 0x0008 */ unsigned __int64* PageFrame;
      /* 0x0010 */ unsigned __int64 NumberOfPages;
    } /* size: 0x0010 */ PfnArray;
  }; /* size: 0x0010 */
} IOMMU_MAP_PHYSICAL_ADDRESS, *PIOMMU_MAP_PHYSICAL_ADDRESS; /* size: 0x0018 */

typedef struct _MI_KSTACK_ALLOCATIONS
{
  /* 0x0000 */ unsigned long AllocationPeaks[4];
} MI_KSTACK_ALLOCATIONS, *PMI_KSTACK_ALLOCATIONS; /* size: 0x0010 */

typedef struct _HEAP_VAMGR_ALLOCATOR
{
  /* 0x0000 */ unsigned __int64 TreeLock;
  /* 0x0008 */ struct _RTL_RB_TREE FreeRanges;
  /* 0x0018 */ struct _HEAP_VAMGR_VASPACE* VaSpace;
  /* 0x0020 */ void* ContextHandle;
  /* 0x0028 */ unsigned short ChunksPerRegion;
  /* 0x002a */ unsigned short RefCount;
  /* 0x002c */ unsigned char AllocatorIndex;
  /* 0x002d */ unsigned char NumaNode;
  struct /* bitfield */
  {
    /* 0x002e */ unsigned char LockType : 1; /* bit position: 0 */
    /* 0x002e */ unsigned char MemoryType : 3; /* bit position: 1 */
    /* 0x002e */ unsigned char ConstrainedVA : 1; /* bit position: 4 */
    /* 0x002e */ unsigned char AllowFreeHead : 1; /* bit position: 5 */
    /* 0x002e */ unsigned char Spare0 : 2; /* bit position: 6 */
  }; /* bitfield */
  /* 0x002f */ unsigned char Spare1;
} HEAP_VAMGR_ALLOCATOR, *PHEAP_VAMGR_ALLOCATOR; /* size: 0x0030 */

typedef struct _IMAGE_FILE_HEADER
{
  /* 0x0000 */ unsigned short Machine;
  /* 0x0002 */ unsigned short NumberOfSections;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned long PointerToSymbolTable;
  /* 0x000c */ unsigned long NumberOfSymbols;
  /* 0x0010 */ unsigned short SizeOfOptionalHeader;
  /* 0x0012 */ unsigned short Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER; /* size: 0x0014 */

typedef struct _IMAGE_DATA_DIRECTORY
{
  /* 0x0000 */ unsigned long VirtualAddress;
  /* 0x0004 */ unsigned long Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; /* size: 0x0008 */

typedef struct _IMAGE_OPTIONAL_HEADER64
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned __int64 ImageBase;
  /* 0x0020 */ unsigned long SectionAlignment;
  /* 0x0024 */ unsigned long FileAlignment;
  /* 0x0028 */ unsigned short MajorOperatingSystemVersion;
  /* 0x002a */ unsigned short MinorOperatingSystemVersion;
  /* 0x002c */ unsigned short MajorImageVersion;
  /* 0x002e */ unsigned short MinorImageVersion;
  /* 0x0030 */ unsigned short MajorSubsystemVersion;
  /* 0x0032 */ unsigned short MinorSubsystemVersion;
  /* 0x0034 */ unsigned long Win32VersionValue;
  /* 0x0038 */ unsigned long SizeOfImage;
  /* 0x003c */ unsigned long SizeOfHeaders;
  /* 0x0040 */ unsigned long CheckSum;
  /* 0x0044 */ unsigned short Subsystem;
  /* 0x0046 */ unsigned short DllCharacteristics;
  /* 0x0048 */ unsigned __int64 SizeOfStackReserve;
  /* 0x0050 */ unsigned __int64 SizeOfStackCommit;
  /* 0x0058 */ unsigned __int64 SizeOfHeapReserve;
  /* 0x0060 */ unsigned __int64 SizeOfHeapCommit;
  /* 0x0068 */ unsigned long LoaderFlags;
  /* 0x006c */ unsigned long NumberOfRvaAndSizes;
  /* 0x0070 */ struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64; /* size: 0x00f0 */

typedef struct _IMAGE_NT_HEADERS64
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _IMAGE_FILE_HEADER FileHeader;
  /* 0x0018 */ struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64; /* size: 0x0108 */

typedef struct _ETW_SYSTEMTIME
{
  /* 0x0000 */ unsigned short Year;
  /* 0x0002 */ unsigned short Month;
  /* 0x0004 */ unsigned short DayOfWeek;
  /* 0x0006 */ unsigned short Day;
  /* 0x0008 */ unsigned short Hour;
  /* 0x000a */ unsigned short Minute;
  /* 0x000c */ unsigned short Second;
  /* 0x000e */ unsigned short Milliseconds;
} ETW_SYSTEMTIME, *PETW_SYSTEMTIME; /* size: 0x0010 */

typedef struct _PS_IO_CONTROL_ENTRY
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE VolumeTreeNode;
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY FreeListEntry;
      /* 0x0010 */ unsigned __int64 ReservedForParentValue;
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
  /* 0x0018 */ unsigned __int64 VolumeKey;
  /* 0x0020 */ struct _EX_RUNDOWN_REF Rundown;
  /* 0x0028 */ void* IoControl;
  /* 0x0030 */ void* VolumeIoAttribution;
} PS_IO_CONTROL_ENTRY, *PPS_IO_CONTROL_ENTRY; /* size: 0x0038 */

typedef struct _MI_STANDBY_LOOKASIDE
{
  /* 0x0000 */ unsigned __int64 Array[64];
} MI_STANDBY_LOOKASIDE, *PMI_STANDBY_LOOKASIDE; /* size: 0x0200 */

typedef struct _PROCESSOR_CYCLES_WORKLOAD_CLASS
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_274;
  /* 0x0008 */ unsigned __int64 ProcessorCyclesClass[1];
} PROCESSOR_CYCLES_WORKLOAD_CLASS, *PPROCESSOR_CYCLES_WORKLOAD_CLASS; /* size: 0x0010 */

typedef struct _PO_IRP_QUEUE
{
  /* 0x0000 */ struct _IRP* CurrentIrp;
  /* 0x0008 */ struct _IRP* PendingIrpList;
} PO_IRP_QUEUE, *PPO_IRP_QUEUE; /* size: 0x0010 */

typedef struct _PO_IRP_MANAGER
{
  /* 0x0000 */ struct _PO_IRP_QUEUE DeviceIrpQueue;
  /* 0x0010 */ struct _PO_IRP_QUEUE SystemIrpQueue;
} PO_IRP_MANAGER, *PPO_IRP_MANAGER; /* size: 0x0020 */

typedef struct _PO_DIRECTED_DRIPS_STATE
{
  /* 0x0000 */ struct _LIST_ENTRY QueueLink;
  /* 0x0010 */ struct _LIST_ENTRY VisitedQueueLink;
  /* 0x0020 */ volatile unsigned long Flags;
  /* 0x0024 */ unsigned long CachedFlags;
  /* 0x0028 */ unsigned long DeviceUsageCount;
  /* 0x002c */ long Padding_275;
  /* 0x0030 */ void* Diagnostic;
} PO_DIRECTED_DRIPS_STATE, *PPO_DIRECTED_DRIPS_STATE; /* size: 0x0038 */

typedef struct _DEVICE_NODE
{
  /* 0x0000 */ struct _DEVICE_NODE* Sibling;
  /* 0x0008 */ struct _DEVICE_NODE* Child;
  /* 0x0010 */ struct _DEVICE_NODE* Parent;
  /* 0x0018 */ struct _DEVICE_NODE* LastChild;
  /* 0x0020 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0028 */ struct _UNICODE_STRING InstancePath;
  /* 0x0038 */ struct _UNICODE_STRING ServiceName;
  /* 0x0048 */ struct _IRP* PendingIrp;
  /* 0x0050 */ struct _POP_FX_DEVICE* FxDevice;
  /* 0x0058 */ volatile long FxDeviceLock;
  /* 0x005c */ long Padding_276;
  /* 0x0060 */ struct _KEVENT FxRemoveEvent;
  /* 0x0078 */ volatile long FxActivationCount;
  /* 0x007c */ volatile long FxSleepCount;
  /* 0x0080 */ struct _UNICODE_STRING UniqueId;
  /* 0x0090 */ struct _POP_FX_PLUGIN* Plugin;
  /* 0x0098 */ unsigned long Level;
  /* 0x009c */ union _POWER_STATE CurrentPowerState;
  /* 0x00a0 */ struct _PO_DEVICE_NOTIFY Notify;
  /* 0x0108 */ struct _PO_IRP_MANAGER PoIrpManager;
  /* 0x0128 */ volatile long PowerFlags;
  /* 0x012c */ enum _PNP_DEVNODE_STATE State;
  /* 0x0130 */ enum _PNP_DEVNODE_STATE PreviousState;
  /* 0x0134 */ enum _PNP_DEVNODE_STATE StateHistory[20];
  /* 0x0184 */ unsigned long StateHistoryEntry;
  /* 0x0188 */ long CompletionStatus;
  /* 0x018c */ unsigned long Flags;
  /* 0x0190 */ unsigned long UserFlags;
  /* 0x0194 */ unsigned long Problem;
  /* 0x0198 */ long ProblemStatus;
  /* 0x019c */ long Padding_277;
  /* 0x01a0 */ struct _CM_RESOURCE_LIST* ResourceList;
  /* 0x01a8 */ struct _CM_RESOURCE_LIST* ResourceListTranslated;
  /* 0x01b0 */ struct _DEVICE_OBJECT* DuplicatePDO;
  /* 0x01b8 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* ResourceRequirements;
  /* 0x01c0 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x01c4 */ unsigned long BusNumber;
  /* 0x01c8 */ enum _INTERFACE_TYPE ChildInterfaceType;
  /* 0x01cc */ unsigned long ChildBusNumber;
  /* 0x01d0 */ unsigned short ChildBusTypeIndex;
  /* 0x01d2 */ unsigned char RemovalPolicy;
  /* 0x01d3 */ unsigned char HardwareRemovalPolicy;
  /* 0x01d4 */ long Padding_278;
  /* 0x01d8 */ struct _LIST_ENTRY TargetDeviceNotify;
  /* 0x01e8 */ struct _LIST_ENTRY DeviceArbiterList;
  /* 0x01f8 */ struct _LIST_ENTRY DeviceTranslatorList;
  /* 0x0208 */ unsigned short NoTranslatorMask;
  /* 0x020a */ unsigned short QueryTranslatorMask;
  /* 0x020c */ unsigned short NoArbiterMask;
  /* 0x020e */ unsigned short QueryArbiterMask;
  union
  {
    union
    {
      /* 0x0210 */ struct _DEVICE_NODE* LegacyDeviceNode;
      /* 0x0210 */ struct _DEVICE_RELATIONS* PendingDeviceRelations;
      /* 0x0210 */ void* Information;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ OverUsed1;
  union
  {
    /* 0x0218 */ struct _DEVICE_NODE* NextResourceDeviceNode;
  } /* size: 0x0008 */ OverUsed2;
  /* 0x0220 */ struct _CM_RESOURCE_LIST* BootResources;
  /* 0x0228 */ struct _CM_RESOURCE_LIST* BootResourcesTranslated;
  /* 0x0230 */ unsigned long CapabilityFlags;
  /* 0x0234 */ long Padding_279;
  struct
  {
    /* 0x0238 */ enum PROFILE_STATUS DockStatus;
    /* 0x0004 */ long Padding_280;
    /* 0x0240 */ struct _LIST_ENTRY ListEntry;
    /* 0x0250 */ wchar_t* SerialNumber;
  } /* size: 0x0020 */ DockInfo;
  /* 0x0258 */ unsigned long DisableableDepends;
  /* 0x025c */ long Padding_281;
  /* 0x0260 */ struct _LIST_ENTRY PendedSetInterfaceState;
  /* 0x0270 */ struct _LIST_ENTRY LegacyBusListEntry;
  /* 0x0280 */ unsigned long DriverUnloadRetryCount;
  /* 0x0284 */ long Padding_282;
  /* 0x0288 */ struct _DEVICE_NODE* PreviousParent;
  /* 0x0290 */ long DeletedChildren;
  /* 0x0294 */ unsigned long NumaNodeIndex;
  /* 0x0298 */ struct _GUID ContainerID;
  /* 0x02a8 */ unsigned char OverrideFlags;
  /* 0x02a9 */ char Padding_283[3];
  /* 0x02ac */ unsigned long DeviceIdsHash;
  /* 0x02b0 */ unsigned char RequiresUnloadedDriver;
  /* 0x02b1 */ char Padding_284[7];
  /* 0x02b8 */ struct _PENDING_RELATIONS_LIST_ENTRY* PendingEjectRelations;
  /* 0x02c0 */ unsigned long StateFlags;
  /* 0x02c4 */ long Padding_285;
  /* 0x02c8 */ struct _PNP_REBALANCE_TRACE_CONTEXT* RebalanceContext;
  /* 0x02d0 */ struct _DEVICE_NODE_IOMMU_EXTENSION* IommuExtension;
  /* 0x02d8 */ struct _PO_DIRECTED_DRIPS_STATE DirectedDripsState;
  /* 0x0310 */ struct _PNP_PROBLEM_CODE_LOG_ENTRY ProblemCodeLog[4];
  /* 0x0370 */ unsigned long ProblemCodeLogNextIndex;
  /* 0x0374 */ long Padding_286;
  /* 0x0378 */ union _LARGE_INTEGER StateTimestamp;
  /* 0x0380 */ union _LARGE_INTEGER PreviousStateTimestamp;
} DEVICE_NODE, *PDEVICE_NODE; /* size: 0x0388 */

typedef struct _MI_SEGMENT_SIGNATURE_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char ImageSigningLevel : 4; /* bit position: 0 */
      /* 0x0000 */ unsigned char ImageSigningType : 3; /* bit position: 4 */
      /* 0x0000 */ unsigned char Spare : 1; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char EntireField;
  }; /* size: 0x0001 */
} MI_SEGMENT_SIGNATURE_FLAGS, *PMI_SEGMENT_SIGNATURE_FLAGS; /* size: 0x0001 */

typedef struct _HEAP_LFH_PTRREF_LIST
{
  /* 0x0000 */ unsigned short Flink;
  /* 0x0002 */ unsigned short Blink;
} HEAP_LFH_PTRREF_LIST, *PHEAP_LFH_PTRREF_LIST; /* size: 0x0004 */

typedef struct _HEAP_LFH_SUBSEGMENT_OWNER
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char IsBucket : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned char BucketIndex : 7; /* bit position: 1 */
  }; /* bitfield */
  union
  {
    /* 0x0001 */ unsigned char SlotCount;
    /* 0x0001 */ unsigned char AvailableSubsegmentCount;
  }; /* size: 0x0001 */
  /* 0x0002 */ unsigned short BucketRef;
  /* 0x0004 */ unsigned short PrivateSlotMapRef;
  /* 0x0006 */ unsigned short HeatMapRef;
  union
  {
    /* 0x0008 */ struct _SINGLE_LIST_ENTRY OwnerFreeList;
    /* 0x0008 */ unsigned short Spare : 12; /* bit position: 0 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0010 */ unsigned __int64 Lock;
    /* 0x0010 */ struct _SINGLE_LIST_ENTRY SlotStandbyEntry;
    struct
    {
      /* 0x0010 */ struct _HEAP_LFH_PTRREF_LIST PrivSlotListEntry;
      /* 0x0014 */ unsigned long OwnerThreadId;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  /* 0x0018 */ struct _LIST_ENTRY AvailableSubsegmentList;
  /* 0x0028 */ struct _LIST_ENTRY FullSubsegmentList;
} HEAP_LFH_SUBSEGMENT_OWNER, *PHEAP_LFH_SUBSEGMENT_OWNER; /* size: 0x0038 */

typedef struct _HEAP_LFH_BUCKET
{
  /* 0x0000 */ struct _HEAP_LFH_SUBSEGMENT_OWNER State;
  /* 0x0038 */ unsigned __int64 TotalBlockCount;
  /* 0x0040 */ unsigned __int64 TotalSubsegmentCount;
  /* 0x0048 */ unsigned long ReciprocalBlockSize;
  /* 0x004c */ unsigned short HotHeatThreshold;
  /* 0x004e */ unsigned short PrivateHeatThreshold;
  /* 0x0050 */ unsigned __int64 PrivSlotListLock;
  /* 0x0058 */ struct _HEAP_LFH_PTRREF_LIST PrivSlotList;
  /* 0x005c */ unsigned char CompactionNeeded;
  /* 0x005d */ unsigned char Spare;
  /* 0x005e */ unsigned char AffinityMapInProgress;
  /* 0x005f */ unsigned char ContentionCount;
  /* 0x0060 */ unsigned __int64 LastContentionTime;
} HEAP_LFH_BUCKET, *PHEAP_LFH_BUCKET; /* size: 0x0068 */

struct POWER_ACTION_POLICY
{
  /* 0x0000 */ enum POWER_ACTION Action;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long EventCode;
}; /* size: 0x000c */

typedef struct _PROC_PERF_CHECK_SNAP
{
  /* 0x0000 */ unsigned __int64 Time;
  /* 0x0008 */ unsigned __int64 Active;
  /* 0x0010 */ unsigned __int64 Stall;
  /* 0x0018 */ unsigned __int64 FrequencyScaledActive;
  /* 0x0020 */ unsigned __int64 PerformanceScaledActive;
  /* 0x0028 */ unsigned __int64 PerformanceScaledKernelActive;
  /* 0x0030 */ unsigned long ResponsivenessEvents;
  /* 0x0034 */ long __PADDING__[1];
} PROC_PERF_CHECK_SNAP, *PPROC_PERF_CHECK_SNAP; /* size: 0x0038 */

typedef struct _PROC_PERF_CHECK
{
  /* 0x0000 */ unsigned __int64 LastActive;
  /* 0x0008 */ unsigned __int64 LastTime;
  /* 0x0010 */ unsigned __int64 LastStall;
  /* 0x0018 */ unsigned long LastResponsivenessEvents;
  /* 0x001c */ long Padding_287;
  /* 0x0020 */ struct _PROC_PERF_CHECK_SNAP LastPerfCheckSnap;
  /* 0x0058 */ struct _PROC_PERF_CHECK_CYCLE_SNAP* LastPerfCheckCycleSnap;
  /* 0x0060 */ struct _PROC_PERF_CHECK_SNAP CurrentSnap;
  /* 0x0098 */ struct _PROC_PERF_CHECK_CYCLE_SNAP* CurrentCycleSnap;
  /* 0x00a0 */ struct _PROC_PERF_CHECK_SNAP LastDeliveredSnap;
  /* 0x00d8 */ struct _PROC_PERF_CHECK_CYCLE_SNAP* LastDeliveredCycleSnap;
  /* 0x00e0 */ unsigned long LastDeliveredPerformance;
  /* 0x00e4 */ unsigned long LastDeliveredFrequency;
  /* 0x00e8 */ unsigned char TaggedThreadPercent[4];
  /* 0x00ec */ unsigned char ImportantPercent;
  /* 0x00ed */ unsigned char IdealPercent;
  /* 0x00ee */ unsigned char Class0FloorPerfSelection;
  /* 0x00ef */ unsigned char Class1MinimumPerfSelection;
  /* 0x00f0 */ unsigned long CurrentResponsivenessEvents;
  /* 0x00f4 */ long Padding_288;
  /* 0x00f8 */ unsigned __int64 CyclesByFreqBand[48][3];
} PROC_PERF_CHECK, *PPROC_PERF_CHECK; /* size: 0x0578 */

typedef struct _LOCK_TRACKER
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE LockTrackerNode;
  /* 0x0018 */ struct _MDL* Mdl;
  /* 0x0020 */ void* StartVa;
  /* 0x0028 */ unsigned __int64 Count;
  /* 0x0030 */ unsigned long Offset;
  /* 0x0034 */ unsigned long Length;
  /* 0x0038 */ unsigned long Who;
  /* 0x003c */ unsigned long Hash;
  /* 0x0040 */ unsigned __int64 Page;
  /* 0x0048 */ void* StackTrace[14];
  /* 0x00b8 */ struct _EPROCESS* Process;
} LOCK_TRACKER, *PLOCK_TRACKER; /* size: 0x00c0 */

typedef struct _DMA_OPERATIONS
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ long Padding_289;
  /* 0x0008 */ void* PutDmaAdapter /* function */;
  /* 0x0010 */ void* AllocateCommonBuffer /* function */;
  /* 0x0018 */ void* FreeCommonBuffer /* function */;
  /* 0x0020 */ void* AllocateAdapterChannel /* function */;
  /* 0x0028 */ void* FlushAdapterBuffers /* function */;
  /* 0x0030 */ void* FreeAdapterChannel /* function */;
  /* 0x0038 */ void* FreeMapRegisters /* function */;
  /* 0x0040 */ void* MapTransfer /* function */;
  /* 0x0048 */ void* GetDmaAlignment /* function */;
  /* 0x0050 */ void* ReadDmaCounter /* function */;
  /* 0x0058 */ void* GetScatterGatherList /* function */;
  /* 0x0060 */ void* PutScatterGatherList /* function */;
  /* 0x0068 */ void* CalculateScatterGatherList /* function */;
  /* 0x0070 */ void* BuildScatterGatherList /* function */;
  /* 0x0078 */ void* BuildMdlFromScatterGatherList /* function */;
  /* 0x0080 */ void* GetDmaAdapterInfo /* function */;
  /* 0x0088 */ void* GetDmaTransferInfo /* function */;
  /* 0x0090 */ void* InitializeDmaTransferContext /* function */;
  /* 0x0098 */ void* AllocateCommonBufferEx /* function */;
  /* 0x00a0 */ void* AllocateAdapterChannelEx /* function */;
  /* 0x00a8 */ void* ConfigureAdapterChannel /* function */;
  /* 0x00b0 */ void* CancelAdapterChannel /* function */;
  /* 0x00b8 */ void* MapTransferEx /* function */;
  /* 0x00c0 */ void* GetScatterGatherListEx /* function */;
  /* 0x00c8 */ void* BuildScatterGatherListEx /* function */;
  /* 0x00d0 */ void* FlushAdapterBuffersEx /* function */;
  /* 0x00d8 */ void* FreeAdapterObject /* function */;
  /* 0x00e0 */ void* CancelMappedTransfer /* function */;
  /* 0x00e8 */ void* AllocateDomainCommonBuffer /* function */;
  /* 0x00f0 */ void* FlushDmaBuffer /* function */;
  /* 0x00f8 */ void* JoinDmaDomain /* function */;
  /* 0x0100 */ void* LeaveDmaDomain /* function */;
  /* 0x0108 */ void* GetDmaDomain /* function */;
  /* 0x0110 */ void* AllocateCommonBufferWithBounds /* function */;
  /* 0x0118 */ void* AllocateCommonBufferVector /* function */;
  /* 0x0120 */ void* GetCommonBufferFromVectorByIndex /* function */;
  /* 0x0128 */ void* FreeCommonBufferFromVector /* function */;
  /* 0x0130 */ void* FreeCommonBufferVector /* function */;
  /* 0x0138 */ void* CreateCommonBufferFromMdl /* function */;
} DMA_OPERATIONS, *PDMA_OPERATIONS; /* size: 0x0140 */

typedef struct _RTL_SRWLOCK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Locked : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Waiting : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 Waking : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 MultipleShared : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 Shared : 60; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 Value;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0008 */
} RTL_SRWLOCK, *PRTL_SRWLOCK; /* size: 0x0008 */

typedef struct _PPM_CONCURRENCY_ACCOUNTING
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ unsigned long Processors;
  /* 0x000c */ unsigned long ActiveProcessors;
  /* 0x0010 */ unsigned __int64 LastUpdateTime;
  /* 0x0018 */ unsigned __int64 TotalTime;
  /* 0x0020 */ volatile unsigned __int64 IdleIntervalStats[37];
  /* 0x0148 */ unsigned __int64 AccumulatedTime[1];
} PPM_CONCURRENCY_ACCOUNTING, *PPPM_CONCURRENCY_ACCOUNTING; /* size: 0x0150 */

typedef struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT
{
  /* 0x0000 */ unsigned char ResourceType;
  /* 0x0001 */ char Padding_290[3];
  /* 0x0004 */ unsigned long AlternativeCount;
  /* 0x0008 */ struct _IO_RESOURCE_DESCRIPTOR* ResourceRequests;
  /* 0x0010 */ void* ArbiterInstance;
} PNP_RESOURCE_CONFLICT_TRACE_CONTEXT, *PPNP_RESOURCE_CONFLICT_TRACE_CONTEXT; /* size: 0x0018 */

typedef struct _PROCESSOR_IDLE_CONSTRAINTS
{
  /* 0x0000 */ unsigned __int64 TotalTime;
  /* 0x0008 */ unsigned __int64 IdleTime;
  /* 0x0010 */ unsigned __int64 ExpectedIdleDuration;
  /* 0x0018 */ unsigned __int64 MaxIdleDuration;
  /* 0x0020 */ unsigned long OverrideState;
  /* 0x0024 */ unsigned long TimeCheck;
  /* 0x0028 */ unsigned char PromotePercent;
  /* 0x0029 */ unsigned char DemotePercent;
  /* 0x002a */ unsigned char Parked;
  /* 0x002b */ unsigned char Interruptible;
  /* 0x002c */ unsigned char PlatformIdle;
  /* 0x002d */ unsigned char ExpectedWakeReason;
  /* 0x002e */ unsigned char IdleStateMax;
  /* 0x002f */ char __PADDING__[1];
} PROCESSOR_IDLE_CONSTRAINTS, *PPROCESSOR_IDLE_CONSTRAINTS; /* size: 0x0030 */

typedef struct _PPM_SELECTION_MENU
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_291;
  /* 0x0008 */ struct _PPM_SELECTION_MENU_ENTRY* Entries;
} PPM_SELECTION_MENU, *PPPM_SELECTION_MENU; /* size: 0x0010 */

typedef struct _PPM_COORDINATED_SELECTION
{
  /* 0x0000 */ unsigned long MaximumStates;
  /* 0x0004 */ unsigned long SelectedStates;
  /* 0x0008 */ unsigned long DefaultSelection;
  /* 0x000c */ long Padding_292;
  /* 0x0010 */ unsigned long* Selection;
} PPM_COORDINATED_SELECTION, *PPPM_COORDINATED_SELECTION; /* size: 0x0018 */

typedef struct _PPM_IDLE_STATES
{
  /* 0x0000 */ unsigned char EnforceStateConstraints;
  /* 0x0001 */ unsigned char IdleOverride;
  /* 0x0002 */ unsigned char EstimateIdleDuration;
  /* 0x0003 */ unsigned char ExitLatencyTraceEnabled;
  /* 0x0004 */ unsigned char NonInterruptibleTransition;
  /* 0x0005 */ unsigned char UnaccountedTransition;
  /* 0x0006 */ unsigned char IdleDurationLimited;
  /* 0x0007 */ unsigned char IdleCheckLimited;
  /* 0x0008 */ unsigned __int64 IdleReevaluationDuration;
  /* 0x0010 */ unsigned char StrictVetoBias;
  /* 0x0011 */ char Padding_293[3];
  /* 0x0014 */ unsigned long ExitLatencyCountdown;
  /* 0x0018 */ unsigned long TargetState;
  /* 0x001c */ unsigned long ActualState;
  /* 0x0020 */ unsigned long OldState;
  /* 0x0024 */ unsigned long OverrideIndex;
  /* 0x0028 */ unsigned long ProcessorIdleCount;
  /* 0x002c */ unsigned long Type;
  /* 0x0030 */ unsigned __int64 LevelId;
  /* 0x0038 */ unsigned short ReasonFlags;
  /* 0x003a */ char Padding_294[2];
  /* 0x003c */ long PreviousStatus;
  /* 0x0040 */ unsigned char PreviouslyCancelled;
  /* 0x0041 */ unsigned char PreviouslyDeniedCount;
  /* 0x0042 */ char Padding_295[6];
  /* 0x0048 */ struct _KAFFINITY_EX PrimaryProcessorMask;
  /* 0x0150 */ struct _KAFFINITY_EX SecondaryProcessorMask;
  /* 0x0258 */ void* IdlePreExecute /* function */;
  /* 0x0260 */ void* IdleExecute /* function */;
  /* 0x0268 */ void* IdlePreselect /* function */;
  /* 0x0270 */ void* IdleTest /* function */;
  /* 0x0278 */ void* IdleAvailabilityCheck /* function */;
  /* 0x0280 */ void* IdleComplete /* function */;
  /* 0x0288 */ void* IdleIsHalted /* function */;
  /* 0x0290 */ void* IdleInitiateWake /* function */;
  /* 0x0298 */ void* Context;
  /* 0x02a0 */ struct _PROCESSOR_IDLE_CONSTRAINTS Constraints;
  /* 0x02d0 */ struct _KAFFINITY_EX DeepIdleSnapshot;
  /* 0x03d8 */ struct _PERFINFO_PPM_STATE_SELECTION* Tracing;
  /* 0x03e0 */ struct _PERFINFO_PPM_STATE_SELECTION* CoordinatedTracing;
  /* 0x03e8 */ struct _PPM_SELECTION_MENU ProcessorMenu;
  /* 0x03f8 */ struct _PPM_SELECTION_MENU CoordinatedMenu;
  /* 0x0408 */ struct _PPM_COORDINATED_SELECTION CoordinatedSelection;
  /* 0x0420 */ struct _PPM_IDLE_STATE State[1];
} PPM_IDLE_STATES, *PPPM_IDLE_STATES; /* size: 0x0578 */

typedef struct _MI_REVERSE_MAP_VIEW_ATTRIBUTES
{
  union
  {
    /* 0x0000 */ unsigned __int64 FullSectionOffset;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 NumberOfPtes : 6; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 PartitionId : 10; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 SectionOffset : 46; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 ViewState : 2; /* bit position: 62 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 EntireField;
  }; /* size: 0x0008 */
} MI_REVERSE_MAP_VIEW_ATTRIBUTES, *PMI_REVERSE_MAP_VIEW_ATTRIBUTES; /* size: 0x0008 */

typedef struct _MI_REVERSE_VIEW_MAP
{
  /* 0x0000 */ struct _LIST_ENTRY ViewLinks;
  union
  {
    /* 0x0010 */ void* SystemCacheVa;
    /* 0x0010 */ struct _EPROCESS* VadsProcess;
    /* 0x0010 */ unsigned __int64 Type : 2; /* bit position: 0 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0018 */ struct _SUBSECTION* Subsection;
    /* 0x0018 */ unsigned __int64 SubsectionType : 1; /* bit position: 0 */
  }; /* size: 0x0008 */
  /* 0x0020 */ struct _MI_REVERSE_MAP_VIEW_ATTRIBUTES Attributes;
} MI_REVERSE_VIEW_MAP, *PMI_REVERSE_VIEW_MAP; /* size: 0x0028 */

typedef struct _SUPPORTED_RANGE
{
  /* 0x0000 */ struct _SUPPORTED_RANGE* Next;
  /* 0x0008 */ unsigned long SystemAddressSpace;
  /* 0x000c */ long Padding_296;
  /* 0x0010 */ __int64 SystemBase;
  /* 0x0018 */ __int64 Base;
  /* 0x0020 */ __int64 Limit;
} SUPPORTED_RANGE, *PSUPPORTED_RANGE; /* size: 0x0028 */

typedef struct _SUPPORTED_RANGES
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned char Sorted;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long NoIO;
  /* 0x0008 */ struct _SUPPORTED_RANGE IO;
  /* 0x0030 */ unsigned long NoMemory;
  /* 0x0034 */ long Padding_297;
  /* 0x0038 */ struct _SUPPORTED_RANGE Memory;
  /* 0x0060 */ unsigned long NoPrefetchMemory;
  /* 0x0064 */ long Padding_298;
  /* 0x0068 */ struct _SUPPORTED_RANGE PrefetchMemory;
  /* 0x0090 */ unsigned long NoDma;
  /* 0x0094 */ long Padding_299;
  /* 0x0098 */ struct _SUPPORTED_RANGE Dma;
} SUPPORTED_RANGES, *PSUPPORTED_RANGES; /* size: 0x00c0 */

typedef struct _MI_PARTITION_STORES
{
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0000 */ long FlushCompleting : 1; /* bit position: 0 */
        /* 0x0000 */ long FlushInProgress : 31; /* bit position: 1 */
      }; /* bitfield */
      /* 0x0000 */ volatile long Long;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ WriteAllStoreSwapPages;
  /* 0x0004 */ volatile unsigned long VirtualPageFileNumber;
  /* 0x0008 */ unsigned long ReadClusterSizeMax;
  /* 0x000c */ unsigned long MaximumPagefileSize;
  /* 0x0010 */ unsigned long EvictFlushRequestCount;
  /* 0x0014 */ unsigned long ModifiedWriteDisableCount;
  /* 0x0018 */ unsigned long WriteIssueFailures;
  /* 0x001c */ unsigned long WritesOutstanding;
  /* 0x0020 */ unsigned long VirtualPagefileMaximumIncreaseFailed;
  /* 0x0024 */ long Padding_300;
  /* 0x0028 */ struct _KTIMER VirtualPagefileIncreaseRetryTimer;
  /* 0x0068 */ struct _KEVENT* RundownWrites;
  /* 0x0070 */ volatile long EvictFlushLock;
  /* 0x0074 */ long Padding_301;
  /* 0x0078 */ struct _ETHREAD* EvictionThread;
  /* 0x0080 */ struct _KEVENT EvictEvent;
  /* 0x0098 */ struct _KEVENT EvictThreadExitEvent;
  /* 0x00b0 */ union _SLIST_HEADER WriteSupportSListHead;
  /* 0x00c0 */ struct _KEVENT EvictFlushCompleteEvent;
  /* 0x00d8 */ struct _RTL_BITMAP* WriteIssueFailedBitmap;
  /* 0x00e0 */ struct _MM_STORE_WRITE_PAGE_INFORMATION* WritePageInformation;
  /* 0x00e8 */ struct _KAFFINITY_EX AffinityEx;
  /* 0x01f0 */ struct _EPROCESS* StoreProcess;
  /* 0x01f8 */ volatile long MemoryConditionsLock;
  struct /* bitfield */
  {
    /* 0x01fc */ unsigned long DeleteStoredPages : 1; /* bit position: 0 */
    /* 0x01fc */ unsigned long DiscardPoisonedPages : 1; /* bit position: 1 */
    /* 0x01fc */ unsigned long Spare : 30; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0200 */ unsigned long DiscardedPoisonedPages;
  /* 0x0204 */ long Padding_302;
  /* 0x0208 */ unsigned __int64 LastDiscardedPage;
} MI_PARTITION_STORES, *PMI_PARTITION_STORES; /* size: 0x0210 */

typedef struct _SCATTER_GATHER_ELEMENT
{
  /* 0x0000 */ union _LARGE_INTEGER Address;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ long Padding_303;
  /* 0x0010 */ unsigned __int64 Reserved;
} SCATTER_GATHER_ELEMENT, *PSCATTER_GATHER_ELEMENT; /* size: 0x0018 */

typedef struct _SCATTER_GATHER_LIST
{
  /* 0x0000 */ unsigned long NumberOfElements;
  /* 0x0004 */ long Padding_304;
  /* 0x0008 */ unsigned __int64 Reserved;
  /* 0x0010 */ struct _SCATTER_GATHER_ELEMENT* Elements /* zero-length array */;
} SCATTER_GATHER_LIST, *PSCATTER_GATHER_LIST; /* size: 0x0010 */

typedef struct _ADAPTER_OBJECT
{
  /* 0x0000 */ struct _HALP_DMA_ADAPTER_OBJECT AdapterObject;
  /* 0x00a0 */ struct _HALP_DMA_MASTER_ADAPTER_OBJECT* MasterAdapter;
  /* 0x00a8 */ struct _LIST_ENTRY WaitQueueEntry;
  union
  {
    /* 0x00b8 */ struct _KDEVICE_QUEUE ChannelWaitQueue;
    struct
    {
      /* 0x00b8 */ unsigned __int64 ResourceWaitLock;
      /* 0x00c0 */ struct _LIST_ENTRY ResourceWaitQueue;
      /* 0x00d0 */ struct _LIST_ENTRY ChannelResourceWaitQueue;
    }; /* size: 0x0028 */
  }; /* size: 0x0028 */
  /* 0x00e0 */ unsigned char ResourceQueueBusy;
  /* 0x00e1 */ char Padding_305[7];
  /* 0x00e8 */ unsigned long MapRegistersPerChannel;
  /* 0x00ec */ long Padding_306;
  /* 0x00f0 */ void* MapRegisterBase;
  /* 0x00f8 */ unsigned long NumberOfMapRegisters;
  /* 0x00fc */ unsigned long MaxTransferLength;
  /* 0x0100 */ void* CrashDumpRegisterBase[2];
  /* 0x0110 */ unsigned long NumberOfCrashDumpRegisters[2];
  /* 0x0118 */ unsigned long CrashDumpRegisterRefCount[2];
  /* 0x0120 */ struct _LIST_ENTRY AdapterCrashDumpList;
  /* 0x0130 */ struct _MDL* MapRegisterMdl;
  /* 0x0138 */ unsigned __int64 MapRegisterMdlLock;
  /* 0x0140 */ struct _EX_PUSH_LOCK ExpiredLock;
  /* 0x0148 */ void* AllocationHandle;
  /* 0x0150 */ void* VirtualAddress;
  /* 0x0158 */ unsigned char IsAllocationMdlBased;
  /* 0x0159 */ unsigned char NoLocalPool;
  /* 0x015a */ unsigned char ExpiredFlag;
  /* 0x015b */ char Padding_307[5];
  /* 0x0160 */ struct _WAIT_CONTEXT_BLOCK* CurrentWcb;
  /* 0x0168 */ struct _DMA_TRANSFER_CONTEXT* CurrentTransferContext;
  /* 0x0170 */ struct _HALP_DMA_CONTROLLER* DmaController;
  /* 0x0178 */ unsigned long Controller;
  /* 0x017c */ unsigned long ChannelNumber;
  /* 0x0180 */ unsigned long RequestLine;
  /* 0x0184 */ unsigned long RequestedChannelCount;
  /* 0x0188 */ unsigned long AllocatedChannelCount;
  /* 0x018c */ unsigned long AllocatedChannels[8];
  /* 0x01ac */ long Padding_308;
  /* 0x01b0 */ void* ChannelAdapter;
  /* 0x01b8 */ unsigned char NeedsMapRegisters;
  /* 0x01b9 */ unsigned char MasterDevice;
  /* 0x01ba */ unsigned char ScatterGather;
  /* 0x01bb */ unsigned char AutoInitialize;
  /* 0x01bc */ unsigned char IgnoreCount;
  /* 0x01bd */ unsigned char CacheCoherent;
  /* 0x01be */ char Padding_309[2];
  union
  {
    struct
    {
      /* 0x01c0 */ unsigned char Dma32BitAddresses;
      /* 0x01c1 */ unsigned char Dma64BitAddresses;
    }; /* size: 0x0002 */
    /* 0x01c0 */ unsigned long DmaAddressWidth;
  }; /* size: 0x0004 */
  /* 0x01c4 */ enum _DMA_WIDTH DmaPortWidth;
  /* 0x01c8 */ union _LARGE_INTEGER DeviceAddress;
  /* 0x01d0 */ struct _LIST_ENTRY AdapterList;
  /* 0x01e0 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0200 */ struct _HALP_DMA_DOMAIN_OBJECT* DomainPointer;
  /* 0x0208 */ enum _HALP_DMA_TRANSLATION_TYPE TranslationType;
  /* 0x020c */ unsigned char AdapterInUse;
  /* 0x020d */ char Padding_310[3];
  /* 0x0210 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0218 */ struct _EXT_IOMMU_DEVICE_ID* DeviceId;
  /* 0x0220 */ struct _IOMMU_DMA_DEVICE* IommuDevice;
  /* 0x0228 */ struct _MDL* ScatterGatherMdl;
  /* 0x0230 */ struct _IOMMU_DMA_LOGICAL_ADDRESS_TOKEN* LowMemoryLogicalAddressToken;
  /* 0x0238 */ unsigned __int64 LowMemoryLogicalAddressQueueLock;
  /* 0x0240 */ struct _LIST_ENTRY LowMemoryLogicalAddressQueue;
  /* 0x0250 */ unsigned char LowMemoryLogicalAddressQueueInUse;
  /* 0x0251 */ char Padding_311[7];
  /* 0x0258 */ struct _HALP_EMERGENCY_LA_QUEUE_ENTRY LowMemoryLogicalAddressQueueEntry;
  /* 0x0270 */ enum _HALP_DMA_ADAPTER_ALLOCATION_STATE AllocationState;
  /* 0x0274 */ unsigned long ScatterGatherBufferLength;
  /* 0x0278 */ struct _SCATTER_GATHER_LIST ScatterGatherBuffer;
} ADAPTER_OBJECT, *PADAPTER_OBJECT; /* size: 0x0288 */

typedef struct _IO_SECURITY_CONTEXT
{
  /* 0x0000 */ struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;
  /* 0x0008 */ struct _ACCESS_STATE* AccessState;
  /* 0x0010 */ unsigned long DesiredAccess;
  /* 0x0014 */ unsigned long FullCreateOptions;
} IO_SECURITY_CONTEXT, *PIO_SECURITY_CONTEXT; /* size: 0x0018 */

typedef struct _EXT_IOMMU_DEVICE_ID_TEST
{
  /* 0x0000 */ unsigned __int64 UniqueId;
} EXT_IOMMU_DEVICE_ID_TEST, *PEXT_IOMMU_DEVICE_ID_TEST; /* size: 0x0008 */

typedef struct _FAULT_INFORMATION_ARM64_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long WriteNotRead : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long InstructionNotData : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long Privileged : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long FaultAddressValid : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long Reserved : 28; /* bit position: 4 */
  }; /* bitfield */
} FAULT_INFORMATION_ARM64_FLAGS, *PFAULT_INFORMATION_ARM64_FLAGS; /* size: 0x0004 */

typedef struct _FAULT_INFORMATION_ARM64
{
  /* 0x0000 */ void* DomainHandle;
  /* 0x0008 */ void* FaultAddress;
  /* 0x0010 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0018 */ unsigned long InputMappingId;
  /* 0x001c */ struct _FAULT_INFORMATION_ARM64_FLAGS Flags;
  /* 0x0020 */ enum _FAULT_INFORMATION_ARM64_TYPE Type;
  /* 0x0024 */ long Padding_312;
  /* 0x0028 */ unsigned __int64 IommuBaseAddress;
} FAULT_INFORMATION_ARM64, *PFAULT_INFORMATION_ARM64; /* size: 0x0030 */

typedef struct _FAULT_INFORMATION
{
  /* 0x0000 */ enum _FAULT_INFORMATION_ARCH Type;
  /* 0x0004 */ unsigned char IsStage1;
  /* 0x0005 */ char Padding_313[3];
  union
  {
    /* 0x0008 */ struct _FAULT_INFORMATION_ARM64 Arm64;
    struct
    {
      /* 0x0008 */ struct _FAULT_INFORMATION_X64 X64;
      /* 0x0030 */ long __PADDING__[2];
    }; /* size: 0x0030 */
  }; /* size: 0x0030 */
} FAULT_INFORMATION, *PFAULT_INFORMATION; /* size: 0x0038 */

typedef struct _IOMMU_BUS_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ long Padding_314;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ void* InterfaceReference /* function */;
  /* 0x0018 */ void* InterfaceDereference /* function */;
  /* 0x0020 */ void* GetSvmCapabilities /* function */;
  /* 0x0028 */ void* EnableSvmCapabilities /* function */;
  /* 0x0030 */ void* DisableSvmCapabilities /* function */;
  /* 0x0038 */ void* GetDeviceProperties /* function */;
  /* 0x0040 */ void* GetDeviceId /* function */;
  /* 0x0048 */ void* GetRootDevice /* function */;
} IOMMU_BUS_INTERFACE, *PIOMMU_BUS_INTERFACE; /* size: 0x0050 */

typedef struct _IOMMU_DMA_DEVICE
{
  /* 0x0000 */ struct _EXT_IOMMU_DEVICE_ID* DeviceId;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ long DeviceState;
  /* 0x0014 */ long Padding_315;
  /* 0x0018 */ struct _IOMMU_DMA_DOMAIN* DomainOwner;
  union
  {
    struct
    {
      /* 0x0020 */ unsigned __int64 LogicalId;
    } /* size: 0x0008 */ Hypervisor;
    struct
    {
      /* 0x0020 */ struct _REGISTERED_IOMMU* Iommu;
      /* 0x0028 */ struct _EXT_IOMMU_DEVICE* ExtDevice;
      /* 0x0030 */ unsigned __int64 SourceId;
      /* 0x0038 */ unsigned long AtsReferenceCount;
      /* 0x003c */ unsigned long InvalidationQueueDepth;
      /* 0x0040 */ struct _EX_RUNDOWN_REF DeviceActive;
    } /* size: 0x0028 */ Native;
  }; /* size: 0x0028 */
  /* 0x0048 */ struct _IOMMU_INTERFACE_CALLBACK_RECORD* InterfaceCallbackRecord;
  /* 0x0050 */ unsigned char DpptException;
  /* 0x0051 */ char Padding_316[7];
  /* 0x0058 */ struct _IOMMU_TRACKED_DEVICE* SvmDevice;
  /* 0x0060 */ void* FaultHandler /* function */;
  /* 0x0068 */ void* FaultContext;
  /* 0x0070 */ struct _FAULT_INFORMATION FaultInfo;
  /* 0x00a8 */ struct _KDPC FaultDpc;
  /* 0x00e8 */ struct _WORK_QUEUE_ITEM FaultWorkItem;
  /* 0x0108 */ unsigned char PasidFaultsSuppressed;
  /* 0x0109 */ unsigned char PasidTaggedDmaEnabled;
  /* 0x010a */ unsigned char DefaultPasidEnabled;
  /* 0x010b */ char Padding_317[5];
  /* 0x0110 */ struct _IOMMU_BUS_INTERFACE IommuInterface;
  /* 0x0160 */ unsigned long PasidDomainId;
  /* 0x0164 */ long Padding_318;
  /* 0x0168 */ struct _LIST_ENTRY PasidDevicesList;
  /* 0x0178 */ struct _EX_PUSH_LOCK PasidDevicesListLock;
  /* 0x0180 */ union _IOMMU_SVM_CAPABILITIES SvmCapControl;
  /* 0x0184 */ enum _IOMMU_DMA_DEVICE_CREATION_STATE CreationStateInitial;
  /* 0x0188 */ enum _IOMMU_DMA_DEVICE_CREATION_STATE CreationStateCurrent;
  /* 0x018c */ long Padding_319;
  /* 0x0190 */ struct _LIST_ENTRY DomainDmaDeviceEntry;
} IOMMU_DMA_DEVICE, *PIOMMU_DMA_DEVICE; /* size: 0x01a0 */

typedef struct _HEAP_LFH_FAST_REF
{
  union
  {
    /* 0x0000 */ void* Target;
    /* 0x0000 */ unsigned __int64 Value;
    /* 0x0000 */ unsigned __int64 RefCount : 12; /* bit position: 0 */
  }; /* size: 0x0008 */
} HEAP_LFH_FAST_REF, *PHEAP_LFH_FAST_REF; /* size: 0x0008 */

typedef struct _HEAP_LFH_AFFINITY_SLOT
{
  /* 0x0000 */ struct _HEAP_LFH_SUBSEGMENT_OWNER State;
  /* 0x0038 */ struct _HEAP_LFH_FAST_REF ActiveSubsegment;
} HEAP_LFH_AFFINITY_SLOT, *PHEAP_LFH_AFFINITY_SLOT; /* size: 0x0040 */

typedef struct _WHEA_RECOVERY_CONTEXT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned __int64 Address;
      /* 0x0008 */ unsigned char Consumed;
      /* 0x0009 */ char Padding_320;
      /* 0x000a */ unsigned short ErrorCode;
      /* 0x000c */ unsigned char ErrorIpValid;
      /* 0x000d */ unsigned char RestartIpValid;
      /* 0x000e */ unsigned char ClearPoison;
      /* 0x000f */ char __PADDING__[1];
    } /* size: 0x0010 */ MemoryError;
    struct
    {
      /* 0x0000 */ unsigned __int64 PmemErrInfo;
    } /* size: 0x0008 */ PmemError;
  }; /* size: 0x0010 */
  /* 0x0010 */ unsigned __int64 PartitionId;
  /* 0x0018 */ unsigned int VpIndex;
  /* 0x001c */ enum _WHEA_RECOVERY_CONTEXT_ERROR_TYPE ErrorType;
  /* 0x0020 */ unsigned long PageCount;
  /* 0x0024 */ struct _WHEA_RECOVERY_CONTEXT_PAGE_INFO PageInfo[256];
  /* 0x1824 */ long __PADDING__[1];
} WHEA_RECOVERY_CONTEXT, *PWHEA_RECOVERY_CONTEXT; /* size: 0x1828 */

typedef struct _HEAP_DESCRIPTOR_KEY
{
  union
  {
    /* 0x0000 */ unsigned long Key;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long EncodedCommittedPageCount : 16; /* bit position: 0 */
      /* 0x0000 */ unsigned long LargePageCost : 8; /* bit position: 16 */
      /* 0x0000 */ unsigned long UnitCount : 8; /* bit position: 24 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} HEAP_DESCRIPTOR_KEY, *PHEAP_DESCRIPTOR_KEY; /* size: 0x0004 */

typedef struct _HEAP_PAGE_RANGE_DESCRIPTOR
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE TreeNode;
    struct
    {
      /* 0x0000 */ unsigned long TreeSignature;
      /* 0x0004 */ unsigned long UnusedBytes;
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned short ExtraPresent : 1; /* bit position: 0 */
        /* 0x0008 */ unsigned short Spare0 : 15; /* bit position: 1 */
      }; /* bitfield */
    }; /* size: 0x000a */
  }; /* size: 0x0018 */
  /* 0x0018 */ volatile unsigned char RangeFlags;
  /* 0x0019 */ unsigned char CommittedPageCount;
  /* 0x001a */ unsigned char UnitOffset;
  /* 0x001b */ unsigned char Spare;
  union
  {
    /* 0x001c */ struct _HEAP_DESCRIPTOR_KEY Key;
    struct
    {
      /* 0x001c */ unsigned char Align[3];
      /* 0x001f */ unsigned char UnitSize;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} HEAP_PAGE_RANGE_DESCRIPTOR, *PHEAP_PAGE_RANGE_DESCRIPTOR; /* size: 0x0020 */

typedef union _HEAP_PAGE_SEGMENT
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY ListEntry;
      /* 0x0010 */ unsigned __int64 Signature;
      /* 0x0018 */ union _HEAP_SEGMENT_MGR_COMMIT_STATE* SegmentCommitState;
      /* 0x0020 */ unsigned char UnusedWatermark;
    }; /* size: 0x0021 */
    /* 0x0000 */ struct _HEAP_PAGE_RANGE_DESCRIPTOR DescArray[256];
  }; /* size: 0x2000 */
} HEAP_PAGE_SEGMENT, *PHEAP_PAGE_SEGMENT; /* size: 0x2000 */

typedef union _HEAP_VS_CHUNK_HEADER_SIZE
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long MemoryCost : 16; /* bit position: 0 */
        /* 0x0000 */ unsigned long UnsafeSize : 16; /* bit position: 16 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned long UnsafePrevSize : 16; /* bit position: 0 */
        /* 0x0004 */ unsigned long Allocated : 8; /* bit position: 16 */
      }; /* bitfield */
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned short KeyUShort;
    /* 0x0000 */ unsigned long KeyULong;
    /* 0x0000 */ unsigned __int64 HeaderBits;
  }; /* size: 0x0008 */
} HEAP_VS_CHUNK_HEADER_SIZE, *PHEAP_VS_CHUNK_HEADER_SIZE; /* size: 0x0008 */

typedef struct _HEAP_VS_CHUNK_HEADER
{
  /* 0x0000 */ union _HEAP_VS_CHUNK_HEADER_SIZE Sizes;
  union
  {
    struct /* bitfield */
    {
      /* 0x0008 */ unsigned long EncodedSegmentPageOffset : 8; /* bit position: 0 */
      /* 0x0008 */ unsigned long UnusedBytes : 1; /* bit position: 8 */
      /* 0x0008 */ unsigned long SkipDuringWalk : 1; /* bit position: 9 */
      /* 0x0008 */ unsigned long Spare : 22; /* bit position: 10 */
    }; /* bitfield */
    /* 0x0008 */ unsigned long AllocatedChunkBits;
  }; /* size: 0x0004 */
  /* 0x000c */ long __PADDING__[1];
} HEAP_VS_CHUNK_HEADER, *PHEAP_VS_CHUNK_HEADER; /* size: 0x0010 */

typedef struct _PPM_VETO_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ unsigned long VetoReason;
  /* 0x0014 */ unsigned long ReferenceCount;
  /* 0x0018 */ unsigned __int64 HitCount;
  /* 0x0020 */ unsigned __int64 LastActivationTime;
  /* 0x0028 */ unsigned __int64 TotalActiveTime;
  /* 0x0030 */ unsigned __int64 CsActivationTime;
  /* 0x0038 */ unsigned __int64 CsActiveTime;
} PPM_VETO_ENTRY, *PPPM_VETO_ENTRY; /* size: 0x0040 */

typedef struct _REGISTERED_INTERRUPT_CONTROLLER
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ void* InternalData;
  /* 0x0018 */ unsigned long InternalDataSize;
  /* 0x001c */ long Padding_321;
  /* 0x0020 */ struct _INTERRUPT_FUNCTION_TABLE FunctionTable;
  /* 0x00f0 */ enum _KNOWN_CONTROLLER_TYPE KnownType;
  /* 0x00f4 */ unsigned long Capabilities;
  /* 0x00f8 */ unsigned long Flags;
  /* 0x00fc */ unsigned long MaxPriority;
  /* 0x0100 */ unsigned long UnitId;
  /* 0x0104 */ long Padding_322;
  /* 0x0108 */ struct _LIST_ENTRY LinesHead;
  /* 0x0118 */ struct _LIST_ENTRY OutputLinesHead;
  /* 0x0128 */ long MinLine;
  /* 0x012c */ long MaxLine;
  /* 0x0130 */ unsigned long MaxClusterSize;
  /* 0x0134 */ unsigned long MaxClusters;
  /* 0x0138 */ unsigned long InterruptReplayDataSize;
  /* 0x013c */ enum _INTERRUPT_PROBLEM Problem;
  /* 0x0140 */ long ProblemStatus;
  /* 0x0144 */ long Padding_323;
  /* 0x0148 */ const char* ProblemSourceFile;
  /* 0x0150 */ unsigned long ProblemSourceLine;
  /* 0x0154 */ unsigned long CustomProblem;
  /* 0x0158 */ long CustomProblemStatus;
  /* 0x015c */ long Padding_324;
  /* 0x0160 */ struct _UNICODE_STRING ResourceId;
  /* 0x0170 */ struct POHANDLE__* PowerHandle;
} REGISTERED_INTERRUPT_CONTROLLER, *PREGISTERED_INTERRUPT_CONTROLLER; /* size: 0x0178 */

typedef struct _PPM_SELECTION_DEPENDENCY
{
  /* 0x0000 */ unsigned long Processor;
  /* 0x0004 */ long Padding_325;
  /* 0x0008 */ struct _PPM_SELECTION_MENU Menu;
} PPM_SELECTION_DEPENDENCY, *PPPM_SELECTION_DEPENDENCY; /* size: 0x0018 */

typedef struct _MMEXTEND_INFO
{
  /* 0x0000 */ unsigned __int64 CommittedSize;
  /* 0x0008 */ unsigned long ReferenceCount;
  /* 0x000c */ long __PADDING__[1];
} MMEXTEND_INFO, *PMMEXTEND_INFO; /* size: 0x0010 */

typedef struct _HEAP_VS_UNUSED_BYTES_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UnusedBytes : 13; /* bit position: 0 */
      /* 0x0000 */ unsigned short LfhSubsegment : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned short ExtraPresent : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned short OneByteUnused : 1; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char Bytes[2];
  }; /* size: 0x0002 */
} HEAP_VS_UNUSED_BYTES_INFO, *PHEAP_VS_UNUSED_BYTES_INFO; /* size: 0x0002 */

typedef struct _HEAP_FREE_ENTRY_EXTRA
{
  /* 0x0000 */ unsigned short TagIndex;
  /* 0x0002 */ unsigned short FreeBackTraceIndex;
} HEAP_FREE_ENTRY_EXTRA, *PHEAP_FREE_ENTRY_EXTRA; /* size: 0x0004 */

typedef struct _STACK_TABLE
{
  /* 0x0000 */ unsigned short NumStackTraces;
  /* 0x0002 */ unsigned short TraceCapacity;
  /* 0x0004 */ long Padding_326;
  /* 0x0008 */ struct _OBJECT_REF_TRACE* StackTrace[16];
  /* 0x0088 */ unsigned short StackTableHash[16381];
  /* 0x8082 */ char __PADDING__[6];
} STACK_TABLE, *PSTACK_TABLE; /* size: 0x8088 */

typedef struct _PROC_IDLE_STATE_ACCOUNTING
{
  /* 0x0000 */ unsigned __int64 TotalTime;
  /* 0x0008 */ unsigned long CancelCount;
  /* 0x000c */ unsigned long FailureCount;
  /* 0x0010 */ unsigned long SuccessCount;
  /* 0x0014 */ unsigned long InvalidBucketIndex;
  /* 0x0018 */ unsigned __int64 MinTime;
  /* 0x0020 */ unsigned __int64 MaxTime;
  /* 0x0028 */ struct _PPM_SELECTION_STATISTICS SelectionStatistics;
  /* 0x00b8 */ struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];
} PROC_IDLE_STATE_ACCOUNTING, *PPROC_IDLE_STATE_ACCOUNTING; /* size: 0x03f8 */

typedef struct _PROC_FEEDBACK_COUNTER
{
  union
  {
    /* 0x0000 */ void* InstantaneousRead /* function */;
    /* 0x0000 */ void* DifferentialRead /* function */;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned __int64 LastActualCount;
  /* 0x0010 */ unsigned __int64 LastReferenceCount;
  /* 0x0018 */ unsigned long CachedValue;
  /* 0x001c */ long Padding_327;
  /* 0x0020 */ unsigned char Affinitized;
  /* 0x0021 */ unsigned char Differential;
  /* 0x0022 */ unsigned char DiscardIdleTime;
  /* 0x0023 */ char Padding_328;
  /* 0x0024 */ unsigned long Scaling;
  /* 0x0028 */ unsigned __int64 Context;
} PROC_FEEDBACK_COUNTER, *PPROC_FEEDBACK_COUNTER; /* size: 0x0030 */

typedef struct _VF_ADDRESS_RANGE
{
  /* 0x0000 */ unsigned char* Start;
  /* 0x0008 */ unsigned char* End;
} VF_ADDRESS_RANGE, *PVF_ADDRESS_RANGE; /* size: 0x0010 */

typedef struct _EXP_POOL_CONTEXT_HEADER
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ enum _EXP_POOL_CONTEXT_TYPE ContextType;
} EXP_POOL_CONTEXT_HEADER, *PEXP_POOL_CONTEXT_HEADER; /* size: 0x0008 */

typedef struct _EXP_POOL_CONTEXT
{
  /* 0x0000 */ struct _EXP_POOL_CONTEXT_HEADER Header;
  /* 0x0008 */ struct RTL_HP_ENV_HANDLE EnvHandle;
  /* 0x0018 */ struct _EX_RUNDOWN_REF Rundown;
  /* 0x0020 */ struct _LIST_ENTRY PoolLink;
  /* 0x0030 */ unsigned __int64 Tag;
  /* 0x0038 */ struct _UNICODE_STRING Name;
  /* 0x0048 */ unsigned long NodeCount;
  /* 0x004c */ long Padding_329;
  /* 0x0050 */ struct _SEGMENT_HEAP* Node[1];
} EXP_POOL_CONTEXT, *PEXP_POOL_CONTEXT; /* size: 0x0058 */

typedef struct _POP_FX_WORK_ORDER
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0020 */ long WorkCount;
  /* 0x0024 */ long Padding_330;
  /* 0x0028 */ void* Context;
  /* 0x0030 */ struct _POP_FX_WORK_ORDER_WATCHDOG_INFO* WatchdogTimerInfo;
} POP_FX_WORK_ORDER, *PPOP_FX_WORK_ORDER; /* size: 0x0038 */

typedef struct _SECONDARY_INTERRUPT_PROVIDER_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ long Padding_331;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ unsigned long GsivBase;
  /* 0x0014 */ unsigned short GsivSize;
  /* 0x0016 */ char Padding_332[2];
  /* 0x0018 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0020 */ void* Reserved1;
  /* 0x0028 */ void* Reserved2;
  /* 0x0030 */ void* Reserved3;
  /* 0x0038 */ void* Reserved4;
  /* 0x0040 */ void* Reserved5;
  /* 0x0048 */ void* Reserved6;
  /* 0x0050 */ void* Reserved7;
} SECONDARY_INTERRUPT_PROVIDER_INTERFACE, *PSECONDARY_INTERRUPT_PROVIDER_INTERFACE; /* size: 0x0058 */

typedef struct __WIL__WNF_TYPE_ID
{
  /* 0x0000 */ struct _GUID TypeId;
} _WIL__WNF_TYPE_ID, *P_WIL__WNF_TYPE_ID; /* size: 0x0010 */

typedef struct _PROC_IDLE_ACCOUNTING
{
  /* 0x0000 */ unsigned long StateCount;
  /* 0x0004 */ unsigned long TotalTransitions;
  /* 0x0008 */ unsigned long ResetCount;
  /* 0x000c */ unsigned long AbortCount;
  /* 0x0010 */ unsigned __int64 StartTime;
  /* 0x0018 */ unsigned __int64 PriorIdleTime;
  /* 0x0020 */ enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;
  /* 0x0024 */ long Padding_333;
  /* 0x0028 */ struct _PROC_IDLE_STATE_ACCOUNTING State[1];
} PROC_IDLE_ACCOUNTING, *PPROC_IDLE_ACCOUNTING; /* size: 0x0420 */

typedef struct _POP_FX_ACTIVE_TIME_ACCOUNTING
{
  /* 0x0000 */ unsigned __int64 Total;
  /* 0x0008 */ unsigned __int64 Unattributed;
  /* 0x0010 */ unsigned __int64 Buckets[5];
  /* 0x0038 */ unsigned __int64 PerBucket[5];
} POP_FX_ACTIVE_TIME_ACCOUNTING, *PPOP_FX_ACTIVE_TIME_ACCOUNTING; /* size: 0x0060 */

union RTLP_HP_LFH_PERF_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long HotspotDetection : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long LfhSubsegmentPrefetch : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long ThreadPrivateSlot : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long EnableGarbageCollection : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long OpportunisticLargePreCommit : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long LfhForcedAffinity : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long LfhConservativeAffinity : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long LfhCachelinePadding : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long LfhSubsegmentHeat : 2; /* bit position: 8 */
      /* 0x0000 */ unsigned long SegCachedCommitLimitRatio : 2; /* bit position: 10 */
      /* 0x0000 */ unsigned long HotSubsegmentSizeShift : 2; /* bit position: 12 */
      /* 0x0000 */ unsigned long HotThresholdHighShift : 2; /* bit position: 14 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AllFlags;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct POHANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _POOL_TRACKER_TABLE
{
  /* 0x0000 */ volatile long Key;
  /* 0x0004 */ long Padding_334;
  /* 0x0008 */ unsigned __int64 NonPagedBytes;
  /* 0x0010 */ unsigned __int64 NonPagedAllocs;
  /* 0x0018 */ unsigned __int64 NonPagedFrees;
  /* 0x0020 */ unsigned __int64 PagedBytes;
  /* 0x0028 */ unsigned __int64 PagedAllocs;
  /* 0x0030 */ unsigned __int64 PagedFrees;
  /* 0x0038 */ __int64 AvailableLimit[2];
  /* 0x0048 */ struct _POOL_LIMIT_TABLE_ENTRY* LimitInfo;
} POOL_TRACKER_TABLE, *PPOOL_TRACKER_TABLE; /* size: 0x0050 */

typedef struct _SK_CRASH_MODULE
{
  /* 0x0000 */ wchar_t ImageName[32];
  /* 0x0040 */ unsigned long SizeOfImage;
  /* 0x0044 */ unsigned long TimeDateStamp;
} SK_CRASH_MODULE, *PSK_CRASH_MODULE; /* size: 0x0048 */

typedef struct _SK_CRASH_STACK_FRAME
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long ModuleId;
      /* 0x0004 */ unsigned long Rva;
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 Pc;
  }; /* size: 0x0008 */
} SK_CRASH_STACK_FRAME, *PSK_CRASH_STACK_FRAME; /* size: 0x0008 */

typedef struct _SK_CRASH_MINIDUMP
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ unsigned long ModuleCount;
  /* 0x000c */ unsigned long FrameCount;
  /* 0x0010 */ struct _SK_CRASH_MODULE Modules[16];
  /* 0x0490 */ struct _SK_CRASH_STACK_FRAME StackFrames[366];
} SK_CRASH_MINIDUMP, *PSK_CRASH_MINIDUMP; /* size: 0x1000 */

typedef struct _OBJECT_REF_TRACE
{
  /* 0x0000 */ void* StackTrace[16];
} OBJECT_REF_TRACE, *POBJECT_REF_TRACE; /* size: 0x0080 */

typedef struct _INTERRUPT_REMAPPING_INFO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long IrtIndex : 30; /* bit position: 0 */
    /* 0x0000 */ unsigned long FlagHalInternal : 1; /* bit position: 30 */
    /* 0x0000 */ unsigned long FlagTranslated : 1; /* bit position: 31 */
  }; /* bitfield */
  union
  {
    struct
    {
      /* 0x0004 */ unsigned long MessageAddressHigh;
      /* 0x0008 */ unsigned long MessageAddressLow;
      /* 0x000c */ unsigned long MessageData;
    } /* size: 0x000c */ Msi;
  } /* size: 0x000c */ u;
} INTERRUPT_REMAPPING_INFO, *PINTERRUPT_REMAPPING_INFO; /* size: 0x0010 */

typedef struct _INTERRUPT_HT_INTR_INFO
{
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned long Mask : 1; /* bit position: 0 */
          /* 0x0000 */ unsigned long Polarity : 1; /* bit position: 1 */
          /* 0x0000 */ unsigned long MessageType : 3; /* bit position: 2 */
          /* 0x0000 */ unsigned long RequestEOI : 1; /* bit position: 5 */
          /* 0x0000 */ unsigned long DestinationMode : 1; /* bit position: 6 */
          /* 0x0000 */ unsigned long MessageType3 : 1; /* bit position: 7 */
          /* 0x0000 */ unsigned long Destination : 8; /* bit position: 8 */
          /* 0x0000 */ unsigned long Vector : 8; /* bit position: 16 */
          /* 0x0000 */ unsigned long ExtendedAddress : 8; /* bit position: 24 */
        }; /* bitfield */
      } /* size: 0x0004 */ bits;
      /* 0x0000 */ unsigned long AsULONG;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ LowPart;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long ExtendedDestination : 24; /* bit position: 0 */
          /* 0x0004 */ unsigned long Reserved : 6; /* bit position: 24 */
          /* 0x0004 */ unsigned long PassPW : 1; /* bit position: 30 */
          /* 0x0004 */ unsigned long WaitingForEOI : 1; /* bit position: 31 */
        }; /* bitfield */
      } /* size: 0x0004 */ bits;
      /* 0x0004 */ unsigned long AsULONG;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ HighPart;
} INTERRUPT_HT_INTR_INFO, *PINTERRUPT_HT_INTR_INFO; /* size: 0x0008 */

typedef struct _INTERRUPT_VECTOR_DATA
{
  /* 0x0000 */ enum INTERRUPT_CONNECTION_TYPE Type;
  /* 0x0004 */ unsigned long Vector;
  /* 0x0008 */ unsigned char Irql;
  /* 0x0009 */ char Padding_335[3];
  /* 0x000c */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x0010 */ enum _KINTERRUPT_MODE Mode;
  /* 0x0014 */ long Padding_336;
  /* 0x0018 */ struct _GROUP_AFFINITY TargetProcessors;
  /* 0x0028 */ struct _INTERRUPT_REMAPPING_INFO IntRemapInfo;
  struct
  {
    /* 0x0038 */ unsigned long Gsiv;
    struct /* bitfield */
    {
      /* 0x003c */ unsigned long WakeInterrupt : 1; /* bit position: 0 */
      /* 0x003c */ unsigned long ReservedFlags : 31; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0008 */ ControllerInput;
  /* 0x0040 */ unsigned __int64 HvDeviceId;
  union
  {
    struct
    {
      /* 0x0048 */ union _LARGE_INTEGER Address;
      /* 0x0050 */ unsigned long DataPayload;
      /* 0x0054 */ long __PADDING__[1];
    } /* size: 0x0010 */ XapicMessage;
    struct
    {
      /* 0x0048 */ struct _INTERRUPT_HT_INTR_INFO IntrInfo;
    } /* size: 0x0008 */ Hypertransport;
    struct
    {
      /* 0x0048 */ union _LARGE_INTEGER Address;
      /* 0x0050 */ unsigned long DataPayload;
      /* 0x0054 */ long __PADDING__[1];
    } /* size: 0x0010 */ GenericMessage;
    struct
    {
      struct
      {
        /* 0x0048 */ enum HAL_APIC_DESTINATION_MODE DestinationMode;
      } /* size: 0x0004 */ MessageRequest;
      /* 0x004c */ long __PADDING__[3];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} INTERRUPT_VECTOR_DATA, *PINTERRUPT_VECTOR_DATA; /* size: 0x0058 */

typedef struct _SEP_TOKEN_PRIVILEGES
{
  /* 0x0000 */ unsigned __int64 Present;
  /* 0x0008 */ unsigned __int64 Enabled;
  /* 0x0010 */ unsigned __int64 EnabledByDefault;
} SEP_TOKEN_PRIVILEGES, *PSEP_TOKEN_PRIVILEGES; /* size: 0x0018 */

typedef struct _TOKEN_AUDIT_POLICY
{
  /* 0x0000 */ unsigned char PerUserPolicy[30];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY; /* size: 0x001e */

typedef struct _SEP_AUDIT_POLICY
{
  /* 0x0000 */ struct _TOKEN_AUDIT_POLICY AdtTokenPolicy;
  /* 0x001e */ unsigned char PolicySetStatus;
} SEP_AUDIT_POLICY, *PSEP_AUDIT_POLICY; /* size: 0x001f */

typedef struct _SID_AND_ATTRIBUTES_HASH
{
  /* 0x0000 */ unsigned long SidCount;
  /* 0x0004 */ long Padding_337;
  /* 0x0008 */ struct _SID_AND_ATTRIBUTES* SidAttr;
  /* 0x0010 */ unsigned __int64 Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH; /* size: 0x0110 */

typedef struct _TOKEN
{
  /* 0x0000 */ struct _TOKEN_SOURCE TokenSource;
  /* 0x0010 */ struct _LUID TokenId;
  /* 0x0018 */ struct _LUID AuthenticationId;
  /* 0x0020 */ struct _LUID ParentTokenId;
  /* 0x0028 */ union _LARGE_INTEGER ExpirationTime;
  /* 0x0030 */ struct _ERESOURCE* TokenLock;
  /* 0x0038 */ struct _LUID ModifiedId;
  /* 0x0040 */ struct _SEP_TOKEN_PRIVILEGES Privileges;
  /* 0x0058 */ struct _SEP_AUDIT_POLICY AuditPolicy;
  /* 0x0077 */ char Padding_338;
  /* 0x0078 */ unsigned long SessionId;
  /* 0x007c */ unsigned long UserAndGroupCount;
  /* 0x0080 */ unsigned long RestrictedSidCount;
  /* 0x0084 */ unsigned long VariableLength;
  /* 0x0088 */ unsigned long DynamicCharged;
  /* 0x008c */ unsigned long DynamicAvailable;
  /* 0x0090 */ unsigned long DefaultOwnerIndex;
  /* 0x0094 */ long Padding_339;
  /* 0x0098 */ struct _SID_AND_ATTRIBUTES* UserAndGroups;
  /* 0x00a0 */ struct _SID_AND_ATTRIBUTES* RestrictedSids;
  /* 0x00a8 */ void* PrimaryGroup;
  /* 0x00b0 */ unsigned long* DynamicPart;
  /* 0x00b8 */ struct _ACL* DefaultDacl;
  /* 0x00c0 */ enum _TOKEN_TYPE TokenType;
  /* 0x00c4 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x00c8 */ unsigned long TokenFlags;
  /* 0x00cc */ unsigned char TokenInUse;
  /* 0x00cd */ char Padding_340[3];
  /* 0x00d0 */ unsigned long IntegrityLevelIndex;
  /* 0x00d4 */ unsigned long MandatoryPolicy;
  /* 0x00d8 */ struct _SEP_LOGON_SESSION_REFERENCES* LogonSession;
  /* 0x00e0 */ struct _LUID OriginatingLogonSession;
  /* 0x00e8 */ struct _SID_AND_ATTRIBUTES_HASH SidHash;
  /* 0x01f8 */ struct _SID_AND_ATTRIBUTES_HASH RestrictedSidHash;
  /* 0x0308 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pSecurityAttributes;
  /* 0x0310 */ void* Package;
  /* 0x0318 */ struct _SID_AND_ATTRIBUTES* Capabilities;
  /* 0x0320 */ unsigned long CapabilityCount;
  /* 0x0324 */ long Padding_341;
  /* 0x0328 */ struct _SID_AND_ATTRIBUTES_HASH CapabilitiesHash;
  /* 0x0438 */ struct _SEP_LOWBOX_NUMBER_ENTRY* LowboxNumberEntry;
  /* 0x0440 */ struct _SEP_CACHED_HANDLES_ENTRY* LowboxHandlesEntry;
  /* 0x0448 */ struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION* pClaimAttributes;
  /* 0x0450 */ void* TrustLevelSid;
  /* 0x0458 */ struct _TOKEN* TrustLinkedToken;
  /* 0x0460 */ void* IntegrityLevelSidValue;
  /* 0x0468 */ struct _SEP_SID_VALUES_BLOCK* TokenSidValues;
  /* 0x0470 */ struct _SEP_LUID_TO_INDEX_MAP_ENTRY* IndexEntry;
  /* 0x0478 */ struct _SEP_TOKEN_DIAG_TRACK_ENTRY* DiagnosticInfo;
  /* 0x0480 */ struct _SEP_CACHED_HANDLES_ENTRY* BnoIsolationHandlesEntry;
  /* 0x0488 */ void* SessionObject;
  /* 0x0490 */ unsigned __int64 VariablePart;
} TOKEN, *PTOKEN; /* size: 0x0498 */

typedef struct _MI_FILLED_COMMON_PAGE_STATE
{
  /* 0x0000 */ unsigned __int64 PageFrameIndex[4];
  /* 0x0020 */ void* LeafMapping;
  /* 0x0028 */ unsigned __int64 LeafCrc;
  /* 0x0030 */ struct _MMPTE PdeContents;
} MI_FILLED_COMMON_PAGE_STATE, *PMI_FILLED_COMMON_PAGE_STATE; /* size: 0x0038 */

typedef union _AER_ENDPOINT_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UncorrectableErrorMaskRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short UncorrectableErrorSeverityRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short CorrectableErrorMaskRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short AdvancedCapsAndControlRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short Reserved : 12; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} AER_ENDPOINT_DESCRIPTOR_FLAGS, *PAER_ENDPOINT_DESCRIPTOR_FLAGS; /* size: 0x0002 */

typedef struct _MI_IO_CACHE_STATS
{
  /* 0x0000 */ unsigned long UnmappedCacheFlush;
  /* 0x0004 */ unsigned long UnmappedCacheConflict;
  /* 0x0008 */ unsigned long PermanentIoAttributeConflict;
  /* 0x000c */ unsigned long PermanentIoNodeConflict;
  /* 0x0010 */ unsigned long ExclusionReferenceConflict;
} MI_IO_CACHE_STATS, *PMI_IO_CACHE_STATS; /* size: 0x0014 */

typedef struct _IO_DRIVER_CREATE_CONTEXT
{
  /* 0x0000 */ short Size;
  /* 0x0002 */ char Padding_342[6];
  /* 0x0008 */ struct _ECP_LIST* ExtraCreateParameter;
  /* 0x0010 */ void* DeviceObjectHint;
  /* 0x0018 */ struct _TXN_PARAMETER_BLOCK* TxnParameters;
  /* 0x0020 */ struct _EJOB* SiloContext;
} IO_DRIVER_CREATE_CONTEXT, *PIO_DRIVER_CREATE_CONTEXT; /* size: 0x0028 */

typedef struct _OPEN_PACKET
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ long Padding_343;
  /* 0x0008 */ struct _FILE_OBJECT* FileObject;
  /* 0x0010 */ long FinalStatus;
  /* 0x0014 */ long Padding_344;
  /* 0x0018 */ unsigned __int64 Information;
  /* 0x0020 */ unsigned long ParseCheck;
  /* 0x0024 */ long Padding_345;
  union
  {
    /* 0x0028 */ struct _FILE_OBJECT* RelatedFileObject;
    /* 0x0028 */ struct _DEVICE_OBJECT* ReferencedDeviceObject;
  }; /* size: 0x0008 */
  /* 0x0030 */ struct _OBJECT_ATTRIBUTES* OriginalAttributes;
  /* 0x0038 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0040 */ unsigned long CreateOptions;
  /* 0x0044 */ unsigned short FileAttributes;
  /* 0x0046 */ unsigned short ShareAccess;
  /* 0x0048 */ void* EaBuffer;
  /* 0x0050 */ unsigned long EaLength;
  /* 0x0054 */ unsigned long Options;
  /* 0x0058 */ unsigned long Disposition;
  /* 0x005c */ long Padding_346;
  /* 0x0060 */ struct _FILE_BASIC_INFORMATION* BasicInformation;
  /* 0x0068 */ struct _FILE_NETWORK_OPEN_INFORMATION* NetworkInformation;
  /* 0x0070 */ void* FileInformation;
  /* 0x0078 */ enum _CREATE_FILE_TYPE CreateFileType;
  /* 0x007c */ long Padding_347;
  /* 0x0080 */ void* MailslotOrPipeParameters;
  /* 0x0088 */ unsigned char Override;
  /* 0x0089 */ unsigned char QueryOnly;
  /* 0x008a */ unsigned char DeleteOnly;
  /* 0x008b */ unsigned char FullAttributes;
  /* 0x008c */ long Padding_348;
  /* 0x0090 */ struct _DUMMY_FILE_OBJECT* LocalFileObject;
  /* 0x0098 */ unsigned long InternalFlags;
  /* 0x009c */ char AccessMode;
  /* 0x009d */ char Padding_349[3];
  /* 0x00a0 */ struct _IO_DRIVER_CREATE_CONTEXT DriverCreateContext;
  /* 0x00c8 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
  /* 0x00cc */ unsigned long FileInformationLength;
  /* 0x00d0 */ unsigned char FilterQuery;
  /* 0x00d1 */ char Padding_350[7];
  /* 0x00d8 */ __int64 ExtendedCreateFlags;
} OPEN_PACKET, *POPEN_PACKET; /* size: 0x00e0 */

typedef struct _DEVICE_OBJECT_POWER_EXTENSION
{
  /* 0x0000 */ volatile unsigned long IdleCount;
  /* 0x0004 */ volatile unsigned long BusyCount;
  /* 0x0008 */ volatile unsigned long BusyReference;
  /* 0x000c */ unsigned long TotalBusyCount;
  /* 0x0010 */ unsigned long ConservationIdleTime;
  /* 0x0014 */ unsigned long PerformanceIdleTime;
  /* 0x0018 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0020 */ struct _LIST_ENTRY IdleList;
  /* 0x0030 */ enum _POP_DEVICE_IDLE_TYPE IdleType;
  /* 0x0034 */ enum _DEVICE_POWER_STATE IdleState;
  /* 0x0038 */ enum _DEVICE_POWER_STATE CurrentState;
  /* 0x003c */ long Padding_351;
  /* 0x0040 */ struct _POP_COOLING_EXTENSION* CoolingExtension;
  /* 0x0048 */ struct _POP_POWER_LIMIT_EXTENSION* PowerLimitExtension;
  /* 0x0050 */ struct _LIST_ENTRY Volume;
  union
  {
    struct
    {
      /* 0x0060 */ unsigned long IdleTime;
      /* 0x0064 */ unsigned long NonIdleTime;
    } /* size: 0x0008 */ Disk;
  } /* size: 0x0008 */ Specific;
} DEVICE_OBJECT_POWER_EXTENSION, *PDEVICE_OBJECT_POWER_EXTENSION; /* size: 0x0068 */

typedef struct _HALP_DMA_CHANNEL
{
  /* 0x0000 */ unsigned long ChannelNumber;
  /* 0x0004 */ unsigned char Initialized;
  /* 0x0005 */ unsigned char Busy;
  /* 0x0006 */ unsigned char Complete;
  /* 0x0007 */ char Padding_352;
  /* 0x0008 */ void* CurrentCompletionRoutine /* function */;
  /* 0x0010 */ void* CurrentCompletionContext;
  /* 0x0018 */ struct _ADAPTER_OBJECT* CurrentChildAdapter;
  /* 0x0020 */ enum _DMA_INTERRUPT_TYPE CurrentInterruptType;
  /* 0x0024 */ long Padding_353;
  /* 0x0028 */ struct _KDPC Dpc;
  /* 0x0068 */ unsigned char GeneratesInterrupt;
  /* 0x0069 */ char Padding_354[3];
  /* 0x006c */ long Gsi;
  /* 0x0070 */ enum _KINTERRUPT_POLARITY InterruptPolarity;
  /* 0x0074 */ enum _KINTERRUPT_MODE InterruptMode;
  /* 0x0078 */ unsigned long CommonBufferLength;
  /* 0x007c */ long Padding_355;
  /* 0x0080 */ void* CommonBufferVirtualAddress;
  /* 0x0088 */ union _LARGE_INTEGER CommonBufferLogicalAddress;
  /* 0x0090 */ struct _LIST_ENTRY AdapterQueue;
} HALP_DMA_CHANNEL, *PHALP_DMA_CHANNEL; /* size: 0x00a0 */

typedef struct _TRIAGE_POP_FX_DEVICE
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0018 */ struct _TRIAGE_POP_IRP_DATA* IrpData;
  /* 0x0020 */ long Status;
  /* 0x0024 */ long PowerReqCall;
  /* 0x0028 */ long PowerNotReqCall;
  /* 0x002c */ long Padding_356;
  /* 0x0030 */ struct _TRIAGE_DEVICE_NODE* DeviceNode;
} TRIAGE_POP_FX_DEVICE, *PTRIAGE_POP_FX_DEVICE; /* size: 0x0038 */

typedef struct _GIC_ITS
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned short Reserved1;
  /* 0x0004 */ unsigned long Identifier;
  /* 0x0008 */ unsigned __int64 PhysicalAddress;
  /* 0x0010 */ unsigned long Reserved2;
} GIC_ITS, *PGIC_ITS; /* size: 0x0014 */

typedef struct _KPRIQUEUE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ struct _LIST_ENTRY EntryListHead[32];
  /* 0x0218 */ volatile long CurrentCount[32];
  /* 0x0298 */ unsigned long MaximumCount;
  /* 0x029c */ long Padding_357;
  /* 0x02a0 */ struct _LIST_ENTRY ThreadListHead;
} KPRIQUEUE, *PKPRIQUEUE; /* size: 0x02b0 */

typedef struct _DMA_FUNCTION_TABLE
{
  /* 0x0000 */ void* InitializeController /* function */;
  /* 0x0008 */ void* ValidateRequestLineBinding /* function */;
  /* 0x0010 */ void* QueryMaxFragments /* function */;
  /* 0x0018 */ void* ProgramChannel /* function */;
  /* 0x0020 */ void* ConfigureChannel /* function */;
  /* 0x0028 */ void* FlushChannel /* function */;
  /* 0x0030 */ void* HandleInterrupt /* function */;
  /* 0x0038 */ void* ReadDmaCounter /* function */;
  /* 0x0040 */ void* ReportCommonBuffer /* function */;
  /* 0x0048 */ void* CancelTransfer /* function */;
} DMA_FUNCTION_TABLE, *PDMA_FUNCTION_TABLE; /* size: 0x0050 */

typedef struct _HALP_DMA_CONTROLLER
{
  /* 0x0000 */ struct _LIST_ENTRY Controllers;
  /* 0x0010 */ struct _LIST_ENTRY AdapterList;
  /* 0x0020 */ unsigned long ControllerId;
  /* 0x0024 */ unsigned long MinimumRequestLine;
  /* 0x0028 */ unsigned long MaximumRequestLine;
  /* 0x002c */ unsigned long ChannelCount;
  /* 0x0030 */ unsigned long ScatterGatherLimit;
  /* 0x0034 */ long Padding_358;
  /* 0x0038 */ struct _HALP_DMA_CHANNEL* Channels;
  /* 0x0040 */ void* ExtensionData;
  /* 0x0048 */ unsigned char CacheCoherent;
  /* 0x0049 */ char Padding_359[3];
  /* 0x004c */ unsigned long DmaAddressWidth;
  /* 0x0050 */ struct _DMA_FUNCTION_TABLE Operations;
  /* 0x00a0 */ unsigned long SupportedPortWidths;
  /* 0x00a4 */ unsigned long MinimumTransferUnit;
  /* 0x00a8 */ unsigned __int64 Lock;
  /* 0x00b0 */ unsigned char Irql;
  /* 0x00b1 */ unsigned char GeneratesInterrupt;
  /* 0x00b2 */ char Padding_360[2];
  /* 0x00b4 */ long Gsi;
  /* 0x00b8 */ enum _KINTERRUPT_POLARITY InterruptPolarity;
  /* 0x00bc */ enum _KINTERRUPT_MODE InterruptMode;
  /* 0x00c0 */ struct _UNICODE_STRING ResourceId;
  /* 0x00d0 */ struct POHANDLE__* PowerHandle;
  /* 0x00d8 */ unsigned char PowerActive;
  /* 0x00d9 */ char __PADDING__[7];
} HALP_DMA_CONTROLLER, *PHALP_DMA_CONTROLLER; /* size: 0x00e0 */

typedef struct _MI_SLAB_TYPE_IDENTIFIER
{
  /* 0x0000 */ unsigned char SlabType;
  struct /* bitfield */
  {
    /* 0x0001 */ unsigned char SlabIdentity : 7; /* bit position: 0 */
    /* 0x0001 */ unsigned char ChargesAcquired : 1; /* bit position: 7 */
  }; /* bitfield */
} MI_SLAB_TYPE_IDENTIFIER, *PMI_SLAB_TYPE_IDENTIFIER; /* size: 0x0002 */

typedef struct _PNP_DEVICE_EVENT_LIST
{
  /* 0x0000 */ long Status;
  /* 0x0004 */ long Padding_361;
  /* 0x0008 */ struct _KMUTANT EventQueueMutex;
  /* 0x0040 */ struct _FAST_MUTEX Lock;
  /* 0x0078 */ struct _LIST_ENTRY List;
} PNP_DEVICE_EVENT_LIST, *PPNP_DEVICE_EVENT_LIST; /* size: 0x0088 */

typedef struct _PO_NOTIFY_ORDER_LEVEL
{
  /* 0x0000 */ unsigned long DeviceCount;
  /* 0x0004 */ unsigned long ActiveCount;
  /* 0x0008 */ struct _LIST_ENTRY WaitSleep;
  /* 0x0018 */ struct _LIST_ENTRY ReadySleep;
  /* 0x0028 */ struct _LIST_ENTRY ReadyS0;
  /* 0x0038 */ struct _LIST_ENTRY WaitS0;
} PO_NOTIFY_ORDER_LEVEL, *PPO_NOTIFY_ORDER_LEVEL; /* size: 0x0048 */

typedef union _WHEA_EVENT_LOG_ENTRY_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Reserved1 : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long LogInternalEtw : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long LogBlackbox : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long LogSel : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long RawSel : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long NoFormat : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Driver : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long Reserved2 : 25; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_EVENT_LOG_ENTRY_FLAGS, *PWHEA_EVENT_LOG_ENTRY_FLAGS; /* size: 0x0004 */

typedef struct _SYSTEM_POWER_STATE_CONTEXT
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Reserved1 : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned long TargetSystemState : 4; /* bit position: 8 */
      /* 0x0000 */ unsigned long EffectiveSystemState : 4; /* bit position: 12 */
      /* 0x0000 */ unsigned long CurrentSystemState : 4; /* bit position: 16 */
      /* 0x0000 */ unsigned long IgnoreHibernationPath : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned long PseudoTransition : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned long KernelSoftReboot : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned long DirectedDripsTransition : 1; /* bit position: 23 */
      /* 0x0000 */ unsigned long Reserved2 : 8; /* bit position: 24 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long ContextAsUlong;
  }; /* size: 0x0004 */
} SYSTEM_POWER_STATE_CONTEXT, *PSYSTEM_POWER_STATE_CONTEXT; /* size: 0x0004 */

typedef struct _POP_CURRENT_BROADCAST
{
  /* 0x0000 */ unsigned char InProgress;
  /* 0x0001 */ char Padding_362[3];
  /* 0x0004 */ struct _SYSTEM_POWER_STATE_CONTEXT SystemContext;
  /* 0x0008 */ enum POWER_ACTION PowerAction;
  /* 0x000c */ long Padding_363;
  /* 0x0010 */ struct _POP_DEVICE_SYS_STATE* DeviceState;
} POP_CURRENT_BROADCAST, *PPOP_CURRENT_BROADCAST; /* size: 0x0018 */

typedef struct _WHEA_NOTIFICATION_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ union _WHEA_NOTIFICATION_FLAGS Flags;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
      } /* size: 0x0004 */ Polled;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Interrupt;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ LocalInterrupt;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Sci;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Nmi;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Sea;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Sei;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Gsiv;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u;
} WHEA_NOTIFICATION_DESCRIPTOR, *PWHEA_NOTIFICATION_DESCRIPTOR; /* size: 0x001c */

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Reserved;
  /* 0x0003 */ unsigned char Enabled;
  /* 0x0004 */ unsigned long ErrStatusBlockLength;
  /* 0x0008 */ unsigned long RelatedErrorSourceId;
  /* 0x000c */ unsigned char ErrStatusAddressSpaceID;
  /* 0x000d */ unsigned char ErrStatusAddressBitWidth;
  /* 0x000e */ unsigned char ErrStatusAddressBitOffset;
  /* 0x000f */ unsigned char ErrStatusAddressAccessSize;
  /* 0x0010 */ union _LARGE_INTEGER ErrStatusAddress;
  /* 0x0018 */ struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
  /* 0x0034 */ unsigned char ReadAckAddressSpaceID;
  /* 0x0035 */ unsigned char ReadAckAddressBitWidth;
  /* 0x0036 */ unsigned char ReadAckAddressBitOffset;
  /* 0x0037 */ unsigned char ReadAckAddressAccessSize;
  /* 0x0038 */ union _LARGE_INTEGER ReadAckAddress;
  /* 0x0040 */ unsigned __int64 ReadAckPreserveMask;
  /* 0x0048 */ unsigned __int64 ReadAckWriteMask;
} WHEA_GENERIC_ERROR_DESCRIPTOR_V2, *PWHEA_GENERIC_ERROR_DESCRIPTOR_V2; /* size: 0x0050 */

typedef struct _VF_TARGET_VERIFIED_DRIVER_DATA
{
  /* 0x0000 */ struct _VF_SUSPECT_DRIVER_ENTRY* SuspectDriverEntry;
  /* 0x0008 */ void* WMICallback;
  /* 0x0010 */ struct _LIST_ENTRY EtwHandlesListHead;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0020 */ unsigned long MissedEtwRegistration : 1; /* bit position: 0 */
          /* 0x0020 */ unsigned long IsBootDriver : 1; /* bit position: 1 */
          /* 0x0020 */ unsigned long Spare : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ Flags;
      /* 0x0020 */ unsigned long Whole;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0024 */ long Padding_364;
  /* 0x0028 */ unsigned __int64 Signature;
  /* 0x0030 */ unsigned char SeSigningLevel;
  /* 0x0031 */ char Padding_365[15];
  /* 0x0040 */ union _SLIST_HEADER PoolPageHeaders;
  /* 0x0050 */ union _SLIST_HEADER PoolTrackers;
  /* 0x0060 */ struct _LIST_ENTRY DifPluginPerDriverDataContextHead;
  /* 0x0070 */ volatile unsigned long CurrentPagedPoolAllocations;
  /* 0x0074 */ volatile unsigned long CurrentNonPagedPoolAllocations;
  /* 0x0078 */ unsigned long PeakPagedPoolAllocations;
  /* 0x007c */ unsigned long PeakNonPagedPoolAllocations;
  /* 0x0080 */ volatile unsigned __int64 PagedBytes;
  /* 0x0088 */ volatile unsigned __int64 NonPagedBytes;
  /* 0x0090 */ unsigned __int64 PeakPagedBytes;
  /* 0x0098 */ unsigned __int64 PeakNonPagedBytes;
  /* 0x00a0 */ unsigned long RaiseIrqls;
  /* 0x00a4 */ unsigned long AcquireSpinLocks;
  /* 0x00a8 */ unsigned long SynchronizeExecutions;
  /* 0x00ac */ unsigned long AllocationsWithNoTag;
  /* 0x00b0 */ unsigned long AllocationsFailed;
  /* 0x00b4 */ unsigned long AllocationsFailedDeliberately;
  /* 0x00b8 */ unsigned __int64 LockedBytes;
  /* 0x00c0 */ unsigned __int64 PeakLockedBytes;
  /* 0x00c8 */ unsigned __int64 MappedLockedBytes;
  /* 0x00d0 */ unsigned __int64 PeakMappedLockedBytes;
  /* 0x00d8 */ unsigned __int64 MappedIoSpaceBytes;
  /* 0x00e0 */ unsigned __int64 PeakMappedIoSpaceBytes;
  /* 0x00e8 */ unsigned __int64 PagesForMdlBytes;
  /* 0x00f0 */ unsigned __int64 PeakPagesForMdlBytes;
  /* 0x00f8 */ unsigned __int64 ContiguousMemoryBytes;
  /* 0x0100 */ unsigned __int64 PeakContiguousMemoryBytes;
  /* 0x0108 */ struct _LIST_ENTRY ContiguousMemoryListHead;
  /* 0x0118 */ long __PADDING__[2];
} VF_TARGET_VERIFIED_DRIVER_DATA, *PVF_TARGET_VERIFIED_DRIVER_DATA; /* size: 0x0120 */

typedef struct _PS_MITIGATION_OPTIONS_MAP
{
  /* 0x0000 */ unsigned __int64 Map[3];
} PS_MITIGATION_OPTIONS_MAP, *PPS_MITIGATION_OPTIONS_MAP; /* size: 0x0018 */

typedef struct _PROC_PERF_HISTORY
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long Slot;
  /* 0x0008 */ unsigned long UtilityTotal;
  /* 0x000c */ unsigned long AffinitizedUtilityTotal;
  /* 0x0010 */ unsigned long FrequencyTotal;
  /* 0x0014 */ unsigned long ImportantPercentTotal;
  /* 0x0018 */ unsigned long IdealPercentTotal;
  /* 0x001c */ unsigned long TaggedPercentTotal[4];
  /* 0x002c */ struct _PROC_PERF_HISTORY_ENTRY HistoryList[1];
} PROC_PERF_HISTORY, *PPROC_PERF_HISTORY; /* size: 0x0038 */

struct SYSTEM_POWER_LEVEL
{
  /* 0x0000 */ unsigned char Enable;
  /* 0x0001 */ unsigned char Spare[3];
  /* 0x0004 */ unsigned long BatteryLevel;
  /* 0x0008 */ struct POWER_ACTION_POLICY PowerPolicy;
  /* 0x0014 */ enum _SYSTEM_POWER_STATE MinSystemState;
}; /* size: 0x0018 */

typedef struct _SYSTEM_POWER_POLICY
{
  /* 0x0000 */ unsigned long Revision;
  /* 0x0004 */ struct POWER_ACTION_POLICY PowerButton;
  /* 0x0010 */ struct POWER_ACTION_POLICY SleepButton;
  /* 0x001c */ struct POWER_ACTION_POLICY LidClose;
  /* 0x0028 */ enum _SYSTEM_POWER_STATE LidOpenWake;
  /* 0x002c */ unsigned long Reserved;
  /* 0x0030 */ struct POWER_ACTION_POLICY Idle;
  /* 0x003c */ unsigned long IdleTimeout;
  /* 0x0040 */ unsigned char IdleSensitivity;
  /* 0x0041 */ unsigned char DynamicThrottle;
  /* 0x0042 */ unsigned char Spare2[2];
  /* 0x0044 */ enum _SYSTEM_POWER_STATE MinSleep;
  /* 0x0048 */ enum _SYSTEM_POWER_STATE MaxSleep;
  /* 0x004c */ enum _SYSTEM_POWER_STATE ReducedLatencySleep;
  /* 0x0050 */ unsigned long WinLogonFlags;
  /* 0x0054 */ unsigned long Spare3;
  /* 0x0058 */ unsigned long DozeS4Timeout;
  /* 0x005c */ unsigned long BroadcastCapacityResolution;
  /* 0x0060 */ struct SYSTEM_POWER_LEVEL DischargePolicy[4];
  /* 0x00c0 */ unsigned long VideoTimeout;
  /* 0x00c4 */ unsigned char VideoDimDisplay;
  /* 0x00c5 */ char Padding_366[3];
  /* 0x00c8 */ unsigned long VideoReserved[3];
  /* 0x00d4 */ unsigned long SpindownTimeout;
  /* 0x00d8 */ unsigned char OptimizeForPower;
  /* 0x00d9 */ unsigned char FanThrottleTolerance;
  /* 0x00da */ unsigned char ForcedThrottle;
  /* 0x00db */ unsigned char MinThrottle;
  /* 0x00dc */ struct POWER_ACTION_POLICY OverThrottled;
} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY; /* size: 0x00e8 */

typedef union _POP_FX_DEVICE_STATUS
{
  union
  {
    /* 0x0000 */ long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long SystemTransition : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PepD0Notify : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long IdleTimerOn : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long IgnoreIdleTimeout : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long IrpInUse : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long IrpPending : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long DPNRDeviceNotified : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long DPNRReceivedFromPep : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long IrpFirstPendingIndex : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long IrpLastPendingIndex : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned long SIrpBlocked : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned long BlockFastResume : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned long DirectedPoweredDown : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned long DirectedTransitionInProgress : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned long Reserved : 18; /* bit position: 14 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} POP_FX_DEVICE_STATUS, *PPOP_FX_DEVICE_STATUS; /* size: 0x0004 */

typedef struct _POP_FX_DRIVER_CALLBACKS
{
  /* 0x0000 */ void* ComponentActive /* function */;
  /* 0x0008 */ void* ComponentIdle /* function */;
  /* 0x0010 */ void* ComponentIdleState /* function */;
  /* 0x0018 */ void* DevicePowerRequired /* function */;
  /* 0x0020 */ void* DevicePowerNotRequired /* function */;
  /* 0x0028 */ void* PowerControl /* function */;
  /* 0x0030 */ void* ComponentCriticalTransition /* function */;
  /* 0x0038 */ void* DripsWatchdogCallback /* function */;
  /* 0x0040 */ void* DirectedPowerUpCallback /* function */;
  /* 0x0048 */ void* DirectedPowerDownCallback /* function */;
} POP_FX_DRIVER_CALLBACKS, *PPOP_FX_DRIVER_CALLBACKS; /* size: 0x0050 */

typedef struct _POP_FX_ACCOUNTING
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ unsigned char Active;
  /* 0x0009 */ char Padding_367[3];
  /* 0x000c */ unsigned long DripsRequiredState;
  /* 0x0010 */ enum _POP_FX_ACCOUNTING_MODE AccountingMode;
  /* 0x0014 */ long Padding_368;
  /* 0x0018 */ unsigned __int64 ActiveStamp;
  /* 0x0020 */ struct _POP_FX_ACTIVE_TIME_ACCOUNTING CsActiveTimeAccounting;
  /* 0x0080 */ struct _POP_FX_ACTIVE_TIME_ACCOUNTING CsCriticalActiveTimeAccounting;
} POP_FX_ACCOUNTING, *PPOP_FX_ACCOUNTING; /* size: 0x00e0 */

typedef struct _POP_FX_DRIPS_WATCHDOG_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ unsigned long ComponentIndex;
  /* 0x0014 */ long Padding_369;
  /* 0x0018 */ struct _DEVICE_NODE** ChildDevices;
  /* 0x0020 */ unsigned long ChildDeviceCount;
  /* 0x0024 */ long __PADDING__[1];
} POP_FX_DRIPS_WATCHDOG_CONTEXT, *PPOP_FX_DRIPS_WATCHDOG_CONTEXT; /* size: 0x0028 */

typedef struct _POP_FX_WORK_ORDER_WATCHDOG_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _KTIMER Timer;
  /* 0x0050 */ struct _KDPC Dpc;
  /* 0x0090 */ struct _POP_FX_WORK_ORDER* WorkOrder;
  /* 0x0098 */ struct _PEP_WORK_INFORMATION* CurrentWorkInfo;
  /* 0x00a0 */ unsigned __int64 WatchdogStart;
  /* 0x00a8 */ struct _KTHREAD* WorkerThread;
} POP_FX_WORK_ORDER_WATCHDOG_INFO, *PPOP_FX_WORK_ORDER_WATCHDOG_INFO; /* size: 0x00b0 */

typedef struct _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE
{
  /* 0x0000 */ void* CompletionContext;
  /* 0x0008 */ long CompletionStatus;
  struct /* bitfield */
  {
    /* 0x000c */ unsigned long DIrpPending : 1; /* bit position: 0 */
    /* 0x000c */ unsigned long DIrpCompleted : 1; /* bit position: 1 */
  }; /* bitfield */
} POP_FX_DEVICE_DIRECTED_TRANSITION_STATE, *PPOP_FX_DEVICE_DIRECTED_TRANSITION_STATE; /* size: 0x0010 */

typedef struct _POP_FX_DEVICE
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0018 */ struct _POP_IRP_DATA* IrpData;
  /* 0x0020 */ volatile union _POP_FX_DEVICE_STATUS Status;
  /* 0x0024 */ volatile long PowerReqCall;
  /* 0x0028 */ volatile long PowerNotReqCall;
  /* 0x002c */ long Padding_370;
  /* 0x0030 */ struct _DEVICE_NODE* DevNode;
  /* 0x0038 */ struct PEPHANDLE__* DpmContext;
  /* 0x0040 */ struct _POP_FX_PLUGIN* Plugin;
  /* 0x0048 */ struct PEPHANDLE__* PluginHandle;
  /* 0x0050 */ struct _POP_FX_PLUGIN* AcpiPlugin;
  /* 0x0058 */ struct PEPHANDLE__* AcpiPluginHandle;
  /* 0x0060 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0068 */ struct _DEVICE_OBJECT* TargetDevice;
  /* 0x0070 */ struct _POP_FX_DRIVER_CALLBACKS Callbacks;
  /* 0x00c0 */ void* DriverContext;
  /* 0x00c8 */ struct _LIST_ENTRY AcpiLink;
  /* 0x00d8 */ struct _UNICODE_STRING DeviceId;
  /* 0x00e8 */ volatile long CommonReferenceFlags;
  /* 0x00ec */ long Padding_371;
  /* 0x00f0 */ struct _IO_REMOVE_LOCK RemoveLock;
  /* 0x0110 */ volatile long RemoveLockReferenceCount[10];
  /* 0x0138 */ struct _IO_REMOVE_LOCK AcpiRemoveLock;
  /* 0x0158 */ struct _POP_FX_WORK_ORDER WorkOrder;
  /* 0x0190 */ unsigned __int64 IdleLock;
  /* 0x0198 */ struct _KTIMER IdleTimer;
  /* 0x01d8 */ struct _KDPC IdleDpc;
  /* 0x0218 */ unsigned __int64 IdleTimeout;
  /* 0x0220 */ unsigned __int64 IdleStamp;
  /* 0x0228 */ struct _DEVICE_OBJECT* NextIrpDeviceObject[2];
  /* 0x0238 */ union _POWER_STATE NextIrpPowerState[2];
  /* 0x0240 */ void* NextIrpCallerCompletion[2] /* function */;
  /* 0x0250 */ void* NextIrpCallerContext[2];
  /* 0x0260 */ struct _KEVENT IrpCompleteEvent;
  /* 0x0278 */ void* PowerOnDumpDeviceCallback /* function */;
  /* 0x0280 */ struct _POP_FX_ACCOUNTING Accounting;
  /* 0x0360 */ volatile unsigned long Flags;
  /* 0x0364 */ unsigned long ComponentCount;
  /* 0x0368 */ struct _POP_FX_COMPONENT** Components;
  /* 0x0370 */ unsigned long LogEntries;
  /* 0x0374 */ long Padding_372;
  /* 0x0378 */ struct _POP_FX_LOG_ENTRY* Log;
  /* 0x0380 */ volatile long LogIndex;
  /* 0x0384 */ long Padding_373;
  /* 0x0388 */ struct _DRIVER_OBJECT* DripsWatchdogDriverObject;
  /* 0x0390 */ struct _POP_FX_DRIPS_WATCHDOG_CONTEXT DripsWatchdogContext;
  /* 0x03b8 */ unsigned long ChildDeviceComponentIndex;
  /* 0x03bc */ unsigned long DirectedTimeout;
  /* 0x03c0 */ struct _POP_FX_WORK_ORDER DirectedWorkOrder;
  /* 0x03f8 */ struct _POP_FX_WORK_ORDER_WATCHDOG_INFO DirectedWorkWatchdogInfo;
  /* 0x04a8 */ unsigned __int64 DirectedLock;
  /* 0x04b0 */ volatile long DirectedTransitionCallCount;
  /* 0x04b4 */ long Padding_374;
  /* 0x04b8 */ struct _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE DirectedTransitionState;
  /* 0x04c8 */ struct _POP_DEVICE_POWER_PROFILE* PowerProfile;
  /* 0x04d0 */ struct _UNICODE_STRING FriendlyName;
  /* 0x04e0 */ struct _WORK_QUEUE_ITEM ReportDevicePoweredOnPassiveWorkItem;
  /* 0x0500 */ unsigned __int64 RelationsLock;
  /* 0x0508 */ unsigned long IdleProviderCount;
  /* 0x050c */ long Padding_375;
  /* 0x0510 */ struct _IRP* PendingDevicePowerIrp;
  /* 0x0518 */ struct _LIST_ENTRY ExternalDependencies;
} POP_FX_DEVICE, *PPOP_FX_DEVICE; /* size: 0x0528 */

typedef struct _VF_KE_CRITICAL_REGION_TRACE
{
  /* 0x0000 */ struct _ETHREAD* Thread;
  /* 0x0008 */ void* StackTrace[7];
} VF_KE_CRITICAL_REGION_TRACE, *PVF_KE_CRITICAL_REGION_TRACE; /* size: 0x0040 */

typedef struct _IORING_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ long Padding_376;
  /* 0x0008 */ struct _NT_IORING_INFO UserInfo;
  /* 0x0038 */ void* Section;
  /* 0x0040 */ struct _NT_IORING_SUBMISSION_QUEUE* SubmissionQueue;
  /* 0x0048 */ struct _MDL* CompletionQueueMdl;
  /* 0x0050 */ struct _NT_IORING_COMPLETION_QUEUE* CompletionQueue;
  /* 0x0058 */ unsigned __int64 ViewSize;
  /* 0x0060 */ long InSubmit;
  /* 0x0064 */ long Padding_377;
  /* 0x0068 */ unsigned __int64 CompletionLock;
  /* 0x0070 */ unsigned __int64 SubmitCount;
  /* 0x0078 */ unsigned __int64 CompletionCount;
  /* 0x0080 */ unsigned __int64 CompletionWaitUntil;
  /* 0x0088 */ struct _KEVENT CompletionEvent;
  /* 0x00a0 */ unsigned char SignalCompletionEvent;
  /* 0x00a1 */ char Padding_378[7];
  /* 0x00a8 */ struct _KEVENT* CompletionUserEvent;
  /* 0x00b0 */ unsigned int RegBuffersCount;
  /* 0x00b4 */ long Padding_379;
  /* 0x00b8 */ struct _IOP_MC_BUFFER_ENTRY** RegBuffers;
  /* 0x00c0 */ unsigned int RegFilesCount;
  /* 0x00c4 */ long Padding_380;
  /* 0x00c8 */ void** RegFiles;
} IORING_OBJECT, *PIORING_OBJECT; /* size: 0x00d0 */

typedef struct _EXT_IOMMU_OUTPUT_MAPPING
{
  /* 0x0000 */ unsigned __int64 OutputId;
} EXT_IOMMU_OUTPUT_MAPPING, *PEXT_IOMMU_OUTPUT_MAPPING; /* size: 0x0008 */

typedef struct _SID_IDENTIFIER_AUTHORITY
{
  /* 0x0000 */ unsigned char Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY; /* size: 0x0006 */

typedef struct _SID
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char SubAuthorityCount;
  /* 0x0002 */ struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  /* 0x0008 */ unsigned long SubAuthority[1];
} SID, *PSID; /* size: 0x000c */

typedef struct _FILE_GET_QUOTA_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long SidLength;
  /* 0x0008 */ struct _SID Sid;
} FILE_GET_QUOTA_INFORMATION, *PFILE_GET_QUOTA_INFORMATION; /* size: 0x0014 */

typedef struct _EXT_ENV_SPINLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned __int64 Lock;
  /* 0x0018 */ unsigned char OldIrql;
  /* 0x0019 */ char __PADDING__[7];
} EXT_ENV_SPINLOCK, *PEXT_ENV_SPINLOCK; /* size: 0x0020 */

typedef struct _PS_TRUSTLET_CREATE_ATTRIBUTES
{
  /* 0x0000 */ unsigned __int64 TrustletIdentity;
  /* 0x0008 */ struct _PS_TRUSTLET_ATTRIBUTE_DATA Attributes[1];
} PS_TRUSTLET_CREATE_ATTRIBUTES, *PPS_TRUSTLET_CREATE_ATTRIBUTES; /* size: 0x0018 */

typedef struct _IOP_MC_BUFFER_ENTRY
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned int Size;
  /* 0x0008 */ long ReferenceCount;
  /* 0x000c */ enum _IOP_MC_BUFFER_ENTRY_FLAGS Flags;
  /* 0x0010 */ struct _LIST_ENTRY GlobalDataLink;
  /* 0x0020 */ void* Address;
  /* 0x0028 */ unsigned int Length;
  /* 0x002c */ char AccessMode;
  /* 0x002d */ char Padding_381[3];
  /* 0x0030 */ long MdlRef;
  /* 0x0034 */ long Padding_382;
  /* 0x0038 */ struct _MDL* Mdl;
  /* 0x0040 */ struct _KEVENT MdlRundownEvent;
  /* 0x0058 */ unsigned __int64* PfnArray;
  /* 0x0060 */ struct _IOP_MC_BE_PAGE_NODE PageNodes[1];
} IOP_MC_BUFFER_ENTRY, *PIOP_MC_BUFFER_ENTRY; /* size: 0x0080 */

typedef struct _EXT_IOMMU_S1_X64_DOMAIN_SETTINGS
{
  struct
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char EnableTranslation : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char Blocked : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char EnableDefaultPasid : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned char Reserved : 5; /* bit position: 3 */
    }; /* bitfield */
  } /* size: 0x0001 */ Flags;
  /* 0x0001 */ char Padding_383[7];
  /* 0x0008 */ unsigned __int64 PageTableRoot;
} EXT_IOMMU_S1_X64_DOMAIN_SETTINGS, *PEXT_IOMMU_S1_X64_DOMAIN_SETTINGS; /* size: 0x0010 */

typedef struct _EXT_IOMMU_DOMAIN_SETTINGS
{
  /* 0x0000 */ struct _EXT_IOMMU_S1_X64_DOMAIN_SETTINGS S1;
  struct
  {
    /* 0x0010 */ unsigned char PageTableRootLevel;
    /* 0x0011 */ unsigned char InputSize;
    /* 0x0002 */ char Padding_384[6];
    /* 0x0018 */ unsigned __int64 PageTableRoot;
  } /* size: 0x0010 */ S2;
} EXT_IOMMU_DOMAIN_SETTINGS, *PEXT_IOMMU_DOMAIN_SETTINGS; /* size: 0x0020 */

typedef struct _DRIVER_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ long Padding_385;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ long Padding_386;
  /* 0x0018 */ void* DriverStart;
  /* 0x0020 */ unsigned long DriverSize;
  /* 0x0024 */ long Padding_387;
  /* 0x0028 */ void* DriverSection;
  /* 0x0030 */ struct _DRIVER_EXTENSION* DriverExtension;
  /* 0x0038 */ struct _UNICODE_STRING DriverName;
  /* 0x0048 */ struct _UNICODE_STRING* HardwareDatabase;
  /* 0x0050 */ struct _FAST_IO_DISPATCH* FastIoDispatch;
  /* 0x0058 */ void* DriverInit /* function */;
  /* 0x0060 */ void* DriverStartIo /* function */;
  /* 0x0068 */ void* DriverUnload /* function */;
  /* 0x0070 */ void* MajorFunction[28] /* function */;
} DRIVER_OBJECT, *PDRIVER_OBJECT; /* size: 0x0150 */

typedef struct _FACS
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned long HardwareSignature;
  /* 0x000c */ unsigned long pFirmwareWakingVector;
  /* 0x0010 */ unsigned long GlobalLock;
  /* 0x0014 */ unsigned long Flags;
  /* 0x0018 */ union _LARGE_INTEGER x_FirmwareWakingVector;
  /* 0x0020 */ unsigned char version;
  /* 0x0021 */ unsigned char Reserved[31];
} FACS, *PFACS; /* size: 0x0040 */

typedef struct _IO_IRP_EXT_TRACK_OFFSET_HEADER
{
  /* 0x0000 */ unsigned short Validation;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ long Padding_388;
  /* 0x0008 */ void* TrackedOffsetCallback /* function */;
} IO_IRP_EXT_TRACK_OFFSET_HEADER, *PIO_IRP_EXT_TRACK_OFFSET_HEADER; /* size: 0x0010 */

typedef struct _DRIVER_EXTENSION
{
  /* 0x0000 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0008 */ void* AddDevice /* function */;
  /* 0x0010 */ unsigned long Count;
  /* 0x0014 */ long Padding_389;
  /* 0x0018 */ struct _UNICODE_STRING ServiceKeyName;
  /* 0x0028 */ struct _IO_CLIENT_EXTENSION* ClientDriverExtension;
  /* 0x0030 */ struct _FS_FILTER_CALLBACKS* FsFilterCallbacks;
  /* 0x0038 */ void* KseCallbacks;
  /* 0x0040 */ void* DvCallbacks;
  /* 0x0048 */ void* VerifierContext;
  /* 0x0050 */ struct _DRIVER_PROXY_EXTENSION* DriverProxyExtension;
} DRIVER_EXTENSION, *PDRIVER_EXTENSION; /* size: 0x0058 */

typedef struct _RTL_FEATURE_CONFIGURATION
{
  /* 0x0000 */ unsigned int FeatureId;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned int Priority : 4; /* bit position: 0 */
    /* 0x0004 */ unsigned int EnabledState : 2; /* bit position: 4 */
    /* 0x0004 */ unsigned int IsWexpConfiguration : 1; /* bit position: 6 */
    /* 0x0004 */ unsigned int HasSubscriptions : 1; /* bit position: 7 */
    /* 0x0004 */ unsigned int Variant : 6; /* bit position: 8 */
    /* 0x0004 */ unsigned int VariantPayloadKind : 2; /* bit position: 14 */
  }; /* bitfield */
  /* 0x0008 */ unsigned int VariantPayload;
} RTL_FEATURE_CONFIGURATION, *PRTL_FEATURE_CONFIGURATION; /* size: 0x000c */

typedef struct _IO_CLIENT_EXTENSION
{
  /* 0x0000 */ struct _IO_CLIENT_EXTENSION* NextExtension;
  /* 0x0008 */ void* ClientIdentificationAddress;
} IO_CLIENT_EXTENSION, *PIO_CLIENT_EXTENSION; /* size: 0x0010 */

typedef struct _EXT_IOMMU_DEVICE
{
  /* 0x0000 */ void* Context;
  /* 0x0008 */ struct _EXT_IOMMU* Iommu;
  /* 0x0010 */ struct _EXT_IOMMU_DOMAIN* Domain;
  /* 0x0018 */ unsigned __int64 AssociatedDomainId;
  /* 0x0020 */ unsigned short FirmwareDomainId;
  /* 0x0022 */ unsigned char FaultReportingEnabled;
  /* 0x0023 */ unsigned char IsReservedDevice;
  /* 0x0024 */ long __PADDING__[1];
} EXT_IOMMU_DEVICE, *PEXT_IOMMU_DEVICE; /* size: 0x0028 */

typedef struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ unsigned long CryptoIndex;
  /* 0x000c */ unsigned long AlgorithmId;
  /* 0x0010 */ unsigned long DataUnitSize;
  /* 0x0014 */ unsigned long KeySize;
  /* 0x0018 */ unsigned char KeyHash[32];
  /* 0x0038 */ void* KeyVirtualAddress;
  /* 0x0040 */ union _LARGE_INTEGER KeyPhysicalAddress;
} IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR, *PIO_ADAPTER_CRYPTO_KEY_DESCRIPTOR; /* size: 0x0048 */

typedef struct _FS_FILTER_CALLBACKS
{
  /* 0x0000 */ unsigned long SizeOfFsFilterCallbacks;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* PreAcquireForSectionSynchronization /* function */;
  /* 0x0010 */ void* PostAcquireForSectionSynchronization /* function */;
  /* 0x0018 */ void* PreReleaseForSectionSynchronization /* function */;
  /* 0x0020 */ void* PostReleaseForSectionSynchronization /* function */;
  /* 0x0028 */ void* PreAcquireForCcFlush /* function */;
  /* 0x0030 */ void* PostAcquireForCcFlush /* function */;
  /* 0x0038 */ void* PreReleaseForCcFlush /* function */;
  /* 0x0040 */ void* PostReleaseForCcFlush /* function */;
  /* 0x0048 */ void* PreAcquireForModifiedPageWriter /* function */;
  /* 0x0050 */ void* PostAcquireForModifiedPageWriter /* function */;
  /* 0x0058 */ void* PreReleaseForModifiedPageWriter /* function */;
  /* 0x0060 */ void* PostReleaseForModifiedPageWriter /* function */;
  /* 0x0068 */ void* PreQueryOpen /* function */;
  /* 0x0070 */ void* PostQueryOpen /* function */;
} FS_FILTER_CALLBACKS, *PFS_FILTER_CALLBACKS; /* size: 0x0078 */

typedef union _FS_FILTER_PARAMETERS
{
  union
  {
    struct
    {
      /* 0x0000 */ union _LARGE_INTEGER* EndingOffset;
      /* 0x0008 */ struct _ERESOURCE** ResourceToRelease;
    } /* size: 0x0010 */ AcquireForModifiedPageWriter;
    struct
    {
      /* 0x0000 */ struct _ERESOURCE* ResourceToRelease;
    } /* size: 0x0008 */ ReleaseForModifiedPageWriter;
    struct
    {
      /* 0x0000 */ enum _FS_FILTER_SECTION_SYNC_TYPE SyncType;
      /* 0x0004 */ unsigned long PageProtection;
      /* 0x0008 */ struct _FS_FILTER_SECTION_SYNC_OUTPUT* OutputInformation;
      /* 0x0010 */ unsigned long Flags;
      /* 0x0014 */ unsigned long AllocationAttributes;
    } /* size: 0x0018 */ AcquireForSectionSynchronization;
    struct
    {
      /* 0x0000 */ struct _IRP* Irp;
      /* 0x0008 */ void* FileInformation;
      /* 0x0010 */ unsigned long* Length;
      /* 0x0018 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
      /* 0x001c */ long CompletionStatus;
    } /* size: 0x0020 */ QueryOpen;
    struct
    {
      /* 0x0000 */ void* Argument1;
      /* 0x0008 */ void* Argument2;
      /* 0x0010 */ void* Argument3;
      /* 0x0018 */ void* Argument4;
      /* 0x0020 */ void* Argument5;
    } /* size: 0x0028 */ Others;
  }; /* size: 0x0028 */
} FS_FILTER_PARAMETERS, *PFS_FILTER_PARAMETERS; /* size: 0x0028 */

typedef struct _FS_FILTER_CALLBACK_DATA
{
  /* 0x0000 */ unsigned long SizeOfFsFilterCallbackData;
  /* 0x0004 */ unsigned char Operation;
  /* 0x0005 */ unsigned char Reserved;
  /* 0x0006 */ char Padding_390[2];
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ struct _FILE_OBJECT* FileObject;
  /* 0x0018 */ union _FS_FILTER_PARAMETERS Parameters;
} FS_FILTER_CALLBACK_DATA, *PFS_FILTER_CALLBACK_DATA; /* size: 0x0040 */

typedef struct _FILE_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ long Padding_391;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ struct _VPB* Vpb;
  /* 0x0018 */ void* FsContext;
  /* 0x0020 */ void* FsContext2;
  /* 0x0028 */ struct _SECTION_OBJECT_POINTERS* SectionObjectPointer;
  /* 0x0030 */ void* PrivateCacheMap;
  /* 0x0038 */ long FinalStatus;
  /* 0x003c */ long Padding_392;
  /* 0x0040 */ struct _FILE_OBJECT* RelatedFileObject;
  /* 0x0048 */ unsigned char LockOperation;
  /* 0x0049 */ unsigned char DeletePending;
  /* 0x004a */ unsigned char ReadAccess;
  /* 0x004b */ unsigned char WriteAccess;
  /* 0x004c */ unsigned char DeleteAccess;
  /* 0x004d */ unsigned char SharedRead;
  /* 0x004e */ unsigned char SharedWrite;
  /* 0x004f */ unsigned char SharedDelete;
  /* 0x0050 */ unsigned long Flags;
  /* 0x0054 */ long Padding_393;
  /* 0x0058 */ struct _UNICODE_STRING FileName;
  /* 0x0068 */ union _LARGE_INTEGER CurrentByteOffset;
  /* 0x0070 */ unsigned long Waiters;
  /* 0x0074 */ unsigned long Busy;
  /* 0x0078 */ void* LastLock;
  /* 0x0080 */ struct _KEVENT Lock;
  /* 0x0098 */ struct _KEVENT Event;
  /* 0x00b0 */ struct _IO_COMPLETION_CONTEXT* CompletionContext;
  /* 0x00b8 */ unsigned __int64 IrpListLock;
  /* 0x00c0 */ struct _LIST_ENTRY IrpList;
  /* 0x00d0 */ struct _IOP_FILE_OBJECT_EXTENSION* FileObjectExtension;
} FILE_OBJECT, *PFILE_OBJECT; /* size: 0x00d8 */

typedef struct _MI_IO_PAGE_STATE_CELL
{
  /* 0x0000 */ struct _RTL_AVL_TREE PfnRoot;
  /* 0x0008 */ volatile unsigned __int64 UnmappedNodeCount;
  /* 0x0010 */ volatile unsigned __int64 UnmappedHugeIoSpaceNodeCount;
  /* 0x0018 */ volatile unsigned __int64 TotalNodeCount;
  /* 0x0020 */ unsigned __int64 ResumePageForDeleteScans;
  /* 0x0028 */ long __PADDING__[6];
} MI_IO_PAGE_STATE_CELL, *PMI_IO_PAGE_STATE_CELL; /* size: 0x0040 */

typedef struct _VPB
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short VolumeLabelLength;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ struct _DEVICE_OBJECT* RealDevice;
  /* 0x0018 */ unsigned long SerialNumber;
  /* 0x001c */ unsigned long ReferenceCount;
  /* 0x0020 */ wchar_t VolumeLabel[32];
} VPB, *PVPB; /* size: 0x0060 */

typedef struct _EVENT_RECORD
{
  /* 0x0000 */ struct _EVENT_HEADER EventHeader;
  /* 0x0050 */ struct _ETW_BUFFER_CONTEXT BufferContext;
  /* 0x0054 */ unsigned short ExtendedDataCount;
  /* 0x0056 */ unsigned short UserDataLength;
  /* 0x0058 */ struct _EVENT_HEADER_EXTENDED_DATA_ITEM* ExtendedData;
  /* 0x0060 */ void* UserData;
  /* 0x0068 */ void* UserContext;
} EVENT_RECORD, *PEVENT_RECORD; /* size: 0x0070 */

typedef struct _RTL_CHASH_ENTRY
{
  /* 0x0000 */ unsigned __int64 Key;
} RTL_CHASH_ENTRY, *PRTL_CHASH_ENTRY; /* size: 0x0008 */

typedef struct _SECTION_OBJECT_POINTERS
{
  /* 0x0000 */ void* DataSectionObject;
  /* 0x0008 */ void* SharedCacheMap;
  /* 0x0010 */ void* ImageSectionObject;
} SECTION_OBJECT_POINTERS, *PSECTION_OBJECT_POINTERS; /* size: 0x0018 */

typedef struct _MI_COMBINE_PAGE_LISTHEAD
{
  /* 0x0000 */ struct _RTL_AVL_TREE Table;
  /* 0x0008 */ volatile long Lock;
  /* 0x000c */ long __PADDING__[1];
} MI_COMBINE_PAGE_LISTHEAD, *PMI_COMBINE_PAGE_LISTHEAD; /* size: 0x0010 */

typedef struct _PCW_MASK_INFORMATION
{
  /* 0x0000 */ unsigned __int64 CounterMask;
  /* 0x0008 */ const struct _UNICODE_STRING* InstanceMask;
  /* 0x0010 */ unsigned long InstanceId;
  /* 0x0014 */ unsigned char CollectMultiple;
  /* 0x0015 */ char Padding_394[3];
  /* 0x0018 */ struct _PCW_BUFFER* Buffer;
  /* 0x0020 */ struct _KEVENT* CancelEvent;
} PCW_MASK_INFORMATION, *PPCW_MASK_INFORMATION; /* size: 0x0028 */

typedef struct _ETW_LOGGER_HANDLE
{
  /* 0x0000 */ unsigned char DereferenceAndLeave;
} ETW_LOGGER_HANDLE, *PETW_LOGGER_HANDLE; /* size: 0x0001 */

typedef struct _FS_FILTER_SECTION_SYNC_OUTPUT
{
  /* 0x0000 */ unsigned long StructureSize;
  /* 0x0004 */ unsigned long SizeReturned;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long DesiredReadAlignment;
} FS_FILTER_SECTION_SYNC_OUTPUT, *PFS_FILTER_SECTION_SYNC_OUTPUT; /* size: 0x0010 */

typedef struct _FILE_STANDARD_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0008 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0010 */ unsigned long NumberOfLinks;
  /* 0x0014 */ unsigned char DeletePending;
  /* 0x0015 */ unsigned char Directory;
  /* 0x0016 */ char __PADDING__[2];
} FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION; /* size: 0x0018 */

typedef struct _HANDLE_REVOCATION_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _OB_HANDLE_REVOCATION_BLOCK* RevocationBlock;
  /* 0x0018 */ unsigned char AllowHandleRevocation;
  /* 0x0019 */ unsigned char Padding1[3];
  /* 0x001c */ unsigned char Padding2[4];
} HANDLE_REVOCATION_INFO, *PHANDLE_REVOCATION_INFO; /* size: 0x0020 */

typedef struct _INITIAL_PRIVILEGE_SET
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ unsigned long Control;
  /* 0x0008 */ struct _LUID_AND_ATTRIBUTES Privilege[3];
} INITIAL_PRIVILEGE_SET, *PINITIAL_PRIVILEGE_SET; /* size: 0x002c */

typedef struct _FILE_BASIC_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ unsigned long FileAttributes;
  /* 0x0024 */ long __PADDING__[1];
} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION; /* size: 0x0028 */

typedef struct _LOADER_HIVE_RECOVERY_INFO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Recovered : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long LegacyRecovery : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long SoftRebootConflict : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long MostRecentLog : 3; /* bit position: 3 */
    /* 0x0000 */ unsigned long LoadedFromSnapshot : 1; /* bit position: 6 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long Spare : 27; /* bit position: 0 */
  /* 0x0008 */ unsigned long LogNextSequence;
  /* 0x000c */ unsigned long LogMinimumSequence;
  /* 0x0010 */ unsigned long LogCurrentOffset;
} LOADER_HIVE_RECOVERY_INFO, *PLOADER_HIVE_RECOVERY_INFO; /* size: 0x0014 */

typedef struct _OBJECT_REF_STACK_INFO
{
  /* 0x0000 */ unsigned long Sequence;
  /* 0x0004 */ unsigned short Index;
  /* 0x0006 */ unsigned short NumTraces;
  /* 0x0008 */ unsigned long Tag;
} OBJECT_REF_STACK_INFO, *POBJECT_REF_STACK_INFO; /* size: 0x000c */

typedef struct _VI_VERIFIER_ISSUE
{
  /* 0x0000 */ unsigned __int64 IssueType;
  /* 0x0008 */ void* Address;
  /* 0x0010 */ unsigned __int64 Parameters[2];
} VI_VERIFIER_ISSUE, *PVI_VERIFIER_ISSUE; /* size: 0x0020 */

typedef struct _MI_HUGE_PFN_COLORHEAD
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ unsigned __int64 EntireField;
      } /* size: 0x0008 */ e1;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned __int64 PageState : 3; /* bit position: 0 */
          /* 0x0000 */ unsigned __int64 LockBit : 1; /* bit position: 3 */
          /* 0x0000 */ unsigned __int64 Partition : 11; /* bit position: 4 */
          /* 0x0000 */ unsigned __int64 Flink : 22; /* bit position: 15 */
          /* 0x0000 */ unsigned __int64 Blink : 22; /* bit position: 37 */
        }; /* bitfield */
      } /* size: 0x0008 */ OnList;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
} MI_HUGE_PFN_COLORHEAD, *PMI_HUGE_PFN_COLORHEAD; /* size: 0x0008 */

typedef struct _CACHED_KSTACK_LIST
{
  /* 0x0000 */ union _SLIST_HEADER SListHead;
  /* 0x0010 */ struct _MI_KSTACK_ALLOCATIONS Counters;
  /* 0x0020 */ volatile unsigned long CurrentIndex;
  /* 0x0024 */ volatile unsigned long InUseAtOnce;
  /* 0x0028 */ unsigned long MinimumFree;
  /* 0x002c */ unsigned char NonIdealStacksPresent;
  /* 0x002d */ char __PADDING__[3];
} CACHED_KSTACK_LIST, *PCACHED_KSTACK_LIST; /* size: 0x0030 */

typedef struct _MI_LARGE_PAGE_NODE_COALESCE_STATE
{
  /* 0x0000 */ __int64 CandidateCount[3];
  /* 0x0018 */ unsigned __int64 NewCandidateSequence[3];
} MI_LARGE_PAGE_NODE_COALESCE_STATE, *PMI_LARGE_PAGE_NODE_COALESCE_STATE; /* size: 0x0030 */

typedef struct _MI_NODE_INFORMATION
{
  /* 0x0000 */ struct _MI_NODE_FREE_PAGE_INFORMATION FreePageInfo[4];
  /* 0x1400 */ unsigned __int64* HotZeroedPageCountsByColor[4];
  /* 0x1420 */ struct _MI_REBUILD_LARGE_PAGE_TIMER LargePageRebuildTimer;
  /* 0x1448 */ struct _MMPFNLIST StandbyPageList[8][2];
  /* 0x19c8 */ long Padding_395[14];
  /* 0x1a00 */ struct _MI_STANDBY_LOOKASIDE StandbyPageCachePerChannel[8][2];
  /* 0x3a00 */ struct _RTL_BITMAP_EX FreePageSListsBitmap[2];
  /* 0x3a20 */ unsigned __int64 FreePageSListsBitmapBuffer[8];
  /* 0x3a60 */ union _SLIST_HEADER* FreeZeroPageSlists[2];
  /* 0x3a70 */ unsigned __int64 TotalPages[2];
  /* 0x3a80 */ unsigned __int64 TotalPagesEntireNode;
  /* 0x3a88 */ struct _MI_PARTITION* Partition;
  /* 0x3a90 */ unsigned __int64 TotalHugeIoPages;
  /* 0x3a98 */ unsigned __int64 HugeIoRangeFreeCount[2][2];
  /* 0x3ab8 */ long Padding_396[2];
  /* 0x3ac0 */ struct _RTL_BITMAP_EX FreeHugeRangeListHeadsBitmap[2];
  /* 0x3ae0 */ unsigned __int64 FreeHugeRangeListHeadsBitmapBuffer[8];
  /* 0x3b20 */ struct _MI_HUGE_PFN_COLORHEAD BadHugeRangeListHead;
  /* 0x3b28 */ unsigned long Color;
  /* 0x3b2c */ long Padding_397;
  /* 0x3b30 */ unsigned __int64 ChannelFreeCount[2][2];
  struct
  {
    struct /* bitfield */
    {
      /* 0x3b50 */ unsigned long ChannelsHotCold : 1; /* bit position: 0 */
      /* 0x3b50 */ unsigned long HeatHintsDisabled : 1; /* bit position: 1 */
      /* 0x3b50 */ unsigned long Spare : 30; /* bit position: 2 */
    }; /* bitfield */
  } /* size: 0x0004 */ Flags;
  /* 0x3b54 */ long Padding_398;
  /* 0x3b58 */ union _MI_PAGE_MOVE_PROGRESS_STATE PageListMoveInProgress[3];
  /* 0x3b70 */ unsigned long CurrentHugeRangeColor;
  /* 0x3b74 */ volatile long NodeLock;
  /* 0x3b78 */ volatile long ZeroThreadHugeMapLock;
  /* 0x3b7c */ volatile long LargePageRebuildLock;
  /* 0x3b80 */ unsigned char ChannelStatus;
  /* 0x3b81 */ unsigned char ChannelOrdering[2];
  /* 0x3b83 */ unsigned char LockedChannelOrdering[2];
  /* 0x3b85 */ unsigned char PowerAttribute[2];
  /* 0x3b87 */ char Padding_399;
  /* 0x3b88 */ unsigned long RollingKernelStackAllocationIndex;
  /* 0x3b8c */ long Padding_400;
  /* 0x3b90 */ unsigned __int64 ScrubResumePage;
  /* 0x3b98 */ unsigned __int64 NumberOfPagesGoingBad;
  /* 0x3ba0 */ void* BootZeroContext;
  /* 0x3ba8 */ void* ZeroingContext;
  /* 0x3bb0 */ volatile long ZeroContextLock;
  /* 0x3bb4 */ long Padding_401;
  /* 0x3bb8 */ void* ZeroThreadConductor;
  /* 0x3bc0 */ unsigned char BackgroundZeroingActive;
  /* 0x3bc1 */ char Padding_402[7];
  /* 0x3bc8 */ struct _PHYSICAL_MEMORY_DESCRIPTOR* ZeroingPhysicalMemoryBlock;
  /* 0x3bd0 */ struct _CACHED_KSTACK_LIST CachedKernelStacks[8];
  /* 0x3d50 */ struct _MI_SLAB_ALLOCATOR_CONTEXT SlabContexts[9];
  /* 0x4578 */ long Padding_403[2];
  /* 0x4580 */ struct _MI_STANDBY_LOOKASIDE SlabStandbyListCaches[8][8];
  /* 0xc580 */ struct _MMPFNLIST SlabStandbyPageLists[8][8];
  /* 0xdb80 */ struct _MMPFNLIST SlabRepurposedStandbyPageLists[9];
  /* 0xde98 */ struct _RTL_BITMAP SlabTypeStandbyExistsBitmap;
  /* 0xdea8 */ unsigned long SlabTypeStandbyExistsBitmapBuffer[1];
  /* 0xdeac */ long Padding_404;
  /* 0xdeb0 */ struct _MI_NODE_SLAB_IDENTITY_STATE* SlabIdentityState;
  /* 0xdeb8 */ unsigned __int64 MdlSlabFragmentionLastDemoteTime;
  /* 0xdec0 */ struct _MMPFNLIST EnclavePageListHead;
  /* 0xdf18 */ struct _MI_LARGE_PAGE_NODE_COALESCE_STATE LargePageCoalesceState;
  /* 0xdf48 */ long __PADDING__[14];
} MI_NODE_INFORMATION, *PMI_NODE_INFORMATION; /* size: 0xdf80 */

typedef struct _MI_CACHED_PTE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 GlobalTimeStamp : 16; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 PteIndex : 48; /* bit position: 16 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 Long;
  }; /* size: 0x0008 */
} MI_CACHED_PTE, *PMI_CACHED_PTE; /* size: 0x0008 */

typedef struct __WIL__WNF_STATE_NAME
{
  /* 0x0000 */ unsigned long Data[2];
} _WIL__WNF_STATE_NAME, *P_WIL__WNF_STATE_NAME; /* size: 0x0008 */

typedef struct _INBV_MODE_INFORMATION
{
  /* 0x0000 */ unsigned long Height;
  /* 0x0004 */ unsigned long Width;
  /* 0x0008 */ unsigned long Stride;
  /* 0x000c */ enum _INBV_PIXEL_FORMAT PixelFormat;
} INBV_MODE_INFORMATION, *PINBV_MODE_INFORMATION; /* size: 0x0010 */

typedef struct _RTL_CSPARSE_BITMAP
{
  /* 0x0000 */ unsigned __int64* CommitBitmap;
  /* 0x0008 */ unsigned __int64* UserBitmap;
  /* 0x0010 */ unsigned __int64 BitCount;
  /* 0x0018 */ unsigned __int64 BitmapLock;
  /* 0x0020 */ unsigned __int64 DecommitPageIndex;
  /* 0x0028 */ unsigned __int64 RtlpCSparseBitmapWakeLock;
  /* 0x0030 */ unsigned char LockType;
  /* 0x0031 */ unsigned char AddressSpace;
  /* 0x0032 */ unsigned char MemType;
  /* 0x0033 */ unsigned char AllocAlignment;
  /* 0x0034 */ unsigned long CommitDirectoryMaxSize;
  /* 0x0038 */ unsigned __int64 CommitDirectory[1];
} RTL_CSPARSE_BITMAP, *PRTL_CSPARSE_BITMAP; /* size: 0x0040 */

typedef struct _RTLP_HP_ALLOC_TRACKER
{
  /* 0x0000 */ unsigned __int64 BaseAddress;
  union
  {
    /* 0x0008 */ struct _RTL_CSPARSE_BITMAP AllocTrackerBitmap;
    /* 0x0008 */ unsigned char AllocTrackerBitmapBuffer[72];
  }; /* size: 0x0048 */
} RTLP_HP_ALLOC_TRACKER, *PRTLP_HP_ALLOC_TRACKER; /* size: 0x0050 */

typedef struct _RTL_SPARSE_ARRAY
{
  /* 0x0000 */ unsigned __int64 ElementCount;
  /* 0x0008 */ unsigned long ElementSizeShift;
  /* 0x000c */ long Padding_405;
  /* 0x0010 */ struct _RTL_CSPARSE_BITMAP Bitmap;
} RTL_SPARSE_ARRAY, *PRTL_SPARSE_ARRAY; /* size: 0x0050 */

typedef struct _HEAP_VAMGR_VASPACE
{
  /* 0x0000 */ enum _RTLP_HP_ADDRESS_SPACE_TYPE AddressSpaceType;
  /* 0x0004 */ long Padding_406;
  /* 0x0008 */ unsigned __int64 BaseAddress;
  union
  {
    /* 0x0010 */ struct _RTL_SPARSE_ARRAY VaRangeArray;
    /* 0x0010 */ unsigned char VaRangeArrayBuffer[2128];
  }; /* size: 0x0850 */
} HEAP_VAMGR_VASPACE, *PHEAP_VAMGR_VASPACE; /* size: 0x0860 */

typedef struct _HEAP_VAMGR_CTX
{
  /* 0x0000 */ struct _HEAP_VAMGR_VASPACE VaSpace;
  /* 0x0860 */ unsigned __int64 AllocatorLock;
  /* 0x0868 */ unsigned long DefaultRegionSize;
  /* 0x086c */ unsigned long AllocatorCount;
  /* 0x0870 */ struct _HEAP_VAMGR_ALLOCATOR Allocators[255];
} HEAP_VAMGR_CTX, *PHEAP_VAMGR_CTX; /* size: 0x3840 */

typedef struct _RTL_HP_SUB_ALLOCATOR_CONFIGS
{
  /* 0x0000 */ union _RTL_HP_LFH_CONFIG LfhConfigs;
  /* 0x0004 */ struct _RTL_HP_VS_CONFIG VsConfigs;
} RTL_HP_SUB_ALLOCATOR_CONFIGS, *PRTL_HP_SUB_ALLOCATOR_CONFIGS; /* size: 0x0008 */

typedef struct _RTLP_HP_HEAP_MANAGER
{
  /* 0x0000 */ struct _RTLP_HP_HEAP_GLOBALS* Globals;
  /* 0x0008 */ struct _RTLP_HP_ALLOC_TRACKER AllocTracker;
  /* 0x0058 */ struct _HEAP_VAMGR_CTX VaMgr;
  /* 0x3898 */ struct _RTLP_HP_METADATA_HEAP_CTX MetadataHeaps[4];
  /* 0x38d8 */ struct _RTL_HP_SUB_ALLOCATOR_CONFIGS SubAllocConfigs;
} RTLP_HP_HEAP_MANAGER, *PRTLP_HP_HEAP_MANAGER; /* size: 0x38e0 */

typedef struct _EX_POOL_HEAP_MANAGER_STATE
{
  /* 0x0000 */ struct _RTLP_HP_HEAP_MANAGER HeapManager;
  /* 0x38e0 */ struct _EX_PUSH_LOCK PrivatePoolListLock;
  /* 0x38e8 */ struct _LIST_ENTRY PrivatePools[2];
  /* 0x3908 */ unsigned __int64 PrivatePoolContextCookie;
  /* 0x3910 */ unsigned long NumberOfPools;
  /* 0x3914 */ long Padding_407[11];
  /* 0x3940 */ struct _EX_HEAP_POOL_NODE PoolNode[64];
  /* 0x86940 */ struct _SEGMENT_HEAP* SpecialHeaps[4];
  /* 0x86960 */ long __PADDING__[8];
} EX_POOL_HEAP_MANAGER_STATE, *PEX_POOL_HEAP_MANAGER_STATE; /* size: 0x86980 */

typedef struct _BLOCK_IO_LAYER_INFORMATION
{
  /* 0x0000 */ char* ArcName;
} BLOCK_IO_LAYER_INFORMATION, *PBLOCK_IO_LAYER_INFORMATION; /* size: 0x0008 */

typedef struct _CIMFS_LAYER_INFORMATION
{
  /* 0x0000 */ struct _GUID TargetVolume;
  /* 0x0010 */ struct _UNICODE_STRING* CimFiles;
  /* 0x0018 */ unsigned long CimFilesCount;
  /* 0x001c */ unsigned long MountFlags;
  /* 0x0020 */ unsigned char ParentIsVsmb;
  /* 0x0021 */ char Padding_408[7];
  /* 0x0028 */ char* ParentDeviceArcName;
} CIMFS_LAYER_INFORMATION, *PCIMFS_LAYER_INFORMATION; /* size: 0x0030 */

typedef struct _BOOT_OSL_RAMDISK_ENTRY
{
  /* 0x0000 */ unsigned long BlockSize;
  /* 0x0004 */ long Padding_409;
  /* 0x0008 */ unsigned __int64 BaseAddress;
  /* 0x0010 */ unsigned __int64 Size;
} BOOT_OSL_RAMDISK_ENTRY, *PBOOT_OSL_RAMDISK_ENTRY; /* size: 0x0018 */

typedef struct _BOOT_OSL_RAMDISK_INFO
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _BOOT_OSL_RAMDISK_ENTRY Entries[1];
} BOOT_OSL_RAMDISK_INFO, *PBOOT_OSL_RAMDISK_INFO; /* size: 0x0020 */

typedef struct _IOP_IRP_EXTENSION_STATUS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long ActivityId;
  /* 0x0008 */ unsigned long IoTracking;
} IOP_IRP_EXTENSION_STATUS, *PIOP_IRP_EXTENSION_STATUS; /* size: 0x000c */

typedef struct _PNP_DEVICE_COMPLETION_QUEUE
{
  /* 0x0000 */ struct _LIST_ENTRY DispatchedList;
  /* 0x0010 */ unsigned long DispatchedCount;
  /* 0x0014 */ long Padding_410;
  /* 0x0018 */ struct _LIST_ENTRY CompletedList;
  /* 0x0028 */ struct _KSEMAPHORE CompletedSemaphore;
  /* 0x0048 */ unsigned __int64 SpinLock;
} PNP_DEVICE_COMPLETION_QUEUE, *PPNP_DEVICE_COMPLETION_QUEUE; /* size: 0x0050 */

typedef struct _DBGKD_READ_WRITE_IO_EXTENDED32
{
  /* 0x0000 */ unsigned long DataSize;
  /* 0x0004 */ unsigned long InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long AddressSpace;
  /* 0x0010 */ unsigned long IoAddress;
  /* 0x0014 */ unsigned long DataValue;
} DBGKD_READ_WRITE_IO_EXTENDED32, *PDBGKD_READ_WRITE_IO_EXTENDED32; /* size: 0x0018 */

typedef struct _MMPAGE_FILE_EXPANSION
{
  /* 0x0000 */ struct _SEGMENT* Segment;
  /* 0x0008 */ struct _LIST_ENTRY DereferenceList;
  /* 0x0018 */ struct _MI_PARTITION* Partition;
  /* 0x0020 */ unsigned __int64 RequestedExpansionSize;
  /* 0x0028 */ unsigned __int64 ActualExpansion;
  /* 0x0030 */ struct _KEVENT Event;
  /* 0x0048 */ volatile long InProgress;
  union
  {
    union
    {
      /* 0x004c */ unsigned long LongFlags;
      /* 0x004c */ struct _MMPAGE_FILE_EXPANSION_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0050 */ void* volatile ActiveEntry;
} MMPAGE_FILE_EXPANSION, *PMMPAGE_FILE_EXPANSION; /* size: 0x0058 */

typedef struct _MMMOD_WRITER_LISTHEAD
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0010 */ struct _KEVENT Event;
} MMMOD_WRITER_LISTHEAD, *PMMMOD_WRITER_LISTHEAD; /* size: 0x0028 */

typedef struct _MI_MODWRITE_DATA
{
  /* 0x0000 */ __int64 PagesLoad;
  /* 0x0008 */ unsigned __int64 PagesAverage;
  /* 0x0010 */ unsigned __int64 AverageAvailablePages;
  /* 0x0018 */ unsigned __int64 PagesWritten;
  /* 0x0020 */ unsigned long WritesIssued;
  /* 0x0024 */ unsigned long IgnoredReservationsCount;
  /* 0x0028 */ unsigned long FreedReservationsCount;
  /* 0x002c */ unsigned long WriteBurstCount;
  /* 0x0030 */ unsigned __int64 IgnoreReservationsStartTime;
  /* 0x0038 */ volatile union _MI_RESERVATION_CLUSTER_INFO ReservationClusterInfo;
  struct /* bitfield */
  {
    /* 0x003c */ unsigned short IgnoreReservations : 1; /* bit position: 0 */
    /* 0x003c */ unsigned short Spare : 15; /* bit position: 1 */
  }; /* bitfield */
  /* 0x003e */ unsigned short Spare1;
} MI_MODWRITE_DATA, *PMI_MODWRITE_DATA; /* size: 0x0040 */

typedef struct _MI_RESTRICTED_MODWRITES
{
  /* 0x0000 */ unsigned char MaximumClusterPages;
  /* 0x0001 */ unsigned char ReducedClusterWrites;
  /* 0x0002 */ unsigned char ImposeDelay;
} MI_RESTRICTED_MODWRITES, *PMI_RESTRICTED_MODWRITES; /* size: 0x0003 */

typedef struct _MI_PARTITION_MODWRITES
{
  /* 0x0000 */ struct _MMPAGE_FILE_EXPANSION AttemptForCantExtend;
  /* 0x0058 */ struct _MMPAGE_FILE_EXPANSION PageFileContract;
  /* 0x00b0 */ struct _EX_PUSH_LOCK MappedWriterChargesLock;
  /* 0x00b8 */ unsigned long NumberOfMappedMdls;
  /* 0x00bc */ unsigned long NumberOfForwardProgressMappedMdls;
  /* 0x00c0 */ volatile long NumberOfMappedMdlsInUse;
  /* 0x00c4 */ unsigned long NumberOfMappedMdlsInUsePeak;
  /* 0x00c8 */ struct _MMMOD_WRITER_LISTHEAD MappedFileHeader;
  /* 0x00f0 */ unsigned char NeedMappedMdl;
  /* 0x00f1 */ unsigned char NeedPageFileMdl;
  /* 0x00f2 */ unsigned char ModwriterActive;
  /* 0x00f3 */ unsigned char TransitionInserted;
  /* 0x00f4 */ long LastModifiedWriteError;
  /* 0x00f8 */ long LastMappedWriteError;
  /* 0x00fc */ volatile unsigned long MappedFileWriteSucceeded;
  /* 0x0100 */ unsigned long MappedWriteBurstCount;
  /* 0x0104 */ unsigned long LowPriorityModWritesOutstanding;
  /* 0x0108 */ struct _KEVENT BoostModWriteIoPriorityEvent;
  /* 0x0120 */ long ModifiedWriterThreadPriority;
  /* 0x0124 */ long Padding_411;
  /* 0x0128 */ unsigned __int64 ModifiedPagesLowPriorityGoal;
  /* 0x0130 */ struct _KEVENT ModifiedPageWriterEvent;
  /* 0x0148 */ struct _KEVENT ModifiedWriterExitedEvent;
  /* 0x0160 */ volatile long WriteAllPagefilePages;
  /* 0x0164 */ volatile long WriteAllMappedPages;
  /* 0x0168 */ struct _KEVENT MappedPageWriterEvent;
  /* 0x0180 */ struct _MI_MODWRITE_DATA ModWriteData;
  /* 0x01c0 */ struct _KEVENT RescanPageFilesEvent;
  /* 0x01d8 */ struct _MMMOD_WRITER_LISTHEAD PagingFileHeader;
  /* 0x0200 */ struct _ETHREAD* ModifiedPageWriterThread;
  /* 0x0208 */ struct _EX_RUNDOWN_REF ModifiedPageWriterRundown;
  /* 0x0210 */ struct _WORK_QUEUE_ITEM PagefileScanWorkItem;
  /* 0x0230 */ unsigned long PagefileScanCount;
  /* 0x0234 */ volatile long ClusterRestrictionLock;
  /* 0x0238 */ struct _MI_RESTRICTED_MODWRITES ClusterRestrictions[2];
  /* 0x023e */ char Padding_412[2];
  /* 0x0240 */ struct _KEVENT NotifyStoreMemoryConditions;
  /* 0x0258 */ volatile unsigned char DelayMappedWrite;
  /* 0x0259 */ char Padding_413[3];
  /* 0x025c */ volatile unsigned long PagefileReservationsEnabled;
  /* 0x0260 */ struct _EX_PUSH_LOCK PageFileCreationLock;
  /* 0x0268 */ struct _WORK_QUEUE_ITEM TrimPagefileWorkItem;
  /* 0x0288 */ unsigned __int64 LastTrimPagefileTime;
  /* 0x0290 */ struct _WORK_QUEUE_ITEM WsSwapPagefileContractWorkItem;
  /* 0x02b0 */ volatile long WsSwapPageFileContractionInProgress;
  /* 0x02b4 */ long Padding_414;
  /* 0x02b8 */ struct _EX_PUSH_LOCK WorkingSetSwapLock;
  /* 0x02c0 */ volatile long WorkingSetInswapLock;
  /* 0x02c4 */ long __PADDING__[1];
} MI_PARTITION_MODWRITES, *PMI_PARTITION_MODWRITES; /* size: 0x02c8 */

typedef struct _MI_DEFERRED_PFNS_TO_FREE
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0010 */ unsigned __int64 NumberOfPages;
  /* 0x0018 */ unsigned long TbFlushStamp;
  /* 0x001c */ long __PADDING__[1];
} MI_DEFERRED_PFNS_TO_FREE, *PMI_DEFERRED_PFNS_TO_FREE; /* size: 0x0020 */

typedef struct _MI_PARTITION_SEGMENTS
{
  /* 0x0000 */ volatile long SegmentListLock;
  /* 0x0004 */ unsigned long DeleteOnCloseCount;
  /* 0x0008 */ __int64 FsControlAreaCount;
  /* 0x0010 */ __int64 PfControlAreaCount;
  /* 0x0018 */ __int64 CloneHeaderCount;
  /* 0x0020 */ struct _KEVENT DeleteSubsectionCleanup;
  /* 0x0038 */ struct _KEVENT UnusedSegmentCleanup;
  /* 0x0050 */ unsigned __int64 SubsectionDeletePtes;
  /* 0x0058 */ struct _MMPAGE_FILE_EXPANSION AttemptForCantExtend;
  /* 0x00b0 */ struct _MMDEREFERENCE_SEGMENT_HEADER DereferenceSegmentHeader;
  /* 0x00f8 */ struct _LIST_ENTRY DeleteOnCloseList;
  /* 0x0108 */ struct _LIST_ENTRY DeleteOnCloseSubsectionList;
  /* 0x0118 */ struct _KTIMER DeleteOnCloseTimer;
  /* 0x0158 */ unsigned char DeleteOnCloseTimerActive;
  /* 0x0159 */ unsigned char SegmentDereferenceThreadExists;
  /* 0x015a */ char Padding_415[6];
  /* 0x0160 */ void* SegmentDereferenceMailboxHeader;
  /* 0x0168 */ unsigned __int64 UnusedSegmentPagedPool;
  /* 0x0170 */ struct _LIST_ENTRY UnusedSegmentList;
  /* 0x0180 */ struct _LIST_ENTRY DeleteSubsectionList;
  /* 0x0190 */ struct _KEVENT ControlAreaDeleteEvent;
  /* 0x01a8 */ struct _SINGLE_LIST_ENTRY ControlAreaDeleteList;
  /* 0x01b0 */ struct _MI_DEFERRED_PFNS_TO_FREE FreedSystemCacheViews[4];
  /* 0x0230 */ struct _MI_DEFERRED_PFNS_TO_FREE FreedSystemCacheViewsReady;
  /* 0x0250 */ struct _MI_DEFERRED_PFNS_TO_FREE FreedSystemCachePdesReady;
  /* 0x0270 */ struct _KEVENT CloneDereferenceEvent;
  /* 0x0288 */ long Padding_416[2];
  /* 0x0290 */ union _SLIST_HEADER CloneProtosSListHead;
  /* 0x02a0 */ struct _EX_PUSH_LOCK SystemCacheInitLock;
  /* 0x02a8 */ volatile unsigned long SystemCacheViewPageTables;
  /* 0x02ac */ long Padding_417;
  /* 0x02b0 */ struct _KEVENT FreeSystemCacheVa;
  /* 0x02c8 */ unsigned long PagefileExtensionWaiters;
  /* 0x02cc */ unsigned long PagefileExtensionRequests;
  /* 0x02d0 */ struct _KEVENT PagefileExtensionWaitEvent;
  /* 0x02e8 */ struct _MI_CROSS_PARTITION_CHARGES SharedCharges[9];
  /* 0x0408 */ struct _KEVENT* SharedChargesDrainEvent;
  /* 0x0410 */ struct _KEVENT* ControlAreasDrainEvent;
  /* 0x0418 */ struct _KEVENT* CloneHeaderDrainEvent;
  /* 0x0420 */ struct _EX_RUNDOWN_REF_CACHE_AWARE* ProbeRundownReference;
  /* 0x0428 */ unsigned __int64 RemoveUnusedSegmentsCommitNeeded;
  /* 0x0430 */ unsigned long SegmentDereferenceCalibrationActive;
  /* 0x0434 */ long Padding_418;
  /* 0x0438 */ struct _WORK_QUEUE_ITEM SegmentDereferenceCalibration;
  /* 0x0458 */ unsigned long NumberSegmentDereferenceThreads;
  /* 0x045c */ unsigned long OptimalNumberSegmentDereferenceThreadsComputed;
  /* 0x0460 */ long __PADDING__[8];
} MI_PARTITION_SEGMENTS, *PMI_PARTITION_SEGMENTS; /* size: 0x0480 */

typedef struct _MI_DECAY_TIMER_LINKAGE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Spare0 : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 PreviousDecayPfn : 31; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 TimerRemoved : 1; /* bit position: 32 */
    /* 0x0000 */ unsigned __int64 NextDecayPfn : 31; /* bit position: 33 */
  }; /* bitfield */
} MI_DECAY_TIMER_LINKAGE, *PMI_DECAY_TIMER_LINKAGE; /* size: 0x0008 */

typedef struct _MI_DECAY_TIMER_LINK
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned __int64 Long;
      /* 0x0000 */ struct _MI_DECAY_TIMER_LINKAGE e1;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
} MI_DECAY_TIMER_LINK, *PMI_DECAY_TIMER_LINK; /* size: 0x0008 */

typedef struct _MI_LDW_WORK_CONTEXT
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0020 */ struct _FILE_OBJECT* FileObject;
  /* 0x0028 */ long ErrorStatus;
  /* 0x002c */ volatile long Active;
  /* 0x0030 */ unsigned char FreeWhenDone;
  /* 0x0031 */ char __PADDING__[7];
} MI_LDW_WORK_CONTEXT, *PMI_LDW_WORK_CONTEXT; /* size: 0x0038 */

typedef struct _MI_PARTITION_PAGE_LISTS
{
  /* 0x0000 */ struct _MMPFNLIST ZeroedPageListHead;
  /* 0x0058 */ long Padding_419[10];
  /* 0x0080 */ struct _MMPFNLIST FreePageListHead;
  /* 0x00d8 */ long Padding_420[10];
  /* 0x0100 */ struct _MMPFNLIST StandbyPageListHead;
  /* 0x0158 */ long Padding_421[10];
  /* 0x0180 */ struct _MMPFNLIST StandbyPageListByPriority[8];
  /* 0x0440 */ struct _MMPFNLIST ModifiedPageListNoReservation;
  /* 0x0498 */ long Padding_422[10];
  /* 0x04c0 */ struct _MMPFNLIST ModifiedPageListNoReservationCompress;
  /* 0x0518 */ long Padding_423[10];
  /* 0x0540 */ struct _MMPFNLIST ModifiedPageListByReservation[16];
  /* 0x0ac0 */ struct _MMPFNLIST MappedPageListHead[16];
  /* 0x1040 */ struct _MMPFNLIST BadPageListHead;
  /* 0x1098 */ unsigned __int64* HotZeroedPagesCountByColor;
  /* 0x10a0 */ struct _MMPFNLIST* PageLocationList[8];
  /* 0x10e0 */ volatile unsigned long StandbyRepurposedByPriority[8];
  /* 0x1100 */ volatile unsigned __int64 TransitionSharedPages;
  /* 0x1108 */ unsigned __int64 TransitionSharedPagesPeak[9];
  /* 0x1150 */ struct _KEVENT MappedPageListHeadEvent[16];
  /* 0x12d0 */ long Padding_424[12];
  /* 0x1300 */ struct _MI_STANDBY_LOOKASIDE OldestStandbyPageCache[8];
  /* 0x2300 */ struct _MI_STANDBY_LOOKASIDE NewestStandbyPageCache[8];
  /* 0x3300 */ unsigned __int64 NewestStandbyPageCacheInserts[8][2];
  /* 0x3380 */ struct _MI_DECAY_TIMER_LINK DecayClusterTimerHeads[4];
  /* 0x33a0 */ unsigned long DecayHand;
  /* 0x33a4 */ unsigned char StandbyListDiscard;
  /* 0x33a5 */ unsigned char FreeListDiscard;
  /* 0x33a6 */ unsigned char PfnBitMapsReady;
  /* 0x33a7 */ char Padding_425;
  /* 0x33a8 */ unsigned __int64 LastDecayHandUpdateTime;
  /* 0x33b0 */ struct _MI_LDW_WORK_CONTEXT LastChanceLdwContext;
  /* 0x33e8 */ long Padding_426[6];
  /* 0x3400 */ volatile long AvailableEventsLock;
  /* 0x3404 */ long Padding_427;
  /* 0x3408 */ struct _MI_AVAILABLE_PAGE_WAIT_STATES AvailablePageWaitStates[3];
  /* 0x3468 */ long Padding_428[6];
  /* 0x3480 */ volatile unsigned __int64 TransitionPrivatePages;
  /* 0x3488 */ struct _RTL_BITMAP_EX LargePfnBitMap[2];
  /* 0x34a8 */ struct _MMPFNLIST* FreeZeroListHeads;
  /* 0x34b0 */ union _SLIST_HEADER* FreeZeroPageSlists;
  /* 0x34b8 */ union _MI_AVAILABLE_PAGES_MEDIUM_GRANULARITY* AvailablePagesAtMediumGranularity;
  /* 0x34c0 */ union _MI_AVAILABLE_PAGES_LARGE_GRANULARITY* AvailablePagesAtLargeGranularity;
  /* 0x34c8 */ struct _RTL_BITMAP_EX LargePageRebuildCandidateBitmaps[3];
  /* 0x34f8 */ union _MI_AVAILABLE_PAGES_HUGE_GRANULARITY* AvailablePagesAtHugeGranularity;
  /* 0x3500 */ volatile long ProcessLargePageCacheLock;
  /* 0x3504 */ long Padding_429;
  /* 0x3508 */ struct _LIST_ENTRY ProcessLargePageCacheLinks;
  /* 0x3518 */ unsigned long ProcessLargePageCachePeriodicCount;
  /* 0x351c */ long Padding_430;
  /* 0x3520 */ struct _MI_LARGE_PAGE_COALESCE_WORKER_CONTEXT LargePageCoalesceWorkerContexts[3];
  /* 0x35b0 */ unsigned __int64 LowMemoryConfiguredThreshold;
  /* 0x35b8 */ unsigned __int64 HighMemoryConfiguredThreshold;
  /* 0x35c0 */ unsigned __int64 LowMemoryThreshold;
  /* 0x35c8 */ unsigned __int64 HighMemoryThreshold;
  /* 0x35d0 */ void* HugePfnLists;
  /* 0x35d8 */ unsigned __int64 AvailableHugeIoRanges;
  /* 0x35e0 */ unsigned __int64 DriverPageCount;
  /* 0x35e8 */ unsigned __int64 DriverLastPage;
  /* 0x35f0 */ unsigned __int64 DriverNonSlabAttempted;
  /* 0x35f8 */ unsigned __int64 DriverSlabLastFailTime;
  /* 0x3600 */ unsigned __int64 MdlPagesByListsTotal;
  /* 0x3608 */ unsigned __int64 MdlPagesByListsFromSlab;
  /* 0x3610 */ unsigned __int64 MdlPagesByListsSlabNotEligible;
  /* 0x3618 */ unsigned __int64 MdlPagesPreferContiguousSlabEligible;
  /* 0x3620 */ unsigned __int64 MdlPagesPreferContiguousFromSlab;
  /* 0x3628 */ unsigned __int64 MdlSlabPagesFreeZeroedTotal;
  /* 0x3630 */ unsigned long MdlSlabPagesFreeZeroedBuckets[4];
  /* 0x3640 */ unsigned __int64 SystemPageTablePagesNoSlab;
  /* 0x3648 */ long __PADDING__[14];
} MI_PARTITION_PAGE_LISTS, *PMI_PARTITION_PAGE_LISTS; /* size: 0x3680 */

typedef struct _MI_PARTITION_COMMIT
{
  /* 0x0000 */ volatile unsigned __int64 PeakCommitment;
  /* 0x0008 */ volatile unsigned __int64 TotalCommitLimitMaximum;
  /* 0x0010 */ volatile unsigned long Popups[2];
  /* 0x0018 */ volatile unsigned __int64 LowCommitThreshold;
  /* 0x0020 */ volatile unsigned __int64 HighCommitThreshold;
  /* 0x0028 */ volatile unsigned __int64 ExtremelyHighCommitThreshold;
  /* 0x0030 */ unsigned __int64 IdealCommitTarget;
  /* 0x0038 */ volatile long Lock;
  /* 0x003c */ long Padding_431;
  /* 0x0040 */ unsigned __int64 SystemCommitReserve;
  /* 0x0048 */ unsigned __int64 OverCommit;
} MI_PARTITION_COMMIT, *PMI_PARTITION_COMMIT; /* size: 0x0050 */

typedef struct _MI_PARTITION_ZEROING
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM RebalanceZeroFreeWorkItem;
  /* 0x0020 */ volatile long BackgroundZeroingDisabled;
  /* 0x0024 */ volatile long BootEnginesCalibrating;
  /* 0x0028 */ struct _KEVENT BootEnginesCalibrationWaiters;
  /* 0x0040 */ long ZeroFreePageSlistMinimum;
  /* 0x0044 */ enum _MI_PROCESSOR_ACTIVITY_TYPE BackgroundZeroingPreference;
} MI_PARTITION_ZEROING, *PMI_PARTITION_ZEROING; /* size: 0x0048 */

typedef struct _MI_COMBINE_WORKITEM
{
  /* 0x0000 */ void* NextEntry;
  /* 0x0008 */ struct _WORK_QUEUE_ITEM WorkItem;
} MI_COMBINE_WORKITEM, *PMI_COMBINE_WORKITEM; /* size: 0x0028 */

typedef struct _MI_PAGE_COMBINE_STATISTICS
{
  /* 0x0000 */ unsigned __int64 PagesScannedActive;
  /* 0x0008 */ unsigned __int64 PagesScannedStandby;
  /* 0x0010 */ unsigned __int64 PagesCombined;
  /* 0x0018 */ unsigned long CombineScanCount;
  /* 0x001c */ long CombinedBlocksInUse;
  /* 0x0020 */ long SumCombinedBlocksReferenceCount;
  /* 0x0024 */ unsigned long NonSlabPagesUsedForInPage;
} MI_PAGE_COMBINE_STATISTICS, *PMI_PAGE_COMBINE_STATISTICS; /* size: 0x0028 */

typedef struct _MI_PAGE_COMBINING_SUPPORT
{
  /* 0x0000 */ struct _MI_PARTITION* Partition;
  /* 0x0008 */ struct _LIST_ENTRY ArbitraryPfnMapList;
  /* 0x0018 */ struct _MI_COMBINE_WORKITEM FreeCombinePoolItem;
  /* 0x0040 */ unsigned long CombiningThreadCount;
  /* 0x0044 */ long Padding_432;
  /* 0x0048 */ struct _LIST_ENTRY CombinePageFreeList;
  /* 0x0058 */ volatile long CombineFreeListLock;
  /* 0x005c */ long Padding_433;
  /* 0x0060 */ struct _MI_COMBINE_PAGE_LISTHEAD CombinePageListHeads[16];
  /* 0x0160 */ unsigned __int64 CommonPageCombineDomain;
  /* 0x0168 */ struct _MI_PAGE_COMBINE_STATISTICS PageCombineStats;
} MI_PAGE_COMBINING_SUPPORT, *PMI_PAGE_COMBINING_SUPPORT; /* size: 0x0190 */

typedef struct _MI_ACCESS_LOG_STATE
{
  /* 0x0000 */ struct _MM_PAGE_ACCESS_INFO_HEADER* volatile CcAccessLog;
  /* 0x0008 */ struct _WORK_QUEUE_ITEM DisableAccessLoggingWorkItem;
  /* 0x0028 */ unsigned long DisableAccessLoggingState;
  /* 0x002c */ unsigned long Enabled;
  /* 0x0030 */ unsigned long MinLoggingPriority;
  /* 0x0034 */ long Padding_434;
  /* 0x0038 */ struct _MM_PAGE_ACCESS_INFO_HEADER* PfnRepurposeLog;
  /* 0x0040 */ struct _KDPC AllocatePfnRepurposeDpc;
  /* 0x0080 */ volatile long AccessLoggingLock;
  /* 0x0084 */ long __PADDING__[15];
} MI_ACCESS_LOG_STATE, *PMI_ACCESS_LOG_STATE; /* size: 0x00c0 */

typedef struct _MMWORKING_SET_EXPANSION_HEAD
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
} MMWORKING_SET_EXPANSION_HEAD, *PMMWORKING_SET_EXPANSION_HEAD; /* size: 0x0010 */

typedef struct _MI_SPECIAL_PURPOSE_MEMORY_STATE
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY TypesList;
      /* 0x0010 */ struct _LIST_ENTRY CacheEligibleList;
    }; /* size: 0x0020 */
    struct
    {
      /* 0x0000 */ struct _EPARTITION* RegularMemoryParentPartitionObject;
      /* 0x0008 */ void* SpecialPurposeMemoryParentHandle;
      /* 0x0010 */ unsigned __int64 Attributes[4];
      /* 0x0030 */ struct _EX_PUSH_LOCK Lock;
    }; /* size: 0x0038 */
  }; /* size: 0x0038 */
} MI_SPECIAL_PURPOSE_MEMORY_STATE, *PMI_SPECIAL_PURPOSE_MEMORY_STATE; /* size: 0x0038 */

typedef struct _MI_SLAB_IDENTITY_REFERENCE
{
  /* 0x0000 */ __int64 ReferenceCount;
} MI_SLAB_IDENTITY_REFERENCE, *PMI_SLAB_IDENTITY_REFERENCE; /* size: 0x0008 */

typedef struct _MI_PARTITION_SLABS
{
  /* 0x0000 */ struct _MI_SLAB_TYPE_IDENTIFIER* SlabTypeIdentifiers;
  /* 0x0008 */ unsigned __int64 SlabEntriesDemoted;
  /* 0x0010 */ volatile long SlabDemoteInProgress;
  /* 0x0014 */ unsigned long SlabTypeAcquiresCharges;
  /* 0x0018 */ struct _MI_SLAB_IDENTITY_REFERENCE IdentityRefs[64];
  /* 0x0218 */ struct _RTL_BITMAP InUseIdentitiesBitmap;
  /* 0x0228 */ unsigned long InUseIdentitiesBitmapBuffer[2];
  /* 0x0230 */ volatile long IdentitySlabsInitialized;
  /* 0x0234 */ long Padding_435;
  /* 0x0238 */ struct _EX_PUSH_LOCK IdentitiesLock;
  /* 0x0240 */ volatile unsigned __int64 IdentitySlabAvailablePages;
  /* 0x0248 */ struct _MI_AVAILABLE_PAGE_WAIT_STATES IdentitySlabAvailablePagesWaitState[2];
  /* 0x0288 */ struct _EX_RUNDOWN_REF ReplenishRundownProtection;
  /* 0x0290 */ unsigned __int64 LowMemoryConditionStartTime;
  /* 0x0298 */ long __PADDING__[10];
} MI_PARTITION_SLABS, *PMI_PARTITION_SLABS; /* size: 0x02c0 */

typedef struct _MI_PARTITION
{
  /* 0x0000 */ struct _MI_PARTITION_CORE Core;
  /* 0x01e0 */ struct _MI_PARTITION_MODWRITES Modwriter;
  /* 0x04a8 */ long Padding_436[2];
  /* 0x04b0 */ struct _MI_PARTITION_STORES Store;
  /* 0x06c0 */ struct _MI_PARTITION_SEGMENTS Segments;
  /* 0x0b40 */ struct _MI_PARTITION_PAGE_LISTS PageLists;
  /* 0x41c0 */ struct _MI_PARTITION_COMMIT Commit;
  /* 0x4210 */ struct _MI_PARTITION_ZEROING Zeroing;
  /* 0x4258 */ struct _MI_PAGE_COMBINING_SUPPORT PageCombine;
  /* 0x43e8 */ long Padding_437[6];
  /* 0x4400 */ struct _MI_ACCESS_LOG_STATE AccessLog;
  /* 0x44c0 */ void* WorkingSetControl;
  /* 0x44c8 */ struct _MMWORKING_SET_EXPANSION_HEAD WorkingSetExpansionHead;
  /* 0x44d8 */ struct _MI_SPECIAL_PURPOSE_MEMORY_STATE SpecialPurposeMemory;
  /* 0x4510 */ long Padding_438[12];
  /* 0x4540 */ struct _MI_PARTITION_SLABS Slabs;
  /* 0x4800 */ unsigned __int64 LastPeriodicTelemetryLogTime;
  /* 0x4808 */ long Padding_439[14];
  /* 0x4840 */ struct _MI_VISIBLE_PARTITION Vp;
} MI_PARTITION, *PMI_PARTITION; /* size: 0x5d40 */

typedef struct _DBGKD_WRITE_BREAKPOINT32
{
  /* 0x0000 */ unsigned long BreakPointAddress;
  /* 0x0004 */ unsigned long BreakPointHandle;
} DBGKD_WRITE_BREAKPOINT32, *PDBGKD_WRITE_BREAKPOINT32; /* size: 0x0008 */

typedef struct _FILE_NETWORK_OPEN_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0028 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0030 */ unsigned long FileAttributes;
  /* 0x0034 */ long __PADDING__[1];
} FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION; /* size: 0x0038 */

typedef struct _MI_PROTOTYPE_PTES_NODE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE Node;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0018 */ unsigned __int64 AllocationType : 3; /* bit position: 0 */
          /* 0x0018 */ unsigned __int64 Inserted : 1; /* bit position: 3 */
        }; /* bitfield */
      } /* size: 0x0008 */ e1;
      struct
      {
        /* 0x0018 */ unsigned __int64 PrototypePtesFlags;
      } /* size: 0x0008 */ e2;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
} MI_PROTOTYPE_PTES_NODE, *PMI_PROTOTYPE_PTES_NODE; /* size: 0x0020 */

typedef struct _IMAGE_SECURITY_CONTEXT
{
  union
  {
    /* 0x0000 */ void* PageHashes;
    /* 0x0000 */ unsigned __int64 Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 SecurityBeingCreated : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 SecurityMandatory : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 PageHashPointer : 61; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} IMAGE_SECURITY_CONTEXT, *PIMAGE_SECURITY_CONTEXT; /* size: 0x0008 */

typedef struct _MI_IMAGE_ADDITIONAL_INFO
{
  /* 0x0000 */ struct _MI_PROTOTYPE_PTES_NODE ProtosNode;
  /* 0x0020 */ void* DynamicRelocations;
  /* 0x0028 */ volatile struct _IMAGE_SECURITY_CONTEXT SecurityContext;
  /* 0x0030 */ void* ImageFileExtents;
  union
  {
    union
    {
      /* 0x0038 */ unsigned long LongFlags;
      /* 0x0038 */ struct _MI_IMAGE_ADDITIONAL_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x003c */ unsigned long Unused;
  /* 0x0040 */ unsigned __int64 StrongImageReference;
} MI_IMAGE_ADDITIONAL_INFO, *PMI_IMAGE_ADDITIONAL_INFO; /* size: 0x0048 */

struct _PCW_BUFFER;

typedef struct _MMSECTION_FLAGS2
{
  /* 0x0000 */ unsigned short PartitionId : 10; /* bit position: 0 */
  struct /* bitfield */
  {
    /* 0x0002 */ unsigned char NoCrossPartitionAccess : 1; /* bit position: 0 */
    /* 0x0002 */ unsigned char SubsectionCrossPartitionReferenceOverflow : 1; /* bit position: 1 */
    /* 0x0002 */ unsigned char UsingFileExtents : 2; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0003 */ char __PADDING__[1];
} MMSECTION_FLAGS2, *PMMSECTION_FLAGS2; /* size: 0x0004 */

typedef struct _ETW_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _ETWP_NOTIFICATION_HEADER* DataBlock;
  /* 0x0018 */ struct _ETW_REG_ENTRY* RegEntry;
  /* 0x0020 */ struct _ETW_REG_ENTRY* ReplyObject;
  /* 0x0028 */ void* WakeReference;
  /* 0x0030 */ unsigned short RegIndex;
  /* 0x0032 */ unsigned short ReplyIndex;
  /* 0x0034 */ unsigned long Flags;
} ETW_QUEUE_ENTRY, *PETW_QUEUE_ENTRY; /* size: 0x0038 */

typedef struct _DBGKD_CONTINUE2
{
  /* 0x0000 */ long ContinueStatus;
  union
  {
    /* 0x0004 */ struct _AMD64_DBGKD_CONTROL_SET ControlSet;
    /* 0x0004 */ struct _DBGKD_ANY_CONTROL_SET AnyControlSet;
  }; /* size: 0x001c */
} DBGKD_CONTINUE2, *PDBGKD_CONTINUE2; /* size: 0x0020 */

typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT32
{
  /* 0x0000 */ unsigned long BreakpointAddress;
  /* 0x0004 */ unsigned long Flags;
} DBGKD_SET_INTERNAL_BREAKPOINT32, *PDBGKD_SET_INTERNAL_BREAKPOINT32; /* size: 0x0008 */

typedef struct _DBGKD_READ_MEMORY64
{
  /* 0x0000 */ unsigned __int64 TargetBaseAddress;
  /* 0x0008 */ unsigned long TransferCount;
  /* 0x000c */ unsigned long ActualBytesRead;
} DBGKD_READ_MEMORY64, *PDBGKD_READ_MEMORY64; /* size: 0x0010 */

typedef struct _DBGKD_SET_CONTEXT
{
  /* 0x0000 */ unsigned long ContextFlags;
} DBGKD_SET_CONTEXT, *PDBGKD_SET_CONTEXT; /* size: 0x0004 */

typedef struct _DBGKD_WRITE_BREAKPOINT64
{
  /* 0x0000 */ unsigned __int64 BreakPointAddress;
  /* 0x0008 */ unsigned long BreakPointHandle;
  /* 0x000c */ long __PADDING__[1];
} DBGKD_WRITE_BREAKPOINT64, *PDBGKD_WRITE_BREAKPOINT64; /* size: 0x0010 */

typedef struct _DBGKD_RESTORE_BREAKPOINT
{
  /* 0x0000 */ unsigned long BreakPointHandle;
} DBGKD_RESTORE_BREAKPOINT, *PDBGKD_RESTORE_BREAKPOINT; /* size: 0x0004 */

typedef struct _DBGKD_CONTINUE
{
  /* 0x0000 */ long ContinueStatus;
} DBGKD_CONTINUE, *PDBGKD_CONTINUE; /* size: 0x0004 */

typedef struct _DBGKD_READ_WRITE_IO64
{
  /* 0x0000 */ unsigned __int64 IoAddress;
  /* 0x0008 */ unsigned long DataSize;
  /* 0x000c */ unsigned long DataValue;
} DBGKD_READ_WRITE_IO64, *PDBGKD_READ_WRITE_IO64; /* size: 0x0010 */

typedef struct _DBGKD_READ_WRITE_IO_EXTENDED64
{
  /* 0x0000 */ unsigned long DataSize;
  /* 0x0004 */ unsigned long InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long AddressSpace;
  /* 0x0010 */ unsigned __int64 IoAddress;
  /* 0x0018 */ unsigned long DataValue;
  /* 0x001c */ long __PADDING__[1];
} DBGKD_READ_WRITE_IO_EXTENDED64, *PDBGKD_READ_WRITE_IO_EXTENDED64; /* size: 0x0020 */

typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT64
{
  /* 0x0000 */ unsigned __int64 BreakpointAddress;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ long __PADDING__[1];
} DBGKD_SET_INTERNAL_BREAKPOINT64, *PDBGKD_SET_INTERNAL_BREAKPOINT64; /* size: 0x0010 */

typedef struct _DBGKD_GET_VERSION64
{
  /* 0x0000 */ unsigned short MajorVersion;
  /* 0x0002 */ unsigned short MinorVersion;
  /* 0x0004 */ unsigned char ProtocolVersion;
  /* 0x0005 */ unsigned char KdSecondaryVersion;
  /* 0x0006 */ unsigned short Flags;
  /* 0x0008 */ unsigned short MachineType;
  /* 0x000a */ unsigned char MaxPacketType;
  /* 0x000b */ unsigned char MaxStateChange;
  /* 0x000c */ unsigned char MaxManipulate;
  /* 0x000d */ unsigned char Simulation;
  /* 0x000e */ unsigned short Unused[1];
  /* 0x0010 */ unsigned __int64 KernBase;
  /* 0x0018 */ unsigned __int64 PsLoadedModuleList;
  /* 0x0020 */ unsigned __int64 DebuggerDataList;
} DBGKD_GET_VERSION64, *PDBGKD_GET_VERSION64; /* size: 0x0028 */

typedef struct _DBGKD_READ_WRITE_MSR
{
  /* 0x0000 */ unsigned long Msr;
  /* 0x0004 */ unsigned long DataValueLow;
  /* 0x0008 */ unsigned long DataValueHigh;
} DBGKD_READ_WRITE_MSR, *PDBGKD_READ_WRITE_MSR; /* size: 0x000c */

typedef struct _DBGKD_SEARCH_MEMORY
{
  union
  {
    /* 0x0000 */ unsigned __int64 SearchAddress;
    /* 0x0000 */ unsigned __int64 FoundAddress;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned __int64 SearchLength;
  /* 0x0010 */ unsigned long PatternLength;
  /* 0x0014 */ long __PADDING__[1];
} DBGKD_SEARCH_MEMORY, *PDBGKD_SEARCH_MEMORY; /* size: 0x0018 */

typedef struct _DBGKD_GET_SET_BUS_DATA
{
  /* 0x0000 */ unsigned long BusDataType;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ unsigned long SlotNumber;
  /* 0x000c */ unsigned long Offset;
  /* 0x0010 */ unsigned long Length;
} DBGKD_GET_SET_BUS_DATA, *PDBGKD_GET_SET_BUS_DATA; /* size: 0x0014 */

typedef struct _DBGKD_FILL_MEMORY
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned short Flags;
  /* 0x000e */ unsigned short PatternLength;
} DBGKD_FILL_MEMORY, *PDBGKD_FILL_MEMORY; /* size: 0x0010 */

typedef struct _DBGKD_QUERY_MEMORY
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ unsigned __int64 Reserved;
  /* 0x0010 */ unsigned long AddressSpace;
  /* 0x0014 */ unsigned long Flags;
} DBGKD_QUERY_MEMORY, *PDBGKD_QUERY_MEMORY; /* size: 0x0018 */

typedef struct _DBGKD_SWITCH_PARTITION
{
  /* 0x0000 */ unsigned long Partition;
} DBGKD_SWITCH_PARTITION, *PDBGKD_SWITCH_PARTITION; /* size: 0x0004 */

typedef struct _DBGKD_WRITE_CUSTOM_BREAKPOINT
{
  /* 0x0000 */ unsigned __int64 BreakPointAddress;
  /* 0x0008 */ unsigned __int64 BreakPointInstruction;
  /* 0x0010 */ unsigned long BreakPointHandle;
  /* 0x0014 */ unsigned char BreakPointInstructionSize;
  /* 0x0015 */ unsigned char BreakPointInstructionAlignment;
  /* 0x0016 */ char __PADDING__[2];
} DBGKD_WRITE_CUSTOM_BREAKPOINT, *PDBGKD_WRITE_CUSTOM_BREAKPOINT; /* size: 0x0018 */

typedef struct _DBGKD_MANIPULATE_STATE64
{
  /* 0x0000 */ unsigned long ApiNumber;
  /* 0x0004 */ unsigned short ProcessorLevel;
  /* 0x0006 */ unsigned short Processor;
  /* 0x0008 */ long ReturnStatus;
  /* 0x000c */ long Padding_440;
  union
  {
    union
    {
      /* 0x0010 */ struct _DBGKD_READ_MEMORY64 ReadMemory;
      /* 0x0010 */ struct _DBGKD_WRITE_MEMORY64 WriteMemory;
      /* 0x0010 */ struct _DBGKD_GET_CONTEXT GetContext;
      /* 0x0010 */ struct _DBGKD_SET_CONTEXT SetContext;
      /* 0x0010 */ struct _DBGKD_WRITE_BREAKPOINT64 WriteBreakPoint;
      /* 0x0010 */ struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
      /* 0x0010 */ struct _DBGKD_CONTINUE Continue;
      /* 0x0010 */ struct _DBGKD_CONTINUE2 Continue2;
      /* 0x0010 */ struct _DBGKD_READ_WRITE_IO64 ReadWriteIo;
      /* 0x0010 */ struct _DBGKD_READ_WRITE_IO_EXTENDED64 ReadWriteIoExtended;
      /* 0x0010 */ struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
      /* 0x0010 */ struct _DBGKD_SET_SPECIAL_CALL64 SetSpecialCall;
      /* 0x0010 */ struct _DBGKD_SET_INTERNAL_BREAKPOINT64 SetInternalBreakpoint;
      /* 0x0010 */ struct _DBGKD_GET_INTERNAL_BREAKPOINT64 GetInternalBreakpoint;
      /* 0x0010 */ struct _DBGKD_GET_VERSION64 GetVersion64;
      /* 0x0010 */ struct _DBGKD_BREAKPOINTEX BreakPointEx;
      /* 0x0010 */ struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;
      /* 0x0010 */ struct _DBGKD_SEARCH_MEMORY SearchMemory;
      /* 0x0010 */ struct _DBGKD_GET_SET_BUS_DATA GetSetBusData;
      /* 0x0010 */ struct _DBGKD_FILL_MEMORY FillMemory;
      /* 0x0010 */ struct _DBGKD_QUERY_MEMORY QueryMemory;
      /* 0x0010 */ struct _DBGKD_SWITCH_PARTITION SwitchPartition;
      /* 0x0010 */ struct _DBGKD_CONTEXT_EX GetContextEx;
      /* 0x0010 */ struct _DBGKD_CONTEXT_EX SetContextEx;
      /* 0x0010 */ struct _DBGKD_WRITE_CUSTOM_BREAKPOINT WriteCustomBreakPoint;
    }; /* size: 0x0028 */
  } /* size: 0x0028 */ u;
} DBGKD_MANIPULATE_STATE64, *PDBGKD_MANIPULATE_STATE64; /* size: 0x0038 */

typedef struct _MI_EXTRA_IMAGE_INFORMATION
{
  /* 0x0000 */ unsigned long SizeOfHeaders;
  /* 0x0004 */ unsigned long SizeOfImage;
  /* 0x0008 */ unsigned long TimeDateStamp;
  struct /* bitfield */
  {
    /* 0x000c */ unsigned long ImageCetShadowStacksReady : 1; /* bit position: 0 */
    /* 0x000c */ unsigned long ImageCetShadowStacksStrictMode : 1; /* bit position: 1 */
    /* 0x000c */ unsigned long ImageCetSetContextIpValidationRelaxedMode : 1; /* bit position: 2 */
    /* 0x000c */ unsigned long ImageCetDynamicApisAllowInProc : 1; /* bit position: 3 */
    /* 0x000c */ unsigned long ImageCetDowngradeReserved1 : 1; /* bit position: 4 */
    /* 0x000c */ unsigned long ImageCetDowngradeReserved2 : 1; /* bit position: 5 */
    /* 0x000c */ unsigned long ImageExpansionCompatible : 1; /* bit position: 6 */
    /* 0x000c */ unsigned long Spare : 25; /* bit position: 7 */
  }; /* bitfield */
} MI_EXTRA_IMAGE_INFORMATION, *PMI_EXTRA_IMAGE_INFORMATION; /* size: 0x0010 */

struct FEATURE_STATE_CHANGE_SUBSCRIPTION__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _SECTION_IMAGE_INFORMATION
{
  /* 0x0000 */ void* TransferAddress;
  /* 0x0008 */ unsigned long ZeroBits;
  /* 0x000c */ long Padding_441;
  /* 0x0010 */ unsigned __int64 MaximumStackSize;
  /* 0x0018 */ unsigned __int64 CommittedStackSize;
  /* 0x0020 */ unsigned long SubSystemType;
  union
  {
    struct
    {
      /* 0x0024 */ unsigned short SubSystemMinorVersion;
      /* 0x0026 */ unsigned short SubSystemMajorVersion;
    }; /* size: 0x0004 */
    /* 0x0024 */ unsigned long SubSystemVersion;
  }; /* size: 0x0004 */
  union
  {
    struct
    {
      /* 0x0028 */ unsigned short MajorOperatingSystemVersion;
      /* 0x002a */ unsigned short MinorOperatingSystemVersion;
    }; /* size: 0x0004 */
    /* 0x0028 */ unsigned long OperatingSystemVersion;
  }; /* size: 0x0004 */
  /* 0x002c */ unsigned short ImageCharacteristics;
  /* 0x002e */ unsigned short DllCharacteristics;
  /* 0x0030 */ unsigned short Machine;
  /* 0x0032 */ unsigned char ImageContainsCode;
  union
  {
    /* 0x0033 */ unsigned char ImageFlags;
    struct /* bitfield */
    {
      /* 0x0033 */ unsigned char ComPlusNativeReady : 1; /* bit position: 0 */
      /* 0x0033 */ unsigned char ComPlusILOnly : 1; /* bit position: 1 */
      /* 0x0033 */ unsigned char ImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0033 */ unsigned char ImageMappedFlat : 1; /* bit position: 3 */
      /* 0x0033 */ unsigned char BaseBelow4gb : 1; /* bit position: 4 */
      /* 0x0033 */ unsigned char ComPlusPrefer32bit : 1; /* bit position: 5 */
      /* 0x0033 */ unsigned char Reserved : 2; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0034 */ unsigned long LoaderFlags;
  /* 0x0038 */ unsigned long ImageFileSize;
  /* 0x003c */ unsigned long CheckSum;
} SECTION_IMAGE_INFORMATION, *PSECTION_IMAGE_INFORMATION; /* size: 0x0040 */

typedef struct _MI_SECTION_IMAGE_INFORMATION
{
  /* 0x0000 */ struct _SECTION_IMAGE_INFORMATION ExportedImageInformation;
  /* 0x0040 */ struct _MI_EXTRA_IMAGE_INFORMATION InternalImageInformation;
} MI_SECTION_IMAGE_INFORMATION, *PMI_SECTION_IMAGE_INFORMATION; /* size: 0x0050 */

typedef struct _FAST_OWNER_ENTRY
{
  /* 0x0000 */ void* Reserved[9];
} FAST_OWNER_ENTRY, *PFAST_OWNER_ENTRY; /* size: 0x0048 */

typedef struct _THERMAL_ZONE_COUNTERS
{
  /* 0x0000 */ unsigned long Temperature;
  /* 0x0004 */ unsigned long ThrottleLimit;
  /* 0x0008 */ unsigned long ThrottleReasons;
  /* 0x000c */ unsigned long TemperatureHighPrecision;
} THERMAL_ZONE_COUNTERS, *PTHERMAL_ZONE_COUNTERS; /* size: 0x0010 */

typedef struct _PCW_PROCESSOR_INFO
{
  /* 0x0000 */ unsigned __int64 IdleTime;
  /* 0x0008 */ unsigned __int64 AvailableTime;
  /* 0x0010 */ unsigned __int64 UserTime;
  /* 0x0018 */ unsigned __int64 KernelTime;
  /* 0x0020 */ unsigned long Interrupts;
  /* 0x0024 */ long Padding_442;
  /* 0x0028 */ unsigned __int64 DpcTime;
  /* 0x0030 */ unsigned __int64 InterruptTime;
  /* 0x0038 */ unsigned long ClockInterrupts;
  /* 0x003c */ unsigned long DpcCount;
  /* 0x0040 */ unsigned long DpcRate;
  /* 0x0044 */ long Padding_443;
  /* 0x0048 */ unsigned __int64 C1Time;
  /* 0x0050 */ unsigned __int64 C2Time;
  /* 0x0058 */ unsigned __int64 C3Time;
  /* 0x0060 */ unsigned __int64 C1Transitions;
  /* 0x0068 */ unsigned __int64 C2Transitions;
  /* 0x0070 */ unsigned __int64 C3Transitions;
  /* 0x0078 */ unsigned __int64 StallTime;
  /* 0x0080 */ unsigned long ParkingStatus;
  /* 0x0084 */ unsigned long CurrentFrequency;
  /* 0x0088 */ unsigned long PercentMaxFrequency;
  /* 0x008c */ unsigned long StateFlags;
  /* 0x0090 */ unsigned long NominalThroughput;
  /* 0x0094 */ unsigned long ActiveThroughput;
  /* 0x0098 */ unsigned __int64 ScaledThroughput;
  /* 0x00a0 */ unsigned __int64 ScaledKernelThroughput;
  /* 0x00a8 */ unsigned __int64 AverageIdleTime;
  /* 0x00b0 */ unsigned __int64 IdleBreakEvents;
  /* 0x00b8 */ unsigned long PerformanceLimit;
  /* 0x00bc */ unsigned long PerformanceLimitFlags;
  /* 0x00c0 */ unsigned __int64 ScaledFrequency;
} PCW_PROCESSOR_INFO, *PPCW_PROCESSOR_INFO; /* size: 0x00c8 */

typedef struct _PEP_ACPI_SPB_UART_RESOURCE
{
  /* 0x0000 */ struct _PEP_ACPI_SPB_RESOURCE SpbCommon;
  /* 0x0028 */ unsigned long BaudRate;
  /* 0x002c */ unsigned short RxBufferSize;
  /* 0x002e */ unsigned short TxBufferSize;
  /* 0x0030 */ unsigned char Parity;
  /* 0x0031 */ unsigned char LinesInUse;
  /* 0x0032 */ char __PADDING__[6];
} PEP_ACPI_SPB_UART_RESOURCE, *PPEP_ACPI_SPB_UART_RESOURCE; /* size: 0x0038 */

struct FEATURE_ERROR
{
  /* 0x0000 */ HRESULT hr;
  /* 0x0004 */ unsigned short lineNumber;
  /* 0x0006 */ char Padding_444[2];
  /* 0x0008 */ const char* file;
  /* 0x0010 */ const char* process;
  /* 0x0018 */ const char* modulePath;
  /* 0x0020 */ unsigned int callerReturnAddressOffset;
  /* 0x0024 */ long Padding_445;
  /* 0x0028 */ const char* callerModule;
  /* 0x0030 */ const char* message;
  /* 0x0038 */ unsigned short originLineNumber;
  /* 0x003a */ char Padding_446[6];
  /* 0x0040 */ const char* originFile;
  /* 0x0048 */ const char* originModule;
  /* 0x0050 */ unsigned int originCallerReturnAddressOffset;
  /* 0x0054 */ long Padding_447;
  /* 0x0058 */ const char* originCallerModule;
  /* 0x0060 */ const char* originName;
}; /* size: 0x0068 */

typedef union _MM_STORE_SUB_KEY_DESCRIPTOR
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long KeyType : 2; /* bit position: 0 */
        /* 0x0000 */ unsigned long Spare : 10; /* bit position: 2 */
      }; /* bitfield */
    } /* size: 0x0004 */ Flags;
    /* 0x0000 */ void* VirtualAddress;
  }; /* size: 0x0008 */
} MM_STORE_SUB_KEY_DESCRIPTOR, *PMM_STORE_SUB_KEY_DESCRIPTOR; /* size: 0x0008 */

typedef struct _GROUP_AFFINITY32
{
  /* 0x0000 */ unsigned long Mask;
  /* 0x0004 */ unsigned short Group;
  /* 0x0006 */ unsigned short Reserved[3];
} GROUP_AFFINITY32, *PGROUP_AFFINITY32; /* size: 0x000c */

typedef struct _COMPRESSED_DATA_INFO
{
  /* 0x0000 */ unsigned short CompressionFormatAndEngine;
  /* 0x0002 */ unsigned char CompressionUnitShift;
  /* 0x0003 */ unsigned char ChunkShift;
  /* 0x0004 */ unsigned char ClusterShift;
  /* 0x0005 */ unsigned char Reserved;
  /* 0x0006 */ unsigned short NumberOfChunks;
  /* 0x0008 */ unsigned long CompressedChunkSizes[1];
} COMPRESSED_DATA_INFO, *PCOMPRESSED_DATA_INFO; /* size: 0x000c */

typedef struct _PEP_ACPI_GPIO_RESOURCE
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ union _PEP_ACPI_RESOURCE_FLAGS Flags;
  /* 0x0008 */ enum _KINTERRUPT_MODE InterruptType;
  /* 0x000c */ enum _KINTERRUPT_POLARITY InterruptPolarity;
  /* 0x0010 */ enum _GPIO_PIN_CONFIG_TYPE PinConfig;
  /* 0x0014 */ enum _GPIO_PIN_IORESTRICTION_TYPE IoRestrictionType;
  /* 0x0018 */ unsigned short DriveStrength;
  /* 0x001a */ unsigned short DebounceTimeout;
  /* 0x001c */ long Padding_448;
  /* 0x0020 */ unsigned short* PinTable;
  /* 0x0028 */ unsigned short PinCount;
  /* 0x002a */ unsigned char ResourceSourceIndex;
  /* 0x002b */ char Padding_449[5];
  /* 0x0030 */ struct _UNICODE_STRING* ResourceSourceName;
  /* 0x0038 */ unsigned char* VendorData;
  /* 0x0040 */ unsigned short VendorDataLength;
  /* 0x0042 */ char __PADDING__[6];
} PEP_ACPI_GPIO_RESOURCE, *PPEP_ACPI_GPIO_RESOURCE; /* size: 0x0048 */

typedef struct _NT_TIB32
{
  /* 0x0000 */ unsigned long ExceptionList;
  /* 0x0004 */ unsigned long StackBase;
  /* 0x0008 */ unsigned long StackLimit;
  /* 0x000c */ unsigned long SubSystemTib;
  union
  {
    /* 0x0010 */ unsigned long FiberData;
    /* 0x0010 */ unsigned long Version;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long ArbitraryUserPointer;
  /* 0x0018 */ unsigned long Self;
} NT_TIB32, *PNT_TIB32; /* size: 0x001c */

typedef struct _ACTIVATION_CONTEXT_STACK32
{
  /* 0x0000 */ unsigned long ActiveFrame;
  /* 0x0004 */ struct LIST_ENTRY32 FrameListCache;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long NextCookieSequenceNumber;
  /* 0x0014 */ unsigned long StackId;
} ACTIVATION_CONTEXT_STACK32, *PACTIVATION_CONTEXT_STACK32; /* size: 0x0018 */

typedef struct _STRING32
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ unsigned long Buffer;
} STRING32, *PSTRING32; /* size: 0x0008 */

typedef struct _TEB32
{
  /* 0x0000 */ struct _NT_TIB32 NtTib;
  /* 0x001c */ unsigned long EnvironmentPointer;
  /* 0x0020 */ struct _CLIENT_ID32 ClientId;
  /* 0x0028 */ unsigned long ActiveRpcHandle;
  /* 0x002c */ unsigned long ThreadLocalStoragePointer;
  /* 0x0030 */ unsigned long ProcessEnvironmentBlock;
  /* 0x0034 */ unsigned long LastErrorValue;
  /* 0x0038 */ unsigned long CountOfOwnedCriticalSections;
  /* 0x003c */ unsigned long CsrClientThread;
  /* 0x0040 */ unsigned long Win32ThreadInfo;
  /* 0x0044 */ unsigned long User32Reserved[26];
  /* 0x00ac */ unsigned long UserReserved[5];
  /* 0x00c0 */ unsigned long WOW32Reserved;
  /* 0x00c4 */ unsigned long CurrentLocale;
  /* 0x00c8 */ unsigned long FpSoftwareStatusRegister;
  /* 0x00cc */ unsigned long ReservedForDebuggerInstrumentation[16];
  /* 0x010c */ unsigned long SystemReserved1[21];
  /* 0x0160 */ unsigned long HeapFlsData;
  /* 0x0164 */ unsigned long RngState[4];
  /* 0x0174 */ char PlaceholderCompatibilityMode;
  /* 0x0175 */ unsigned char PlaceholderHydrationAlwaysExplicit;
  /* 0x0176 */ char PlaceholderReserved[10];
  /* 0x0180 */ unsigned long ProxiedProcessId;
  /* 0x0184 */ struct _ACTIVATION_CONTEXT_STACK32 _ActivationStack;
  /* 0x019c */ unsigned char WorkingOnBehalfTicket[8];
  /* 0x01a4 */ long ExceptionCode;
  /* 0x01a8 */ unsigned long ActivationContextStackPointer;
  /* 0x01ac */ unsigned long InstrumentationCallbackSp;
  /* 0x01b0 */ unsigned long InstrumentationCallbackPreviousPc;
  /* 0x01b4 */ unsigned long InstrumentationCallbackPreviousSp;
  /* 0x01b8 */ unsigned char InstrumentationCallbackDisabled;
  /* 0x01b9 */ unsigned char SpareBytes[23];
  /* 0x01d0 */ unsigned long TxFsContext;
  /* 0x01d4 */ struct _GDI_TEB_BATCH32 GdiTebBatch;
  /* 0x06b4 */ struct _CLIENT_ID32 RealClientId;
  /* 0x06bc */ unsigned long GdiCachedProcessHandle;
  /* 0x06c0 */ unsigned long GdiClientPID;
  /* 0x06c4 */ unsigned long GdiClientTID;
  /* 0x06c8 */ unsigned long GdiThreadLocalInfo;
  /* 0x06cc */ unsigned long Win32ClientInfo[62];
  /* 0x07c4 */ unsigned long glDispatchTable[233];
  /* 0x0b68 */ unsigned long glReserved1[29];
  /* 0x0bdc */ unsigned long glReserved2;
  /* 0x0be0 */ unsigned long glSectionInfo;
  /* 0x0be4 */ unsigned long glSection;
  /* 0x0be8 */ unsigned long glTable;
  /* 0x0bec */ unsigned long glCurrentRC;
  /* 0x0bf0 */ unsigned long glContext;
  /* 0x0bf4 */ unsigned long LastStatusValue;
  /* 0x0bf8 */ struct _STRING32 StaticUnicodeString;
  /* 0x0c00 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x0e0a */ char Padding_450[2];
  /* 0x0e0c */ unsigned long DeallocationStack;
  /* 0x0e10 */ unsigned long TlsSlots[64];
  /* 0x0f10 */ struct LIST_ENTRY32 TlsLinks;
  /* 0x0f18 */ unsigned long Vdm;
  /* 0x0f1c */ unsigned long ReservedForNtRpc;
  /* 0x0f20 */ unsigned long DbgSsReserved[2];
  /* 0x0f28 */ unsigned long HardErrorMode;
  /* 0x0f2c */ unsigned long Instrumentation[9];
  /* 0x0f50 */ struct _GUID ActivityId;
  /* 0x0f60 */ unsigned long SubProcessTag;
  /* 0x0f64 */ unsigned long PerflibData;
  /* 0x0f68 */ unsigned long EtwTraceData;
  /* 0x0f6c */ unsigned long WinSockData;
  /* 0x0f70 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x0f74 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x0f74 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x0f74 */ unsigned char ReservedPad0;
      /* 0x0f75 */ unsigned char ReservedPad1;
      /* 0x0f76 */ unsigned char ReservedPad2;
      /* 0x0f77 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0f78 */ unsigned long GuaranteedStackBytes;
  /* 0x0f7c */ unsigned long ReservedForPerf;
  /* 0x0f80 */ unsigned long ReservedForOle;
  /* 0x0f84 */ unsigned long WaitingOnLoaderLock;
  /* 0x0f88 */ unsigned long SavedPriorityState;
  /* 0x0f8c */ unsigned long ReservedForCodeCoverage;
  /* 0x0f90 */ unsigned long ThreadPoolData;
  /* 0x0f94 */ unsigned long TlsExpansionSlots;
  /* 0x0f98 */ unsigned long MuiGeneration;
  /* 0x0f9c */ unsigned long IsImpersonating;
  /* 0x0fa0 */ unsigned long NlsCache;
  /* 0x0fa4 */ unsigned long pShimData;
  /* 0x0fa8 */ unsigned long HeapData;
  /* 0x0fac */ unsigned long CurrentTransactionHandle;
  /* 0x0fb0 */ unsigned long ActiveFrame;
  /* 0x0fb4 */ unsigned long FlsData;
  /* 0x0fb8 */ unsigned long PreferredLanguages;
  /* 0x0fbc */ unsigned long UserPrefLanguages;
  /* 0x0fc0 */ unsigned long MergedPrefLanguages;
  /* 0x0fc4 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x0fc8 */ volatile unsigned short CrossTebFlags;
    /* 0x0fc8 */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x0fca */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x0fca */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x0fca */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x0fca */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x0fca */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x0fca */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x0fca */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x0fca */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x0fca */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x0fca */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x0fca */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x0fca */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x0fca */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x0fca */ unsigned short LoadOwner : 1; /* bit position: 12 */
      /* 0x0fca */ unsigned short LoaderWorker : 1; /* bit position: 13 */
      /* 0x0fca */ unsigned short SkipLoaderInit : 1; /* bit position: 14 */
      /* 0x0fca */ unsigned short SkipFileAPIBrokering : 1; /* bit position: 15 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0fcc */ unsigned long TxnScopeEnterCallback;
  /* 0x0fd0 */ unsigned long TxnScopeExitCallback;
  /* 0x0fd4 */ unsigned long TxnScopeContext;
  /* 0x0fd8 */ unsigned long LockCount;
  /* 0x0fdc */ long WowTebOffset;
  /* 0x0fe0 */ unsigned long ResourceRetValue;
  /* 0x0fe4 */ unsigned long ReservedForWdf;
  /* 0x0fe8 */ unsigned __int64 ReservedForCrt;
  /* 0x0ff0 */ struct _GUID EffectiveContainerId;
  /* 0x1000 */ unsigned __int64 LastSleepCounter;
  /* 0x1008 */ unsigned long SpinCallCount;
  /* 0x100c */ long Padding_451;
  /* 0x1010 */ unsigned __int64 ExtendedFeatureDisableMask;
  /* 0x1018 */ unsigned long SchedulerSharedDataSlot;
  /* 0x101c */ unsigned long HeapWalkContext;
  /* 0x1020 */ struct _GROUP_AFFINITY32 PrimaryGroupAffinity;
  /* 0x102c */ unsigned long Rcu[2];
  /* 0x1034 */ long __PADDING__[1];
} TEB32, *PTEB32; /* size: 0x1038 */

typedef struct _DUMP_INITIALIZATION_CONTEXT
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* MemoryBlock;
  /* 0x0010 */ void* CommonBuffer[2];
  /* 0x0020 */ union _LARGE_INTEGER PhysicalAddress[2];
  /* 0x0030 */ void* StallRoutine /* function */;
  /* 0x0038 */ void* OpenRoutine /* function */;
  /* 0x0040 */ void* WriteRoutine /* function */;
  /* 0x0048 */ void* FinishRoutine /* function */;
  /* 0x0050 */ struct _ADAPTER_OBJECT* AdapterObject;
  /* 0x0058 */ void* MappedRegisterBase;
  /* 0x0060 */ void* PortConfiguration;
  /* 0x0068 */ unsigned char CrashDump;
  /* 0x0069 */ unsigned char MarkMemoryOnly;
  /* 0x006a */ unsigned char HiberResume;
  /* 0x006b */ unsigned char InitDumpStackInvoked;
  /* 0x006c */ unsigned long MaximumTransferSize;
  /* 0x0070 */ unsigned long CommonBufferSize;
  /* 0x0074 */ long Padding_452;
  /* 0x0078 */ void* TargetAddress;
  /* 0x0080 */ void* WritePendingRoutine /* function */;
  /* 0x0088 */ unsigned long PartitionStyle;
  union
  {
    union
    {
      struct
      {
        /* 0x008c */ unsigned long Signature;
        /* 0x0090 */ unsigned long CheckSum;
      } /* size: 0x0008 */ Mbr;
      struct
      {
        /* 0x008c */ struct _GUID DiskId;
      } /* size: 0x0010 */ Gpt;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ DiskInfo;
  /* 0x009c */ long Padding_453;
  /* 0x00a0 */ void* ReadRoutine /* function */;
  /* 0x00a8 */ void* GetDriveTelemetryRoutine /* function */;
  /* 0x00b0 */ unsigned long LogSectionTruncateSize;
  /* 0x00b4 */ unsigned long Parameters[16];
  /* 0x00f4 */ long Padding_454;
  /* 0x00f8 */ void* GetTransferSizesRoutine /* function */;
  /* 0x0100 */ void* DumpNotifyRoutine /* function */;
} DUMP_INITIALIZATION_CONTEXT, *PDUMP_INITIALIZATION_CONTEXT; /* size: 0x0108 */

typedef struct _ISRDPCSTATS_SEQUENCE
{
  /* 0x0000 */ unsigned long SequenceNumber;
  /* 0x0004 */ long Padding_455;
  /* 0x0008 */ unsigned __int64 IsrTime;
  /* 0x0010 */ unsigned __int64 IsrCount;
  /* 0x0018 */ unsigned __int64 DpcTime;
  /* 0x0020 */ unsigned __int64 DpcCount;
} ISRDPCSTATS_SEQUENCE, *PISRDPCSTATS_SEQUENCE; /* size: 0x0028 */

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCY
{
  /* 0x0000 */ unsigned __int64 Residency;
  /* 0x0008 */ unsigned __int64 TransitionCount;
} PROCESSOR_PLATFORM_STATE_RESIDENCY, *PPROCESSOR_PLATFORM_STATE_RESIDENCY; /* size: 0x0010 */

typedef struct _LOADER_PARAMETER_CI_EXTENSION
{
  /* 0x0000 */ unsigned long CodeIntegrityOptions;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long UpgradeInProgress : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long IsWinPE : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long CustomKernelSignersAllowed : 1; /* bit position: 2 */
    /* 0x0004 */ unsigned long StateSeparationEnabled : 1; /* bit position: 3 */
    /* 0x0004 */ unsigned long Reserved : 28; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0008 */ union _LARGE_INTEGER WhqlEnforcementDate;
  /* 0x0010 */ unsigned long RevocationListOffset;
  /* 0x0014 */ unsigned long RevocationListSize;
  /* 0x0018 */ unsigned long CodeIntegrityPolicyOffset;
  /* 0x001c */ unsigned long CodeIntegrityPolicySize;
  /* 0x0020 */ unsigned long CodeIntegrityPolicyHashOffset;
  /* 0x0024 */ unsigned long CodeIntegrityPolicyHashSize;
  /* 0x0028 */ unsigned long CodeIntegrityPolicyOriginalHashOffset;
  /* 0x002c */ unsigned long CodeIntegrityPolicyOriginalHashSize;
  /* 0x0030 */ long WeakCryptoPolicyLoadStatus;
  /* 0x0034 */ unsigned long WeakCryptoPolicyOffset;
  /* 0x0038 */ unsigned long WeakCryptoPolicySize;
  /* 0x003c */ unsigned long SecureBootPolicyOffset;
  /* 0x0040 */ unsigned long SecureBootPolicySize;
  /* 0x0044 */ unsigned long CurrentBootId;
  /* 0x0048 */ union _LARGE_INTEGER RevocationListCreationTimeLCUType;
  /* 0x0050 */ union _LARGE_INTEGER RevocationListCreationTimeLCUAntidoteType;
  /* 0x0058 */ union _LARGE_INTEGER RevocationListCreationTimeUpdateType;
  /* 0x0060 */ union _LARGE_INTEGER RevocationListCreationTimeUpdateAntidoteType;
  /* 0x0068 */ unsigned long CurrentRevocationListType;
  /* 0x006c */ unsigned long Reserved2;
  /* 0x0070 */ unsigned char SerializedData[1];
  /* 0x0071 */ char __PADDING__[7];
} LOADER_PARAMETER_CI_EXTENSION, *PLOADER_PARAMETER_CI_EXTENSION; /* size: 0x0078 */

typedef struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Expanded : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Transitioning : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Pageable : 1; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} EX_PUSH_LOCK_AUTO_EXPAND_STATE, *PEX_PUSH_LOCK_AUTO_EXPAND_STATE; /* size: 0x0004 */

typedef union _MI_AVAILABLE_PAGES_MEDIUM_GRANULARITY
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short SmallFreeZeroPages : 5; /* bit position: 0 */
      /* 0x0000 */ unsigned short SmallAvailablePages : 5; /* bit position: 5 */
      /* 0x0000 */ unsigned short Spare : 6; /* bit position: 10 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short EntireValue;
    /* 0x0000 */ short EntireValueSigned;
    /* 0x0000 */ volatile short EntireValueVolatile;
  }; /* size: 0x0002 */
} MI_AVAILABLE_PAGES_MEDIUM_GRANULARITY, *PMI_AVAILABLE_PAGES_MEDIUM_GRANULARITY; /* size: 0x0002 */

typedef struct _tlgProviderMetadata_t
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ struct _GUID ProviderId;
  /* 0x0011 */ unsigned short RemainingSize;
} tlgProviderMetadata_t, *PtlgProviderMetadata_t; /* size: 0x0013 */

typedef struct _IO_TIMER
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short TimerFlag;
  /* 0x0004 */ long Padding_456;
  /* 0x0008 */ struct _LIST_ENTRY TimerList;
  /* 0x0018 */ void* TimerRoutine /* function */;
  /* 0x0020 */ void* Context;
  /* 0x0028 */ struct _DEVICE_OBJECT* DeviceObject;
} IO_TIMER, *PIO_TIMER; /* size: 0x0030 */

typedef struct _MCGEN_TRACE_CONTEXT
{
  /* 0x0000 */ unsigned __int64 RegistrationHandle;
  /* 0x0008 */ unsigned __int64 Logger;
  /* 0x0010 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0018 */ unsigned __int64 MatchAllKeyword;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long IsEnabled;
  /* 0x0028 */ unsigned char Level;
  /* 0x0029 */ unsigned char Reserve;
  /* 0x002a */ unsigned short EnableBitsCount;
  /* 0x002c */ long Padding_457;
  /* 0x0030 */ unsigned long* EnableBitMask;
  /* 0x0038 */ const unsigned __int64* EnableKeyWords;
  /* 0x0040 */ const unsigned char* EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT; /* size: 0x0048 */

typedef union _POP_FX_COMPONENT_FLAGS
{
  union
  {
    struct
    {
      /* 0x0000 */ long Value;
      /* 0x0004 */ long Value2;
    }; /* size: 0x0008 */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long RefCount : 30; /* bit position: 0 */
        /* 0x0000 */ unsigned long Idling : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long Active : 1; /* bit position: 31 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned long CriticalIdleOverride : 1; /* bit position: 0 */
        /* 0x0004 */ unsigned long ResidentOverride : 1; /* bit position: 1 */
        /* 0x0004 */ unsigned long Reserved : 30; /* bit position: 2 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} POP_FX_COMPONENT_FLAGS, *PPOP_FX_COMPONENT_FLAGS; /* size: 0x0008 */

typedef struct _LOGGED_STREAM_CALLBACK_V1
{
  /* 0x0000 */ void* LogHandle;
  /* 0x0008 */ void* FlushToLsnRoutine /* function */;
} LOGGED_STREAM_CALLBACK_V1, *PLOGGED_STREAM_CALLBACK_V1; /* size: 0x0010 */

typedef struct _LOGGED_STREAM_CALLBACK_V2
{
  /* 0x0000 */ struct _LOG_HANDLE_CONTEXT* LogHandleContext;
} LOGGED_STREAM_CALLBACK_V2, *PLOGGED_STREAM_CALLBACK_V2; /* size: 0x0008 */

typedef struct _PRIVATE_CACHE_MAP
{
  union
  {
    /* 0x0000 */ short NodeTypeCode;
    /* 0x0000 */ struct _PRIVATE_CACHE_MAP_FLAGS Flags;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long ReadAheadMask;
  /* 0x0008 */ struct _FILE_OBJECT* FileObject;
  /* 0x0010 */ union _LARGE_INTEGER FileOffset1;
  /* 0x0018 */ union _LARGE_INTEGER BeyondLastByte1;
  /* 0x0020 */ union _LARGE_INTEGER FileOffset2;
  /* 0x0028 */ union _LARGE_INTEGER BeyondLastByte2;
  /* 0x0030 */ unsigned long SequentialReadCount;
  /* 0x0034 */ unsigned long ReadAheadLength;
  /* 0x0038 */ union _LARGE_INTEGER ReadAheadOffset;
  /* 0x0040 */ union _LARGE_INTEGER ReadAheadBeyondLastByte;
  /* 0x0048 */ unsigned __int64 PrevReadAheadBeyondLastByte;
  /* 0x0050 */ unsigned __int64 ReadAheadSpinLock;
  /* 0x0058 */ unsigned long PipelinedReadAheadRequestSize;
  /* 0x005c */ unsigned long ReadAheadGrowth;
  /* 0x0060 */ struct _LIST_ENTRY PrivateLinks;
  /* 0x0070 */ void* ReadAheadWorkItem;
} PRIVATE_CACHE_MAP, *PPRIVATE_CACHE_MAP; /* size: 0x0078 */

typedef struct _SHARED_CACHE_MAP
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ unsigned long OpenCount;
  /* 0x0008 */ union _LARGE_INTEGER FileSize;
  /* 0x0010 */ struct _LIST_ENTRY BcbList;
  /* 0x0020 */ union _LARGE_INTEGER SectionSize;
  /* 0x0028 */ union _LARGE_INTEGER ValidDataLength;
  /* 0x0030 */ union _LARGE_INTEGER ValidDataGoal;
  /* 0x0038 */ struct _VACB* InitialVacbs[4];
  /* 0x0058 */ struct _VACB** Vacbs;
  /* 0x0060 */ struct _EX_FAST_REF FileObjectFastRef;
  /* 0x0068 */ struct _EX_PUSH_LOCK VacbLock;
  /* 0x0070 */ unsigned long DirtyPages;
  /* 0x0074 */ long Padding_458;
  /* 0x0078 */ struct _LIST_ENTRY LoggedStreamLinks;
  /* 0x0088 */ struct _LIST_ENTRY SharedCacheMapLinks;
  /* 0x0098 */ unsigned long Flags;
  /* 0x009c */ unsigned long Flags2;
  /* 0x00a0 */ long Status;
  /* 0x00a4 */ long Padding_459;
  /* 0x00a8 */ struct _MBCB* Mbcb;
  /* 0x00b0 */ void* Section;
  /* 0x00b8 */ struct _KEVENT* CreateEvent;
  /* 0x00c0 */ struct _KEVENT* WaitOnActiveCount;
  /* 0x00c8 */ unsigned long PagesToWrite;
  /* 0x00cc */ long Padding_460;
  /* 0x00d0 */ __int64 BeyondLastFlush;
  union
  {
    /* 0x00d8 */ struct _CACHE_MANAGER_CALLBACKS* Callbacks;
    /* 0x00d8 */ struct _CACHE_MANAGER_CALLBACKS_EX* CallbacksEx;
  }; /* size: 0x0008 */
  /* 0x00e0 */ void* LazyWriteContext;
  /* 0x00e8 */ struct _LIST_ENTRY PrivateList;
  union
  {
    /* 0x00f8 */ struct _LOGGED_STREAM_CALLBACK_V1 V1;
    /* 0x00f8 */ struct _LOGGED_STREAM_CALLBACK_V2 V2;
  }; /* size: 0x0010 */
  /* 0x0108 */ union _LARGE_INTEGER LargestLSN;
  /* 0x0110 */ unsigned long DirtyPageThreshold;
  /* 0x0114 */ unsigned long LazyWritePassCount;
  /* 0x0118 */ struct _CACHE_UNINITIALIZE_EVENT* UninitializeEvent;
  /* 0x0120 */ struct _FAST_MUTEX BcbLock;
  /* 0x0158 */ union _LARGE_INTEGER LastUnmapBehindOffset;
  /* 0x0160 */ struct _KEVENT Event;
  /* 0x0178 */ union _LARGE_INTEGER HighWaterMappingOffset;
  /* 0x0180 */ struct _PRIVATE_CACHE_MAP PrivateCacheMap;
  /* 0x01f8 */ void* WriteBehindWorkQueueEntry;
  /* 0x0200 */ struct _VOLUME_CACHE_MAP* VolumeCacheMap;
  /* 0x0208 */ unsigned long ProcImagePathHash;
  /* 0x020c */ unsigned long WritesInProgress;
  /* 0x0210 */ unsigned long AsyncReadRequestCount;
  /* 0x0214 */ long Padding_461;
  /* 0x0218 */ struct _CC_PARTITION* Partition;
  /* 0x0220 */ unsigned long InternalRefCount;
  /* 0x0224 */ unsigned long NumMappedVacb;
  /* 0x0228 */ unsigned long NumActiveVacb;
  /* 0x022c */ unsigned long IdealNodeForWriteBehind;
  /* 0x0230 */ unsigned long IdealNodeNumber;
  /* 0x0234 */ long Padding_462;
  /* 0x0238 */ struct _LIST_ENTRY VolSharedCacheMapLinks;
  /* 0x0248 */ struct _LIST_ENTRY VolLoggedStreamLinks;
  /* 0x0258 */ struct _PRIVATE_VOLUME_CACHEMAP* PrivateVolumeCacheMap;
  /* 0x0260 */ unsigned long SectionSizeIncrement;
  /* 0x0264 */ long __PADDING__[1];
} SHARED_CACHE_MAP, *PSHARED_CACHE_MAP; /* size: 0x0268 */

typedef struct _DEVOBJ_EXTENSION
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ long Padding_463;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ unsigned long PowerFlags;
  /* 0x0014 */ long Padding_464;
  /* 0x0018 */ struct _DEVICE_OBJECT_POWER_EXTENSION* Dope;
  /* 0x0020 */ unsigned long ExtensionFlags;
  /* 0x0024 */ long Padding_465;
  /* 0x0028 */ void* DeviceNode;
  /* 0x0030 */ struct _DEVICE_OBJECT* AttachedTo;
  /* 0x0038 */ long StartIoCount;
  /* 0x003c */ long StartIoKey;
  /* 0x0040 */ unsigned long StartIoFlags;
  /* 0x0044 */ long Padding_466;
  /* 0x0048 */ struct _VPB* Vpb;
  /* 0x0050 */ void* DependencyNode;
  /* 0x0058 */ void* InterruptContext;
  /* 0x0060 */ long InterruptCount;
  /* 0x0064 */ long Padding_467;
  /* 0x0068 */ void* VerifierContext;
} DEVOBJ_EXTENSION, *PDEVOBJ_EXTENSION; /* size: 0x0070 */

typedef struct _MI_STACKTRACE_BUFFER
{
  /* 0x0000 */ void* CallingFunction[20];
} MI_STACKTRACE_BUFFER, *PMI_STACKTRACE_BUFFER; /* size: 0x00a0 */

typedef struct _THERMAL_COOLING_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ long Padding_468;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ void* InterfaceReference /* function */;
  /* 0x0018 */ void* InterfaceDereference /* function */;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ long Padding_469;
  /* 0x0028 */ void* ActiveCooling /* function */;
  /* 0x0030 */ void* PassiveCooling /* function */;
} THERMAL_COOLING_INTERFACE, *PTHERMAL_COOLING_INTERFACE; /* size: 0x0038 */

typedef struct _POP_COOLING_EXTENSION
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _LIST_ENTRY RequestListHead;
  /* 0x0020 */ struct _POP_RW_LOCK Lock;
  /* 0x0030 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0038 */ void* NotificationEntry;
  /* 0x0040 */ unsigned char Enabled;
  /* 0x0041 */ unsigned char ActiveEngaged;
  /* 0x0042 */ unsigned char ThrottleLimit;
  /* 0x0043 */ unsigned char UpdatingToCurrent;
  /* 0x0044 */ long Padding_470;
  /* 0x0048 */ struct _KEVENT* RemovalFlushEvent;
  /* 0x0050 */ struct _KEVENT* PnpFlushEvent;
  /* 0x0058 */ struct _THERMAL_COOLING_INTERFACE Interface;
} POP_COOLING_EXTENSION, *PPOP_COOLING_EXTENSION; /* size: 0x0090 */

typedef struct _RSDP
{
  /* 0x0000 */ unsigned __int64 Signature;
  /* 0x0008 */ unsigned char Checksum;
  /* 0x0009 */ unsigned char OEMID[6];
  /* 0x000f */ unsigned char Revision;
  /* 0x0010 */ unsigned long RsdtAddress;
  /* 0x0014 */ unsigned long Length;
  /* 0x0018 */ union _LARGE_INTEGER XsdtAddress;
  /* 0x0020 */ unsigned char XChecksum;
  /* 0x0021 */ unsigned char Reserved[3];
} RSDP, *PRSDP; /* size: 0x0024 */

typedef struct _POWER_LIMIT_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ long Padding_471;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ void* InterfaceReference /* function */;
  /* 0x0018 */ void* InterfaceDereference /* function */;
  /* 0x0020 */ unsigned long DomainCount;
  /* 0x0024 */ long Padding_472;
  /* 0x0028 */ void* QueryAttributes /* function */;
  /* 0x0030 */ void* SetPowerLimit /* function */;
  /* 0x0038 */ void* QueryPowerLimit /* function */;
} POWER_LIMIT_INTERFACE, *PPOWER_LIMIT_INTERFACE; /* size: 0x0040 */

typedef struct _POP_POWER_LIMIT_EXTENSION
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _LIST_ENTRY RequestListHead;
  /* 0x0020 */ struct _POP_RW_LOCK Lock;
  /* 0x0030 */ unsigned char Enabled;
  /* 0x0031 */ char Padding_473[7];
  /* 0x0038 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0040 */ void* NotificationEntry;
  /* 0x0048 */ unsigned long LimitCount;
  /* 0x004c */ long Padding_474;
  /* 0x0050 */ struct _POWER_LIMIT_ATTRIBUTES* LimitAttributes;
  /* 0x0058 */ struct _POWER_LIMIT_VALUE* LimitValues;
  /* 0x0060 */ unsigned long UpdateMaskCount;
  /* 0x0064 */ long Padding_475;
  /* 0x0068 */ unsigned __int64* UpdateMask;
  /* 0x0070 */ struct _POWER_LIMIT_INTERFACE Interface;
  /* 0x00b0 */ unsigned long PendingSetCount;
  /* 0x00b4 */ unsigned long PendingQueryCount;
  /* 0x00b8 */ struct _KEVENT* RemovalFlushEvent;
  /* 0x00c0 */ struct _KEVENT* PnpFlushEvent;
} POP_POWER_LIMIT_EXTENSION, *PPOP_POWER_LIMIT_EXTENSION; /* size: 0x00c8 */

typedef struct _POWER_LIMIT_ATTRIBUTES
{
  /* 0x0000 */ enum _POWER_LIMIT_TYPES Type;
  /* 0x0004 */ unsigned long DomainId;
  /* 0x0008 */ unsigned long MaxValue;
  /* 0x000c */ unsigned long MinValue;
  /* 0x0010 */ unsigned long MinTimeParameter;
  /* 0x0014 */ unsigned long MaxTimeParameter;
  /* 0x0018 */ unsigned long DefaultACValue;
  /* 0x001c */ unsigned long DefaultDCValue;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0020 */ unsigned long SupportTimeParameter : 1; /* bit position: 0 */
        /* 0x0020 */ unsigned long Reserved : 31; /* bit position: 1 */
      }; /* bitfield */
      /* 0x0020 */ unsigned long AsUlong;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Flags;
} POWER_LIMIT_ATTRIBUTES, *PPOWER_LIMIT_ATTRIBUTES; /* size: 0x0024 */

typedef struct _EXCEPTION_RECORD64
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ unsigned __int64 ExceptionRecord;
  /* 0x0010 */ unsigned __int64 ExceptionAddress;
  /* 0x0018 */ unsigned long NumberParameters;
  /* 0x001c */ unsigned long __unusedAlignment;
  /* 0x0020 */ unsigned __int64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64; /* size: 0x0098 */

typedef struct _POWER_LIMIT_VALUE
{
  /* 0x0000 */ enum _POWER_LIMIT_TYPES Type;
  /* 0x0004 */ unsigned long DomainId;
  /* 0x0008 */ unsigned long TargetValue;
  /* 0x000c */ unsigned long TimeParameter;
} POWER_LIMIT_VALUE, *PPOWER_LIMIT_VALUE; /* size: 0x0010 */

typedef struct _PHYSICAL_MEMORY_DESCRIPTOR
{
  /* 0x0000 */ unsigned long NumberOfRuns;
  /* 0x0004 */ long Padding_476;
  /* 0x0008 */ unsigned __int64 NumberOfPages;
  /* 0x0010 */ struct _PHYSICAL_MEMORY_RUN Run[1];
} PHYSICAL_MEMORY_DESCRIPTOR, *PPHYSICAL_MEMORY_DESCRIPTOR; /* size: 0x0020 */

typedef struct _CACHE_UNINITIALIZE_EVENT
{
  /* 0x0000 */ struct _CACHE_UNINITIALIZE_EVENT* Next;
  /* 0x0008 */ struct _KEVENT Event;
} CACHE_UNINITIALIZE_EVENT, *PCACHE_UNINITIALIZE_EVENT; /* size: 0x0020 */

typedef struct _X86_KTRAP_FRAME
{
  /* 0x0000 */ unsigned long DbgEbp;
  /* 0x0004 */ unsigned long DbgEip;
  /* 0x0008 */ unsigned long DbgArgMark;
  /* 0x000c */ unsigned long DbgArgPointer;
  /* 0x0010 */ unsigned long TempSegCs;
  /* 0x0014 */ unsigned long TempEsp;
  /* 0x0018 */ unsigned long Dr0;
  /* 0x001c */ unsigned long Dr1;
  /* 0x0020 */ unsigned long Dr2;
  /* 0x0024 */ unsigned long Dr3;
  /* 0x0028 */ unsigned long Dr6;
  /* 0x002c */ unsigned long Dr7;
  /* 0x0030 */ unsigned long SegGs;
  /* 0x0034 */ unsigned long SegEs;
  /* 0x0038 */ unsigned long SegDs;
  /* 0x003c */ unsigned long Edx;
  /* 0x0040 */ unsigned long Ecx;
  /* 0x0044 */ unsigned long Eax;
  /* 0x0048 */ unsigned char PreviousPreviousMode;
  /* 0x0049 */ unsigned char EntropyQueueDpc;
  /* 0x004a */ unsigned char Reserved[2];
  /* 0x004c */ unsigned long ExceptionList;
  /* 0x0050 */ unsigned long SegFs;
  /* 0x0054 */ unsigned long Edi;
  /* 0x0058 */ unsigned long Esi;
  /* 0x005c */ unsigned long Ebx;
  /* 0x0060 */ unsigned long Ebp;
  /* 0x0064 */ unsigned long ErrCode;
  /* 0x0068 */ unsigned long Eip;
  /* 0x006c */ unsigned long SegCs;
  /* 0x0070 */ unsigned long EFlags;
  /* 0x0074 */ unsigned long HardwareEsp;
  /* 0x0078 */ unsigned long HardwareSegSs;
  /* 0x007c */ unsigned long V86Es;
  /* 0x0080 */ unsigned long V86Ds;
  /* 0x0084 */ unsigned long V86Fs;
  /* 0x0088 */ unsigned long V86Gs;
} X86_KTRAP_FRAME, *PX86_KTRAP_FRAME; /* size: 0x008c */

typedef struct _ETW_REG_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY RegList;
  /* 0x0010 */ struct _LIST_ENTRY GroupRegList;
  /* 0x0020 */ struct _ETW_GUID_ENTRY* GuidEntry;
  /* 0x0028 */ struct _ETW_GUID_ENTRY* GroupEntry;
  union
  {
    /* 0x0030 */ struct _ETW_REPLY_QUEUE* ReplyQueue;
    /* 0x0030 */ struct _ETW_QUEUE_ENTRY* ReplySlot[4];
    struct
    {
      /* 0x0030 */ void* Caller;
      /* 0x0038 */ unsigned long SessionId;
    }; /* size: 0x000c */
  }; /* size: 0x0020 */
  union
  {
    /* 0x0050 */ struct _EPROCESS* Process;
    /* 0x0050 */ void* CallbackContext;
  }; /* size: 0x0008 */
  /* 0x0058 */ void* Callback;
  /* 0x0060 */ unsigned short Index;
  union
  {
    /* 0x0062 */ unsigned short Flags;
    struct /* bitfield */
    {
      /* 0x0062 */ unsigned short DbgKernelRegistration : 1; /* bit position: 0 */
      /* 0x0062 */ unsigned short DbgUserRegistration : 1; /* bit position: 1 */
      /* 0x0062 */ unsigned short DbgReplyRegistration : 1; /* bit position: 2 */
      /* 0x0062 */ unsigned short DbgClassicRegistration : 1; /* bit position: 3 */
      /* 0x0062 */ unsigned short DbgSessionSpaceRegistration : 1; /* bit position: 4 */
      /* 0x0062 */ unsigned short DbgModernRegistration : 1; /* bit position: 5 */
      /* 0x0062 */ unsigned short DbgClosed : 1; /* bit position: 6 */
      /* 0x0062 */ unsigned short DbgInserted : 1; /* bit position: 7 */
      /* 0x0062 */ unsigned short DbgWow64 : 1; /* bit position: 8 */
      /* 0x0062 */ unsigned short DbgUseDescriptorType : 1; /* bit position: 9 */
      /* 0x0062 */ unsigned short DbgDropProviderTraits : 1; /* bit position: 10 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0064 */ unsigned char EnableMask;
  /* 0x0065 */ unsigned char GroupEnableMask;
  /* 0x0066 */ unsigned char HostEnableMask;
  /* 0x0067 */ unsigned char HostGroupEnableMask;
  /* 0x0068 */ struct _ETW_PROVIDER_TRAITS* Traits;
} ETW_REG_ENTRY, *PETW_REG_ENTRY; /* size: 0x0070 */

typedef struct _IO_STACK_LOCATION
{
  /* 0x0000 */ unsigned char MajorFunction;
  /* 0x0001 */ unsigned char MinorFunction;
  /* 0x0002 */ unsigned char Flags;
  /* 0x0003 */ unsigned char Control;
  /* 0x0004 */ long Padding_477;
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0010 */ unsigned long Options;
        /* 0x000c */ long Padding_478;
        /* 0x0018 */ unsigned short FileAttributes;
        /* 0x001a */ unsigned short ShareAccess;
        /* 0x0014 */ long Padding_479;
        /* 0x0020 */ unsigned long EaLength;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ Create;
      struct
      {
        /* 0x0008 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0010 */ unsigned long Options;
        /* 0x000c */ long Padding_480;
        /* 0x0018 */ unsigned short Reserved;
        /* 0x001a */ unsigned short ShareAccess;
        /* 0x0014 */ long Padding_481;
        /* 0x0020 */ struct _NAMED_PIPE_CREATE_PARAMETERS* Parameters;
      } /* size: 0x0020 */ CreatePipe;
      struct
      {
        /* 0x0008 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0010 */ unsigned long Options;
        /* 0x000c */ long Padding_482;
        /* 0x0018 */ unsigned short Reserved;
        /* 0x001a */ unsigned short ShareAccess;
        /* 0x0014 */ long Padding_483;
        /* 0x0020 */ struct _MAILSLOT_CREATE_PARAMETERS* Parameters;
      } /* size: 0x0020 */ CreateMailslot;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_484;
        /* 0x0010 */ unsigned long Key;
        /* 0x0014 */ unsigned long Flags;
        /* 0x0018 */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0018 */ Read;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_485;
        /* 0x0010 */ unsigned long Key;
        /* 0x0014 */ unsigned long Flags;
        /* 0x0018 */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0018 */ Write;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_486;
        /* 0x0010 */ struct _UNICODE_STRING* FileName;
        /* 0x0018 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x0014 */ long Padding_487;
        /* 0x0020 */ unsigned long FileIndex;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ QueryDirectory;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_488;
        /* 0x0010 */ unsigned long CompletionFilter;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ NotifyDirectory;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_489;
        /* 0x0010 */ unsigned long CompletionFilter;
        /* 0x000c */ long Padding_490;
        /* 0x0018 */ enum _DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass;
        /* 0x001c */ long __PADDING__[1];
      } /* size: 0x0018 */ NotifyDirectoryEx;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_491;
        /* 0x0010 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ QueryFile;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_492;
        /* 0x0010 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x000c */ long Padding_493;
        /* 0x0018 */ struct _FILE_OBJECT* FileObject;
        union
        {
          struct
          {
            /* 0x0020 */ unsigned char ReplaceIfExists;
            /* 0x0021 */ unsigned char AdvanceOnly;
          }; /* size: 0x0002 */
          /* 0x0020 */ unsigned long ClusterCount;
          /* 0x0020 */ void* DeleteHandle;
        }; /* size: 0x0008 */
      } /* size: 0x0020 */ SetFile;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_494;
        /* 0x0010 */ void* EaList;
        /* 0x0018 */ unsigned long EaListLength;
        /* 0x0014 */ long Padding_495;
        /* 0x0020 */ unsigned long EaIndex;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ QueryEa;
      struct
      {
        /* 0x0008 */ unsigned long Length;
      } /* size: 0x0004 */ SetEa;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_496;
        /* 0x0010 */ enum _FSINFOCLASS FsInformationClass;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ QueryVolume;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_497;
        /* 0x0010 */ enum _FSINFOCLASS FsInformationClass;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ SetVolume;
      struct
      {
        /* 0x0008 */ unsigned long OutputBufferLength;
        /* 0x0004 */ long Padding_498;
        /* 0x0010 */ unsigned long InputBufferLength;
        /* 0x000c */ long Padding_499;
        /* 0x0018 */ unsigned long FsControlCode;
        /* 0x0014 */ long Padding_500;
        /* 0x0020 */ void* Type3InputBuffer;
      } /* size: 0x0020 */ FileSystemControl;
      struct
      {
        /* 0x0008 */ union _LARGE_INTEGER* Length;
        /* 0x0010 */ unsigned long Key;
        /* 0x000c */ long Padding_501;
        /* 0x0018 */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0018 */ LockControl;
      struct
      {
        /* 0x0008 */ unsigned long OutputBufferLength;
        /* 0x0004 */ long Padding_502;
        /* 0x0010 */ unsigned long InputBufferLength;
        /* 0x000c */ long Padding_503;
        /* 0x0018 */ unsigned long IoControlCode;
        /* 0x0014 */ long Padding_504;
        /* 0x0020 */ void* Type3InputBuffer;
      } /* size: 0x0020 */ DeviceIoControl;
      struct
      {
        /* 0x0008 */ unsigned long SecurityInformation;
        /* 0x0004 */ long Padding_505;
        /* 0x0010 */ unsigned long Length;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ QuerySecurity;
      struct
      {
        /* 0x0008 */ unsigned long SecurityInformation;
        /* 0x0004 */ long Padding_506;
        /* 0x0010 */ void* SecurityDescriptor;
      } /* size: 0x0010 */ SetSecurity;
      struct
      {
        /* 0x0008 */ struct _VPB* Vpb;
        /* 0x0010 */ struct _DEVICE_OBJECT* DeviceObject;
        /* 0x0018 */ unsigned long OutputBufferLength;
        /* 0x001c */ long __PADDING__[1];
      } /* size: 0x0018 */ MountVolume;
      struct
      {
        /* 0x0008 */ struct _VPB* Vpb;
        /* 0x0010 */ struct _DEVICE_OBJECT* DeviceObject;
      } /* size: 0x0010 */ VerifyVolume;
      struct
      {
        /* 0x0008 */ struct _SCSI_REQUEST_BLOCK* Srb;
      } /* size: 0x0008 */ Scsi;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0004 */ long Padding_507;
        /* 0x0010 */ void* StartSid;
        /* 0x0018 */ struct _FILE_GET_QUOTA_INFORMATION* SidList;
        /* 0x0020 */ unsigned long SidListLength;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ QueryQuota;
      struct
      {
        /* 0x0008 */ unsigned long Length;
      } /* size: 0x0004 */ SetQuota;
      struct
      {
        /* 0x0008 */ enum _DEVICE_RELATION_TYPE Type;
      } /* size: 0x0004 */ QueryDeviceRelations;
      struct
      {
        /* 0x0008 */ const struct _GUID* InterfaceType;
        /* 0x0010 */ unsigned short Size;
        /* 0x0012 */ unsigned short Version;
        /* 0x000c */ long Padding_508;
        /* 0x0018 */ struct _INTERFACE* Interface;
        /* 0x0020 */ void* InterfaceSpecificData;
      } /* size: 0x0020 */ QueryInterface;
      struct
      {
        /* 0x0008 */ struct _DEVICE_CAPABILITIES* Capabilities;
      } /* size: 0x0008 */ DeviceCapabilities;
      struct
      {
        /* 0x0008 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* IoResourceRequirementList;
      } /* size: 0x0008 */ FilterResourceRequirements;
      struct
      {
        /* 0x0008 */ unsigned long WhichSpace;
        /* 0x0004 */ long Padding_509;
        /* 0x0010 */ void* Buffer;
        /* 0x0018 */ unsigned long Offset;
        /* 0x0014 */ long Padding_510;
        /* 0x0020 */ unsigned long Length;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ ReadWriteConfig;
      struct
      {
        /* 0x0008 */ unsigned char Lock;
      } /* size: 0x0001 */ SetLock;
      struct
      {
        /* 0x0008 */ enum BUS_QUERY_ID_TYPE IdType;
      } /* size: 0x0004 */ QueryId;
      struct
      {
        /* 0x0008 */ enum DEVICE_TEXT_TYPE DeviceTextType;
        /* 0x0004 */ long Padding_511;
        /* 0x0010 */ unsigned long LocaleId;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ QueryDeviceText;
      struct
      {
        /* 0x0008 */ unsigned char InPath;
        /* 0x0009 */ unsigned char Reserved[3];
        /* 0x0004 */ long Padding_512;
        /* 0x0010 */ enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ UsageNotification;
      struct
      {
        /* 0x0008 */ enum _SYSTEM_POWER_STATE PowerState;
      } /* size: 0x0004 */ WaitWake;
      struct
      {
        /* 0x0008 */ struct _POWER_SEQUENCE* PowerSequence;
      } /* size: 0x0008 */ PowerSequence;
      struct
      {
        union
        {
          /* 0x0008 */ unsigned long SystemContext;
          /* 0x0008 */ struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
        }; /* size: 0x0004 */
        /* 0x0004 */ long Padding_513;
        /* 0x0010 */ enum _POWER_STATE_TYPE Type;
        /* 0x000c */ long Padding_514;
        /* 0x0018 */ union _POWER_STATE State;
        /* 0x0014 */ long Padding_515;
        /* 0x0020 */ enum POWER_ACTION ShutdownType;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ Power;
      struct
      {
        /* 0x0008 */ struct _CM_RESOURCE_LIST* AllocatedResources;
        /* 0x0010 */ struct _CM_RESOURCE_LIST* AllocatedResourcesTranslated;
      } /* size: 0x0010 */ StartDevice;
      struct
      {
        /* 0x0008 */ unsigned __int64 ProviderId;
        /* 0x0010 */ void* DataPath;
        /* 0x0018 */ unsigned long BufferSize;
        /* 0x0014 */ long Padding_516;
        /* 0x0020 */ void* Buffer;
      } /* size: 0x0020 */ WMI;
      struct
      {
        /* 0x0008 */ void* Argument1;
        /* 0x0010 */ void* Argument2;
        /* 0x0018 */ void* Argument3;
        /* 0x0020 */ void* Argument4;
      } /* size: 0x0020 */ Others;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ Parameters;
  /* 0x0028 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0030 */ struct _FILE_OBJECT* FileObject;
  /* 0x0038 */ void* CompletionRoutine /* function */;
  /* 0x0040 */ void* Context;
} IO_STACK_LOCATION, *PIO_STACK_LOCATION; /* size: 0x0048 */

typedef struct _MI_CONTROL_AREA_WAIT_BLOCK
{
  /* 0x0000 */ struct _MI_CONTROL_AREA_WAIT_BLOCK* Next;
  /* 0x0008 */ unsigned long WaitReason;
  /* 0x000c */ unsigned long WaitResponse;
  /* 0x0010 */ struct _KGATE Gate;
} MI_CONTROL_AREA_WAIT_BLOCK, *PMI_CONTROL_AREA_WAIT_BLOCK; /* size: 0x0028 */

typedef struct _SECURITY_SUBJECT_CONTEXT
{
  /* 0x0000 */ void* ClientToken;
  /* 0x0008 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x000c */ long Padding_517;
  /* 0x0010 */ void* PrimaryToken;
  /* 0x0018 */ void* ProcessAuditId;
} SECURITY_SUBJECT_CONTEXT, *PSECURITY_SUBJECT_CONTEXT; /* size: 0x0020 */

typedef struct _PRIVILEGE_SET
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ unsigned long Control;
  /* 0x0008 */ struct _LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET, *PPRIVILEGE_SET; /* size: 0x0014 */

typedef struct _ACCESS_STATE
{
  /* 0x0000 */ struct _LUID OperationID;
  /* 0x0008 */ unsigned char SecurityEvaluated;
  /* 0x0009 */ unsigned char GenerateAudit;
  /* 0x000a */ unsigned char GenerateOnClose;
  /* 0x000b */ unsigned char PrivilegesAllocated;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long RemainingDesiredAccess;
  /* 0x0014 */ unsigned long PreviouslyGrantedAccess;
  /* 0x0018 */ unsigned long OriginalDesiredAccess;
  /* 0x001c */ long Padding_518;
  /* 0x0020 */ struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
  /* 0x0040 */ void* SecurityDescriptor;
  /* 0x0048 */ void* AuxData;
  union
  {
    union
    {
      /* 0x0050 */ struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
      /* 0x0050 */ struct _PRIVILEGE_SET PrivilegeSet;
    }; /* size: 0x002c */
  } /* size: 0x002c */ Privileges;
  /* 0x007c */ unsigned char AuditPrivileges;
  /* 0x007d */ char Padding_519[3];
  /* 0x0080 */ struct _UNICODE_STRING ObjectName;
  /* 0x0090 */ struct _UNICODE_STRING ObjectTypeName;
} ACCESS_STATE, *PACCESS_STATE; /* size: 0x00a0 */

typedef struct _NAMED_PIPE_CREATE_PARAMETERS
{
  /* 0x0000 */ unsigned long NamedPipeType;
  /* 0x0004 */ unsigned long ReadMode;
  /* 0x0008 */ unsigned long CompletionMode;
  /* 0x000c */ unsigned long MaximumInstances;
  /* 0x0010 */ unsigned long InboundQuota;
  /* 0x0014 */ unsigned long OutboundQuota;
  /* 0x0018 */ union _LARGE_INTEGER DefaultTimeout;
  /* 0x0020 */ unsigned char TimeoutSpecified;
  /* 0x0021 */ char __PADDING__[7];
} NAMED_PIPE_CREATE_PARAMETERS, *PNAMED_PIPE_CREATE_PARAMETERS; /* size: 0x0028 */

typedef struct _MAILSLOT_CREATE_PARAMETERS
{
  /* 0x0000 */ unsigned long MailslotQuota;
  /* 0x0004 */ unsigned long MaximumMessageSize;
  /* 0x0008 */ union _LARGE_INTEGER ReadTimeout;
  /* 0x0010 */ unsigned char TimeoutSpecified;
  /* 0x0011 */ char __PADDING__[7];
} MAILSLOT_CREATE_PARAMETERS, *PMAILSLOT_CREATE_PARAMETERS; /* size: 0x0018 */

typedef struct _SEGMENT_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short TotalNumberOfPtes4132 : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned short LargePages : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned short DebugSymbolsLoaded : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned short WriteCombined : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned short NoCache : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned short ForceCollision : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned short Binary32 : 1; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short Short0;
  }; /* size: 0x0002 */
  union
  {
    struct /* bitfield */
    {
      /* 0x0002 */ unsigned char DefaultProtectionMask : 5; /* bit position: 0 */
      /* 0x0002 */ unsigned char ContainsDebug : 1; /* bit position: 5 */
      /* 0x0002 */ unsigned char Spare : 2; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0002 */ unsigned char UChar1;
  }; /* size: 0x0001 */
  /* 0x0003 */ struct _MI_SEGMENT_SIGNATURE_FLAGS Signature;
} SEGMENT_FLAGS, *PSEGMENT_FLAGS; /* size: 0x0004 */

typedef union _MM_STORE_KEY
{
  /* 0x0000 */ unsigned long EntireKey;
} MM_STORE_KEY, *PMM_STORE_KEY; /* size: 0x0004 */

typedef struct _MM_STORE_KEY_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 ContainerKey;
  /* 0x0008 */ union _MM_STORE_SUB_KEY_DESCRIPTOR SubKey;
} MM_STORE_KEY_DESCRIPTOR, *PMM_STORE_KEY_DESCRIPTOR; /* size: 0x0010 */

typedef struct _MM_STORE_WRITE_PAGE_INFORMATION
{
  /* 0x0000 */ long IssueStatus;
  /* 0x0004 */ union _MM_STORE_KEY StoreKey;
  /* 0x0008 */ struct _MM_STORE_KEY_DESCRIPTOR StoreKeyDescriptor;
  /* 0x0018 */ unsigned long WritePageIndex;
  /* 0x001c */ long Padding_520;
  /* 0x0020 */ void* OpaqueStoreContext;
  /* 0x0028 */ struct _MDL* Mdl;
  /* 0x0030 */ void* TransferContext;
  /* 0x0038 */ struct _IO_STATUS_BLOCK* IoStatus;
} MM_STORE_WRITE_PAGE_INFORMATION, *PMM_STORE_WRITE_PAGE_INFORMATION; /* size: 0x0040 */

struct DEBUG_DEVICE_ADDRESS
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Valid;
  union
  {
    /* 0x0002 */ unsigned char Reserved[2];
    struct
    {
      /* 0x0002 */ unsigned char BitWidth;
      /* 0x0003 */ unsigned char AccessSize;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x0004 */ long Padding_521;
  /* 0x0008 */ unsigned char* TranslatedAddress;
  /* 0x0010 */ unsigned long Length;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

struct _SCSI_REQUEST_BLOCK;

typedef struct _PEP_ACPI_SPB_SPI_RESOURCE
{
  /* 0x0000 */ struct _PEP_ACPI_SPB_RESOURCE SpbCommon;
  /* 0x0028 */ unsigned long ConnectionSpeed;
  /* 0x002c */ unsigned char DataBitLength;
  /* 0x002d */ unsigned char Phase;
  /* 0x002e */ unsigned char Polarity;
  /* 0x002f */ char Padding_522;
  /* 0x0030 */ unsigned short DeviceSelection;
  /* 0x0032 */ char __PADDING__[6];
} PEP_ACPI_SPB_SPI_RESOURCE, *PPEP_ACPI_SPB_SPI_RESOURCE; /* size: 0x0038 */

typedef struct _RTL_RANGE
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
  /* 0x0010 */ void* UserData;
  /* 0x0018 */ void* Owner;
  /* 0x0020 */ unsigned char Attributes;
  /* 0x0021 */ unsigned char Flags;
  /* 0x0022 */ char __PADDING__[6];
} RTL_RANGE, *PRTL_RANGE; /* size: 0x0028 */

typedef struct _DBGKD_WRITE_MEMORY32
{
  /* 0x0000 */ unsigned long TargetBaseAddress;
  /* 0x0004 */ unsigned long TransferCount;
  /* 0x0008 */ unsigned long ActualBytesWritten;
} DBGKD_WRITE_MEMORY32, *PDBGKD_WRITE_MEMORY32; /* size: 0x000c */

typedef struct _DBGKD_READ_WRITE_IO32
{
  /* 0x0000 */ unsigned long DataSize;
  /* 0x0004 */ unsigned long IoAddress;
  /* 0x0008 */ unsigned long DataValue;
} DBGKD_READ_WRITE_IO32, *PDBGKD_READ_WRITE_IO32; /* size: 0x000c */

typedef struct _DBGKD_SET_SPECIAL_CALL32
{
  /* 0x0000 */ unsigned long SpecialCall;
} DBGKD_SET_SPECIAL_CALL32, *PDBGKD_SET_SPECIAL_CALL32; /* size: 0x0004 */

typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT32
{
  /* 0x0000 */ unsigned long BreakpointAddress;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long Calls;
  /* 0x000c */ unsigned long MaxCallsPerPeriod;
  /* 0x0010 */ unsigned long MinInstructions;
  /* 0x0014 */ unsigned long MaxInstructions;
  /* 0x0018 */ unsigned long TotalInstructions;
} DBGKD_GET_INTERNAL_BREAKPOINT32, *PDBGKD_GET_INTERNAL_BREAKPOINT32; /* size: 0x001c */

typedef struct _DBGKD_MANIPULATE_STATE32
{
  /* 0x0000 */ unsigned long ApiNumber;
  /* 0x0004 */ unsigned short ProcessorLevel;
  /* 0x0006 */ unsigned short Processor;
  /* 0x0008 */ long ReturnStatus;
  union
  {
    union
    {
      /* 0x000c */ struct _DBGKD_READ_MEMORY32 ReadMemory;
      /* 0x000c */ struct _DBGKD_WRITE_MEMORY32 WriteMemory;
      /* 0x000c */ struct _DBGKD_READ_MEMORY64 ReadMemory64;
      /* 0x000c */ struct _DBGKD_WRITE_MEMORY64 WriteMemory64;
      /* 0x000c */ struct _DBGKD_GET_CONTEXT GetContext;
      /* 0x000c */ struct _DBGKD_SET_CONTEXT SetContext;
      /* 0x000c */ struct _DBGKD_WRITE_BREAKPOINT32 WriteBreakPoint;
      /* 0x000c */ struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
      /* 0x000c */ struct _DBGKD_CONTINUE Continue;
      /* 0x000c */ struct _DBGKD_CONTINUE2 Continue2;
      /* 0x000c */ struct _DBGKD_READ_WRITE_IO32 ReadWriteIo;
      /* 0x000c */ struct _DBGKD_READ_WRITE_IO_EXTENDED32 ReadWriteIoExtended;
      /* 0x000c */ struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
      /* 0x000c */ struct _DBGKD_SET_SPECIAL_CALL32 SetSpecialCall;
      /* 0x000c */ struct _DBGKD_SET_INTERNAL_BREAKPOINT32 SetInternalBreakpoint;
      /* 0x000c */ struct _DBGKD_GET_INTERNAL_BREAKPOINT32 GetInternalBreakpoint;
      /* 0x000c */ struct _DBGKD_GET_VERSION32 GetVersion32;
      /* 0x000c */ struct _DBGKD_BREAKPOINTEX BreakPointEx;
      /* 0x000c */ struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;
      /* 0x000c */ struct _DBGKD_SEARCH_MEMORY SearchMemory;
      /* 0x000c */ struct _DBGKD_CONTEXT_EX GetContextEx;
      /* 0x000c */ struct _DBGKD_CONTEXT_EX SetContextEx;
    }; /* size: 0x0028 */
  } /* size: 0x0028 */ u;
} DBGKD_MANIPULATE_STATE32, *PDBGKD_MANIPULATE_STATE32; /* size: 0x0034 */

typedef struct _BUS_EXTENSION_LIST
{
  /* 0x0000 */ void* Next;
  /* 0x0008 */ struct _PI_BUS_EXTENSION* BusExtension;
} BUS_EXTENSION_LIST, *PBUS_EXTENSION_LIST; /* size: 0x0010 */

typedef struct _INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ long Padding_523;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ void* InterfaceReference /* function */;
  /* 0x0018 */ void* InterfaceDereference /* function */;
} INTERFACE, *PINTERFACE; /* size: 0x0020 */

typedef struct _DEVICE_CAPABILITIES
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long DeviceD1 : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long DeviceD2 : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long LockSupported : 1; /* bit position: 2 */
    /* 0x0004 */ unsigned long EjectSupported : 1; /* bit position: 3 */
    /* 0x0004 */ unsigned long Removable : 1; /* bit position: 4 */
    /* 0x0004 */ unsigned long DockDevice : 1; /* bit position: 5 */
    /* 0x0004 */ unsigned long UniqueID : 1; /* bit position: 6 */
    /* 0x0004 */ unsigned long SilentInstall : 1; /* bit position: 7 */
    /* 0x0004 */ unsigned long RawDeviceOK : 1; /* bit position: 8 */
    /* 0x0004 */ unsigned long SurpriseRemovalOK : 1; /* bit position: 9 */
    /* 0x0004 */ unsigned long WakeFromD0 : 1; /* bit position: 10 */
    /* 0x0004 */ unsigned long WakeFromD1 : 1; /* bit position: 11 */
    /* 0x0004 */ unsigned long WakeFromD2 : 1; /* bit position: 12 */
    /* 0x0004 */ unsigned long WakeFromD3 : 1; /* bit position: 13 */
    /* 0x0004 */ unsigned long HardwareDisabled : 1; /* bit position: 14 */
    /* 0x0004 */ unsigned long NonDynamic : 1; /* bit position: 15 */
    /* 0x0004 */ unsigned long WarmEjectSupported : 1; /* bit position: 16 */
    /* 0x0004 */ unsigned long NoDisplayInUI : 1; /* bit position: 17 */
    /* 0x0004 */ unsigned long Reserved1 : 1; /* bit position: 18 */
    /* 0x0004 */ unsigned long WakeFromInterrupt : 1; /* bit position: 19 */
    /* 0x0004 */ unsigned long SecureDevice : 1; /* bit position: 20 */
    /* 0x0004 */ unsigned long ChildOfVgaEnabledBridge : 1; /* bit position: 21 */
    /* 0x0004 */ unsigned long DecodeIoOnBoot : 1; /* bit position: 22 */
    /* 0x0004 */ unsigned long Reserved : 9; /* bit position: 23 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long Address;
  /* 0x000c */ unsigned long UINumber;
  /* 0x0010 */ enum _DEVICE_POWER_STATE DeviceState[7];
  /* 0x002c */ enum _SYSTEM_POWER_STATE SystemWake;
  /* 0x0030 */ enum _DEVICE_POWER_STATE DeviceWake;
  /* 0x0034 */ unsigned long D1Latency;
  /* 0x0038 */ unsigned long D2Latency;
  /* 0x003c */ unsigned long D3Latency;
} DEVICE_CAPABILITIES, *PDEVICE_CAPABILITIES; /* size: 0x0040 */

typedef struct _POP_ACTION_TRIGGER
{
  /* 0x0000 */ enum POWER_POLICY_DEVICE_TYPE Type;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _POP_TRIGGER_WAIT* Wait;
  /* 0x0010 */ struct _DIAGNOSTIC_CONTEXT* DiagnosticContext;
  union
  {
    struct
    {
      /* 0x0018 */ unsigned long PercentLevel;
    } /* size: 0x0004 */ Battery;
    struct
    {
      /* 0x0018 */ unsigned long Type;
    } /* size: 0x0004 */ Button;
  }; /* size: 0x0004 */
  /* 0x001c */ long __PADDING__[1];
} POP_ACTION_TRIGGER, *PPOP_ACTION_TRIGGER; /* size: 0x0020 */

typedef struct _ALPC_DISPATCH_CONTEXT
{
  /* 0x0000 */ struct _ALPC_PORT* PortObject;
  /* 0x0008 */ struct _KALPC_MESSAGE* Message;
  /* 0x0010 */ struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;
  /* 0x0018 */ struct _ETHREAD* TargetThread;
  /* 0x0020 */ struct _ALPC_PORT* TargetPort;
  /* 0x0028 */ union _KALPC_DIRECT_EVENT DirectEvent;
  /* 0x0030 */ unsigned long Flags;
  /* 0x0034 */ unsigned short TotalLength;
  /* 0x0036 */ unsigned short Type;
  /* 0x0038 */ unsigned short DataInfoOffset;
  /* 0x003a */ unsigned char SignalCompletion;
  /* 0x003b */ unsigned char PostedToCompletionList;
  /* 0x003c */ long __PADDING__[1];
} ALPC_DISPATCH_CONTEXT, *PALPC_DISPATCH_CONTEXT; /* size: 0x0040 */

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST
{
  /* 0x0000 */ unsigned long ListSize;
  /* 0x0004 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long SlotNumber;
  /* 0x0010 */ unsigned long Reserved[3];
  /* 0x001c */ unsigned long AlternativeLists;
  /* 0x0020 */ struct _IO_RESOURCE_LIST List[1];
} IO_RESOURCE_REQUIREMENTS_LIST, *PIO_RESOURCE_REQUIREMENTS_LIST; /* size: 0x0048 */

typedef union _MI_AVAILABLE_PAGES_HUGE_GRANULARITY
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long SmallAvailablePages : 19; /* bit position: 0 */
      /* 0x0000 */ unsigned long LargeFreeZeroPages : 10; /* bit position: 19 */
      /* 0x0000 */ unsigned long Spare : 2; /* bit position: 29 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long EntireValue;
    /* 0x0000 */ long EntireValueSigned;
    /* 0x0000 */ volatile long EntireValueVolatile;
  }; /* size: 0x0004 */
} MI_AVAILABLE_PAGES_HUGE_GRANULARITY, *PMI_AVAILABLE_PAGES_HUGE_GRANULARITY; /* size: 0x0004 */

typedef struct _POP_FX_RELATION
{
  /* 0x0000 */ enum _POP_FX_RELATION_TYPE RelationType;
  /* 0x0004 */ long Padding_524;
  /* 0x0008 */ unsigned __int64 RelationLock;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0010 */ unsigned long Activating : 1; /* bit position: 0 */
        /* 0x0010 */ unsigned long Activated : 1; /* bit position: 1 */
        /* 0x0010 */ unsigned long ParentLinkValid : 1; /* bit position: 2 */
        /* 0x0010 */ unsigned long ChildLinkValid : 1; /* bit position: 3 */
        /* 0x0010 */ unsigned long ShallowestNonBlockingState : 2; /* bit position: 4 */
        /* 0x0010 */ unsigned long Reserved : 26; /* bit position: 6 */
      }; /* bitfield */
      /* 0x0010 */ unsigned long AsUlong;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Flags;
  /* 0x0014 */ long Padding_525;
  /* 0x0018 */ struct _POP_FX_COMPONENT* ParentComponent;
  /* 0x0020 */ struct _LIST_ENTRY ParentLink;
  /* 0x0030 */ unsigned __int64* ChildRelationLock;
  /* 0x0038 */ struct _LIST_ENTRY ChildLink;
} POP_FX_RELATION, *PPOP_FX_RELATION; /* size: 0x0048 */

typedef struct _HAL_CLOCK_TIMER_CONFIGURATION
{
  union
  {
    /* 0x0000 */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char AlwaysOnTimer : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char HighLatency : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char PerCpuTimer : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned char DynamicTickSupported : 1; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0001 */ char Padding_526[3];
  /* 0x0004 */ unsigned long KnownType;
  /* 0x0008 */ unsigned long Capabilities;
  /* 0x000c */ long Padding_527;
  /* 0x0010 */ unsigned __int64 MaxIncrement;
  /* 0x0018 */ unsigned long MinIncrement;
  /* 0x001c */ long __PADDING__[1];
} HAL_CLOCK_TIMER_CONFIGURATION, *PHAL_CLOCK_TIMER_CONFIGURATION; /* size: 0x0020 */

typedef struct _MI_SUB64K_FREE_RANGES
{
  /* 0x0000 */ struct _RTL_BITMAP_EX BitMap;
  /* 0x0010 */ struct _LIST_ENTRY ListEntry;
  /* 0x0020 */ struct _MMVAD_SHORT* Vad;
  /* 0x0028 */ unsigned long SetBits;
  /* 0x002c */ unsigned long FullSetBits;
  struct /* bitfield */
  {
    /* 0x0030 */ unsigned long SubListIndex : 2; /* bit position: 0 */
    /* 0x0030 */ unsigned long Hint : 30; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0034 */ long __PADDING__[1];
} MI_SUB64K_FREE_RANGES, *PMI_SUB64K_FREE_RANGES; /* size: 0x0038 */

typedef struct _MI_PHYSICAL_VIEW
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE PhysicalNode;
  /* 0x0018 */ struct _MMVAD_SHORT* Vad;
  /* 0x0020 */ struct _AWEINFO* AweInfo;
  union
  {
    union
    {
      /* 0x0028 */ unsigned long ViewPageSize : 2; /* bit position: 0 */
      /* 0x0028 */ struct _CONTROL_AREA* ControlArea;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
  /* 0x0030 */ struct _RTL_BITMAP_EX BitMap;
  /* 0x0040 */ unsigned char AgeStamp;
  /* 0x0041 */ char __PADDING__[7];
} MI_PHYSICAL_VIEW, *PMI_PHYSICAL_VIEW; /* size: 0x0048 */

typedef struct _GENERIC_MAPPING
{
  /* 0x0000 */ unsigned long GenericRead;
  /* 0x0004 */ unsigned long GenericWrite;
  /* 0x0008 */ unsigned long GenericExecute;
  /* 0x000c */ unsigned long GenericAll;
} GENERIC_MAPPING, *PGENERIC_MAPPING; /* size: 0x0010 */

typedef struct _OBJECT_TYPE_INITIALIZER
{
  /* 0x0000 */ unsigned short Length;
  union
  {
    /* 0x0002 */ unsigned short ObjectTypeFlags;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned char CaseInsensitive : 1; /* bit position: 0 */
        /* 0x0002 */ unsigned char UnnamedObjectsOnly : 1; /* bit position: 1 */
        /* 0x0002 */ unsigned char UseDefaultObject : 1; /* bit position: 2 */
        /* 0x0002 */ unsigned char SecurityRequired : 1; /* bit position: 3 */
        /* 0x0002 */ unsigned char MaintainHandleCount : 1; /* bit position: 4 */
        /* 0x0002 */ unsigned char MaintainTypeList : 1; /* bit position: 5 */
        /* 0x0002 */ unsigned char SupportsObjectCallbacks : 1; /* bit position: 6 */
        /* 0x0002 */ unsigned char CacheAligned : 1; /* bit position: 7 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0003 */ unsigned char UseExtendedParameters : 1; /* bit position: 0 */
        /* 0x0003 */ unsigned char SeTrustConstraintMaskPresent : 1; /* bit position: 1 */
        /* 0x0003 */ unsigned char Reserved : 6; /* bit position: 2 */
      }; /* bitfield */
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x0004 */ unsigned long ObjectTypeCode;
  /* 0x0008 */ unsigned long InvalidAttributes;
  /* 0x000c */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x001c */ unsigned long ValidAccessMask;
  /* 0x0020 */ unsigned long RetainAccess;
  /* 0x0024 */ enum _POOL_TYPE PoolType;
  /* 0x0028 */ unsigned long DefaultPagedPoolCharge;
  /* 0x002c */ unsigned long DefaultNonPagedPoolCharge;
  /* 0x0030 */ void* DumpProcedure /* function */;
  /* 0x0038 */ void* OpenProcedure /* function */;
  /* 0x0040 */ void* CloseProcedure /* function */;
  /* 0x0048 */ void* DeleteProcedure /* function */;
  union
  {
    /* 0x0050 */ void* ParseProcedure /* function */;
    /* 0x0050 */ void* ParseProcedureEx /* function */;
  }; /* size: 0x0008 */
  /* 0x0058 */ void* SecurityProcedure /* function */;
  /* 0x0060 */ void* QueryNameProcedure /* function */;
  /* 0x0068 */ void* OkayToCloseProcedure /* function */;
  /* 0x0070 */ unsigned long WaitObjectFlagMask;
  /* 0x0074 */ unsigned short WaitObjectFlagOffset;
  /* 0x0076 */ unsigned short WaitObjectPointerOffset;
} OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER; /* size: 0x0078 */

typedef struct _HV_GET_BIN_CONTEXT
{
  /* 0x0000 */ unsigned short OutstandingReference : 1; /* bit position: 0 */
} HV_GET_BIN_CONTEXT, *PHV_GET_BIN_CONTEXT; /* size: 0x0002 */

typedef struct _HV_GET_CELL_CONTEXT
{
  /* 0x0000 */ unsigned long Cell;
  /* 0x0004 */ struct _HV_GET_BIN_CONTEXT BinContext;
  /* 0x0006 */ char __PADDING__[2];
} HV_GET_CELL_CONTEXT, *PHV_GET_CELL_CONTEXT; /* size: 0x0008 */

typedef struct _CM_RESOURCE_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
} CM_RESOURCE_LIST, *PCM_RESOURCE_LIST; /* size: 0x0028 */

typedef struct _EXT_IOMMU_DOMAIN
{
  /* 0x0000 */ enum _EXT_IOMMU_DOMAIN_TYPE DomainType;
  /* 0x0004 */ enum _EXT_IOMMU_TRANSLATION_TYPE TranslationType;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0008 */ unsigned char DefaultDomain : 1; /* bit position: 0 */
      /* 0x0008 */ unsigned char FirmwareDomain : 1; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0001 */ Flags;
  /* 0x0009 */ char Padding_528;
  /* 0x000a */ unsigned short FirmwareDomainId;
  /* 0x000c */ long Padding_529;
  /* 0x0010 */ struct _EXT_IOMMU_DOMAIN_SETTINGS Settings;
  /* 0x0030 */ unsigned int ContextId;
  /* 0x0034 */ unsigned int DeviceCount;
  /* 0x0038 */ struct _LIST_ENTRY Devices;
  /* 0x0048 */ struct _EXT_ENV_SPINLOCK Lock;
  /* 0x0068 */ struct _EXT_IOMMU_DOMAIN* S2Domain;
} EXT_IOMMU_DOMAIN, *PEXT_IOMMU_DOMAIN; /* size: 0x0070 */

typedef struct _HAL_HV_DMA_HYBRID_PASSTHROUGH_RESERVED_REGIONS
{
  /* 0x0000 */ unsigned __int64 UnitSizePages;
  /* 0x0008 */ struct _RTL_BITMAP ReservedUnitMap;
  /* 0x0018 */ unsigned long ReservedUnitMapBuffer[16];
} HAL_HV_DMA_HYBRID_PASSTHROUGH_RESERVED_REGIONS, *PHAL_HV_DMA_HYBRID_PASSTHROUGH_RESERVED_REGIONS; /* size: 0x0058 */

typedef struct _HVP_VIEW_MAP
{
  /* 0x0000 */ void* SectionReference;
  /* 0x0008 */ __int64 StorageEndFileOffset;
  /* 0x0010 */ __int64 SectionEndFileOffset;
  /* 0x0018 */ struct _CMSI_PROCESS_TUPLE* ProcessTuple;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ long Padding_530;
  /* 0x0028 */ struct _RTL_RB_TREE ViewTree;
} HVP_VIEW_MAP, *PHVP_VIEW_MAP; /* size: 0x0038 */

typedef struct _INTERRUPT_LINES
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned long ControllerId;
  /* 0x0014 */ long MinLine;
  /* 0x0018 */ long MaxLine;
  /* 0x001c */ unsigned long GsiBase;
  /* 0x0020 */ enum _INTERRUPT_LINE_TYPE Type;
  /* 0x0024 */ enum _INTERRUPT_LINE_SUBTYPE SubType;
  /* 0x0028 */ struct _INTERRUPT_LINE_STATE* State;
  /* 0x0030 */ struct _INTERRUPT_LINE_INTERNAL_STATE* InternalState;
  /* 0x0038 */ unsigned __int64 MsiAddress;
  /* 0x0040 */ unsigned long MsiData;
  /* 0x0044 */ long Padding_531;
  /* 0x0048 */ struct _RTL_BITMAP MsiInUse;
} INTERRUPT_LINES, *PINTERRUPT_LINES; /* size: 0x0058 */

typedef struct _SECONDARY_IC_LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned long GsivBase;
  /* 0x0014 */ unsigned long GsivSize;
  /* 0x0018 */ struct _SECONDARY_INTERRUPT_PROVIDER_INTERFACE Interface;
  /* 0x0070 */ volatile long BusyCount;
  /* 0x0074 */ volatile long ExclusiveWaiterCount;
  /* 0x0078 */ struct _KEVENT NotificationEvent;
  /* 0x0090 */ struct _LIST_ENTRY SignalListEntry;
  /* 0x00a0 */ struct _SECONDARY_INTERRUPT_LINE_STATE State[1];
} SECONDARY_IC_LIST_ENTRY, *PSECONDARY_IC_LIST_ENTRY; /* size: 0x00b0 */

typedef struct _HBASE_BLOCK
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Sequence1;
  /* 0x0008 */ unsigned long Sequence2;
  /* 0x000c */ union _LARGE_INTEGER TimeStamp;
  /* 0x0014 */ unsigned long Major;
  /* 0x0018 */ unsigned long Minor;
  /* 0x001c */ unsigned long Type;
  /* 0x0020 */ unsigned long Format;
  /* 0x0024 */ unsigned long RootCell;
  /* 0x0028 */ unsigned long Length;
  /* 0x002c */ unsigned long Cluster;
  /* 0x0030 */ unsigned char FileName[64];
  /* 0x0070 */ struct _GUID RmId;
  /* 0x0080 */ struct _GUID LogId;
  /* 0x0090 */ unsigned long Flags;
  /* 0x0094 */ struct _GUID TmId;
  /* 0x00a4 */ unsigned long GuidSignature;
  /* 0x00a8 */ unsigned __int64 LastReorganizeTime;
  /* 0x00b0 */ unsigned long Reserved1[83];
  /* 0x01fc */ unsigned long CheckSum;
  /* 0x0200 */ unsigned long Reserved2[882];
  /* 0x0fc8 */ struct _GUID ThawTmId;
  /* 0x0fd8 */ struct _GUID ThawRmId;
  /* 0x0fe8 */ struct _GUID ThawLogId;
  /* 0x0ff8 */ unsigned long BootType;
  /* 0x0ffc */ unsigned long BootRecover;
} HBASE_BLOCK, *PHBASE_BLOCK; /* size: 0x1000 */

typedef struct _KSECONDARY_IDT_ENTRY
{
  /* 0x0000 */ unsigned __int64 SpinLock;
  /* 0x0008 */ struct _KEVENT ConnectLock;
  /* 0x0020 */ unsigned char LineMasked;
  /* 0x0021 */ char Padding_532[7];
  /* 0x0028 */ struct _KINTERRUPT* InterruptList;
} KSECONDARY_IDT_ENTRY, *PKSECONDARY_IDT_ENTRY; /* size: 0x0030 */

typedef union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 ProcessorType : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 InstructionSet : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 ErrorType : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 Operation : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 Flags : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 Level : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 CPUVersion : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 CPUBrandString : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned __int64 ProcessorId : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 TargetAddress : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 RequesterId : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 ResponderId : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 InstructionPointer : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 NativeModelId : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned __int64 Reserved : 50; /* bit position: 14 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 ValidBits;
  }; /* size: 0x0008 */
} WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS, *PWHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS; /* size: 0x0008 */

typedef struct _FREE_DISPLAY
{
  /* 0x0000 */ unsigned long RealVectorSize;
  /* 0x0004 */ unsigned long Hint;
  /* 0x0008 */ struct _RTL_BITMAP Display;
} FREE_DISPLAY, *PFREE_DISPLAY; /* size: 0x0018 */

typedef struct _MMVAD_FLAGS2
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Large : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long TrimBehind : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Inherit : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long NoValidationNeeded : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long PrivateDemandZero : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long ImageMappingExtended : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Spare : 26; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long LongFlags;
  }; /* size: 0x0004 */
} MMVAD_FLAGS2, *PMMVAD_FLAGS2; /* size: 0x0004 */

typedef struct _MMVAD
{
  /* 0x0000 */ struct _MMVAD_SHORT Core;
  /* 0x0040 */ struct _MMVAD_FLAGS2 VadFlags2;
  /* 0x0044 */ long Padding_533;
  /* 0x0048 */ struct _SUBSECTION* Subsection;
  /* 0x0050 */ struct _MMPTE* FirstPrototypePte;
  /* 0x0058 */ struct _MMPTE* LastContiguousPte;
  /* 0x0060 */ struct _LIST_ENTRY ViewLinks;
  /* 0x0070 */ struct _EPROCESS* VadsProcess;
  union
  {
    union
    {
      /* 0x0078 */ struct _MI_VAD_SEQUENTIAL_INFO SequentialVa;
      /* 0x0078 */ struct _MMEXTEND_INFO* ExtendedInfo;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u4;
  /* 0x0080 */ struct _FILE_OBJECT* FileObject;
} MMVAD, *PMMVAD; /* size: 0x0088 */

typedef struct _DUAL
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_534;
  /* 0x0008 */ struct _HMAP_DIRECTORY* Map;
  /* 0x0010 */ struct _HMAP_TABLE* SmallDir;
  /* 0x0018 */ unsigned long Guard;
  /* 0x001c */ long Padding_535;
  /* 0x0020 */ struct _FREE_DISPLAY FreeDisplay[24];
  /* 0x0260 */ struct _LIST_ENTRY FreeBins;
  /* 0x0270 */ unsigned long FreeSummary;
  /* 0x0274 */ long __PADDING__[1];
} DUAL, *PDUAL; /* size: 0x0278 */

struct PEPHANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _CM_NOTIFY_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY HiveList;
  /* 0x0010 */ struct _LIST_ENTRY PostList;
  /* 0x0020 */ struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;
  /* 0x0028 */ struct _CM_KEY_BODY* KeyBody;
  struct /* bitfield */
  {
    /* 0x0030 */ unsigned long Filter : 30; /* bit position: 0 */
    /* 0x0030 */ unsigned long WatchTree : 1; /* bit position: 30 */
    /* 0x0030 */ unsigned long NotifyPending : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0034 */ long Padding_536;
  /* 0x0038 */ struct _SECURITY_SUBJECT_CONTEXT SubjectContext;
} CM_NOTIFY_BLOCK, *PCM_NOTIFY_BLOCK; /* size: 0x0058 */

typedef struct _MI_CLONE_BLOCK_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 CloneProtection : 5; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 ReducedCommitReferences : 55; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 ScpPage : 1; /* bit position: 60 */
      /* 0x0000 */ unsigned __int64 Spare : 2; /* bit position: 61 */
      /* 0x0000 */ unsigned __int64 LockBit : 1; /* bit position: 63 */
    }; /* bitfield */
    /* 0x0000 */ __int64 EntireField;
  }; /* size: 0x0008 */
} MI_CLONE_BLOCK_FLAGS, *PMI_CLONE_BLOCK_FLAGS; /* size: 0x0008 */

typedef struct _MMCLONE_BLOCK
{
  /* 0x0000 */ struct _MMPTE ProtoPte;
  /* 0x0008 */ unsigned __int64 CrossPartitionReferences;
  /* 0x0010 */ volatile struct _MI_CLONE_BLOCK_FLAGS u1;
  /* 0x0018 */ unsigned __int64 UseCount;
} MMCLONE_BLOCK, *PMMCLONE_BLOCK; /* size: 0x0020 */

struct _TP_CALLBACK_INSTANCE;

typedef struct _PENDING_RELATIONS_LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0030 */ struct _PNP_DEVICE_EVENT_ENTRY* DeviceEvent;
  /* 0x0038 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0040 */ struct _RELATION_LIST* RelationsList;
  /* 0x0048 */ struct _IRP* EjectIrp;
  /* 0x0050 */ enum IRPLOCK Lock;
  /* 0x0054 */ unsigned long Problem;
  /* 0x0058 */ unsigned char ProfileChangingEject;
  /* 0x0059 */ unsigned char DisplaySafeRemovalDialog;
  /* 0x005a */ char Padding_537[2];
  /* 0x005c */ enum _SYSTEM_POWER_STATE LightestSleepState;
  /* 0x0060 */ struct DOCK_INTERFACE* DockInterface;
  /* 0x0068 */ unsigned char DequeuePending;
  /* 0x0069 */ char Padding_538[3];
  /* 0x006c */ enum _PNP_DEVICE_DELETE_TYPE DeleteType;
} PENDING_RELATIONS_LIST_ENTRY, *PPENDING_RELATIONS_LIST_ENTRY; /* size: 0x0070 */

typedef union _AMD64_MXCSR_REG
{
  union
  {
    /* 0x0000 */ unsigned long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long IE : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long DE : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long ZE : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long OE : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long UE : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long PE : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long DAZ : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long IM : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long DM : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long ZM : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned long OM : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned long UM : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned long PM : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned long RC : 2; /* bit position: 13 */
      /* 0x0000 */ unsigned long FZ : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned long res : 16; /* bit position: 16 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} AMD64_MXCSR_REG, *PAMD64_MXCSR_REG; /* size: 0x0004 */

struct _TP_CLEANUP_GROUP;

typedef struct _PNP_WATCHDOG
{
  /* 0x0000 */ unsigned __int64 WatchdogStart;
  /* 0x0008 */ struct _WDT_HANDLE* WatchdogTimer;
  /* 0x0010 */ enum _PNP_WATCHDOG_TYPE WatchdogContextType;
  /* 0x0014 */ long Padding_539;
  /* 0x0018 */ void* WatchdogContext;
  /* 0x0020 */ unsigned char FirstChanceTriggered;
  /* 0x0021 */ unsigned char TelemetryGenerated;
  /* 0x0022 */ char Padding_540[6];
  /* 0x0028 */ struct _UNICODE_STRING DriverToBlame;
  /* 0x0038 */ wchar_t DriverToBlameBuffer[1];
  /* 0x003a */ char __PADDING__[6];
} PNP_WATCHDOG, *PPNP_WATCHDOG; /* size: 0x0040 */

typedef struct _MMSECURE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long ReadOnly : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReadWrite : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long SecNoChange : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long NoDelete : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long RequiresPteReversal : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long ExclusiveSecure : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long UserModeOnly : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long NoInherit : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long CheckVad : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned long Spare : 3; /* bit position: 9 */
  }; /* bitfield */
} MMSECURE_FLAGS, *PMMSECURE_FLAGS; /* size: 0x0004 */

typedef struct _MMADDRESS_LIST
{
  union
  {
    union
    {
      /* 0x0000 */ struct _MMSECURE_FLAGS Flags;
      /* 0x0000 */ unsigned long FlagsLong;
      /* 0x0000 */ void* StartVa;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
  /* 0x0008 */ void* EndVa;
} MMADDRESS_LIST, *PMMADDRESS_LIST; /* size: 0x0010 */

typedef struct _MI_LARGEPAGE_VAD_INFO
{
  /* 0x0000 */ unsigned char LargeImageBias;
  /* 0x0001 */ unsigned char Spare[3];
  /* 0x0004 */ long Padding_541;
  /* 0x0008 */ unsigned __int64 ActualImageViewSize;
  /* 0x0010 */ struct _EPARTITION* ReferencedPartition;
} MI_LARGEPAGE_VAD_INFO, *PMI_LARGEPAGE_VAD_INFO; /* size: 0x0018 */

typedef struct _MI_VAD_EVENT_BLOCK
{
  /* 0x0000 */ struct _MI_VAD_EVENT_BLOCK* Next;
  union
  {
    /* 0x0008 */ struct _KGATE Gate;
    /* 0x0008 */ struct _MMADDRESS_LIST SecureInfo;
    /* 0x0008 */ struct _RTL_BITMAP_EX BitMap;
    /* 0x0008 */ struct _MMINPAGE_SUPPORT* InPageSupport;
    /* 0x0008 */ struct _MI_LARGEPAGE_VAD_INFO LargePage;
    /* 0x0008 */ struct _MI_PHYSICAL_VIEW AweView;
    /* 0x0008 */ struct _ETHREAD* CreatingThread;
    /* 0x0008 */ struct _MI_SUB64K_FREE_RANGES PebTeb;
    /* 0x0008 */ struct _MMVAD_SHORT* PlaceholderVad;
    /* 0x0008 */ void* HotPatchEntry;
  }; /* size: 0x0048 */
  /* 0x0050 */ unsigned long WaitReason;
  /* 0x0054 */ unsigned long CaseSpecificFlags;
} MI_VAD_EVENT_BLOCK, *PMI_VAD_EVENT_BLOCK; /* size: 0x0058 */

typedef struct _CM_KEY_HASH_TABLE_ENTRY
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0008 */ struct _KTHREAD* Owner;
  /* 0x0010 */ struct _CM_KEY_HASH* Entry;
} CM_KEY_HASH_TABLE_ENTRY, *PCM_KEY_HASH_TABLE_ENTRY; /* size: 0x0018 */

typedef struct _CMP_VOLUME_MANAGER
{
  /* 0x0000 */ struct _CMSI_RW_LOCK VolumeContextListLock;
  /* 0x0008 */ struct _LIST_ENTRY VolumeContextListHead;
} CMP_VOLUME_MANAGER, *PCMP_VOLUME_MANAGER; /* size: 0x0018 */

typedef struct _ACTIVATION_CONTEXT_STACK
{
  /* 0x0000 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* ActiveFrame;
  /* 0x0008 */ struct _LIST_ENTRY FrameListCache;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned long NextCookieSequenceNumber;
  /* 0x0020 */ unsigned long StackId;
  /* 0x0024 */ long __PADDING__[1];
} ACTIVATION_CONTEXT_STACK, *PACTIVATION_CONTEXT_STACK; /* size: 0x0028 */

typedef struct _MI_SUBSECTION_ENTRY1
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long CrossPartitionReferences : 30; /* bit position: 0 */
    /* 0x0000 */ unsigned long SubsectionMappedLarge : 2; /* bit position: 30 */
  }; /* bitfield */
} MI_SUBSECTION_ENTRY1, *PMI_SUBSECTION_ENTRY1; /* size: 0x0004 */

typedef struct _RELATION_LIST
{
  /* 0x0000 */ struct _DEVICE_OBJECT_LIST* DeviceObjectList;
  /* 0x0008 */ unsigned char Sorted;
  /* 0x0009 */ char __PADDING__[7];
} RELATION_LIST, *PRELATION_LIST; /* size: 0x0010 */

typedef struct _DEVICE_OBJECT_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long MaxCount;
  /* 0x0008 */ unsigned long TagCount;
  /* 0x000c */ enum _PNP_DEVICE_DELETE_TYPE OperationCode;
  /* 0x0010 */ struct _DEVICE_OBJECT_LIST_ENTRY Devices[1];
} DEVICE_OBJECT_LIST, *PDEVICE_OBJECT_LIST; /* size: 0x0028 */

struct DOCK_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ long Padding_542;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ void* InterfaceReference /* function */;
  /* 0x0018 */ void* InterfaceDereference /* function */;
  /* 0x0020 */ void* ProfileDepartureSetMode /* function */;
  /* 0x0028 */ void* ProfileDepartureUpdate /* function */;
}; /* size: 0x0030 */

typedef struct _GDI_TEB_BATCH
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Offset : 30; /* bit position: 0 */
    /* 0x0000 */ unsigned long InProcessing : 1; /* bit position: 30 */
    /* 0x0000 */ unsigned long HasRenderingCommand : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_543;
  /* 0x0008 */ unsigned __int64 HDC;
  /* 0x0010 */ unsigned long Buffer[310];
} GDI_TEB_BATCH, *PGDI_TEB_BATCH; /* size: 0x04e8 */

typedef struct _TEB_ACTIVE_FRAME
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_544;
  /* 0x0008 */ struct _TEB_ACTIVE_FRAME* Previous;
  /* 0x0010 */ const struct _TEB_ACTIVE_FRAME_CONTEXT* Context;
} TEB_ACTIVE_FRAME, *PTEB_ACTIVE_FRAME; /* size: 0x0018 */

typedef struct _PNP_REBALANCE_TRACE_CONTEXT
{
  /* 0x0000 */ unsigned long DeviceCount[2];
  /* 0x0008 */ unsigned long RebalancePhase;
  /* 0x000c */ enum _PNP_REBALANCE_REASON Reason;
  /* 0x0010 */ enum _PNP_REBALANCE_FAILURE Failure[2];
  /* 0x0018 */ struct _DEVICE_NODE* SubtreeRoot[2];
  /* 0x0028 */ unsigned char SubtreeIncludesRoot[2];
  /* 0x002a */ char Padding_545[6];
  /* 0x0030 */ struct _DEVICE_NODE* TriggerRoot;
  /* 0x0038 */ union _PNP_REBALANCE_FLAGS Flags;
  /* 0x003c */ long Padding_546;
  /* 0x0040 */ unsigned __int64 BeginTime[2];
  /* 0x0050 */ struct _DEVICE_NODE* VetoNode[2];
  /* 0x0060 */ enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON VetoQueryRebalanceReason[2];
  /* 0x0068 */ struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT ConflictContext;
} PNP_REBALANCE_TRACE_CONTEXT, *PPNP_REBALANCE_TRACE_CONTEXT; /* size: 0x0080 */

typedef struct _EXT_IOMMU_SETTINGS
{
  struct
  {
    /* 0x0000 */ unsigned __int64 BroadcastTlbMaintenance : 1; /* bit position: 0 */
  } /* size: 0x0008 */ EnabledCapabilities;
  /* 0x0008 */ enum _EXT_IOMMU_ADDRESS_TRANSLATION_POLICY TranslationPolicy;
  /* 0x000c */ enum _EXT_IOMMU_INTERRUPT_REMAPPING_POLICY RemappingPolicy;
  /* 0x0010 */ unsigned long RemappingTableEntries;
  /* 0x0014 */ long __PADDING__[1];
} EXT_IOMMU_SETTINGS, *PEXT_IOMMU_SETTINGS; /* size: 0x0018 */

struct _DEVICE_NODE_IOMMU_EXTENSION;

typedef struct _SINGLE_LIST_ENTRY32
{
  /* 0x0000 */ unsigned long Next;
} SINGLE_LIST_ENTRY32, *PSINGLE_LIST_ENTRY32; /* size: 0x0004 */

typedef struct _PO_HIBER_PERF
{
  /* 0x0000 */ unsigned __int64 HiberIoTicks;
  /* 0x0008 */ unsigned __int64 HiberIoCpuTicks;
  /* 0x0010 */ unsigned __int64 HiberInitTicks;
  /* 0x0018 */ unsigned __int64 HiberHiberFileTicks;
  /* 0x0020 */ unsigned __int64 BootCompressTicks;
  /* 0x0028 */ unsigned __int64 KernelCompressTicks;
  /* 0x0030 */ unsigned __int64 HiberSharedBufferTicks;
  /* 0x0038 */ unsigned __int64 HiberChecksumTicks;
  /* 0x0040 */ unsigned __int64 HiberChecksumIoTicks;
  /* 0x0048 */ union _LARGE_INTEGER TotalHibernateTime;
  /* 0x0050 */ union _LARGE_INTEGER HibernateCompleteTimestamp;
  /* 0x0058 */ unsigned long POSTTime;
  /* 0x005c */ unsigned long ResumeBootMgrTime;
  /* 0x0060 */ unsigned long BootmgrUserInputTime;
  /* 0x0064 */ long Padding_547;
  /* 0x0068 */ unsigned __int64 ResumeAppTicks;
  /* 0x0070 */ unsigned __int64 ResumeAppStartTimestamp;
  /* 0x0078 */ unsigned __int64 ResumeLibraryInitTicks;
  /* 0x0080 */ unsigned __int64 ResumeInitTicks;
  /* 0x0088 */ unsigned __int64 ResumeRestoreImageStartTimestamp;
  /* 0x0090 */ unsigned __int64 ResumeHiberFileTicks;
  /* 0x0098 */ unsigned __int64 ResumeIoTicks;
  /* 0x00a0 */ unsigned __int64 ResumeDecompressTicks;
  /* 0x00a8 */ unsigned __int64 ResumeAllocateTicks;
  /* 0x00b0 */ unsigned __int64 ResumeUserInOutTicks;
  /* 0x00b8 */ unsigned __int64 ResumeMapTicks;
  /* 0x00c0 */ unsigned __int64 ResumeUnmapTicks;
  /* 0x00c8 */ unsigned __int64 ResumeChecksumTicks;
  /* 0x00d0 */ unsigned __int64 ResumeChecksumIoTicks;
  /* 0x00d8 */ unsigned __int64 ResumeKernelSwitchTimestamp;
  /* 0x00e0 */ unsigned __int64 CyclesPerMs;
  /* 0x00e8 */ unsigned __int64 WriteLogDataTimestamp;
  /* 0x00f0 */ unsigned __int64 KernelReturnFromHandler;
  /* 0x00f8 */ unsigned __int64 TimeStampCounterAtSwitchTime;
  /* 0x0100 */ unsigned __int64 HighestPhysicalPage;
  /* 0x0108 */ unsigned long ProcessorCount;
  /* 0x010c */ unsigned long Reserved;
  /* 0x0110 */ unsigned __int64 SleeperThreadEnd;
  /* 0x0118 */ unsigned __int64 PostCmosUpdateTimestamp;
  /* 0x0120 */ unsigned __int64 KernelReturnSystemPowerStateTimestamp;
  /* 0x0128 */ unsigned __int64 IoBoundedness;
  /* 0x0130 */ unsigned __int64 KernelDecompressTicks;
  /* 0x0138 */ unsigned __int64 KernelIoTicks;
  /* 0x0140 */ unsigned __int64 KernelCopyTicks;
  /* 0x0148 */ unsigned __int64 ReadCheckCount;
  /* 0x0150 */ unsigned __int64 KernelInitTicks;
  /* 0x0158 */ unsigned __int64 KernelResumeHiberFileTicks;
  /* 0x0160 */ unsigned __int64 KernelIoCpuTicks;
  /* 0x0168 */ unsigned __int64 KernelSharedBufferTicks;
  /* 0x0170 */ unsigned __int64 KernelAnimationTicks;
  /* 0x0178 */ unsigned __int64 KernelChecksumTicks;
  /* 0x0180 */ unsigned __int64 KernelChecksumIoTicks;
  /* 0x0188 */ union _LARGE_INTEGER AnimationStart;
  /* 0x0190 */ union _LARGE_INTEGER AnimationStop;
  /* 0x0198 */ unsigned long DeviceResumeTime;
  /* 0x019c */ long Padding_548;
  /* 0x01a0 */ unsigned __int64 SecurePagesProcessed;
  /* 0x01a8 */ unsigned __int64 BootPagesProcessed;
  /* 0x01b0 */ unsigned __int64 KernelPagesProcessed;
  /* 0x01b8 */ unsigned __int64 BootBytesWritten;
  /* 0x01c0 */ unsigned __int64 KernelBytesWritten;
  /* 0x01c8 */ unsigned __int64 BootPagesWritten;
  /* 0x01d0 */ unsigned __int64 KernelPagesWritten;
  /* 0x01d8 */ unsigned __int64 BytesWritten;
  /* 0x01e0 */ unsigned long PagesWritten;
  /* 0x01e4 */ unsigned long FileRuns;
  /* 0x01e8 */ unsigned long NoMultiStageResumeReason;
  /* 0x01ec */ unsigned long MaxHuffRatio;
  /* 0x01f0 */ unsigned __int64 AdjustedTotalResumeTime;
  /* 0x01f8 */ unsigned __int64 ResumeCompleteTimestamp;
  /* 0x0200 */ unsigned __int64 WinresumeExitTimestamp;
  /* 0x0208 */ unsigned __int64 TcbLoaderStartTimestamp;
  /* 0x0210 */ unsigned __int64 TcbLoaderEndTimestamp;
  /* 0x0218 */ unsigned __int64 RemappedPageLookupCycles;
  /* 0x0220 */ unsigned __int64 TcbLaunchPrepareCycles;
  /* 0x0228 */ unsigned __int64 TcbLaunchPrepareDataCycles;
  /* 0x0230 */ unsigned __int64 TcbRestoreStateCycles;
  /* 0x0238 */ unsigned __int64 DecryptVsmPagesPhase0Cycles;
  /* 0x0240 */ unsigned __int64 DecryptVsmPagesPhase1Cycles;
  /* 0x0248 */ unsigned __int64 DecryptVsmPagesPhase2Cycles;
  /* 0x0250 */ unsigned __int64 TcbLoaderAuthenticateCycles;
  /* 0x0258 */ unsigned __int64 TcbLoaderDecryptCycles;
  /* 0x0260 */ unsigned __int64 TcbLoaderValidateCycles;
  /* 0x0268 */ unsigned __int64 BootPhaseBlockCountByMethod[5];
  /* 0x0290 */ unsigned __int64 KernelPhaseBlockCountByMethod[5];
  /* 0x02b8 */ unsigned __int64 BootPhaseWriteIoTicks;
  /* 0x02c0 */ unsigned __int64 KernelPhaseWriteIoTicks;
  /* 0x02c8 */ unsigned __int64 SecurePhaseWriteIoTicks;
  /* 0x02d0 */ unsigned __int64 BootPhaseSuspendWallTicks;
  /* 0x02d8 */ unsigned __int64 KernelPhaseSuspendWallTicks;
  /* 0x02e0 */ unsigned __int64 KernelPhaseResumeWallTicks;
} PO_HIBER_PERF, *PPO_HIBER_PERF; /* size: 0x02e8 */

typedef struct _CM_FAST_LEAF_HINT
{
  union
  {
    /* 0x0000 */ unsigned char Characters[4];
    /* 0x0000 */ unsigned long FullHint;
  }; /* size: 0x0004 */
} CM_FAST_LEAF_HINT, *PCM_FAST_LEAF_HINT; /* size: 0x0004 */

typedef struct _CM_INDEX
{
  /* 0x0000 */ unsigned long Cell;
  union
  {
    /* 0x0004 */ struct _CM_FAST_LEAF_HINT NameHint;
    /* 0x0004 */ struct _CM_COMPONENT_HASH HashKey;
  }; /* size: 0x0004 */
} CM_INDEX, *PCM_INDEX; /* size: 0x0008 */

typedef struct _OBJECT_HANDLE_INFORMATION
{
  /* 0x0000 */ unsigned long HandleAttributes;
  /* 0x0004 */ unsigned long GrantedAccess;
} OBJECT_HANDLE_INFORMATION, *POBJECT_HANDLE_INFORMATION; /* size: 0x0008 */

typedef struct _VI_DEADLOCK_GLOBALS
{
  /* 0x0000 */ __int64 TimeAcquire;
  /* 0x0008 */ __int64 TimeRelease;
  /* 0x0010 */ struct _LIST_ENTRY* ResourceDatabase;
  /* 0x0018 */ unsigned __int64 ResourceDatabaseCount;
  /* 0x0020 */ struct _VF_ADDRESS_RANGE ResourceAddressRange[1023];
  /* 0x4010 */ struct _LIST_ENTRY* ThreadDatabase;
  /* 0x4018 */ unsigned __int64 ThreadDatabaseCount;
  /* 0x4020 */ struct _VF_ADDRESS_RANGE ThreadAddressRange[1023];
  /* 0x8010 */ volatile unsigned long AllocationFailures;
  /* 0x8014 */ unsigned long NodesTrimmedBasedOnAge;
  /* 0x8018 */ unsigned long NodesTrimmedBasedOnCount;
  /* 0x801c */ unsigned long NodesSearched;
  /* 0x8020 */ unsigned long MaxNodesSearched;
  /* 0x8024 */ unsigned long SequenceNumber;
  /* 0x8028 */ unsigned long RecursionDepthLimit;
  /* 0x802c */ unsigned long SearchedNodesLimit;
  /* 0x8030 */ unsigned long DepthLimitHits;
  /* 0x8034 */ unsigned long SearchLimitHits;
  /* 0x8038 */ unsigned long StackLimitHits;
  /* 0x803c */ unsigned long ABC_ACB_Skipped;
  /* 0x8040 */ unsigned long OutOfOrderReleases;
  /* 0x8044 */ unsigned long NodesReleasedOutOfOrder;
  /* 0x8048 */ unsigned long TotalReleases;
  /* 0x804c */ unsigned long RootNodesDeleted;
  /* 0x8050 */ unsigned long ForgetHistoryCounter;
  /* 0x8054 */ long Padding_549;
  /* 0x8058 */ void* Instigator;
  /* 0x8060 */ unsigned long NumberOfParticipants;
  /* 0x8064 */ long Padding_550;
  /* 0x8068 */ struct _VI_DEADLOCK_NODE* Participant[32];
  /* 0x8168 */ long ChildrenCountWatermark;
  /* 0x816c */ enum _KERNEL_STACK_LIMITS StackType;
  /* 0x8170 */ unsigned __int64 StackLowLimit;
  /* 0x8178 */ unsigned __int64 StackHighLimit;
} VI_DEADLOCK_GLOBALS, *PVI_DEADLOCK_GLOBALS; /* size: 0x8180 */

typedef struct _IO_NMISOURCE
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned long GlobalSystemInterruptVector;
} IO_NMISOURCE, *PIO_NMISOURCE; /* size: 0x0008 */

typedef struct _GIC_DISTRIBUTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned short Reserved1;
  /* 0x0004 */ unsigned long Identifier;
  /* 0x0008 */ unsigned __int64 ControllerPhysicalAddress;
  /* 0x0010 */ unsigned long GsivBase;
  /* 0x0014 */ unsigned char Version;
  /* 0x0015 */ unsigned char Reserved[3];
} GIC_DISTRIBUTOR, *PGIC_DISTRIBUTOR; /* size: 0x0018 */

typedef struct _ACPI_METHOD_ARGUMENT_V1
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned short DataLength;
  union
  {
    /* 0x0004 */ unsigned long Argument;
    struct
    {
      /* 0x0004 */ unsigned char Data[1];
      /* 0x0005 */ char __PADDING__[3];
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} ACPI_METHOD_ARGUMENT_V1, *PACPI_METHOD_ARGUMENT_V1; /* size: 0x0008 */

typedef struct _CALL_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned __int64 SpinLock;
  /* 0x0008 */ struct _LIST_ENTRY HashTable[64];
} CALL_PERFORMANCE_DATA, *PCALL_PERFORMANCE_DATA; /* size: 0x0408 */

typedef struct _PEP_CRASHDUMP_INFORMATION
{
  /* 0x0000 */ struct PEPHANDLE__* DeviceHandle;
  /* 0x0008 */ void* DeviceContext;
} PEP_CRASHDUMP_INFORMATION, *PPEP_CRASHDUMP_INFORMATION; /* size: 0x0010 */

typedef struct _POP_FX_COMPONENT
{
  /* 0x0000 */ struct _GUID Id;
  /* 0x0010 */ unsigned long Index;
  /* 0x0014 */ long Padding_551;
  /* 0x0018 */ struct _POP_FX_WORK_ORDER WorkOrder;
  /* 0x0050 */ struct _POP_FX_DEVICE* Device;
  /* 0x0058 */ volatile union _POP_FX_COMPONENT_FLAGS Flags;
  /* 0x0060 */ volatile long Resident;
  /* 0x0064 */ long Padding_552;
  /* 0x0068 */ struct _KEVENT ActiveEvent;
  /* 0x0080 */ unsigned __int64 IdleLock;
  /* 0x0088 */ volatile long IdleConditionComplete;
  /* 0x008c */ volatile long IdleStateComplete;
  /* 0x0090 */ unsigned __int64 IdleStamp;
  /* 0x0098 */ volatile unsigned long CurrentIdleState;
  /* 0x009c */ unsigned long IdleStateCount;
  /* 0x00a0 */ struct _POP_FX_IDLE_STATE* IdleStates;
  /* 0x00a8 */ unsigned long DeepestWakeableIdleState;
  /* 0x00ac */ unsigned long ProviderCount;
  /* 0x00b0 */ struct _POP_FX_PROVIDER* Providers;
  /* 0x00b8 */ unsigned long IdleProviderCount;
  /* 0x00bc */ unsigned long DependentCount;
  /* 0x00c0 */ struct _POP_FX_DEPENDENT* Dependents;
  /* 0x00c8 */ struct _POP_FX_ACCOUNTING Accounting;
  /* 0x01a8 */ struct _POP_FX_PERF_INFO* Performance;
  /* 0x01b0 */ struct _POP_COMPONENT_POWER_PROFILE* PowerProfile;
  /* 0x01b8 */ struct _LIST_ENTRY ExternalDependents;
  /* 0x01c8 */ struct _LIST_ENTRY ExternalDependencies;
} POP_FX_COMPONENT, *PPOP_FX_COMPONENT; /* size: 0x01d8 */

typedef struct _POP_FX_IDLE_STATE
{
  /* 0x0000 */ unsigned __int64 TransitionLatency;
  /* 0x0008 */ unsigned __int64 ResidencyRequirement;
  /* 0x0010 */ unsigned long NominalPower;
  /* 0x0014 */ long __PADDING__[1];
} POP_FX_IDLE_STATE, *PPOP_FX_IDLE_STATE; /* size: 0x0018 */

typedef struct _IMAGE_SECTION_HEADER
{
  /* 0x0000 */ unsigned char Name[8];
  union
  {
    union
    {
      /* 0x0008 */ unsigned long PhysicalAddress;
      /* 0x0008 */ unsigned long VirtualSize;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Misc;
  /* 0x000c */ unsigned long VirtualAddress;
  /* 0x0010 */ unsigned long SizeOfRawData;
  /* 0x0014 */ unsigned long PointerToRawData;
  /* 0x0018 */ unsigned long PointerToRelocations;
  /* 0x001c */ unsigned long PointerToLinenumbers;
  /* 0x0020 */ unsigned short NumberOfRelocations;
  /* 0x0022 */ unsigned short NumberOfLinenumbers;
  /* 0x0024 */ unsigned long Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; /* size: 0x0028 */

typedef struct _POP_FX_DEPENDENT
{
  /* 0x0000 */ unsigned long Index;
  /* 0x0004 */ unsigned long ProviderIndex;
} POP_FX_DEPENDENT, *PPOP_FX_DEPENDENT; /* size: 0x0008 */

typedef struct _POP_FX_PERF_INFO
{
  /* 0x0000 */ struct _POP_FX_COMPONENT* Component;
  /* 0x0008 */ struct _KEVENT CompletedEvent;
  /* 0x0020 */ void* ComponentPerfState /* function */;
  /* 0x0028 */ volatile union _POP_FX_PERF_FLAGS Flags;
  /* 0x002c */ long Padding_553;
  /* 0x0030 */ struct _PO_FX_PERF_STATE_CHANGE* LastChange;
  /* 0x0038 */ unsigned long LastChangeCount;
  /* 0x003c */ long Padding_554;
  /* 0x0040 */ unsigned __int64 LastChangeStamp;
  /* 0x0048 */ unsigned char LastChangeNominal;
  /* 0x0049 */ unsigned char PepRegistered;
  /* 0x004a */ unsigned char QueryOnIdleStates;
  /* 0x004b */ char Padding_555[5];
  /* 0x0050 */ void* volatile RequestDriverContext;
  /* 0x0058 */ struct _POP_FX_WORK_ORDER WorkOrder;
  /* 0x0090 */ unsigned long SetsCount;
  /* 0x0094 */ long Padding_556;
  /* 0x0098 */ struct _POP_FX_PERF_SET* Sets;
} POP_FX_PERF_INFO, *PPOP_FX_PERF_INFO; /* size: 0x00a0 */

typedef struct _RH_OP_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ struct _IRP* OplockRequestIrp;
  /* 0x0018 */ struct _FILE_OBJECT* OplockRequestFileObject;
  /* 0x0020 */ struct _EPROCESS* OplockRequestProcess;
  /* 0x0028 */ struct _ETHREAD* OplockOwnerThread;
  /* 0x0030 */ unsigned long Flags;
  /* 0x0034 */ long Padding_557;
  /* 0x0038 */ struct _LIST_ENTRY AtomicLinks;
} RH_OP_CONTEXT, *PRH_OP_CONTEXT; /* size: 0x0048 */

typedef struct _POOL_HEADER
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned short PreviousSize : 8; /* bit position: 0 */
        /* 0x0000 */ unsigned short PoolIndex : 8; /* bit position: 8 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned short BlockSize : 8; /* bit position: 0 */
        /* 0x0002 */ unsigned short PoolType : 8; /* bit position: 8 */
      }; /* bitfield */
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long Ulong1;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long PoolTag;
  union
  {
    /* 0x0008 */ struct _EPROCESS* ProcessBilled;
    struct
    {
      /* 0x0008 */ unsigned short AllocatorBackTraceIndex;
      /* 0x000a */ unsigned short PoolTagHash;
      /* 0x000c */ long __PADDING__[1];
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} POOL_HEADER, *PPOOL_HEADER; /* size: 0x0010 */

typedef struct _PO_FX_PERF_STATE_CHANGE
{
  /* 0x0000 */ unsigned long Set;
  /* 0x0004 */ long Padding_558;
  union
  {
    /* 0x0008 */ unsigned long StateIndex;
    /* 0x0008 */ unsigned __int64 StateValue;
  }; /* size: 0x0008 */
} PO_FX_PERF_STATE_CHANGE, *PPO_FX_PERF_STATE_CHANGE; /* size: 0x0010 */

typedef struct _POP_FX_PERF_SET
{
  /* 0x0000 */ struct _PO_FX_COMPONENT_PERF_SET* PerfSet;
  /* 0x0008 */ unsigned __int64 CurrentPerf;
  /* 0x0010 */ unsigned __int64 CurrentPerfStamp;
  /* 0x0018 */ unsigned char CurrentPerfNominal;
  /* 0x0019 */ char __PADDING__[7];
} POP_FX_PERF_SET, *PPOP_FX_PERF_SET; /* size: 0x0020 */

typedef struct _PO_FX_COMPONENT_PERF_SET
{
  /* 0x0000 */ struct _UNICODE_STRING Name;
  /* 0x0010 */ unsigned __int64 Flags;
  /* 0x0018 */ enum _PO_FX_PERF_STATE_UNIT Unit;
  /* 0x001c */ enum _PO_FX_PERF_STATE_TYPE Type;
  union
  {
    struct
    {
      /* 0x0020 */ unsigned long Count;
      /* 0x0004 */ long Padding_559;
      /* 0x0028 */ struct _PO_FX_PERF_STATE* States;
    } /* size: 0x0010 */ Discrete;
    struct
    {
      /* 0x0020 */ unsigned __int64 Minimum;
      /* 0x0028 */ unsigned __int64 Maximum;
    } /* size: 0x0010 */ Range;
  }; /* size: 0x0010 */
} PO_FX_COMPONENT_PERF_SET, *PPO_FX_COMPONENT_PERF_SET; /* size: 0x0030 */

typedef struct _NONOPAQUE_OPLOCK
{
  /* 0x0000 */ struct _IRP* IrpExclusiveOplock;
  /* 0x0008 */ struct _FILE_OBJECT* FileObject;
  /* 0x0010 */ struct _EPROCESS* ExclusiveOplockOwner;
  /* 0x0018 */ struct _ETHREAD* ExclusiveOplockOwnerThread;
  /* 0x0020 */ unsigned char WaiterPriority;
  /* 0x0021 */ char Padding_560[7];
  /* 0x0028 */ struct _LIST_ENTRY IrpOplocksR;
  /* 0x0038 */ struct _LIST_ENTRY IrpOplocksRH;
  /* 0x0048 */ struct _LIST_ENTRY RHBreakQueue;
  /* 0x0058 */ struct _LIST_ENTRY WaitingIrps;
  /* 0x0068 */ struct _LIST_ENTRY DelayAckFileObjectQueue;
  /* 0x0078 */ struct _LIST_ENTRY AtomicQueue;
  /* 0x0088 */ struct _GUID* DeleterParentKey;
  /* 0x0090 */ unsigned long OplockState;
  /* 0x0094 */ long Padding_561;
  /* 0x0098 */ struct _FAST_MUTEX* FastMutex;
} NONOPAQUE_OPLOCK, *PNONOPAQUE_OPLOCK; /* size: 0x00a0 */

typedef struct _PO_FX_PERF_STATE
{
  /* 0x0000 */ unsigned __int64 Value;
  /* 0x0008 */ void* Context;
} PO_FX_PERF_STATE, *PPO_FX_PERF_STATE; /* size: 0x0010 */

struct _TP_POOL;

typedef struct _CM_KEY_SECURITY_CACHE_ENTRY
{
  /* 0x0000 */ unsigned long Cell;
  /* 0x0004 */ long Padding_562;
  /* 0x0008 */ struct _CM_KEY_SECURITY_CACHE* CachedSecurity;
} CM_KEY_SECURITY_CACHE_ENTRY, *PCM_KEY_SECURITY_CACHE_ENTRY; /* size: 0x0010 */

typedef struct _POP_COMPONENT_POWER_PROFILE
{
  /* 0x0000 */ struct _GUID ComponentGuid;
  /* 0x0010 */ struct _POP_DEVICE_POWER_PROFILE* Device;
  /* 0x0018 */ unsigned __int64 FxCount;
  /* 0x0020 */ struct _PO_POWER_PLANE_PROFILE FxPower[1];
} POP_COMPONENT_POWER_PROFILE, *PPOP_COMPONENT_POWER_PROFILE; /* size: 0x0028 */

typedef struct _POP_DEVICE_POWER_PROFILE
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceId;
  /* 0x0010 */ struct _POP_POWER_PLANE* PowerPlane;
  /* 0x0018 */ struct _POP_FX_DEVICE* FxDevice;
  /* 0x0020 */ long PowerDrawMw;
  /* 0x0024 */ struct _PO_POWER_PLANE_PROFILE DxPower[4];
  /* 0x0044 */ long Padding_563;
  /* 0x0048 */ unsigned __int64 ComponentCount;
  /* 0x0050 */ struct _POP_COMPONENT_POWER_PROFILE** Components;
} POP_DEVICE_POWER_PROFILE, *PPOP_DEVICE_POWER_PROFILE; /* size: 0x0058 */

typedef struct _HIVE_LIST_ENTRY
{
  /* 0x0000 */ wchar_t* FileName;
  /* 0x0008 */ wchar_t* BaseName;
  /* 0x0010 */ wchar_t* RegRootName;
  /* 0x0018 */ struct _CMHIVE* CmHive;
  /* 0x0020 */ unsigned long HHiveFlags;
  /* 0x0024 */ unsigned long CmHiveFlags;
  /* 0x0028 */ unsigned long CmKcbCacheSize;
  /* 0x002c */ long Padding_564;
  /* 0x0030 */ struct _CMHIVE* CmHive2;
  /* 0x0038 */ unsigned char HiveMounted;
  /* 0x0039 */ unsigned char ThreadFinished;
  /* 0x003a */ unsigned char ThreadStarted;
  /* 0x003b */ unsigned char Allocate;
  /* 0x003c */ unsigned char WinPERequired;
  /* 0x003d */ char Padding_565[3];
  /* 0x0040 */ struct _KEVENT StartEvent;
  /* 0x0058 */ struct _KEVENT FinishedEvent;
  /* 0x0070 */ struct _KEVENT MountLock;
  /* 0x0088 */ struct _EX_PUSH_LOCK MountCallbackLock;
  /* 0x0090 */ struct _EX_PUSH_LOCK CallbackListLock;
  /* 0x0098 */ struct _LIST_ENTRY CallbackListHead;
  /* 0x00a8 */ struct _UNICODE_STRING FilePath;
} HIVE_LIST_ENTRY, *PHIVE_LIST_ENTRY; /* size: 0x00b8 */

typedef struct _CM_KCB_LAYER_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY LayerListEntry;
  /* 0x0010 */ struct _CM_KEY_CONTROL_BLOCK* Kcb;
  /* 0x0018 */ struct _CM_KCB_LAYER_INFO* LowerLayer;
  /* 0x0020 */ struct _LIST_ENTRY UpperLayerListHead;
  /* 0x0030 */ struct _LIST_ENTRY DiscardedUpperLayerListHead;
} CM_KCB_LAYER_INFO, *PCM_KCB_LAYER_INFO; /* size: 0x0040 */

typedef struct _POP_POWER_PLANE
{
  /* 0x0000 */ struct _UNICODE_STRING PowerPlaneId;
  /* 0x0010 */ unsigned __int64 Lock;
  /* 0x0018 */ unsigned char OldIrql;
  /* 0x0019 */ char Padding_566[3];
  /* 0x001c */ volatile long DevicePowerMw;
  /* 0x0020 */ void* PmaxHandle;
  /* 0x0028 */ void* NotifyDevicePowerDraw /* function */;
  /* 0x0030 */ unsigned __int64 DeviceCount;
  /* 0x0038 */ struct _POP_DEVICE_POWER_PROFILE** Devices;
} POP_POWER_PLANE, *PPOP_POWER_PLANE; /* size: 0x0040 */

typedef struct _BLOB_TYPE
{
  /* 0x0000 */ enum _BLOB_ID ResourceId;
  /* 0x0004 */ unsigned long PoolTag;
  /* 0x0008 */ unsigned long LookasideIndex;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ struct _BLOB_COUNTERS* Counters;
  /* 0x0018 */ void* CleanupProcedure /* function */;
  /* 0x0020 */ void* DeleteProcedure /* function */;
  /* 0x0028 */ void* DestroyProcedure /* function */;
  /* 0x0030 */ unsigned __int64 UsualSize;
} BLOB_TYPE, *PBLOB_TYPE; /* size: 0x0038 */

typedef struct _ACPI_SRAT
{
  /* 0x0000 */ struct _DESCRIPTION_HEADER Header;
  /* 0x0024 */ unsigned long TableRevision;
  /* 0x0028 */ unsigned long Reserved[2];
} ACPI_SRAT, *PACPI_SRAT; /* size: 0x0030 */

typedef struct _POP_FX_LOG_ENTRY
{
  /* 0x0000 */ unsigned __int64 Timestamp;
  /* 0x0008 */ unsigned char Operation;
  /* 0x0009 */ unsigned char Component;
  /* 0x000a */ unsigned short Processor;
  /* 0x000c */ unsigned short Process;
  /* 0x000e */ unsigned short Thread;
  /* 0x0010 */ unsigned __int64 Information;
} POP_FX_LOG_ENTRY, *PPOP_FX_LOG_ENTRY; /* size: 0x0018 */

typedef struct _NT_TIB
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
  /* 0x0008 */ void* StackBase;
  /* 0x0010 */ void* StackLimit;
  /* 0x0018 */ void* SubSystemTib;
  union
  {
    /* 0x0020 */ void* FiberData;
    /* 0x0020 */ unsigned long Version;
  }; /* size: 0x0008 */
  /* 0x0028 */ void* ArbitraryUserPointer;
  /* 0x0030 */ struct _NT_TIB* Self;
} NT_TIB, *PNT_TIB; /* size: 0x0038 */

typedef struct _TEB
{
  /* 0x0000 */ struct _NT_TIB NtTib;
  /* 0x0038 */ void* EnvironmentPointer;
  /* 0x0040 */ struct _CLIENT_ID ClientId;
  /* 0x0050 */ void* ActiveRpcHandle;
  /* 0x0058 */ void* ThreadLocalStoragePointer;
  /* 0x0060 */ struct _PEB* ProcessEnvironmentBlock;
  /* 0x0068 */ unsigned long LastErrorValue;
  /* 0x006c */ unsigned long CountOfOwnedCriticalSections;
  /* 0x0070 */ void* CsrClientThread;
  /* 0x0078 */ void* Win32ThreadInfo;
  /* 0x0080 */ unsigned long User32Reserved[26];
  /* 0x00e8 */ unsigned long UserReserved[5];
  /* 0x00fc */ long Padding_567;
  /* 0x0100 */ void* WOW32Reserved;
  /* 0x0108 */ unsigned long CurrentLocale;
  /* 0x010c */ unsigned long FpSoftwareStatusRegister;
  /* 0x0110 */ void* ReservedForDebuggerInstrumentation[16];
  /* 0x0190 */ void* SystemReserved1[25];
  /* 0x0258 */ void* HeapFlsData;
  /* 0x0260 */ unsigned __int64 RngState[4];
  /* 0x0280 */ char PlaceholderCompatibilityMode;
  /* 0x0281 */ unsigned char PlaceholderHydrationAlwaysExplicit;
  /* 0x0282 */ char PlaceholderReserved[10];
  /* 0x028c */ unsigned long ProxiedProcessId;
  /* 0x0290 */ struct _ACTIVATION_CONTEXT_STACK _ActivationStack;
  /* 0x02b8 */ unsigned char WorkingOnBehalfTicket[8];
  /* 0x02c0 */ long ExceptionCode;
  /* 0x02c4 */ unsigned char Padding0[4];
  /* 0x02c8 */ struct _ACTIVATION_CONTEXT_STACK* ActivationContextStackPointer;
  /* 0x02d0 */ unsigned __int64 InstrumentationCallbackSp;
  /* 0x02d8 */ unsigned __int64 InstrumentationCallbackPreviousPc;
  /* 0x02e0 */ unsigned __int64 InstrumentationCallbackPreviousSp;
  /* 0x02e8 */ unsigned long TxFsContext;
  /* 0x02ec */ unsigned char InstrumentationCallbackDisabled;
  /* 0x02ed */ unsigned char UnalignedLoadStoreExceptions;
  /* 0x02ee */ unsigned char Padding1[2];
  /* 0x02f0 */ struct _GDI_TEB_BATCH GdiTebBatch;
  /* 0x07d8 */ struct _CLIENT_ID RealClientId;
  /* 0x07e8 */ void* GdiCachedProcessHandle;
  /* 0x07f0 */ unsigned long GdiClientPID;
  /* 0x07f4 */ unsigned long GdiClientTID;
  /* 0x07f8 */ void* GdiThreadLocalInfo;
  /* 0x0800 */ unsigned __int64 Win32ClientInfo[62];
  /* 0x09f0 */ void* glDispatchTable[233];
  /* 0x1138 */ unsigned __int64 glReserved1[29];
  /* 0x1220 */ void* glReserved2;
  /* 0x1228 */ void* glSectionInfo;
  /* 0x1230 */ void* glSection;
  /* 0x1238 */ void* glTable;
  /* 0x1240 */ void* glCurrentRC;
  /* 0x1248 */ void* glContext;
  /* 0x1250 */ unsigned long LastStatusValue;
  /* 0x1254 */ unsigned char Padding2[4];
  /* 0x1258 */ struct _UNICODE_STRING StaticUnicodeString;
  /* 0x1268 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x1472 */ unsigned char Padding3[6];
  /* 0x1478 */ void* DeallocationStack;
  /* 0x1480 */ void* TlsSlots[64];
  /* 0x1680 */ struct _LIST_ENTRY TlsLinks;
  /* 0x1690 */ void* Vdm;
  /* 0x1698 */ void* ReservedForNtRpc;
  /* 0x16a0 */ void* DbgSsReserved[2];
  /* 0x16b0 */ unsigned long HardErrorMode;
  /* 0x16b4 */ unsigned char Padding4[4];
  /* 0x16b8 */ void* Instrumentation[11];
  /* 0x1710 */ struct _GUID ActivityId;
  /* 0x1720 */ void* SubProcessTag;
  /* 0x1728 */ void* PerflibData;
  /* 0x1730 */ void* EtwTraceData;
  /* 0x1738 */ void* WinSockData;
  /* 0x1740 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x1744 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x1744 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x1744 */ unsigned char ReservedPad0;
      /* 0x1745 */ unsigned char ReservedPad1;
      /* 0x1746 */ unsigned char ReservedPad2;
      /* 0x1747 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x1748 */ unsigned long GuaranteedStackBytes;
  /* 0x174c */ unsigned char Padding5[4];
  /* 0x1750 */ void* ReservedForPerf;
  /* 0x1758 */ void* ReservedForOle;
  /* 0x1760 */ unsigned long WaitingOnLoaderLock;
  /* 0x1764 */ unsigned char Padding6[4];
  /* 0x1768 */ void* SavedPriorityState;
  /* 0x1770 */ unsigned __int64 ReservedForCodeCoverage;
  /* 0x1778 */ void* ThreadPoolData;
  /* 0x1780 */ void** TlsExpansionSlots;
  /* 0x1788 */ struct _CHPEV2_CPUAREA_INFO* ChpeV2CpuAreaInfo;
  /* 0x1790 */ void* Unused;
  /* 0x1798 */ unsigned long MuiGeneration;
  /* 0x179c */ unsigned long IsImpersonating;
  /* 0x17a0 */ void* NlsCache;
  /* 0x17a8 */ void* pShimData;
  /* 0x17b0 */ unsigned long HeapData;
  /* 0x17b4 */ unsigned char Padding7[4];
  /* 0x17b8 */ void* CurrentTransactionHandle;
  /* 0x17c0 */ struct _TEB_ACTIVE_FRAME* ActiveFrame;
  /* 0x17c8 */ void* FlsData;
  /* 0x17d0 */ void* PreferredLanguages;
  /* 0x17d8 */ void* UserPrefLanguages;
  /* 0x17e0 */ void* MergedPrefLanguages;
  /* 0x17e8 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x17ec */ volatile unsigned short CrossTebFlags;
    /* 0x17ec */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x17ee */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x17ee */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x17ee */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x17ee */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x17ee */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x17ee */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x17ee */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x17ee */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x17ee */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x17ee */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x17ee */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x17ee */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x17ee */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x17ee */ unsigned short LoadOwner : 1; /* bit position: 12 */
      /* 0x17ee */ unsigned short LoaderWorker : 1; /* bit position: 13 */
      /* 0x17ee */ unsigned short SkipLoaderInit : 1; /* bit position: 14 */
      /* 0x17ee */ unsigned short SkipFileAPIBrokering : 1; /* bit position: 15 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x17f0 */ void* TxnScopeEnterCallback;
  /* 0x17f8 */ void* TxnScopeExitCallback;
  /* 0x1800 */ void* TxnScopeContext;
  /* 0x1808 */ unsigned long LockCount;
  /* 0x180c */ long WowTebOffset;
  /* 0x1810 */ void* ResourceRetValue;
  /* 0x1818 */ void* ReservedForWdf;
  /* 0x1820 */ unsigned __int64 ReservedForCrt;
  /* 0x1828 */ struct _GUID EffectiveContainerId;
  /* 0x1838 */ unsigned __int64 LastSleepCounter;
  /* 0x1840 */ unsigned long SpinCallCount;
  /* 0x1844 */ unsigned char Padding8[4];
  /* 0x1848 */ unsigned __int64 ExtendedFeatureDisableMask;
  /* 0x1850 */ void* SchedulerSharedDataSlot;
  /* 0x1858 */ void* HeapWalkContext;
  /* 0x1860 */ struct _GROUP_AFFINITY PrimaryGroupAffinity;
  /* 0x1870 */ unsigned long Rcu[2];
} TEB, *PTEB; /* size: 0x1878 */

typedef struct _KHETRO_HWFEEDBACK_TYPE
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct _KHETERO_HWFEEDBACK_CLASS HwFeedbackClass[1];
} KHETRO_HWFEEDBACK_TYPE, *PKHETRO_HWFEEDBACK_TYPE; /* size: 0x0008 */

typedef struct _TEB_ACTIVE_FRAME_CONTEXT
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_568;
  /* 0x0008 */ const char* FrameName;
} TEB_ACTIVE_FRAME_CONTEXT, *PTEB_ACTIVE_FRAME_CONTEXT; /* size: 0x0010 */

typedef struct _RTL_CRITICAL_SECTION
{
  /* 0x0000 */ struct _RTL_CRITICAL_SECTION_DEBUG* DebugInfo;
  /* 0x0008 */ long LockCount;
  /* 0x000c */ long RecursionCount;
  /* 0x0010 */ void* OwningThread;
  /* 0x0018 */ void* LockSemaphore;
  /* 0x0020 */ unsigned __int64 SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION; /* size: 0x0028 */

typedef struct _HEAP_LOCK
{
  union
  {
    union
    {
      /* 0x0000 */ struct _RTL_CRITICAL_SECTION CriticalSection;
      /* 0x0000 */ struct _ERESOURCE Resource;
    }; /* size: 0x0068 */
  } /* size: 0x0068 */ Lock;
} HEAP_LOCK, *PHEAP_LOCK; /* size: 0x0068 */

typedef struct _EX_PUSH_LOCK_AUTO_EXPAND
{
  /* 0x0000 */ struct _EX_PUSH_LOCK LocalLock;
  /* 0x0008 */ struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE State;
  /* 0x000c */ unsigned long Stats;
} EX_PUSH_LOCK_AUTO_EXPAND, *PEX_PUSH_LOCK_AUTO_EXPAND; /* size: 0x0010 */

typedef struct _PO_DEVICE_NOTIFY_ORDER
{
  /* 0x0000 */ unsigned char Locked;
  /* 0x0001 */ char Padding_569[7];
  /* 0x0008 */ struct _DEVICE_OBJECT** WarmEjectPdoPointer;
  /* 0x0010 */ struct _PO_NOTIFY_ORDER_LEVEL OrderLevel[5];
  /* 0x0178 */ unsigned long Flags;
  /* 0x017c */ long __PADDING__[1];
} PO_DEVICE_NOTIFY_ORDER, *PPO_DEVICE_NOTIFY_ORDER; /* size: 0x0180 */

typedef struct _INBV_DISPLAY_CONTEXT
{
  /* 0x0000 */ unsigned char FrameBufferValid;
  /* 0x0001 */ unsigned char FrameBufferMapped;
  /* 0x0002 */ unsigned char DisplayRotation;
  /* 0x0003 */ char Padding_570;
  /* 0x0004 */ struct _INBV_MODE_INFORMATION ModeInformation;
  /* 0x0014 */ long Padding_571;
  /* 0x0018 */ void* ShadowBuffer;
  union
  {
    union
    {
      /* 0x0020 */ void* FrameBuffer;
      /* 0x0020 */ void* BltRoutine /* function */;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ VideoMemory;
} INBV_DISPLAY_CONTEXT, *PINBV_DISPLAY_CONTEXT; /* size: 0x0028 */

typedef struct _DMA_IOMMU_INTERFACE_V1
{
  /* 0x0000 */ void* CreateDomain /* function */;
  /* 0x0008 */ void* DeleteDomain /* function */;
  /* 0x0010 */ void* AttachDevice /* function */;
  /* 0x0018 */ void* DetachDevice /* function */;
  /* 0x0020 */ void* FlushDomain /* function */;
  /* 0x0028 */ void* FlushDomainByVaList /* function */;
  /* 0x0030 */ void* QueryInputMappings /* function */;
  /* 0x0038 */ void* MapLogicalRange /* function */;
  /* 0x0040 */ void* UnmapLogicalRange /* function */;
  /* 0x0048 */ void* MapIdentityRange /* function */;
  /* 0x0050 */ void* UnmapIdentityRange /* function */;
  /* 0x0058 */ void* SetDeviceFaultReporting /* function */;
  /* 0x0060 */ void* ConfigureDomain /* function */;
} DMA_IOMMU_INTERFACE_V1, *PDMA_IOMMU_INTERFACE_V1; /* size: 0x0068 */

typedef struct _DMA_IOMMU_INTERFACE_V3
{
  /* 0x0000 */ void* CreateDomainEx /* function */;
  /* 0x0008 */ void* DeleteDomain /* function */;
  /* 0x0010 */ void* AttachDeviceEx /* function */;
  /* 0x0018 */ void* DetachDeviceEx /* function */;
  /* 0x0020 */ void* FlushDomain /* function */;
  /* 0x0028 */ void* FlushDomainByVaList /* function */;
  /* 0x0030 */ void* QueryInputMappings /* function */;
  /* 0x0038 */ void* MapLogicalRangeEx /* function */;
  /* 0x0040 */ void* UnmapLogicalRange /* function */;
  /* 0x0048 */ void* MapIdentityRangeEx /* function */;
  /* 0x0050 */ void* UnmapIdentityRangeEx /* function */;
  /* 0x0058 */ void* SetDeviceFaultReportingEx /* function */;
  /* 0x0060 */ void* ConfigureDomain /* function */;
  /* 0x0068 */ void* QueryAvailableDomainTypes /* function */;
  /* 0x0070 */ void* RegisterInterfaceStateChangeCallback /* function */;
  /* 0x0078 */ void* UnregisterInterfaceStateChangeCallback /* function */;
  /* 0x0080 */ void* ReserveLogicalAddressRange /* function */;
  /* 0x0088 */ void* FreeReservedLogicalAddressRange /* function */;
  /* 0x0090 */ void* MapReservedLogicalRange /* function */;
  /* 0x0098 */ void* UnmapReservedLogicalRange /* function */;
  /* 0x00a0 */ void* CreateDevice /* function */;
  /* 0x00a8 */ void* DeleteDevice /* function */;
  /* 0x00b0 */ void* CreatePasidDevice /* function */;
  /* 0x00b8 */ void* DeletePasidDevice /* function */;
  /* 0x00c0 */ void* AttachPasidDevice /* function */;
  /* 0x00c8 */ void* DetachPasidDevice /* function */;
  /* 0x00d0 */ void* QueryDeviceInfo /* function */;
} DMA_IOMMU_INTERFACE_V3, *PDMA_IOMMU_INTERFACE_V3; /* size: 0x00d8 */

typedef struct _DMA_IOMMU_INTERFACE_EX
{
  /* 0x0000 */ unsigned __int64 Size;
  /* 0x0008 */ unsigned long Version;
  /* 0x000c */ long Padding_572;
  union
  {
    /* 0x0010 */ struct _DMA_IOMMU_INTERFACE_V1 V1;
    /* 0x0010 */ struct _DMA_IOMMU_INTERFACE_V2 V2;
    /* 0x0010 */ struct _DMA_IOMMU_INTERFACE_V3 V3;
  }; /* size: 0x00d8 */
} DMA_IOMMU_INTERFACE_EX, *PDMA_IOMMU_INTERFACE_EX; /* size: 0x00e8 */

typedef union _KI_COOPERATIVE_IDLE_SEARCH_GENERATION_ID
{
  union
  {
    /* 0x0000 */ unsigned __int64 FullId;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Empty : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 MinorId : 6; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 MajorId : 57; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} KI_COOPERATIVE_IDLE_SEARCH_GENERATION_ID, *PKI_COOPERATIVE_IDLE_SEARCH_GENERATION_ID; /* size: 0x0008 */

typedef struct _KI_COOPERATIVE_IDLE_SEARCH_CONTEXT
{
  /* 0x0000 */ unsigned __int64 SearchContextLock;
  /* 0x0008 */ volatile unsigned __int64 SearchingProcessors;
  /* 0x0010 */ union _KI_COOPERATIVE_IDLE_SEARCH_GENERATION_ID NextGenerationId;
  /* 0x0018 */ volatile union _KI_COOPERATIVE_IDLE_SEARCH_GENERATION_ID GenerationIds[64];
  /* 0x0218 */ struct _KI_COOPERATIVE_IDLE_SEARCH_GENERATION* Generations[64];
  /* 0x0418 */ unsigned __int64 Affinity;
  /* 0x0420 */ unsigned short AllocatedTargetEntries;
  /* 0x0422 */ unsigned short ActiveTargetEntries;
  /* 0x0424 */ unsigned char LowProcIndex;
  /* 0x0425 */ unsigned char HighProcIndex;
  /* 0x0426 */ unsigned short Group;
  /* 0x0428 */ unsigned char ExtensionStart[1];
  /* 0x0429 */ char __PADDING__[7];
} KI_COOPERATIVE_IDLE_SEARCH_CONTEXT, *PKI_COOPERATIVE_IDLE_SEARCH_CONTEXT; /* size: 0x0430 */

typedef struct _PNP_ASSIGN_RESOURCES_CONTEXT
{
  /* 0x0000 */ unsigned long IncludeFailedDevices;
  /* 0x0004 */ unsigned long DeviceCount;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceList[1];
} PNP_ASSIGN_RESOURCES_CONTEXT, *PPNP_ASSIGN_RESOURCES_CONTEXT; /* size: 0x0010 */

typedef struct _KI_COOPERATIVE_IDLE_SEARCH_GENERATION
{
  /* 0x0000 */ union _KI_COOPERATIVE_IDLE_SEARCH_GENERATION_ID GenerationId;
  /* 0x0008 */ unsigned short AllocatedTargetEntries;
  /* 0x000a */ unsigned short ActiveTargetEntries;
  /* 0x000c */ unsigned long Spare;
  /* 0x0010 */ unsigned char ExtensionStart[1];
  /* 0x0011 */ char __PADDING__[7];
} KI_COOPERATIVE_IDLE_SEARCH_GENERATION, *PKI_COOPERATIVE_IDLE_SEARCH_GENERATION; /* size: 0x0018 */

typedef struct _CONTROL_AREA
{
  /* 0x0000 */ struct _SEGMENT* Segment;
  union
  {
    /* 0x0008 */ struct _LIST_ENTRY ListHead;
    /* 0x0008 */ void* AweContext;
  }; /* size: 0x0010 */
  /* 0x0018 */ unsigned __int64 NumberOfSectionReferences;
  /* 0x0020 */ unsigned __int64 NumberOfPfnReferences;
  /* 0x0028 */ unsigned __int64 NumberOfMappedViews;
  /* 0x0030 */ unsigned __int64 NumberOfUserReferences;
  union
  {
    union
    {
      /* 0x0038 */ unsigned long LongFlags;
      /* 0x0038 */ struct _MMSECTION_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  union
  {
    union
    {
      /* 0x003c */ unsigned long LongFlags;
      /* 0x003c */ struct _MMSECTION_FLAGS2 Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0040 */ struct _EX_FAST_REF FilePointer;
  /* 0x0048 */ volatile long ControlAreaLock;
  /* 0x004c */ unsigned long ModifiedWriteCount;
  /* 0x0050 */ struct _MI_CONTROL_AREA_WAIT_BLOCK* WaitList;
  union
  {
    struct
    {
      union
      {
        /* 0x0058 */ unsigned long NumberOfSystemCacheViews;
        /* 0x0058 */ unsigned long ImageRelocationStartBit;
      }; /* size: 0x0004 */
      union
      {
        /* 0x005c */ volatile long WritableUserReferences;
        struct /* bitfield */
        {
          /* 0x005c */ unsigned long ImageRelocationSizeIn64k : 16; /* bit position: 0 */
          /* 0x005c */ unsigned long SystemImage : 1; /* bit position: 16 */
          /* 0x005c */ unsigned long CantMove : 1; /* bit position: 17 */
          /* 0x005c */ unsigned long StrongCode : 2; /* bit position: 18 */
          /* 0x005c */ unsigned long BitMap : 2; /* bit position: 20 */
          /* 0x005c */ unsigned long ImageActive : 1; /* bit position: 22 */
          /* 0x005c */ unsigned long ImageBaseOkToReuse : 1; /* bit position: 23 */
        }; /* bitfield */
      }; /* size: 0x0004 */
      union
      {
        /* 0x0060 */ unsigned long NumberOfSubsections;
        /* 0x0060 */ union _MI_IMAGE_INFO_REF ImageInfoRef;
      }; /* size: 0x0008 */
    } /* size: 0x0010 */ e2;
  } /* size: 0x0010 */ u2;
  /* 0x0068 */ struct _EX_PUSH_LOCK FileObjectLock;
  /* 0x0070 */ volatile unsigned __int64 LockedPages;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0078 */ unsigned __int64 Spare : 3; /* bit position: 0 */
        /* 0x0078 */ unsigned __int64 IoAttributionContext : 61; /* bit position: 3 */
      }; /* bitfield */
      /* 0x0078 */ unsigned __int64 ImageCrossPartitionCharge;
      /* 0x0078 */ unsigned __int64 CommittedPageCount : 36; /* bit position: 0 */
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u3;
} CONTROL_AREA, *PCONTROL_AREA; /* size: 0x0080 */

typedef union _IOMMU_DMA_DOMAIN_CREATION_FLAGS
{
  union
  {
    /* 0x0000 */ unsigned __int64 Reserved : 64; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 AsUlonglong;
  }; /* size: 0x0008 */
} IOMMU_DMA_DOMAIN_CREATION_FLAGS, *PIOMMU_DMA_DOMAIN_CREATION_FLAGS; /* size: 0x0008 */

typedef struct _BUS_HANDLER
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0008 */ enum _BUS_DATA_TYPE ConfigurationType;
  /* 0x000c */ unsigned long BusNumber;
  /* 0x0010 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0018 */ struct _BUS_HANDLER* ParentHandler;
  /* 0x0020 */ void* BusData;
  /* 0x0028 */ unsigned long DeviceControlExtensionSize;
  /* 0x002c */ long Padding_573;
  /* 0x0030 */ struct _SUPPORTED_RANGES* BusAddresses;
  /* 0x0038 */ unsigned long Reserved[4];
  /* 0x0048 */ void* GetBusData /* function */;
  /* 0x0050 */ void* SetBusData /* function */;
  /* 0x0058 */ void* AdjustResourceList /* function */;
  /* 0x0060 */ void* AssignSlotResources /* function */;
  /* 0x0068 */ void* TranslateBusAddress /* function */;
  /* 0x0070 */ void* Spare1;
  /* 0x0078 */ void* Spare2;
  /* 0x0080 */ void* Spare3;
  /* 0x0088 */ void* Spare4;
  /* 0x0090 */ void* Spare5;
  /* 0x0098 */ void* Spare6;
  /* 0x00a0 */ void* Spare7;
  /* 0x00a8 */ void* Spare8;
} BUS_HANDLER, *PBUS_HANDLER; /* size: 0x00b0 */

typedef struct _DBGKM_EXCEPTION64
{
  /* 0x0000 */ struct _EXCEPTION_RECORD64 ExceptionRecord;
  /* 0x0098 */ unsigned long FirstChance;
  /* 0x009c */ long __PADDING__[1];
} DBGKM_EXCEPTION64, *PDBGKM_EXCEPTION64; /* size: 0x00a0 */

typedef struct _KALPC_VIEW
{
  /* 0x0000 */ struct _LIST_ENTRY ViewListEntry;
  /* 0x0010 */ struct _KALPC_REGION* Region;
  /* 0x0018 */ struct _ALPC_PORT* OwnerPort;
  /* 0x0020 */ struct _EPROCESS* OwnerProcess;
  /* 0x0028 */ void* Address;
  /* 0x0030 */ unsigned __int64 Size;
  /* 0x0038 */ void* SecureViewHandle;
  /* 0x0040 */ void* WriteAccessHandle;
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0048 */ unsigned long WriteAccess : 1; /* bit position: 0 */
        /* 0x0048 */ unsigned long AutoRelease : 1; /* bit position: 1 */
        /* 0x0048 */ unsigned long ForceUnlink : 1; /* bit position: 2 */
        /* 0x0048 */ unsigned long SystemSpace : 1; /* bit position: 3 */
      }; /* bitfield */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x004c */ unsigned long NumberOfOwnerMessages;
  /* 0x0050 */ struct _LIST_ENTRY ProcessViewListEntry;
} KALPC_VIEW, *PKALPC_VIEW; /* size: 0x0060 */

typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long ActiveCount;
  /* 0x0010 */ unsigned long PendingNullCount;
  /* 0x0014 */ unsigned long PendingCheckCompletionListCount;
  /* 0x0018 */ unsigned long PendingDelete;
  /* 0x001c */ long Padding_574;
  /* 0x0020 */ struct _SINGLE_LIST_ENTRY FreeListHead;
  /* 0x0028 */ struct _KQUEUE* CompletionPort;
  /* 0x0030 */ void* CompletionKey;
  /* 0x0038 */ struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY Entry[1];
} ALPC_COMPLETION_PACKET_LOOKASIDE, *PALPC_COMPLETION_PACKET_LOOKASIDE; /* size: 0x0050 */

typedef struct _TERMINATION_PORT
{
  /* 0x0000 */ struct _TERMINATION_PORT* Next;
  /* 0x0008 */ void* Port;
} TERMINATION_PORT, *PTERMINATION_PORT; /* size: 0x0010 */

typedef struct _PCW_DATA
{
  /* 0x0000 */ const void* Data;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ long __PADDING__[1];
} PCW_DATA, *PPCW_DATA; /* size: 0x0010 */

typedef struct _ETW_PERF_COUNTERS
{
  /* 0x0000 */ long TotalActiveSessions;
  /* 0x0004 */ long TotalBufferMemoryNonPagedPool;
  /* 0x0008 */ long TotalBufferMemoryPagedPool;
  /* 0x000c */ long TotalGuidsEnabled;
  /* 0x0010 */ long TotalGuidsNotEnabled;
  /* 0x0014 */ long TotalGuidsPreEnabled;
} ETW_PERF_COUNTERS, *PETW_PERF_COUNTERS; /* size: 0x0018 */

typedef struct _THREAD_ENERGY_VALUES
{
  /* 0x0000 */ unsigned __int64 Cycles[2][4];
  /* 0x0040 */ unsigned __int64 AttributedCycles[2][4];
  /* 0x0080 */ unsigned __int64 WorkOnBehalfCycles[2][4];
  /* 0x00c0 */ union _TIMELINE_BITMAP CpuTimeline;
} THREAD_ENERGY_VALUES, *PTHREAD_ENERGY_VALUES; /* size: 0x00c8 */

typedef struct _PROCESS_DISK_COUNTERS
{
  /* 0x0000 */ unsigned __int64 BytesRead;
  /* 0x0008 */ unsigned __int64 BytesWritten;
  /* 0x0010 */ unsigned __int64 ReadOperationCount;
  /* 0x0018 */ unsigned __int64 WriteOperationCount;
  /* 0x0020 */ unsigned __int64 FlushOperationCount;
} PROCESS_DISK_COUNTERS, *PPROCESS_DISK_COUNTERS; /* size: 0x0028 */

typedef struct _PROCESS_NETWORK_COUNTERS
{
  /* 0x0000 */ unsigned __int64 BytesIn;
  /* 0x0008 */ unsigned __int64 BytesOut;
} PROCESS_NETWORK_COUNTERS, *PPROCESS_NETWORK_COUNTERS; /* size: 0x0010 */

typedef struct _PS_JOB_WAKE_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NotificationChannel;
  /* 0x0008 */ unsigned __int64 WakeCounters[7];
  /* 0x0040 */ unsigned __int64 NoWakeCounter;
} PS_JOB_WAKE_INFORMATION, *PPS_JOB_WAKE_INFORMATION; /* size: 0x0048 */

typedef struct _EPROCESS_VALUES
{
  /* 0x0000 */ unsigned __int64 KernelTime;
  /* 0x0008 */ unsigned __int64 UserTime;
  /* 0x0010 */ unsigned __int64 ReadyTime;
  /* 0x0018 */ unsigned __int64 CycleTime;
  /* 0x0020 */ unsigned __int64 ContextSwitches;
  /* 0x0028 */ __int64 ReadOperationCount;
  /* 0x0030 */ __int64 WriteOperationCount;
  /* 0x0038 */ __int64 OtherOperationCount;
  /* 0x0040 */ __int64 ReadTransferCount;
  /* 0x0048 */ __int64 WriteTransferCount;
  /* 0x0050 */ __int64 OtherTransferCount;
  /* 0x0058 */ unsigned __int64 KernelWaitTime;
  /* 0x0060 */ unsigned __int64 UserWaitTime;
} EPROCESS_VALUES, *PEPROCESS_VALUES; /* size: 0x0068 */

typedef struct _JOB_RATE_CONTROL_HEADER
{
  /* 0x0000 */ void* RateControlQuotaReference;
  /* 0x0008 */ struct _RTL_BITMAP OverQuotaHistory;
  /* 0x0018 */ unsigned char* BitMapBuffer;
  /* 0x0020 */ unsigned __int64 BitMapBufferSize;
} JOB_RATE_CONTROL_HEADER, *PJOB_RATE_CONTROL_HEADER; /* size: 0x0028 */

typedef union _JOBOBJECT_ENERGY_TRACKING_STATE
{
  union
  {
    /* 0x0000 */ unsigned __int64 Value;
    struct
    {
      /* 0x0000 */ unsigned long UpdateMask;
      /* 0x0004 */ unsigned long DesiredState;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} JOBOBJECT_ENERGY_TRACKING_STATE, *PJOBOBJECT_ENERGY_TRACKING_STATE; /* size: 0x0008 */

typedef struct _EJOB
{
  /* 0x0000 */ struct _KEVENT Event;
  /* 0x0018 */ struct _LIST_ENTRY JobLinks;
  /* 0x0028 */ struct _LIST_ENTRY ProcessListHead;
  /* 0x0038 */ struct _ERESOURCE JobLock;
  /* 0x00a0 */ union _LARGE_INTEGER TotalUserTime;
  /* 0x00a8 */ union _LARGE_INTEGER TotalKernelTime;
  /* 0x00b0 */ union _LARGE_INTEGER TotalCycleTime;
  /* 0x00b8 */ union _LARGE_INTEGER ThisPeriodTotalUserTime;
  /* 0x00c0 */ union _LARGE_INTEGER ThisPeriodTotalKernelTime;
  /* 0x00c8 */ unsigned __int64 TotalContextSwitches;
  /* 0x00d0 */ unsigned long TotalPageFaultCount;
  /* 0x00d4 */ unsigned long TotalProcesses;
  /* 0x00d8 */ unsigned long ActiveProcesses;
  /* 0x00dc */ unsigned long TotalTerminatedProcesses;
  /* 0x00e0 */ union _LARGE_INTEGER PerProcessUserTimeLimit;
  /* 0x00e8 */ union _LARGE_INTEGER PerJobUserTimeLimit;
  /* 0x00f0 */ unsigned __int64 MinimumWorkingSetSize;
  /* 0x00f8 */ unsigned __int64 MaximumWorkingSetSize;
  /* 0x0100 */ unsigned long LimitFlags;
  /* 0x0104 */ unsigned long ActiveProcessLimit;
  /* 0x0108 */ struct _KAFFINITY_EX Affinity;
  /* 0x0210 */ struct _JOB_ACCESS_STATE* AccessState;
  /* 0x0218 */ void* AccessStateQuotaReference;
  /* 0x0220 */ unsigned long UIRestrictionsClass;
  /* 0x0224 */ unsigned long EndOfJobTimeAction;
  /* 0x0228 */ void* CompletionPort;
  /* 0x0230 */ void* CompletionKey;
  /* 0x0238 */ unsigned __int64 CompletionCount;
  /* 0x0240 */ unsigned long SessionId;
  /* 0x0244 */ unsigned long SchedulingClass;
  /* 0x0248 */ unsigned __int64 ReadOperationCount;
  /* 0x0250 */ unsigned __int64 WriteOperationCount;
  /* 0x0258 */ unsigned __int64 OtherOperationCount;
  /* 0x0260 */ unsigned __int64 ReadTransferCount;
  /* 0x0268 */ unsigned __int64 WriteTransferCount;
  /* 0x0270 */ unsigned __int64 OtherTransferCount;
  /* 0x0278 */ struct _PROCESS_DISK_COUNTERS DiskIoInfo;
  /* 0x02a0 */ struct _PROCESS_NETWORK_COUNTERS NetworkIoInfo;
  /* 0x02b0 */ unsigned __int64 ProcessMemoryLimit;
  /* 0x02b8 */ unsigned __int64 JobMemoryLimit;
  /* 0x02c0 */ unsigned __int64 JobTotalMemoryLimit;
  /* 0x02c8 */ unsigned __int64 PeakProcessMemoryUsed;
  /* 0x02d0 */ unsigned __int64 PeakJobMemoryUsed;
  /* 0x02d8 */ struct _KAFFINITY_EX EffectiveAffinity;
  /* 0x03e0 */ union _LARGE_INTEGER EffectivePerProcessUserTimeLimit;
  /* 0x03e8 */ unsigned __int64 EffectiveMinimumWorkingSetSize;
  /* 0x03f0 */ unsigned __int64 EffectiveMaximumWorkingSetSize;
  /* 0x03f8 */ unsigned __int64 EffectiveProcessMemoryLimit;
  /* 0x0400 */ struct _EJOB* EffectiveProcessMemoryLimitJob;
  /* 0x0408 */ struct _EJOB* EffectivePerProcessUserTimeLimitJob;
  /* 0x0410 */ struct _EJOB* EffectiveNetIoRateLimitJob;
  /* 0x0418 */ struct _EJOB* EffectiveHeapAttributionJob;
  /* 0x0420 */ unsigned long EffectiveLimitFlags;
  /* 0x0424 */ unsigned long EffectiveSchedulingClass;
  /* 0x0428 */ unsigned long EffectiveFreezeCount;
  /* 0x042c */ unsigned long EffectiveGraphicsFreezeCount;
  /* 0x0430 */ unsigned long EffectiveBackgroundCount;
  /* 0x0434 */ unsigned long EffectiveSwapCount;
  /* 0x0438 */ unsigned long EffectiveNotificationLimitCount;
  /* 0x043c */ unsigned long EffectiveIoPriorityLimit;
  /* 0x0440 */ unsigned long IoPriorityLimit;
  /* 0x0444 */ unsigned long EffectivePagePriorityLimit;
  /* 0x0448 */ unsigned long PagePriorityLimit;
  /* 0x044c */ unsigned char EffectivePriorityClass;
  /* 0x044d */ unsigned char PriorityClass;
  /* 0x044e */ unsigned char NestingDepth;
  /* 0x044f */ unsigned char Reserved1[1];
  /* 0x0450 */ unsigned long CompletionFilter;
  /* 0x0454 */ long Padding_575;
  union
  {
    /* 0x0458 */ struct _WNF_STATE_NAME WakeChannel;
    /* 0x0458 */ struct _PS_JOB_WAKE_INFORMATION WakeInfo;
  }; /* size: 0x0048 */
  /* 0x04a0 */ struct _JOBOBJECT_WAKE_FILTER WakeFilter;
  /* 0x04a8 */ unsigned long LowEdgeLatchFilter;
  /* 0x04ac */ long Padding_576;
  /* 0x04b0 */ struct _EJOB* NotificationLink;
  /* 0x04b8 */ unsigned __int64 CurrentJobMemoryUsed;
  /* 0x04c0 */ struct _JOB_NOTIFICATION_INFORMATION* NotificationInfo;
  /* 0x04c8 */ void* NotificationInfoQuotaReference;
  /* 0x04d0 */ struct _IO_MINI_COMPLETION_PACKET_USER* NotificationPacket;
  /* 0x04d8 */ struct _JOB_CPU_RATE_CONTROL* CpuRateControl;
  /* 0x04e0 */ void* EffectiveSchedulingGroup;
  /* 0x04e8 */ unsigned __int64 ReadyTime;
  /* 0x04f0 */ struct _EX_PUSH_LOCK MemoryLimitsLock;
  /* 0x04f8 */ struct _LIST_ENTRY SiblingJobLinks;
  /* 0x0508 */ struct _LIST_ENTRY ChildJobListHead;
  /* 0x0518 */ struct _EJOB* ParentJob;
  /* 0x0520 */ struct _EJOB* volatile RootJob;
  /* 0x0528 */ struct _LIST_ENTRY IteratorListHead;
  /* 0x0538 */ unsigned __int64 AncestorCount;
  union
  {
    /* 0x0540 */ struct _EJOB** Ancestors;
    /* 0x0540 */ void* SessionObject;
  }; /* size: 0x0008 */
  /* 0x0548 */ struct _EPROCESS_VALUES Accounting;
  /* 0x05b0 */ unsigned long ShadowActiveProcessCount;
  /* 0x05b4 */ unsigned long ActiveAuxiliaryProcessCount;
  /* 0x05b8 */ unsigned long SequenceNumber;
  /* 0x05bc */ unsigned long JobId;
  /* 0x05c0 */ struct _GUID ContainerId;
  /* 0x05d0 */ struct _GUID ContainerTelemetryId;
  /* 0x05e0 */ struct _ESERVERSILO_GLOBALS* ServerSiloGlobals;
  /* 0x05e8 */ struct _PS_PROPERTY_SET PropertySet;
  /* 0x0600 */ struct _PSP_STORAGE* Storage;
  /* 0x0608 */ struct _JOB_NET_RATE_CONTROL* NetRateControl;
  union
  {
    /* 0x0610 */ unsigned long JobFlags;
    struct /* bitfield */
    {
      /* 0x0610 */ unsigned long CloseDone : 1; /* bit position: 0 */
      /* 0x0610 */ unsigned long MultiGroup : 1; /* bit position: 1 */
      /* 0x0610 */ unsigned long OutstandingNotification : 1; /* bit position: 2 */
      /* 0x0610 */ unsigned long NotificationInProgress : 1; /* bit position: 3 */
      /* 0x0610 */ unsigned long UILimits : 1; /* bit position: 4 */
      /* 0x0610 */ unsigned long CpuRateControlActive : 1; /* bit position: 5 */
      /* 0x0610 */ unsigned long OwnCpuRateControl : 1; /* bit position: 6 */
      /* 0x0610 */ unsigned long Terminating : 1; /* bit position: 7 */
      /* 0x0610 */ unsigned long WorkingSetLock : 1; /* bit position: 8 */
      /* 0x0610 */ unsigned long JobFrozen : 1; /* bit position: 9 */
      /* 0x0610 */ unsigned long Background : 1; /* bit position: 10 */
      /* 0x0610 */ unsigned long WakeNotificationAllocated : 1; /* bit position: 11 */
      /* 0x0610 */ unsigned long WakeNotificationEnabled : 1; /* bit position: 12 */
      /* 0x0610 */ unsigned long WakeNotificationPending : 1; /* bit position: 13 */
      /* 0x0610 */ unsigned long LimitNotificationRequired : 1; /* bit position: 14 */
      /* 0x0610 */ unsigned long ZeroCountNotificationRequired : 1; /* bit position: 15 */
      /* 0x0610 */ unsigned long CycleTimeNotificationRequired : 1; /* bit position: 16 */
      /* 0x0610 */ unsigned long CycleTimeNotificationPending : 1; /* bit position: 17 */
      /* 0x0610 */ unsigned long TimersVirtualized : 1; /* bit position: 18 */
      /* 0x0610 */ unsigned long JobSwapped : 1; /* bit position: 19 */
      /* 0x0610 */ unsigned long ViolationDetected : 1; /* bit position: 20 */
      /* 0x0610 */ unsigned long EmptyJobNotified : 1; /* bit position: 21 */
      /* 0x0610 */ unsigned long NoSystemCharge : 1; /* bit position: 22 */
      /* 0x0610 */ unsigned long DropNoWakeCharges : 1; /* bit position: 23 */
      /* 0x0610 */ unsigned long NoWakeChargePolicyDecided : 1; /* bit position: 24 */
      /* 0x0610 */ unsigned long NetRateControlActive : 1; /* bit position: 25 */
      /* 0x0610 */ unsigned long OwnNetRateControl : 1; /* bit position: 26 */
      /* 0x0610 */ unsigned long IoRateControlActive : 1; /* bit position: 27 */
      /* 0x0610 */ unsigned long OwnIoRateControl : 1; /* bit position: 28 */
      /* 0x0610 */ unsigned long DisallowNewProcesses : 1; /* bit position: 29 */
      /* 0x0610 */ unsigned long Silo : 1; /* bit position: 30 */
      /* 0x0610 */ unsigned long ContainerTelemetryIdSet : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x0614 */ unsigned long JobFlags2;
    struct /* bitfield */
    {
      /* 0x0614 */ unsigned long ParentLocked : 1; /* bit position: 0 */
      /* 0x0614 */ unsigned long EnableUsermodeSiloThreadImpersonation : 1; /* bit position: 1 */
      /* 0x0614 */ unsigned long DisallowUsermodeSiloThreadImpersonation : 1; /* bit position: 2 */
      /* 0x0614 */ unsigned long JobGraphicsFreezeOptimized : 1; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0618 */ struct _PROCESS_EXTENDED_ENERGY_VALUES_V1* EnergyValues;
  /* 0x0620 */ volatile unsigned __int64 SharedCommitCharge;
  /* 0x0628 */ unsigned long DiskIoAttributionUserRefCount;
  /* 0x062c */ unsigned long DiskIoAttributionRefCount;
  union
  {
    /* 0x0630 */ void* DiskIoAttributionContext;
    /* 0x0630 */ struct _EJOB* DiskIoAttributionOwnerJob;
  }; /* size: 0x0008 */
  /* 0x0638 */ struct _JOB_RATE_CONTROL_HEADER IoRateControlHeader;
  /* 0x0660 */ struct _PS_IO_CONTROL_ENTRY GlobalIoControl;
  /* 0x0698 */ volatile long IoControlStateLock;
  /* 0x069c */ long Padding_577;
  /* 0x06a0 */ struct _RTL_RB_TREE VolumeIoControlTree;
  /* 0x06b0 */ unsigned __int64 IoRateOverQuotaHistory;
  /* 0x06b8 */ unsigned long IoRateCurrentGeneration;
  /* 0x06bc */ unsigned long IoRateLastQueryGeneration;
  /* 0x06c0 */ unsigned long IoRateGenerationLength;
  /* 0x06c4 */ unsigned long IoRateOverQuotaNotifySequenceId;
  /* 0x06c8 */ unsigned __int64 LastThrottledIoTime;
  /* 0x06d0 */ struct _EX_PUSH_LOCK IoControlLock;
  /* 0x06d8 */ __int64 SiloHardReferenceCount;
  /* 0x06e0 */ struct _WORK_QUEUE_ITEM RundownWorkItem;
  /* 0x0700 */ void* PartitionObject;
  /* 0x0708 */ struct _EJOB* PartitionOwnerJob;
  /* 0x0710 */ union _JOBOBJECT_ENERGY_TRACKING_STATE EnergyTrackingState;
  /* 0x0718 */ unsigned __int64 KernelWaitTime;
  /* 0x0720 */ unsigned __int64 UserWaitTime;
} EJOB, *PEJOB; /* size: 0x0728 */

typedef struct _PEP_ACPI_SPB_I2C_RESOURCE
{
  /* 0x0000 */ struct _PEP_ACPI_SPB_RESOURCE SpbCommon;
  /* 0x0028 */ unsigned long ConnectionSpeed;
  /* 0x002c */ unsigned short SlaveAddress;
  /* 0x002e */ char __PADDING__[2];
} PEP_ACPI_SPB_I2C_RESOURCE, *PPEP_ACPI_SPB_I2C_RESOURCE; /* size: 0x0030 */

struct _JOB_NOTIFICATION_INFORMATION;

typedef struct _IO_MINI_COMPLETION_PACKET_USER
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned long PacketType;
  /* 0x0014 */ long Padding_578;
  /* 0x0018 */ void* KeyContext;
  /* 0x0020 */ void* ApcContext;
  /* 0x0028 */ long IoStatus;
  /* 0x002c */ long Padding_579;
  /* 0x0030 */ unsigned __int64 IoStatusInformation;
  /* 0x0038 */ void* MiniPacketCallback /* function */;
  /* 0x0040 */ void* Context;
  /* 0x0048 */ unsigned char Allocated;
  /* 0x0049 */ char __PADDING__[7];
} IO_MINI_COMPLETION_PACKET_USER, *PIO_MINI_COMPLETION_PACKET_USER; /* size: 0x0050 */

struct _JOB_CPU_RATE_CONTROL;

typedef struct _RTL_FEATURE_USAGE_DATA
{
  /* 0x0000 */ unsigned int FeatureId;
  /* 0x0004 */ unsigned short ReportingKind;
  /* 0x0006 */ unsigned short UsageCount;
} RTL_FEATURE_USAGE_DATA, *PRTL_FEATURE_USAGE_DATA; /* size: 0x0008 */

typedef struct _DMA_TRANSFER_INFO_V2
{
  /* 0x0000 */ unsigned long MapRegisterCount;
  /* 0x0004 */ unsigned long ScatterGatherElementCount;
  /* 0x0008 */ unsigned long ScatterGatherListSize;
  /* 0x000c */ unsigned long LogicalPageCount;
} DMA_TRANSFER_INFO_V2, *PDMA_TRANSFER_INFO_V2; /* size: 0x0010 */

typedef struct _DMA_TRANSFER_INFO
{
  /* 0x0000 */ unsigned long Version;
  union
  {
    /* 0x0004 */ struct _DMA_TRANSFER_INFO_V1 V1;
    /* 0x0004 */ struct _DMA_TRANSFER_INFO_V2 V2;
  }; /* size: 0x0010 */
} DMA_TRANSFER_INFO, *PDMA_TRANSFER_INFO; /* size: 0x0014 */

typedef struct _SEP_SILOSTATE
{
  /* 0x0000 */ struct _SEP_LOGON_SESSION_REFERENCES* SystemLogonSession;
  /* 0x0008 */ struct _SEP_LOGON_SESSION_REFERENCES* AnonymousLogonSession;
  /* 0x0010 */ void* AnonymousLogonToken;
  /* 0x0018 */ void* AnonymousLogonTokenNoEveryone;
  /* 0x0020 */ struct _UNICODE_STRING* UncSystemPaths;
  /* 0x0028 */ struct _CI_NGEN_PATHS* NgenPaths;
} SEP_SILOSTATE, *PSEP_SILOSTATE; /* size: 0x0030 */

typedef struct _SEP_RM_LSA_CONNECTION_STATE
{
  /* 0x0000 */ void* LsaProcessHandle;
  /* 0x0008 */ void* LsaCommandPortHandle;
  /* 0x0010 */ void* SepRmThreadHandle;
  /* 0x0018 */ void* RmCommandPortHandle;
  /* 0x0020 */ void* RmCommandServerPortHandle;
  /* 0x0028 */ unsigned char LsaCommandPortActive;
  /* 0x0029 */ char __PADDING__[7];
} SEP_RM_LSA_CONNECTION_STATE, *PSEP_RM_LSA_CONNECTION_STATE; /* size: 0x0030 */

typedef struct _WNF_SILODRIVERSTATE
{
  /* 0x0000 */ struct _WNF_SCOPE_MAP* ScopeMap;
  /* 0x0008 */ void* volatile PermanentNameStoreRootKey;
  /* 0x0010 */ void* volatile PersistentNameStoreRootKey;
  /* 0x0018 */ volatile __int64 PermanentNameSequenceNumber;
  /* 0x0020 */ struct _WNF_LOCK PermanentNameSequenceNumberLock;
  /* 0x0028 */ volatile __int64 PermanentNameSequenceNumberPool;
  /* 0x0030 */ volatile __int64 RuntimeNameSequenceNumber;
} WNF_SILODRIVERSTATE, *PWNF_SILODRIVERSTATE; /* size: 0x0038 */

typedef struct _DBGK_SILOSTATE
{
  /* 0x0000 */ struct _EX_PUSH_LOCK ErrorPortLock;
  /* 0x0008 */ struct _DBGKP_ERROR_PORT* ErrorPort;
  /* 0x0010 */ struct _EPROCESS* ErrorProcess;
  /* 0x0018 */ struct _KEVENT* ErrorPortRegisteredEvent;
} DBGK_SILOSTATE, *PDBGK_SILOSTATE; /* size: 0x0020 */

typedef struct _CPTABLEINFO
{
  /* 0x0000 */ unsigned short CodePage;
  /* 0x0002 */ unsigned short MaximumCharacterSize;
  /* 0x0004 */ unsigned short DefaultChar;
  /* 0x0006 */ unsigned short UniDefaultChar;
  /* 0x0008 */ unsigned short TransDefaultChar;
  /* 0x000a */ unsigned short TransUniDefaultChar;
  /* 0x000c */ unsigned short DBCSCodePage;
  /* 0x000e */ unsigned char LeadByte[12];
  /* 0x001a */ char Padding_580[6];
  /* 0x0020 */ unsigned short* MultiByteTable;
  /* 0x0028 */ void* WideCharTable;
  /* 0x0030 */ unsigned short* DBCSRanges;
  /* 0x0038 */ unsigned short* DBCSOffsets;
} CPTABLEINFO, *PCPTABLEINFO; /* size: 0x0040 */

typedef struct _RTL_NLS_STATE
{
  /* 0x0000 */ struct _CPTABLEINFO DefaultAcpTableInfo;
  /* 0x0040 */ struct _CPTABLEINFO DefaultOemTableInfo;
  /* 0x0080 */ unsigned short* ActiveCodePageData;
  /* 0x0088 */ unsigned short* OemCodePageData;
  /* 0x0090 */ unsigned short* LeadByteInfo;
  /* 0x0098 */ unsigned short* OemLeadByteInfo;
  /* 0x00a0 */ unsigned short* CaseMappingData;
  /* 0x00a8 */ unsigned short* UnicodeUpcaseTable844;
  /* 0x00b0 */ unsigned short* UnicodeLowercaseTable844;
} RTL_NLS_STATE, *PRTL_NLS_STATE; /* size: 0x00b8 */

typedef struct _CRITICAL_PROCESS_EXCEPTION_DATA
{
  /* 0x0000 */ struct _GUID ReportId;
  /* 0x0010 */ struct _UNICODE_STRING ModuleName;
  /* 0x0020 */ unsigned long ModuleTimestamp;
  /* 0x0024 */ unsigned long ModuleSize;
  /* 0x0028 */ unsigned __int64 Offset;
} CRITICAL_PROCESS_EXCEPTION_DATA, *PCRITICAL_PROCESS_EXCEPTION_DATA; /* size: 0x0030 */

typedef struct _ESERVERSILO_GLOBALS
{
  /* 0x0000 */ struct _OBP_SILODRIVERSTATE ObSiloState;
  /* 0x02e0 */ struct _SEP_SILOSTATE SeSiloState;
  /* 0x0310 */ struct _SEP_RM_LSA_CONNECTION_STATE SeRmSiloState;
  /* 0x0340 */ struct _ETW_SILODRIVERSTATE* EtwSiloState;
  /* 0x0348 */ struct _EPROCESS* PspSessionLeaderProcess;
  /* 0x0350 */ struct _EPROCESS* ExpDefaultErrorPortProcess;
  /* 0x0358 */ void* ExpDefaultErrorPort;
  /* 0x0360 */ unsigned long HardErrorState;
  /* 0x0364 */ long Padding_581;
  /* 0x0368 */ struct _EXP_LICENSE_STATE* ExpLicenseState;
  /* 0x0370 */ struct _WNF_SILODRIVERSTATE WnfSiloState;
  /* 0x03a8 */ struct _DBGK_SILOSTATE DbgkSiloState;
  /* 0x03c8 */ struct _UNICODE_STRING PsProtectedCurrentDirectory;
  /* 0x03d8 */ struct _UNICODE_STRING PsProtectedEnvironment;
  /* 0x03e8 */ void* ApiSetSection;
  /* 0x03f0 */ void* ApiSetSchema;
  /* 0x03f8 */ unsigned char OneCoreForwardersEnabled;
  /* 0x03f9 */ char Padding_582[7];
  /* 0x0400 */ struct _NLS_STATE* NlsState;
  /* 0x0408 */ struct _RTL_NLS_STATE RtlNlsState;
  /* 0x04c0 */ void* ImgFileExecOptions;
  /* 0x04c8 */ struct _EX_TIMEZONE_STATE* ExTimeZoneState;
  /* 0x04d0 */ struct _UNICODE_STRING NtSystemRoot;
  /* 0x04e0 */ struct _UNICODE_STRING SiloRootDirectoryName;
  /* 0x04f0 */ struct _PSP_STORAGE* Storage;
  /* 0x04f8 */ enum _SERVERSILO_STATE State;
  /* 0x04fc */ long ExitStatus;
  /* 0x0500 */ struct _KEVENT* DeleteEvent;
  /* 0x0508 */ struct _SILO_USER_SHARED_DATA* UserSharedData;
  /* 0x0510 */ void* UserSharedSection;
  /* 0x0518 */ struct _WORK_QUEUE_ITEM TerminateWorkItem;
  /* 0x0538 */ unsigned long ContainerBuildNumber;
  /* 0x053c */ long CriticalProcessExited;
  /* 0x0540 */ long CriticalProcessStatus;
  /* 0x0544 */ unsigned char CriticalProcessName[15];
  /* 0x0553 */ char Padding_583[5];
  /* 0x0558 */ struct _CRITICAL_PROCESS_EXCEPTION_DATA CriticalProcessExceptionData;
  /* 0x0588 */ unsigned long RtlFunctionalityCache[4];
} ESERVERSILO_GLOBALS, *PESERVERSILO_GLOBALS; /* size: 0x0598 */

typedef struct _PEP_ACPI_EXTENDED_ADDRESS
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ union _PEP_ACPI_RESOURCE_FLAGS Flags;
  /* 0x0008 */ unsigned char ResourceFlags;
  /* 0x0009 */ unsigned char GeneralFlags;
  /* 0x000a */ unsigned char TypeSpecificFlags;
  /* 0x000b */ unsigned char RevisionId;
  /* 0x000c */ unsigned char Reserved;
  /* 0x000d */ char Padding_584[3];
  /* 0x0010 */ unsigned __int64 Granularity;
  /* 0x0018 */ unsigned __int64 MinimumAddress;
  /* 0x0020 */ unsigned __int64 MaximumAddress;
  /* 0x0028 */ unsigned __int64 TranslationAddress;
  /* 0x0030 */ unsigned __int64 AddressLength;
  /* 0x0038 */ unsigned __int64 TypeAttribute;
  /* 0x0040 */ struct _UNICODE_STRING* DescriptorName;
} PEP_ACPI_EXTENDED_ADDRESS, *PPEP_ACPI_EXTENDED_ADDRESS; /* size: 0x0048 */

typedef union _HV_PARTITION_PRIVILEGE_MASK
{
  union
  {
    /* 0x0000 */ unsigned __int64 AsUINT64;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 AccessVpRunTimeReg : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 AccessPartitionReferenceCounter : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 AccessSynicRegs : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 AccessSyntheticTimerRegs : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 AccessIntrCtrlRegs : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 AccessHypercallMsrs : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 AccessVpIndex : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 AccessResetReg : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned __int64 AccessStatsReg : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 AccessPartitionReferenceTsc : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 AccessGuestIdleReg : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 AccessFrequencyRegs : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 AccessDebugRegs : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 AccessReenlightenmentControls : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned __int64 AccessRootSchedulerReg : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned __int64 AccessTscInvariantControls : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned __int64 Reserved1 : 16; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 CreatePartitions : 1; /* bit position: 32 */
      /* 0x0000 */ unsigned __int64 AccessPartitionId : 1; /* bit position: 33 */
      /* 0x0000 */ unsigned __int64 AccessMemoryPool : 1; /* bit position: 34 */
      /* 0x0000 */ unsigned __int64 AdjustMessageBuffers : 1; /* bit position: 35 */
      /* 0x0000 */ unsigned __int64 PostMessages : 1; /* bit position: 36 */
      /* 0x0000 */ unsigned __int64 SignalEvents : 1; /* bit position: 37 */
      /* 0x0000 */ unsigned __int64 CreatePort : 1; /* bit position: 38 */
      /* 0x0000 */ unsigned __int64 ConnectPort : 1; /* bit position: 39 */
      /* 0x0000 */ unsigned __int64 AccessStats : 1; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Reserved2 : 2; /* bit position: 41 */
      /* 0x0000 */ unsigned __int64 Debugging : 1; /* bit position: 43 */
      /* 0x0000 */ unsigned __int64 CpuManagement : 1; /* bit position: 44 */
      /* 0x0000 */ unsigned __int64 ConfigureProfiler : 1; /* bit position: 45 */
      /* 0x0000 */ unsigned __int64 AccessVpExitTracing : 1; /* bit position: 46 */
      /* 0x0000 */ unsigned __int64 EnableExtendedGvaRangesForFlushVirtualAddressList : 1; /* bit position: 47 */
      /* 0x0000 */ unsigned __int64 AccessVsm : 1; /* bit position: 48 */
      /* 0x0000 */ unsigned __int64 AccessVpRegisters : 1; /* bit position: 49 */
      /* 0x0000 */ unsigned __int64 UnusedBit : 1; /* bit position: 50 */
      /* 0x0000 */ unsigned __int64 FastHypercallOutput : 1; /* bit position: 51 */
      /* 0x0000 */ unsigned __int64 EnableExtendedHypercalls : 1; /* bit position: 52 */
      /* 0x0000 */ unsigned __int64 StartVirtualProcessor : 1; /* bit position: 53 */
      /* 0x0000 */ unsigned __int64 Isolation : 1; /* bit position: 54 */
      /* 0x0000 */ unsigned __int64 Reserved3 : 9; /* bit position: 55 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} HV_PARTITION_PRIVILEGE_MASK, *PHV_PARTITION_PRIVILEGE_MASK; /* size: 0x0008 */

typedef struct _HV_X64_HYPERVISOR_FEATURES
{
  /* 0x0000 */ union _HV_PARTITION_PRIVILEGE_MASK PartitionPrivileges;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned int MaxSupportedCState : 4; /* bit position: 0 */
    /* 0x0008 */ unsigned int HpetNeededForC3PowerState_Deprecated : 1; /* bit position: 4 */
    /* 0x0008 */ unsigned int InvariantMperfAvailable : 1; /* bit position: 5 */
    /* 0x0008 */ unsigned int SupervisorShadowStackAvailable : 1; /* bit position: 6 */
    /* 0x0008 */ unsigned int ArchPmuAvailable : 1; /* bit position: 7 */
    /* 0x0008 */ unsigned int ExceptionTrapInterceptAvailable : 1; /* bit position: 8 */
    /* 0x0008 */ unsigned int Reserved : 23; /* bit position: 9 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x000c */ unsigned int MwaitAvailable_Deprecated : 1; /* bit position: 0 */
    /* 0x000c */ unsigned int GuestDebuggingAvailable : 1; /* bit position: 1 */
    /* 0x000c */ unsigned int PerformanceMonitorsAvailable : 1; /* bit position: 2 */
    /* 0x000c */ unsigned int CpuDynamicPartitioningAvailable : 1; /* bit position: 3 */
    /* 0x000c */ unsigned int XmmRegistersForFastHypercallAvailable : 1; /* bit position: 4 */
    /* 0x000c */ unsigned int GuestIdleAvailable : 1; /* bit position: 5 */
    /* 0x000c */ unsigned int HypervisorSleepStateSupportAvailable : 1; /* bit position: 6 */
    /* 0x000c */ unsigned int NumaDistanceQueryAvailable : 1; /* bit position: 7 */
    /* 0x000c */ unsigned int FrequencyRegsAvailable : 1; /* bit position: 8 */
    /* 0x000c */ unsigned int SyntheticMachineCheckAvailable : 1; /* bit position: 9 */
    /* 0x000c */ unsigned int GuestCrashRegsAvailable : 1; /* bit position: 10 */
    /* 0x000c */ unsigned int DebugRegsAvailable : 1; /* bit position: 11 */
    /* 0x000c */ unsigned int Npiep1Available : 1; /* bit position: 12 */
    /* 0x000c */ unsigned int DisableHypervisorAvailable : 1; /* bit position: 13 */
    /* 0x000c */ unsigned int ExtendedGvaRangesForFlushVirtualAddressListAvailable : 1; /* bit position: 14 */
    /* 0x000c */ unsigned int FastHypercallOutputAvailable : 1; /* bit position: 15 */
    /* 0x000c */ unsigned int PasidFeaturesAvailable : 1; /* bit position: 16 */
    /* 0x000c */ unsigned int SintPollingModeAvailable : 1; /* bit position: 17 */
    /* 0x000c */ unsigned int HypercallMsrLockAvailable : 1; /* bit position: 18 */
    /* 0x000c */ unsigned int DirectSyntheticTimers : 1; /* bit position: 19 */
    /* 0x000c */ unsigned int RegisterPatAvailable : 1; /* bit position: 20 */
    /* 0x000c */ unsigned int RegisterBndcfgsAvailable : 1; /* bit position: 21 */
    /* 0x000c */ unsigned int WatchdogTimerAvailable : 1; /* bit position: 22 */
    /* 0x000c */ unsigned int SyntheticTimeUnhaltedTimerAvailable : 1; /* bit position: 23 */
    /* 0x000c */ unsigned int DeviceDomainsAvailable : 1; /* bit position: 24 */
    /* 0x000c */ unsigned int S1DeviceDomainsAvailable : 1; /* bit position: 25 */
    /* 0x000c */ unsigned int LbrAvailable : 1; /* bit position: 26 */
    /* 0x000c */ unsigned int IptAvailable : 1; /* bit position: 27 */
    /* 0x000c */ unsigned int CrossVtlFlushAvailable : 1; /* bit position: 28 */
    /* 0x000c */ unsigned int IdleSpecCtrlAvailable : 1; /* bit position: 29 */
    /* 0x000c */ unsigned int TranslateGvaFlagsAvailable : 1; /* bit position: 30 */
    /* 0x000c */ unsigned int ApicEoiInterceptAvailable : 1; /* bit position: 31 */
  }; /* bitfield */
} HV_X64_HYPERVISOR_FEATURES, *PHV_X64_HYPERVISOR_FEATURES; /* size: 0x0010 */

typedef struct _OB_HANDLE_REVOCATION_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY RevocationInfos;
  /* 0x0010 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0018 */ struct _EX_RUNDOWN_REF Rundown;
} OB_HANDLE_REVOCATION_BLOCK, *POB_HANDLE_REVOCATION_BLOCK; /* size: 0x0020 */

typedef struct _SEP_LOGON_SESSION_REFERENCES
{
  /* 0x0000 */ struct _SEP_LOGON_SESSION_REFERENCES* Next;
  /* 0x0008 */ struct _LUID LogonId;
  /* 0x0010 */ struct _LUID BuddyLogonId;
  /* 0x0018 */ __int64 ReferenceCount;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ long Padding_585;
  /* 0x0028 */ struct _DEVICE_MAP* pDeviceMap;
  /* 0x0030 */ void* Token;
  /* 0x0038 */ struct _UNICODE_STRING AccountName;
  /* 0x0048 */ struct _UNICODE_STRING AuthorityName;
  /* 0x0058 */ struct _SEP_CACHED_HANDLES_TABLE CachedHandlesTable;
  /* 0x0068 */ struct _EX_PUSH_LOCK SharedDataLock;
  /* 0x0070 */ struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION* SharedClaimAttributes;
  /* 0x0078 */ struct _SEP_SID_VALUES_BLOCK* SharedSidValues;
  /* 0x0080 */ struct _OB_HANDLE_REVOCATION_BLOCK RevocationBlock;
  /* 0x00a0 */ struct _EJOB* ServerSilo;
  /* 0x00a8 */ struct _LUID SiblingAuthId;
  /* 0x00b0 */ struct _LIST_ENTRY TokenList;
} SEP_LOGON_SESSION_REFERENCES, *PSEP_LOGON_SESSION_REFERENCES; /* size: 0x00c0 */

typedef struct _ACTIVATION_CONTEXT_STACK64
{
  /* 0x0000 */ unsigned __int64 ActiveFrame;
  /* 0x0008 */ struct LIST_ENTRY64 FrameListCache;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned long NextCookieSequenceNumber;
  /* 0x0020 */ unsigned long StackId;
  /* 0x0024 */ long __PADDING__[1];
} ACTIVATION_CONTEXT_STACK64, *PACTIVATION_CONTEXT_STACK64; /* size: 0x0028 */

typedef struct _DEVICE_MAP
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY* DosDevicesDirectory;
  /* 0x0008 */ struct _OBJECT_DIRECTORY* GlobalDosDevicesDirectory;
  /* 0x0010 */ struct _EJOB* ServerSilo;
  /* 0x0018 */ struct _DEVICE_MAP* GlobalDeviceMap;
  /* 0x0020 */ struct _EX_FAST_REF DriveObject[26];
  /* 0x00f0 */ __int64 ReferenceCount;
  /* 0x00f8 */ void* DosDevicesDirectoryHandle;
  /* 0x0100 */ unsigned long DriveMap;
  /* 0x0104 */ unsigned char DriveType[32];
  /* 0x0124 */ long __PADDING__[1];
} DEVICE_MAP, *PDEVICE_MAP; /* size: 0x0128 */

typedef struct _RTL_HASH_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY BucketLink;
  /* 0x0008 */ unsigned __int64 Key;
} RTL_HASH_ENTRY, *PRTL_HASH_ENTRY; /* size: 0x0010 */

typedef struct _OBJECT_DIRECTORY_ENTRY
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY_ENTRY* ChainLink;
  /* 0x0008 */ void* Object;
  /* 0x0010 */ unsigned long HashValue;
  /* 0x0014 */ long __PADDING__[1];
} OBJECT_DIRECTORY_ENTRY, *POBJECT_DIRECTORY_ENTRY; /* size: 0x0018 */

typedef struct _KIST_LINK_FRAME
{
  /* 0x0000 */ struct _KIST_BASE_FRAME* IstBaseFrame;
  /* 0x0008 */ unsigned long Signature;
  /* 0x000c */ unsigned long Reserved0;
  /* 0x0010 */ unsigned __int64 Reserved[2];
} KIST_LINK_FRAME, *PKIST_LINK_FRAME; /* size: 0x0020 */

typedef struct _RTL_DYNAMIC_HASH_TABLE
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long Shift;
  /* 0x0008 */ unsigned long TableSize;
  /* 0x000c */ unsigned long Pivot;
  /* 0x0010 */ unsigned long DivisorMask;
  /* 0x0014 */ unsigned long NumEntries;
  /* 0x0018 */ unsigned long NonEmptyBuckets;
  /* 0x001c */ unsigned long NumEnumerators;
  /* 0x0020 */ void* Directory;
} RTL_DYNAMIC_HASH_TABLE, *PRTL_DYNAMIC_HASH_TABLE; /* size: 0x0028 */

typedef struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION
{
  /* 0x0000 */ unsigned long DeviceGroupsCount;
  /* 0x0004 */ long Padding_586;
  /* 0x0008 */ struct _SID_AND_ATTRIBUTES* pDeviceGroups;
  /* 0x0010 */ unsigned long RestrictedDeviceGroupsCount;
  /* 0x0014 */ long Padding_587;
  /* 0x0018 */ struct _SID_AND_ATTRIBUTES* pRestrictedDeviceGroups;
  /* 0x0020 */ struct _SID_AND_ATTRIBUTES_HASH DeviceGroupsHash;
  /* 0x0130 */ struct _SID_AND_ATTRIBUTES_HASH RestrictedDeviceGroupsHash;
  /* 0x0240 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pUserSecurityAttributes;
  /* 0x0248 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pDeviceSecurityAttributes;
  /* 0x0250 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pRestrictedUserSecurityAttributes;
  /* 0x0258 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pRestrictedDeviceSecurityAttributes;
} AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION, *PAUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION; /* size: 0x0260 */

typedef struct _SID_AND_ATTRIBUTES
{
  /* 0x0000 */ void* Sid;
  /* 0x0008 */ unsigned long Attributes;
  /* 0x000c */ long __PADDING__[1];
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES; /* size: 0x0010 */

typedef struct _MI_REMOVAL_REQUESTED_PAGE
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE TreeNode;
    /* 0x0000 */ struct _LIST_ENTRY Link;
  }; /* size: 0x0018 */
  /* 0x0018 */ struct _MMPFN* Pfn;
} MI_REMOVAL_REQUESTED_PAGE, *PMI_REMOVAL_REQUESTED_PAGE; /* size: 0x0020 */

typedef union _CPU_INFO
{
  union
  {
    /* 0x0000 */ unsigned int AsUINT32[4];
    struct
    {
      /* 0x0000 */ unsigned long Eax;
      /* 0x0004 */ unsigned long Ebx;
      /* 0x0008 */ unsigned long Ecx;
      /* 0x000c */ unsigned long Edx;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} CPU_INFO, *PCPU_INFO; /* size: 0x0010 */

typedef struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
{
  /* 0x0000 */ unsigned long SecurityAttributeCount;
  /* 0x0004 */ long Padding_588;
  /* 0x0008 */ struct _LIST_ENTRY SecurityAttributesList;
  /* 0x0018 */ unsigned long WorkingSecurityAttributeCount;
  /* 0x001c */ long Padding_589;
  /* 0x0020 */ struct _LIST_ENTRY WorkingSecurityAttributesList;
} AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION, *PAUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION; /* size: 0x0030 */

typedef union _MI_AVAILABLE_PAGES_LARGE_GRANULARITY
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short SmallAvailablePages : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned short MediumFreeZeroPages : 6; /* bit position: 10 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short EntireValue;
    /* 0x0000 */ short EntireValueSigned;
    /* 0x0000 */ volatile short EntireValueVolatile;
  }; /* size: 0x0002 */
} MI_AVAILABLE_PAGES_LARGE_GRANULARITY, *PMI_AVAILABLE_PAGES_LARGE_GRANULARITY; /* size: 0x0002 */

struct _CI_NGEN_PATHS;

typedef struct _CC_VOLUME_TELEMETRY
{
  /* 0x0000 */ struct _GUID DeviceGuid;
  /* 0x0010 */ unsigned __int64 TotalDirtyPages;
  /* 0x0018 */ unsigned __int64 MaxDirtyPages;
  /* 0x0020 */ unsigned __int64 TotalDirtyPageThreshold;
  /* 0x0028 */ unsigned __int64 TopDirtyPageThreshold;
  /* 0x0030 */ unsigned __int64 BottomDirtyPageThreshold;
  /* 0x0038 */ unsigned __int64 DirtyPageSamples;
  /* 0x0040 */ unsigned __int64 TotalPagesQueuedToDisk;
  /* 0x0048 */ unsigned __int64 MaxPagesQueuedToDisk;
  /* 0x0050 */ unsigned __int64 PagesQueuedToDiskSamples;
  /* 0x0058 */ unsigned __int64 TotalLoggedPagesQueuedToDisk;
  /* 0x0060 */ unsigned __int64 MaxLoggedPagesQueuedToDisk;
  /* 0x0068 */ unsigned __int64 LoggedPagesQueuedToDiskSamples;
  /* 0x0070 */ unsigned __int64 ReadTotalBytes;
  /* 0x0078 */ unsigned __int64 ReadPagedInTotalBytes;
  /* 0x0080 */ unsigned __int64 ReadAheadTotalBytes;
  /* 0x0088 */ unsigned __int64 TotalSynchronousReadIoCount;
  /* 0x0090 */ unsigned __int64 TotalSynchronousNonBlockingReadIoCount;
  /* 0x0098 */ unsigned __int64 TotalFailedSynchronousNonBlockingReadIoCount;
  /* 0x00a0 */ unsigned __int64 TotalWrites;
  /* 0x00a8 */ unsigned __int64 TotalHardThrottleWrites;
  /* 0x00b0 */ unsigned __int64 TotalSoftThrottleWrites;
  /* 0x00b8 */ unsigned __int64 TotalLazyWriterCalls;
  /* 0x00c0 */ unsigned __int64 TotalLazyWriterLatency;
  /* 0x00c8 */ unsigned __int64 TotalLazyWriterPagesFlushed;
  /* 0x00d0 */ unsigned __int64 TotalLazyWriterAvgPagesPerSecond;
  /* 0x00d8 */ unsigned __int64 SynchronousReadIoMaxLatency;
  /* 0x00e0 */ unsigned __int64 SynchronousReadIoNonBlockingMaxLatency;
  /* 0x00e8 */ unsigned __int64 SynchronousReadIoCounts[12];
  /* 0x0148 */ unsigned __int64 SynchronousReadTotalLatency[12];
  /* 0x01a8 */ unsigned __int64 SynchronousReadNonBlockingIoCounts[12];
  /* 0x0208 */ unsigned __int64 SynchronousReadNonBlockingTotalLatency[12];
  /* 0x0268 */ unsigned __int64 TotalSynchronousWriteIoCount;
  /* 0x0270 */ unsigned __int64 TotalSynchronousNonBlockingWriteIoCount;
  /* 0x0278 */ unsigned __int64 TotalFailedSynchronousNonBlockingWriteIoCount;
  /* 0x0280 */ unsigned __int64 SynchronousWriteIoMaxLatency;
  /* 0x0288 */ unsigned __int64 SynchronousWriteIoNonBlockingMaxLatency;
  /* 0x0290 */ unsigned __int64 SynchronousWriteIoCounts[12];
  /* 0x02f0 */ unsigned __int64 SynchronousWriteTotalLatency[12];
  /* 0x0350 */ unsigned __int64 SynchronousWriteNonBlockingIoCounts[12];
  /* 0x03b0 */ unsigned __int64 SynchronousWriteNonBlockingTotalLatency[12];
  /* 0x0410 */ unsigned __int64 TotalAsynchronousReadIoCount;
  /* 0x0418 */ unsigned __int64 AsynchronousReadIoMaxLatency;
  /* 0x0420 */ unsigned __int64 AsynchronousReadIoCounts[12];
  /* 0x0480 */ unsigned __int64 AsynchronousReadTotalLatency[12];
  /* 0x04e0 */ unsigned __int64 CumulativeTotalDirtyPages;
  /* 0x04e8 */ unsigned __int64 CumulativeMaxDirtyPages;
  /* 0x04f0 */ unsigned __int64 CumulativeDirtyPageThreshold;
  /* 0x04f8 */ unsigned __int64 CumulativeTopDirtyPageThreshold;
  /* 0x0500 */ unsigned __int64 CumulativeBottomDirtyPageThreshold;
  /* 0x0508 */ unsigned __int64 CumulativeDirtyPageSamples;
  /* 0x0510 */ unsigned __int64 CumulativeTotalPagesQueuedToDisk;
  /* 0x0518 */ unsigned __int64 CumulativeMaxPagesQueuedToDisk;
  /* 0x0520 */ unsigned __int64 CumulativePagesQueuedToDiskSamples;
  /* 0x0528 */ unsigned __int64 CumulativeTotalLoggedPagesQueuedToDisk;
  /* 0x0530 */ unsigned __int64 CumulativeMaxLoggedPagesQueuedToDisk;
  /* 0x0538 */ unsigned __int64 CumulativeLoggedPagesQueuedToDiskSamples;
  /* 0x0540 */ unsigned __int64 CumulativeReadTotalBytes;
  /* 0x0548 */ unsigned __int64 CumulativeReadPagedInTotalBytes;
  /* 0x0550 */ unsigned __int64 CumulativeReadAheadTotalBytes;
  /* 0x0558 */ unsigned __int64 CumulativeTotalSynchronousReadIoCount;
  /* 0x0560 */ unsigned __int64 CumulativeTotalSynchronousNonBlockingReadIoCount;
  /* 0x0568 */ unsigned __int64 CumulativeTotalFailedSynchronousNonBlockingReadIoCount;
  /* 0x0570 */ unsigned __int64 CumulativeTotalWrites;
  /* 0x0578 */ unsigned __int64 CumulativeTotalHardThrottleWrites;
  /* 0x0580 */ unsigned __int64 CumulativeTotalSoftThrottleWrites;
  /* 0x0588 */ unsigned __int64 CumulativeLazyWriterCalls;
  /* 0x0590 */ unsigned __int64 CumulativeLazyWriterLatency;
  /* 0x0598 */ unsigned __int64 CumulativeLazyWriterPagesFlushed;
  /* 0x05a0 */ unsigned __int64 CumulativeLazyWriterAvgPagesPerSecond;
  /* 0x05a8 */ unsigned __int64 CumulativeSynchronousReadIoMaxLatency;
  /* 0x05b0 */ unsigned __int64 CumulativeSynchronousReadIoNonBlockingMaxLatency;
  /* 0x05b8 */ unsigned __int64 CumulativeSynchronousReadIoCounts[12];
  /* 0x0618 */ unsigned __int64 CumulativeSynchronousReadTotalLatency[12];
  /* 0x0678 */ unsigned __int64 CumulativeSynchronousReadNonBlockingIoCounts[12];
  /* 0x06d8 */ unsigned __int64 CumulativeSynchronousReadNonBlockingTotalLatency[12];
  /* 0x0738 */ unsigned __int64 CumulativeTotalSynchronousWriteIoCount;
  /* 0x0740 */ unsigned __int64 CumulativeTotalSynchronousNonBlockingWriteIoCount;
  /* 0x0748 */ unsigned __int64 CumulativeTotalFailedSynchronousNonBlockingWriteIoCount;
  /* 0x0750 */ unsigned __int64 CumulativeSynchronousWriteIoMaxLatency;
  /* 0x0758 */ unsigned __int64 CumulativeSynchronousWriteIoNonBlockingMaxLatency;
  /* 0x0760 */ unsigned __int64 CumulativeSynchronousWriteIoCounts[12];
  /* 0x07c0 */ unsigned __int64 CumulativeSynchronousWriteTotalLatency[12];
  /* 0x0820 */ unsigned __int64 CumulativeSynchronousWriteNonBlockingIoCounts[12];
  /* 0x0880 */ unsigned __int64 CumulativeSynchronousWriteNonBlockingTotalLatency[12];
  /* 0x08e0 */ unsigned __int64 CumulativeTotalAsynchronousReadIoCount;
  /* 0x08e8 */ unsigned __int64 CumulativeAsynchronousReadIoMaxLatency;
  /* 0x08f0 */ unsigned __int64 CumulativeAsynchronousReadIoCounts[12];
  /* 0x0950 */ unsigned __int64 CumulativeAsynchronousReadTotalLatency[12];
} CC_VOLUME_TELEMETRY, *PCC_VOLUME_TELEMETRY; /* size: 0x09b0 */

typedef struct _WHEA_AER_ROOTPORT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _WHEA_PCI_SLOT_NUMBER Slot;
  /* 0x000c */ unsigned short DeviceControl;
  /* 0x000e */ union _AER_ROOTPORT_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ unsigned long UncorrectableErrorMask;
  /* 0x0014 */ unsigned long UncorrectableErrorSeverity;
  /* 0x0018 */ unsigned long CorrectableErrorMask;
  /* 0x001c */ unsigned long AdvancedCapsAndControl;
  /* 0x0020 */ unsigned long RootErrorCommand;
} WHEA_AER_ROOTPORT_DESCRIPTOR, *PWHEA_AER_ROOTPORT_DESCRIPTOR; /* size: 0x0024 */

typedef struct _TRACE_ENABLE_INFO
{
  /* 0x0000 */ unsigned long IsEnabled;
  /* 0x0004 */ unsigned char Level;
  /* 0x0005 */ unsigned char Reserved1;
  /* 0x0006 */ unsigned short LoggerId;
  /* 0x0008 */ unsigned long EnableProperty;
  /* 0x000c */ unsigned long Reserved2;
  /* 0x0010 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0018 */ unsigned __int64 MatchAllKeyword;
} TRACE_ENABLE_INFO, *PTRACE_ENABLE_INFO; /* size: 0x0020 */

typedef struct _ETW_GUID_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY GuidList;
  /* 0x0010 */ struct _LIST_ENTRY SiloGuidList;
  /* 0x0020 */ volatile __int64 RefCount;
  /* 0x0028 */ struct _GUID Guid;
  /* 0x0038 */ struct _LIST_ENTRY RegListHead;
  /* 0x0048 */ void* SecurityDescriptor;
  union
  {
    /* 0x0050 */ struct _ETW_LAST_ENABLE_INFO LastEnable;
    /* 0x0050 */ unsigned __int64 MatchId;
  }; /* size: 0x0010 */
  /* 0x0060 */ struct _TRACE_ENABLE_INFO ProviderEnableInfo;
  /* 0x0080 */ struct _TRACE_ENABLE_INFO EnableInfo[8];
  /* 0x0180 */ struct _ETW_FILTER_HEADER* FilterData;
  /* 0x0188 */ struct _ETW_SILODRIVERSTATE* SiloState;
  /* 0x0190 */ struct _ETW_GUID_ENTRY* HostEntry;
  /* 0x0198 */ struct _EX_PUSH_LOCK Lock;
  /* 0x01a0 */ struct _ETHREAD* LockOwner;
} ETW_GUID_ENTRY, *PETW_GUID_ENTRY; /* size: 0x01a8 */

typedef struct _ETW_PRIV_HANDLE_DEMUX_TABLE
{
  /* 0x0000 */ struct _RTL_RB_TREE Tree;
  /* 0x0010 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0018 */ unsigned short SequenceNumber;
  /* 0x001a */ char __PADDING__[6];
} ETW_PRIV_HANDLE_DEMUX_TABLE, *PETW_PRIV_HANDLE_DEMUX_TABLE; /* size: 0x0020 */

typedef struct _ETW_COUNTERS
{
  /* 0x0000 */ long GuidCount;
  /* 0x0004 */ long PoolUsage[2];
  /* 0x000c */ long SessionCount;
} ETW_COUNTERS, *PETW_COUNTERS; /* size: 0x0010 */

typedef struct _ETW_SYSTEM_LOGGER_SETTINGS
{
  /* 0x0000 */ struct _ETW_SYSTEM_LOGGER EtwpSystemLogger[8];
  /* 0x0010 */ volatile unsigned long EtwpActiveSystemLoggers;
  /* 0x0014 */ struct _PERFINFO_GROUPMASK SiloGlobalGroupMask;
  /* 0x0034 */ struct _PERFINFO_GROUPMASK EtwpGroupMasks[10];
} ETW_SYSTEM_LOGGER_SETTINGS, *PETW_SYSTEM_LOGGER_SETTINGS; /* size: 0x0174 */

typedef struct _ETW_SILODRIVERSTATE
{
  /* 0x0000 */ struct _EJOB* Silo;
  /* 0x0008 */ struct _ESERVERSILO_GLOBALS* SiloGlobals;
  /* 0x0010 */ unsigned long MaxLoggers;
  /* 0x0014 */ long Padding_590;
  /* 0x0018 */ struct _ETW_GUID_ENTRY EtwpSecurityProviderGuidEntry;
  /* 0x01c0 */ struct _EX_RUNDOWN_REF_CACHE_AWARE** EtwpLoggerRundown;
  /* 0x01c8 */ struct _WMI_LOGGER_CONTEXT** EtwpLoggerContext;
  /* 0x01d0 */ struct _ETW_HASH_BUCKET EtwpGuidHashTable[64];
  /* 0x0fd0 */ unsigned short EtwpSecurityLoggers[8];
  /* 0x0fe0 */ unsigned char EtwpSecurityProviderEnableMask;
  /* 0x0fe1 */ char Padding_591[3];
  /* 0x0fe4 */ long EtwpShutdownInProgress;
  /* 0x0fe8 */ unsigned long EtwpSecurityProviderPID;
  /* 0x0fec */ long Padding_592;
  /* 0x0ff0 */ struct _ETW_PRIV_HANDLE_DEMUX_TABLE PrivHandleDemuxTable;
  /* 0x1010 */ wchar_t* RTBacklogFileRoot;
  /* 0x1018 */ struct _ETW_COUNTERS EtwpCounters;
  /* 0x1028 */ union _LARGE_INTEGER LogfileBytesWritten;
  /* 0x1030 */ struct _ETW_SILO_TRACING_BLOCK* ProcessorBlocks;
  /* 0x1038 */ struct _EX_WNF_SUBSCRIPTION* ContainerStateWnfSubscription;
  /* 0x1040 */ unsigned long ContainerStateWnfCallbackCalled;
  /* 0x1044 */ long Padding_593;
  /* 0x1048 */ struct _WORK_QUEUE_ITEM* UnsubscribeWorkItem;
  /* 0x1050 */ struct _GUID PartitionId;
  /* 0x1060 */ struct _GUID ParentId;
  /* 0x1070 */ union _LARGE_INTEGER QpcOffsetFromRoot;
  /* 0x1078 */ char* PartitionName;
  /* 0x1080 */ unsigned short PartitionNameSize;
  /* 0x1082 */ unsigned short UnusedPadding;
  /* 0x1084 */ unsigned long PartitionType;
  /* 0x1088 */ struct _ETW_SYSTEM_LOGGER_SETTINGS SystemLoggerSettings;
  /* 0x11fc */ long Padding_594;
  /* 0x1200 */ struct _KMUTANT EtwpStartTraceMutex;
} ETW_SILODRIVERSTATE, *PETW_SILODRIVERSTATE; /* size: 0x1238 */

typedef struct _KE_RCU_WORKITEM
{
  /* 0x0000 */ unsigned __int64 Placeholder[6];
} KE_RCU_WORKITEM, *PKE_RCU_WORKITEM; /* size: 0x0030 */

typedef struct _VOLUME_CACHE_MAP
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteCode;
  /* 0x0004 */ long Padding_595;
  /* 0x0008 */ __int64 UseCount;
  /* 0x0010 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0018 */ struct _LIST_ENTRY VolumeCacheMapLinks;
  /* 0x0028 */ unsigned __int64 DirtyPages;
  /* 0x0030 */ struct _LOG_HANDLE_CONTEXT LogHandleContext;
  /* 0x00c8 */ unsigned long Flags;
  /* 0x00cc */ unsigned long PagesQueuedToDisk;
  /* 0x00d0 */ unsigned long LoggedPagesQueuedToDisk;
  /* 0x00d4 */ unsigned long VolumeId;
  /* 0x00d8 */ struct _LIST_ENTRY PrivateVolumeList;
  /* 0x00e8 */ struct _CC_VOLUME_TELEMETRY VolumeTelemetry;
  /* 0x0a98 */ struct _KE_RCU_WORKITEM RcuContext;
} VOLUME_CACHE_MAP, *PVOLUME_CACHE_MAP; /* size: 0x0ac8 */

typedef struct _ETW_FILTER_HEADER
{
  /* 0x0000 */ long FilterFlags;
  /* 0x0004 */ long Padding_596;
  /* 0x0008 */ struct _ETW_FILTER_PID* PidFilter;
  /* 0x0010 */ struct _ETW_FILTER_STRING_TOKEN* ExeFilter;
  /* 0x0018 */ struct _ETW_FILTER_STRING_TOKEN* PkgIdFilter;
  /* 0x0020 */ struct _ETW_FILTER_STRING_TOKEN* PkgAppIdFilter;
  /* 0x0028 */ struct _ETW_FILTER_STRING_TOKEN* ContainerFilter;
  /* 0x0030 */ struct _ETW_PERFECT_HASH_FUNCTION* StackWalkIdFilter;
  /* 0x0038 */ struct _ETW_FILTER_EVENT_NAME_DATA* StackWalkNameFilter;
  /* 0x0040 */ struct _EVENT_FILTER_LEVEL_KW* StackWalkLevelKwFilter;
  /* 0x0048 */ struct _ETW_PERFECT_HASH_FUNCTION* EventIdFilter;
  /* 0x0050 */ struct _ETW_PAYLOAD_FILTER* PayloadFilter;
  /* 0x0058 */ struct _EVENT_FILTER_HEADER* ProviderSideFilter;
  /* 0x0060 */ struct _ETW_FILTER_EVENT_NAME_DATA* EventNameFilter;
} ETW_FILTER_HEADER, *PETW_FILTER_HEADER; /* size: 0x0068 */

typedef struct _ETW_FILTER_PID
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long Pids[8];
} ETW_FILTER_PID, *PETW_FILTER_PID; /* size: 0x0024 */

typedef struct _VACB_LEVEL_REFERENCE
{
  /* 0x0000 */ long Reference;
  /* 0x0004 */ long SpecialReference;
} VACB_LEVEL_REFERENCE, *PVACB_LEVEL_REFERENCE; /* size: 0x0008 */

typedef struct _MI_PAGING_FILE_SPACE_BITMAPS
{
  union
  {
    /* 0x0000 */ unsigned long RefCount;
    /* 0x0000 */ struct _MI_PAGING_FILE_SPACE_BITMAPS* Anchor;
  }; /* size: 0x0008 */
  /* 0x0008 */ struct _RTL_BITMAP AllocationBitmap;
  union
  {
    /* 0x0018 */ struct _RTL_BITMAP ReservationBitmap;
    /* 0x0018 */ struct _RTL_BITMAP EvictedBitmap;
  }; /* size: 0x0010 */
} MI_PAGING_FILE_SPACE_BITMAPS, *PMI_PAGING_FILE_SPACE_BITMAPS; /* size: 0x0028 */

typedef struct _CACHE_MANAGER_CALLBACKS
{
  /* 0x0000 */ void* AcquireForLazyWrite /* function */;
  /* 0x0008 */ void* ReleaseFromLazyWrite /* function */;
  /* 0x0010 */ void* AcquireForReadAhead /* function */;
  /* 0x0018 */ void* ReleaseFromReadAhead /* function */;
} CACHE_MANAGER_CALLBACKS, *PCACHE_MANAGER_CALLBACKS; /* size: 0x0020 */

struct _ETW_PERFECT_HASH_FUNCTION;

typedef struct _IOMMU_DMA_LOGICAL_ALLOCATOR_CAPABILITIES
{
  /* 0x0000 */ enum _IOMMU_DMA_LOGICAL_ALLOCATOR_CAPABILITY_EXPLICIT_ADDRESS ExplicitAddressCapable;
} IOMMU_DMA_LOGICAL_ALLOCATOR_CAPABILITIES, *PIOMMU_DMA_LOGICAL_ALLOCATOR_CAPABILITIES; /* size: 0x0004 */

typedef struct _ETW_FILTER_EVENT_NAME_DATA
{
  /* 0x0000 */ unsigned char FilterIn;
  /* 0x0001 */ unsigned char Level;
  /* 0x0002 */ char Padding_597[6];
  /* 0x0008 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0010 */ unsigned __int64 MatchAllKeyword;
  /* 0x0018 */ struct _RTL_HASH_TABLE NameTable;
} ETW_FILTER_EVENT_NAME_DATA, *PETW_FILTER_EVENT_NAME_DATA; /* size: 0x0028 */

typedef struct _NPAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE L;
} NPAGED_LOOKASIDE_LIST, *PNPAGED_LOOKASIDE_LIST; /* size: 0x0080 */

typedef struct _BITMAP_RANGE
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ __int64 BasePage;
  /* 0x0018 */ unsigned long FirstDirtyPage;
  /* 0x001c */ unsigned long LastDirtyPage;
  /* 0x0020 */ unsigned long DirtyPages;
  /* 0x0024 */ long Padding_598;
  /* 0x0028 */ unsigned long* Bitmap;
} BITMAP_RANGE, *PBITMAP_RANGE; /* size: 0x0030 */

typedef struct _AGGREGATED_PAYLOAD_FILTER
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned short MagicValue : 12; /* bit position: 0 */
    /* 0x0000 */ unsigned short DescriptorVersion : 4; /* bit position: 12 */
  }; /* bitfield */
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ unsigned short PredicateCount;
  /* 0x0006 */ unsigned short Reserved;
  /* 0x0008 */ unsigned __int64 HashedEventIdBitmap;
  /* 0x0010 */ struct _GUID ProviderGuid;
  /* 0x0020 */ unsigned short EachEventTableOffset;
  /* 0x0022 */ unsigned short EachEventTableLength;
  /* 0x0024 */ unsigned short PayloadDecoderTableOffset;
  /* 0x0026 */ unsigned short PayloadDecoderTableLength;
  /* 0x0028 */ unsigned short EventFilterTableOffset;
  /* 0x002a */ unsigned short EventFilterTableLength;
  /* 0x002c */ unsigned short UNICODEStringTableOffset;
  /* 0x002e */ unsigned short UNICODEStringTableLength;
  /* 0x0030 */ unsigned short ANSIStringTableOffset;
  /* 0x0032 */ unsigned short ANSIStringTableLength;
  /* 0x0034 */ long Padding_599;
  /* 0x0038 */ struct _EVENT_PAYLOAD_PREDICATE PredicateTable[1];
} AGGREGATED_PAYLOAD_FILTER, *PAGGREGATED_PAYLOAD_FILTER; /* size: 0x0050 */

typedef struct _ETW_PAYLOAD_FILTER
{
  /* 0x0000 */ long RefCount;
  /* 0x0004 */ long Padding_600;
  /* 0x0008 */ struct _AGGREGATED_PAYLOAD_FILTER PayloadFilter;
} ETW_PAYLOAD_FILTER, *PETW_PAYLOAD_FILTER; /* size: 0x0058 */

typedef struct _MI_STORE_MODWRITER_EXTENSION
{
  /* 0x0000 */ struct _KAPC WriteCompletionApc;
  /* 0x0058 */ unsigned long WriteRefCount;
  /* 0x005c */ unsigned long PadSpare;
  /* 0x0060 */ struct _MMPTE PagefileInfo[1];
} MI_STORE_MODWRITER_EXTENSION, *PMI_STORE_MODWRITER_EXTENSION; /* size: 0x0068 */

typedef struct _DMA_IOMMU_INTERFACE
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ long Padding_601;
  /* 0x0008 */ void* CreateDomain /* function */;
  /* 0x0010 */ void* DeleteDomain /* function */;
  /* 0x0018 */ void* AttachDevice /* function */;
  /* 0x0020 */ void* DetachDevice /* function */;
  /* 0x0028 */ void* FlushDomain /* function */;
  /* 0x0030 */ void* FlushDomainByVaList /* function */;
  /* 0x0038 */ void* QueryInputMappings /* function */;
  /* 0x0040 */ void* MapLogicalRange /* function */;
  /* 0x0048 */ void* UnmapLogicalRange /* function */;
  /* 0x0050 */ void* MapIdentityRange /* function */;
  /* 0x0058 */ void* UnmapIdentityRange /* function */;
  /* 0x0060 */ void* SetDeviceFaultReporting /* function */;
  /* 0x0068 */ void* ConfigureDomain /* function */;
} DMA_IOMMU_INTERFACE, *PDMA_IOMMU_INTERFACE; /* size: 0x0070 */

typedef struct _EVENT_FILTER_HEADER
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned char Version;
  /* 0x0003 */ unsigned char Reserved[5];
  /* 0x0008 */ unsigned __int64 InstanceId;
  /* 0x0010 */ unsigned long Size;
  /* 0x0014 */ unsigned long NextOffset;
} EVENT_FILTER_HEADER, *PEVENT_FILTER_HEADER; /* size: 0x0018 */

typedef struct _EX_RUNDOWN_REF_CACHE_AWARE
{
  /* 0x0000 */ struct _EX_RUNDOWN_REF* RunRefs;
  /* 0x0008 */ void* PoolToFree;
  /* 0x0010 */ unsigned long RunRefSize;
  /* 0x0014 */ unsigned long Number;
} EX_RUNDOWN_REF_CACHE_AWARE, *PEX_RUNDOWN_REF_CACHE_AWARE; /* size: 0x0018 */

typedef struct _DBGKD_LOAD_SYMBOLS32
{
  /* 0x0000 */ unsigned long PathNameLength;
  /* 0x0004 */ unsigned long BaseOfDll;
  /* 0x0008 */ unsigned long ProcessId;
  /* 0x000c */ unsigned long CheckSum;
  /* 0x0010 */ unsigned long SizeOfImage;
  /* 0x0014 */ unsigned char UnloadSymbols;
  /* 0x0015 */ char __PADDING__[3];
} DBGKD_LOAD_SYMBOLS32, *PDBGKD_LOAD_SYMBOLS32; /* size: 0x0018 */

typedef struct _ETW_REF_CLOCK
{
  /* 0x0000 */ union _LARGE_INTEGER StartTime;
  /* 0x0008 */ union _LARGE_INTEGER StartPerfClock;
} ETW_REF_CLOCK, *PETW_REF_CLOCK; /* size: 0x0010 */

typedef struct _DISALLOWED_GUIDS
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ char Padding_602[6];
  /* 0x0008 */ struct _GUID* Guids;
} DISALLOWED_GUIDS, *PDISALLOWED_GUIDS; /* size: 0x0010 */

typedef struct _ETW_PARTITION_CONTEXT
{
  /* 0x0000 */ struct _EPARTITION* Partition;
} ETW_PARTITION_CONTEXT, *PETW_PARTITION_CONTEXT; /* size: 0x0008 */

typedef struct _WMI_LOGGER_CONTEXT
{
  /* 0x0000 */ unsigned long LoggerId;
  /* 0x0004 */ unsigned long BufferSize;
  /* 0x0008 */ unsigned long MaximumEventSize;
  /* 0x000c */ unsigned long LoggerMode;
  /* 0x0010 */ long AcceptNewEvents;
  /* 0x0014 */ long Padding_603;
  /* 0x0018 */ unsigned __int64 GetCpuClock;
  /* 0x0020 */ struct _ETHREAD* LoggerThread;
  /* 0x0028 */ long LoggerStatus;
  /* 0x002c */ unsigned long FailureReason;
  /* 0x0030 */ struct _ETW_BUFFER_QUEUE BufferQueue;
  /* 0x0040 */ struct _ETW_BUFFER_QUEUE OverflowQueue;
  /* 0x0050 */ struct _LIST_ENTRY GlobalList;
  /* 0x0060 */ struct _LIST_ENTRY DebugIdTrackingList;
  /* 0x0070 */ struct _ETW_DECODE_CONTROL_ENTRY* DecodeControlList;
  /* 0x0078 */ unsigned long DecodeControlCount;
  /* 0x007c */ long Padding_604;
  union
  {
    /* 0x0080 */ struct _WMI_BUFFER_HEADER* BatchedBufferList;
    /* 0x0080 */ struct _EX_FAST_REF CurrentBuffer;
  }; /* size: 0x0008 */
  /* 0x0088 */ struct _UNICODE_STRING LoggerName;
  /* 0x0098 */ struct _UNICODE_STRING LogFileName;
  /* 0x00a8 */ struct _UNICODE_STRING LogFilePattern;
  /* 0x00b8 */ struct _UNICODE_STRING NewLogFileName;
  /* 0x00c8 */ unsigned long ClockType;
  /* 0x00cc */ unsigned long LastFlushedBuffer;
  /* 0x00d0 */ unsigned long FlushTimer;
  /* 0x00d4 */ unsigned long FlushThreshold;
  /* 0x00d8 */ union _LARGE_INTEGER ByteOffset;
  /* 0x00e0 */ unsigned long MinimumBuffers;
  /* 0x00e4 */ volatile long BuffersAvailable;
  /* 0x00e8 */ volatile long NumberOfBuffers;
  /* 0x00ec */ unsigned long MaximumBuffers;
  /* 0x00f0 */ volatile unsigned long EventsLost;
  /* 0x00f4 */ volatile long PeakBuffersCount;
  /* 0x00f8 */ unsigned long BuffersWritten;
  /* 0x00fc */ unsigned long LogBuffersLost;
  /* 0x0100 */ unsigned long RealTimeBuffersDelivered;
  /* 0x0104 */ unsigned long RealTimeBuffersLost;
  /* 0x0108 */ long* SequencePtr;
  /* 0x0110 */ unsigned long LocalSequence;
  /* 0x0114 */ struct _GUID InstanceGuid;
  /* 0x0124 */ unsigned long MaximumFileSize;
  /* 0x0128 */ long FileCounter;
  /* 0x012c */ enum _POOL_TYPE PoolType;
  /* 0x0130 */ struct _ETW_REF_CLOCK ReferenceTime;
  /* 0x0140 */ long CollectionOn;
  /* 0x0144 */ unsigned long ProviderInfoSize;
  /* 0x0148 */ struct _LIST_ENTRY Consumers;
  /* 0x0158 */ unsigned long NumConsumers;
  /* 0x015c */ long Padding_605;
  /* 0x0160 */ struct _ETW_REALTIME_CONSUMER* TransitionConsumer;
  /* 0x0168 */ void* RealtimeLogfileHandle;
  /* 0x0170 */ struct _UNICODE_STRING RealtimeLogfileName;
  /* 0x0180 */ union _LARGE_INTEGER RealtimeWriteOffset;
  /* 0x0188 */ union _LARGE_INTEGER RealtimeReadOffset;
  /* 0x0190 */ union _LARGE_INTEGER RealtimeLogfileSize;
  /* 0x0198 */ unsigned __int64 RealtimeLogfileUsage;
  /* 0x01a0 */ unsigned __int64 RealtimeMaximumFileSize;
  /* 0x01a8 */ unsigned long RealtimeBuffersSaved;
  /* 0x01ac */ long Padding_606;
  /* 0x01b0 */ struct _ETW_REF_CLOCK RealtimeReferenceTime;
  /* 0x01c0 */ enum _ETW_RT_EVENT_LOSS NewRTEventsLost;
  /* 0x01c4 */ long Padding_607;
  /* 0x01c8 */ struct _KEVENT LoggerEvent;
  /* 0x01e0 */ struct _KEVENT FlushEvent;
  /* 0x01f8 */ struct _KTIMER FlushTimeOutTimer;
  /* 0x0238 */ struct _KDPC LoggerDpc;
  /* 0x0278 */ struct _KMUTANT LoggerMutex;
  /* 0x02b0 */ struct _EX_PUSH_LOCK LoggerLock;
  union
  {
    /* 0x02b8 */ unsigned __int64 BufferListSpinLock;
    /* 0x02b8 */ struct _EX_PUSH_LOCK BufferListPushLock;
  }; /* size: 0x0008 */
  /* 0x02c0 */ struct _SECURITY_CLIENT_CONTEXT ClientSecurityContext;
  /* 0x0308 */ struct _TOKEN_ACCESS_INFORMATION* TokenAccessInformation;
  /* 0x0310 */ struct _EX_FAST_REF SecurityDescriptor;
  /* 0x0318 */ union _LARGE_INTEGER StartTime;
  /* 0x0320 */ void* LogFileHandle;
  /* 0x0328 */ __int64 BufferSequenceNumber;
  union
  {
    /* 0x0330 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0330 */ unsigned long Persistent : 1; /* bit position: 0 */
      /* 0x0330 */ unsigned long AutoLogger : 1; /* bit position: 1 */
      /* 0x0330 */ unsigned long FsReady : 1; /* bit position: 2 */
      /* 0x0330 */ unsigned long RealTime : 1; /* bit position: 3 */
      /* 0x0330 */ unsigned long Wow : 1; /* bit position: 4 */
      /* 0x0330 */ unsigned long KernelTrace : 1; /* bit position: 5 */
      /* 0x0330 */ unsigned long NoMoreEnable : 1; /* bit position: 6 */
      /* 0x0330 */ unsigned long StackTracing : 1; /* bit position: 7 */
      /* 0x0330 */ unsigned long ErrorLogged : 1; /* bit position: 8 */
      /* 0x0330 */ unsigned long RealtimeLoggerContextFreed : 1; /* bit position: 9 */
      /* 0x0330 */ unsigned long PebsTracing : 1; /* bit position: 10 */
      /* 0x0330 */ unsigned long PmcCounters : 1; /* bit position: 11 */
      /* 0x0330 */ unsigned long PageAlignBuffers : 1; /* bit position: 12 */
      /* 0x0330 */ unsigned long StackLookasideListAllocated : 1; /* bit position: 13 */
      /* 0x0330 */ unsigned long SecurityTrace : 1; /* bit position: 14 */
      /* 0x0330 */ unsigned long LastBranchTracing : 1; /* bit position: 15 */
      /* 0x0330 */ unsigned long SystemLoggerIndex : 8; /* bit position: 16 */
      /* 0x0330 */ unsigned long StackCaching : 1; /* bit position: 24 */
      /* 0x0330 */ unsigned long ProviderTracking : 1; /* bit position: 25 */
      /* 0x0330 */ unsigned long ProcessorTrace : 1; /* bit position: 26 */
      /* 0x0330 */ unsigned long QpcDeltaTracking : 1; /* bit position: 27 */
      /* 0x0330 */ unsigned long MarkerBufferSaved : 1; /* bit position: 28 */
      /* 0x0330 */ unsigned long LargeMdlPages : 1; /* bit position: 29 */
      /* 0x0330 */ unsigned long ExcludeKernelStack : 1; /* bit position: 30 */
      /* 0x0330 */ unsigned long BootLogger : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x0334 */ unsigned long Flags2;
    /* 0x0334 */ unsigned long UnifiedStackCaching : 1; /* bit position: 0 */
  }; /* size: 0x0004 */
  union
  {
    /* 0x0338 */ volatile unsigned long RequestFlag;
    struct /* bitfield */
    {
      /* 0x0338 */ unsigned long DbgRequestNewFile : 1; /* bit position: 0 */
      /* 0x0338 */ unsigned long DbgRequestUpdateFile : 1; /* bit position: 1 */
      /* 0x0338 */ unsigned long DbgRequestFlush : 1; /* bit position: 2 */
      /* 0x0338 */ unsigned long DbgRequestDisableRealtime : 1; /* bit position: 3 */
      /* 0x0338 */ unsigned long DbgRequestDisconnectConsumer : 1; /* bit position: 4 */
      /* 0x0338 */ unsigned long DbgRequestConnectConsumer : 1; /* bit position: 5 */
      /* 0x0338 */ unsigned long DbgRequestNotifyConsumer : 1; /* bit position: 6 */
      /* 0x0338 */ unsigned long DbgRequestUpdateHeader : 1; /* bit position: 7 */
      /* 0x0338 */ unsigned long DbgRequestDeferredFlush : 1; /* bit position: 8 */
      /* 0x0338 */ unsigned long DbgRequestDeferredFlushTimer : 1; /* bit position: 9 */
      /* 0x0338 */ unsigned long DbgRequestFlushTimer : 1; /* bit position: 10 */
      /* 0x0338 */ unsigned long DbgRequestUpdateDebugger : 1; /* bit position: 11 */
      /* 0x0338 */ unsigned long DbgSpareRequestFlags : 20; /* bit position: 12 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x033c */ long Padding_608;
  /* 0x0340 */ struct _ETW_STACK_TRACE_BLOCK StackTraceBlock;
  /* 0x0410 */ struct _RTL_BITMAP StackHookIdMap;
  /* 0x0420 */ struct _ETW_STACK_CACHE* StackCache;
  /* 0x0428 */ struct _ETW_PMC_SUPPORT* PmcData;
  /* 0x0430 */ struct _ETW_LBR_SUPPORT* LbrData;
  /* 0x0438 */ struct _ETW_IPT_SUPPORT* IptData;
  /* 0x0440 */ struct _ETW_APC_POOL ContextRegisterLoggingApcPool;
  /* 0x0500 */ volatile unsigned long ContextRegisterTypes;
  /* 0x0504 */ volatile unsigned long ContextRegisterHookCount;
  /* 0x0508 */ unsigned short ContextRegisterHookIdMap[8];
  /* 0x0518 */ struct _LIST_ENTRY BinaryTrackingList;
  /* 0x0528 */ struct _WMI_BUFFER_HEADER** ScratchArray;
  /* 0x0530 */ struct _DISALLOWED_GUIDS DisallowedGuids;
  /* 0x0540 */ struct PERIODIC_CAPTURE_STATE_CONTEXT* PeriodicCaptureStateContext;
  /* 0x0548 */ struct _ETW_SOFT_RESTART_CONTEXT* SoftRestartContext;
  /* 0x0550 */ struct _ETW_SILODRIVERSTATE* SiloState;
  /* 0x0558 */ struct _WORK_QUEUE_ITEM CompressionWorkItem;
  /* 0x0578 */ long CompressionWorkItemState;
  /* 0x057c */ long Padding_609;
  /* 0x0580 */ struct _EX_PUSH_LOCK CompressionLock;
  /* 0x0588 */ struct _WMI_BUFFER_HEADER* CompressionTarget;
  /* 0x0590 */ void* CompressionWorkspace;
  /* 0x0598 */ long CompressionOn;
  /* 0x059c */ unsigned long CompressionRatioGuess;
  /* 0x05a0 */ unsigned long PartialBufferCompressionLevel;
  /* 0x05a4 */ enum ETW_COMPRESSION_RESUMPTION_MODE CompressionResumptionMode;
  /* 0x05a8 */ struct _SINGLE_LIST_ENTRY PlaceholderList;
  /* 0x05b0 */ struct _KDPC CompressionDpc;
  /* 0x05f0 */ union _LARGE_INTEGER LastBufferSwitchTime;
  /* 0x05f8 */ union _LARGE_INTEGER BufferWriteDuration;
  /* 0x0600 */ union _LARGE_INTEGER BufferCompressDuration;
  /* 0x0608 */ __int64 ReferenceQpcDelta;
  /* 0x0610 */ struct _ETW_EVENT_CALLBACK_CONTEXT* CallbackContext;
  /* 0x0618 */ union _LARGE_INTEGER* LastDroppedTime;
  /* 0x0620 */ union _LARGE_INTEGER* FlushingLastDroppedTime;
  /* 0x0628 */ __int64 FlushingSequenceNumber;
  /* 0x0630 */ struct _ETW_PARTITION_CONTEXT PartitionContext;
  /* 0x0638 */ struct _MDL* BufferMdl;
  /* 0x0640 */ unsigned __int64* PfnArray;
  /* 0x0648 */ long __PADDING__[2];
} WMI_LOGGER_CONTEXT, *PWMI_LOGGER_CONTEXT; /* size: 0x0650 */

typedef struct _CACHE_MANAGER_CALLBACKS_EX
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ long Padding_610;
  /* 0x0008 */ struct _CACHE_MANAGER_CALLBACK_FUNCTIONS Functions;
} CACHE_MANAGER_CALLBACKS_EX, *PCACHE_MANAGER_CALLBACKS_EX; /* size: 0x0028 */

typedef struct _ETW_DECODE_CONTROL_ENTRY
{
  /* 0x0000 */ struct _ETW_DECODE_CONTROL_ENTRY* Next;
  /* 0x0008 */ struct _GUID Decode;
  /* 0x0018 */ struct _GUID Control;
  /* 0x0028 */ unsigned char ConsumersNotified;
  /* 0x0029 */ char __PADDING__[7];
} ETW_DECODE_CONTROL_ENTRY, *PETW_DECODE_CONTROL_ENTRY; /* size: 0x0030 */

typedef struct _WMI_BUFFER_HEADER
{
  /* 0x0000 */ unsigned long BufferSize;
  /* 0x0004 */ unsigned long SavedOffset;
  /* 0x0008 */ volatile unsigned long CurrentOffset;
  /* 0x000c */ volatile long ReferenceCount;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ __int64 SequenceNumber;
  union
  {
    struct /* bitfield */
    {
      /* 0x0020 */ unsigned __int64 ClockType : 3; /* bit position: 0 */
      /* 0x0020 */ unsigned __int64 Frequency : 61; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0020 */ struct _SINGLE_LIST_ENTRY SlistEntry;
    /* 0x0020 */ struct _WMI_BUFFER_HEADER* NextBuffer;
  }; /* size: 0x0008 */
  /* 0x0028 */ struct _ETW_BUFFER_CONTEXT ClientContext;
  /* 0x002c */ enum _ETW_BUFFER_STATE State;
  /* 0x0030 */ unsigned long Offset;
  /* 0x0034 */ unsigned short BufferFlag;
  /* 0x0036 */ unsigned short BufferType;
  union
  {
    /* 0x0038 */ unsigned long Padding1[4];
    /* 0x0038 */ struct _ETW_REF_CLOCK ReferenceTime;
    /* 0x0038 */ struct _LIST_ENTRY GlobalEntry;
    struct
    {
      /* 0x0038 */ void* Pointer0;
      /* 0x0040 */ void* Pointer1;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} WMI_BUFFER_HEADER, *PWMI_BUFFER_HEADER; /* size: 0x0048 */

typedef struct _X86_KTRAP_FRAME_BLUE
{
  /* 0x0000 */ unsigned long DbgEbp;
  /* 0x0004 */ unsigned long DbgEip;
  /* 0x0008 */ unsigned long DbgArgMark;
  /* 0x000c */ unsigned short TempSegCs;
  /* 0x000e */ unsigned char Logging;
  /* 0x000f */ unsigned char FrameType;
  /* 0x0010 */ unsigned long TempEsp;
  /* 0x0014 */ unsigned long Dr0;
  /* 0x0018 */ unsigned long Dr1;
  /* 0x001c */ unsigned long Dr2;
  /* 0x0020 */ unsigned long Dr3;
  /* 0x0024 */ unsigned long Dr6;
  /* 0x0028 */ unsigned long Dr7;
  /* 0x002c */ unsigned long SegGs;
  /* 0x0030 */ unsigned long SegEs;
  /* 0x0034 */ unsigned long SegDs;
  /* 0x0038 */ unsigned long Edx;
  /* 0x003c */ unsigned long Ecx;
  /* 0x0040 */ unsigned long Eax;
  /* 0x0044 */ unsigned char PreviousPreviousMode;
  /* 0x0045 */ unsigned char EntropyQueueDpc;
  /* 0x0046 */ unsigned char Reserved[2];
  /* 0x0048 */ unsigned long MxCsr;
  /* 0x004c */ unsigned long ExceptionList;
  /* 0x0050 */ unsigned long SegFs;
  /* 0x0054 */ unsigned long Edi;
  /* 0x0058 */ unsigned long Esi;
  /* 0x005c */ unsigned long Ebx;
  /* 0x0060 */ unsigned long Ebp;
  /* 0x0064 */ unsigned long ErrCode;
  /* 0x0068 */ unsigned long Eip;
  /* 0x006c */ unsigned long SegCs;
  /* 0x0070 */ unsigned long EFlags;
  /* 0x0074 */ unsigned long HardwareEsp;
  /* 0x0078 */ unsigned long HardwareSegSs;
  /* 0x007c */ unsigned long V86Es;
  /* 0x0080 */ unsigned long V86Ds;
  /* 0x0084 */ unsigned long V86Fs;
  /* 0x0088 */ unsigned long V86Gs;
} X86_KTRAP_FRAME_BLUE, *PX86_KTRAP_FRAME_BLUE; /* size: 0x008c */

typedef struct _ETW_REALTIME_CONSUMER
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ void* ProcessHandle;
  /* 0x0018 */ struct _EPROCESS* ProcessObject;
  /* 0x0020 */ void* NextNotDelivered;
  /* 0x0028 */ void* RealtimeConnectContext;
  /* 0x0030 */ struct _KEVENT* DisconnectEvent;
  /* 0x0038 */ struct _KEVENT* DataAvailableEvent;
  /* 0x0040 */ unsigned long* UserBufferCount;
  /* 0x0048 */ struct _SINGLE_LIST_ENTRY* UserBufferListHead;
  /* 0x0050 */ unsigned long BuffersLost;
  /* 0x0054 */ unsigned long EmptyBuffersCount;
  /* 0x0058 */ unsigned short LoggerId;
  union
  {
    /* 0x005a */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x005a */ unsigned char ShutDownRequested : 1; /* bit position: 0 */
      /* 0x005a */ unsigned char NewBuffersLost : 1; /* bit position: 1 */
      /* 0x005a */ unsigned char Disconnected : 1; /* bit position: 2 */
      /* 0x005a */ unsigned char Notified : 1; /* bit position: 3 */
      /* 0x005a */ unsigned char Wow : 1; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x005b */ char Padding_611[5];
  /* 0x0060 */ struct _RTL_BITMAP ReservedBufferSpaceBitMap;
  /* 0x0070 */ unsigned char* ReservedBufferSpace;
  /* 0x0078 */ unsigned long ReservedBufferSpaceSize;
  /* 0x007c */ unsigned long UserPagesAllocated;
  /* 0x0080 */ unsigned long UserPagesReused;
  /* 0x0084 */ long Padding_612;
  /* 0x0088 */ unsigned long* EventsLostCount;
  /* 0x0090 */ unsigned long* BuffersLostCount;
  /* 0x0098 */ struct _ETW_SILODRIVERSTATE* SiloState;
} ETW_REALTIME_CONSUMER, *PETW_REALTIME_CONSUMER; /* size: 0x00a0 */

typedef struct _LAZY_WRITER
{
  /* 0x0000 */ struct _KTIMER ScanTimer;
  /* 0x0040 */ unsigned char TimerInitialized;
  /* 0x0041 */ unsigned char ScanActive;
  /* 0x0042 */ unsigned char OtherWork;
  /* 0x0043 */ unsigned char PendingTeardownScan;
  /* 0x0044 */ unsigned char PendingPeriodicScan;
  /* 0x0045 */ unsigned char PendingLowMemoryScan;
  /* 0x0046 */ unsigned char PendingPowerScan;
  /* 0x0047 */ unsigned char PendingCoalescingFlushScan;
} LAZY_WRITER, *PLAZY_WRITER; /* size: 0x0048 */

typedef struct _CC_LWS_PACKET
{
  /* 0x0000 */ enum _CC_LWS_PACKET_TYPE Type;
  /* 0x0004 */ unsigned char Active;
  /* 0x0005 */ char Padding_613[3];
  union
  {
    union
    {
      /* 0x0008 */ struct _CC_PARTITION* Partition;
      /* 0x0008 */ struct _PRIVATE_VOLUME_CACHEMAP* PrivateVolumeCacheMap;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Overlay;
} CC_LWS_PACKET, *PCC_LWS_PACKET; /* size: 0x0010 */

typedef struct _CC_PARTITION
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ long Padding_614;
  /* 0x0008 */ struct _EPARTITION* PartitionObject;
  /* 0x0010 */ struct _LIST_ENTRY NumaNodeList;
  /* 0x0020 */ struct _LIST_ENTRY VolumeList;
  /* 0x0030 */ unsigned long VolumeCount;
  /* 0x0034 */ long Padding_615;
  /* 0x0038 */ struct _KEVENT LastVolumeEvent;
  /* 0x0050 */ struct _LIST_ENTRY DeletedVolumeList;
  /* 0x0060 */ struct _LIST_ENTRY DeletePVCMWorkerThreadList;
  /* 0x0070 */ struct _LIST_ENTRY DelayDeleteVolumeList;
  /* 0x0080 */ struct _CC_NUMA_NODE* NumaNodeBlock[64];
  /* 0x0280 */ struct _LIST_ENTRY CleanSharedCacheMapList;
  /* 0x0290 */ struct _LIST_ENTRY CleanSharedCacheMapWithLogHandleList;
  /* 0x02a0 */ struct _SHARED_CACHE_MAP_LIST_CURSOR DirtySharedCacheMapList;
  /* 0x02b8 */ struct _SHARED_CACHE_MAP_LIST_CURSOR LazyWriteCursor;
  /* 0x02d0 */ struct _LIST_ENTRY DirtySharedCacheMapWithLogHandleList;
  /* 0x02e0 */ long Padding_616[8];
  /* 0x0300 */ unsigned __int64 PrivateLock;
  /* 0x0308 */ unsigned long ConsecutiveWorklessLazyScanCount;
  /* 0x030c */ unsigned char ForcedDisableLazywriteScan;
  /* 0x030d */ char Padding_617[51];
  /* 0x0340 */ unsigned __int64 WorkQueueLock;
  /* 0x0348 */ unsigned long NumberWorkerThreads;
  /* 0x034c */ long Padding_618;
  /* 0x0350 */ struct _LIST_ENTRY PostTickWorkQueue;
  /* 0x0360 */ unsigned long MaxExtraWriteBehindThreads;
  /* 0x0364 */ unsigned long MaxCacheMapUninitThreads;
  /* 0x0368 */ unsigned long PostTickWorkItemCount;
  /* 0x036c */ long Padding_619;
  /* 0x0370 */ struct _KEVENT LowMemoryEvent;
  /* 0x0388 */ struct _KEVENT PowerEvent;
  /* 0x03a0 */ struct _KEVENT WaitingForTeardownEvent;
  /* 0x03b8 */ struct _KEVENT CoalescingFlushEvent;
  /* 0x03d0 */ unsigned long PagesYetToWrite;
  /* 0x03d4 */ long Padding_620;
  /* 0x03d8 */ struct _LAZY_WRITER LazyWriter;
  /* 0x0420 */ struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  /* 0x0438 */ struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;
  /* 0x0470 */ struct _WRITE_BEHIND_THROUGHPUT* ThroughputStats;
  /* 0x0478 */ unsigned __int64 AverageAvailablePages;
  /* 0x0480 */ unsigned __int64 AverageDirtyPages;
  /* 0x0488 */ unsigned __int64 PagesSkippedDueToHotSpot;
  /* 0x0490 */ struct _LIST_ENTRY DeferredWrites;
  /* 0x04a0 */ long Padding_621[8];
  /* 0x04c0 */ unsigned __int64 DeferredWriteSpinLock;
  /* 0x04c8 */ struct _EX_PUSH_LOCK AsyncReadWorkQueueLock;
  /* 0x04d0 */ struct _LIST_ENTRY VacbFreeHighPriorityList;
  /* 0x04e0 */ unsigned long NumberOfFreeHighPriorityVacbs;
  /* 0x04e4 */ long Padding_622;
  /* 0x04e8 */ struct _ETHREAD* LowPriWorkerThread;
  /* 0x04f0 */ struct _SHARED_CACHE_MAP* LowPriSharedCacheMap;
  /* 0x04f8 */ long LowPriOldCpuPriority;
  /* 0x04fc */ enum _IO_PRIORITY_HINT LowPriOldIoPriority;
  /* 0x0500 */ struct _EX_PUSH_LOCK LowPriorityWorkerThreadLock;
  /* 0x0508 */ unsigned long MaxNumberOfWriteBehindThreads;
  /* 0x050c */ unsigned char CoalescingState;
  /* 0x050d */ unsigned char ActivePartition;
  /* 0x050e */ unsigned char RundownPhase;
  /* 0x050f */ char Padding_623;
  /* 0x0510 */ __int64 RefCount;
  /* 0x0518 */ struct _KEVENT ExitEvent;
  /* 0x0530 */ struct _KEVENT FinalDereferenceEvent;
  /* 0x0548 */ void* LazyWriteScanThreadHandle;
  /* 0x0550 */ struct _CC_LWS_PACKET LWSPacket;
  /* 0x0560 */ struct _KTIMER PVCMDelayedDeleteTimer;
  /* 0x05a0 */ struct _KDPC PVCMDelayedDeleteTimerDpc;
  /* 0x05e0 */ unsigned char PVCMDelayedDeleteTimerArmed;
  /* 0x05e1 */ char Padding_624[7];
  /* 0x05e8 */ struct _WORK_QUEUE_ITEM PVCMDelayedDeleteWorkItem;
  /* 0x0608 */ long __PADDING__[14];
} CC_PARTITION, *PCC_PARTITION; /* size: 0x0640 */

typedef struct _TOKEN_PRIVILEGES
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ struct _LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES; /* size: 0x0010 */

typedef struct _ASYNC_LAZYWRITE_THREAD_STATS
{
  /* 0x0000 */ unsigned long* CurrentLoad;
} ASYNC_LAZYWRITE_THREAD_STATS, *PASYNC_LAZYWRITE_THREAD_STATS; /* size: 0x0008 */

typedef struct _CC_NUMA_NODE
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ enum _CC_NUMA_TYPE NumaNodeType;
  /* 0x0008 */ struct _CC_PARTITION* Partition;
  /* 0x0010 */ struct _PRIVATE_VOLUME_CACHEMAP* PrivateVolumeCacheMap;
  /* 0x0018 */ unsigned long NodeNumber;
  /* 0x001c */ long Padding_625;
  /* 0x0020 */ struct _LIST_ENTRY NodeList;
  /* 0x0030 */ unsigned long NumberActiveWorkerThreads;
  /* 0x0034 */ long Padding_626;
  /* 0x0038 */ struct _LIST_ENTRY IdleWorkerThreadList;
  /* 0x0048 */ struct _LIST_ENTRY FastTeardownWorkQueue;
  /* 0x0058 */ struct _LIST_ENTRY ExpressWorkQueue;
  /* 0x0068 */ struct _LIST_ENTRY RegularWorkQueue;
  /* 0x0078 */ struct _LIST_ENTRY CleanCachemapUninitWorkQueue;
  /* 0x0088 */ struct _LIST_ENTRY IdleExtraWriteBehindThreadList;
  /* 0x0098 */ unsigned long ActiveExtraWriteBehindThreads;
  /* 0x009c */ long Padding_627;
  /* 0x00a0 */ struct _LIST_ENTRY IdleCacheMapUninitThreadList;
  /* 0x00b0 */ unsigned long ActiveCacheMapUninitThreads;
  /* 0x00b4 */ unsigned long ThreadsActiveBeforeThrottle;
  /* 0x00b8 */ unsigned long ExtraWBThreadsActiveBeforeThrottle;
  /* 0x00bc */ unsigned long ExecutingWriteBehindWorkItems;
  /* 0x00c0 */ unsigned long ExecutingHighPriorityWorkItem;
  /* 0x00c4 */ unsigned char QueueThrottle;
  /* 0x00c5 */ char Padding_628[3];
  /* 0x00c8 */ long ThroughputTrend;
  /* 0x00cc */ long Padding_629;
  /* 0x00d0 */ union _LARGE_INTEGER PrevRegularQueueItemRunTime;
  /* 0x00d8 */ union _LARGE_INTEGER PrevExtraWBThreadCheckTime;
  /* 0x00e0 */ unsigned char AddExtraWriteBehindThreads;
  /* 0x00e1 */ unsigned char RemoveExtraThreadPending;
  /* 0x00e2 */ char Padding_630[6];
  /* 0x00e8 */ struct _LIST_ENTRY* IdleAsyncReadWorkerThreadList;
  /* 0x00f0 */ unsigned long* NumberActiveAsyncReadWorkerThreads;
  /* 0x00f8 */ unsigned long* NumberActiveCompleteAsyncReadWorkItems;
  /* 0x0100 */ struct _LIST_ENTRY* AsyncReadWorkQueue;
  /* 0x0108 */ struct _LIST_ENTRY* AsyncReadCompletionWorkQueue;
  /* 0x0110 */ struct _KEVENT* NewAsyncReadRequestEvent;
  /* 0x0118 */ struct _ASYNC_READ_THREAD_STATS* ReaderThreadsStats;
  /* 0x0120 */ struct _LIST_ENTRY IdleAsyncLazywriteWorkerThreadList;
  /* 0x0130 */ unsigned long NumberActiveAsyncLazywriteWorkerThreads;
  /* 0x0134 */ long Padding_631;
  /* 0x0138 */ struct _LIST_ENTRY AsyncLazywriteWorkQueue;
  /* 0x0148 */ struct _KEVENT NewAsyncLazywriteRequestEvent;
  /* 0x0160 */ struct _ASYNC_LAZYWRITE_THREAD_STATS LazywriterThreadsStats;
  /* 0x0168 */ struct _LIST_ENTRY IdleCompleteAsyncLazywriteWorkerThreadList;
  /* 0x0178 */ unsigned long NumberActiveCompleteAsyncLazywriteWorkers;
  /* 0x017c */ long Padding_632;
  /* 0x0180 */ struct _LIST_ENTRY AsyncLazywriteCompletionWorkQueue;
} CC_NUMA_NODE, *PCC_NUMA_NODE; /* size: 0x0190 */

typedef struct _IO_APIC_REGISTERS
{
  /* 0x0000 */ volatile unsigned long RegisterIndex;
  /* 0x0004 */ volatile unsigned long Reserved1[3];
  /* 0x0010 */ volatile unsigned long RegisterValue;
  /* 0x0014 */ volatile unsigned long Reserved2[11];
  /* 0x0040 */ volatile unsigned long EndOfInterrupt;
} IO_APIC_REGISTERS, *PIO_APIC_REGISTERS; /* size: 0x0044 */

struct _ETW_STACK_CACHE;

typedef struct _ETW_PMC_SUPPORT
{
  /* 0x0000 */ enum _KPROFILE_SOURCE* Source;
  /* 0x0008 */ volatile unsigned long HookIdCount;
  /* 0x000c */ unsigned short HookId[4];
  /* 0x0014 */ volatile unsigned long CountersCount;
  /* 0x0018 */ struct _HAL_PMC_COUNTERS* ProcessorCtrs[1];
} ETW_PMC_SUPPORT, *PETW_PMC_SUPPORT; /* size: 0x0020 */

struct _HAL_PMC_COUNTERS;

typedef struct _ETW_LBR_SUPPORT
{
  /* 0x0000 */ unsigned long LbrHandle;
  /* 0x0004 */ volatile unsigned long LbrOptions;
  /* 0x0008 */ volatile unsigned long HookIdCount;
  /* 0x000c */ unsigned short HookId[4];
} ETW_LBR_SUPPORT, *PETW_LBR_SUPPORT; /* size: 0x0014 */

typedef struct _PEP_ACPI_IO_MEMORY_RESOURCE
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ unsigned char Information;
  /* 0x0005 */ char Padding_633[3];
  /* 0x0008 */ union _LARGE_INTEGER MinimumAddress;
  /* 0x0010 */ union _LARGE_INTEGER MaximumAddress;
  /* 0x0018 */ unsigned long Alignment;
  /* 0x001c */ unsigned long Length;
} PEP_ACPI_IO_MEMORY_RESOURCE, *PPEP_ACPI_IO_MEMORY_RESOURCE; /* size: 0x0020 */

typedef struct _PEP_ACPI_INTERRUPT_RESOURCE
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ enum _KINTERRUPT_MODE InterruptType;
  /* 0x0008 */ enum _KINTERRUPT_POLARITY InterruptPolarity;
  /* 0x000c */ union _PEP_ACPI_RESOURCE_FLAGS Flags;
  /* 0x0010 */ unsigned char Count;
  /* 0x0011 */ char Padding_634[7];
  /* 0x0018 */ unsigned long* Pins;
} PEP_ACPI_INTERRUPT_RESOURCE, *PPEP_ACPI_INTERRUPT_RESOURCE; /* size: 0x0020 */

typedef union _PEP_ACPI_RESOURCE
{
  union
  {
    /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
    /* 0x0000 */ struct _PEP_ACPI_IO_MEMORY_RESOURCE IoMemory;
    /* 0x0000 */ struct _PEP_ACPI_INTERRUPT_RESOURCE Interrupt;
    /* 0x0000 */ struct _PEP_ACPI_GPIO_RESOURCE Gpio;
    /* 0x0000 */ struct _PEP_ACPI_SPB_I2C_RESOURCE SpbI2c;
    /* 0x0000 */ struct _PEP_ACPI_SPB_SPI_RESOURCE SpbSpi;
    /* 0x0000 */ struct _PEP_ACPI_SPB_UART_RESOURCE SpbUart;
    /* 0x0000 */ struct _PEP_ACPI_EXTENDED_ADDRESS ExtendedAddress;
  }; /* size: 0x0048 */
} PEP_ACPI_RESOURCE, *PPEP_ACPI_RESOURCE; /* size: 0x0048 */

typedef struct _HEAP_LFH_BLOCK_SLIST
{
  /* 0x0000 */ unsigned short Next;
} HEAP_LFH_BLOCK_SLIST, *PHEAP_LFH_BLOCK_SLIST; /* size: 0x0002 */

typedef union _HEAP_LFH_BLOCK_LIST
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short Next;
      /* 0x0002 */ unsigned short Count;
    }; /* size: 0x0004 */
    /* 0x0000 */ struct _HEAP_LFH_BLOCK_SLIST SList;
    /* 0x0000 */ unsigned long ListFields;
  }; /* size: 0x0004 */
} HEAP_LFH_BLOCK_LIST, *PHEAP_LFH_BLOCK_LIST; /* size: 0x0004 */

typedef struct _ETW_IPT_SUPPORT
{
  /* 0x0000 */ void* IptHandle;
  /* 0x0008 */ unsigned __int64 IptOption;
  /* 0x0010 */ struct _ETW_HW_TRACE_EXT_INTERFACE* EtwHwTraceExtInterface;
  /* 0x0018 */ volatile unsigned long HookIdCount;
  /* 0x001c */ unsigned short HookId[4];
  /* 0x0024 */ long __PADDING__[1];
} ETW_IPT_SUPPORT, *PETW_IPT_SUPPORT; /* size: 0x0028 */

typedef struct _ETW_HW_TRACE_EXT_INTERFACE
{
  /* 0x0000 */ void* StartProcessorTraceOnEachCore /* function */;
  /* 0x0008 */ void* StopProcessorTraceOnEachCore /* function */;
  /* 0x0010 */ void* LogProcessorTraceOnCurrentCore /* function */;
} ETW_HW_TRACE_EXT_INTERFACE, *PETW_HW_TRACE_EXT_INTERFACE; /* size: 0x0018 */

typedef struct _DEVICE_DSM_DEFINITION
{
  /* 0x0000 */ unsigned long Action;
  /* 0x0004 */ unsigned char SingleRange;
  /* 0x0005 */ char Padding_635[3];
  /* 0x0008 */ unsigned long ParameterBlockAlignment;
  /* 0x000c */ unsigned long ParameterBlockLength;
  /* 0x0010 */ unsigned char HasOutput;
  /* 0x0011 */ char Padding_636[3];
  /* 0x0014 */ unsigned long OutputBlockAlignment;
  /* 0x0018 */ unsigned long OutputBlockLength;
} DEVICE_DSM_DEFINITION, *PDEVICE_DSM_DEFINITION; /* size: 0x001c */

typedef union _HEAP_LFH_SUBSEGMENT_STATE
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short DelayFreeList;
      /* 0x0002 */ unsigned short DelayFreeCount;
      /* 0x0004 */ unsigned short Owner;
      /* 0x0006 */ unsigned char Location;
    }; /* size: 0x0007 */
    struct
    {
      /* 0x0000 */ long DelayFreeFields;
      /* 0x0004 */ long OwnerLocation;
    }; /* size: 0x0008 */
    /* 0x0000 */ union _HEAP_LFH_BLOCK_LIST FreeList;
    /* 0x0000 */ void* AllBits;
  }; /* size: 0x0008 */
} HEAP_LFH_SUBSEGMENT_STATE, *PHEAP_LFH_SUBSEGMENT_STATE; /* size: 0x0008 */

typedef union _HEAP_LFH_UNUSED_BYTES_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UnusedBytes : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned short Spare : 4; /* bit position: 10 */
      /* 0x0000 */ unsigned short ExtraPresent : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned short OneByteUnused : 1; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short UnusedBytesUShort;
  }; /* size: 0x0002 */
} HEAP_LFH_UNUSED_BYTES_INFO, *PHEAP_LFH_UNUSED_BYTES_INFO; /* size: 0x0002 */

typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long Action;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long ParameterBlockOffset;
  /* 0x0010 */ unsigned long ParameterBlockLength;
  /* 0x0014 */ unsigned long DataSetRangesOffset;
  /* 0x0018 */ unsigned long DataSetRangesLength;
} DEVICE_MANAGE_DATA_SET_ATTRIBUTES, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES; /* size: 0x001c */

typedef union _HEAP_LFH_THREAD_DATA
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short SlotMapRef;
      /* 0x0002 */ unsigned short HeatMapRef;
      /* 0x0004 */ unsigned char CachedProcIndex;
      /* 0x0005 */ unsigned char ContentionRemapCount;
      /* 0x0006 */ unsigned short Spare;
    }; /* size: 0x0008 */
    /* 0x0000 */ void* AllBits;
  }; /* size: 0x0008 */
} HEAP_LFH_THREAD_DATA, *PHEAP_LFH_THREAD_DATA; /* size: 0x0008 */

typedef struct _PERIODIC_CAPTURE_STATE_GUIDS
{
  /* 0x0000 */ unsigned short ProviderCount;
  /* 0x0002 */ char Padding_637[6];
  /* 0x0008 */ struct _GUID* Providers;
} PERIODIC_CAPTURE_STATE_GUIDS, *PPERIODIC_CAPTURE_STATE_GUIDS; /* size: 0x0010 */

struct PERIODIC_CAPTURE_STATE_CONTEXT
{
  /* 0x0000 */ __int64 RelativeTimerDueTime;
  /* 0x0008 */ struct _EX_TIMER* Timer;
  /* 0x0010 */ struct _PERIODIC_CAPTURE_STATE_GUIDS Guids;
  /* 0x0020 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0040 */ enum _ETW_PERIODIC_TIMER_STATE TimerState;
  /* 0x0044 */ long __PADDING__[1];
}; /* size: 0x0048 */

struct _EX_TIMER;

struct _ETW_SOFT_RESTART_CONTEXT;

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_638;
  /* 0x0008 */ struct _PROCESSOR_PLATFORM_STATE_RESIDENCY States[1];
} PROCESSOR_PLATFORM_STATE_RESIDENCIES, *PPROCESSOR_PLATFORM_STATE_RESIDENCIES; /* size: 0x0018 */

struct _ETW_EVENT_CALLBACK_CONTEXT;

typedef struct _PPM_PLATFORM_STATES
{
  /* 0x0000 */ unsigned long StateCount;
  /* 0x0004 */ unsigned long ProcessorCount;
  /* 0x0008 */ unsigned char CoordinatedInterface;
  /* 0x0009 */ char Padding_639[7];
  /* 0x0010 */ void* IdleTest /* function */;
  /* 0x0018 */ void* IdlePreExecute /* function */;
  /* 0x0020 */ void* IdleComplete /* function */;
  /* 0x0028 */ void* QueryPlatformStateResidency /* function */;
  /* 0x0030 */ struct _PLATFORM_IDLE_ACCOUNTING* Accounting;
  /* 0x0038 */ enum _PPM_DEEP_SLEEP_STATE DeepSleepState;
  /* 0x003c */ long Padding_640;
  /* 0x0040 */ struct _PPM_PLATFORM_STATE State[1];
} PPM_PLATFORM_STATES, *PPPM_PLATFORM_STATES; /* size: 0x0200 */

typedef struct _EPARTITION
{
  /* 0x0000 */ void* MmPartition;
  /* 0x0008 */ void* CcPartition;
  /* 0x0010 */ void* ExPartition;
  /* 0x0018 */ void* SmPartition;
  /* 0x0020 */ void* PfPartition;
  /* 0x0028 */ __int64 HardReferenceCount;
  /* 0x0030 */ __int64 OpenHandleCount;
  /* 0x0038 */ struct _LIST_ENTRY ActivePartitionLinks;
  /* 0x0048 */ struct _EPARTITION* ParentPartition;
  /* 0x0050 */ struct _WORK_QUEUE_ITEM TeardownWorkItem;
  /* 0x0070 */ struct _EX_PUSH_LOCK TeardownLock;
  /* 0x0078 */ struct _EPROCESS* SystemProcess;
  /* 0x0080 */ void* SystemProcessHandle;
  union
  {
    /* 0x0088 */ unsigned long PartitionFlags;
    /* 0x0088 */ unsigned long PairedWithJob : 1; /* bit position: 0 */
  }; /* size: 0x0004 */
  /* 0x008c */ long __PADDING__[1];
} EPARTITION, *PEPARTITION; /* size: 0x0090 */

typedef struct _HEAP_SEGMENT
{
  /* 0x0000 */ struct _HEAP_ENTRY Entry;
  /* 0x0010 */ unsigned long SegmentSignature;
  /* 0x0014 */ unsigned long SegmentFlags;
  /* 0x0018 */ struct _LIST_ENTRY SegmentListEntry;
  /* 0x0028 */ struct _HEAP* Heap;
  /* 0x0030 */ void* BaseAddress;
  /* 0x0038 */ unsigned long NumberOfPages;
  /* 0x003c */ long Padding_641;
  /* 0x0040 */ struct _HEAP_ENTRY* FirstEntry;
  /* 0x0048 */ struct _HEAP_ENTRY* LastValidEntry;
  /* 0x0050 */ unsigned long NumberOfUnCommittedPages;
  /* 0x0054 */ unsigned long NumberOfUnCommittedRanges;
  /* 0x0058 */ unsigned short SegmentAllocatorBackTraceIndex;
  /* 0x005a */ unsigned short Reserved;
  /* 0x005c */ long Padding_642;
  /* 0x0060 */ struct _LIST_ENTRY UCRSegmentList;
} HEAP_SEGMENT, *PHEAP_SEGMENT; /* size: 0x0070 */

typedef struct _HEAP_COUNTERS
{
  /* 0x0000 */ unsigned __int64 TotalMemoryReserved;
  /* 0x0008 */ unsigned __int64 TotalMemoryCommitted;
  /* 0x0010 */ unsigned __int64 TotalMemoryLargeUCR;
  /* 0x0018 */ unsigned __int64 TotalSizeInVirtualBlocks;
  /* 0x0020 */ unsigned long TotalSegments;
  /* 0x0024 */ unsigned long TotalUCRs;
  /* 0x0028 */ unsigned long CommittOps;
  /* 0x002c */ unsigned long DeCommitOps;
  /* 0x0030 */ unsigned long LockAcquires;
  /* 0x0034 */ unsigned long LockCollisions;
  /* 0x0038 */ unsigned long CommitRate;
  /* 0x003c */ unsigned long DecommittRate;
  /* 0x0040 */ unsigned long CommitFailures;
  /* 0x0044 */ unsigned long InBlockCommitFailures;
  /* 0x0048 */ unsigned long PollIntervalCounter;
  /* 0x004c */ unsigned long DecommitsSinceLastCheck;
  /* 0x0050 */ unsigned long HeapPollInterval;
  /* 0x0054 */ unsigned long AllocAndFreeOps;
  /* 0x0058 */ unsigned long AllocationIndicesActive;
  /* 0x005c */ unsigned long InBlockDeccommits;
  /* 0x0060 */ unsigned __int64 InBlockDeccomitSize;
  /* 0x0068 */ unsigned __int64 HighWatermarkSize;
  /* 0x0070 */ unsigned __int64 LastPolledSize;
} HEAP_COUNTERS, *PHEAP_COUNTERS; /* size: 0x0078 */

typedef struct _HEAP_TUNING_PARAMETERS
{
  /* 0x0000 */ unsigned long CommittThresholdShift;
  /* 0x0004 */ long Padding_643;
  /* 0x0008 */ unsigned __int64 MaxPreCommittThreshold;
} HEAP_TUNING_PARAMETERS, *PHEAP_TUNING_PARAMETERS; /* size: 0x0010 */

typedef struct _HEAP
{
  union
  {
    /* 0x0000 */ struct _HEAP_SEGMENT Segment;
    struct
    {
      /* 0x0000 */ struct _HEAP_ENTRY Entry;
      /* 0x0010 */ unsigned long SegmentSignature;
      /* 0x0014 */ unsigned long SegmentFlags;
      /* 0x0018 */ struct _LIST_ENTRY SegmentListEntry;
      /* 0x0028 */ struct _HEAP* Heap;
      /* 0x0030 */ void* BaseAddress;
      /* 0x0038 */ unsigned long NumberOfPages;
      /* 0x003c */ long Padding_644;
      /* 0x0040 */ struct _HEAP_ENTRY* FirstEntry;
      /* 0x0048 */ struct _HEAP_ENTRY* LastValidEntry;
      /* 0x0050 */ unsigned long NumberOfUnCommittedPages;
      /* 0x0054 */ unsigned long NumberOfUnCommittedRanges;
      /* 0x0058 */ unsigned short SegmentAllocatorBackTraceIndex;
      /* 0x005a */ unsigned short Reserved;
      /* 0x005c */ long Padding_645;
      /* 0x0060 */ struct _LIST_ENTRY UCRSegmentList;
    }; /* size: 0x0068 */
  }; /* size: 0x0070 */
  /* 0x0070 */ unsigned long Flags;
  /* 0x0074 */ unsigned long ForceFlags;
  /* 0x0078 */ unsigned long CompatibilityFlags;
  /* 0x007c */ unsigned long EncodeFlagMask;
  /* 0x0080 */ struct _HEAP_ENTRY Encoding;
  /* 0x0090 */ unsigned long Interceptor;
  /* 0x0094 */ unsigned long VirtualMemoryThreshold;
  /* 0x0098 */ unsigned long Signature;
  /* 0x009c */ long Padding_646;
  /* 0x00a0 */ unsigned __int64 SegmentReserve;
  /* 0x00a8 */ unsigned __int64 SegmentCommit;
  /* 0x00b0 */ unsigned __int64 DeCommitFreeBlockThreshold;
  /* 0x00b8 */ unsigned __int64 DeCommitTotalFreeThreshold;
  /* 0x00c0 */ unsigned __int64 TotalFreeSize;
  /* 0x00c8 */ unsigned __int64 MaximumAllocationSize;
  /* 0x00d0 */ unsigned short ProcessHeapsListIndex;
  /* 0x00d2 */ unsigned short HeaderValidateLength;
  /* 0x00d4 */ long Padding_647;
  /* 0x00d8 */ void* HeaderValidateCopy;
  /* 0x00e0 */ unsigned short NextAvailableTagIndex;
  /* 0x00e2 */ unsigned short MaximumTagIndex;
  /* 0x00e4 */ long Padding_648;
  /* 0x00e8 */ struct _HEAP_TAG_ENTRY* TagEntries;
  /* 0x00f0 */ struct _LIST_ENTRY UCRList;
  /* 0x0100 */ unsigned __int64 AlignRound;
  /* 0x0108 */ unsigned __int64 AlignMask;
  /* 0x0110 */ struct _LIST_ENTRY VirtualAllocdBlocks;
  /* 0x0120 */ struct _LIST_ENTRY SegmentList;
  /* 0x0130 */ unsigned short AllocatorBackTraceIndex;
  /* 0x0132 */ char Padding_649[2];
  /* 0x0134 */ unsigned long NonDedicatedListLength;
  /* 0x0138 */ void* BlocksIndex;
  /* 0x0140 */ void* UCRIndex;
  /* 0x0148 */ struct _HEAP_PSEUDO_TAG_ENTRY* PseudoTagEntries;
  /* 0x0150 */ struct _LIST_ENTRY FreeLists;
  /* 0x0160 */ struct _HEAP_LOCK* LockVariable;
  /* 0x0168 */ void* CommitRoutine /* function */;
  /* 0x0170 */ union _RTL_RUN_ONCE StackTraceInitVar;
  /* 0x0178 */ struct _RTLP_HEAP_COMMIT_LIMIT_DATA CommitLimitData;
  /* 0x0188 */ void* UserContext;
  /* 0x0190 */ unsigned __int64 Spare;
  /* 0x0198 */ void* FrontEndHeap;
  /* 0x01a0 */ unsigned short FrontHeapLockCount;
  /* 0x01a2 */ unsigned char FrontEndHeapType;
  /* 0x01a3 */ unsigned char RequestedFrontEndHeapType;
  /* 0x01a4 */ long Padding_650;
  /* 0x01a8 */ unsigned short* FrontEndHeapUsageData;
  /* 0x01b0 */ unsigned short FrontEndHeapMaximumIndex;
  /* 0x01b2 */ volatile unsigned char FrontEndHeapStatusBitmap[129];
  union
  {
    /* 0x0233 */ unsigned char ReadOnly : 1; /* bit position: 0 */
    /* 0x0233 */ unsigned char InternalFlags;
  }; /* size: 0x0001 */
  /* 0x0234 */ long Padding_651;
  /* 0x0238 */ struct _HEAP_COUNTERS Counters;
  /* 0x02b0 */ struct _HEAP_TUNING_PARAMETERS TuningParameters;
} HEAP, *PHEAP; /* size: 0x02c0 */

typedef struct _RELATIVE_SYMLINK_INFO
{
  /* 0x0000 */ unsigned short ExposedNamespaceLength;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned short DeviceNameLength;
  /* 0x0006 */ unsigned short Reserved;
  /* 0x0008 */ struct _RELATIVE_SYMLINK_INFO* InteriorMountPoint;
  /* 0x0010 */ struct _UNICODE_STRING OpenedName;
} RELATIVE_SYMLINK_INFO, *PRELATIVE_SYMLINK_INFO; /* size: 0x0020 */

typedef struct _ETW_SILO_TRACING_BLOCK
{
  /* 0x0000 */ struct _EX_FAST_REF* ProcessorBuffers;
  /* 0x0008 */ unsigned __int64* EventsLoggedCount;
  /* 0x0010 */ __int64* QpcDelta;
  /* 0x0018 */ long __PADDING__[10];
} ETW_SILO_TRACING_BLOCK, *PETW_SILO_TRACING_BLOCK; /* size: 0x0040 */

struct _EX_WNF_SUBSCRIPTION;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned long BaseOfData;
  /* 0x001c */ unsigned long BaseOfBss;
  /* 0x0020 */ unsigned long GprMask;
  /* 0x0024 */ unsigned long CprMask[4];
  /* 0x0034 */ unsigned long GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER; /* size: 0x0038 */

typedef struct _WNF_SUBSCRIPTION
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ long Padding_652;
  /* 0x0008 */ struct _EX_RUNDOWN_REF RunRef;
  /* 0x0010 */ unsigned __int64 SubscriptionId;
  /* 0x0018 */ struct _LIST_ENTRY ProcessSubscriptionListEntry;
  /* 0x0028 */ struct _EPROCESS* Process;
  /* 0x0030 */ struct _WNF_NAME_INSTANCE* NameInstance;
  /* 0x0038 */ struct _WNF_STATE_NAME_STRUCT StateName;
  /* 0x0040 */ struct _LIST_ENTRY StateSubscriptionListEntry;
  /* 0x0050 */ unsigned __int64 CallbackRoutine;
  /* 0x0058 */ void* CallbackContext;
  /* 0x0060 */ unsigned long CurrentChangeStamp;
  /* 0x0064 */ unsigned long SubscribedEventSet;
  /* 0x0068 */ struct _LIST_ENTRY PendingSubscriptionListEntry;
  /* 0x0078 */ enum _WNF_SUBSCRIPTION_STATE SubscriptionState;
  /* 0x007c */ unsigned long SignaledEventSet;
  /* 0x0080 */ unsigned long InDeliveryEventSet;
  /* 0x0084 */ long __PADDING__[1];
} WNF_SUBSCRIPTION, *PWNF_SUBSCRIPTION; /* size: 0x0088 */

typedef struct _HAL_NODE_RANGE
{
  /* 0x0000 */ unsigned __int64 PageFrameIndex;
  /* 0x0008 */ unsigned long Node;
  /* 0x000c */ long __PADDING__[1];
} HAL_NODE_RANGE, *PHAL_NODE_RANGE; /* size: 0x0010 */

struct _EXP_LICENSE_STATE;

typedef struct _HAL_HV_DMA_DOMAIN_CONFIG_X64
{
  /* 0x0000 */ union _LARGE_INTEGER FirstLevelPageTableRoot;
  /* 0x0008 */ unsigned char TranslationEnabled;
  /* 0x0009 */ unsigned char Blocked;
  /* 0x000a */ char __PADDING__[6];
} HAL_HV_DMA_DOMAIN_CONFIG_X64, *PHAL_HV_DMA_DOMAIN_CONFIG_X64; /* size: 0x0010 */

typedef struct _WNF_SCOPE_MAP_ENTRY
{
  /* 0x0000 */ struct _WNF_LOCK MapEntryLock;
  /* 0x0008 */ struct _LIST_ENTRY MapEntryHead;
} WNF_SCOPE_MAP_ENTRY, *PWNF_SCOPE_MAP_ENTRY; /* size: 0x0018 */

typedef struct _WNF_SCOPE_MAP
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ long Padding_653;
  /* 0x0008 */ struct _WNF_SCOPE_INSTANCE* SystemScopeInstance;
  /* 0x0010 */ struct _WNF_SCOPE_INSTANCE* MachineScopeInstance;
  /* 0x0018 */ struct _WNF_SCOPE_INSTANCE* PhysicalMachineScopeInstance;
  /* 0x0020 */ struct _WNF_SCOPE_MAP_ENTRY ByDataScope[6];
} WNF_SCOPE_MAP, *PWNF_SCOPE_MAP; /* size: 0x00b0 */

typedef struct _MI_DYNAMIC_BITMAP
{
  /* 0x0000 */ struct _RTL_BITMAP_EX Bitmap;
  /* 0x0010 */ unsigned __int64 MaximumSize;
  /* 0x0018 */ unsigned __int64 Hint;
  /* 0x0020 */ void* BaseVa;
  /* 0x0028 */ unsigned __int64 SizeTopDown;
  /* 0x0030 */ unsigned __int64 HintTopDown;
  /* 0x0038 */ void* BaseVaTopDown;
  /* 0x0040 */ volatile long SpinLock;
  /* 0x0044 */ long __PADDING__[1];
} MI_DYNAMIC_BITMAP, *PMI_DYNAMIC_BITMAP; /* size: 0x0048 */

typedef struct _MI_CACHE_LINE
{
  union
  {
    struct
    {
      /* 0x0000 */ void* UniqueCacheLine[8];
    } /* size: 0x0040 */ u1;
    struct
    {
      struct
      {
        /* 0x0000 */ struct _LIST_ENTRY Links;
        /* 0x0010 */ volatile unsigned long Signaled;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0018 */ u2;
      /* 0x0018 */ long __PADDING__[10];
    }; /* size: 0x0040 */
  }; /* size: 0x0040 */
} MI_CACHE_LINE, *PMI_CACHE_LINE; /* size: 0x0040 */

typedef struct _MI_WORKING_SET_LOCK_ARRAY
{
  union
  {
    /* 0x0000 */ volatile long Lock;
    /* 0x0000 */ struct _MI_CACHE_LINE CacheLinePadding;
  }; /* size: 0x0040 */
} MI_WORKING_SET_LOCK_ARRAY, *PMI_WORKING_SET_LOCK_ARRAY; /* size: 0x0040 */

typedef struct _MI_SYSTEM_VA_STATE
{
  /* 0x0000 */ volatile long SystemTablesLock;
  /* 0x0004 */ long Padding_654;
  /* 0x0008 */ unsigned __int64 AvailableSystemCacheVa;
  /* 0x0010 */ struct _MI_DYNAMIC_BITMAP DynamicBitMapKernelStacks;
  /* 0x0058 */ struct _MI_DYNAMIC_BITMAP DynamicBitMapKernelShadowStacks;
  /* 0x00a0 */ struct _MI_DYNAMIC_BITMAP DynamicBitMapSystemPtes;
  /* 0x00e8 */ struct _MI_DYNAMIC_BITMAP DynamicBitMapNonCachedMappings;
  /* 0x0130 */ struct _MI_DYNAMIC_BITMAP DynamicBitMapDriverImages;
  /* 0x0178 */ struct _MI_DYNAMIC_BITMAP DynamicBitMapPagedPool;
  /* 0x01c0 */ struct _MI_DYNAMIC_BITMAP DynamicBitMapSystemCache;
  /* 0x0208 */ struct _MI_DYNAMIC_BITMAP DynamicBitMapSystemDataViews;
  /* 0x0250 */ struct _MI_DYNAMIC_BITMAP DynamicBitMapSecureNonPagedPool;
  /* 0x0298 */ void* HalPrivateVaStart;
  /* 0x02a0 */ unsigned __int64 HalPrivateVaSize;
  /* 0x02a8 */ unsigned long SystemVaAssignment[8];
  /* 0x02c8 */ unsigned long SystemVaAssignmentHint;
  /* 0x02cc */ unsigned long VaRegionShadowed[8];
  /* 0x02ec */ unsigned long TopLevelPteLockBits[32];
  /* 0x036c */ long Padding_655[5];
  /* 0x0380 */ struct _MMSUPPORT_FULL SoftWsleSystemVm;
  /* 0x04c0 */ void* HyperSpaceBase;
  /* 0x04c8 */ void* PagableHyperSpace;
  /* 0x04d0 */ void* HyperSpaceEnd;
  /* 0x04d8 */ void* UserSoftWsleBase;
  /* 0x04e0 */ unsigned __int64 PagableHyperSpaceBytes;
  /* 0x04e8 */ unsigned __int64 PageTableCommitmentOffset[2];
  /* 0x04f8 */ volatile long SystemCacheViewLock;
  /* 0x04fc */ long Padding_656;
  /* 0x0500 */ struct _MMWSL_INSTANCE SystemWorkingSetList[10];
  /* 0x0f00 */ unsigned __int64 SelfmapLock[4];
  /* 0x0f20 */ long Padding_657[8];
  /* 0x0f40 */ struct _MI_WORKING_SET_LOCK_ARRAY SystemCacheWorkingSetLockArray[4];
} MI_SYSTEM_VA_STATE, *PMI_SYSTEM_VA_STATE; /* size: 0x1040 */

struct _CALLBACK_OBJECT;

typedef struct _CELL_DATA
{
  /* 0x0000 */ union _u u;
} CELL_DATA, *PCELL_DATA; /* size: 0x0050 */

typedef struct _MI_PARTITION_STATE
{
  /* 0x0000 */ volatile long PartitionLock;
  /* 0x0004 */ long Padding_658;
  /* 0x0008 */ struct _EX_PUSH_LOCK PartitionIdLock;
  /* 0x0010 */ unsigned __int64 InitialPartitionIdBits;
  /* 0x0018 */ struct _LIST_ENTRY PartitionList;
  /* 0x0028 */ struct _RTL_BITMAP* PartitionIdBitmap;
  /* 0x0030 */ struct _RTL_BITMAP InitialPartitionIdBitmap;
  /* 0x0040 */ struct _MI_PARTITION* TempPartitionPointers[1];
  /* 0x0048 */ struct _MI_PARTITION** Partition;
  /* 0x0050 */ unsigned long CrossPartitionDenials;
  /* 0x0054 */ unsigned char MultiplePartitionsExist;
  /* 0x0055 */ char Padding_659[3];
  /* 0x0058 */ void* ExtendedPartitionStart;
  /* 0x0060 */ unsigned __int64 ExtendedPartitionBytes;
  /* 0x0068 */ unsigned __int64 ChildPartitionBytes;
  /* 0x0070 */ struct _RTL_BITMAP_EX HugeIoPfnBitMap;
  /* 0x0080 */ struct _MI_HUGE_PFN* HugePfnDatabase;
  /* 0x0088 */ long* HugePfnLockArray;
  /* 0x0090 */ long Padding_660[12];
  /* 0x00c0 */ volatile long HugeRangesLock;
  /* 0x00c4 */ long __PADDING__[15];
} MI_PARTITION_STATE, *PMI_PARTITION_STATE; /* size: 0x0100 */

typedef struct _PNP_REPLACE_PROCESSOR_LIST
{
  /* 0x0000 */ unsigned __int64* Affinity;
  /* 0x0008 */ unsigned long GroupCount;
  /* 0x000c */ unsigned long AllocatedCount;
  /* 0x0010 */ unsigned long Count;
  /* 0x0014 */ unsigned long ApicIds[1];
} PNP_REPLACE_PROCESSOR_LIST, *PPNP_REPLACE_PROCESSOR_LIST; /* size: 0x0018 */

typedef struct _WNF_PERMANENT_DATA_STORE
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ long Padding_661;
  /* 0x0008 */ struct _WNF_LOCK Lock;
  /* 0x0010 */ void* Handle;
  /* 0x0018 */ struct _LIST_ENTRY Links;
  /* 0x0028 */ enum _WNF_DATA_SCOPE DataScopeType;
  /* 0x002c */ unsigned long ScopeInstanceIdSize;
} WNF_PERMANENT_DATA_STORE, *PWNF_PERMANENT_DATA_STORE; /* size: 0x0030 */

typedef struct _HAL_CHANNEL_MEMORY_RANGES
{
  /* 0x0000 */ unsigned __int64 PageFrameIndex;
  /* 0x0008 */ unsigned short MpnId;
  /* 0x000a */ unsigned short Node;
  /* 0x000c */ unsigned short Channel;
  /* 0x000e */ unsigned char IsPowerManageable;
  /* 0x000f */ unsigned char DeepPowerState;
} HAL_CHANNEL_MEMORY_RANGES, *PHAL_CHANNEL_MEMORY_RANGES; /* size: 0x0010 */

typedef struct _MI_FORCED_COMMITS
{
  /* 0x0000 */ unsigned long Regular;
  /* 0x0004 */ unsigned long Wrap;
} MI_FORCED_COMMITS, *PMI_FORCED_COMMITS; /* size: 0x0008 */

struct _DBGKP_ERROR_PORT;

struct _NLS_STATE;

typedef struct _TIME_FIELDS
{
  /* 0x0000 */ short Year;
  /* 0x0002 */ short Month;
  /* 0x0004 */ short Day;
  /* 0x0006 */ short Hour;
  /* 0x0008 */ short Minute;
  /* 0x000a */ short Second;
  /* 0x000c */ short Milliseconds;
  /* 0x000e */ short Weekday;
} TIME_FIELDS, *PTIME_FIELDS; /* size: 0x0010 */

typedef struct _RTL_TIME_ZONE_INFORMATION
{
  /* 0x0000 */ long Bias;
  /* 0x0004 */ wchar_t StandardName[32];
  /* 0x0044 */ struct _TIME_FIELDS StandardStart;
  /* 0x0054 */ long StandardBias;
  /* 0x0058 */ wchar_t DaylightName[32];
  /* 0x0098 */ struct _TIME_FIELDS DaylightStart;
  /* 0x00a8 */ long DaylightBias;
} RTL_TIME_ZONE_INFORMATION, *PRTL_TIME_ZONE_INFORMATION; /* size: 0x00ac */

typedef struct _RTL_DYNAMIC_TIME_ZONE_INFORMATION
{
  /* 0x0000 */ struct _RTL_TIME_ZONE_INFORMATION tzi;
  /* 0x00ac */ wchar_t TimeZoneKeyName[128];
  /* 0x01ac */ unsigned char DynamicDaylightTimeDisabled;
  /* 0x01ad */ char __PADDING__[3];
} RTL_DYNAMIC_TIME_ZONE_INFORMATION, *PRTL_DYNAMIC_TIME_ZONE_INFORMATION; /* size: 0x01b0 */

typedef struct _TIMEZONE_CHANGE_EVENT
{
  /* 0x0000 */ struct _KDPC Dpc;
  /* 0x0040 */ struct _KTIMER Timer;
  /* 0x0080 */ struct _WORK_QUEUE_ITEM WorkItem;
} TIMEZONE_CHANGE_EVENT, *PTIMEZONE_CHANGE_EVENT; /* size: 0x00a0 */

typedef struct _EX_TIMEZONE_STATE
{
  /* 0x0000 */ struct _RTL_DYNAMIC_TIME_ZONE_INFORMATION TimeZoneInformation;
  /* 0x01b0 */ unsigned long CurrentTimeZoneId;
  /* 0x01b4 */ long LastTimeZoneBias;
  /* 0x01b8 */ union _LARGE_INTEGER TimeZoneBias;
  /* 0x01c0 */ struct _TIMEZONE_CHANGE_EVENT TimeZone;
  /* 0x0260 */ struct _TIMEZONE_CHANGE_EVENT Century;
  /* 0x0300 */ struct _TIMEZONE_CHANGE_EVENT NextYear;
  /* 0x03a0 */ long OkToTimeZoneRefresh;
  /* 0x03a4 */ long Padding_662;
  /* 0x03a8 */ union _LARGE_INTEGER NextCenturyTimeInUTC;
  /* 0x03b0 */ struct _TIME_FIELDS NextCenturyTimeFieldsInLocalTime;
  /* 0x03c0 */ union _LARGE_INTEGER NextYearTimeInUTC;
  /* 0x03c8 */ struct _TIME_FIELDS NextYearTimeFieldsInLocalTime;
  /* 0x03d8 */ short LastDynamicTimeZoneYear;
  /* 0x03da */ char Padding_663[6];
  /* 0x03e0 */ union _LARGE_INTEGER NextSystemCutoverInUTC;
  /* 0x03e8 */ unsigned long RefreshFailures;
  /* 0x03ec */ long __PADDING__[1];
} EX_TIMEZONE_STATE, *PEX_TIMEZONE_STATE; /* size: 0x03f0 */

typedef struct _SILO_USER_SHARED_DATA
{
  /* 0x0000 */ unsigned long ServiceSessionId;
  /* 0x0004 */ unsigned long ActiveConsoleId;
  /* 0x0008 */ __int64 ConsoleSessionForegroundProcessId;
  /* 0x0010 */ enum _NT_PRODUCT_TYPE NtProductType;
  /* 0x0014 */ unsigned long SuiteMask;
  /* 0x0018 */ unsigned long SharedUserSessionId;
  /* 0x001c */ unsigned char IsMultiSessionSku;
  /* 0x001d */ unsigned char IsStateSeparationEnabled;
  /* 0x001e */ wchar_t NtSystemRoot[260];
  /* 0x0226 */ unsigned short UserModeGlobalLogger[16];
  /* 0x0246 */ char Padding_664[2];
  /* 0x0248 */ unsigned long TimeZoneId;
  /* 0x024c */ volatile long TimeZoneBiasStamp;
  /* 0x0250 */ struct _KSYSTEM_TIME TimeZoneBias;
  /* 0x025c */ long Padding_665;
  /* 0x0260 */ union _LARGE_INTEGER TimeZoneBiasEffectiveStart;
  /* 0x0268 */ union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
} SILO_USER_SHARED_DATA, *PSILO_USER_SHARED_DATA; /* size: 0x0270 */

typedef struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION
{
  /* 0x0000 */ union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS ValidBits;
  /* 0x0008 */ unsigned char ProcessorType;
  /* 0x0009 */ unsigned char InstructionSet;
  /* 0x000a */ unsigned char ErrorType;
  /* 0x000b */ unsigned char Operation;
  /* 0x000c */ unsigned char Flags;
  /* 0x000d */ unsigned char Level;
  /* 0x000e */ unsigned short Reserved;
  /* 0x0010 */ unsigned __int64 CPUVersion;
  /* 0x0018 */ unsigned char CPUBrandString[128];
  /* 0x0098 */ unsigned __int64 ProcessorId;
  /* 0x00a0 */ unsigned __int64 TargetAddress;
  /* 0x00a8 */ unsigned __int64 RequesterId;
  /* 0x00b0 */ unsigned __int64 ResponderId;
  /* 0x00b8 */ unsigned __int64 InstructionPointer;
} WHEA_PROCESSOR_GENERIC_ERROR_SECTION, *PWHEA_PROCESSOR_GENERIC_ERROR_SECTION; /* size: 0x00c0 */

typedef struct _MI_SYSTEM_PTE_TYPE
{
  /* 0x0000 */ struct _RTL_BITMAP_EX Bitmap;
  /* 0x0010 */ struct _RTL_BITMAP_EX TrackingBitmap;
  /* 0x0020 */ struct _MMPTE* BasePte;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ enum _MI_SYSTEM_VA_TYPE VaType;
  /* 0x0030 */ unsigned long PteFailures;
  /* 0x0034 */ volatile long SpinLock;
  /* 0x0038 */ volatile unsigned __int64 TotalSystemPtes;
  /* 0x0040 */ unsigned __int64 Hint;
  /* 0x0048 */ volatile unsigned __int64 LowestBitEverAllocated;
  /* 0x0050 */ struct _MI_CACHED_PTES* CachedPtes;
  /* 0x0058 */ volatile unsigned __int64 TotalFreeSystemPtes;
} MI_SYSTEM_PTE_TYPE, *PMI_SYSTEM_PTE_TYPE; /* size: 0x0060 */

typedef struct _MI_ULTRA_VA_CONTEXT
{
  /* 0x0000 */ volatile long Lock;
  /* 0x0004 */ long Padding_666;
  /* 0x0008 */ void* ZeroMapping;
  /* 0x0010 */ unsigned __int64 AllocationHintBit;
  /* 0x0018 */ struct _RTL_BITMAP_EX Bitmap[2];
  /* 0x0038 */ unsigned long ConcurrencyMaximum;
  /* 0x003c */ volatile long ConcurrencyCount;
} MI_ULTRA_VA_CONTEXT, *PMI_ULTRA_VA_CONTEXT; /* size: 0x0040 */

typedef struct _MI_HUGE_SYSTEM_VIEW_HEAD
{
  /* 0x0000 */ struct _RTL_AVL_TREE ViewRoot;
  /* 0x0008 */ unsigned long ViewCount;
  /* 0x000c */ volatile long Lock;
} MI_HUGE_SYSTEM_VIEW_HEAD, *PMI_HUGE_SYSTEM_VIEW_HEAD; /* size: 0x0010 */

typedef struct _MI_SYSTEM_PTE_STATE
{
  /* 0x0000 */ struct _NPAGED_LOOKASIDE_LIST MdlTrackerLookaside;
  /* 0x0080 */ union _SLIST_HEADER DeadPteTrackerSListHead;
  /* 0x0090 */ volatile long PteTrackerLock;
  /* 0x0094 */ long Padding_667;
  /* 0x0098 */ volatile struct _MI_CACHED_PTES* CachedPteHeads;
  /* 0x00a0 */ struct _MI_SYSTEM_PTE_TYPE SystemViewPteInfo;
  /* 0x0100 */ struct _MI_SYSTEM_PTE_TYPE NonCachedMappingsPteInfo;
  /* 0x0160 */ struct _MI_SYSTEM_PTE_TYPE KernelStackPteInfo[2];
  /* 0x0220 */ unsigned long StackGrowthFailures;
  /* 0x0224 */ unsigned char KernelStackPages;
  /* 0x0225 */ unsigned char TrackPtesAborted;
  /* 0x0226 */ unsigned char AdjustCounter;
  /* 0x0227 */ char Padding_668;
  /* 0x0228 */ volatile long ReservedMappingLock;
  /* 0x022c */ long Padding_669;
  /* 0x0230 */ struct _RTL_AVL_TREE ReservedMappingTree;
  /* 0x0238 */ struct _MI_PAGE_CHAIN_HEAD ReservedMappingPageTablePfns;
  /* 0x0250 */ struct _RTL_AVL_TREE OutswappedKernelStackRoot;
  /* 0x0258 */ volatile long OutswappedKernelStackLock;
  /* 0x025c */ long Padding_670;
  /* 0x0260 */ struct _MI_ULTRA_VA_CONTEXT UltraSpaceContext;
  /* 0x02a0 */ unsigned long NumberOfUltraMdlMaps;
  /* 0x02a4 */ long Padding_671;
  /* 0x02a8 */ struct _MI_ULTRA_MDL_NODE* UltraMdlNodeMappings;
  /* 0x02b0 */ struct _MMPTE* UltraSpaceLowPpe;
  /* 0x02b8 */ struct _MMPTE* UltraSpaceHighPpe;
  /* 0x02c0 */ struct _EX_PUSH_LOCK SystemSpaceViewLock;
  /* 0x02c8 */ struct _RTL_AVL_TREE ViewRoot;
  /* 0x02d0 */ unsigned long ViewCount;
  /* 0x02d4 */ long Padding_672[11];
  /* 0x0300 */ struct _MI_WORKING_SET_LOCK_ARRAY WorkingSetLockArray[4];
  /* 0x0400 */ struct _MI_WORKING_SET_LOCK_ARRAY SystemDataViewsWorkingSetLockArray[4];
  /* 0x0500 */ struct _MI_HUGE_SYSTEM_VIEW_HEAD SystemViewBuckets[256];
} MI_SYSTEM_PTE_STATE, *PMI_SYSTEM_PTE_STATE; /* size: 0x1500 */

struct CMP_OFFSET_ARRAY
{
  /* 0x0000 */ unsigned long FileOffset;
  /* 0x0004 */ long Padding_673;
  /* 0x0008 */ void* DataBuffer;
  /* 0x0010 */ unsigned long DataLength;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

typedef struct _MI_IO_PAGE_STATE
{
  /* 0x0000 */ struct _MI_IO_PAGE_STATE_CELL TypeCell[2];
  /* 0x0080 */ struct _RTL_AVL_TREE InvariantIoSpace;
  /* 0x0088 */ struct _RTL_AVL_TREE ExclusionSpace;
  /* 0x0090 */ volatile long IoPfnPruneLock;
  /* 0x0094 */ long Padding_674;
  /* 0x0098 */ struct _WORK_QUEUE_ITEM UnmappedNodeWorkItem;
  /* 0x00b8 */ struct _MI_IO_CACHE_STATS IoCacheStats;
  /* 0x00cc */ long __PADDING__[13];
} MI_IO_PAGE_STATE, *PMI_IO_PAGE_STATE; /* size: 0x0100 */

struct _JOB_NET_RATE_CONTROL;

typedef union _ENERGY_STATE_DURATION
{
  union
  {
    /* 0x0000 */ unsigned __int64 Value;
    struct
    {
      /* 0x0000 */ unsigned long LastChangeTime;
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned long Duration : 31; /* bit position: 0 */
        /* 0x0004 */ unsigned long IsInState : 1; /* bit position: 31 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} ENERGY_STATE_DURATION, *PENERGY_STATE_DURATION; /* size: 0x0008 */

typedef struct _PROCESS_ENERGY_VALUES
{
  /* 0x0000 */ unsigned __int64 Cycles[2][4];
  /* 0x0040 */ unsigned __int64 DiskEnergy;
  /* 0x0048 */ unsigned __int64 NetworkTailEnergy;
  /* 0x0050 */ unsigned __int64 MBBTailEnergy;
  /* 0x0058 */ unsigned __int64 NetworkTxRxBytes;
  /* 0x0060 */ unsigned __int64 MBBTxRxBytes;
  union
  {
    /* 0x0068 */ union _ENERGY_STATE_DURATION Durations[3];
    struct
    {
      /* 0x0068 */ union _ENERGY_STATE_DURATION ForegroundDuration;
      /* 0x0070 */ union _ENERGY_STATE_DURATION DesktopVisibleDuration;
      /* 0x0078 */ union _ENERGY_STATE_DURATION PSMForegroundDuration;
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
  /* 0x0080 */ unsigned long CompositionRendered;
  /* 0x0084 */ unsigned long CompositionDirtyGenerated;
  /* 0x0088 */ unsigned long CompositionDirtyPropagated;
  /* 0x008c */ unsigned long Reserved1;
  /* 0x0090 */ unsigned __int64 AttributedCycles[2][4];
  /* 0x00d0 */ unsigned __int64 WorkOnBehalfCycles[2][4];
} PROCESS_ENERGY_VALUES, *PPROCESS_ENERGY_VALUES; /* size: 0x0110 */

typedef struct _PROCESS_ENERGY_VALUES_EXTENSION
{
  union
  {
    /* 0x0000 */ union _TIMELINE_BITMAP Timelines[14];
    struct
    {
      /* 0x0000 */ union _TIMELINE_BITMAP CpuTimeline;
      /* 0x0008 */ union _TIMELINE_BITMAP DiskTimeline;
      /* 0x0010 */ union _TIMELINE_BITMAP NetworkTimeline;
      /* 0x0018 */ union _TIMELINE_BITMAP MBBTimeline;
      /* 0x0020 */ union _TIMELINE_BITMAP ForegroundTimeline;
      /* 0x0028 */ union _TIMELINE_BITMAP DesktopVisibleTimeline;
      /* 0x0030 */ union _TIMELINE_BITMAP CompositionRenderedTimeline;
      /* 0x0038 */ union _TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;
      /* 0x0040 */ union _TIMELINE_BITMAP CompositionDirtyPropagatedTimeline;
      /* 0x0048 */ union _TIMELINE_BITMAP InputTimeline;
      /* 0x0050 */ union _TIMELINE_BITMAP AudioInTimeline;
      /* 0x0058 */ union _TIMELINE_BITMAP AudioOutTimeline;
      /* 0x0060 */ union _TIMELINE_BITMAP DisplayRequiredTimeline;
      /* 0x0068 */ union _TIMELINE_BITMAP KeyboardInputTimeline;
    }; /* size: 0x0070 */
  }; /* size: 0x0070 */
  union
  {
    /* 0x0070 */ union _ENERGY_STATE_DURATION Durations[5];
    struct
    {
      /* 0x0070 */ union _ENERGY_STATE_DURATION InputDuration;
      /* 0x0078 */ union _ENERGY_STATE_DURATION AudioInDuration;
      /* 0x0080 */ union _ENERGY_STATE_DURATION AudioOutDuration;
      /* 0x0088 */ union _ENERGY_STATE_DURATION DisplayRequiredDuration;
      /* 0x0090 */ union _ENERGY_STATE_DURATION PSMBackgroundDuration;
    }; /* size: 0x0028 */
  }; /* size: 0x0028 */
  /* 0x0098 */ unsigned long KeyboardInput;
  /* 0x009c */ unsigned long MouseInput;
} PROCESS_ENERGY_VALUES_EXTENSION, *PPROCESS_ENERGY_VALUES_EXTENSION; /* size: 0x00a0 */

typedef struct _PROCESS_EXTENDED_ENERGY_VALUES_V1
{
  /* 0x0000 */ struct _PROCESS_ENERGY_VALUES Base;
  /* 0x0110 */ struct _PROCESS_ENERGY_VALUES_EXTENSION Extension;
  /* 0x01b0 */ unsigned __int64 NpuWorkUnits;
} PROCESS_EXTENDED_ENERGY_VALUES_V1, *PPROCESS_EXTENDED_ENERGY_VALUES_V1; /* size: 0x01b8 */

typedef struct _MI_STANDBY_STATE
{
  /* 0x0000 */ unsigned __int64 FirstDecayPage;
  /* 0x0008 */ long Padding_675[2];
  /* 0x0010 */ union _SLIST_HEADER PfnDecayFreeSList;
  /* 0x0020 */ volatile long DecayPfnLock;
  /* 0x0024 */ long Padding_676;
  /* 0x0028 */ struct _RTL_BITMAP DecayPfnsToBeFreed;
  /* 0x0038 */ unsigned long DecayPfnsToBeFreedBuffer[64];
  /* 0x0138 */ long Padding_677[2];
  /* 0x0140 */ union _SLIST_HEADER PageHeatListSlist;
  /* 0x0150 */ volatile long PageHeatListDisableAllocation;
  /* 0x0154 */ volatile unsigned long TransitionPagesMadeCold;
  /* 0x0158 */ long __PADDING__[2];
} MI_STANDBY_STATE, *PMI_STANDBY_STATE; /* size: 0x0160 */

typedef struct _ISA_VECTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned char Bus;
  /* 0x0003 */ unsigned char Source;
  /* 0x0004 */ unsigned long GlobalSystemInterruptVector;
  /* 0x0008 */ unsigned short Flags;
} ISA_VECTOR, *PISA_VECTOR; /* size: 0x000a */

struct _PAGEFAULT_HISTORY;

typedef struct _PEB
{
  /* 0x0000 */ unsigned char InheritedAddressSpace;
  /* 0x0001 */ unsigned char ReadImageFileExecOptions;
  /* 0x0002 */ unsigned char BeingDebugged;
  union
  {
    /* 0x0003 */ unsigned char BitField;
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char ImageUsesLargePages : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char IsProtectedProcess : 1; /* bit position: 1 */
      /* 0x0003 */ unsigned char IsImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0003 */ unsigned char SkipPatchingUser32Forwarders : 1; /* bit position: 3 */
      /* 0x0003 */ unsigned char IsPackagedProcess : 1; /* bit position: 4 */
      /* 0x0003 */ unsigned char IsAppContainer : 1; /* bit position: 5 */
      /* 0x0003 */ unsigned char IsProtectedProcessLight : 1; /* bit position: 6 */
      /* 0x0003 */ unsigned char IsLongPathAwareProcess : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0004 */ unsigned char Padding0[4];
  /* 0x0008 */ void* Mutant;
  /* 0x0010 */ void* ImageBaseAddress;
  /* 0x0018 */ struct _PEB_LDR_DATA* Ldr;
  /* 0x0020 */ struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;
  /* 0x0028 */ void* SubSystemData;
  /* 0x0030 */ void* ProcessHeap;
  /* 0x0038 */ struct _RTL_CRITICAL_SECTION* FastPebLock;
  /* 0x0040 */ union _SLIST_HEADER* volatile AtlThunkSListPtr;
  /* 0x0048 */ void* IFEOKey;
  union
  {
    /* 0x0050 */ unsigned long CrossProcessFlags;
    struct /* bitfield */
    {
      /* 0x0050 */ unsigned long ProcessInJob : 1; /* bit position: 0 */
      /* 0x0050 */ unsigned long ProcessInitializing : 1; /* bit position: 1 */
      /* 0x0050 */ unsigned long ProcessUsingVEH : 1; /* bit position: 2 */
      /* 0x0050 */ unsigned long ProcessUsingVCH : 1; /* bit position: 3 */
      /* 0x0050 */ unsigned long ProcessUsingFTH : 1; /* bit position: 4 */
      /* 0x0050 */ unsigned long ProcessPreviouslyThrottled : 1; /* bit position: 5 */
      /* 0x0050 */ unsigned long ProcessCurrentlyThrottled : 1; /* bit position: 6 */
      /* 0x0050 */ unsigned long ProcessImagesHotPatched : 1; /* bit position: 7 */
      /* 0x0050 */ unsigned long ReservedBits0 : 24; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0054 */ unsigned char Padding1[4];
  union
  {
    /* 0x0058 */ void* KernelCallbackTable;
    /* 0x0058 */ void* UserSharedInfoPtr;
  }; /* size: 0x0008 */
  /* 0x0060 */ unsigned long SystemReserved;
  /* 0x0064 */ unsigned long AtlThunkSListPtr32;
  /* 0x0068 */ void* ApiSetMap;
  /* 0x0070 */ unsigned long TlsExpansionCounter;
  /* 0x0074 */ unsigned char Padding2[4];
  /* 0x0078 */ struct _RTL_BITMAP* TlsBitmap;
  /* 0x0080 */ unsigned long TlsBitmapBits[2];
  /* 0x0088 */ void* ReadOnlySharedMemoryBase;
  /* 0x0090 */ void* SharedData;
  /* 0x0098 */ void** ReadOnlyStaticServerData;
  /* 0x00a0 */ void* AnsiCodePageData;
  /* 0x00a8 */ void* OemCodePageData;
  /* 0x00b0 */ void* UnicodeCaseTableData;
  /* 0x00b8 */ unsigned long NumberOfProcessors;
  /* 0x00bc */ unsigned long NtGlobalFlag;
  /* 0x00c0 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x00c8 */ unsigned __int64 HeapSegmentReserve;
  /* 0x00d0 */ unsigned __int64 HeapSegmentCommit;
  /* 0x00d8 */ unsigned __int64 HeapDeCommitTotalFreeThreshold;
  /* 0x00e0 */ unsigned __int64 HeapDeCommitFreeBlockThreshold;
  /* 0x00e8 */ unsigned long NumberOfHeaps;
  /* 0x00ec */ unsigned long MaximumNumberOfHeaps;
  /* 0x00f0 */ void** ProcessHeaps;
  /* 0x00f8 */ void* GdiSharedHandleTable;
  /* 0x0100 */ void* ProcessStarterHelper;
  /* 0x0108 */ unsigned long GdiDCAttributeList;
  /* 0x010c */ unsigned char Padding3[4];
  /* 0x0110 */ struct _RTL_CRITICAL_SECTION* LoaderLock;
  /* 0x0118 */ unsigned long OSMajorVersion;
  /* 0x011c */ unsigned long OSMinorVersion;
  /* 0x0120 */ unsigned short OSBuildNumber;
  /* 0x0122 */ unsigned short OSCSDVersion;
  /* 0x0124 */ unsigned long OSPlatformId;
  /* 0x0128 */ unsigned long ImageSubsystem;
  /* 0x012c */ unsigned long ImageSubsystemMajorVersion;
  /* 0x0130 */ unsigned long ImageSubsystemMinorVersion;
  /* 0x0134 */ unsigned char Padding4[4];
  /* 0x0138 */ unsigned __int64 ActiveProcessAffinityMask;
  /* 0x0140 */ unsigned long GdiHandleBuffer[60];
  /* 0x0230 */ void* PostProcessInitRoutine /* function */;
  /* 0x0238 */ struct _RTL_BITMAP* TlsExpansionBitmap;
  /* 0x0240 */ unsigned long TlsExpansionBitmapBits[32];
  /* 0x02c0 */ unsigned long SessionId;
  /* 0x02c4 */ unsigned char Padding5[4];
  /* 0x02c8 */ union _ULARGE_INTEGER AppCompatFlags;
  /* 0x02d0 */ union _ULARGE_INTEGER AppCompatFlagsUser;
  /* 0x02d8 */ void* pShimData;
  /* 0x02e0 */ void* AppCompatInfo;
  /* 0x02e8 */ struct _UNICODE_STRING CSDVersion;
  /* 0x02f8 */ const struct _ACTIVATION_CONTEXT_DATA* ActivationContextData;
  /* 0x0300 */ struct _ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;
  /* 0x0308 */ const struct _ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;
  /* 0x0310 */ struct _ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;
  /* 0x0318 */ unsigned __int64 MinimumStackCommit;
  /* 0x0320 */ void* SparePointers[2];
  /* 0x0330 */ void* PatchLoaderData;
  /* 0x0338 */ struct _CHPEV2_PROCESS_INFO* ChpeV2ProcessInfo;
  /* 0x0340 */ unsigned long AppModelFeatureState;
  /* 0x0344 */ unsigned long SpareUlongs[2];
  /* 0x034c */ unsigned short ActiveCodePage;
  /* 0x034e */ unsigned short OemCodePage;
  /* 0x0350 */ unsigned short UseCaseMapping;
  /* 0x0352 */ unsigned short UnusedNlsField;
  /* 0x0354 */ long Padding_678;
  /* 0x0358 */ void* WerRegistrationData;
  /* 0x0360 */ void* WerShipAssertPtr;
  /* 0x0368 */ void* EcCodeBitMap;
  /* 0x0370 */ void* pImageHeaderHash;
  union
  {
    /* 0x0378 */ unsigned long TracingFlags;
    struct /* bitfield */
    {
      /* 0x0378 */ unsigned long HeapTracingEnabled : 1; /* bit position: 0 */
      /* 0x0378 */ unsigned long CritSecTracingEnabled : 1; /* bit position: 1 */
      /* 0x0378 */ unsigned long LibLoaderTracingEnabled : 1; /* bit position: 2 */
      /* 0x0378 */ unsigned long SpareTracingBits : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x037c */ unsigned char Padding6[4];
  /* 0x0380 */ unsigned __int64 CsrServerReadOnlySharedMemoryBase;
  /* 0x0388 */ unsigned __int64 TppWorkerpListLock;
  /* 0x0390 */ struct _LIST_ENTRY TppWorkerpList;
  /* 0x03a0 */ void* WaitOnAddressHashTable[128];
  /* 0x07a0 */ void* TelemetryCoverageHeader;
  /* 0x07a8 */ unsigned long CloudFileFlags;
  /* 0x07ac */ unsigned long CloudFileDiagFlags;
  /* 0x07b0 */ char PlaceholderCompatibilityMode;
  /* 0x07b1 */ char PlaceholderCompatibilityModeReserved[7];
  /* 0x07b8 */ struct _LEAP_SECOND_DATA* LeapSecondData;
  union
  {
    /* 0x07c0 */ unsigned long LeapSecondFlags;
    struct /* bitfield */
    {
      /* 0x07c0 */ unsigned long SixtySecondEnabled : 1; /* bit position: 0 */
      /* 0x07c0 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x07c4 */ unsigned long NtGlobalFlag2;
  /* 0x07c8 */ unsigned __int64 ExtendedFeatureDisableMask;
} PEB, *PPEB; /* size: 0x07d0 */

typedef struct _HMAP_ENTRY
{
  /* 0x0000 */ unsigned __int64 BlockOffset;
  /* 0x0008 */ unsigned __int64 PermanentBinAddress;
  /* 0x0010 */ unsigned long MemAlloc;
  /* 0x0014 */ long __PADDING__[1];
} HMAP_ENTRY, *PHMAP_ENTRY; /* size: 0x0018 */

typedef struct _PEB_LDR_DATA
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned char Initialized;
  /* 0x0005 */ char Padding_679[3];
  /* 0x0008 */ void* SsHandle;
  /* 0x0010 */ struct _LIST_ENTRY InLoadOrderModuleList;
  /* 0x0020 */ struct _LIST_ENTRY InMemoryOrderModuleList;
  /* 0x0030 */ struct _LIST_ENTRY InInitializationOrderModuleList;
  /* 0x0040 */ void* EntryInProgress;
  /* 0x0048 */ unsigned char ShutdownInProgress;
  /* 0x0049 */ char Padding_680[7];
  /* 0x0050 */ void* ShutdownThreadId;
} PEB_LDR_DATA, *PPEB_LDR_DATA; /* size: 0x0058 */

typedef struct _INTERRUPT_CONNECTION_DATA
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_681;
  /* 0x0008 */ struct _INTERRUPT_VECTOR_DATA Vectors[1];
} INTERRUPT_CONNECTION_DATA, *PINTERRUPT_CONNECTION_DATA; /* size: 0x0060 */

typedef struct _MAPIC
{
  /* 0x0000 */ struct _DESCRIPTION_HEADER Header;
  /* 0x0024 */ unsigned long LocalAPICAddress;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ unsigned long APICTables[1];
} MAPIC, *PMAPIC; /* size: 0x0030 */

typedef union _ARM64_FPSR_REG
{
  union
  {
    /* 0x0000 */ unsigned long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long IOC : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long DZC : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long OFC : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long UFC : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long IXC : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long res0_1 : 2; /* bit position: 5 */
      /* 0x0000 */ unsigned long IDC : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long res0_2 : 19; /* bit position: 8 */
      /* 0x0000 */ unsigned long QC : 1; /* bit position: 27 */
      /* 0x0000 */ unsigned long V : 1; /* bit position: 28 */
      /* 0x0000 */ unsigned long C : 1; /* bit position: 29 */
      /* 0x0000 */ unsigned long Z : 1; /* bit position: 30 */
      /* 0x0000 */ unsigned long N : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} ARM64_FPSR_REG, *PARM64_FPSR_REG; /* size: 0x0004 */

typedef struct _RTL_CRITICAL_SECTION_DEBUG
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned short CreatorBackTraceIndex;
  /* 0x0004 */ long Padding_682;
  /* 0x0008 */ struct _RTL_CRITICAL_SECTION* CriticalSection;
  /* 0x0010 */ struct _LIST_ENTRY ProcessLocksList;
  /* 0x0020 */ unsigned long EntryCount;
  /* 0x0024 */ unsigned long ContentionCount;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ unsigned short CreatorBackTraceIndexHigh;
  /* 0x002e */ unsigned short Identifier;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG; /* size: 0x0030 */

typedef struct _MI_VERIFIER_TRIM_STATE
{
  /* 0x0000 */ unsigned __int64 StartTime;
  /* 0x0008 */ unsigned __int64 ActualTrimTime;
  /* 0x0010 */ unsigned __int64 MaximumSingleTrimTimeReached;
  /* 0x0018 */ unsigned long Instances;
  /* 0x001c */ volatile long TrimInProgress;
} MI_VERIFIER_TRIM_STATE, *PMI_VERIFIER_TRIM_STATE; /* size: 0x0020 */

typedef struct _MMSUPPORT_AGGREGATION
{
  /* 0x0000 */ unsigned long PageFaultCount;
  /* 0x0004 */ long Padding_683;
  /* 0x0008 */ unsigned __int64 WorkingSetSize;
  /* 0x0010 */ unsigned __int64 WorkingSetLeafSize;
  /* 0x0018 */ unsigned __int64 PeakWorkingSetSize;
} MMSUPPORT_AGGREGATION, *PMMSUPPORT_AGGREGATION; /* size: 0x0020 */

typedef struct _VF_AVL_TREE
{
  /* 0x0000 */ unsigned __int64 NodeRangeSize;
  /* 0x0008 */ volatile unsigned __int64 NodeCount;
  /* 0x0010 */ struct _VF_AVL_TABLE* Tables;
  /* 0x0018 */ unsigned long TablesNo;
  union
  {
    union
    {
      /* 0x001c */ unsigned long NodeSize;
      /* 0x001c */ unsigned long UseLookaside;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
} VF_AVL_TREE, *PVF_AVL_TREE; /* size: 0x0020 */

typedef struct _CM_INDEX_HINT_BLOCK
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long HashKey[1];
} CM_INDEX_HINT_BLOCK, *PCM_INDEX_HINT_BLOCK; /* size: 0x0008 */

typedef struct _MI_SYSTEM_VA_ASSIGNMENT
{
  /* 0x0000 */ void* BaseAddress;
  /* 0x0008 */ unsigned __int64 NumberOfBytes;
} MI_SYSTEM_VA_ASSIGNMENT, *PMI_SYSTEM_VA_ASSIGNMENT; /* size: 0x0010 */

struct _ACTIVATION_CONTEXT_DATA;

struct _ASSEMBLY_STORAGE_MAP;

typedef struct _RTL_RANGE_LIST
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ unsigned long Count;
  /* 0x0018 */ unsigned long Stamp;
  /* 0x001c */ long __PADDING__[1];
} RTL_RANGE_LIST, *PRTL_RANGE_LIST; /* size: 0x0020 */

typedef struct _TP_CALLBACK_ENVIRON_V3
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ long Padding_684;
  /* 0x0008 */ struct _TP_POOL* Pool;
  /* 0x0010 */ struct _TP_CLEANUP_GROUP* CleanupGroup;
  /* 0x0018 */ void* CleanupGroupCancelCallback /* function */;
  /* 0x0020 */ void* RaceDll;
  /* 0x0028 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0030 */ void* FinalizationCallback /* function */;
  union
  {
    union
    {
      /* 0x0038 */ unsigned long Flags;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0038 */ unsigned long LongFunction : 1; /* bit position: 0 */
          /* 0x0038 */ unsigned long Persistent : 1; /* bit position: 1 */
          /* 0x0038 */ unsigned long Private : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ s;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x003c */ enum _TP_CALLBACK_PRIORITY CallbackPriority;
  /* 0x0040 */ unsigned long Size;
  /* 0x0044 */ long __PADDING__[1];
} TP_CALLBACK_ENVIRON_V3, *PTP_CALLBACK_ENVIRON_V3; /* size: 0x0048 */

typedef struct _HEAP_STOP_ON_TAG
{
  union
  {
    /* 0x0000 */ unsigned long HeapAndTagIndex;
    struct
    {
      /* 0x0000 */ unsigned short TagIndex;
      /* 0x0002 */ unsigned short HeapIndex;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} HEAP_STOP_ON_TAG, *PHEAP_STOP_ON_TAG; /* size: 0x0004 */

typedef struct _HEAP_STOP_ON_VALUES
{
  /* 0x0000 */ unsigned __int64 AllocAddress;
  /* 0x0008 */ struct _HEAP_STOP_ON_TAG AllocTag;
  /* 0x000c */ long Padding_685;
  /* 0x0010 */ unsigned __int64 ReAllocAddress;
  /* 0x0018 */ struct _HEAP_STOP_ON_TAG ReAllocTag;
  /* 0x001c */ long Padding_686;
  /* 0x0020 */ unsigned __int64 FreeAddress;
  /* 0x0028 */ struct _HEAP_STOP_ON_TAG FreeTag;
  /* 0x002c */ long __PADDING__[1];
} HEAP_STOP_ON_VALUES, *PHEAP_STOP_ON_VALUES; /* size: 0x0030 */

typedef struct _LEAP_SECOND_DATA
{
  /* 0x0000 */ unsigned char Enabled;
  /* 0x0001 */ char Padding_687[3];
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ union _LARGE_INTEGER Data[1];
} LEAP_SECOND_DATA, *PLEAP_SECOND_DATA; /* size: 0x0010 */

typedef struct _MI_CACHED_PTES
{
  /* 0x0000 */ volatile struct _MI_CACHED_PTE Bins[8];
  /* 0x0040 */ volatile __int64 CachedPteCount;
} MI_CACHED_PTES, *PMI_CACHED_PTES; /* size: 0x0048 */

struct _PSP_SESSION_SPACE;

struct _EPROCESS_QUOTA_BLOCK;

typedef struct _VF_SUSPECT_DRIVER_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ unsigned long Loads;
  /* 0x0014 */ unsigned long Unloads;
  /* 0x0018 */ struct _UNICODE_STRING FullName;
  /* 0x0028 */ struct _UNICODE_STRING BaseName;
} VF_SUSPECT_DRIVER_ENTRY, *PVF_SUSPECT_DRIVER_ENTRY; /* size: 0x0038 */

typedef struct _HANDLE_TABLE
{
  /* 0x0000 */ unsigned long NextHandleNeedingPool;
  /* 0x0004 */ long ExtraInfoPages;
  /* 0x0008 */ volatile unsigned __int64 TableCode;
  /* 0x0010 */ struct _EPROCESS* QuotaProcess;
  /* 0x0018 */ struct _LIST_ENTRY HandleTableList;
  /* 0x0028 */ unsigned long UniqueProcessId;
  union
  {
    /* 0x002c */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x002c */ unsigned char StrictFIFO : 1; /* bit position: 0 */
      /* 0x002c */ unsigned char EnableHandleExceptions : 1; /* bit position: 1 */
      /* 0x002c */ unsigned char Rundown : 1; /* bit position: 2 */
      /* 0x002c */ unsigned char Duplicated : 1; /* bit position: 3 */
      /* 0x002c */ unsigned char RaiseUMExceptionOnInvalidHandleClose : 1; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0030 */ struct _EX_PUSH_LOCK HandleContentionEvent;
  /* 0x0038 */ struct _EX_PUSH_LOCK HandleTableLock;
  union
  {
    /* 0x0040 */ struct _HANDLE_TABLE_FREE_LIST FreeLists[1];
    struct
    {
      /* 0x0040 */ unsigned char ActualEntry[32];
      /* 0x0060 */ struct _HANDLE_TRACE_DEBUG_INFO* DebugInfo;
      /* 0x0068 */ long __PADDING__[6];
    }; /* size: 0x0040 */
  }; /* size: 0x0040 */
} HANDLE_TABLE, *PHANDLE_TABLE; /* size: 0x0080 */

typedef struct _ARBITER_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ long Padding_688;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ void* InterfaceReference /* function */;
  /* 0x0018 */ void* InterfaceDereference /* function */;
  /* 0x0020 */ void* ArbiterHandler /* function */;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ long __PADDING__[1];
} ARBITER_INTERFACE, *PARBITER_INTERFACE; /* size: 0x0030 */

struct _ACTIVATION_CONTEXT;

typedef struct _EXHANDLE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long TagBits : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned long Index : 30; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ void* GenericHandleOverlay;
    /* 0x0000 */ unsigned __int64 Value;
  }; /* size: 0x0008 */
} EXHANDLE, *PEXHANDLE; /* size: 0x0008 */

typedef union _HANDLE_TABLE_ENTRY
{
  union
  {
    /* 0x0000 */ volatile __int64 VolatileLowValue;
    /* 0x0000 */ __int64 LowValue;
    struct
    {
      /* 0x0000 */ struct _HANDLE_TABLE_ENTRY_INFO* volatile InfoTable;
      union
      {
        /* 0x0008 */ __int64 HighValue;
        /* 0x0008 */ union _HANDLE_TABLE_ENTRY* NextFreeHandleEntry;
        /* 0x0008 */ struct _EXHANDLE LeafHandleValue;
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
    /* 0x0000 */ __int64 RefCountField;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Unlocked : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 RefCnt : 16; /* bit position: 1 */
        /* 0x0000 */ unsigned __int64 Attributes : 3; /* bit position: 17 */
        /* 0x0000 */ unsigned __int64 ObjectPointerBits : 44; /* bit position: 20 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned long GrantedAccessBits : 25; /* bit position: 0 */
        /* 0x0008 */ unsigned long NoRightsUpgrade : 1; /* bit position: 25 */
        /* 0x0008 */ unsigned long Spare1 : 6; /* bit position: 26 */
      }; /* bitfield */
      /* 0x000c */ unsigned long Spare2;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} HANDLE_TABLE_ENTRY, *PHANDLE_TABLE_ENTRY; /* size: 0x0010 */

typedef struct _HANDLE_TABLE_ENTRY_INFO
{
  /* 0x0000 */ unsigned long AuditMask;
  /* 0x0004 */ unsigned long MaxRelativeAccessMask;
} HANDLE_TABLE_ENTRY_INFO, *PHANDLE_TABLE_ENTRY_INFO; /* size: 0x0008 */

typedef struct _WHEA_XPF_PROCESSOR_ERROR_SECTION
{
  /* 0x0000 */ union _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS ValidBits;
  /* 0x0008 */ unsigned __int64 LocalAPICId;
  /* 0x0010 */ unsigned char CpuId[48];
  /* 0x0040 */ unsigned char VariableInfo[1];
} WHEA_XPF_PROCESSOR_ERROR_SECTION, *PWHEA_XPF_PROCESSOR_ERROR_SECTION; /* size: 0x0041 */

typedef struct _HANDLE_TRACE_DEBUG_INFO
{
  /* 0x0000 */ long RefCount;
  /* 0x0004 */ unsigned long TableSize;
  /* 0x0008 */ unsigned long BitMaskFlags;
  /* 0x000c */ long Padding_689;
  /* 0x0010 */ struct _FAST_MUTEX CloseCompactionLock;
  /* 0x0048 */ unsigned long CurrentStackIndex;
  /* 0x004c */ long Padding_690;
  /* 0x0050 */ struct _HANDLE_TRACE_DB_ENTRY TraceDb[1];
} HANDLE_TRACE_DEBUG_INFO, *PHANDLE_TRACE_DEBUG_INFO; /* size: 0x00f0 */

typedef struct _ACPI_CACHED_TABLE
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ union _LARGE_INTEGER PhysicalAddress;
  /* 0x0018 */ struct _DESCRIPTION_HEADER Header;
  /* 0x003c */ long __PADDING__[1];
} ACPI_CACHED_TABLE, *PACPI_CACHED_TABLE; /* size: 0x0040 */

typedef struct _ARBITER_CONFLICT_INFO
{
  /* 0x0000 */ struct _DEVICE_OBJECT* OwningObject;
  /* 0x0008 */ unsigned __int64 Start;
  /* 0x0010 */ unsigned __int64 End;
} ARBITER_CONFLICT_INFO, *PARBITER_CONFLICT_INFO; /* size: 0x0018 */

typedef struct _EWOW64PROCESS
{
  /* 0x0000 */ void* Peb;
  /* 0x0008 */ enum _SYSTEM_DLL_TYPE NtdllType;
  /* 0x000c */ long __PADDING__[1];
} EWOW64PROCESS, *PEWOW64PROCESS; /* size: 0x0010 */

typedef struct _HIVE_WAIT_PACKET
{
  /* 0x0000 */ struct _KEVENT WakeEvent;
  /* 0x0018 */ long Status;
  /* 0x001c */ long Padding_691;
  /* 0x0020 */ struct _HIVE_WAIT_PACKET* Next;
} HIVE_WAIT_PACKET, *PHIVE_WAIT_PACKET; /* size: 0x0028 */

typedef struct _OBJECT_NAME_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING Name;
} OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION; /* size: 0x0010 */

typedef struct _SLIST_ENTRY
{
  /* 0x0000 */ struct _SLIST_ENTRY* Next;
  /* 0x0008 */ long __PADDING__[2];
} SLIST_ENTRY, *PSLIST_ENTRY; /* size: 0x0010 */

typedef struct _MMINPAGE_SUPPORT_FLOW_THROUGH
{
  /* 0x0000 */ unsigned __int64 Page[1];
  /* 0x0008 */ struct _MMINPAGE_SUPPORT* InitialInPageSupport;
  /* 0x0010 */ struct _MMPAGING_FILE* PagingFile;
  /* 0x0018 */ unsigned long PageFileOffset;
  /* 0x001c */ long Padding_692;
  /* 0x0020 */ struct _RTL_BALANCED_NODE Node;
} MMINPAGE_SUPPORT_FLOW_THROUGH, *PMMINPAGE_SUPPORT_FLOW_THROUGH; /* size: 0x0038 */

typedef struct _MMINPAGE_SUPPORT
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY ListEntry;
    /* 0x0000 */ struct _SLIST_ENTRY SListEntry;
  }; /* size: 0x0010 */
  /* 0x0010 */ struct _LIST_ENTRY ListHead;
  /* 0x0020 */ struct _KEVENT Event;
  /* 0x0038 */ struct _KEVENT CollidedEvent;
  /* 0x0050 */ struct _IO_STATUS_BLOCK IoStatus;
  /* 0x0060 */ union _LARGE_INTEGER ReadOffset;
  union
  {
    union
    {
      /* 0x0068 */ struct _KAPC_STATE ApcState;
      /* 0x0068 */ struct _MI_HARD_FAULT_STATE HardFaultState;
    }; /* size: 0x0030 */
  } /* size: 0x0030 */ u2;
  /* 0x0098 */ struct _ETHREAD* Thread;
  /* 0x00a0 */ struct _MMPFN* LockedProtoPfn;
  /* 0x00a8 */ struct _MMPTE PteContents;
  /* 0x00b0 */ volatile long WaitCount;
  /* 0x00b4 */ volatile long InjectRetry;
  /* 0x00b8 */ unsigned long ByteCount;
  union
  {
    union
    {
      /* 0x00bc */ unsigned long ImagePteOffset;
      /* 0x00bc */ unsigned long TossPage;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u3;
  union
  {
    union
    {
      /* 0x00c0 */ struct _MMINPAGE_FLAGS e1;
      /* 0x00c0 */ unsigned long LongFlags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x00c4 */ long Padding_693;
  union
  {
    /* 0x00c8 */ struct _FILE_OBJECT* FilePointer;
    /* 0x00c8 */ struct _MMPAGING_FILE* PagingFile;
  }; /* size: 0x0008 */
  /* 0x00d0 */ struct _SUBSECTION* Subsection;
  /* 0x00d8 */ void* AutoBoostLock;
  /* 0x00e0 */ void* FaultingAddress;
  /* 0x00e8 */ struct _MMPTE* PointerPte;
  /* 0x00f0 */ struct _MMPTE* BasePte;
  /* 0x00f8 */ struct _MMPFN* Pfn;
  /* 0x0100 */ struct _MDL* PrefetchMdl;
  /* 0x0108 */ volatile __int64 ProbeCount;
  /* 0x0110 */ struct _MDL Mdl;
  union
  {
    /* 0x0140 */ unsigned __int64 Page[16];
    struct
    {
      /* 0x0140 */ struct _MMINPAGE_SUPPORT_FLOW_THROUGH FlowThrough;
      /* 0x0178 */ long __PADDING__[18];
    }; /* size: 0x0080 */
  }; /* size: 0x0080 */
} MMINPAGE_SUPPORT, *PMMINPAGE_SUPPORT; /* size: 0x01c0 */

typedef struct _MI_SYSTEM_NODE_INFORMATION
{
  /* 0x0000 */ struct _MI_SYSTEM_NODE_AFFINITY_INFORMATION Affinities;
  struct
  {
    /* 0x0020 */ unsigned short NoLocalProcessors : 1; /* bit position: 0 */
    /* 0x0002 */ char Padding_694[2];
    /* 0x0024 */ unsigned long UniformAccess : 1; /* bit position: 0 */
    /* 0x0028 */ unsigned short Spare : 14; /* bit position: 0 */
    /* 0x002a */ char __PADDING__[2];
  } /* size: 0x000c */ Flags;
  /* 0x002c */ struct _MI_NODE_NUMBER_ZERO_BASED ProcessorNode;
  /* 0x0030 */ struct _GROUP_AFFINITY ForwardProgressGroupAffinity;
  /* 0x0040 */ volatile long LargePageListOpLock;
  /* 0x0044 */ long Padding_695;
  /* 0x0048 */ struct _MI_WRITE_CALIBRATION WriteCalibration[3][3];
  /* 0x0240 */ unsigned __int64 MaximumBandwidth[2][2];
  /* 0x0260 */ long Padding_696[8];
  /* 0x0280 */ volatile long IoPfnLock;
  /* 0x0284 */ long Padding_697;
  /* 0x0288 */ struct _MI_DEFERRED_PFNS_TO_FREE DeferredPfnsToFree[4];
  /* 0x0308 */ struct _MI_DEFERRED_PFNS_TO_FREE DeferredPfnsReady;
  /* 0x0328 */ volatile long DeferredPfnsToFreeLock;
  /* 0x032c */ long __PADDING__[5];
} MI_SYSTEM_NODE_INFORMATION, *PMI_SYSTEM_NODE_INFORMATION; /* size: 0x0340 */

typedef struct _ACPI_SRAT_ENTRY
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  union
  {
    struct
    {
      /* 0x0002 */ unsigned char ProximityDomainLow;
      /* 0x0003 */ unsigned char ApicId;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long Enabled : 1; /* bit position: 0 */
          /* 0x0004 */ unsigned long Reserved : 31; /* bit position: 1 */
        }; /* bitfield */
      } /* size: 0x0004 */ Flags;
      /* 0x0008 */ unsigned char SApicEid;
      /* 0x0009 */ unsigned char ProximityDomainHigh[3];
      /* 0x000c */ unsigned long ClockDomain;
    } /* size: 0x000e */ ApicAffinity;
    struct
    {
      /* 0x0002 */ unsigned long ProximityDomain;
      /* 0x0006 */ unsigned char Reserved[2];
      /* 0x0008 */ union _LARGE_INTEGER Base;
      /* 0x0010 */ unsigned __int64 Length;
      /* 0x0018 */ unsigned long Reserved2;
      struct
      {
        struct /* bitfield */
        {
          /* 0x001c */ unsigned long Enabled : 1; /* bit position: 0 */
          /* 0x001c */ unsigned long HotPlug : 1; /* bit position: 1 */
          /* 0x001c */ unsigned long NonVolatile : 1; /* bit position: 2 */
          /* 0x001c */ unsigned long SpecificPurpose : 1; /* bit position: 3 */
          /* 0x001c */ unsigned long Reserved : 28; /* bit position: 4 */
        }; /* bitfield */
      } /* size: 0x0004 */ Flags;
      /* 0x0020 */ unsigned char Reserved3[8];
    } /* size: 0x0026 */ MemoryAffinity;
    struct
    {
      /* 0x0002 */ unsigned char Reserved[2];
      /* 0x0004 */ unsigned long ProximityDomain;
      /* 0x0008 */ unsigned long ApicId;
      struct
      {
        struct /* bitfield */
        {
          /* 0x000c */ unsigned long Enabled : 1; /* bit position: 0 */
          /* 0x000c */ unsigned long Reserved : 31; /* bit position: 1 */
        }; /* bitfield */
      } /* size: 0x0004 */ Flags;
      /* 0x0010 */ unsigned long ClockDomain;
      /* 0x0014 */ unsigned long Reserved2;
    } /* size: 0x0016 */ X2ApicAffinity;
    struct
    {
      /* 0x0002 */ unsigned long ProximityDomain;
      /* 0x0006 */ unsigned long ProcessorUid;
      struct
      {
        struct /* bitfield */
        {
          /* 0x000a */ unsigned long Enabled : 1; /* bit position: 0 */
          /* 0x000a */ unsigned long Reserved : 31; /* bit position: 1 */
        }; /* bitfield */
      } /* size: 0x0004 */ Flags;
      /* 0x000e */ unsigned long ClockDomain;
    } /* size: 0x0010 */ GiccAffinity;
    struct
    {
      /* 0x0002 */ unsigned long ProximityDomain;
      /* 0x0006 */ unsigned char Reserved[2];
      /* 0x0008 */ unsigned long ITSID;
    } /* size: 0x000a */ GicItsAffinity;
    struct
    {
      /* 0x0002 */ unsigned char Reserved;
      /* 0x0003 */ unsigned char DeviceHandleType;
      /* 0x0004 */ unsigned long ProximityDomain;
      union
      {
        union
        {
          struct
          {
            /* 0x0008 */ unsigned char ACPI_HID[8];
            /* 0x0010 */ unsigned long ACPI_UID;
            /* 0x0014 */ unsigned long Reserved;
          } /* size: 0x0010 */ ACPI;
          struct
          {
            /* 0x0008 */ unsigned short PCISegment;
            /* 0x000a */ unsigned short PCIBDFNumber;
            /* 0x000c */ unsigned char Reserved[12];
          } /* size: 0x0010 */ PCI;
        }; /* size: 0x0010 */
      } /* size: 0x0010 */ DeviceHandle;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0018 */ unsigned long Enabled : 1; /* bit position: 0 */
          /* 0x0018 */ unsigned long ArchitecturalTransactions : 1; /* bit position: 1 */
          /* 0x0018 */ unsigned long Reserved : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ Flags;
      /* 0x001c */ unsigned long Reserved2;
    } /* size: 0x001e */ GenericInitiatorAffinity;
    struct
    {
      struct
      {
        /* 0x0002 */ unsigned char Reserved;
        /* 0x0003 */ unsigned char DeviceHandleType;
        /* 0x0004 */ unsigned long ProximityDomain;
        union
        {
          union
          {
            struct
            {
              /* 0x0008 */ unsigned char ACPI_HID[8];
              /* 0x0010 */ unsigned long ACPI_UID;
              /* 0x0014 */ unsigned long Reserved;
            } /* size: 0x0010 */ ACPI;
            struct
            {
              /* 0x0008 */ unsigned short PCISegment;
              /* 0x000a */ unsigned short PCIBDFNumber;
              /* 0x000c */ unsigned char Reserved[12];
            } /* size: 0x0010 */ PCI;
          }; /* size: 0x0010 */
        } /* size: 0x0010 */ DeviceHandle;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0018 */ unsigned long Enabled : 1; /* bit position: 0 */
            /* 0x0018 */ unsigned long ArchitecturalTransactions : 1; /* bit position: 1 */
            /* 0x0018 */ unsigned long Reserved : 30; /* bit position: 2 */
          }; /* bitfield */
        } /* size: 0x0004 */ Flags;
        /* 0x001c */ unsigned long Reserved2;
      } /* size: 0x001e */ GenericPortAffinity;
      /* 0x0020 */ long __PADDING__[2];
    }; /* size: 0x0026 */
  }; /* size: 0x0026 */
} ACPI_SRAT_ENTRY, *PACPI_SRAT_ENTRY; /* size: 0x0028 */

typedef struct _WNF_STATE_DATA
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ unsigned long AllocatedSize;
  /* 0x0008 */ unsigned long DataSize;
  /* 0x000c */ unsigned long ChangeStamp;
} WNF_STATE_DATA, *PWNF_STATE_DATA; /* size: 0x0010 */

typedef struct _HHIVE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ long Padding_698;
  /* 0x0008 */ void* GetCellRoutine /* function */;
  /* 0x0010 */ void* ReleaseCellRoutine /* function */;
  /* 0x0018 */ void* Allocate /* function */;
  /* 0x0020 */ void* Free /* function */;
  /* 0x0028 */ void* FileWrite /* function */;
  /* 0x0030 */ void* FileRead /* function */;
  /* 0x0038 */ void* HiveLoadFailure;
  /* 0x0040 */ struct _HBASE_BLOCK* BaseBlock;
  /* 0x0048 */ struct _CMSI_RW_LOCK FlusherLock;
  /* 0x0050 */ struct _CMSI_RW_LOCK WriterLock;
  /* 0x0058 */ struct _RTL_BITMAP DirtyVector;
  /* 0x0068 */ unsigned long DirtyCount;
  /* 0x006c */ unsigned long DirtyAlloc;
  /* 0x0070 */ struct _RTL_BITMAP UnreconciledVector;
  /* 0x0080 */ unsigned long UnreconciledCount;
  /* 0x0084 */ unsigned long BaseBlockAlloc;
  /* 0x0088 */ unsigned long Cluster;
  struct /* bitfield */
  {
    /* 0x008c */ unsigned char Flat : 1; /* bit position: 0 */
    /* 0x008c */ unsigned char ReadOnly : 1; /* bit position: 1 */
    /* 0x008c */ unsigned char Reserved : 6; /* bit position: 2 */
  }; /* bitfield */
  /* 0x008d */ unsigned char DirtyFlag;
  /* 0x008e */ char Padding_699[2];
  /* 0x0090 */ unsigned long HvBinHeadersUse;
  /* 0x0094 */ unsigned long HvFreeCellsUse;
  /* 0x0098 */ unsigned long HvUsedCellsUse;
  /* 0x009c */ unsigned long CmUsedCellsUse;
  /* 0x00a0 */ unsigned long HiveFlags;
  /* 0x00a4 */ unsigned long FlusherFlags;
  /* 0x00a8 */ unsigned long CurrentLog;
  /* 0x00ac */ unsigned long CurrentLogSequence;
  /* 0x00b0 */ unsigned long CurrentLogMinimumSequence;
  /* 0x00b4 */ unsigned long CurrentLogOffset;
  /* 0x00b8 */ unsigned long MinimumLogSequence;
  /* 0x00bc */ unsigned long LogFileSizeCap;
  /* 0x00c0 */ unsigned char LogDataPresent[2];
  /* 0x00c2 */ unsigned char PrimaryFileValid;
  /* 0x00c3 */ unsigned char BaseBlockDirty;
  /* 0x00c4 */ long Padding_700;
  /* 0x00c8 */ union _LARGE_INTEGER LastLogSwapTime;
  union
  {
    struct /* bitfield */
    {
      /* 0x00d0 */ unsigned short FirstLogFile : 3; /* bit position: 0 */
      /* 0x00d0 */ unsigned short SecondLogFile : 3; /* bit position: 3 */
      /* 0x00d0 */ unsigned short HeaderRecovered : 1; /* bit position: 6 */
      /* 0x00d0 */ unsigned short LegacyRecoveryIndicated : 1; /* bit position: 7 */
      /* 0x00d0 */ unsigned short RecoveryInformationReserved : 8; /* bit position: 8 */
    }; /* bitfield */
    /* 0x00d0 */ unsigned short RecoveryInformation;
  }; /* size: 0x0002 */
  /* 0x00d2 */ unsigned char LogEntriesRecovered[2];
  /* 0x00d4 */ unsigned long RefreshCount;
  /* 0x00d8 */ unsigned long StorageTypeCount;
  /* 0x00dc */ unsigned long Version;
  /* 0x00e0 */ struct _HVP_VIEW_MAP ViewMap;
  /* 0x0118 */ struct _DUAL Storage[2];
} HHIVE, *PHHIVE; /* size: 0x0608 */

typedef struct _WNF_STATE_NAME_REGISTRATION
{
  /* 0x0000 */ unsigned long MaxStateSize;
  /* 0x0004 */ long Padding_701;
  /* 0x0008 */ const struct _WNF_TYPE_ID* TypeId;
  /* 0x0010 */ struct _SECURITY_DESCRIPTOR* SecurityDescriptor;
} WNF_STATE_NAME_REGISTRATION, *PWNF_STATE_NAME_REGISTRATION; /* size: 0x0018 */

typedef struct _MI_AWE_ATTRIBUTE_CHANGE_WAIT_BLOCK
{
  /* 0x0000 */ struct _MI_AWE_ATTRIBUTE_CHANGE_WAIT_BLOCK* Next;
  /* 0x0008 */ struct _MMPFN* BasePfn;
  /* 0x0010 */ struct _KGATE Gate;
} MI_AWE_ATTRIBUTE_CHANGE_WAIT_BLOCK, *PMI_AWE_ATTRIBUTE_CHANGE_WAIT_BLOCK; /* size: 0x0028 */

typedef struct _HAL_HV_DMA_DOMAIN_CONFIG_ARM64
{
  /* 0x0000 */ union _LARGE_INTEGER Ttbr0;
  /* 0x0008 */ union _LARGE_INTEGER Ttbr1;
  /* 0x0010 */ unsigned long Mair0;
  /* 0x0014 */ unsigned long Mair1;
  /* 0x0018 */ unsigned char InputSize0;
  /* 0x0019 */ unsigned char InputSize1;
  /* 0x001a */ unsigned short Asid;
  /* 0x001c */ unsigned char CoherentTableWalks;
  /* 0x001d */ unsigned char TranslationEnabled;
  /* 0x001e */ char __PADDING__[2];
} HAL_HV_DMA_DOMAIN_CONFIG_ARM64, *PHAL_HV_DMA_DOMAIN_CONFIG_ARM64; /* size: 0x0020 */

struct _IOMMU_DMA_PASID_DEVICE;

typedef struct _PO_DIAG_STACK_RECORD
{
  /* 0x0000 */ unsigned long StackDepth;
  /* 0x0004 */ long Padding_702;
  /* 0x0008 */ void* Stack[1];
} PO_DIAG_STACK_RECORD, *PPO_DIAG_STACK_RECORD; /* size: 0x0010 */

struct _KTMNOTIFICATION_PACKET;

typedef struct _INVERTED_FUNCTION_TABLE_KERNEL_MODE
{
  /* 0x0000 */ unsigned long CurrentSize;
  /* 0x0004 */ unsigned long MaximumSize;
  /* 0x0008 */ volatile unsigned long Epoch;
  /* 0x000c */ unsigned char Overflow;
  /* 0x000d */ char Padding_703[3];
  /* 0x0010 */ struct _INVERTED_FUNCTION_TABLE_ENTRY TableEntry[256];
} INVERTED_FUNCTION_TABLE_KERNEL_MODE, *PINVERTED_FUNCTION_TABLE_KERNEL_MODE; /* size: 0x1810 */

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY
{
  /* 0x0000 */ unsigned long BeginAddress;
  /* 0x0004 */ unsigned long EndAddress;
  union
  {
    /* 0x0008 */ unsigned long UnwindInfoAddress;
    /* 0x0008 */ unsigned long UnwindData;
  }; /* size: 0x0004 */
} IMAGE_RUNTIME_FUNCTION_ENTRY, *PIMAGE_RUNTIME_FUNCTION_ENTRY; /* size: 0x000c */

typedef struct _DYNAMIC_FUNCTION_TABLE
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionTable;
  /* 0x0018 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0020 */ unsigned __int64 MinimumAddress;
  /* 0x0028 */ unsigned __int64 MaximumAddress;
  /* 0x0030 */ unsigned __int64 BaseAddress;
  /* 0x0038 */ void* Callback /* function */;
  /* 0x0040 */ void* Context;
  /* 0x0048 */ wchar_t* OutOfProcessCallbackDll;
  /* 0x0050 */ enum _FUNCTION_TABLE_TYPE Type;
  /* 0x0054 */ unsigned long EntryCount;
  /* 0x0058 */ struct _RTL_BALANCED_NODE TreeNodeMin;
  /* 0x0070 */ struct _RTL_BALANCED_NODE TreeNodeMax;
} DYNAMIC_FUNCTION_TABLE, *PDYNAMIC_FUNCTION_TABLE; /* size: 0x0088 */

typedef struct _CC_FILE_SIZES
{
  /* 0x0000 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0008 */ union _LARGE_INTEGER FileSize;
  /* 0x0010 */ union _LARGE_INTEGER ValidDataLength;
} CC_FILE_SIZES, *PCC_FILE_SIZES; /* size: 0x0018 */

typedef struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT
{
  /* 0x0000 */ struct _CM_KEY_CONTROL_BLOCK* BaseKcb;
  /* 0x0008 */ long PrepareStatus;
  /* 0x000c */ long Padding_704;
  /* 0x0010 */ struct _LIST_ENTRY ClonedKcbListHead;
} CMP_DISCARD_AND_REPLACE_KCB_CONTEXT, *PCMP_DISCARD_AND_REPLACE_KCB_CONTEXT; /* size: 0x0020 */

struct _PO_PROCESS_ENERGY_CONTEXT;

typedef struct _CM_UOW_SET_VALUE_KEY_DATA
{
  /* 0x0000 */ unsigned long PreparedCell;
  /* 0x0004 */ unsigned long OldValueCell;
  /* 0x0008 */ unsigned short NameLength;
  /* 0x000a */ char Padding_705[2];
  /* 0x000c */ unsigned long DataSize;
} CM_UOW_SET_VALUE_KEY_DATA, *PCM_UOW_SET_VALUE_KEY_DATA; /* size: 0x0010 */

typedef struct _INTERRUPT_LINE_INTERNAL_STATE
{
  /* 0x0000 */ unsigned char Fixed;
  /* 0x0001 */ unsigned char Irql;
  /* 0x0002 */ unsigned char Swapping;
  /* 0x0003 */ char Padding_706;
  /* 0x0004 */ unsigned long OldClusterId;
  /* 0x0008 */ unsigned long OldClusterMask;
  /* 0x000c */ unsigned char LineStateDetermined;
  /* 0x000d */ char __PADDING__[3];
} INTERRUPT_LINE_INTERNAL_STATE, *PINTERRUPT_LINE_INTERNAL_STATE; /* size: 0x0010 */

typedef struct _ACCESS_REASONS
{
  /* 0x0000 */ unsigned long Data[32];
} ACCESS_REASONS, *PACCESS_REASONS; /* size: 0x0080 */

typedef struct _CONTROLLER_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ long Padding_707;
  /* 0x0008 */ void* ControllerExtension;
  /* 0x0010 */ struct _KDEVICE_QUEUE DeviceWaitQueue;
  /* 0x0038 */ unsigned long Spare1;
  /* 0x003c */ long Padding_708;
  /* 0x0040 */ union _LARGE_INTEGER Spare2;
} CONTROLLER_OBJECT, *PCONTROLLER_OBJECT; /* size: 0x0048 */

typedef struct _MI_COMMON_PAGE_STATE
{
  /* 0x0000 */ struct _MMPFN* DummyPagePfn;
  /* 0x0008 */ unsigned __int64 DummyPage;
  /* 0x0010 */ struct _MI_FILLED_COMMON_PAGE_STATE GapFrames[2];
} MI_COMMON_PAGE_STATE, *PMI_COMMON_PAGE_STATE; /* size: 0x0080 */

struct _PS_SYSCALL_PROVIDER;

typedef struct _QUAD
{
  union
  {
    /* 0x0000 */ __int64 UseThisFieldToCopy;
    /* 0x0000 */ double DoNotUseThisField;
  }; /* size: 0x0008 */
} QUAD, *PQUAD; /* size: 0x0008 */

typedef struct _OBJECT_HEADER
{
  /* 0x0000 */ __int64 PointerCount;
  union
  {
    /* 0x0008 */ __int64 HandleCount;
    /* 0x0008 */ void* NextToFree;
  }; /* size: 0x0008 */
  /* 0x0010 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0018 */ unsigned char TypeIndex;
  union
  {
    /* 0x0019 */ unsigned char TraceFlags;
    struct /* bitfield */
    {
      /* 0x0019 */ unsigned char DbgRefTrace : 1; /* bit position: 0 */
      /* 0x0019 */ unsigned char DbgTracePermanent : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x001a */ unsigned char InfoMask;
  union
  {
    /* 0x001b */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x001b */ unsigned char NewObject : 1; /* bit position: 0 */
      /* 0x001b */ unsigned char KernelObject : 1; /* bit position: 1 */
      /* 0x001b */ unsigned char KernelOnlyAccess : 1; /* bit position: 2 */
      /* 0x001b */ unsigned char ExclusiveObject : 1; /* bit position: 3 */
      /* 0x001b */ unsigned char PermanentObject : 1; /* bit position: 4 */
      /* 0x001b */ unsigned char DefaultSecurityQuota : 1; /* bit position: 5 */
      /* 0x001b */ unsigned char SingleHandleEntry : 1; /* bit position: 6 */
      /* 0x001b */ unsigned char DeletedInline : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x001c */ unsigned long Reserved;
  union
  {
    /* 0x0020 */ struct _OBJECT_CREATE_INFORMATION* ObjectCreateInfo;
    /* 0x0020 */ void* QuotaBlockCharged;
  }; /* size: 0x0008 */
  /* 0x0028 */ void* SecurityDescriptor;
  /* 0x0030 */ struct _QUAD Body;
} OBJECT_HEADER, *POBJECT_HEADER; /* size: 0x0038 */

typedef struct _DUMMY_FILE_OBJECT
{
  /* 0x0000 */ struct _OBJECT_HEADER ObjectHeader;
  /* 0x0038 */ char FileObjectBody[216];
} DUMMY_FILE_OBJECT, *PDUMMY_FILE_OBJECT; /* size: 0x0110 */

typedef struct _HMAP_DIRECTORY
{
  /* 0x0000 */ struct _HMAP_TABLE* Directory[1024];
} HMAP_DIRECTORY, *PHMAP_DIRECTORY; /* size: 0x2000 */

typedef struct _IOMMU_DMA_LOGICAL_ALLOCATOR_OPERATIONS_V1
{
  /* 0x0000 */ void* AllocateLogicalAddress /* function */;
  /* 0x0008 */ void* FreeLogicalAddress /* function */;
  /* 0x0010 */ void* ReserveLogicalAddress /* function */;
  /* 0x0018 */ void* QueryCapabilities /* function */;
  /* 0x0020 */ void* CleanUp /* function */;
} IOMMU_DMA_LOGICAL_ALLOCATOR_OPERATIONS_V1, *PIOMMU_DMA_LOGICAL_ALLOCATOR_OPERATIONS_V1; /* size: 0x0028 */

typedef struct _EVENT_DATA_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 Ptr;
  /* 0x0008 */ unsigned long Size;
  union
  {
    /* 0x000c */ unsigned long Reserved;
    struct
    {
      /* 0x000c */ unsigned char Type;
      /* 0x000d */ unsigned char Reserved1;
      /* 0x000e */ unsigned short Reserved2;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} EVENT_DATA_DESCRIPTOR, *PEVENT_DATA_DESCRIPTOR; /* size: 0x0010 */

typedef struct _TRACE_LOGFILE_HEADER
{
  /* 0x0000 */ unsigned long BufferSize;
  union
  {
    /* 0x0004 */ unsigned long Version;
    struct
    {
      /* 0x0004 */ unsigned char MajorVersion;
      /* 0x0005 */ unsigned char MinorVersion;
      /* 0x0006 */ unsigned char SubVersion;
      /* 0x0007 */ unsigned char SubMinorVersion;
    } /* size: 0x0004 */ VersionDetail;
  }; /* size: 0x0004 */
  /* 0x0008 */ unsigned long ProviderVersion;
  /* 0x000c */ unsigned long NumberOfProcessors;
  /* 0x0010 */ union _LARGE_INTEGER EndTime;
  /* 0x0018 */ unsigned long TimerResolution;
  /* 0x001c */ unsigned long MaximumFileSize;
  /* 0x0020 */ unsigned long LogFileMode;
  /* 0x0024 */ unsigned long BuffersWritten;
  union
  {
    /* 0x0028 */ struct _GUID LogInstanceGuid;
    struct
    {
      /* 0x0028 */ unsigned long StartBuffers;
      /* 0x002c */ unsigned long PointerSize;
      /* 0x0030 */ unsigned long EventsLost;
      /* 0x0034 */ unsigned long CpuSpeedInMHz;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0038 */ wchar_t* LoggerName;
  /* 0x0040 */ wchar_t* LogFileName;
  /* 0x0048 */ struct _RTL_TIME_ZONE_INFORMATION TimeZone;
  /* 0x00f4 */ long Padding_709;
  /* 0x00f8 */ union _LARGE_INTEGER BootTime;
  /* 0x0100 */ union _LARGE_INTEGER PerfFreq;
  /* 0x0108 */ union _LARGE_INTEGER StartTime;
  /* 0x0110 */ unsigned long ReservedFlags;
  /* 0x0114 */ unsigned long BuffersLost;
} TRACE_LOGFILE_HEADER, *PTRACE_LOGFILE_HEADER; /* size: 0x0118 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY* ChainHead;
  /* 0x0008 */ struct _LIST_ENTRY* PrevLinkage;
  /* 0x0010 */ unsigned __int64 Signature;
} RTL_DYNAMIC_HASH_TABLE_CONTEXT, *PRTL_DYNAMIC_HASH_TABLE_CONTEXT; /* size: 0x0018 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
  union
  {
    /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    /* 0x0000 */ struct _LIST_ENTRY* CurEntry;
  }; /* size: 0x0018 */
  /* 0x0018 */ struct _LIST_ENTRY* ChainHead;
  /* 0x0020 */ unsigned long BucketIndex;
  /* 0x0024 */ long __PADDING__[1];
} RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, *PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR; /* size: 0x0028 */

typedef struct _PAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE L;
} PAGED_LOOKASIDE_LIST, *PPAGED_LOOKASIDE_LIST; /* size: 0x0080 */

typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ long Padding_710;
  /* 0x0008 */ const wchar_t* TriggerId;
} CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, *PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG; /* size: 0x0010 */

typedef struct _KPCR
{
  union
  {
    /* 0x0000 */ struct _NT_TIB NtTib;
    struct
    {
      /* 0x0000 */ union _KGDTENTRY64* GdtBase;
      /* 0x0008 */ struct _KTSS64* TssBase;
      /* 0x0010 */ unsigned __int64 UserRsp;
      /* 0x0018 */ struct _KPCR* Self;
      /* 0x0020 */ struct _KPRCB* CurrentPrcb;
      /* 0x0028 */ struct _KSPIN_LOCK_QUEUE* LockArray;
      /* 0x0030 */ void* Used_Self;
    }; /* size: 0x0038 */
  }; /* size: 0x0038 */
  /* 0x0038 */ union _KIDTENTRY64* IdtBase;
  /* 0x0040 */ unsigned __int64 Unused[2];
  /* 0x0050 */ unsigned char Irql;
  /* 0x0051 */ unsigned char SecondLevelCacheAssociativity;
  /* 0x0052 */ unsigned char ObsoleteNumber;
  /* 0x0053 */ unsigned char Fill0;
  /* 0x0054 */ unsigned long Unused0[3];
  /* 0x0060 */ unsigned short MajorVersion;
  /* 0x0062 */ unsigned short MinorVersion;
  /* 0x0064 */ unsigned long StallScaleFactor;
  /* 0x0068 */ void* Unused1[3];
  /* 0x0080 */ unsigned long KernelReserved[15];
  /* 0x00bc */ unsigned long SecondLevelCacheSize;
  /* 0x00c0 */ unsigned long HalReserved[16];
  /* 0x0100 */ unsigned long Unused2;
  /* 0x0104 */ long Padding_711;
  /* 0x0108 */ void* KdVersionBlock;
  /* 0x0110 */ void* Unused3;
  /* 0x0118 */ unsigned long PcrAlign1[24];
} KPCR, *PKPCR; /* size: 0x0178 */

typedef struct _EXCEPTION_REGISTRATION_RECORD
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* Next;
  /* 0x0008 */ void* Handler /* function */;
} EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD; /* size: 0x0010 */

typedef union _ARM64_FPCR_REG
{
  union
  {
    /* 0x0000 */ unsigned long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long res0_1 : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned long IOE : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long DZE : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned long OFE : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned long UFE : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned long IXE : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned long res0_2 : 2; /* bit position: 13 */
      /* 0x0000 */ unsigned long IDE : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned long Len : 3; /* bit position: 16 */
      /* 0x0000 */ unsigned long FZ16 : 1; /* bit position: 19 */
      /* 0x0000 */ unsigned long Stride : 2; /* bit position: 20 */
      /* 0x0000 */ unsigned long RMode : 2; /* bit position: 22 */
      /* 0x0000 */ unsigned long FZ : 1; /* bit position: 24 */
      /* 0x0000 */ unsigned long DN : 1; /* bit position: 25 */
      /* 0x0000 */ unsigned long AHP : 1; /* bit position: 26 */
      /* 0x0000 */ unsigned long res0_3 : 5; /* bit position: 27 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} ARM64_FPCR_REG, *PARM64_FPCR_REG; /* size: 0x0004 */

typedef struct _MI_ACCESS_VIOLATION_RANGE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE Node;
  /* 0x0018 */ void* Va;
  /* 0x0020 */ void* EndVaInclusive;
} MI_ACCESS_VIOLATION_RANGE, *PMI_ACCESS_VIOLATION_RANGE; /* size: 0x0028 */

typedef struct _MI_POOL_STATE
{
  /* 0x0000 */ unsigned __int64 MaximumNonPagedPoolThreshold;
  /* 0x0008 */ volatile unsigned __int64 AllocatedNonPagedPool;
  /* 0x0010 */ volatile unsigned __int64 AllocatedSecureNonPagedPool;
  /* 0x0018 */ unsigned long HighEventSets;
  /* 0x001c */ unsigned char HighEventSetsValid;
  /* 0x001d */ char Padding_712[3];
  /* 0x0020 */ unsigned __int64 LowPagedPoolThreshold;
  /* 0x0028 */ unsigned __int64 HighPagedPoolThreshold;
  /* 0x0030 */ volatile long PermittedFaultsLock;
  /* 0x0034 */ long Padding_713;
  /* 0x0038 */ struct _RTL_AVL_TREE PermittedFaultsTree;
  /* 0x0040 */ struct _MI_ACCESS_VIOLATION_RANGE PermittedFaultsInitialNode[2];
  /* 0x0090 */ unsigned __int64 TotalPagedPoolQuota;
  /* 0x0098 */ unsigned __int64 TotalNonPagedPoolQuota;
  /* 0x00a0 */ long Padding_714[8];
  /* 0x00c0 */ struct _MI_WORKING_SET_LOCK_ARRAY PagedPoolWorkingSetLockArray[4];
} MI_POOL_STATE, *PMI_POOL_STATE; /* size: 0x01c0 */

typedef struct _MI_UNUSED_SEGMENT_TRACES
{
  /* 0x0000 */ unsigned __int64 ElapsedTime;
  /* 0x0008 */ unsigned __int64 PagesMoved;
  /* 0x0010 */ unsigned __int64 PagesFlushed;
  /* 0x0018 */ unsigned long NumberOfThreads;
  /* 0x001c */ long __PADDING__[1];
} MI_UNUSED_SEGMENT_TRACES, *PMI_UNUSED_SEGMENT_TRACES; /* size: 0x0020 */

typedef union _MMSUBSECTION_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long SubsectionAccessed : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Protection : 5; /* bit position: 1 */
      /* 0x0000 */ unsigned long StartingSector4132 : 10; /* bit position: 6 */
      /* 0x0000 */ unsigned long SubsectionStatic : 1; /* bit position: 16 */
      /* 0x0000 */ unsigned long GlobalMemory : 1; /* bit position: 17 */
      /* 0x0000 */ unsigned long Spare : 1; /* bit position: 18 */
      /* 0x0000 */ unsigned long OnDereferenceList : 1; /* bit position: 19 */
      /* 0x0000 */ unsigned long SectorEndOffset : 12; /* bit position: 20 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long EntireField;
  }; /* size: 0x0004 */
} MMSUBSECTION_FLAGS, *PMMSUBSECTION_FLAGS; /* size: 0x0004 */

typedef struct _SUBSECTION
{
  /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0008 */ struct _MMPTE* SubsectionBase;
  /* 0x0010 */ struct _SUBSECTION* NextSubsection;
  union
  {
    /* 0x0018 */ struct _RTL_AVL_TREE GlobalPerSessionHead;
    /* 0x0018 */ struct _MI_CONTROL_AREA_WAIT_BLOCK* CreationWaitList;
  }; /* size: 0x0008 */
  /* 0x0020 */ union _MMSUBSECTION_FLAGS SubsectionFlags;
  /* 0x0024 */ unsigned long StartingSector;
  /* 0x0028 */ unsigned long NumberOfFullSectors;
  /* 0x002c */ unsigned long PtesInSubsection;
  union
  {
    union
    {
      /* 0x0030 */ struct _MI_SUBSECTION_ENTRY1 e1;
      /* 0x0030 */ unsigned long EntireField;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  struct /* bitfield */
  {
    /* 0x0034 */ unsigned long UnusedPtes : 30; /* bit position: 0 */
    /* 0x0034 */ unsigned long ExtentQueryNeeded : 1; /* bit position: 30 */
    /* 0x0034 */ unsigned long Spare : 1; /* bit position: 31 */
  }; /* bitfield */
} SUBSECTION, *PSUBSECTION; /* size: 0x0038 */

typedef struct _MSUBSECTION
{
  /* 0x0000 */ struct _SUBSECTION Core;
  /* 0x0038 */ struct _RTL_BALANCED_NODE SubsectionNode;
  /* 0x0050 */ unsigned __int64 NumberOfMappedViews;
  /* 0x0058 */ struct _LIST_ENTRY DereferenceList;
  /* 0x0068 */ unsigned long NumberOfPfnReferences;
  /* 0x006c */ unsigned long LargeViews;
  /* 0x0070 */ void* SubsectionExtentList;
  /* 0x0078 */ struct _MI_PROTOTYPE_PTES_NODE ProtosNode;
} MSUBSECTION, *PMSUBSECTION; /* size: 0x0098 */

typedef struct _MI_DLL_OVERFLOW_AREA
{
  /* 0x0000 */ void* RangeStart;
  /* 0x0008 */ void* NextVa;
  /* 0x0010 */ void* RangeStartAbove2gb;
  /* 0x0018 */ void* NextVaAbove2gb;
} MI_DLL_OVERFLOW_AREA, *PMI_DLL_OVERFLOW_AREA; /* size: 0x0020 */

typedef struct _MI_SECTION_WOW_STATE
{
  /* 0x0000 */ struct _RTL_BITMAP_EX ImageBitMap;
  /* 0x0010 */ struct _MI_DLL_OVERFLOW_AREA OverflowArea;
  /* 0x0030 */ struct _SECTION* CfgBitMapSection;
  /* 0x0038 */ struct _CONTROL_AREA* CfgBitMapControlArea;
} MI_SECTION_WOW_STATE, *PMI_SECTION_WOW_STATE; /* size: 0x0040 */

typedef struct _MI_SECTION_STATE
{
  /* 0x0000 */ volatile long SectionObjectPointersLock;
  /* 0x0004 */ long Padding_715;
  /* 0x0008 */ struct _RTL_AVL_TREE SectionBasedRoot;
  /* 0x0010 */ struct _EX_PUSH_LOCK SectionBasedLock;
  /* 0x0018 */ volatile unsigned __int64 UnusedSegmentPagedPool;
  /* 0x0020 */ long CalibrationIndex;
  /* 0x0024 */ long Padding_716;
  /* 0x0028 */ struct _MI_UNUSED_SEGMENT_TRACES CalibrationData[64];
  /* 0x0828 */ unsigned long DataSectionProtectionMask;
  /* 0x082c */ long Padding_717;
  /* 0x0830 */ void* HighSectionBase;
  /* 0x0838 */ struct _MSUBSECTION PhysicalSubsection;
  /* 0x08d0 */ struct _CONTROL_AREA PhysicalControlArea;
  /* 0x0950 */ struct _MMPFNLIST PurgingExtentPages;
  /* 0x09a8 */ struct _MI_PAGE_CHAIN_HEAD DanglingExtentPages;
  /* 0x09c0 */ struct _WORK_QUEUE_ITEM DanglingExtentsWorkItem;
  /* 0x09e0 */ struct _MI_EXTENT_DELETION_WAIT_BLOCK DanglingExtentsDeletionWaitList;
  /* 0x0a00 */ unsigned char FileOnlyMemoryPfnsCreated;
  /* 0x0a01 */ unsigned char DanglingExtentsWorkerActive;
  /* 0x0a02 */ unsigned char PurgingExtentsNeedWatchdog;
  /* 0x0a03 */ char Padding_718[5];
  /* 0x0a08 */ struct _RTL_AVL_TREE PrototypePtesTree;
  /* 0x0a10 */ volatile long PrototypePtesTreeSpinLock;
  /* 0x0a14 */ long Padding_719;
  /* 0x0a18 */ struct _EX_PUSH_LOCK PrivateFixupMappingLock;
  /* 0x0a20 */ struct _MMPTE* PrivateFixupPte;
  /* 0x0a28 */ struct _EX_PUSH_LOCK RelocateBitmapsLock;
  /* 0x0a30 */ struct _RTL_BITMAP_EX ImageBitMapNative;
  /* 0x0a40 */ unsigned __int64 ImageBiasNative;
  /* 0x0a48 */ struct _MI_DLL_OVERFLOW_AREA OverflowArea;
  /* 0x0a68 */ struct _MI_SECTION_WOW_STATE Wow[1];
  /* 0x0aa8 */ unsigned __int64 ImageBiasWow;
  /* 0x0ab0 */ struct _RTL_BITMAP_EX ImageBitMapWowScratch;
  /* 0x0ac0 */ struct _RTL_BITMAP_EX ImageBitMap64Low;
  /* 0x0ad0 */ unsigned __int64 ImageBias64Low;
  /* 0x0ad8 */ void* ApiSetSection;
  /* 0x0ae0 */ void* ApiSetSchema;
  /* 0x0ae8 */ unsigned __int64 ApiSetSchemaSize;
  /* 0x0af0 */ unsigned long LostDataFiles;
  /* 0x0af4 */ unsigned long LostDataPages;
  /* 0x0af8 */ unsigned long ImageFailureReason;
  /* 0x0afc */ long Padding_720;
  /* 0x0b00 */ struct _SECTION* CfgBitMapSection;
  /* 0x0b08 */ struct _CONTROL_AREA* CfgBitMapControlArea;
  /* 0x0b10 */ struct _RTL_BITMAP_EX KernelCfgBitMap;
  /* 0x0b20 */ struct _EX_PUSH_LOCK KernelCfgBitMapLock;
  /* 0x0b28 */ unsigned long ImageCfgFailure;
  /* 0x0b2c */ long Padding_721;
  /* 0x0b30 */ void* KernelScpStartAddress;
  /* 0x0b38 */ unsigned long KernelScpReservePages;
  /* 0x0b3c */ unsigned long KernelScpPages;
  /* 0x0b40 */ struct _MDL* KernelScpMdl;
  /* 0x0b48 */ long RetpolineBootStatus;
  /* 0x0b4c */ long Padding_722;
  /* 0x0b50 */ struct _MMPTE* RetpolineRevertPte;
  /* 0x0b58 */ struct _RTL_BITMAP_EX KernelRetpolineBitMap;
  /* 0x0b68 */ struct _LIST_ENTRY NonRetpolineImageLoadList;
  /* 0x0b78 */ unsigned long ImageBreakpointEnabled;
  /* 0x0b7c */ unsigned long ImageBreakpointChecksum;
  /* 0x0b80 */ unsigned long ImageBreakpointSize;
  /* 0x0b84 */ volatile long ImageValidationFailed;
  /* 0x0b88 */ struct _RTL_AVL_TREE ExtentTree[2];
  /* 0x0b98 */ struct _EX_PUSH_LOCK ExtentTreeLock;
  /* 0x0ba0 */ unsigned long ImageViewExtensionOffsets[3];
  /* 0x0bac */ unsigned long TotalImageViewExtensionSize;
  /* 0x0bb0 */ unsigned long TotalImageViewReservationSize;
  /* 0x0bb4 */ long Padding_723;
  /* 0x0bb8 */ struct _MI_COMBINE_BLOCK* ScpCfgPages[4];
  /* 0x0bd8 */ struct _MI_COMBINE_BLOCK* EmulatedScpCfgPages[4];
  /* 0x0bf8 */ long __PADDING__[2];
} MI_SECTION_STATE, *PMI_SECTION_STATE; /* size: 0x0c00 */

typedef struct _MM_SYSTEM_PAGE_COUNTS
{
  /* 0x0000 */ volatile unsigned long SystemCodePage;
  /* 0x0004 */ volatile unsigned long SystemDriverPage;
  /* 0x0008 */ volatile long TotalSystemCodePages;
  /* 0x000c */ volatile long TotalSystemDriverPages;
} MM_SYSTEM_PAGE_COUNTS, *PMM_SYSTEM_PAGE_COUNTS; /* size: 0x0010 */

typedef struct _RTL_FUNCTION_OVERRIDE_CAPABILITIES
{
  /* 0x0000 */ unsigned char AMD64Capabilities[41];
  /* 0x0029 */ unsigned char AMD64KernelCapabilities[41];
} RTL_FUNCTION_OVERRIDE_CAPABILITIES, *PRTL_FUNCTION_OVERRIDE_CAPABILITIES; /* size: 0x0052 */

typedef struct _MI_SYSTEM_IMAGE_STATE
{
  /* 0x0000 */ struct _LIST_ENTRY FixupList;
  /* 0x0010 */ struct _ETHREAD* LoadLockOwner;
  /* 0x0018 */ unsigned long LoadLockCount;
  /* 0x001c */ volatile long FixupLock;
  /* 0x0020 */ struct _EX_PUSH_LOCK EncodeDecodeLock;
  /* 0x0028 */ unsigned long EncodeDecodeDepth;
  /* 0x002c */ unsigned char FirstLoadEver;
  /* 0x002d */ unsigned char SystemImagesLoaded;
  /* 0x002e */ char Padding_724[2];
  /* 0x0030 */ struct _LIST_ENTRY StrongCodeLoadFailureList;
  /* 0x0040 */ struct _KLDR_DATA_TABLE_ENTRY* SystemBase[1];
  /* 0x0048 */ struct _RTL_BITMAP_EX BaseImageDiscardedBitmaps[1];
  /* 0x0058 */ struct _EX_PUSH_LOCK MappingRangesPushLock;
  /* 0x0060 */ struct _MI_DRIVER_VA* MappingRanges;
  /* 0x0068 */ struct _MM_SYSTEM_PAGE_COUNTS PageCounts;
  /* 0x0078 */ struct _EX_PUSH_LOCK CollidedLock;
  /* 0x0080 */ struct _RTL_AVL_TREE ImageTree;
  /* 0x0088 */ struct _LIST_ENTRY LoadInProgress;
  /* 0x0098 */ unsigned __int64 ImportEntriesReplaced;
  /* 0x00a0 */ struct _EX_PUSH_LOCK SecurePteExclusionLock;
  /* 0x00a8 */ void* SecurePteExclusionBase;
  /* 0x00b0 */ void* SecurePteExclusionTop;
  /* 0x00b8 */ long Padding_725[2];
  /* 0x00c0 */ struct _MI_WORKING_SET_LOCK_ARRAY WorkingSetLockArray[4];
  /* 0x01c0 */ struct _RTL_FUNCTION_OVERRIDE_CAPABILITIES FunctionOverrideCapabilities;
  /* 0x0212 */ char __PADDING__[46];
} MI_SYSTEM_IMAGE_STATE, *PMI_SYSTEM_IMAGE_STATE; /* size: 0x0240 */

typedef struct _MI_PROCESS_STATE
{
  /* 0x0000 */ void* SystemDllBase;
  /* 0x0008 */ unsigned long ColorSeed;
  /* 0x000c */ long RotatingUniprocessorNumber;
  /* 0x0010 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x0018 */ struct _LIST_ENTRY ProcessList;
  /* 0x0028 */ struct _MMPTE* SharedUserDataPte[2];
  /* 0x0038 */ void* HypervisorSharedVa;
  /* 0x0040 */ unsigned __int64 VadSecureCookie;
  /* 0x0048 */ void* NativeCfgBitmapPreferredAddress;
  /* 0x0050 */ void* EcBitmapPreferredAddress;
} MI_PROCESS_STATE, *PMI_PROCESS_STATE; /* size: 0x0058 */

typedef struct _MI_HARDWARE_STATE
{
  /* 0x0000 */ volatile unsigned long NumaHintIndex;
  /* 0x0004 */ unsigned long NumaLastRangeIndexInclusive;
  /* 0x0008 */ unsigned char MemoryNodeWithNoProcessorsFound;
  /* 0x0009 */ unsigned char AccessBitReplacementHonored;
  /* 0x000a */ unsigned char ChannelHintIndex;
  /* 0x000b */ unsigned char ChannelLastRangeIndexInclusive;
  /* 0x000c */ long Padding_726;
  /* 0x0010 */ struct _MI_NODE_NUMBER_ZERO_BASED* NodeGraph;
  /* 0x0018 */ struct _MI_SYSTEM_NODE_AFFINITY_INFORMATION AffinityInfo;
  /* 0x0038 */ struct _MI_SYSTEM_NODE_NONPAGED_POOL* SystemNodeNonPagedPool;
  /* 0x0040 */ struct _HAL_NODE_RANGE TemporaryNumaRanges[2];
  /* 0x0060 */ struct _HAL_NODE_RANGE* NumaMemoryRanges;
  /* 0x0068 */ struct _HAL_CHANNEL_MEMORY_RANGES* ChannelMemoryRanges;
  /* 0x0070 */ unsigned long SecondLevelCacheSize;
  /* 0x0074 */ unsigned long FirstLevelCacheSize;
  /* 0x0078 */ unsigned long PhysicalAddressBits;
  /* 0x007c */ unsigned long PfnDatabasePageBits;
  /* 0x0080 */ unsigned char ProcessorCachesFlushedOnPowerLoss;
  /* 0x0081 */ unsigned char PageTableReuseRequiresFlush;
  /* 0x0082 */ char Padding_727[6];
  /* 0x0088 */ unsigned __int64 TotalPagesAllowed;
  /* 0x0090 */ unsigned long FlushTbForAttributeChange;
  /* 0x0094 */ unsigned long FlushCacheForAttributeChange;
  /* 0x0098 */ unsigned long FlushCacheForPageAttributeChange;
  /* 0x009c */ unsigned long CacheFlushPromoteThreshold;
  /* 0x00a0 */ long Padding_728[8];
  /* 0x00c0 */ unsigned __int64 InvalidPteMask;
  /* 0x00c8 */ long Padding_729[14];
  /* 0x0100 */ unsigned long PageColors[4];
  /* 0x0110 */ unsigned __int64 FlushTbThreshold;
  /* 0x0118 */ unsigned char AttributeChangeRequiresReZero;
  /* 0x0119 */ char Padding_730[7];
  /* 0x0120 */ unsigned __int64 HighestPossiblePhysicalPage;
  /* 0x0128 */ unsigned __int64 VsmKernelPageCount;
  /* 0x0130 */ unsigned __int64 HugePageRemoveTracker[512];
  /* 0x1130 */ volatile unsigned __int64 HotAddSequenceNumber;
  /* 0x1138 */ unsigned __int64 HotRemoveSequenceNumber;
  /* 0x1140 */ struct _LIST_ENTRY HotAddsInFlight;
  /* 0x1150 */ unsigned long HotAddInFlightCount;
  /* 0x1154 */ unsigned long HotAddInFlightNumaCount;
  /* 0x1158 */ long Padding_731[10];
  /* 0x1180 */ volatile long ParkedCoresLock;
  /* 0x1184 */ long Padding_732;
  /* 0x1188 */ struct _KAFFINITY_EX ParkedCores;
  /* 0x1290 */ struct _WORK_QUEUE_ITEM ParkedCoresWorkItem;
  /* 0x12b0 */ struct _EX_PUSH_LOCK ShadowPageTablesLock;
  /* 0x12b8 */ volatile unsigned __int64 SpecialPurposeMemoryTypeId;
  /* 0x12c0 */ unsigned long SpecialPurposeMemoryQueryTypeExtraSpace;
  /* 0x12c4 */ unsigned char GlobalBitPolarity[2];
  /* 0x12c6 */ char __PADDING__[58];
} MI_HARDWARE_STATE, *PMI_HARDWARE_STATE; /* size: 0x1300 */

typedef struct _MI_COMBINE_STATE
{
  /* 0x0000 */ volatile long ActiveSpinLock;
  /* 0x0004 */ unsigned long CombiningThreadCount;
  /* 0x0008 */ struct _RTL_AVL_TREE ActiveThreadTree;
  /* 0x0010 */ unsigned __int64 CommonPageCombineDomain;
  /* 0x0018 */ unsigned long CommonCombineDomainAssigned;
  /* 0x001c */ volatile long CombineSequence;
} MI_COMBINE_STATE, *PMI_COMBINE_STATE; /* size: 0x0020 */

typedef struct _MI_PAGELIST_STATE
{
  /* 0x0000 */ volatile long ActiveSpinLock;
  /* 0x0004 */ long Padding_733;
  /* 0x0008 */ struct _RTL_AVL_TREE ActiveThreadTree;
  /* 0x0010 */ volatile long ActiveZeroSpinLock;
  /* 0x0014 */ long Padding_734;
  /* 0x0018 */ struct _RTL_AVL_TREE ActiveZeroThreadTree;
  /* 0x0020 */ struct _MMPFN LargePfnTemplate;
  /* 0x0050 */ struct _MMPFN LargePfnBasePageTemplate;
  /* 0x0080 */ unsigned long NumberOfZeroFreePageListHeads;
  /* 0x0084 */ long Padding_735;
  /* 0x0088 */ struct _KEVENT Phase1BootComplete;
  /* 0x00a0 */ struct _RTL_AVL_TREE PendingBadPageTree;
  /* 0x00a8 */ unsigned __int64 PendingBadPageCount;
  /* 0x00b0 */ volatile long PendingBadPageTreeLock;
  /* 0x00b4 */ long Padding_736;
  /* 0x00b8 */ unsigned __int64 PendingBadPagesWithoutNodesCount;
  /* 0x00c0 */ struct _LIST_ENTRY PendingBadPageNodesAwaitingDeleteList;
  /* 0x00d0 */ unsigned __int64 PendingBadPageNodesAwaitingDeleteCount;
  /* 0x00d8 */ unsigned char PendingBadPageNodeDeleteActive;
  /* 0x00d9 */ char Padding_737[7];
  /* 0x00e0 */ struct _WORK_QUEUE_ITEM PendingBadPageNodeDeleteWorkItem;
  /* 0x0100 */ struct _RTL_AVL_TREE BadHugePageTree;
  /* 0x0108 */ unsigned __int64 BadHugePageCount;
} MI_PAGELIST_STATE, *PMI_PAGELIST_STATE; /* size: 0x0110 */

typedef struct _MI_BAD_MEMORY_EVENT_ENTRY
{
  /* 0x0000 */ unsigned long BugCheckCode;
  /* 0x0004 */ long Active;
  /* 0x0008 */ unsigned long Data;
  /* 0x000c */ long Padding_738;
  /* 0x0010 */ union _LARGE_INTEGER PhysicalAddress;
  /* 0x0018 */ struct _WORK_QUEUE_ITEM WorkItem;
} MI_BAD_MEMORY_EVENT_ENTRY, *PMI_BAD_MEMORY_EVENT_ENTRY; /* size: 0x0038 */

typedef struct _MI_PROBE_RAISE_TRACKER
{
  /* 0x0000 */ unsigned long UserRangeInKernel;
  /* 0x0004 */ unsigned long FaultFailed;
  /* 0x0008 */ unsigned long WriteFaultFailed;
  /* 0x000c */ unsigned long LargePageFailed;
  /* 0x0010 */ unsigned long UserAccessToKernelPte;
  /* 0x0014 */ unsigned long BadPageLocation;
  /* 0x0018 */ unsigned long InsufficientCharge;
  /* 0x001c */ unsigned long PageTableCharge;
  /* 0x0020 */ unsigned long NoIoReference;
  /* 0x0024 */ unsigned long ProbeFailed;
  /* 0x0028 */ unsigned long PteIsZero;
  /* 0x002c */ unsigned long StrongCodeWrite;
  /* 0x0030 */ unsigned long ReducedCloneCommitChargeFailed;
  /* 0x0034 */ unsigned long CopyOnWriteAtDispatchNoPages;
  /* 0x0038 */ unsigned long NoPageTablesAllowed;
  /* 0x003c */ unsigned long EnclavePageFailed;
} MI_PROBE_RAISE_TRACKER, *PMI_PROBE_RAISE_TRACKER; /* size: 0x0040 */

typedef struct _MI_RESAVAIL_FAILURES
{
  /* 0x0000 */ unsigned long Wrap;
  /* 0x0004 */ unsigned long NoCharge;
} MI_RESAVAIL_FAILURES, *PMI_RESAVAIL_FAILURES; /* size: 0x0008 */

typedef struct _MI_ERROR_STATE
{
  /* 0x0000 */ struct _MI_BAD_MEMORY_EVENT_ENTRY BadMemoryEventEntry;
  /* 0x0038 */ struct _MI_PROBE_RAISE_TRACKER ProbeRaises;
  /* 0x0078 */ struct _MI_FORCED_COMMITS ForcedCommits;
  /* 0x0080 */ enum _MI_PRE_PHASE0_BUGCHECK_PARAMETER PrePhase0BugCheckParameter;
  /* 0x0084 */ unsigned long WsleFailures;
  /* 0x0088 */ unsigned char PendingBadPages;
  /* 0x0089 */ unsigned char FatalGraphicsFailures;
  /* 0x008a */ unsigned char BadPagesInsertSignalState;
  /* 0x008b */ char Padding_739;
  /* 0x008c */ enum _MI_PAGE_HASH_ERROR_BEHAVIOR PageHashErrorBehavior;
  /* 0x0090 */ unsigned long PageHashReadErrors;
  /* 0x0094 */ unsigned long PageHashStandbyErrors;
  /* 0x0098 */ unsigned long PageHashTransferErrors;
  /* 0x009c */ unsigned long PageHashAllocationErrors;
  /* 0x00a0 */ unsigned __int64 FailedHashPageFrameIndex;
  /* 0x00a8 */ unsigned long CheckZeroCount;
  /* 0x00ac */ volatile unsigned long ZeroedPageSingleBitErrorsDetected;
  /* 0x00b0 */ volatile unsigned long BadPagesDetected;
  /* 0x00b4 */ unsigned long BadPagesInserted;
  /* 0x00b8 */ struct _WORK_QUEUE_ITEM BadPageInsertWorkItem;
  /* 0x00d8 */ unsigned long ScrubPasses;
  /* 0x00dc */ unsigned long ScrubBadPagesFound;
  /* 0x00e0 */ unsigned long UserViewFailures;
  /* 0x00e4 */ unsigned long UserViewCollisionFailures;
  /* 0x00e8 */ unsigned long UserAllocateFailures;
  /* 0x00ec */ unsigned long UserAllocateCollisionFailures;
  /* 0x00f0 */ struct _MI_RESAVAIL_FAILURES ResavailFailures;
  /* 0x00f8 */ volatile unsigned long BadPhysicalMapsEarly;
  /* 0x00fc */ volatile unsigned long BadPhysicalMaps;
} MI_ERROR_STATE, *PMI_ERROR_STATE; /* size: 0x0100 */

typedef struct _MI_PAGEFILE_METADATA_LAYOUT
{
  /* 0x0000 */ unsigned long EntryInBytes;
  /* 0x0004 */ unsigned long OwningPteOffset;
} MI_PAGEFILE_METADATA_LAYOUT, *PMI_PAGEFILE_METADATA_LAYOUT; /* size: 0x0008 */

typedef struct _MI_PAGING_IO_STATE
{
  /* 0x0000 */ struct _RTL_AVL_TREE PageFileHead;
  /* 0x0008 */ volatile long PageFileHeadSpinLock;
  /* 0x000c */ struct _MI_PAGEFILE_METADATA_LAYOUT PageFileMetadata;
  /* 0x0014 */ long PrefetchSeekThreshold;
  /* 0x0018 */ unsigned long InPageSinglePages;
  /* 0x001c */ long Padding_740;
  /* 0x0020 */ union _SLIST_HEADER InPageSupportSListHead[2];
  /* 0x0040 */ union _SLIST_HEADER ReservedInPageSupportSListHead[2];
  /* 0x0060 */ unsigned char InPageSupportSListMinimum[2];
  /* 0x0062 */ char Padding_741[6];
  /* 0x0068 */ struct _MMINPAGE_SUPPORT* FirstReservedInPageBlock[2];
  /* 0x0078 */ struct _MMINPAGE_SUPPORT* LastReservedInPageBlock[2];
  /* 0x0088 */ struct _MMPTE* ReservedPtes;
  /* 0x0090 */ volatile long ReservedPtesLock;
  /* 0x0094 */ unsigned long ReservedPtesBitBuffer;
  /* 0x0098 */ volatile long DelayPageFaults;
  /* 0x009c */ unsigned char MdlsAdjusted;
  /* 0x009d */ char Padding_742[3];
  /* 0x00a0 */ volatile long NumberOfFailedStoreReads;
  /* 0x00a4 */ long __PADDING__[3];
} MI_PAGING_IO_STATE, *PMI_PAGING_IO_STATE; /* size: 0x00b0 */

typedef struct _MI_SYSTEM_TRIM_STATE
{
  /* 0x0000 */ volatile long ExpansionLock;
  /* 0x0004 */ volatile long TrimInProgressCount;
  /* 0x0008 */ struct _KEVENT PeriodicWorkingSetEvent;
  /* 0x0020 */ struct _MI_VERIFIER_TRIM_STATE Verifier;
  /* 0x0040 */ unsigned long TrimAllPageFaultCount[4];
  /* 0x0050 */ struct _ETHREAD* volatile EmptyAllThread;
  /* 0x0058 */ unsigned long FaultedInSystemPage;
  /* 0x005c */ long __PADDING__[9];
} MI_SYSTEM_TRIM_STATE, *PMI_SYSTEM_TRIM_STATE; /* size: 0x0080 */

typedef struct _MI_SYSTEM_ACCELERATORS
{
  /* 0x0000 */ struct _LIST_ENTRY HardwareInstances;
  /* 0x0010 */ unsigned long NumberOfHardwareInstances;
  /* 0x0014 */ unsigned char ShuttingDown;
  /* 0x0015 */ unsigned char AllocationFailures;
  /* 0x0016 */ unsigned char AllocationQueryFailures;
  /* 0x0017 */ unsigned char AllocationQueryBadNodes;
  /* 0x0018 */ struct _SINGLE_LIST_ENTRY DeferredPoolFrees;
  /* 0x0020 */ void** OpaqueContext;
  /* 0x0028 */ volatile long Lock;
  /* 0x002c */ long __PADDING__[1];
} MI_SYSTEM_ACCELERATORS, *PMI_SYSTEM_ACCELERATORS; /* size: 0x0030 */

typedef struct _MI_HOT_PATCH_STATE
{
  /* 0x0000 */ struct _RTL_AVL_TREE UserSidPatchLists;
  /* 0x0008 */ struct _RTL_AVL_TREE GlobalHotPatchList;
  /* 0x0010 */ struct _RTL_AVL_TREE PreviouslyRegisteredHotPatchList;
  /* 0x0018 */ struct _RTL_AVL_TREE SecureImageActivePatches;
  /* 0x0020 */ struct _EX_PUSH_LOCK HotPatchListLock;
  /* 0x0028 */ struct _KLDR_DATA_TABLE_ENTRY* InProgressPatchTableEntry;
  /* 0x0030 */ struct _KLDR_DATA_TABLE_ENTRY* InProgressBaseTableEntry;
  /* 0x0038 */ volatile char ReadyForPatchOperations;
  /* 0x0039 */ char Padding_743[3];
  /* 0x003c */ unsigned long HotPatchReserveSize;
  /* 0x0040 */ unsigned long DriverProxyReserveSize;
  struct /* bitfield */
  {
    /* 0x0044 */ unsigned long HotPatchingEnabled : 1; /* bit position: 0 */
    /* 0x0044 */ unsigned long Spare : 31; /* bit position: 1 */
  }; /* bitfield */
} MI_HOT_PATCH_STATE, *PMI_HOT_PATCH_STATE; /* size: 0x0048 */

typedef struct _MI_ENCLAVE_STATE
{
  /* 0x0000 */ struct _RTL_AVL_TREE EnclaveRegions;
  /* 0x0008 */ void* EnclaveMetadataPage;
  /* 0x0010 */ struct _RTL_BITMAP* EnclaveMetadataBitMap;
  /* 0x0018 */ struct _EX_PUSH_LOCK EnclaveMetadataEntryLock;
  /* 0x0020 */ volatile long EnclaveMetadataPageLock;
  /* 0x0024 */ long Padding_744;
  /* 0x0028 */ struct _LIST_ENTRY EnclaveList;
  /* 0x0038 */ struct _EX_PUSH_LOCK EnclaveListLock;
  /* 0x0040 */ struct _EX_RUNDOWN_REF ShutdownRundown;
} MI_ENCLAVE_STATE, *PMI_ENCLAVE_STATE; /* size: 0x0048 */

typedef struct _MM_PAGED_POOL_INFO
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0008 */ unsigned __int64 MaximumSize;
  /* 0x0010 */ volatile unsigned __int64 AllocatedPagedPool;
} MM_PAGED_POOL_INFO, *PMM_PAGED_POOL_INFO; /* size: 0x0018 */

typedef struct _MI_VISIBLE_STATE
{
  /* 0x0000 */ struct _MM_PAGED_POOL_INFO PagedPoolInfo;
  /* 0x0018 */ unsigned __int64 MaximumNonPagedPoolInPages;
  /* 0x0020 */ unsigned __int64 SizeOfPagedPoolInPages;
  /* 0x0028 */ struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;
  /* 0x0088 */ volatile unsigned __int64 NonPagedPoolCommit;
  /* 0x0090 */ volatile unsigned __int64 SmallNonPagedPtesCommit;
  /* 0x0098 */ volatile unsigned __int64 BootCommit;
  /* 0x00a0 */ volatile unsigned __int64 SystemPageTableCommit;
  /* 0x00a8 */ volatile unsigned __int64 ProcessCommit;
  /* 0x00b0 */ volatile long DriverCommit;
  /* 0x00b4 */ unsigned char PagingLevels;
  /* 0x00b5 */ char Padding_745[3];
  /* 0x00b8 */ volatile unsigned __int64 PfnDatabaseCommit;
  /* 0x00c0 */ unsigned __int64 TotalNodePagesInChildPartitions[64];
  /* 0x02c0 */ unsigned __int64 TotalSpecialPurposeMemoryInChildPartitions[2][64];
  /* 0x06c0 */ struct _MMSUPPORT_FULL SystemWs[9];
  /* 0x1200 */ struct _MMSUPPORT_SHARED SystemCacheShared;
  /* 0x1280 */ struct _MMSUPPORT_AGGREGATION AggregateSystemWs[1];
  /* 0x12a0 */ unsigned long MapCacheFailures;
  /* 0x12a4 */ long Padding_746;
  /* 0x12a8 */ unsigned __int64 PagefileHashPages;
  /* 0x12b0 */ struct _SYSPTES_HEADER PteHeader;
  /* 0x13c8 */ unsigned __int64 SystemVaTypeCount[20];
  /* 0x1468 */ unsigned char SystemVaType[256];
  /* 0x1568 */ struct _MI_SYSTEM_VA_ASSIGNMENT SystemVaRegions[18];
  /* 0x1688 */ unsigned __int64 SecurePtRoot;
  /* 0x1690 */ long __PADDING__[12];
} MI_VISIBLE_STATE, *PMI_VISIBLE_STATE; /* size: 0x16c0 */

typedef struct _MI_SYSTEM_INFORMATION
{
  /* 0x0000 */ struct _MI_POOL_STATE Pools;
  /* 0x01c0 */ struct _MI_SECTION_STATE Sections;
  /* 0x0dc0 */ struct _MI_SYSTEM_IMAGE_STATE SystemImages;
  /* 0x1000 */ struct _MI_PROCESS_STATE Processes;
  /* 0x1058 */ long Padding_747[10];
  /* 0x1080 */ struct _MI_HARDWARE_STATE Hardware;
  /* 0x2380 */ struct _MI_SYSTEM_VA_STATE SystemVa;
  /* 0x33c0 */ struct _MI_COMBINE_STATE PageCombines;
  /* 0x33e0 */ struct _MI_PAGELIST_STATE PageLists;
  /* 0x34f0 */ long Padding_748[4];
  /* 0x3500 */ struct _MI_PARTITION_STATE Partitions;
  /* 0x3600 */ struct _MI_SHUTDOWN_STATE Shutdowns;
  /* 0x3680 */ struct _MI_ERROR_STATE Errors;
  /* 0x3780 */ struct _MI_DEBUGGER_STATE Debugger;
  /* 0x90b8 */ long Padding_749[2];
  /* 0x90c0 */ struct _MI_STANDBY_STATE Standby;
  /* 0x9220 */ long Padding_750[8];
  /* 0x9240 */ struct _MI_SYSTEM_PTE_STATE SystemPtes;
  /* 0xa740 */ struct _MI_IO_PAGE_STATE IoPages;
  /* 0xa840 */ struct _MI_PAGING_IO_STATE PagingIo;
  /* 0xa8f0 */ struct _MI_COMMON_PAGE_STATE CommonPages;
  /* 0xa970 */ long Padding_751[4];
  /* 0xa980 */ struct _MI_SYSTEM_TRIM_STATE Trims;
  /* 0xaa00 */ struct _MI_SYSTEM_ACCELERATORS Accelerators;
  /* 0xaa30 */ struct _MI_HOT_PATCH_STATE HotPatch;
  /* 0xaa78 */ struct _MI_ENCLAVE_STATE Enclaves;
  /* 0xaac0 */ unsigned __int64 Cookie;
  /* 0xaac8 */ void* volatile BootRegistryRuns;
  /* 0xaad0 */ volatile long ZeroingDisabled;
  /* 0xaad4 */ unsigned char FullyInitialized;
  /* 0xaad5 */ unsigned char SafeBooted;
  /* 0xaad6 */ char Padding_752[2];
  /* 0xaad8 */ const struct _tlgProvider_t* TraceLogging;
  /* 0xaae0 */ long Padding_753[8];
  /* 0xab00 */ struct _MI_VISIBLE_STATE Vs;
} MI_SYSTEM_INFORMATION, *PMI_SYSTEM_INFORMATION; /* size: 0xc1c0 */

typedef struct _CM_NAME_CONTROL_BLOCK
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Compressed : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long RefCount : 31; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_754;
  union
  {
    /* 0x0008 */ struct _CM_NAME_HASH NameHash;
    struct
    {
      /* 0x0008 */ struct _CM_COMPONENT_HASH ConvKey;
      /* 0x000c */ long Padding_755;
      /* 0x0010 */ struct _CM_KEY_HASH* NextHash;
      /* 0x0018 */ unsigned short NameLength;
      /* 0x001a */ wchar_t Name[1];
      /* 0x001c */ long __PADDING__[1];
    }; /* size: 0x0014 */
  }; /* size: 0x0018 */
} CM_NAME_CONTROL_BLOCK, *PCM_NAME_CONTROL_BLOCK; /* size: 0x0020 */

typedef struct _CC_ASYNC_READ_CONTEXT
{
  /* 0x0000 */ void* CompletionRoutine /* function */;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ struct _MDL* Mdl;
  /* 0x0018 */ char RequestorMode;
  /* 0x0019 */ char Padding_756[3];
  /* 0x001c */ unsigned long NestingLevel;
} CC_ASYNC_READ_CONTEXT, *PCC_ASYNC_READ_CONTEXT; /* size: 0x0020 */

typedef struct _EXCEPTION_RECORD
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x0010 */ void* ExceptionAddress;
  /* 0x0018 */ unsigned long NumberParameters;
  /* 0x001c */ long Padding_757;
  /* 0x0020 */ unsigned __int64 ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD; /* size: 0x0098 */

typedef struct _CM_RM
{
  /* 0x0000 */ struct _LIST_ENTRY RmListEntry;
  /* 0x0010 */ struct _LIST_ENTRY TransactionListHead;
  /* 0x0020 */ void* TmHandle;
  /* 0x0028 */ void* Tm;
  /* 0x0030 */ void* RmHandle;
  /* 0x0038 */ void* KtmRm;
  /* 0x0040 */ unsigned long RefCount;
  /* 0x0044 */ unsigned long ContainerNum;
  /* 0x0048 */ unsigned __int64 ContainerSize;
  /* 0x0050 */ struct _CMHIVE* CmHive;
  /* 0x0058 */ void* LogFileObject;
  /* 0x0060 */ void* MarshallingContext;
  /* 0x0068 */ unsigned long RmFlags;
  /* 0x006c */ long LogStartStatus1;
  /* 0x0070 */ long LogStartStatus2;
  /* 0x0074 */ long Padding_758;
  /* 0x0078 */ unsigned __int64 BaseLsn;
  /* 0x0080 */ struct _ERESOURCE* RmLock;
} CM_RM, *PCM_RM; /* size: 0x0088 */

typedef union _KGDTENTRY64
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short LimitLow;
      /* 0x0002 */ unsigned short BaseLow;
      union
      {
        struct
        {
          /* 0x0004 */ unsigned char BaseMiddle;
          /* 0x0005 */ unsigned char Flags1;
          /* 0x0006 */ unsigned char Flags2;
          /* 0x0007 */ unsigned char BaseHigh;
        } /* size: 0x0004 */ Bytes;
        struct
        {
          struct
          {
            struct /* bitfield */
            {
              /* 0x0004 */ unsigned long BaseMiddle : 8; /* bit position: 0 */
              /* 0x0004 */ unsigned long Type : 5; /* bit position: 8 */
              /* 0x0004 */ unsigned long Dpl : 2; /* bit position: 13 */
              /* 0x0004 */ unsigned long Present : 1; /* bit position: 15 */
              /* 0x0004 */ unsigned long LimitHigh : 4; /* bit position: 16 */
              /* 0x0004 */ unsigned long System : 1; /* bit position: 20 */
              /* 0x0004 */ unsigned long LongMode : 1; /* bit position: 21 */
              /* 0x0004 */ unsigned long DefaultBig : 1; /* bit position: 22 */
              /* 0x0004 */ unsigned long Granularity : 1; /* bit position: 23 */
              /* 0x0004 */ unsigned long BaseHigh : 8; /* bit position: 24 */
            }; /* bitfield */
          } /* size: 0x0004 */ Bits;
          /* 0x0008 */ unsigned long BaseUpper;
          /* 0x000c */ unsigned long MustBeZero;
        }; /* size: 0x000c */
      }; /* size: 0x000c */
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0000 */ __int64 DataLow;
      /* 0x0008 */ __int64 DataHigh;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} KGDTENTRY64, *PKGDTENTRY64; /* size: 0x0010 */

typedef struct _CM_TRANS
{
  /* 0x0000 */ struct _LIST_ENTRY TransactionListEntry;
  /* 0x0010 */ struct _LIST_ENTRY KCBUoWListHead;
  /* 0x0020 */ struct _LIST_ENTRY LazyCommitListEntry;
  union
  {
    struct /* bitfield */
    {
      /* 0x0030 */ unsigned long Prepared : 1; /* bit position: 0 */
      /* 0x0030 */ unsigned long Aborted : 1; /* bit position: 1 */
      /* 0x0030 */ unsigned long Committed : 1; /* bit position: 2 */
      /* 0x0030 */ unsigned long Initializing : 1; /* bit position: 3 */
      /* 0x0030 */ unsigned long Invalid : 1; /* bit position: 4 */
      /* 0x0030 */ unsigned long UseReservation : 1; /* bit position: 5 */
      /* 0x0030 */ unsigned long TmCallbacksActive : 1; /* bit position: 6 */
      /* 0x0030 */ unsigned long LightWeight : 1; /* bit position: 7 */
      /* 0x0030 */ unsigned long Freed1 : 1; /* bit position: 8 */
      /* 0x0030 */ unsigned long Freed2 : 1; /* bit position: 9 */
      /* 0x0030 */ unsigned long Spare1 : 2; /* bit position: 10 */
      /* 0x0030 */ unsigned long Freed : 1; /* bit position: 12 */
      /* 0x0030 */ unsigned long Spare : 19; /* bit position: 13 */
    }; /* bitfield */
    /* 0x0030 */ unsigned long TransState;
  }; /* size: 0x0004 */
  /* 0x0034 */ long Padding_759;
  /* 0x0038 */ union _CM_TRANS_PTR Trans;
  /* 0x0040 */ struct _CM_RM* CmRm;
  /* 0x0048 */ struct _KENLISTMENT* KtmEnlistmentObject;
  /* 0x0050 */ void* KtmEnlistmentHandle;
  /* 0x0058 */ struct _GUID KtmUow;
  /* 0x0068 */ unsigned __int64 StartLsn;
  /* 0x0070 */ unsigned long HiveCount;
  /* 0x0074 */ long Padding_760;
  /* 0x0078 */ struct _CMHIVE* HiveArray[8];
} CM_TRANS, *PCM_TRANS; /* size: 0x00b8 */

typedef struct _OBJECT_HANDLE_COUNT_ENTRY
{
  /* 0x0000 */ struct _EPROCESS* Process;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long HandleCount : 24; /* bit position: 0 */
    /* 0x0008 */ unsigned long LockCount : 8; /* bit position: 24 */
  }; /* bitfield */
  /* 0x000c */ long __PADDING__[1];
} OBJECT_HANDLE_COUNT_ENTRY, *POBJECT_HANDLE_COUNT_ENTRY; /* size: 0x0010 */

typedef struct _OBJECT_HEADER_HANDLE_INFO
{
  union
  {
    /* 0x0000 */ struct _OBJECT_HANDLE_COUNT_DATABASE* HandleCountDataBase;
    /* 0x0000 */ struct _OBJECT_HANDLE_COUNT_ENTRY SingleEntry;
  }; /* size: 0x0010 */
} OBJECT_HEADER_HANDLE_INFO, *POBJECT_HEADER_HANDLE_INFO; /* size: 0x0010 */

typedef struct _KTSS64
{
  /* 0x0000 */ unsigned long Reserved0;
  /* 0x0004 */ unsigned __int64 Rsp0;
  /* 0x000c */ unsigned __int64 Rsp1;
  /* 0x0014 */ unsigned __int64 Rsp2;
  /* 0x001c */ unsigned __int64 Ist[8];
  /* 0x005c */ unsigned __int64 Reserved1;
  /* 0x0064 */ unsigned short Reserved2;
  /* 0x0066 */ unsigned short IoMapBase;
} KTSS64, *PKTSS64; /* size: 0x0068 */

typedef struct _HIVE_WRITE_WAIT_QUEUE
{
  /* 0x0000 */ struct _ETHREAD* ActiveThread;
  /* 0x0008 */ struct _HIVE_WAIT_PACKET* WaitList;
} HIVE_WRITE_WAIT_QUEUE, *PHIVE_WRITE_WAIT_QUEUE; /* size: 0x0010 */

typedef struct _CMHIVE
{
  /* 0x0000 */ struct _HHIVE Hive;
  /* 0x0608 */ void* FileHandles[6];
  /* 0x0638 */ struct _LIST_ENTRY NotifyList;
  /* 0x0648 */ struct _LIST_ENTRY HiveList;
  /* 0x0658 */ struct _LIST_ENTRY PreloadedHiveList;
  /* 0x0668 */ struct _EX_RUNDOWN_REF HiveRundown;
  /* 0x0670 */ struct _CM_KEY_HASH_TABLE_ENTRY* KcbCacheTable;
  /* 0x0678 */ unsigned long KcbCacheTableSize;
  /* 0x067c */ long Padding_761;
  /* 0x0680 */ struct _CM_KEY_HASH_TABLE_ENTRY* DeletedKcbTable;
  /* 0x0688 */ unsigned long DeletedKcbTableSize;
  /* 0x068c */ unsigned long Identity;
  /* 0x0690 */ struct _CMSI_RW_LOCK HiveLock;
  /* 0x0698 */ struct _RTL_BITMAP FlushDirtyVector;
  /* 0x06a8 */ unsigned long FlushDirtyVectorSize;
  /* 0x06ac */ long Padding_762;
  /* 0x06b0 */ struct CMP_OFFSET_ARRAY* FlushLogEntryOffsetArray;
  /* 0x06b8 */ unsigned long FlushLogEntryOffsetArrayCount;
  /* 0x06bc */ unsigned long FlushLogEntrySize;
  /* 0x06c0 */ unsigned long FlushHiveTruncated;
  /* 0x06c4 */ unsigned char FlushBaseBlockDirty;
  /* 0x06c5 */ char Padding_763[3];
  /* 0x06c8 */ struct _RTL_BITMAP CapturedUnreconciledVector;
  /* 0x06d8 */ unsigned long CapturedUnreconciledVectorSize;
  /* 0x06dc */ long Padding_764;
  /* 0x06e0 */ struct CMP_OFFSET_ARRAY* UnreconciledOffsetArray;
  /* 0x06e8 */ unsigned long UnreconciledOffsetArrayCount;
  /* 0x06ec */ long Padding_765;
  /* 0x06f0 */ struct _HBASE_BLOCK* UnreconciledBaseBlock;
  /* 0x06f8 */ struct _EX_PUSH_LOCK SecurityLock;
  /* 0x0700 */ unsigned long LastShrinkHiveSize;
  /* 0x0704 */ long Padding_766;
  /* 0x0708 */ union _LARGE_INTEGER ActualFileSize;
  /* 0x0710 */ union _LARGE_INTEGER LogFileSizes[2];
  /* 0x0720 */ struct _UNICODE_STRING FileFullPath;
  /* 0x0730 */ struct _UNICODE_STRING FileUserName;
  /* 0x0740 */ struct _UNICODE_STRING HiveRootPath;
  /* 0x0750 */ unsigned long SecurityCount;
  /* 0x0754 */ unsigned long SecurityCacheSize;
  /* 0x0758 */ long SecurityHitHint;
  /* 0x075c */ long Padding_767;
  /* 0x0760 */ struct _CM_KEY_SECURITY_CACHE_ENTRY* SecurityCache;
  /* 0x0768 */ struct _LIST_ENTRY SecurityHash[64];
  /* 0x0b68 */ unsigned long UnloadEventCount;
  /* 0x0b6c */ long Padding_768;
  /* 0x0b70 */ struct _KEVENT** UnloadEventArray;
  /* 0x0b78 */ struct _CM_KEY_CONTROL_BLOCK* RootKcb;
  /* 0x0b80 */ unsigned char Frozen;
  /* 0x0b81 */ char Padding_769[7];
  /* 0x0b88 */ struct _CM_DIRTY_VECTOR_LOG DirtyVectorLog;
  /* 0x1010 */ unsigned long Flags;
  /* 0x1014 */ long Padding_770;
  /* 0x1018 */ struct _LIST_ENTRY TrustClassEntry;
  /* 0x1028 */ unsigned __int64 DirtyTime;
  /* 0x1030 */ unsigned __int64 UnreconciledTime;
  /* 0x1038 */ struct _CM_RM* CmRm;
  /* 0x1040 */ unsigned long CmRmInitFailPoint;
  /* 0x1044 */ long CmRmInitFailStatus;
  /* 0x1048 */ struct _KTHREAD* CreatorOwner;
  /* 0x1050 */ struct _KTHREAD* RundownThread;
  /* 0x1058 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x1060 */ struct _HIVE_WRITE_WAIT_QUEUE FlushQueue;
  /* 0x1070 */ struct _HIVE_WRITE_WAIT_QUEUE ReconcileQueue;
  union
  {
    /* 0x1080 */ unsigned long FlushFlags;
    struct /* bitfield */
    {
      /* 0x1080 */ unsigned long PrimaryFilePurged : 1; /* bit position: 0 */
      /* 0x1080 */ unsigned long DiskFileBad : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x1084 */ unsigned long PrimaryFileSizeBeforeLastFlush;
  /* 0x1088 */ volatile long ReferenceCount;
  /* 0x108c */ long UnloadHistoryIndex;
  /* 0x1090 */ unsigned long UnloadHistory[128];
  /* 0x1290 */ unsigned long BootStart;
  /* 0x1294 */ unsigned long UnaccessedStart;
  /* 0x1298 */ unsigned long UnaccessedEnd;
  /* 0x129c */ unsigned long LoadedKeyCount;
  /* 0x12a0 */ volatile unsigned long HandleClosePending;
  /* 0x12a4 */ long Padding_771;
  /* 0x12a8 */ struct _EX_PUSH_LOCK HandleClosePendingEvent;
  /* 0x12b0 */ unsigned char FinalFlushSucceeded;
  /* 0x12b1 */ char Padding_772[7];
  /* 0x12b8 */ struct _CMP_VOLUME_CONTEXT* VolumeContext;
  /* 0x12c0 */ unsigned long LateUnloadWorkItemState;
  /* 0x12c4 */ long Padding_773;
  /* 0x12c8 */ struct _EX_PUSH_LOCK LateUnloadFinishedEvent;
  /* 0x12d0 */ struct _WORK_QUEUE_ITEM* LateUnloadWorkItem;
} CMHIVE, *PCMHIVE; /* size: 0x12d8 */

typedef union _KIDTENTRY64
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short OffsetLow;
      /* 0x0002 */ unsigned short Selector;
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned short IstIndex : 3; /* bit position: 0 */
        /* 0x0004 */ unsigned short Reserved0 : 5; /* bit position: 3 */
        /* 0x0004 */ unsigned short Type : 5; /* bit position: 8 */
        /* 0x0004 */ unsigned short Dpl : 2; /* bit position: 13 */
        /* 0x0004 */ unsigned short Present : 1; /* bit position: 15 */
      }; /* bitfield */
      /* 0x0006 */ unsigned short OffsetMiddle;
      /* 0x0008 */ unsigned long OffsetHigh;
      /* 0x000c */ unsigned long Reserved1;
    }; /* size: 0x0010 */
    /* 0x0000 */ unsigned __int64 Alignment;
  }; /* size: 0x0010 */
} KIDTENTRY64, *PKIDTENTRY64; /* size: 0x0010 */

typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP
{
  /* 0x0000 */ unsigned __int64 Map[3];
} PS_MITIGATION_AUDIT_OPTIONS_MAP, *PPS_MITIGATION_AUDIT_OPTIONS_MAP; /* size: 0x0018 */

typedef struct _OBJECT_HEADER_EXTENDED_INFO
{
  /* 0x0000 */ struct _OBJECT_FOOTER* Footer;
  /* 0x0008 */ unsigned __int64 Reserved;
} OBJECT_HEADER_EXTENDED_INFO, *POBJECT_HEADER_EXTENDED_INFO; /* size: 0x0010 */

typedef struct _TXN_PARAMETER_BLOCK
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short TxFsContext;
  /* 0x0004 */ long Padding_774;
  /* 0x0008 */ void* TransactionObject;
} TXN_PARAMETER_BLOCK, *PTXN_PARAMETER_BLOCK; /* size: 0x0010 */

typedef union _XPF_MCE_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long MCG_CapabilityRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long MCG_GlobalControlRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reserved : 30; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} XPF_MCE_FLAGS, *PXPF_MCE_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_XPF_MC_BANK_DESCRIPTOR
{
  /* 0x0000 */ unsigned char BankNumber;
  /* 0x0001 */ unsigned char ClearOnInitialization;
  /* 0x0002 */ unsigned char StatusDataFormat;
  /* 0x0003 */ union _XPF_MC_BANK_FLAGS Flags;
  /* 0x0004 */ unsigned long ControlMsr;
  /* 0x0008 */ unsigned long StatusMsr;
  /* 0x000c */ unsigned long AddressMsr;
  /* 0x0010 */ unsigned long MiscMsr;
  /* 0x0014 */ unsigned __int64 ControlData;
} WHEA_XPF_MC_BANK_DESCRIPTOR, *PWHEA_XPF_MC_BANK_DESCRIPTOR; /* size: 0x001c */

typedef struct _WHEA_XPF_MCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char NumberOfBanks;
  /* 0x0004 */ union _XPF_MCE_FLAGS Flags;
  /* 0x0008 */ unsigned __int64 MCG_Capability;
  /* 0x0010 */ unsigned __int64 MCG_GlobalControl;
  /* 0x0018 */ struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
} WHEA_XPF_MCE_DESCRIPTOR, *PWHEA_XPF_MCE_DESCRIPTOR; /* size: 0x0398 */

typedef struct _WHEA_XPF_CMC_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char NumberOfBanks;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
  /* 0x0024 */ struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
} WHEA_XPF_CMC_DESCRIPTOR, *PWHEA_XPF_CMC_DESCRIPTOR; /* size: 0x03a4 */

typedef struct _WHEA_XPF_NMI_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
} WHEA_XPF_NMI_DESCRIPTOR, *PWHEA_XPF_NMI_DESCRIPTOR; /* size: 0x0003 */

typedef struct _WHEA_IPF_CMC_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
} WHEA_IPF_CMC_DESCRIPTOR, *PWHEA_IPF_CMC_DESCRIPTOR; /* size: 0x0004 */

typedef struct _WHEA_IPF_CPE_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
} WHEA_IPF_CPE_DESCRIPTOR, *PWHEA_IPF_CPE_DESCRIPTOR; /* size: 0x0004 */

typedef struct _WHEA_AER_ENDPOINT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _WHEA_PCI_SLOT_NUMBER Slot;
  /* 0x000c */ unsigned short DeviceControl;
  /* 0x000e */ union _AER_ENDPOINT_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ unsigned long UncorrectableErrorMask;
  /* 0x0014 */ unsigned long UncorrectableErrorSeverity;
  /* 0x0018 */ unsigned long CorrectableErrorMask;
  /* 0x001c */ unsigned long AdvancedCapsAndControl;
} WHEA_AER_ENDPOINT_DESCRIPTOR, *PWHEA_AER_ENDPOINT_DESCRIPTOR; /* size: 0x0020 */

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Reserved;
  /* 0x0003 */ unsigned char Enabled;
  /* 0x0004 */ unsigned long ErrStatusBlockLength;
  /* 0x0008 */ unsigned long RelatedErrorSourceId;
  /* 0x000c */ unsigned char ErrStatusAddressSpaceID;
  /* 0x000d */ unsigned char ErrStatusAddressBitWidth;
  /* 0x000e */ unsigned char ErrStatusAddressBitOffset;
  /* 0x000f */ unsigned char ErrStatusAddressAccessSize;
  /* 0x0010 */ union _LARGE_INTEGER ErrStatusAddress;
  /* 0x0018 */ struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
} WHEA_GENERIC_ERROR_DESCRIPTOR, *PWHEA_GENERIC_ERROR_DESCRIPTOR; /* size: 0x0034 */

typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME
{
  /* 0x0000 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* Previous;
  /* 0x0008 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ long __PADDING__[1];
} RTL_ACTIVATION_CONTEXT_STACK_FRAME, *PRTL_ACTIVATION_CONTEXT_STACK_FRAME; /* size: 0x0018 */

typedef struct _KLDR_DATA_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY InLoadOrderLinks;
  /* 0x0010 */ void* ExceptionTable;
  /* 0x0018 */ unsigned long ExceptionTableSize;
  /* 0x001c */ long Padding_775;
  /* 0x0020 */ void* GpValue;
  /* 0x0028 */ struct _NON_PAGED_DEBUG_INFO* NonPagedDebugInfo;
  /* 0x0030 */ void* DllBase;
  /* 0x0038 */ void* EntryPoint;
  /* 0x0040 */ unsigned long SizeOfImage;
  /* 0x0044 */ long Padding_776;
  /* 0x0048 */ struct _UNICODE_STRING FullDllName;
  /* 0x0058 */ struct _UNICODE_STRING BaseDllName;
  /* 0x0068 */ unsigned long Flags;
  /* 0x006c */ unsigned short LoadCount;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x006e */ unsigned short SignatureLevel : 4; /* bit position: 0 */
        /* 0x006e */ unsigned short SignatureType : 3; /* bit position: 4 */
        /* 0x006e */ unsigned short Frozen : 2; /* bit position: 7 */
        /* 0x006e */ unsigned short HotPatch : 1; /* bit position: 9 */
        /* 0x006e */ unsigned short Unused : 6; /* bit position: 10 */
      }; /* bitfield */
      /* 0x006e */ unsigned short EntireField;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ u1;
  /* 0x0070 */ void* SectionPointer;
  /* 0x0078 */ unsigned long CheckSum;
  /* 0x007c */ unsigned long CoverageSectionSize;
  /* 0x0080 */ void* CoverageSection;
  /* 0x0088 */ void* LoadedImports;
  union
  {
    /* 0x0090 */ void* Spare;
    /* 0x0090 */ struct _KLDR_DATA_TABLE_ENTRY* NtDataTableEntry;
  }; /* size: 0x0008 */
  /* 0x0098 */ unsigned long SizeOfImageNotRounded;
  /* 0x009c */ unsigned long TimeDateStamp;
} KLDR_DATA_TABLE_ENTRY, *PKLDR_DATA_TABLE_ENTRY; /* size: 0x00a0 */

typedef struct _PLUGPLAY_CONTROL_STATUS_DATA
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceInstance;
  /* 0x0010 */ unsigned long Operation;
  /* 0x0014 */ unsigned long DeviceStatus;
  /* 0x0018 */ unsigned long DeviceProblem;
  /* 0x001c */ unsigned long Flags;
  /* 0x0020 */ long ProblemStatus;
  /* 0x0024 */ long __PADDING__[1];
} PLUGPLAY_CONTROL_STATUS_DATA, *PPLUGPLAY_CONTROL_STATUS_DATA; /* size: 0x0028 */

typedef union _HAL_UNMASKED_INTERRUPT_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short SecondaryInterrupt : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short Reserved : 15; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} HAL_UNMASKED_INTERRUPT_FLAGS, *PHAL_UNMASKED_INTERRUPT_FLAGS; /* size: 0x0002 */

typedef struct _HAL_UNMASKED_INTERRUPT_INFORMATION
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ union _HAL_UNMASKED_INTERRUPT_FLAGS Flags;
  /* 0x0006 */ char Padding_777[2];
  /* 0x0008 */ enum _KINTERRUPT_MODE Mode;
  /* 0x000c */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x0010 */ unsigned long Gsiv;
  /* 0x0014 */ unsigned short PinNumber;
  /* 0x0016 */ char Padding_778[2];
  /* 0x0018 */ void* DeviceHandle;
} HAL_UNMASKED_INTERRUPT_INFORMATION, *PHAL_UNMASKED_INTERRUPT_INFORMATION; /* size: 0x0020 */

typedef struct _WHEA_ERROR_SOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ enum _WHEA_ERROR_SOURCE_TYPE Type;
  /* 0x000c */ enum _WHEA_ERROR_SOURCE_STATE State;
  /* 0x0010 */ unsigned long MaxRawDataLength;
  /* 0x0014 */ unsigned long NumRecordsToPreallocate;
  /* 0x0018 */ unsigned long MaxSectionsPerRecord;
  /* 0x001c */ unsigned long ErrorSourceId;
  /* 0x0020 */ unsigned long PlatformErrorSourceId;
  /* 0x0024 */ unsigned long Flags;
  union
  {
    union
    {
      /* 0x0028 */ struct _WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor;
      /* 0x0028 */ struct _WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor;
      /* 0x0028 */ struct _WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor;
      /* 0x0028 */ struct _WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor;
      /* 0x0028 */ struct _WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor;
      /* 0x0028 */ struct _WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor;
      /* 0x0028 */ struct _WHEA_AER_ROOTPORT_DESCRIPTOR AerRootportDescriptor;
      /* 0x0028 */ struct _WHEA_AER_ENDPOINT_DESCRIPTOR AerEndpointDescriptor;
      /* 0x0028 */ struct _WHEA_AER_BRIDGE_DESCRIPTOR AerBridgeDescriptor;
      /* 0x0028 */ struct _WHEA_GENERIC_ERROR_DESCRIPTOR GenErrDescriptor;
      /* 0x0028 */ struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 GenErrDescriptorV2;
      /* 0x0028 */ struct _WHEA_DEVICE_DRIVER_DESCRIPTOR DeviceDriverDescriptor;
    }; /* size: 0x03a4 */
  } /* size: 0x03a4 */ Info;
} WHEA_ERROR_SOURCE_DESCRIPTOR, *PWHEA_ERROR_SOURCE_DESCRIPTOR; /* size: 0x03cc */

typedef struct _WHEA_EVENT_LOG_ENTRY_HEADER
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ enum _WHEA_EVENT_LOG_ENTRY_TYPE Type;
  /* 0x0010 */ unsigned long OwnerTag;
  /* 0x0014 */ enum _WHEA_EVENT_LOG_ENTRY_ID Id;
  /* 0x0018 */ union _WHEA_EVENT_LOG_ENTRY_FLAGS Flags;
  /* 0x001c */ unsigned long PayloadLength;
} WHEA_EVENT_LOG_ENTRY_HEADER, *PWHEA_EVENT_LOG_ENTRY_HEADER; /* size: 0x0020 */

typedef struct _WHEA_EVENT_LOG_ENTRY
{
  /* 0x0000 */ struct _WHEA_EVENT_LOG_ENTRY_HEADER Header;
} WHEA_EVENT_LOG_ENTRY, *PWHEA_EVENT_LOG_ENTRY; /* size: 0x0020 */

typedef struct _IO_WORKITEM
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0020 */ void* Routine /* function */;
  /* 0x0028 */ void* IoObject;
  /* 0x0030 */ void* Context;
  /* 0x0038 */ struct _ETHREAD* WorkOnBehalfThread;
  /* 0x0040 */ unsigned long Type;
  /* 0x0044 */ struct _GUID ActivityId;
  /* 0x0054 */ long __PADDING__[1];
} IO_WORKITEM, *PIO_WORKITEM; /* size: 0x0058 */

typedef union _WHEA_ERROR_PACKET_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PreviousError : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long CriticalEvent : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long HypervisorError : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Simulated : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long PlatformPfaControl : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long PlatformDirectedOffline : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long AddressTranslationRequired : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long AddressTranslationCompleted : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long RecoveryOptional : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long Reserved2 : 23; /* bit position: 9 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_PACKET_FLAGS, *PWHEA_ERROR_PACKET_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_ERROR_PACKET_V2
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ union _WHEA_ERROR_PACKET_FLAGS Flags;
  /* 0x0010 */ enum _WHEA_ERROR_TYPE ErrorType;
  /* 0x0014 */ enum _WHEA_ERROR_SEVERITY ErrorSeverity;
  /* 0x0018 */ unsigned long ErrorSourceId;
  /* 0x001c */ enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
  /* 0x0020 */ struct _GUID NotifyType;
  /* 0x0030 */ unsigned __int64 Context;
  /* 0x0038 */ enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
  /* 0x003c */ unsigned long Reserved1;
  /* 0x0040 */ unsigned long DataOffset;
  /* 0x0044 */ unsigned long DataLength;
  /* 0x0048 */ unsigned long PshedDataOffset;
  /* 0x004c */ unsigned long PshedDataLength;
} WHEA_ERROR_PACKET_V2, *PWHEA_ERROR_PACKET_V2; /* size: 0x0050 */

typedef struct _PNP_RESOURCE_REQUEST
{
  /* 0x0000 */ struct _DEVICE_OBJECT* PhysicalDevice;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ enum _ARBITER_REQUEST_SOURCE AllocationType;
  /* 0x0010 */ unsigned long Priority;
  /* 0x0014 */ unsigned long Position;
  /* 0x0018 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* ResourceRequirements;
  /* 0x0020 */ void* ReqList;
  /* 0x0028 */ struct _CM_RESOURCE_LIST* ResourceAssignment;
  /* 0x0030 */ struct _CM_RESOURCE_LIST* TranslatedResourceAssignment;
  /* 0x0038 */ long Status;
  /* 0x003c */ long __PADDING__[1];
} PNP_RESOURCE_REQUEST, *PPNP_RESOURCE_REQUEST; /* size: 0x0040 */

typedef struct _OBJECT_HEADER_PROCESS_INFO
{
  /* 0x0000 */ struct _EPROCESS* ExclusiveProcess;
  /* 0x0008 */ unsigned __int64 Reserved;
} OBJECT_HEADER_PROCESS_INFO, *POBJECT_HEADER_PROCESS_INFO; /* size: 0x0010 */

typedef struct _WHEA_ERROR_RECORD
{
  /* 0x0000 */ struct _WHEA_ERROR_RECORD_HEADER Header;
  /* 0x0080 */ struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
} WHEA_ERROR_RECORD, *PWHEA_ERROR_RECORD; /* size: 0x00c8 */

typedef struct _PF_KERNEL_GLOBALS
{
  /* 0x0000 */ unsigned __int64 AccessBufferAgeThreshold;
  /* 0x0008 */ long StreamSequenceNumber;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ long ScenarioPrefetchCount;
  /* 0x0014 */ long __PADDING__[1];
} PF_KERNEL_GLOBALS, *PPF_KERNEL_GLOBALS; /* size: 0x0018 */

typedef struct _MCUPDATE_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY List;
  /* 0x0010 */ unsigned long Status;
  /* 0x0014 */ long Padding_779;
  /* 0x0018 */ unsigned __int64 Id;
  /* 0x0020 */ unsigned __int64 VendorScratch[2];
} MCUPDATE_INFO, *PMCUPDATE_INFO; /* size: 0x0030 */

typedef union _AMD_MCA_IPID
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 InstanceId : 32; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 HardwareId : 12; /* bit position: 32 */
      /* 0x0000 */ unsigned __int64 Reserved : 4; /* bit position: 44 */
      /* 0x0000 */ unsigned __int64 McaType : 16; /* bit position: 48 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 AsUINT64;
  }; /* size: 0x0008 */
} AMD_MCA_IPID, *PAMD_MCA_IPID; /* size: 0x0008 */

typedef struct _HARDWARE_PTE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Write : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Owner : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 WriteThrough : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 CacheDisable : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Accessed : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Dirty : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned __int64 LargePage : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned __int64 Global : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned __int64 CopyOnWrite : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 reserved0 : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFrameNumber : 40; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 SoftwareWsIndex : 11; /* bit position: 52 */
    /* 0x0000 */ unsigned __int64 NoExecute : 1; /* bit position: 63 */
  }; /* bitfield */
} HARDWARE_PTE, *PHARDWARE_PTE; /* size: 0x0008 */

typedef union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Preallocated : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long FromPersistentStore : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long PlatformPfaControl : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long PlatformDirectedOffline : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long Reserved : 28; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEAP_ERROR_RECORD_WRAPPER_FLAGS, *PWHEAP_ERROR_RECORD_WRAPPER_FLAGS; /* size: 0x0004 */

typedef struct _WHEAP_ERROR_RECORD_WRAPPER
{
  /* 0x0000 */ struct _LIST_ENTRY WorkEntry;
  /* 0x0010 */ unsigned long Length;
  /* 0x0014 */ unsigned long ProcessorNumber;
  /* 0x0018 */ union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS Flags;
  /* 0x001c */ volatile long InUse;
  /* 0x0020 */ struct _WHEAP_ERROR_SOURCE* ErrorSource;
  /* 0x0028 */ struct _WHEA_ERROR_RECORD ErrorRecord;
} WHEAP_ERROR_RECORD_WRAPPER, *PWHEAP_ERROR_RECORD_WRAPPER; /* size: 0x00f0 */

typedef struct _VF_AVL_TREE_NODE
{
  /* 0x0000 */ void* p;
  /* 0x0008 */ unsigned __int64 RangeSize;
} VF_AVL_TREE_NODE, *PVF_AVL_TREE_NODE; /* size: 0x0010 */

typedef struct _VF_TARGET_DRIVER
{
  /* 0x0000 */ struct _VF_AVL_TREE_NODE TreeNode;
  union
  {
    union
    {
      /* 0x0010 */ struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS AllSharedExportThunks;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0010 */ unsigned long SnapSharedExportsFailed : 1; /* bit position: 0 */
          /* 0x0010 */ unsigned long Spare : 31; /* bit position: 1 */
        }; /* bitfield */
      } /* size: 0x0004 */ Flags;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u1;
  /* 0x0028 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0030 */ struct _VF_DRIVER_IO_CALLBACKS* Callbacks;
  /* 0x0038 */ unsigned long AssignedPluginId;
  /* 0x003c */ long Padding_780;
  /* 0x0040 */ struct _VF_TARGET_VERIFIED_DRIVER_DATA* VerifiedData;
} VF_TARGET_DRIVER, *PVF_TARGET_DRIVER; /* size: 0x0048 */

typedef struct _WNF_NAME_INSTANCE
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ long Padding_781;
  /* 0x0008 */ struct _EX_RUNDOWN_REF RunRef;
  /* 0x0010 */ struct _RTL_BALANCED_NODE TreeLinks;
  /* 0x0028 */ struct _WNF_STATE_NAME_STRUCT StateName;
  /* 0x0030 */ struct _WNF_SCOPE_INSTANCE* ScopeInstance;
  /* 0x0038 */ struct _WNF_STATE_NAME_REGISTRATION StateNameInfo;
  /* 0x0050 */ struct _WNF_LOCK StateDataLock;
  /* 0x0058 */ struct _WNF_STATE_DATA* StateData;
  /* 0x0060 */ unsigned long CurrentChangeStamp;
  /* 0x0064 */ long Padding_782;
  /* 0x0068 */ struct _WNF_PERMANENT_DATA_STORE* PermanentDataStore;
  /* 0x0070 */ struct _WNF_LOCK StateSubscriptionListLock;
  /* 0x0078 */ struct _LIST_ENTRY StateSubscriptionListHead;
  /* 0x0088 */ struct _LIST_ENTRY TemporaryNameListEntry;
  /* 0x0098 */ struct _EPROCESS* CreatorProcess;
  /* 0x00a0 */ long DataSubscribersCount;
  /* 0x00a4 */ long CurrentDeliveryCount;
} WNF_NAME_INSTANCE, *PWNF_NAME_INSTANCE; /* size: 0x00a8 */

typedef struct _IO_APIC_DATA
{
  /* 0x0000 */ unsigned __int64 PhysicalAddress;
  /* 0x0008 */ unsigned long Identifier;
  /* 0x000c */ long Padding_783;
  /* 0x0010 */ struct _IO_APIC_REGISTERS* BaseAddress;
  /* 0x0018 */ unsigned char Version;
  /* 0x0019 */ unsigned char PinCount;
  /* 0x001a */ unsigned char Initialized;
  /* 0x001b */ unsigned char InitializedFirstLocalUnit;
  /* 0x001c */ unsigned long GsiBase;
  /* 0x0020 */ unsigned long CmciRegister;
  /* 0x0024 */ unsigned long DeferredErrorRegister;
  /* 0x0028 */ unsigned char IoUnitMissing;
  /* 0x0029 */ char __PADDING__[7];
} IO_APIC_DATA, *PIO_APIC_DATA; /* size: 0x0030 */

typedef struct _PCW_COUNTER_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned short StructIndex;
  /* 0x0004 */ unsigned short Offset;
  /* 0x0006 */ unsigned short Size;
} PCW_COUNTER_DESCRIPTOR, *PPCW_COUNTER_DESCRIPTOR; /* size: 0x0008 */

struct PROCESS_PERF_COUNTERS
{
  /* 0x0000 */ unsigned __int64 ProcessorTime;
  /* 0x0008 */ unsigned __int64 UserTime;
  /* 0x0010 */ unsigned __int64 PrivilegedTime;
  /* 0x0018 */ unsigned __int64 VirtualBytesPeak;
  /* 0x0020 */ unsigned __int64 VirtualBytes;
  /* 0x0028 */ unsigned long PageFaults;
  /* 0x002c */ unsigned long HandleCount;
  /* 0x0030 */ unsigned __int64 WorkingSetPeak;
  /* 0x0038 */ unsigned __int64 WorkingSet;
  /* 0x0040 */ unsigned __int64 PageFileBytesPeak;
  /* 0x0048 */ unsigned __int64 PageFileBytes;
  /* 0x0050 */ unsigned __int64 PrivateBytes;
  /* 0x0058 */ unsigned long ThreadCount;
  /* 0x005c */ unsigned long PriorityBase;
  /* 0x0060 */ unsigned __int64 ElapsedTime;
  /* 0x0068 */ unsigned long ProcessId;
  /* 0x006c */ unsigned long CreatingProcessId;
  /* 0x0070 */ unsigned __int64 PoolPagedBytes;
  /* 0x0078 */ unsigned __int64 PoolNonpagedBytes;
  /* 0x0080 */ unsigned __int64 IoReadOperations;
  /* 0x0088 */ unsigned __int64 IoWriteOperations;
  /* 0x0090 */ unsigned __int64 IoDataOperations;
  /* 0x0098 */ unsigned __int64 IoOtherOperations;
  /* 0x00a0 */ unsigned __int64 IoReadBytes;
  /* 0x00a8 */ unsigned __int64 IoWriteBytes;
  /* 0x00b0 */ unsigned __int64 IoDataBytes;
  /* 0x00b8 */ unsigned __int64 IoOtherBytes;
  /* 0x00c0 */ unsigned __int64 WorkingSetPrivate;
  /* 0x00c8 */ unsigned __int64 PerfFreq;
  /* 0x00d0 */ unsigned __int64 PerfTime;
}; /* size: 0x00d8 */

typedef struct _ISRDPCSTATS
{
  /* 0x0000 */ unsigned __int64 IsrTime;
  /* 0x0008 */ unsigned __int64 IsrTimeStart;
  /* 0x0010 */ unsigned __int64 IsrCount;
  /* 0x0018 */ unsigned __int64 DpcTime;
  /* 0x0020 */ unsigned __int64 DpcTimeStart;
  /* 0x0028 */ unsigned __int64 DpcCount;
  /* 0x0030 */ unsigned char IsrActive;
  /* 0x0031 */ unsigned char Reserved[7];
  /* 0x0038 */ struct _ISRDPCSTATS_SEQUENCE DpcWatchdog;
} ISRDPCSTATS, *PISRDPCSTATS; /* size: 0x0060 */

typedef struct _KINTERRUPT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ long Padding_784;
  /* 0x0008 */ struct _LIST_ENTRY InterruptListEntry;
  /* 0x0018 */ void* ServiceRoutine /* function */;
  /* 0x0020 */ void* MessageServiceRoutine /* function */;
  /* 0x0028 */ unsigned long MessageIndex;
  /* 0x002c */ long Padding_785;
  /* 0x0030 */ void* ServiceContext;
  /* 0x0038 */ unsigned __int64 SpinLock;
  /* 0x0040 */ unsigned long TickCount;
  /* 0x0044 */ long Padding_786;
  /* 0x0048 */ unsigned __int64* ActualLock;
  /* 0x0050 */ void* DispatchAddress /* function */;
  /* 0x0058 */ unsigned long Vector;
  /* 0x005c */ unsigned char Irql;
  /* 0x005d */ unsigned char SynchronizeIrql;
  /* 0x005e */ unsigned char FloatingSave;
  /* 0x005f */ unsigned char Connected;
  /* 0x0060 */ unsigned long Number;
  /* 0x0064 */ unsigned char ShareVector;
  /* 0x0065 */ unsigned char EmulateActiveBoth;
  /* 0x0066 */ unsigned short ActiveCount;
  /* 0x0068 */ long InternalState;
  /* 0x006c */ enum _KINTERRUPT_MODE Mode;
  /* 0x0070 */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x0074 */ unsigned long ServiceCount;
  /* 0x0078 */ unsigned long DispatchCount;
  /* 0x007c */ long Padding_787;
  /* 0x0080 */ struct _KEVENT* PassiveEvent;
  /* 0x0088 */ struct _KTRAP_FRAME* TrapFrame;
  /* 0x0090 */ void* DisconnectData;
  /* 0x0098 */ struct _KTHREAD* volatile ServiceThread;
  /* 0x00a0 */ struct _INTERRUPT_CONNECTION_DATA* ConnectionData;
  /* 0x00a8 */ void* IntTrackEntry;
  /* 0x00b0 */ struct _ISRDPCSTATS IsrDpcStats;
  /* 0x0110 */ void* RedirectObject;
  /* 0x0118 */ unsigned char Padding[8];
} KINTERRUPT, *PKINTERRUPT; /* size: 0x0120 */

typedef struct _NT_TIB64
{
  /* 0x0000 */ unsigned __int64 ExceptionList;
  /* 0x0008 */ unsigned __int64 StackBase;
  /* 0x0010 */ unsigned __int64 StackLimit;
  /* 0x0018 */ unsigned __int64 SubSystemTib;
  union
  {
    /* 0x0020 */ unsigned __int64 FiberData;
    /* 0x0020 */ unsigned long Version;
  }; /* size: 0x0008 */
  /* 0x0028 */ unsigned __int64 ArbitraryUserPointer;
  /* 0x0030 */ unsigned __int64 Self;
} NT_TIB64, *PNT_TIB64; /* size: 0x0038 */

typedef struct _SEP_TOKEN_DIAG_TRACK_ENTRY
{
  /* 0x0000 */ void* ProcessCid;
  /* 0x0008 */ void* ThreadCid;
  /* 0x0010 */ unsigned char ImageFileName[16];
  /* 0x0020 */ unsigned long CreateMethod;
  /* 0x0024 */ long Padding_788;
  /* 0x0028 */ unsigned __int64 CreateTrace[30];
  /* 0x0118 */ long Count;
  /* 0x011c */ long CaptureCount;
} SEP_TOKEN_DIAG_TRACK_ENTRY, *PSEP_TOKEN_DIAG_TRACK_ENTRY; /* size: 0x0120 */

typedef struct _RSDT_32
{
  /* 0x0000 */ struct _DESCRIPTION_HEADER Header;
  /* 0x0024 */ unsigned long Tables[1];
} RSDT_32, *PRSDT_32; /* size: 0x0028 */

typedef struct _PRIVATE_VOLUME_CACHEMAP
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ unsigned long UseCount;
  /* 0x0008 */ __int64 RefCount;
  /* 0x0010 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0018 */ unsigned long VolumeId;
  /* 0x001c */ long Padding_789;
  /* 0x0020 */ struct _CC_PARTITION* Partition;
  /* 0x0028 */ struct _VOLUME_CACHE_MAP* VolumeCacheMap;
  /* 0x0030 */ struct _LIST_ENTRY NumaNodeList;
  /* 0x0040 */ struct _CC_NUMA_NODE* NumaNodeBlock[64];
  /* 0x0240 */ struct _LIST_ENTRY PartitionVolumeLinks;
  /* 0x0250 */ struct _LIST_ENTRY VolumeCacheMapLinks;
  /* 0x0260 */ struct _LIST_ENTRY CleanSharedCacheMapList;
  /* 0x0270 */ struct _LIST_ENTRY CleanSharedCacheMapWithLogHandleList;
  /* 0x0280 */ struct _SHARED_CACHE_MAP_LIST_CURSOR DirtySharedCacheMapList;
  /* 0x0298 */ struct _SHARED_CACHE_MAP_LIST_CURSOR LazyWriteCursor;
  /* 0x02b0 */ struct _LIST_ENTRY DirtySharedCacheMapWithLogHandleList;
  /* 0x02c0 */ unsigned long ConsecutiveWorklessLazyScanCount;
  /* 0x02c4 */ unsigned char ForcedDisableLazywriteScan;
  /* 0x02c5 */ char Padding_790[59];
  /* 0x0300 */ unsigned __int64 WorkQueueLock;
  /* 0x0308 */ unsigned long NumberWorkerThreads;
  /* 0x030c */ long Padding_791;
  /* 0x0310 */ struct _LIST_ENTRY PostTickWorkQueue;
  /* 0x0320 */ unsigned long MaxExtraWriteBehindThreads;
  /* 0x0324 */ unsigned long MaxCacheMapUninitThreads;
  /* 0x0328 */ unsigned long PostTickWorkItemCount;
  /* 0x032c */ long Padding_792;
  /* 0x0330 */ struct _KEVENT LowMemoryEvent;
  /* 0x0348 */ struct _KEVENT PowerEvent;
  /* 0x0360 */ struct _KEVENT WaitingForTeardownEvent;
  /* 0x0378 */ struct _KEVENT CoalescingFlushEvent;
  /* 0x0390 */ unsigned long PagesYetToWrite;
  /* 0x0394 */ long Padding_793;
  /* 0x0398 */ struct _LAZY_WRITER LazyWriter;
  /* 0x03e0 */ struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  /* 0x03f8 */ struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;
  /* 0x0430 */ struct _WRITE_BEHIND_THROUGHPUT* ThroughputStats;
  /* 0x0438 */ unsigned __int64 AverageAvailablePages;
  /* 0x0440 */ unsigned __int64 AverageDirtyPages;
  /* 0x0448 */ unsigned __int64 PagesSkippedDueToHotSpot;
  /* 0x0450 */ struct _LIST_ENTRY DeferredWrites;
  /* 0x0460 */ long Padding_794[8];
  /* 0x0480 */ unsigned __int64 DeferredWriteSpinLock;
  /* 0x0488 */ struct _EX_PUSH_LOCK AsyncReadWorkQueueLock;
  /* 0x0490 */ unsigned long MaxNumberOfWriteBehindThreads;
  /* 0x0494 */ unsigned char CoalescingState;
  /* 0x0495 */ unsigned char InitComplete;
  /* 0x0496 */ char Padding_795[2];
  /* 0x0498 */ struct _KEVENT ExitEvent;
  /* 0x04b0 */ struct _KEVENT FinalDereferenceEvent;
  /* 0x04c8 */ void* LazyWriteScanThreadHandle;
  /* 0x04d0 */ struct _CC_LWS_PACKET LWSPacket;
  /* 0x04e0 */ struct _LIST_ENTRY ExternalCacheList;
  /* 0x04f0 */ struct _LIST_ENTRY EnhancedExternalCacheList;
  /* 0x0500 */ unsigned long ThroughputIdx;
  /* 0x0504 */ long Padding_796;
  /* 0x0508 */ unsigned __int64 AvgPagesPerSecond;
  /* 0x0510 */ unsigned __int64 ThroughputHistory[32];
  /* 0x0610 */ unsigned long DirtyThresholdInSeconds;
  /* 0x0614 */ unsigned long DirtyPageTargetInSeconds;
  /* 0x0618 */ struct _LIST_ENTRY QuickLWSThreadList;
  /* 0x0628 */ struct _KEVENT QuickLazyScanEvent;
  /* 0x0640 */ union _LARGE_INTEGER PrevLazyWriteScanTime;
  /* 0x0648 */ unsigned long AsyncLazywriteQueueDepth;
  /* 0x064c */ unsigned long MaxAsyncLazywriteCompletionWorkers;
  /* 0x0650 */ unsigned long Flags;
  /* 0x0654 */ long Padding_797;
  /* 0x0658 */ union _LARGE_INTEGER DelayedDelTimestamp;
  /* 0x0660 */ long __PADDING__[8];
} PRIVATE_VOLUME_CACHEMAP, *PPRIVATE_VOLUME_CACHEMAP; /* size: 0x0680 */

typedef struct _VI_DEADLOCK_THREAD
{
  /* 0x0000 */ struct _KTHREAD* Thread;
  /* 0x0008 */ struct _VI_DEADLOCK_NODE* CurrentSpinNode;
  /* 0x0010 */ struct _VI_DEADLOCK_NODE* CurrentOtherNode;
  union
  {
    /* 0x0018 */ struct _LIST_ENTRY ListEntry;
    /* 0x0018 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0010 */
  /* 0x0028 */ unsigned long NodeCount;
  /* 0x002c */ volatile unsigned long PagingCount;
  /* 0x0030 */ unsigned char ThreadUsesEresources;
  /* 0x0031 */ char __PADDING__[7];
} VI_DEADLOCK_THREAD, *PVI_DEADLOCK_THREAD; /* size: 0x0038 */

typedef struct _VI_DEADLOCK_RESOURCE
{
  /* 0x0000 */ enum _VI_DEADLOCK_RESOURCE_TYPE Type;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long NodeCount : 16; /* bit position: 0 */
    /* 0x0004 */ unsigned long RecursionCount : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x0008 */ void* ResourceAddress;
  /* 0x0010 */ struct _VI_DEADLOCK_THREAD* ThreadOwner;
  /* 0x0018 */ struct _LIST_ENTRY ResourceList;
  union
  {
    /* 0x0028 */ struct _LIST_ENTRY HashChainList;
    /* 0x0028 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0010 */
  /* 0x0038 */ void* StackTrace[8];
  /* 0x0078 */ void* LastAcquireTrace[8];
  /* 0x00b8 */ void* LastReleaseTrace[8];
} VI_DEADLOCK_RESOURCE, *PVI_DEADLOCK_RESOURCE; /* size: 0x00f8 */

typedef struct _VI_DEADLOCK_NODE
{
  /* 0x0000 */ struct _VI_DEADLOCK_NODE* Parent;
  /* 0x0008 */ struct _LIST_ENTRY ChildrenList;
  /* 0x0018 */ struct _LIST_ENTRY SiblingsList;
  union
  {
    /* 0x0028 */ struct _LIST_ENTRY ResourceList;
    /* 0x0028 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0010 */
  /* 0x0038 */ struct _VI_DEADLOCK_RESOURCE* Root;
  /* 0x0040 */ struct _VI_DEADLOCK_THREAD* ThreadEntry;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0048 */ unsigned long Active : 1; /* bit position: 0 */
        /* 0x0048 */ unsigned long OnlyTryAcquireUsed : 1; /* bit position: 1 */
        /* 0x0048 */ unsigned long ReleasedOutOfOrder : 1; /* bit position: 2 */
        /* 0x0048 */ unsigned long SequenceNumber : 29; /* bit position: 3 */
      }; /* bitfield */
      /* 0x0048 */ unsigned long Whole;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x004c */ long ChildrenCount;
  /* 0x0050 */ void* StackTrace[8];
  /* 0x0090 */ void* ParentStackTrace[8];
} VI_DEADLOCK_NODE, *PVI_DEADLOCK_NODE; /* size: 0x00d0 */

typedef struct _POP_TRIGGER_WAIT
{
  /* 0x0000 */ struct _KEVENT Event;
  /* 0x0018 */ long Status;
  /* 0x001c */ long Padding_798;
  /* 0x0020 */ struct _LIST_ENTRY Link;
  /* 0x0030 */ struct _POP_ACTION_TRIGGER* Trigger;
} POP_TRIGGER_WAIT, *PPOP_TRIGGER_WAIT; /* size: 0x0038 */

typedef union _HEAP_LFH_ONDEMAND_POINTER
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned short Invalid : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned short AllocationInProgress : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned short Spare0 : 14; /* bit position: 2 */
      }; /* bitfield */
      /* 0x0002 */ unsigned short UsageData;
    }; /* size: 0x0004 */
    /* 0x0000 */ void* AllBits;
  }; /* size: 0x0008 */
} HEAP_LFH_ONDEMAND_POINTER, *PHEAP_LFH_ONDEMAND_POINTER; /* size: 0x0008 */

typedef struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long AbnormalResetOccurred;
  /* 0x0008 */ unsigned long OfflineMemoryDumpCapable;
  /* 0x000c */ long Padding_799;
  /* 0x0010 */ union _LARGE_INTEGER ResetDataAddress;
  /* 0x0018 */ unsigned long ResetDataSize;
  /* 0x001c */ long __PADDING__[1];
} OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2, *POFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2; /* size: 0x0020 */

typedef struct _HEAP_LARGE_ALLOC_DATA
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE TreeNode;
  union
  {
    /* 0x0018 */ unsigned __int64 VirtualAddress;
    /* 0x0018 */ unsigned __int64 UnusedBytes : 16; /* bit position: 0 */
  }; /* size: 0x0008 */
  struct /* bitfield */
  {
    /* 0x0020 */ unsigned __int64 ExtraPresent : 1; /* bit position: 0 */
    /* 0x0020 */ unsigned __int64 GuardPageCount : 1; /* bit position: 1 */
    /* 0x0020 */ unsigned __int64 GuardPageAlignment : 6; /* bit position: 2 */
    /* 0x0020 */ unsigned __int64 Spare : 4; /* bit position: 8 */
    /* 0x0020 */ unsigned __int64 AllocatedPages : 52; /* bit position: 12 */
  }; /* bitfield */
} HEAP_LARGE_ALLOC_DATA, *PHEAP_LARGE_ALLOC_DATA; /* size: 0x0028 */

typedef struct _MI_NODE_SLAB_IDENTITY_STATE
{
  /* 0x0000 */ struct _MI_STANDBY_LOOKASIDE SlabIdentityStandbyListCaches[8][65];
  /* 0x41000 */ struct _MMPFNLIST SlabIdentityStandbyPageLists[8][65];
  /* 0x4c2c0 */ struct _MI_SLAB_ALLOCATOR_ENTRY* SlabIdentityHints[64][2];
  /* 0x4c6c0 */ struct _LIST_ENTRY SlabIdentityLists[65];
  /* 0x4cad0 */ struct _RTL_BITMAP SlabIdentityEmptyEntryBitmap;
  /* 0x4cae0 */ unsigned long SlabIdentityEmptyEntryBitmapBuffer[3];
  /* 0x4caec */ long Padding_800;
  /* 0x4caf0 */ struct _RTL_BITMAP SlabIdentityStandbyExistsBitmap;
  /* 0x4cb00 */ unsigned long SlabIdentityStandbyExistsBitmapBuffer[3];
  /* 0x4cb0c */ long __PADDING__[13];
} MI_NODE_SLAB_IDENTITY_STATE, *PMI_NODE_SLAB_IDENTITY_STATE; /* size: 0x4cb40 */

typedef struct _KALPC_SECURITY_DATA
{
  /* 0x0000 */ struct _ALPC_HANDLE_TABLE* HandleTable;
  /* 0x0008 */ void* ContextHandle;
  /* 0x0010 */ struct _EPROCESS* OwningProcess;
  /* 0x0018 */ struct _ALPC_PORT* OwnerPort;
  /* 0x0020 */ struct _SECURITY_CLIENT_CONTEXT DynamicSecurity;
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0068 */ unsigned long Revoked : 1; /* bit position: 0 */
        /* 0x0068 */ unsigned long Impersonated : 1; /* bit position: 1 */
      }; /* bitfield */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x006c */ long __PADDING__[1];
} KALPC_SECURITY_DATA, *PKALPC_SECURITY_DATA; /* size: 0x0070 */

struct _DMAR_PAGE_TABLE_STATE;

typedef struct _ETW_BOOT_CONFIG
{
  /* 0x0000 */ unsigned long MaxLoggers;
  /* 0x0004 */ long Padding_801;
  /* 0x0008 */ struct _LIST_ENTRY BootLoggersList;
} ETW_BOOT_CONFIG, *PETW_BOOT_CONFIG; /* size: 0x0018 */

typedef struct _HMAP_TABLE
{
  /* 0x0000 */ struct _HMAP_ENTRY Table[512];
} HMAP_TABLE, *PHMAP_TABLE; /* size: 0x3000 */

typedef struct _ETW_WMITRACE_WORK
{
  /* 0x0000 */ unsigned long LoggerId;
  /* 0x0004 */ unsigned long SiloSessionId;
  union
  {
    struct
    {
      /* 0x0008 */ char LoggerName[65];
      /* 0x0049 */ char FileName[129];
      /* 0x00ca */ char Padding_802[2];
      /* 0x00cc */ unsigned long MaximumFileSize;
      /* 0x00d0 */ unsigned long MinBuffers;
      /* 0x00d4 */ unsigned long MaxBuffers;
      /* 0x00d8 */ unsigned long BufferSize;
      /* 0x00dc */ unsigned long Mode;
      /* 0x00e0 */ unsigned long FlushTimer;
    }; /* size: 0x00da */
    struct
    {
      /* 0x0008 */ unsigned __int64 MatchAny;
      /* 0x0010 */ unsigned __int64 MatchAll;
      /* 0x0018 */ unsigned long EnableProperty;
      /* 0x001c */ struct _GUID Guid;
      /* 0x002c */ unsigned char Level;
      /* 0x002d */ char Padding_803[187];
      /* 0x00e8 */ long Status;
      /* 0x00ec */ long __PADDING__[1];
    }; /* size: 0x002d */
  }; /* size: 0x00da */
} ETW_WMITRACE_WORK, *PETW_WMITRACE_WORK; /* size: 0x00f0 */

typedef struct _HEAP_FREE_ENTRY
{
  union
  {
    /* 0x0000 */ struct _HEAP_ENTRY HeapEntry;
    /* 0x0000 */ struct _HEAP_UNPACKED_ENTRY UnpackedEntry;
    struct
    {
      /* 0x0000 */ void* PreviousBlockPrivateData;
      union
      {
        struct
        {
          /* 0x0008 */ unsigned short Size;
          /* 0x000a */ unsigned char Flags;
          /* 0x000b */ unsigned char SmallTagIndex;
        }; /* size: 0x0004 */
        struct
        {
          /* 0x0008 */ unsigned long SubSegmentCode;
          /* 0x000c */ unsigned short PreviousSize;
          union
          {
            /* 0x000e */ unsigned char SegmentOffset;
            struct
            {
              /* 0x000e */ unsigned char LFHFlags;
              /* 0x000f */ unsigned char UnusedBytes;
            }; /* size: 0x0002 */
          }; /* size: 0x0002 */
        }; /* size: 0x0008 */
        /* 0x0008 */ unsigned __int64 CompactHeader;
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
    /* 0x0000 */ struct _HEAP_EXTENDED_ENTRY ExtendedEntry;
    struct
    {
      /* 0x0000 */ void* Reserved;
      union
      {
        struct
        {
          /* 0x0008 */ unsigned short FunctionIndex;
          /* 0x000a */ unsigned short ContextValue;
        }; /* size: 0x0004 */
        struct
        {
          /* 0x0008 */ unsigned long InterceptorValue;
          /* 0x000c */ unsigned short UnusedBytesLength;
          /* 0x000e */ unsigned char EntryOffset;
          /* 0x000f */ unsigned char ExtendedBlockSignature;
        }; /* size: 0x0008 */
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0000 */ void* ReservedForAlignment;
      union
      {
        struct
        {
          /* 0x0008 */ unsigned long Code1;
          union
          {
            struct
            {
              /* 0x000c */ unsigned short Code2;
              /* 0x000e */ unsigned char Code3;
              /* 0x000f */ unsigned char Code4;
            }; /* size: 0x0004 */
            /* 0x000c */ unsigned long Code234;
          }; /* size: 0x0004 */
        }; /* size: 0x0008 */
        /* 0x0008 */ unsigned __int64 AgregateCode;
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0010 */ struct _LIST_ENTRY FreeList;
} HEAP_FREE_ENTRY, *PHEAP_FREE_ENTRY; /* size: 0x0020 */

typedef struct _CM_KEY_SECURITY_CACHE
{
  /* 0x0000 */ unsigned long Cell;
  /* 0x0004 */ unsigned long ConvKey;
  /* 0x0008 */ struct _LIST_ENTRY List;
  /* 0x0018 */ unsigned long DescriptorLength;
  /* 0x001c */ unsigned long RealRefCount;
  /* 0x0020 */ struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
  /* 0x0034 */ long __PADDING__[1];
} CM_KEY_SECURITY_CACHE, *PCM_KEY_SECURITY_CACHE; /* size: 0x0038 */

typedef struct _MEMORY_MIRRORING_DATA
{
  /* 0x0000 */ unsigned long MemoryRangeCount;
  /* 0x0004 */ unsigned long IoSpaceRangeCount;
  /* 0x0008 */ struct _LOADER_MEMORY_RANGE* MemoryRanges;
  /* 0x0010 */ struct _LOADER_MEMORY_RANGE* IoSpaceRanges;
} MEMORY_MIRRORING_DATA, *PMEMORY_MIRRORING_DATA; /* size: 0x0018 */

typedef struct _DMA_COMMON_BUFFER_ENTRY
{
  /* 0x0000 */ void* VirtualAddress;
  /* 0x0008 */ union _LARGE_INTEGER LogicalAddress;
} DMA_COMMON_BUFFER_ENTRY, *PDMA_COMMON_BUFFER_ENTRY; /* size: 0x0010 */

typedef union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 ErrorStatus : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 PhysicalAddress : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 PhysicalAddressMask : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 Node : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 Card : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 Module : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 Bank : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 Device : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned __int64 Row : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Column : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 BitPosition : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 RequesterId : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 ResponderId : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 TargetId : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned __int64 ErrorType : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned __int64 RankNumber : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned __int64 CardHandle : 1; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 ModuleHandle : 1; /* bit position: 17 */
      /* 0x0000 */ unsigned __int64 ExtendedRow : 1; /* bit position: 18 */
      /* 0x0000 */ unsigned __int64 BankGroup : 1; /* bit position: 19 */
      /* 0x0000 */ unsigned __int64 BankAddress : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned __int64 ChipIdentification : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned __int64 Reserved : 42; /* bit position: 22 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 ValidBits;
  }; /* size: 0x0008 */
} WHEA_MEMORY_ERROR_SECTION_VALIDBITS, *PWHEA_MEMORY_ERROR_SECTION_VALIDBITS; /* size: 0x0008 */

typedef union _WHEA_ERROR_STATUS
{
  union
  {
    /* 0x0000 */ unsigned __int64 ErrorStatus;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Reserved1 : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 ErrorType : 8; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Address : 1; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Control : 1; /* bit position: 17 */
      /* 0x0000 */ unsigned __int64 Data : 1; /* bit position: 18 */
      /* 0x0000 */ unsigned __int64 Responder : 1; /* bit position: 19 */
      /* 0x0000 */ unsigned __int64 Requester : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned __int64 FirstError : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned __int64 Overflow : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned __int64 Reserved2 : 41; /* bit position: 23 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} WHEA_ERROR_STATUS, *PWHEA_ERROR_STATUS; /* size: 0x0008 */

typedef struct _WHEA_MEMORY_ERROR_SECTION
{
  /* 0x0000 */ union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits;
  /* 0x0008 */ union _WHEA_ERROR_STATUS ErrorStatus;
  /* 0x0010 */ unsigned __int64 PhysicalAddress;
  /* 0x0018 */ unsigned __int64 PhysicalAddressMask;
  /* 0x0020 */ unsigned short Node;
  /* 0x0022 */ unsigned short Card;
  /* 0x0024 */ unsigned short Module;
  /* 0x0026 */ unsigned short Bank;
  /* 0x0028 */ unsigned short Device;
  /* 0x002a */ unsigned short Row;
  /* 0x002c */ unsigned short Column;
  /* 0x002e */ unsigned short BitPosition;
  /* 0x0030 */ unsigned __int64 RequesterId;
  /* 0x0038 */ unsigned __int64 ResponderId;
  /* 0x0040 */ unsigned __int64 TargetId;
  /* 0x0048 */ unsigned char ErrorType;
  /* 0x0049 */ unsigned char Extended;
  /* 0x004a */ unsigned short RankNumber;
  /* 0x004c */ unsigned short CardHandle;
  /* 0x004e */ unsigned short ModuleHandle;
} WHEA_MEMORY_ERROR_SECTION, *PWHEA_MEMORY_ERROR_SECTION; /* size: 0x0050 */

typedef struct _BLOB
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY ResourceList;
    /* 0x0000 */ struct _SLIST_ENTRY FreeListEntry;
  }; /* size: 0x0010 */
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0010 */ unsigned char ReferenceCache : 1; /* bit position: 0 */
          /* 0x0010 */ unsigned char Lookaside : 1; /* bit position: 1 */
          /* 0x0010 */ unsigned char Initializing : 1; /* bit position: 2 */
          /* 0x0010 */ unsigned char Deleted : 1; /* bit position: 3 */
        }; /* bitfield */
      } /* size: 0x0001 */ s1;
      /* 0x0010 */ unsigned char Flags;
    }; /* size: 0x0001 */
  } /* size: 0x0001 */ u1;
  /* 0x0011 */ unsigned char ResourceId;
  /* 0x0012 */ short CachedReferences;
  /* 0x0014 */ long Padding_804;
  /* 0x0018 */ __int64 ReferenceCount;
  /* 0x0020 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0028 */ long __PADDING__[2];
} BLOB, *PBLOB; /* size: 0x0030 */

typedef struct _DMA_COMMON_BUFFER_EXTENDED_CONFIGURATION
{
  /* 0x0000 */ enum _DMA_COMMON_BUFFER_EXTENDED_CONFIGURATION_TYPE ConfigType;
  /* 0x0004 */ long Padding_805;
  union
  {
    struct
    {
      /* 0x0008 */ union _LARGE_INTEGER MinimumAddress;
      /* 0x0010 */ union _LARGE_INTEGER MaximumAddress;
    } /* size: 0x0010 */ LogicalAddressLimits;
    struct
    {
      /* 0x0008 */ unsigned __int64 Offset;
      /* 0x0010 */ unsigned long Length;
      /* 0x0014 */ long __PADDING__[1];
    } /* size: 0x0010 */ SubSection;
    /* 0x0008 */ enum _DMA_COMMON_BUFFER_EXTENDED_CONFIGURATION_ACCESS_TYPE HardwareAccessType;
    /* 0x0008 */ unsigned __int64 Reserved[4];
  }; /* size: 0x0020 */
} DMA_COMMON_BUFFER_EXTENDED_CONFIGURATION, *PDMA_COMMON_BUFFER_EXTENDED_CONFIGURATION; /* size: 0x0028 */

typedef struct _IOMMU_DMA_LOGICAL_ADDRESS_TOKEN_MAPPED_SEGMENT
{
  /* 0x0000 */ struct _IOMMU_DMA_LOGICAL_ADDRESS_TOKEN* OwningToken;
  /* 0x0008 */ unsigned __int64 Offset;
  /* 0x0010 */ unsigned __int64 Size;
} IOMMU_DMA_LOGICAL_ADDRESS_TOKEN_MAPPED_SEGMENT, *PIOMMU_DMA_LOGICAL_ADDRESS_TOKEN_MAPPED_SEGMENT; /* size: 0x0018 */

typedef struct _HALP_DMA_TRANSLATION_ENTRY
{
  /* 0x0000 */ unsigned __int64 PhysicalAddress;
  /* 0x0008 */ struct _HALP_DMA_TRANSLATION_ENTRY* Next;
  /* 0x0010 */ unsigned long MappedLength;
  /* 0x0014 */ long Padding_806;
  /* 0x0018 */ struct _IOMMU_DMA_LOGICAL_ADDRESS_TOKEN_MAPPED_SEGMENT RemappingAddress;
  union
  {
    union
    {
      /* 0x0030 */ void* VirtualAddress;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0030 */ unsigned __int64 BoundToMaster : 1; /* bit position: 0 */
          /* 0x0030 */ unsigned __int64 BoundToScatterPool : 1; /* bit position: 1 */
          /* 0x0030 */ unsigned __int64 OwnedByMaster : 1; /* bit position: 2 */
          /* 0x0030 */ unsigned __int64 OwnedByScatterPool : 1; /* bit position: 3 */
          /* 0x0030 */ unsigned __int64 TemporaryMapping : 1; /* bit position: 4 */
          /* 0x0030 */ unsigned __int64 ZeroBuffer : 1; /* bit position: 5 */
          /* 0x0030 */ unsigned __int64 Address : 58; /* bit position: 6 */
        }; /* bitfield */
      } /* size: 0x0008 */ Flags;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u;
  /* 0x0038 */ struct _HALP_DMA_TRANSLATION_ENTRY* NextMapping;
  /* 0x0040 */ unsigned char LogicalBounceBufferPremapped;
  /* 0x0041 */ char __PADDING__[7];
} HALP_DMA_TRANSLATION_ENTRY, *PHALP_DMA_TRANSLATION_ENTRY; /* size: 0x0048 */

typedef struct _IOMMU_DMA_LOGICAL_ADDRESS_TOKEN
{
  /* 0x0000 */ unsigned __int64 LogicalAddressBase;
  /* 0x0008 */ unsigned __int64 Size;
} IOMMU_DMA_LOGICAL_ADDRESS_TOKEN, *PIOMMU_DMA_LOGICAL_ADDRESS_TOKEN; /* size: 0x0010 */

typedef struct _HALP_DMA_TRANSLATION_BUFFER
{
  /* 0x0000 */ struct _HALP_DMA_TRANSLATION_BUFFER* Next;
  /* 0x0008 */ unsigned long EntryCount;
  /* 0x000c */ long Padding_807;
  /* 0x0010 */ struct _HALP_DMA_TRANSLATION_ENTRY* Entries;
} HALP_DMA_TRANSLATION_BUFFER, *PHALP_DMA_TRANSLATION_BUFFER; /* size: 0x0018 */

typedef struct _DMA_SCATTER_GATHER_LIST
{
  /* 0x0000 */ unsigned long NumberOfElements;
  /* 0x0004 */ long Padding_808;
  /* 0x0008 */ unsigned __int64 Reserved;
  /* 0x0010 */ struct _SCATTER_GATHER_ELEMENT* Elements /* zero-length array */;
} DMA_SCATTER_GATHER_LIST, *PDMA_SCATTER_GATHER_LIST; /* size: 0x0010 */

typedef struct _SEGMENT
{
  /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0008 */ unsigned long TotalNumberOfPtes;
  /* 0x000c */ struct _SEGMENT_FLAGS SegmentFlags;
  /* 0x0010 */ unsigned __int64 NumberOfCommittedPages;
  /* 0x0018 */ unsigned __int64 SizeOfSegment;
  union
  {
    /* 0x0020 */ struct _MMEXTEND_INFO* ExtendInfo;
    /* 0x0020 */ void* BasedAddress;
  }; /* size: 0x0008 */
  /* 0x0028 */ struct _EX_PUSH_LOCK SegmentLock;
  union
  {
    union
    {
      /* 0x0030 */ unsigned __int64 ImageCommitment;
      /* 0x0030 */ unsigned long CreatingProcessId;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
  union
  {
    union
    {
      /* 0x0038 */ struct _MI_SECTION_IMAGE_INFORMATION* ImageInformation;
      /* 0x0038 */ void* FirstMappedVa;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u2;
  /* 0x0040 */ struct _MMPTE* PrototypePte;
} SEGMENT, *PSEGMENT; /* size: 0x0048 */

typedef struct _WHEAP_INFO_BLOCK
{
  /* 0x0000 */ unsigned long ErrorSourceCount;
  /* 0x0004 */ long Padding_809;
  /* 0x0008 */ struct _WHEAP_ERROR_SOURCE_TABLE* ErrorSourceTable;
  /* 0x0010 */ struct _WHEAP_WORK_QUEUE* WorkQueue;
} WHEAP_INFO_BLOCK, *PWHEAP_INFO_BLOCK; /* size: 0x0018 */

typedef struct _SECURITY_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short Control;
  /* 0x0004 */ long Padding_810;
  /* 0x0008 */ void* Owner;
  /* 0x0010 */ void* Group;
  /* 0x0018 */ struct _ACL* Sacl;
  /* 0x0020 */ struct _ACL* Dacl;
} SECURITY_DESCRIPTOR, *PSECURITY_DESCRIPTOR; /* size: 0x0028 */

typedef union _EXT_IOMMU_DEVICE_ID_FLAGS
{
  union
  {
    /* 0x0000 */ unsigned short AsUSHORT;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short IsAliased : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short Reserved : 15; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0002 */
} EXT_IOMMU_DEVICE_ID_FLAGS, *PEXT_IOMMU_DEVICE_ID_FLAGS; /* size: 0x0002 */

typedef struct _EXT_IOMMU_DEVICE_ID_PCI
{
  union
  {
    /* 0x0000 */ unsigned __int64 AsUINT64;
    struct
    {
      /* 0x0000 */ unsigned short PciSegmentNumber;
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned short PhantomFunctionBits : 2; /* bit position: 0 */
        /* 0x0002 */ unsigned short Reserved : 6; /* bit position: 2 */
        /* 0x0002 */ unsigned short StartBusNumber : 8; /* bit position: 8 */
      }; /* bitfield */
      /* 0x0004 */ unsigned short Bdf;
      /* 0x0006 */ unsigned short DevicePathLength;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned short* DevicePath;
} EXT_IOMMU_DEVICE_ID_PCI, *PEXT_IOMMU_DEVICE_ID_PCI; /* size: 0x0010 */

typedef struct _EXT_IOMMU_DEVICE_ID
{
  /* 0x0000 */ enum _EXT_IOMMU_DEVICE_TYPE DeviceType;
  /* 0x0004 */ union _EXT_IOMMU_DEVICE_ID_FLAGS Flags;
  /* 0x0006 */ char Padding_811[2];
  union
  {
    /* 0x0008 */ struct _EXT_IOMMU_DEVICE_ID_PCI Pci;
    /* 0x0008 */ struct _EXT_IOMMU_DEVICE_ID_ACPI Acpi;
    /* 0x0008 */ unsigned char IoApicId;
    /* 0x0008 */ unsigned __int64 LogicalId;
    struct
    {
      /* 0x0008 */ struct _EXT_IOMMU_DEVICE_ID_TEST Test;
      /* 0x0010 */ long __PADDING__[2];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} EXT_IOMMU_DEVICE_ID, *PEXT_IOMMU_DEVICE_ID; /* size: 0x0018 */

struct wil_details_RecordUsageResult
{
  /* 0x0000 */ int queueBackground;
  /* 0x0004 */ unsigned int countImmediate;
  /* 0x0008 */ enum wil_details_ServiceReportingKind kindImmediate;
  /* 0x000c */ unsigned int payloadId;
  /* 0x0010 */ int ignoredUse;
  /* 0x0014 */ int isWexpConfiguration;
}; /* size: 0x0018 */

typedef struct _FSRTL_PER_STREAM_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ void* OwnerId;
  /* 0x0018 */ void* InstanceId;
  /* 0x0020 */ void* FreeCallback /* function */;
} FSRTL_PER_STREAM_CONTEXT, *PFSRTL_PER_STREAM_CONTEXT; /* size: 0x0028 */

typedef union _MM_PAGE_ACCESS_INFO_FLAGS
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long FilePointerIndex : 9; /* bit position: 0 */
        /* 0x0000 */ unsigned long HardFault : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned long Image : 1; /* bit position: 10 */
        /* 0x0000 */ unsigned long Spare0 : 1; /* bit position: 11 */
      }; /* bitfield */
    } /* size: 0x0004 */ File;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long FilePointerIndex : 9; /* bit position: 0 */
        /* 0x0000 */ unsigned long HardFault : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned long Spare1 : 2; /* bit position: 10 */
      }; /* bitfield */
    } /* size: 0x0004 */ Private;
  }; /* size: 0x0004 */
} MM_PAGE_ACCESS_INFO_FLAGS, *PMM_PAGE_ACCESS_INFO_FLAGS; /* size: 0x0004 */

typedef struct _POOL_LIMIT_INFO
{
  /* 0x0000 */ unsigned __int64 HardMemoryLimit;
  /* 0x0008 */ unsigned __int64 NotificationLimit;
  /* 0x0010 */ unsigned __int64 MemoryIssued;
} POOL_LIMIT_INFO, *PPOOL_LIMIT_INFO; /* size: 0x0018 */

typedef struct _IOMMU_RESERVED_DEVICE
{
  /* 0x0000 */ struct _EXT_IOMMU_DEVICE_ID* DeviceId;
  /* 0x0008 */ void* PageTable;
  /* 0x0010 */ union _LARGE_INTEGER PageTablePhysical;
  /* 0x0018 */ struct _EXT_IOMMU_DEVICE* ExtDevice;
  /* 0x0020 */ unsigned long RegionCount;
  /* 0x0024 */ long Padding_812;
  /* 0x0028 */ struct _EXT_IOMMU_RESERVED_MEMORY_REGION Regions[1];
} IOMMU_RESERVED_DEVICE, *PIOMMU_RESERVED_DEVICE; /* size: 0x0040 */

typedef struct _HAL_HV_DMA_DOMAIN_CONFIG
{
  /* 0x0000 */ enum _HAL_HV_DMA_DOMAIN_CONFIG_ARCH Type;
  /* 0x0004 */ long Padding_813;
  union
  {
    /* 0x0008 */ struct _HAL_HV_DMA_DOMAIN_CONFIG_ARM64 Arm64;
    struct
    {
      /* 0x0008 */ struct _HAL_HV_DMA_DOMAIN_CONFIG_X64 X64;
      /* 0x0018 */ long __PADDING__[4];
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
} HAL_HV_DMA_DOMAIN_CONFIG, *PHAL_HV_DMA_DOMAIN_CONFIG; /* size: 0x0028 */

typedef union _HEAP_LFH_COMMIT_UNIT_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char CommitUnitShift;
      /* 0x0001 */ unsigned char CommitUnitCount;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short UShort;
  }; /* size: 0x0002 */
} HEAP_LFH_COMMIT_UNIT_INFO, *PHEAP_LFH_COMMIT_UNIT_INFO; /* size: 0x0002 */

typedef struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short BlockSize;
      /* 0x0002 */ unsigned short FirstBlockOffset;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long EncodedData;
  }; /* size: 0x0004 */
} HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS, *PHEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS; /* size: 0x0004 */

typedef union _HEAP_LFH_SUBSEGMENT_UCHAR_FIELDS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char PrivateFormat : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char Spare1 : 7; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AllUCharBits;
  }; /* size: 0x0001 */
} HEAP_LFH_SUBSEGMENT_UCHAR_FIELDS, *PHEAP_LFH_SUBSEGMENT_UCHAR_FIELDS; /* size: 0x0001 */

typedef struct _HEAP_LFH_SUBSEGMENT
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ union _HEAP_LFH_SUBSEGMENT_STATE State;
  union
  {
    /* 0x0018 */ struct _SINGLE_LIST_ENTRY OwnerFreeListEntry;
    struct
    {
      /* 0x0018 */ unsigned char CommitStateOffset;
      /* 0x0019 */ unsigned char Spare0 : 4; /* bit position: 0 */
    }; /* size: 0x0002 */
  }; /* size: 0x0008 */
  /* 0x0020 */ unsigned short FreeCount;
  /* 0x0022 */ unsigned short BlockCount;
  /* 0x0024 */ unsigned char FreeHint;
  /* 0x0025 */ unsigned char WitheldBlockCount;
  union
  {
    struct
    {
      /* 0x0026 */ unsigned char CommitUnitShift;
      /* 0x0027 */ unsigned char CommitUnitCount;
    }; /* size: 0x0002 */
    /* 0x0026 */ union _HEAP_LFH_COMMIT_UNIT_INFO CommitUnitInfo;
  }; /* size: 0x0002 */
  /* 0x0028 */ struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS BlockOffsets;
  /* 0x002c */ unsigned short BucketRef;
  /* 0x002e */ unsigned short PrivateSlotMapRef;
  /* 0x0030 */ unsigned short HighWatermarkBlockIndex;
  /* 0x0032 */ unsigned char BitmapSearchWidth;
  union
  {
    struct /* bitfield */
    {
      /* 0x0033 */ unsigned char PrivateFormat : 1; /* bit position: 0 */
      /* 0x0033 */ unsigned char Spare1 : 7; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0033 */ union _HEAP_LFH_SUBSEGMENT_UCHAR_FIELDS UChar;
  }; /* size: 0x0001 */
  /* 0x0034 */ unsigned long Spare3;
  /* 0x0038 */ unsigned __int64 CommitLock;
  /* 0x0040 */ unsigned __int64 BlockBitmap[1];
} HEAP_LFH_SUBSEGMENT, *PHEAP_LFH_SUBSEGMENT; /* size: 0x0048 */

typedef struct _DEBUG_TRANSPORT_DATA
{
  /* 0x0000 */ unsigned long HwContextSize;
  /* 0x0004 */ unsigned long SharedVisibleDataSize;
  /* 0x0008 */ unsigned char UseSerialFraming;
  /* 0x0009 */ unsigned char ValidUSBCoreId;
  /* 0x000a */ unsigned char USBCoreId;
  /* 0x000b */ char __PADDING__[1];
} DEBUG_TRANSPORT_DATA, *PDEBUG_TRANSPORT_DATA; /* size: 0x000c */

typedef struct _DEBUG_IOMMU_EFI_DATA
{
  /* 0x0000 */ void* PciIoProtocolHandle;
  /* 0x0008 */ void* Mapping;
} DEBUG_IOMMU_EFI_DATA, *PDEBUG_IOMMU_EFI_DATA; /* size: 0x0010 */

typedef struct _DEBUG_DEVICE_DESCRIPTOR
{
  /* 0x0000 */ unsigned long Bus;
  /* 0x0004 */ unsigned long Slot;
  /* 0x0008 */ unsigned short Segment;
  /* 0x000a */ unsigned short VendorID;
  /* 0x000c */ unsigned short DeviceID;
  /* 0x000e */ unsigned char BaseClass;
  /* 0x000f */ unsigned char SubClass;
  /* 0x0010 */ unsigned char ProgIf;
  union
  {
    /* 0x0011 */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x0011 */ unsigned char DbgHalScratchAllocated : 1; /* bit position: 0 */
      /* 0x0011 */ unsigned char DbgBarsMapped : 1; /* bit position: 1 */
      /* 0x0011 */ unsigned char DbgScratchAllocated : 1; /* bit position: 2 */
      /* 0x0011 */ unsigned char DbgUncachedMemory : 1; /* bit position: 3 */
      /* 0x0011 */ unsigned char DbgSynthetic : 1; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0012 */ unsigned char Initialized;
  /* 0x0013 */ unsigned char Configured;
  /* 0x0014 */ long Padding_814;
  /* 0x0018 */ struct DEBUG_DEVICE_ADDRESS BaseAddress[6];
  /* 0x00a8 */ struct DEBUG_MEMORY_REQUIREMENTS Memory;
  /* 0x00c8 */ unsigned long Dbg2TableIndex;
  /* 0x00cc */ unsigned short PortType;
  /* 0x00ce */ unsigned short PortSubtype;
  /* 0x00d0 */ void* OemData;
  /* 0x00d8 */ unsigned long OemDataLength;
  /* 0x00dc */ enum KD_NAMESPACE_ENUM NameSpace;
  /* 0x00e0 */ wchar_t* NameSpacePath;
  /* 0x00e8 */ unsigned long NameSpacePathLength;
  /* 0x00ec */ unsigned long TransportType;
  /* 0x00f0 */ struct _DEBUG_TRANSPORT_DATA TransportData;
  /* 0x00fc */ long Padding_815;
  /* 0x0100 */ struct _DEBUG_IOMMU_EFI_DATA EfiIoMmuData;
} DEBUG_DEVICE_DESCRIPTOR, *PDEBUG_DEVICE_DESCRIPTOR; /* size: 0x0110 */

typedef struct _IOMMU_RESERVED_DEVICE_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_816;
  /* 0x0008 */ struct _IOMMU_RESERVED_DEVICE* Devices[1];
} IOMMU_RESERVED_DEVICE_LIST, *PIOMMU_RESERVED_DEVICE_LIST; /* size: 0x0010 */

typedef struct _NLS_DATA_BLOCK
{
  /* 0x0000 */ void* AnsiCodePageData;
  /* 0x0008 */ void* OemCodePageData;
  /* 0x0010 */ void* UnicodeCaseTableData;
} NLS_DATA_BLOCK, *PNLS_DATA_BLOCK; /* size: 0x0018 */

typedef struct _LOADER_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned __int64 StartTime;
  /* 0x0008 */ unsigned __int64 EndTime;
  /* 0x0010 */ unsigned __int64 PreloadEndTime;
  /* 0x0018 */ unsigned __int64 TcbLoaderStartTime;
  /* 0x0020 */ unsigned __int64 LoadHypervisorTime;
  /* 0x0028 */ unsigned __int64 LaunchHypervisorTime;
  /* 0x0030 */ unsigned __int64 LoadVsmTime;
  /* 0x0038 */ unsigned __int64 LaunchVsmTime;
  /* 0x0040 */ unsigned __int64 ExecuteTransitionStartTime;
  /* 0x0048 */ unsigned __int64 ExecuteTransitionEndTime;
  /* 0x0050 */ unsigned __int64 LoadDriversTime;
  /* 0x0058 */ unsigned __int64 CleanupVsmTime;
} LOADER_PERFORMANCE_DATA, *PLOADER_PERFORMANCE_DATA; /* size: 0x0060 */

typedef struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION
{
  /* 0x0000 */ unsigned long InitialHypervisorCrashdumpAreaPageCount;
  /* 0x0004 */ unsigned long HypervisorCrashdumpAreaPageCount;
  /* 0x0008 */ unsigned __int64 InitialHypervisorCrashdumpAreaSpa;
  /* 0x0010 */ unsigned __int64 HypervisorCrashdumpAreaSpa;
  /* 0x0018 */ unsigned __int64 HypervisorLaunchStatus;
  /* 0x0020 */ unsigned __int64 HypervisorLaunchStatusArg1;
  union
  {
    struct
    {
      /* 0x0028 */ unsigned __int64 HypervisorLaunchStatusArg2;
      /* 0x0030 */ unsigned __int64 HypervisorLaunchStatusArg3;
      /* 0x0038 */ unsigned __int64 HypervisorLaunchStatusArg4;
    }; /* size: 0x0018 */
    struct
    {
      /* 0x0028 */ void* RangeArray;
      /* 0x0030 */ unsigned long RangeCount;
      /* 0x0034 */ long __PADDING__[3];
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
} LOADER_PARAMETER_HYPERVISOR_EXTENSION, *PLOADER_PARAMETER_HYPERVISOR_EXTENSION; /* size: 0x0040 */

typedef struct _LOADER_BUGCHECK_PARAMETERS
{
  /* 0x0000 */ unsigned long BugcheckCode;
  /* 0x0004 */ long Padding_817;
  /* 0x0008 */ unsigned __int64 BugcheckParameter1;
  /* 0x0010 */ unsigned __int64 BugcheckParameter2;
  /* 0x0018 */ unsigned __int64 BugcheckParameter3;
  /* 0x0020 */ unsigned __int64 BugcheckParameter4;
} LOADER_BUGCHECK_PARAMETERS, *PLOADER_BUGCHECK_PARAMETERS; /* size: 0x0028 */

typedef struct _LOADER_RESET_REASON
{
  /* 0x0000 */ unsigned char Supplied;
  /* 0x0001 */ char Padding_818[7];
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ unsigned char Pch;
        /* 0x0009 */ unsigned char EmbeddedController;
        /* 0x000a */ unsigned char Reserved[6];
      } /* size: 0x0008 */ Component;
      /* 0x0008 */ unsigned __int64 AsULONG64;
      /* 0x0008 */ unsigned char AsBytes[8];
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Basic;
  /* 0x0010 */ unsigned long AdditionalInfo[8];
} LOADER_RESET_REASON, *PLOADER_RESET_REASON; /* size: 0x0030 */

typedef struct _VSM_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned __int64 LaunchVsmMark[8];
} VSM_PERFORMANCE_DATA, *PVSM_PERFORMANCE_DATA; /* size: 0x0040 */

typedef struct _LOADER_PARAMETER_EXTENSION
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ struct _PROFILE_PARAMETER_BLOCK Profile;
  /* 0x0014 */ long Padding_819;
  /* 0x0018 */ void* EmInfFileImage;
  /* 0x0020 */ unsigned long EmInfFileSize;
  /* 0x0024 */ long Padding_820;
  /* 0x0028 */ void* TriageDumpBlock;
  /* 0x0030 */ struct _HEADLESS_LOADER_BLOCK* HeadlessLoaderBlock;
  /* 0x0038 */ struct _SMBIOS3_TABLE_HEADER* SMBiosEPSHeader;
  /* 0x0040 */ void* DrvDBImage;
  /* 0x0048 */ unsigned long DrvDBSize;
  /* 0x004c */ long Padding_821;
  /* 0x0050 */ void* DrvDBPatchImage;
  /* 0x0058 */ unsigned long DrvDBPatchSize;
  /* 0x005c */ long Padding_822;
  /* 0x0060 */ struct _NETWORK_LOADER_BLOCK* NetworkLoaderBlock;
  /* 0x0068 */ struct _LIST_ENTRY FirmwareDescriptorListHead;
  /* 0x0078 */ void* AcpiTable;
  /* 0x0080 */ unsigned long AcpiTableSize;
  struct /* bitfield */
  {
    /* 0x0084 */ unsigned long LastBootSucceeded : 1; /* bit position: 0 */
    /* 0x0084 */ unsigned long LastBootShutdown : 1; /* bit position: 1 */
    /* 0x0084 */ unsigned long IumPersistentDatabaseEnabled : 1; /* bit position: 2 */
    /* 0x0084 */ unsigned long BootDebuggerActive : 1; /* bit position: 3 */
    /* 0x0084 */ unsigned long StrongCodeGuarantees : 1; /* bit position: 4 */
    /* 0x0084 */ unsigned long HardStrongCodeGuarantees : 1; /* bit position: 5 */
    /* 0x0084 */ unsigned long SidSharingDisabled : 1; /* bit position: 6 */
    /* 0x0084 */ unsigned long TpmInitialized : 1; /* bit position: 7 */
    /* 0x0084 */ unsigned long VsmConfigured : 1; /* bit position: 8 */
    /* 0x0084 */ unsigned long IumEnabled : 1; /* bit position: 9 */
    /* 0x0084 */ unsigned long IsSmbboot : 1; /* bit position: 10 */
    /* 0x0084 */ unsigned long BootLogEnabled : 1; /* bit position: 11 */
    /* 0x0084 */ unsigned long DriverVerifierEnabled : 1; /* bit position: 12 */
    /* 0x0084 */ unsigned long SuppressMonitorX : 1; /* bit position: 13 */
    /* 0x0084 */ unsigned long KernelCetEnabled : 1; /* bit position: 14 */
    /* 0x0084 */ unsigned long SuppressSmap : 1; /* bit position: 15 */
    /* 0x0084 */ unsigned long PointerAuthKernelIpEnabled : 1; /* bit position: 16 */
    /* 0x0084 */ unsigned long SplitLargeNumaNodes : 1; /* bit position: 17 */
    /* 0x0084 */ unsigned long KernelCetAuditModeEnabled : 1; /* bit position: 18 */
    /* 0x0084 */ unsigned long VerboseSELEnabled : 1; /* bit position: 19 */
    /* 0x0084 */ unsigned long EarlyCrashDumpEnabled : 1; /* bit position: 20 */
    /* 0x0084 */ unsigned long FeatureSimulations : 6; /* bit position: 21 */
    /* 0x0084 */ unsigned long MicrocodeSelfHosting : 1; /* bit position: 27 */
    /* 0x0084 */ unsigned long XhciLegacyHandoffSkip : 1; /* bit position: 28 */
    /* 0x0084 */ unsigned long DisableInsiderOptInHVCI : 1; /* bit position: 29 */
    /* 0x0084 */ unsigned long MicrocodeMinVerSupported : 1; /* bit position: 30 */
    /* 0x0084 */ unsigned long GpuIommuEnabled : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0088 */ struct _LOADER_PERFORMANCE_DATA LoaderPerformanceData;
  /* 0x00e8 */ struct _LIST_ENTRY BootApplicationPersistentData;
  /* 0x00f8 */ void* WmdTestResult;
  /* 0x0100 */ struct _GUID BootIdentifier;
  /* 0x0110 */ unsigned long Reserved1;
  /* 0x0114 */ long Padding_823;
  /* 0x0118 */ void* DumpHeader;
  /* 0x0120 */ void* BgContext;
  /* 0x0128 */ void* NumaLocalityInfo;
  /* 0x0130 */ void* NumaGroupAssignment;
  /* 0x0138 */ struct _LIST_ENTRY AttachedHives;
  /* 0x0148 */ unsigned long MemoryCachingRequirementsCount;
  /* 0x014c */ long Padding_824;
  /* 0x0150 */ void* MemoryCachingRequirements;
  /* 0x0158 */ struct _BOOT_ENTROPY_LDR_RESULT BootEntropyResult;
  /* 0x09c0 */ unsigned __int64 ProcessorCounterFrequency;
  /* 0x09c8 */ struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION HypervisorExtension;
  /* 0x0a08 */ struct _GUID HardwareConfigurationId;
  /* 0x0a18 */ struct _LIST_ENTRY HalExtensionModuleList;
  /* 0x0a28 */ struct _LIST_ENTRY PrmUpdateModuleList;
  /* 0x0a38 */ struct _LIST_ENTRY PrmFirmwareModuleList;
  /* 0x0a48 */ union _LARGE_INTEGER SystemTime;
  /* 0x0a50 */ unsigned __int64 TimeStampAtSystemTimeRead;
  union
  {
    /* 0x0a58 */ unsigned __int64 BootFlags;
    struct /* bitfield */
    {
      /* 0x0a58 */ unsigned __int64 DbgMenuOsSelection : 1; /* bit position: 0 */
      /* 0x0a58 */ unsigned __int64 DbgHiberBoot : 1; /* bit position: 1 */
      /* 0x0a58 */ unsigned __int64 DbgSoftRestart : 1; /* bit position: 2 */
      /* 0x0a58 */ unsigned __int64 DbgMeasuredLaunch : 1; /* bit position: 3 */
      /* 0x0a58 */ unsigned __int64 DbgMeasuredLaunchCapable : 1; /* bit position: 4 */
      /* 0x0a58 */ unsigned __int64 DbgSystemHiveReplace : 1; /* bit position: 5 */
      /* 0x0a58 */ unsigned __int64 DbgMeasuredLaunchSmmProtections : 1; /* bit position: 6 */
      /* 0x0a58 */ unsigned __int64 DbgMeasuredLaunchSmmLevel : 7; /* bit position: 7 */
      /* 0x0a58 */ unsigned __int64 DbgBugCheckRecovery : 1; /* bit position: 14 */
      /* 0x0a58 */ unsigned __int64 DbgFASR : 1; /* bit position: 15 */
      /* 0x0a58 */ unsigned __int64 DbgUseCachedBcd : 1; /* bit position: 16 */
    }; /* bitfield */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0a60 */ unsigned __int64 InternalBootFlags;
    struct /* bitfield */
    {
      /* 0x0a60 */ unsigned __int64 DbgUtcBootTime : 1; /* bit position: 0 */
      /* 0x0a60 */ unsigned __int64 DbgRtcBootTime : 1; /* bit position: 1 */
      /* 0x0a60 */ unsigned __int64 DbgNoLegacyServices : 1; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0008 */
  /* 0x0a68 */ void* WfsFPData;
  /* 0x0a70 */ unsigned long WfsFPDataSize;
  /* 0x0a74 */ long Padding_825;
  /* 0x0a78 */ struct _LOADER_BUGCHECK_PARAMETERS BugcheckParameters;
  /* 0x0aa0 */ void* ApiSetSchema;
  /* 0x0aa8 */ unsigned long ApiSetSchemaSize;
  /* 0x0aac */ long Padding_826;
  /* 0x0ab0 */ struct _LIST_ENTRY ApiSetSchemaExtensions;
  /* 0x0ac0 */ struct _UNICODE_STRING AcpiBiosVersion;
  /* 0x0ad0 */ struct _UNICODE_STRING SmbiosVersion;
  /* 0x0ae0 */ struct _UNICODE_STRING EfiVersion;
  /* 0x0af0 */ struct _DEBUG_DEVICE_DESCRIPTOR* KdDebugDevice;
  /* 0x0af8 */ struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 OfflineCrashdumpConfigurationTable;
  /* 0x0b18 */ struct _UNICODE_STRING ManufacturingProfile;
  /* 0x0b28 */ void* BbtBuffer;
  /* 0x0b30 */ unsigned __int64 XsaveAllowedFeatures;
  /* 0x0b38 */ unsigned long XsaveFlags;
  /* 0x0b3c */ long Padding_827;
  /* 0x0b40 */ void* BootOptions;
  /* 0x0b48 */ unsigned long IumEnablement;
  /* 0x0b4c */ unsigned long IumPolicy;
  /* 0x0b50 */ long IumStatus;
  /* 0x0b54 */ unsigned long BootId;
  /* 0x0b58 */ struct _LOADER_PARAMETER_CI_EXTENSION* CodeIntegrityData;
  /* 0x0b60 */ unsigned long CodeIntegrityDataSize;
  /* 0x0b64 */ struct _LOADER_HIVE_RECOVERY_INFO SystemHiveRecoveryInfo;
  /* 0x0b78 */ unsigned long SoftRestartCount;
  /* 0x0b7c */ long Padding_828;
  /* 0x0b80 */ __int64 SoftRestartTime;
  /* 0x0b88 */ void* HypercallCodeVa;
  /* 0x0b90 */ void* HalVirtualAddress;
  /* 0x0b98 */ unsigned __int64 HalNumberOfBytes;
  /* 0x0ba0 */ struct _LEAP_SECOND_DATA* LeapSecondData;
  /* 0x0ba8 */ unsigned long MajorRelease;
  /* 0x0bac */ unsigned long Reserved2;
  /* 0x0bb0 */ char NtBuildLab[224];
  /* 0x0c90 */ char NtBuildLabEx[224];
  /* 0x0d70 */ struct _LOADER_RESET_REASON ResetReason;
  /* 0x0da0 */ unsigned long MaxPciBusNumber;
  /* 0x0da4 */ unsigned long FeatureSettings;
  /* 0x0da8 */ unsigned long HotPatchReserveSize;
  /* 0x0dac */ unsigned long KernelScpReserveSize;
  struct
  {
    /* 0x0db0 */ void* CodeBase;
    /* 0x0db8 */ unsigned __int64 CodeSize;
  } /* size: 0x0010 */ MiniExecutive;
  /* 0x0dc0 */ struct _VSM_PERFORMANCE_DATA VsmPerformanceData;
  /* 0x0e00 */ struct _NUMA_MEMORY_RANGE* NumaMemoryRanges;
  /* 0x0e08 */ unsigned long NumaMemoryRangeCount;
  /* 0x0e0c */ unsigned long IommuFaultPolicy;
  /* 0x0e10 */ struct _LOADER_FEATURE_CONFIGURATION_INFORMATION FeatureConfigurationInformation;
  /* 0x0e58 */ struct _ETW_BOOT_CONFIG EtwBootConfig;
  /* 0x0e70 */ struct _BOOT_FIRMWARE_RAMDISK_INFO* FwRamdiskInfo;
  /* 0x0e78 */ void* IpmiHwContext;
  /* 0x0e80 */ unsigned __int64 IdleThreadShadowStack;
  /* 0x0e88 */ unsigned __int64 TransitionShadowStack;
  /* 0x0e90 */ unsigned __int64* IstShadowStacksTable;
  /* 0x0e98 */ unsigned __int64 ReservedForKernelCet[2];
  /* 0x0ea8 */ struct _MEMORY_MIRRORING_DATA* MirroringData;
  /* 0x0eb0 */ union _LARGE_INTEGER Luid;
  struct
  {
    /* 0x0eb8 */ struct _INSTALLED_MEMORY_RANGE* Ranges;
    /* 0x0ec0 */ unsigned long RangeCount;
    /* 0x0ec4 */ long __PADDING__[1];
  } /* size: 0x0010 */ InstalledMemory;
  /* 0x0ec8 */ struct _LIST_ENTRY HotPatchList;
  /* 0x0ed8 */ void* BSPMicrocodeData;
  /* 0x0ee0 */ unsigned long BSPMicrocodeDataSize;
  /* 0x0ee4 */ long Padding_829;
  struct
  {
    /* 0x0ee8 */ struct _GUID TargetVolume;
    /* 0x0ef8 */ struct _UNICODE_STRING* CimFiles;
    /* 0x0f00 */ unsigned long CimFilesCount;
    /* 0x0f04 */ long __PADDING__[1];
  } /* size: 0x0020 */ CimfsInformation;
  /* 0x0f08 */ union _LARGE_INTEGER HalSoftRebootDatabase;
  struct /* bitfield */
  {
    /* 0x0f10 */ unsigned long KasanEnabled : 1; /* bit position: 0 */
    /* 0x0f10 */ unsigned long InitialSystemPowerStatePresent : 1; /* bit position: 1 */
    /* 0x0f10 */ unsigned long Unused2 : 6; /* bit position: 2 */
    /* 0x0f10 */ unsigned long KasanFlags : 8; /* bit position: 8 */
    /* 0x0f10 */ unsigned long Unused3 : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x0f14 */ unsigned long KernelLargeStackSize;
  /* 0x0f18 */ unsigned __int64 PerformanceDataFrequency;
  /* 0x0f20 */ unsigned long DriverProxyReserveSize;
  /* 0x0f24 */ long Padding_830;
  /* 0x0f28 */ void* FunctionOverrideCapabilityMask;
  /* 0x0f30 */ void* FunctionOverrideOptinCapabilities;
  /* 0x0f38 */ void* PrmFwHandlerTable;
  /* 0x0f40 */ unsigned long PrmFwHandlerCount;
  /* 0x0f44 */ long Padding_831;
  /* 0x0f48 */ unsigned __int64 InitialSystemPowerState;
  /* 0x0f50 */ void* MicrocodeRecord;
  /* 0x0f58 */ unsigned long MicrocodeRecordSize;
  /* 0x0f5c */ long Padding_832;
  /* 0x0f60 */ struct _BOOT_OSL_RAMDISK_INFO* OslRamdiskInfo;
  struct
  {
    /* 0x0f68 */ struct _COMPOSITEFS_LAYER_INFORMATION** Layers;
    /* 0x0f70 */ unsigned long LayersCount;
    /* 0x0f74 */ long __PADDING__[1];
  } /* size: 0x0010 */ CompositefsInformation;
  /* 0x0f78 */ struct _LOADER_FEATURE_CONFIGURATION_INFORMATION2* FeatureConfigurationInformation2;
  /* 0x0f80 */ unsigned long PageTableLogCount;
  /* 0x0f84 */ long Padding_833;
  /* 0x0f88 */ struct _OSLOADER_PAGE_TABLE_LOG PageTableLog[10];
  /* 0x1118 */ unsigned __int64 EntropyAccumulatorConfig;
} LOADER_PARAMETER_EXTENSION, *PLOADER_PARAMETER_EXTENSION; /* size: 0x1120 */

typedef struct _TRUSTLET_MAILBOX_KEY
{
  /* 0x0000 */ unsigned __int64 SecretValue[2];
} TRUSTLET_MAILBOX_KEY, *PTRUSTLET_MAILBOX_KEY; /* size: 0x0010 */

typedef struct _NETWORK_LOADER_BLOCK
{
  /* 0x0000 */ unsigned char* DHCPServerACK;
  /* 0x0008 */ unsigned long DHCPServerACKLength;
  /* 0x000c */ long Padding_834;
  /* 0x0010 */ unsigned char* BootServerReplyPacket;
  /* 0x0018 */ unsigned long BootServerReplyPacketLength;
  /* 0x001c */ long __PADDING__[1];
} NETWORK_LOADER_BLOCK, *PNETWORK_LOADER_BLOCK; /* size: 0x0020 */

typedef struct _INSTALLED_MEMORY_RANGE
{
  /* 0x0000 */ unsigned __int64 BasePage;
  /* 0x0008 */ unsigned __int64 PageCount;
} INSTALLED_MEMORY_RANGE, *PINSTALLED_MEMORY_RANGE; /* size: 0x0010 */

typedef struct _HAL_HV_SYSTEM_PASID_CAPABILITIES
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long SvmSupported : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long GpaAlwaysValid : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long PasidSupported : 1; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long MaxPasidSpacePasidCount;
  /* 0x0008 */ unsigned long MaxPrqSize;
  /* 0x000c */ unsigned long SvmIommuCount;
  /* 0x0010 */ unsigned long MinIommuPasidCount;
} HAL_HV_SYSTEM_PASID_CAPABILITIES, *PHAL_HV_SYSTEM_PASID_CAPABILITIES; /* size: 0x0014 */

typedef struct _MI_COMBINE_BLOCK_BASE
{
  /* 0x0000 */ void* Next;
  /* 0x0008 */ unsigned long NumberOfActiveBlocks;
  /* 0x000c */ long Padding_835;
  /* 0x0010 */ struct _MI_PAGE_COMBINING_SUPPORT* Pcs;
} MI_COMBINE_BLOCK_BASE, *PMI_COMBINE_BLOCK_BASE; /* size: 0x0018 */

struct _CHPEV2_CPUAREA_INFO;

typedef struct _IMAGE_DEBUG_DIRECTORY
{
  /* 0x0000 */ unsigned long Characteristics;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned short MajorVersion;
  /* 0x000a */ unsigned short MinorVersion;
  /* 0x000c */ unsigned long Type;
  /* 0x0010 */ unsigned long SizeOfData;
  /* 0x0014 */ unsigned long AddressOfRawData;
  /* 0x0018 */ unsigned long PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY; /* size: 0x001c */

typedef struct _HAL_HV_DMA_DOMAIN_INFO
{
  /* 0x0000 */ unsigned long DomainId;
  /* 0x0004 */ unsigned char IsStage1;
  /* 0x0005 */ char __PADDING__[3];
} HAL_HV_DMA_DOMAIN_INFO, *PHAL_HV_DMA_DOMAIN_INFO; /* size: 0x0008 */

typedef struct _HAL_HV_DMA_CREATE_DOMAIN_INFO
{
  /* 0x0000 */ struct _HAL_HV_DMA_DOMAIN_INFO DomainInfo;
  /* 0x0008 */ unsigned char InheritPassthroughDomain;
  /* 0x0009 */ unsigned char ForwardProgressRequired;
  /* 0x000a */ char __PADDING__[2];
} HAL_HV_DMA_CREATE_DOMAIN_INFO, *PHAL_HV_DMA_CREATE_DOMAIN_INFO; /* size: 0x000c */

typedef struct _NON_PAGED_DEBUG_INFO
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ unsigned short Machine;
  /* 0x000a */ unsigned short Characteristics;
  /* 0x000c */ unsigned long TimeDateStamp;
  /* 0x0010 */ unsigned long CheckSum;
  /* 0x0014 */ unsigned long SizeOfImage;
  /* 0x0018 */ unsigned __int64 ImageBase;
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO; /* size: 0x0020 */

typedef struct _IMAGE_DOS_HEADER
{
  /* 0x0000 */ unsigned short e_magic;
  /* 0x0002 */ unsigned short e_cblp;
  /* 0x0004 */ unsigned short e_cp;
  /* 0x0006 */ unsigned short e_crlc;
  /* 0x0008 */ unsigned short e_cparhdr;
  /* 0x000a */ unsigned short e_minalloc;
  /* 0x000c */ unsigned short e_maxalloc;
  /* 0x000e */ unsigned short e_ss;
  /* 0x0010 */ unsigned short e_sp;
  /* 0x0012 */ unsigned short e_csum;
  /* 0x0014 */ unsigned short e_ip;
  /* 0x0016 */ unsigned short e_cs;
  /* 0x0018 */ unsigned short e_lfarlc;
  /* 0x001a */ unsigned short e_ovno;
  /* 0x001c */ unsigned short e_res[4];
  /* 0x0024 */ unsigned short e_oemid;
  /* 0x0026 */ unsigned short e_oeminfo;
  /* 0x0028 */ unsigned short e_res2[10];
  /* 0x003c */ long e_lfanew;
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER; /* size: 0x0040 */

typedef union _INVPCID_DESCRIPTOR
{
  union
  {
    struct
    {
      union
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned __int64 Pcid : 12; /* bit position: 0 */
          /* 0x0000 */ unsigned __int64 Reserved : 52; /* bit position: 12 */
        }; /* bitfield */
        /* 0x0000 */ unsigned __int64 EntirePcid;
      }; /* size: 0x0008 */
      /* 0x0008 */ unsigned __int64 Virtual;
    } /* size: 0x0010 */ IndividualAddress;
    struct
    {
      union
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned __int64 Pcid : 12; /* bit position: 0 */
          /* 0x0000 */ unsigned __int64 Reserved : 52; /* bit position: 12 */
        }; /* bitfield */
        /* 0x0000 */ unsigned __int64 EntirePcid;
      }; /* size: 0x0008 */
      /* 0x0008 */ unsigned __int64 Reserved2;
    } /* size: 0x0010 */ SingleContext;
    struct
    {
      /* 0x0000 */ unsigned __int64 Reserved[2];
    } /* size: 0x0010 */ AllContextAndGlobals;
    struct
    {
      /* 0x0000 */ unsigned __int64 Reserved[2];
    } /* size: 0x0010 */ AllContext;
  }; /* size: 0x0010 */
} INVPCID_DESCRIPTOR, *PINVPCID_DESCRIPTOR; /* size: 0x0010 */

typedef struct _AUX_ACCESS_DATA
{
  /* 0x0000 */ struct _PRIVILEGE_SET* PrivilegesUsed;
  /* 0x0008 */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x0018 */ unsigned long AccessesToAudit;
  /* 0x001c */ unsigned long MaximumAuditMask;
  /* 0x0020 */ struct _GUID TransactionId;
  /* 0x0030 */ void* NewSecurityDescriptor;
  /* 0x0038 */ void* ExistingSecurityDescriptor;
  /* 0x0040 */ void* ParentSecurityDescriptor;
  /* 0x0048 */ void* DeRefSecurityDescriptor /* function */;
  /* 0x0050 */ void* SDLock;
  /* 0x0058 */ struct _ACCESS_REASONS AccessReasons;
  /* 0x00d8 */ unsigned char GenerateStagingEvents;
  /* 0x00d9 */ char __PADDING__[7];
} AUX_ACCESS_DATA, *PAUX_ACCESS_DATA; /* size: 0x00e0 */

typedef struct _CONFIGURATION_COMPONENT
{
  /* 0x0000 */ enum _CONFIGURATION_CLASS Class;
  /* 0x0004 */ enum _CONFIGURATION_TYPE Type;
  /* 0x0008 */ struct _DEVICE_FLAGS Flags;
  /* 0x000c */ unsigned short Version;
  /* 0x000e */ unsigned short Revision;
  /* 0x0010 */ unsigned long Key;
  union
  {
    /* 0x0014 */ unsigned long AffinityMask;
    struct
    {
      /* 0x0014 */ unsigned short Group;
      /* 0x0016 */ unsigned short GroupIndex;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0018 */ unsigned long ConfigurationDataLength;
  /* 0x001c */ unsigned long IdentifierLength;
  /* 0x0020 */ char* Identifier;
} CONFIGURATION_COMPONENT, *PCONFIGURATION_COMPONENT; /* size: 0x0028 */

typedef struct _CONFIGURATION_COMPONENT_DATA
{
  /* 0x0000 */ struct _CONFIGURATION_COMPONENT_DATA* Parent;
  /* 0x0008 */ struct _CONFIGURATION_COMPONENT_DATA* Child;
  /* 0x0010 */ struct _CONFIGURATION_COMPONENT_DATA* Sibling;
  /* 0x0018 */ struct _CONFIGURATION_COMPONENT ComponentEntry;
  /* 0x0040 */ void* ConfigurationData;
} CONFIGURATION_COMPONENT_DATA, *PCONFIGURATION_COMPONENT_DATA; /* size: 0x0048 */

typedef struct _IO_PRIORITY_INFO
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long ThreadPriority;
  /* 0x0008 */ unsigned long PagePriority;
  /* 0x000c */ enum _IO_PRIORITY_HINT IoPriority;
} IO_PRIORITY_INFO, *PIO_PRIORITY_INFO; /* size: 0x0010 */

typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM
{
  /* 0x0000 */ unsigned short Reserved1;
  /* 0x0002 */ unsigned short ExtType;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned short Linkage : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned short Reserved2 : 15; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0006 */ unsigned short DataSize;
  /* 0x0008 */ unsigned __int64 DataPtr;
} EVENT_HEADER_EXTENDED_DATA_ITEM, *PEVENT_HEADER_EXTENDED_DATA_ITEM; /* size: 0x0010 */

union wil_details_FeatureStateCache
{
  union
  {
    /* 0x0000 */ unsigned __int64 exchange64;
    /* 0x0000 */ unsigned int exchange;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned int effectiveState : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned int stateCached : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned int hasNotificationCached : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned int variantCached : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned int deviceUsageFastPathEnabled : 1; /* bit position: 4 */
        /* 0x0000 */ unsigned int deviceOpportunityFastPathEnabled : 1; /* bit position: 5 */
        /* 0x0000 */ unsigned int desiredState : 1; /* bit position: 6 */
        /* 0x0000 */ unsigned int configuredState : 2; /* bit position: 7 */
        /* 0x0000 */ unsigned int needsRefresh : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned int hasNotification : 1; /* bit position: 10 */
        /* 0x0000 */ unsigned int isWexpConfiguration : 1; /* bit position: 11 */
        /* 0x0000 */ unsigned int variant : 6; /* bit position: 12 */
        /* 0x0000 */ unsigned int unused : 14; /* bit position: 18 */
      }; /* bitfield */
      /* 0x0004 */ unsigned int payloadId;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct FEATURE_LOGGED_TRAITS
{
  /* 0x0000 */ unsigned short version;
  /* 0x0002 */ unsigned short baseVersion;
  /* 0x0004 */ unsigned char stage;
  /* 0x0005 */ char __PADDING__[1];
}; /* size: 0x0006 */

typedef struct _DEVICE_FAULT_CONFIGURATION
{
  /* 0x0000 */ void* FaultHandler /* function */;
  /* 0x0008 */ void* FaultContext;
} DEVICE_FAULT_CONFIGURATION, *PDEVICE_FAULT_CONFIGURATION; /* size: 0x0010 */

typedef struct __WIL_RTL_FEATURE_USAGE_DATA
{
  /* 0x0000 */ unsigned int FeatureId;
  /* 0x0004 */ unsigned short ReportingKind;
  /* 0x0006 */ unsigned short UsageCount;
} _WIL_RTL_FEATURE_USAGE_DATA, *P_WIL_RTL_FEATURE_USAGE_DATA; /* size: 0x0008 */

typedef struct _RTL_FEATURE_USAGE_REPORT
{
  /* 0x0000 */ unsigned int FeatureId;
  /* 0x0004 */ unsigned short ReportingKind;
  /* 0x0006 */ unsigned short ReportingOptions;
} RTL_FEATURE_USAGE_REPORT, *PRTL_FEATURE_USAGE_REPORT; /* size: 0x0008 */

typedef struct _HIDDEN_PROCESSOR_POWER_INTERFACE
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ long Padding_836;
  /* 0x0008 */ void* ReadPerfMsr /* function */;
  /* 0x0010 */ void* WritePerfMsr /* function */;
  /* 0x0018 */ void* ReadPerfIoPort /* function */;
  /* 0x0020 */ void* WritePerfIoPort /* function */;
} HIDDEN_PROCESSOR_POWER_INTERFACE, *PHIDDEN_PROCESSOR_POWER_INTERFACE; /* size: 0x0028 */

struct wil_details_FeatureTestState
{
  /* 0x0000 */ enum wil_details_FeatureTestStateKind kind;
  /* 0x0004 */ unsigned int featureId;
  /* 0x0008 */ enum wil_FeatureEnabledState state;
  /* 0x000c */ unsigned char variant;
  /* 0x000d */ char Padding_837[3];
  /* 0x0010 */ unsigned int payload;
  /* 0x0014 */ enum wil_FeatureVariantPayloadKind payloadKind;
  /* 0x0018 */ struct wil_details_FeatureTestState* next;
}; /* size: 0x0020 */

typedef struct _FSRTL_ADVANCED_FCB_HEADER
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ unsigned char Flags;
  /* 0x0005 */ unsigned char IsFastIoPossible;
  /* 0x0006 */ unsigned char Flags2;
  struct /* bitfield */
  {
    /* 0x0007 */ unsigned char Reserved : 4; /* bit position: 0 */
    /* 0x0007 */ unsigned char Version : 4; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0008 */ struct _ERESOURCE* Resource;
  /* 0x0010 */ struct _ERESOURCE* PagingIoResource;
  /* 0x0018 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0020 */ union _LARGE_INTEGER FileSize;
  /* 0x0028 */ union _LARGE_INTEGER ValidDataLength;
  /* 0x0030 */ struct _FAST_MUTEX* FastMutex;
  /* 0x0038 */ struct _LIST_ENTRY FilterContexts;
  /* 0x0048 */ struct _EX_PUSH_LOCK PushLock;
  /* 0x0050 */ void** FileContextSupportPointer;
  union
  {
    /* 0x0058 */ void* Oplock;
    /* 0x0058 */ void* ReservedForRemote;
  }; /* size: 0x0008 */
  /* 0x0060 */ void* AePushLock;
  /* 0x0068 */ unsigned long BypassIoOpenCount;
  /* 0x006c */ long Padding_838;
  /* 0x0070 */ struct _FSRTL_PER_STREAM_CONTEXT* ReservedContext;
} FSRTL_ADVANCED_FCB_HEADER, *PFSRTL_ADVANCED_FCB_HEADER; /* size: 0x0078 */

typedef struct _iobuf
{
  /* 0x0000 */ char* _ptr;
  /* 0x0008 */ int _cnt;
  /* 0x000c */ long Padding_839;
  /* 0x0010 */ char* _base;
  /* 0x0018 */ int _flag;
  /* 0x001c */ int _file;
  /* 0x0020 */ int _charbuf;
  /* 0x0024 */ int _bufsiz;
  /* 0x0028 */ char* _tmpfname;
} iobuf, *Piobuf; /* size: 0x0030 */

typedef struct _RTL_CHASH_TABLE
{
  /* 0x0000 */ struct _RTL_CHASH_ENTRY* Table;
  /* 0x0008 */ unsigned long EntrySizeShift;
  /* 0x000c */ unsigned long EntryMax;
  /* 0x0010 */ unsigned long EntryCount;
  /* 0x0014 */ long __PADDING__[1];
} RTL_CHASH_TABLE, *PRTL_CHASH_TABLE; /* size: 0x0018 */

typedef struct _RTL_ATOM_TABLE_REFERENCE
{
  /* 0x0000 */ struct _LIST_ENTRY LowBoxList;
  /* 0x0010 */ unsigned long LowBoxID;
  /* 0x0014 */ unsigned short ReferenceCount;
  /* 0x0016 */ unsigned short Flags;
} RTL_ATOM_TABLE_REFERENCE, *PRTL_ATOM_TABLE_REFERENCE; /* size: 0x0018 */

typedef struct _EVENT_FILTER_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 Ptr;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long Type;
} EVENT_FILTER_DESCRIPTOR, *PEVENT_FILTER_DESCRIPTOR; /* size: 0x0010 */

typedef struct _MM_PAGE_ACCESS_INFO_HEADER
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY Link;
  /* 0x0008 */ enum _MM_PAGE_ACCESS_TYPE Type;
  union
  {
    /* 0x000c */ unsigned long EmptySequenceNumber;
    /* 0x000c */ unsigned long CurrentFileIndex;
  }; /* size: 0x0004 */
  /* 0x0010 */ unsigned __int64 CreateTime;
  union
  {
    /* 0x0018 */ unsigned __int64 EmptyTime;
    /* 0x0018 */ struct _MM_PAGE_ACCESS_INFO* TempEntry;
  }; /* size: 0x0008 */
  union
  {
    struct
    {
      /* 0x0020 */ struct _MM_PAGE_ACCESS_INFO* PageEntry;
      /* 0x0028 */ unsigned __int64* FileEntry;
      /* 0x0030 */ unsigned __int64* FirstFileEntry;
      /* 0x0038 */ struct _EPROCESS* Process;
    }; /* size: 0x0020 */
    struct
    {
      /* 0x0020 */ unsigned __int64* PageFrameEntry;
      /* 0x0028 */ unsigned __int64* LastPageFrameEntry;
      /* 0x0030 */ long __PADDING__[4];
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
} MM_PAGE_ACCESS_INFO_HEADER, *PMM_PAGE_ACCESS_INFO_HEADER; /* size: 0x0040 */

typedef struct _PNP_DEVICE_ACTION_REQUEST_ARGUMENT
{
  /* 0x0000 */ void* PdcActivatorHandle;
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ unsigned long ProblemCodeToClear;
      } /* size: 0x0004 */ ClearProblem;
      /* 0x0008 */ union _PNP_REBALANCE_FLAGS Rebalance;
      struct
      {
        /* 0x0008 */ unsigned char ClearWaitingForFdo;
      } /* size: 0x0001 */ ReenumerateDeviceOnly;
      struct
      {
        /* 0x0008 */ unsigned char StopRequired;
      } /* size: 0x0001 */ ResourceRequirementsChanged;
      struct
      {
        /* 0x0008 */ unsigned long Flags;
      } /* size: 0x0004 */ RequestDeviceReset;
      struct
      {
        /* 0x0008 */ struct _PLUGPLAY_CONTROL_STATUS_DATA* ControlStatusData;
      } /* size: 0x0008 */ SetDeviceProblem;
      struct
      {
        /* 0x0008 */ enum _PNP_DEVICE_IOMMU_DOMAIN_POLICY DomainPolicy;
      } /* size: 0x0004 */ UpdateConsoleLockState;
      /* 0x0008 */ unsigned __int64 AsUlong64;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u;
} PNP_DEVICE_ACTION_REQUEST_ARGUMENT, *PPNP_DEVICE_ACTION_REQUEST_ARGUMENT; /* size: 0x0010 */

typedef struct _MM_PAGE_ACCESS_INFO
{
  union
  {
    /* 0x0000 */ union _MM_PAGE_ACCESS_INFO_FLAGS Flags;
    /* 0x0000 */ unsigned __int64 FileOffset;
    /* 0x0000 */ void* VirtualAddress;
    /* 0x0000 */ void* PointerProtoPte;
  }; /* size: 0x0008 */
} MM_PAGE_ACCESS_INFO, *PMM_PAGE_ACCESS_INFO; /* size: 0x0008 */

typedef struct _MMPAGING_FILE
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long MaximumSize;
  /* 0x0008 */ unsigned long MinimumSize;
  /* 0x000c */ unsigned long FreeSpace;
  /* 0x0010 */ unsigned long PeakUsage;
  /* 0x0014 */ unsigned long FreeReservationSpace;
  /* 0x0018 */ struct _FILE_OBJECT* File;
  /* 0x0020 */ struct _MMMOD_WRITER_MDL_ENTRY** Entry;
  /* 0x0028 */ unsigned long NumberOfModWriterEntries;
  /* 0x002c */ long Padding_840;
  /* 0x0030 */ union _SLIST_HEADER PfnsToFree;
  /* 0x0040 */ struct _UNICODE_STRING PageFileName;
  /* 0x0050 */ struct _MI_PAGING_FILE_SPACE_BITMAPS* Bitmaps;
  /* 0x0058 */ unsigned long AllocationBitmapHint;
  /* 0x005c */ unsigned long LargestAllocationCluster;
  /* 0x0060 */ unsigned long RefreshAllocationCluster;
  /* 0x0064 */ unsigned long LastRefreshAllocationCluster;
  union
  {
    /* 0x0068 */ unsigned long ReservedClusterSizeAggregate;
    /* 0x0068 */ unsigned long ToBeEvictedHint;
  }; /* size: 0x0004 */
  /* 0x006c */ unsigned long MaximumRunLengthInBitmaps;
  /* 0x0070 */ struct _RTL_RB_TREE BitmapsCacheLengthTree;
  /* 0x0080 */ struct _RTL_RB_TREE BitmapsCacheLocationTree;
  /* 0x0090 */ struct _LIST_ENTRY BitmapsCacheFreeList;
  /* 0x00a0 */ struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY* BitmapsCacheEntries;
  union
  {
    /* 0x00a8 */ unsigned long ToBeEvictedCount;
    /* 0x00a8 */ unsigned long HybridPriority;
  }; /* size: 0x0004 */
  struct /* bitfield */
  {
    /* 0x00ac */ unsigned short PageFileNumber : 4; /* bit position: 0 */
    /* 0x00ac */ unsigned short WsSwapPagefile : 1; /* bit position: 4 */
    /* 0x00ac */ unsigned short NoReservations : 1; /* bit position: 5 */
    /* 0x00ac */ unsigned short VirtualStorePagefile : 1; /* bit position: 6 */
    /* 0x00ac */ unsigned short SwapSupported : 1; /* bit position: 7 */
    /* 0x00ac */ unsigned short NodeInserted : 1; /* bit position: 8 */
    /* 0x00ac */ unsigned short StackNotified : 1; /* bit position: 9 */
    /* 0x00ac */ unsigned short BackedBySCM : 1; /* bit position: 10 */
    /* 0x00ac */ unsigned short SpecialPurposeMemory : 1; /* bit position: 11 */
    /* 0x00ac */ unsigned short Spare0 : 3; /* bit position: 12 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x00ae */ unsigned char AdriftMdls : 1; /* bit position: 0 */
    /* 0x00ae */ unsigned char Spare1 : 7; /* bit position: 1 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x00af */ unsigned char IgnoreReservations : 1; /* bit position: 0 */
    /* 0x00af */ unsigned char Spare2 : 7; /* bit position: 1 */
  }; /* bitfield */
  /* 0x00b0 */ unsigned long PageHashPages;
  /* 0x00b4 */ unsigned long PageHashPagesPeak;
  /* 0x00b8 */ struct _MI_PAGE_HASH* PageHash;
  /* 0x00c0 */ void* FileHandle;
  /* 0x00c8 */ volatile long SpinLock;
  /* 0x00cc */ long Padding_841;
  /* 0x00d0 */ struct _RTL_AVL_TREE FlowThroughReadRoot;
  /* 0x00d8 */ struct _MI_PARTITION* Partition;
  union
  {
    /* 0x00e0 */ struct _RTL_BALANCED_NODE FileObjectNode;
    struct
    {
      /* 0x00e0 */ struct _RTL_RB_TREE ExtentsTree;
      /* 0x00f0 */ long __PADDING__[4];
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
} MMPAGING_FILE, *PMMPAGING_FILE; /* size: 0x0100 */

typedef struct _MODWRITER_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long KeepForever : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long Networked : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long IoPriority : 3; /* bit position: 2 */
    /* 0x0000 */ unsigned long PfBacked : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long ModifiedStoreWrite : 1; /* bit position: 6 */
  }; /* bitfield */
} MODWRITER_FLAGS, *PMODWRITER_FLAGS; /* size: 0x0004 */

typedef struct _MMMOD_WRITER_MDL_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0018 */ struct _IO_STATUS_BLOCK IoStatus;
  /* 0x0028 */ struct _MODWRITER_FLAGS u1;
  /* 0x002c */ unsigned long ByteCount;
  /* 0x0030 */ unsigned long ChargedPages;
  /* 0x0034 */ long Padding_842;
  /* 0x0038 */ struct _MI_PARTITION* Partition;
  union
  {
    struct
    {
      /* 0x0040 */ struct _MMPAGING_FILE* PagingFile;
      /* 0x0048 */ struct _MI_STORE_MODWRITER_EXTENSION* StoreExtension;
      /* 0x0050 */ unsigned __int64 IssueTime;
    } /* size: 0x0018 */ Pf;
    struct
    {
      /* 0x0040 */ struct _FILE_OBJECT* File;
      /* 0x0048 */ struct _CONTROL_AREA* ControlArea;
      /* 0x0050 */ struct _ERESOURCE* FileResource;
    } /* size: 0x0018 */ Fs;
  }; /* size: 0x0018 */
  /* 0x0058 */ union _LARGE_INTEGER WriteOffset;
  /* 0x0060 */ struct _MDL* PointerMdl;
  /* 0x0068 */ struct _MDL Mdl;
  /* 0x0098 */ unsigned __int64 Page[1];
} MMMOD_WRITER_MDL_ENTRY, *PMMMOD_WRITER_MDL_ENTRY; /* size: 0x00a0 */

typedef struct _MI_PAGE_HASH
{
  /* 0x0000 */ unsigned long HashValue;
  /* 0x0004 */ unsigned long PageFileOffset;
  /* 0x0008 */ struct _MMPTE* OwningPte;
} MI_PAGE_HASH, *PMI_PAGE_HASH; /* size: 0x0010 */

typedef struct _IOMMU_DMA_RESERVED_REGION
{
  /* 0x0000 */ struct _IOMMU_DMA_RESERVED_REGION* RegionNext;
  /* 0x0008 */ unsigned __int64 Base;
  /* 0x0010 */ unsigned __int64 NumberOfPages;
  /* 0x0018 */ unsigned char ShouldMap;
  /* 0x0019 */ char __PADDING__[7];
} IOMMU_DMA_RESERVED_REGION, *PIOMMU_DMA_RESERVED_REGION; /* size: 0x0020 */

struct _MI_SLAB_ALLOCATOR_ENTRY;

typedef struct _MAPPED_FILE_SEGMENT
{
  /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0008 */ unsigned long TotalNumberOfPtes;
  /* 0x000c */ struct _SEGMENT_FLAGS SegmentFlags;
  /* 0x0010 */ unsigned __int64 NumberOfCommittedPages;
  /* 0x0018 */ unsigned __int64 SizeOfSegment;
  union
  {
    /* 0x0020 */ struct _MMEXTEND_INFO* ExtendInfo;
    /* 0x0020 */ void* BasedAddress;
  }; /* size: 0x0008 */
  /* 0x0028 */ struct _EX_PUSH_LOCK SegmentLock;
} MAPPED_FILE_SEGMENT, *PMAPPED_FILE_SEGMENT; /* size: 0x0030 */

typedef struct _MI_GETPAGE_FLAGS
{
  union
  {
    /* 0x0000 */ unsigned long EntireField;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long AtDpc : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PageLockHeld : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long RecursingToDemote : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long PageAttributeOptional : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long PreferZero : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long RequireZero : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long ColorAlignment : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long SystemUse : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long PreserveAvailable : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long IgnoreAvailable : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned long ContendForListLocks : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned long DontDemoteLargePages : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned long NodeMandatory : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned long ChannelMandatory : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned long DontDemote : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned long DontDemote64KPages : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned long NoStandby : 1; /* bit position: 16 */
      /* 0x0000 */ unsigned long NoStandbySwap : 1; /* bit position: 17 */
      /* 0x0000 */ unsigned long OnlyStandby : 1; /* bit position: 18 */
      /* 0x0000 */ unsigned long FreeZeroQueryIncludeLarge : 1; /* bit position: 19 */
      /* 0x0000 */ unsigned long MustBeZero : 12; /* bit position: 20 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} MI_GETPAGE_FLAGS, *PMI_GETPAGE_FLAGS; /* size: 0x0004 */

typedef struct _MMCLONE_DESCRIPTOR
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE CloneNode;
    /* 0x0000 */ struct _MMCLONE_DESCRIPTOR* Next;
  }; /* size: 0x0018 */
  /* 0x0018 */ struct _MMCLONE_BLOCK* StartingCloneBlock;
  /* 0x0020 */ struct _MMCLONE_BLOCK* EndingCloneBlock;
  /* 0x0028 */ unsigned __int64 NumberOfPtes;
  /* 0x0030 */ volatile unsigned __int64 NumberOfReferences;
  /* 0x0038 */ struct _MMCLONE_HEADER* CloneHeader;
  /* 0x0040 */ unsigned __int64 NonPagedPoolQuotaCharge;
  /* 0x0048 */ long Padding_843[2];
  /* 0x0050 */ struct _SLIST_ENTRY DeleteList;
  /* 0x0060 */ unsigned __int64 NestingLevel;
  /* 0x0068 */ long __PADDING__[2];
} MMCLONE_DESCRIPTOR, *PMMCLONE_DESCRIPTOR; /* size: 0x0070 */

typedef struct _PEB32
{
  /* 0x0000 */ unsigned char InheritedAddressSpace;
  /* 0x0001 */ unsigned char ReadImageFileExecOptions;
  /* 0x0002 */ unsigned char BeingDebugged;
  union
  {
    /* 0x0003 */ unsigned char BitField;
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char ImageUsesLargePages : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char IsProtectedProcess : 1; /* bit position: 1 */
      /* 0x0003 */ unsigned char IsImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0003 */ unsigned char SkipPatchingUser32Forwarders : 1; /* bit position: 3 */
      /* 0x0003 */ unsigned char IsPackagedProcess : 1; /* bit position: 4 */
      /* 0x0003 */ unsigned char IsAppContainer : 1; /* bit position: 5 */
      /* 0x0003 */ unsigned char IsProtectedProcessLight : 1; /* bit position: 6 */
      /* 0x0003 */ unsigned char IsLongPathAwareProcess : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0004 */ unsigned long Mutant;
  /* 0x0008 */ unsigned long ImageBaseAddress;
  /* 0x000c */ unsigned long Ldr;
  /* 0x0010 */ unsigned long ProcessParameters;
  /* 0x0014 */ unsigned long SubSystemData;
  /* 0x0018 */ unsigned long ProcessHeap;
  /* 0x001c */ unsigned long FastPebLock;
  /* 0x0020 */ unsigned long AtlThunkSListPtr;
  /* 0x0024 */ unsigned long IFEOKey;
  union
  {
    /* 0x0028 */ unsigned long CrossProcessFlags;
    struct /* bitfield */
    {
      /* 0x0028 */ unsigned long ProcessInJob : 1; /* bit position: 0 */
      /* 0x0028 */ unsigned long ProcessInitializing : 1; /* bit position: 1 */
      /* 0x0028 */ unsigned long ProcessUsingVEH : 1; /* bit position: 2 */
      /* 0x0028 */ unsigned long ProcessUsingVCH : 1; /* bit position: 3 */
      /* 0x0028 */ unsigned long ProcessUsingFTH : 1; /* bit position: 4 */
      /* 0x0028 */ unsigned long ProcessPreviouslyThrottled : 1; /* bit position: 5 */
      /* 0x0028 */ unsigned long ProcessCurrentlyThrottled : 1; /* bit position: 6 */
      /* 0x0028 */ unsigned long ProcessImagesHotPatched : 1; /* bit position: 7 */
      /* 0x0028 */ unsigned long ReservedBits0 : 24; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x002c */ unsigned long KernelCallbackTable;
    /* 0x002c */ unsigned long UserSharedInfoPtr;
  }; /* size: 0x0004 */
  /* 0x0030 */ unsigned long SystemReserved;
  /* 0x0034 */ unsigned long AtlThunkSListPtr32;
  /* 0x0038 */ unsigned long ApiSetMap;
  /* 0x003c */ unsigned long TlsExpansionCounter;
  /* 0x0040 */ unsigned long TlsBitmap;
  /* 0x0044 */ unsigned long TlsBitmapBits[2];
  /* 0x004c */ unsigned long ReadOnlySharedMemoryBase;
  /* 0x0050 */ unsigned long SharedData;
  /* 0x0054 */ unsigned long ReadOnlyStaticServerData;
  /* 0x0058 */ unsigned long AnsiCodePageData;
  /* 0x005c */ unsigned long OemCodePageData;
  /* 0x0060 */ unsigned long UnicodeCaseTableData;
  /* 0x0064 */ unsigned long NumberOfProcessors;
  /* 0x0068 */ unsigned long NtGlobalFlag;
  /* 0x006c */ long Padding_844;
  /* 0x0070 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x0078 */ unsigned long HeapSegmentReserve;
  /* 0x007c */ unsigned long HeapSegmentCommit;
  /* 0x0080 */ unsigned long HeapDeCommitTotalFreeThreshold;
  /* 0x0084 */ unsigned long HeapDeCommitFreeBlockThreshold;
  /* 0x0088 */ unsigned long NumberOfHeaps;
  /* 0x008c */ unsigned long MaximumNumberOfHeaps;
  /* 0x0090 */ unsigned long ProcessHeaps;
  /* 0x0094 */ unsigned long GdiSharedHandleTable;
  /* 0x0098 */ unsigned long ProcessStarterHelper;
  /* 0x009c */ unsigned long GdiDCAttributeList;
  /* 0x00a0 */ unsigned long LoaderLock;
  /* 0x00a4 */ unsigned long OSMajorVersion;
  /* 0x00a8 */ unsigned long OSMinorVersion;
  /* 0x00ac */ unsigned short OSBuildNumber;
  /* 0x00ae */ unsigned short OSCSDVersion;
  /* 0x00b0 */ unsigned long OSPlatformId;
  /* 0x00b4 */ unsigned long ImageSubsystem;
  /* 0x00b8 */ unsigned long ImageSubsystemMajorVersion;
  /* 0x00bc */ unsigned long ImageSubsystemMinorVersion;
  /* 0x00c0 */ unsigned long ActiveProcessAffinityMask;
  /* 0x00c4 */ unsigned long GdiHandleBuffer[34];
  /* 0x014c */ unsigned long PostProcessInitRoutine;
  /* 0x0150 */ unsigned long TlsExpansionBitmap;
  /* 0x0154 */ unsigned long TlsExpansionBitmapBits[32];
  /* 0x01d4 */ unsigned long SessionId;
  /* 0x01d8 */ union _ULARGE_INTEGER AppCompatFlags;
  /* 0x01e0 */ union _ULARGE_INTEGER AppCompatFlagsUser;
  /* 0x01e8 */ unsigned long pShimData;
  /* 0x01ec */ unsigned long AppCompatInfo;
  /* 0x01f0 */ struct _STRING32 CSDVersion;
  /* 0x01f8 */ unsigned long ActivationContextData;
  /* 0x01fc */ unsigned long ProcessAssemblyStorageMap;
  /* 0x0200 */ unsigned long SystemDefaultActivationContextData;
  /* 0x0204 */ unsigned long SystemAssemblyStorageMap;
  /* 0x0208 */ unsigned long MinimumStackCommit;
  /* 0x020c */ unsigned long SparePointers[2];
  /* 0x0214 */ unsigned long PatchLoaderData;
  /* 0x0218 */ unsigned long ChpeV2ProcessInfo;
  /* 0x021c */ unsigned long AppModelFeatureState;
  /* 0x0220 */ unsigned long SpareUlongs[2];
  /* 0x0228 */ unsigned short ActiveCodePage;
  /* 0x022a */ unsigned short OemCodePage;
  /* 0x022c */ unsigned short UseCaseMapping;
  /* 0x022e */ unsigned short UnusedNlsField;
  /* 0x0230 */ unsigned long WerRegistrationData;
  /* 0x0234 */ unsigned long WerShipAssertPtr;
  /* 0x0238 */ unsigned long Spare;
  /* 0x023c */ unsigned long pImageHeaderHash;
  union
  {
    /* 0x0240 */ unsigned long TracingFlags;
    struct /* bitfield */
    {
      /* 0x0240 */ unsigned long HeapTracingEnabled : 1; /* bit position: 0 */
      /* 0x0240 */ unsigned long CritSecTracingEnabled : 1; /* bit position: 1 */
      /* 0x0240 */ unsigned long LibLoaderTracingEnabled : 1; /* bit position: 2 */
      /* 0x0240 */ unsigned long SpareTracingBits : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0244 */ long Padding_845;
  /* 0x0248 */ unsigned __int64 CsrServerReadOnlySharedMemoryBase;
  /* 0x0250 */ unsigned long TppWorkerpListLock;
  /* 0x0254 */ struct LIST_ENTRY32 TppWorkerpList;
  /* 0x025c */ unsigned long WaitOnAddressHashTable[128];
  /* 0x045c */ unsigned long TelemetryCoverageHeader;
  /* 0x0460 */ unsigned long CloudFileFlags;
  /* 0x0464 */ unsigned long CloudFileDiagFlags;
  /* 0x0468 */ char PlaceholderCompatibilityMode;
  /* 0x0469 */ char PlaceholderCompatibilityModeReserved[7];
  /* 0x0470 */ unsigned long LeapSecondData;
  union
  {
    /* 0x0474 */ unsigned long LeapSecondFlags;
    struct /* bitfield */
    {
      /* 0x0474 */ unsigned long SixtySecondEnabled : 1; /* bit position: 0 */
      /* 0x0474 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0478 */ unsigned long NtGlobalFlag2;
  /* 0x047c */ long Padding_846;
  /* 0x0480 */ unsigned __int64 ExtendedFeatureDisableMask;
} PEB32, *PPEB32; /* size: 0x0488 */

typedef struct _HEAP_UCR_DESCRIPTOR
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _LIST_ENTRY SegmentEntry;
  /* 0x0020 */ void* Address;
  /* 0x0028 */ unsigned __int64 Size;
} HEAP_UCR_DESCRIPTOR, *PHEAP_UCR_DESCRIPTOR; /* size: 0x0030 */

typedef struct _ALPC_HANDLE_ENTRY
{
  /* 0x0000 */ void* Object;
} ALPC_HANDLE_ENTRY, *PALPC_HANDLE_ENTRY; /* size: 0x0008 */

typedef struct _ETW_DEBUGID_TRACKING_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned char ConsumersNotified;
  /* 0x0011 */ unsigned char Spare[3];
  /* 0x0014 */ unsigned long DebugIdSize;
  /* 0x0018 */ union _CVDD DebugId;
  /* 0x0034 */ long __PADDING__[1];
} ETW_DEBUGID_TRACKING_ENTRY, *PETW_DEBUGID_TRACKING_ENTRY; /* size: 0x0038 */

typedef struct _MMCLONE_HEADER
{
  /* 0x0000 */ unsigned __int64 NumberOfPtes;
  /* 0x0008 */ volatile unsigned __int64 NumberOfProcessReferences;
  /* 0x0010 */ struct _MMCLONE_BLOCK* ClonePtes;
  /* 0x0018 */ struct _MI_PARTITION* Partition;
} MMCLONE_HEADER, *PMMCLONE_HEADER; /* size: 0x0020 */

typedef struct _OBJECT_HEADER_CREATOR_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY TypeList;
  /* 0x0010 */ void* CreatorUniqueProcess;
  /* 0x0018 */ unsigned short CreatorBackTraceIndex;
  /* 0x001a */ unsigned short Reserved1;
  /* 0x001c */ unsigned long Reserved2;
} OBJECT_HEADER_CREATOR_INFO, *POBJECT_HEADER_CREATOR_INFO; /* size: 0x0020 */

typedef struct _AWEINFO
{
  /* 0x0000 */ void* AweInfoSignature;
  /* 0x0008 */ struct _MI_AWEINFO_FLAGS Flags;
  /* 0x000c */ long Padding_847;
  /* 0x0010 */ unsigned __int64 PageSize;
  /* 0x0018 */ struct _RTL_BITMAP_EX VadPhysicalPagesBitMap;
  /* 0x0028 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0030 */ volatile long ChangeClusterAttributeLock;
  /* 0x0034 */ enum _MI_PFN_CACHE_ATTRIBUTE CacheAttribute;
  /* 0x0038 */ long Padding_848[2];
  /* 0x0040 */ struct _EX_PUSH_LOCK_AUTO_EXPAND AwePagesLock;
  /* 0x0050 */ struct _MI_AWE_ATTRIBUTE_CHANGE_WAIT_BLOCK* ChangeClusterAttributeWaitList;
  /* 0x0058 */ long __PADDING__[10];
} AWEINFO, *PAWEINFO; /* size: 0x0080 */

typedef struct _WNF_PROCESS_CONTEXT
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ long Padding_849;
  /* 0x0008 */ struct _EPROCESS* Process;
  /* 0x0010 */ struct _LIST_ENTRY WnfProcessesListEntry;
  /* 0x0020 */ void* ImplicitScopeInstances[3];
  /* 0x0038 */ struct _WNF_LOCK TemporaryNamesListLock;
  /* 0x0040 */ struct _LIST_ENTRY TemporaryNamesListHead;
  /* 0x0050 */ struct _WNF_LOCK ProcessSubscriptionListLock;
  /* 0x0058 */ struct _LIST_ENTRY ProcessSubscriptionListHead;
  /* 0x0068 */ struct _WNF_LOCK DeliveryPendingListLock;
  /* 0x0070 */ struct _LIST_ENTRY DeliveryPendingListHead;
  /* 0x0080 */ struct _KEVENT* NotificationEvent;
} WNF_PROCESS_CONTEXT, *PWNF_PROCESS_CONTEXT; /* size: 0x0088 */

typedef struct _MI_WRITE_MODES
{
  /* 0x0000 */ unsigned __int64 WriteType[2];
} MI_WRITE_MODES, *PMI_WRITE_MODES; /* size: 0x0010 */

typedef struct _INTERRUPT_TRACKING_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _INTERRUPT_TRACKING_ROOT* IntTrackRoot;
  /* 0x0018 */ unsigned long InterruptObjectCount;
  /* 0x001c */ long Padding_850;
  /* 0x0020 */ struct _KINTERRUPT** InterruptObjectArray;
  /* 0x0028 */ unsigned __int64 IsrTime;
  /* 0x0030 */ unsigned __int64 DpcTime;
  /* 0x0038 */ unsigned char IsPrimaryInterrupt;
  /* 0x0039 */ char Padding_851[7];
  /* 0x0040 */ struct _INTERRUPT_VECTOR_DATA VectorData;
} INTERRUPT_TRACKING_ENTRY, *PINTERRUPT_TRACKING_ENTRY; /* size: 0x0098 */

typedef struct _CM_UOW_SET_SD_DATA
{
  /* 0x0000 */ unsigned long SecurityCell;
  /* 0x0004 */ long Padding_852;
  /* 0x0008 */ struct _HHIVE* Hive;
} CM_UOW_SET_SD_DATA, *PCM_UOW_SET_SD_DATA; /* size: 0x0010 */

typedef struct _CM_UOW_SET_VALUE_LIST_DATA
{
  /* 0x0000 */ unsigned long RefCount;
  /* 0x0004 */ struct _CHILD_LIST ValueList;
} CM_UOW_SET_VALUE_LIST_DATA, *PCM_UOW_SET_VALUE_LIST_DATA; /* size: 0x000c */

typedef struct _HEAP_VS_CHUNK_FREE_HEADER
{
  union
  {
    /* 0x0000 */ struct _HEAP_VS_CHUNK_HEADER Header;
    struct
    {
      /* 0x0000 */ unsigned __int64 OverlapsHeader;
      /* 0x0008 */ struct _RTL_BALANCED_NODE Node;
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
} HEAP_VS_CHUNK_FREE_HEADER, *PHEAP_VS_CHUNK_FREE_HEADER; /* size: 0x0020 */

typedef struct _PCW_COUNTER_INFORMATION
{
  /* 0x0000 */ unsigned __int64 CounterMask;
  /* 0x0008 */ const struct _UNICODE_STRING* InstanceMask;
} PCW_COUNTER_INFORMATION, *PPCW_COUNTER_INFORMATION; /* size: 0x0010 */

typedef union _PCW_CALLBACK_INFORMATION
{
  union
  {
    /* 0x0000 */ struct _PCW_COUNTER_INFORMATION AddCounter;
    /* 0x0000 */ struct _PCW_COUNTER_INFORMATION RemoveCounter;
    /* 0x0000 */ struct _PCW_MASK_INFORMATION EnumerateInstances;
    /* 0x0000 */ struct _PCW_MASK_INFORMATION CollectData;
  }; /* size: 0x0028 */
} PCW_CALLBACK_INFORMATION, *PPCW_CALLBACK_INFORMATION; /* size: 0x0028 */

struct _PCW_REGISTRATION;

typedef struct _ETW_SESSION_PERF_COUNTERS
{
  /* 0x0000 */ long BufferMemoryPagedPool;
  /* 0x0004 */ long BufferMemoryNonPagedPool;
  /* 0x0008 */ unsigned __int64 EventsLoggedCount;
  /* 0x0010 */ long EventsLost;
  /* 0x0014 */ long NumConsumers;
} ETW_SESSION_PERF_COUNTERS, *PETW_SESSION_PERF_COUNTERS; /* size: 0x0018 */

typedef struct _LOCK_HEADER
{
  /* 0x0000 */ struct _RTL_AVL_TREE LockTree;
  /* 0x0008 */ struct _RTL_AVL_TREE LockMdlSwitchedTree;
  /* 0x0010 */ unsigned __int64 Count;
  /* 0x0018 */ volatile long Lock;
  /* 0x001c */ unsigned long Valid;
} LOCK_HEADER, *PLOCK_HEADER; /* size: 0x0020 */

typedef struct _VF_POOL_TRACE
{
  /* 0x0000 */ void* Address;
  /* 0x0008 */ unsigned __int64 Size;
  /* 0x0010 */ struct _ETHREAD* Thread;
  /* 0x0018 */ void* StackTrace[50];
} VF_POOL_TRACE, *PVF_POOL_TRACE; /* size: 0x01a8 */

typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _TRIAGE_DEVICE_NODE* DeviceNode;
} TRIAGE_PNP_DEVICE_COMPLETION_REQUEST, *PTRIAGE_PNP_DEVICE_COMPLETION_REQUEST; /* size: 0x0018 */

typedef struct _CLIENT_ID64
{
  /* 0x0000 */ unsigned __int64 UniqueProcess;
  /* 0x0008 */ unsigned __int64 UniqueThread;
} CLIENT_ID64, *PCLIENT_ID64; /* size: 0x0010 */

typedef struct _TEB64
{
  /* 0x0000 */ struct _NT_TIB64 NtTib;
  /* 0x0038 */ unsigned __int64 EnvironmentPointer;
  /* 0x0040 */ struct _CLIENT_ID64 ClientId;
  /* 0x0050 */ unsigned __int64 ActiveRpcHandle;
  /* 0x0058 */ unsigned __int64 ThreadLocalStoragePointer;
  /* 0x0060 */ unsigned __int64 ProcessEnvironmentBlock;
  /* 0x0068 */ unsigned long LastErrorValue;
  /* 0x006c */ unsigned long CountOfOwnedCriticalSections;
  /* 0x0070 */ unsigned __int64 CsrClientThread;
  /* 0x0078 */ unsigned __int64 Win32ThreadInfo;
  /* 0x0080 */ unsigned long User32Reserved[26];
  /* 0x00e8 */ unsigned long UserReserved[5];
  /* 0x00fc */ long Padding_853;
  /* 0x0100 */ unsigned __int64 WOW32Reserved;
  /* 0x0108 */ unsigned long CurrentLocale;
  /* 0x010c */ unsigned long FpSoftwareStatusRegister;
  /* 0x0110 */ unsigned __int64 ReservedForDebuggerInstrumentation[16];
  /* 0x0190 */ unsigned __int64 SystemReserved1[25];
  /* 0x0258 */ unsigned __int64 HeapFlsData;
  /* 0x0260 */ unsigned __int64 RngState[4];
  /* 0x0280 */ char PlaceholderCompatibilityMode;
  /* 0x0281 */ unsigned char PlaceholderHydrationAlwaysExplicit;
  /* 0x0282 */ char PlaceholderReserved[10];
  /* 0x028c */ unsigned long ProxiedProcessId;
  /* 0x0290 */ struct _ACTIVATION_CONTEXT_STACK64 _ActivationStack;
  /* 0x02b8 */ unsigned char WorkingOnBehalfTicket[8];
  /* 0x02c0 */ long ExceptionCode;
  /* 0x02c4 */ unsigned char Padding0[4];
  /* 0x02c8 */ unsigned __int64 ActivationContextStackPointer;
  /* 0x02d0 */ unsigned __int64 InstrumentationCallbackSp;
  /* 0x02d8 */ unsigned __int64 InstrumentationCallbackPreviousPc;
  /* 0x02e0 */ unsigned __int64 InstrumentationCallbackPreviousSp;
  /* 0x02e8 */ unsigned long TxFsContext;
  /* 0x02ec */ unsigned char InstrumentationCallbackDisabled;
  /* 0x02ed */ unsigned char UnalignedLoadStoreExceptions;
  /* 0x02ee */ unsigned char Padding1[2];
  /* 0x02f0 */ struct _GDI_TEB_BATCH64 GdiTebBatch;
  /* 0x07d8 */ struct _CLIENT_ID64 RealClientId;
  /* 0x07e8 */ unsigned __int64 GdiCachedProcessHandle;
  /* 0x07f0 */ unsigned long GdiClientPID;
  /* 0x07f4 */ unsigned long GdiClientTID;
  /* 0x07f8 */ unsigned __int64 GdiThreadLocalInfo;
  /* 0x0800 */ unsigned __int64 Win32ClientInfo[62];
  /* 0x09f0 */ unsigned __int64 glDispatchTable[233];
  /* 0x1138 */ unsigned __int64 glReserved1[29];
  /* 0x1220 */ unsigned __int64 glReserved2;
  /* 0x1228 */ unsigned __int64 glSectionInfo;
  /* 0x1230 */ unsigned __int64 glSection;
  /* 0x1238 */ unsigned __int64 glTable;
  /* 0x1240 */ unsigned __int64 glCurrentRC;
  /* 0x1248 */ unsigned __int64 glContext;
  /* 0x1250 */ unsigned long LastStatusValue;
  /* 0x1254 */ unsigned char Padding2[4];
  /* 0x1258 */ struct _STRING64 StaticUnicodeString;
  /* 0x1268 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x1472 */ unsigned char Padding3[6];
  /* 0x1478 */ unsigned __int64 DeallocationStack;
  /* 0x1480 */ unsigned __int64 TlsSlots[64];
  /* 0x1680 */ struct LIST_ENTRY64 TlsLinks;
  /* 0x1690 */ unsigned __int64 Vdm;
  /* 0x1698 */ unsigned __int64 ReservedForNtRpc;
  /* 0x16a0 */ unsigned __int64 DbgSsReserved[2];
  /* 0x16b0 */ unsigned long HardErrorMode;
  /* 0x16b4 */ unsigned char Padding4[4];
  /* 0x16b8 */ unsigned __int64 Instrumentation[11];
  /* 0x1710 */ struct _GUID ActivityId;
  /* 0x1720 */ unsigned __int64 SubProcessTag;
  /* 0x1728 */ unsigned __int64 PerflibData;
  /* 0x1730 */ unsigned __int64 EtwTraceData;
  /* 0x1738 */ unsigned __int64 WinSockData;
  /* 0x1740 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x1744 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x1744 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x1744 */ unsigned char ReservedPad0;
      /* 0x1745 */ unsigned char ReservedPad1;
      /* 0x1746 */ unsigned char ReservedPad2;
      /* 0x1747 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x1748 */ unsigned long GuaranteedStackBytes;
  /* 0x174c */ unsigned char Padding5[4];
  /* 0x1750 */ unsigned __int64 ReservedForPerf;
  /* 0x1758 */ unsigned __int64 ReservedForOle;
  /* 0x1760 */ unsigned long WaitingOnLoaderLock;
  /* 0x1764 */ unsigned char Padding6[4];
  /* 0x1768 */ unsigned __int64 SavedPriorityState;
  /* 0x1770 */ unsigned __int64 ReservedForCodeCoverage;
  /* 0x1778 */ unsigned __int64 ThreadPoolData;
  /* 0x1780 */ unsigned __int64 TlsExpansionSlots;
  /* 0x1788 */ unsigned __int64 ChpeV2CpuAreaInfo;
  /* 0x1790 */ unsigned __int64 Unused;
  /* 0x1798 */ unsigned long MuiGeneration;
  /* 0x179c */ unsigned long IsImpersonating;
  /* 0x17a0 */ unsigned __int64 NlsCache;
  /* 0x17a8 */ unsigned __int64 pShimData;
  /* 0x17b0 */ unsigned long HeapData;
  /* 0x17b4 */ unsigned char Padding7[4];
  /* 0x17b8 */ unsigned __int64 CurrentTransactionHandle;
  /* 0x17c0 */ unsigned __int64 ActiveFrame;
  /* 0x17c8 */ unsigned __int64 FlsData;
  /* 0x17d0 */ unsigned __int64 PreferredLanguages;
  /* 0x17d8 */ unsigned __int64 UserPrefLanguages;
  /* 0x17e0 */ unsigned __int64 MergedPrefLanguages;
  /* 0x17e8 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x17ec */ volatile unsigned short CrossTebFlags;
    /* 0x17ec */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x17ee */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x17ee */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x17ee */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x17ee */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x17ee */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x17ee */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x17ee */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x17ee */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x17ee */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x17ee */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x17ee */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x17ee */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x17ee */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x17ee */ unsigned short LoadOwner : 1; /* bit position: 12 */
      /* 0x17ee */ unsigned short LoaderWorker : 1; /* bit position: 13 */
      /* 0x17ee */ unsigned short SkipLoaderInit : 1; /* bit position: 14 */
      /* 0x17ee */ unsigned short SkipFileAPIBrokering : 1; /* bit position: 15 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x17f0 */ unsigned __int64 TxnScopeEnterCallback;
  /* 0x17f8 */ unsigned __int64 TxnScopeExitCallback;
  /* 0x1800 */ unsigned __int64 TxnScopeContext;
  /* 0x1808 */ unsigned long LockCount;
  /* 0x180c */ long WowTebOffset;
  /* 0x1810 */ unsigned __int64 ResourceRetValue;
  /* 0x1818 */ unsigned __int64 ReservedForWdf;
  /* 0x1820 */ unsigned __int64 ReservedForCrt;
  /* 0x1828 */ struct _GUID EffectiveContainerId;
  /* 0x1838 */ unsigned __int64 LastSleepCounter;
  /* 0x1840 */ unsigned long SpinCallCount;
  /* 0x1844 */ unsigned char Padding8[4];
  /* 0x1848 */ unsigned __int64 ExtendedFeatureDisableMask;
  /* 0x1850 */ unsigned __int64 SchedulerSharedDataSlot;
  /* 0x1858 */ unsigned __int64 HeapWalkContext;
  /* 0x1860 */ struct _GROUP_AFFINITY64 PrimaryGroupAffinity;
  /* 0x1870 */ unsigned long Rcu[2];
} TEB64, *PTEB64; /* size: 0x1878 */

typedef struct _KEXCEPTION_FRAME
{
  /* 0x0000 */ unsigned __int64 P1Home;
  /* 0x0008 */ unsigned __int64 P2Home;
  /* 0x0010 */ unsigned __int64 P3Home;
  /* 0x0018 */ unsigned __int64 P4Home;
  /* 0x0020 */ unsigned __int64 P5;
  /* 0x0028 */ unsigned __int64 Spare1;
  /* 0x0030 */ struct _M128A Xmm6;
  /* 0x0040 */ struct _M128A Xmm7;
  /* 0x0050 */ struct _M128A Xmm8;
  /* 0x0060 */ struct _M128A Xmm9;
  /* 0x0070 */ struct _M128A Xmm10;
  /* 0x0080 */ struct _M128A Xmm11;
  /* 0x0090 */ struct _M128A Xmm12;
  /* 0x00a0 */ struct _M128A Xmm13;
  /* 0x00b0 */ struct _M128A Xmm14;
  /* 0x00c0 */ struct _M128A Xmm15;
  /* 0x00d0 */ unsigned __int64 TrapFrame;
  /* 0x00d8 */ unsigned __int64 OutputBuffer;
  /* 0x00e0 */ unsigned __int64 OutputLength;
  /* 0x00e8 */ unsigned __int64 Spare2;
  /* 0x00f0 */ unsigned __int64 MxCsr;
  /* 0x00f8 */ unsigned __int64 Rbp;
  /* 0x0100 */ unsigned __int64 Rbx;
  /* 0x0108 */ unsigned __int64 Rdi;
  /* 0x0110 */ unsigned __int64 Rsi;
  /* 0x0118 */ unsigned __int64 R12;
  /* 0x0120 */ unsigned __int64 R13;
  /* 0x0128 */ unsigned __int64 R14;
  /* 0x0130 */ unsigned __int64 R15;
  /* 0x0138 */ unsigned __int64 Return;
} KEXCEPTION_FRAME, *PKEXCEPTION_FRAME; /* size: 0x0140 */

typedef struct _KLDTENTRY
{
  /* 0x0000 */ unsigned short LimitLow;
  /* 0x0002 */ unsigned short BaseLow;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ unsigned char BaseMid;
        /* 0x0005 */ unsigned char Flags1;
        /* 0x0006 */ unsigned char Flags2;
        /* 0x0007 */ unsigned char BaseHi;
      } /* size: 0x0004 */ Bytes;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long BaseMid : 8; /* bit position: 0 */
          /* 0x0004 */ unsigned long Type : 5; /* bit position: 8 */
          /* 0x0004 */ unsigned long Dpl : 2; /* bit position: 13 */
          /* 0x0004 */ unsigned long Pres : 1; /* bit position: 15 */
          /* 0x0004 */ unsigned long LimitHi : 4; /* bit position: 16 */
          /* 0x0004 */ unsigned long Sys : 1; /* bit position: 20 */
          /* 0x0004 */ unsigned long Reserved_0 : 1; /* bit position: 21 */
          /* 0x0004 */ unsigned long Default_Big : 1; /* bit position: 22 */
          /* 0x0004 */ unsigned long Granularity : 1; /* bit position: 23 */
          /* 0x0004 */ unsigned long BaseHi : 8; /* bit position: 24 */
        }; /* bitfield */
      } /* size: 0x0004 */ Bits;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ HighWord;
} KLDTENTRY, *PKLDTENTRY; /* size: 0x0008 */

typedef struct _KPROCESSOR_DESCRIPTOR_AREA
{
  /* 0x0000 */ union _KIDTENTRY64 Idt[256];
  /* 0x1000 */ struct _KTSS64 Tss;
  /* 0x1068 */ unsigned __int64 TssSpare;
  /* 0x1070 */ struct _KPCR* KernelGsBase;
  /* 0x1078 */ void* IdleStack;
  /* 0x1080 */ unsigned char TssPad[3888];
  /* 0x1fb0 */ unsigned char GdtPadTemp[4096];
  /* 0x2fb0 */ union _KGDTENTRY64 Gdt[5];
  /* 0x3000 */ struct _KLDTENTRY GdtCmTebDescriptor;
  /* 0x3008 */ unsigned char GdtEndPadding[4088];
  /* 0x4000 */ struct _KTRANSITION_STACK TransitionStack[8];
} KPROCESSOR_DESCRIPTOR_AREA, *PKPROCESSOR_DESCRIPTOR_AREA; /* size: 0x5000 */

typedef struct _DIAGNOSTIC_CONTEXT
{
  /* 0x0000 */ enum _REQUESTER_TYPE CallerType;
  /* 0x0004 */ long Padding_854;
  union
  {
    struct
    {
      /* 0x0008 */ struct _EPROCESS* Process;
      /* 0x0010 */ unsigned long ServiceTag;
    }; /* size: 0x000c */
    /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  }; /* size: 0x000c */
  /* 0x0014 */ long Padding_855;
  /* 0x0018 */ unsigned __int64 ReasonSize;
} DIAGNOSTIC_CONTEXT, *PDIAGNOSTIC_CONTEXT; /* size: 0x0020 */

typedef struct _HEAP_TAG_ENTRY
{
  /* 0x0000 */ unsigned long Allocs;
  /* 0x0004 */ unsigned long Frees;
  /* 0x0008 */ unsigned __int64 Size;
  /* 0x0010 */ unsigned short TagIndex;
  /* 0x0012 */ unsigned short CreatorBackTraceIndex;
  /* 0x0014 */ wchar_t TagName[24];
  /* 0x0044 */ long __PADDING__[1];
} HEAP_TAG_ENTRY, *PHEAP_TAG_ENTRY; /* size: 0x0048 */

typedef struct _VACB
{
  /* 0x0000 */ void* BaseAddress;
  /* 0x0008 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
  union
  {
    union
    {
      /* 0x0010 */ union _LARGE_INTEGER FileOffset;
      /* 0x0010 */ unsigned short ActiveCount;
      /* 0x0010 */ struct _LIST_ENTRY Links;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Overlay;
  /* 0x0020 */ struct _VACB_ARRAY_HEADER* ArrayHead;
} VACB, *PVACB; /* size: 0x0028 */

typedef struct _MBCB
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeIsInZone;
  /* 0x0004 */ unsigned long PagesToWrite;
  /* 0x0008 */ unsigned long DirtyPages;
  /* 0x000c */ unsigned long Reserved;
  /* 0x0010 */ struct _LIST_ENTRY BitmapRanges;
  /* 0x0020 */ __int64 ResumeWritePage;
  /* 0x0028 */ __int64 MostRecentlyDirtiedPage;
  /* 0x0030 */ struct _BITMAP_RANGE BitmapRange1;
  /* 0x0060 */ struct _BITMAP_RANGE BitmapRange2;
  /* 0x0090 */ struct _BITMAP_RANGE BitmapRange3;
} MBCB, *PMBCB; /* size: 0x00c0 */

typedef struct _VF_TRACKER
{
  /* 0x0000 */ unsigned long TrackerFlags;
  /* 0x0004 */ unsigned long TrackerSize;
  /* 0x0008 */ unsigned long TrackerIndex;
  /* 0x000c */ unsigned long TraceDepth;
} VF_TRACKER, *PVF_TRACKER; /* size: 0x0010 */

typedef struct _EX_WORK_QUEUE_MANAGER
{
  /* 0x0000 */ struct _EX_PARTITION* Partition;
  /* 0x0008 */ struct _ENODE* Node;
  /* 0x0010 */ struct _KEVENT Event;
  /* 0x0028 */ struct _KTIMER DeadlockTimer;
  /* 0x0068 */ struct _KEVENT ReaperEvent;
  /* 0x0080 */ struct _KTIMER2 ReaperTimer;
  /* 0x0108 */ void* ThreadHandle;
  /* 0x0110 */ volatile unsigned long ExitThread;
  /* 0x0114 */ unsigned short ThreadSeed;
  /* 0x0116 */ char __PADDING__[2];
} EX_WORK_QUEUE_MANAGER, *PEX_WORK_QUEUE_MANAGER; /* size: 0x0118 */

typedef struct _OB_EXTENDED_USER_INFO
{
  /* 0x0000 */ void* Context1;
  /* 0x0008 */ void* Context2;
} OB_EXTENDED_USER_INFO, *POB_EXTENDED_USER_INFO; /* size: 0x0010 */

typedef struct _WRITE_BEHIND_THROUGHPUT
{
  /* 0x0000 */ unsigned long PagesYetToWrite;
  /* 0x0004 */ unsigned long Throughput;
} WRITE_BEHIND_THROUGHPUT, *PWRITE_BEHIND_THROUGHPUT; /* size: 0x0008 */

typedef struct _ASYNC_READ_THREAD_STATS
{
  /* 0x0000 */ unsigned long CurrentLoad[101];
} ASYNC_READ_THREAD_STATS, *PASYNC_READ_THREAD_STATS; /* size: 0x0194 */

typedef struct _BCB
{
  union
  {
    /* 0x0000 */ struct _MBCB Dummy;
    struct
    {
      /* 0x0000 */ short NodeTypeCode;
      /* 0x0002 */ unsigned char Dirty;
      /* 0x0003 */ unsigned char Reserved;
      /* 0x0004 */ unsigned long ByteLength;
      /* 0x0008 */ union _LARGE_INTEGER FileOffset;
      /* 0x0010 */ struct _LIST_ENTRY BcbLinks;
      /* 0x0020 */ union _LARGE_INTEGER BeyondLastByte;
      /* 0x0028 */ union _LARGE_INTEGER OldestLsn;
      /* 0x0030 */ union _LARGE_INTEGER NewestLsn;
      /* 0x0038 */ struct _VACB* Vacb;
      /* 0x0040 */ unsigned long PinCount;
      /* 0x0044 */ long Padding_856;
      /* 0x0048 */ struct _ERESOURCE Resource;
      /* 0x00b0 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
      /* 0x00b8 */ void* BaseAddress;
    }; /* size: 0x00bc */
  }; /* size: 0x00c0 */
} BCB, *PBCB; /* size: 0x00c0 */

typedef struct _FSRTL_COMMON_FCB_HEADER
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ unsigned char Flags;
  /* 0x0005 */ unsigned char IsFastIoPossible;
  /* 0x0006 */ unsigned char Flags2;
  struct /* bitfield */
  {
    /* 0x0007 */ unsigned char Reserved : 4; /* bit position: 0 */
    /* 0x0007 */ unsigned char Version : 4; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0008 */ struct _ERESOURCE* Resource;
  /* 0x0010 */ struct _ERESOURCE* PagingIoResource;
  /* 0x0018 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0020 */ union _LARGE_INTEGER FileSize;
  /* 0x0028 */ union _LARGE_INTEGER ValidDataLength;
} FSRTL_COMMON_FCB_HEADER, *PFSRTL_COMMON_FCB_HEADER; /* size: 0x0030 */

typedef union _MI_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 VerifierEnabled : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 KernelVerifierEnabled : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 LargePageKernel : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 StopOn4d : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 InitializationPhase : 2; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 PageKernelStacks : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 CheckZeroPages : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned __int64 ProcessorPrewalks : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 ProcessorPostwalks : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 CoverageBuild : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 CheckExecute : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 ProtectedPagesEnabled : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 SecureRelocations : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned __int64 StrongPageIdentity : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned __int64 StrongCodeGuarantees : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned __int64 HardCodeGuarantees : 1; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 ExecutePagePrivilegeRequired : 1; /* bit position: 17 */
      /* 0x0000 */ unsigned __int64 SecureKernelCfgEnabled : 1; /* bit position: 18 */
      /* 0x0000 */ unsigned __int64 FullHvci : 1; /* bit position: 19 */
      /* 0x0000 */ unsigned __int64 BootDebuggerActive : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned __int64 KvaShadow : 2; /* bit position: 21 */
      /* 0x0000 */ unsigned __int64 ExceptionHandlingReady : 1; /* bit position: 23 */
      /* 0x0000 */ unsigned __int64 ShadowStacksSupported : 1; /* bit position: 24 */
      /* 0x0000 */ unsigned __int64 AccessBitFenceRequired : 1; /* bit position: 25 */
      /* 0x0000 */ unsigned __int64 AccessBitReplacementCapability : 2; /* bit position: 26 */
      /* 0x0000 */ unsigned __int64 PfnDatabaseExists : 1; /* bit position: 28 */
      /* 0x0000 */ unsigned __int64 PfnDatabaseGapsFilled : 1; /* bit position: 29 */
      /* 0x0000 */ unsigned __int64 SystemPtesReady : 1; /* bit position: 30 */
      /* 0x0000 */ unsigned __int64 BootImageUnprivilegedPagesUnregistered : 1; /* bit position: 31 */
      /* 0x0000 */ unsigned __int64 ImageProtectedSlabExecutableOnly : 1; /* bit position: 32 */
      /* 0x0000 */ unsigned __int64 SpecialReadOnlyProtectedSlabPages : 1; /* bit position: 33 */
      /* 0x0000 */ unsigned __int64 SlabAllocatorsReady : 1; /* bit position: 34 */
      /* 0x0000 */ unsigned __int64 KasanEnabled : 1; /* bit position: 35 */
      /* 0x0000 */ unsigned __int64 HvptEnabled : 1; /* bit position: 36 */
      /* 0x0000 */ unsigned __int64 HvptVisible : 1; /* bit position: 37 */
      /* 0x0000 */ unsigned __int64 ProcessorsConfigured : 1; /* bit position: 38 */
      /* 0x0000 */ unsigned __int64 GlobalBitsInitialized : 1; /* bit position: 39 */
      /* 0x0000 */ unsigned __int64 GlobalBitsChanging : 1; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 ProcessorSupportsShadowStacks : 1; /* bit position: 41 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 EntireField;
  }; /* size: 0x0008 */
} MI_FLAGS, *PMI_FLAGS; /* size: 0x0008 */

typedef struct _MI_TRIAGE_DUMP_DATA
{
  /* 0x0000 */ unsigned __int64 BadPageCount;
  /* 0x0008 */ unsigned long BadPagesDetected;
  /* 0x000c */ long ZeroedPageSingleBitErrorsDetected;
  /* 0x0010 */ long ScrubPasses;
  /* 0x0014 */ long ScrubBadPagesFound;
  /* 0x0018 */ unsigned long PageHashErrors;
  /* 0x001c */ long Padding_857;
  /* 0x0020 */ unsigned __int64 FeatureBits;
  /* 0x0028 */ unsigned long TimeZoneId;
  /* 0x002c */ long Padding_858;
  /* 0x0030 */ union _MI_FLAGS Flags;
  /* 0x0038 */ void* VsmConnection;
} MI_TRIAGE_DUMP_DATA, *PMI_TRIAGE_DUMP_DATA; /* size: 0x0040 */

typedef struct _WORK_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY WorkQueueLinks;
  union
  {
    union
    {
      struct
      {
        /* 0x0010 */ struct _FILE_OBJECT* FileObject;
        /* 0x0018 */ void* DiskIoAttribution;
      } /* size: 0x0010 */ Read;
      struct
      {
        /* 0x0010 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
      } /* size: 0x0008 */ Write;
      struct
      {
        /* 0x0010 */ struct _KEVENT* Event;
      } /* size: 0x0008 */ Event;
      struct
      {
        /* 0x0010 */ unsigned long Reason;
      } /* size: 0x0004 */ Notification;
      struct
      {
        /* 0x0010 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
        /* 0x0018 */ struct _IO_STATUS_BLOCK* IoStatus;
        /* 0x0020 */ struct _KEVENT CallerWaitEvent;
        /* 0x0038 */ unsigned char IsLowPriWriteBehind;
        /* 0x0039 */ char __PADDING__[7];
      } /* size: 0x0030 */ LowPriWrite;
      struct
      {
        /* 0x0010 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
        /* 0x0018 */ union _LARGE_INTEGER FileOffset;
        /* 0x0020 */ struct _FILE_OBJECT* FileObject;
        /* 0x0028 */ unsigned long Length;
        /* 0x001c */ long Padding_859;
        /* 0x0030 */ struct _SINGLE_LIST_ENTRY* PrefetchList;
        /* 0x0038 */ unsigned long PrefetchPagePriority;
        /* 0x002c */ long Padding_860;
        /* 0x0040 */ struct _MDL* Mdl;
        /* 0x0048 */ struct _IO_STATUS_BLOCK* IoStatusBlock;
        /* 0x0050 */ struct _CC_ASYNC_READ_CONTEXT* CallbackContext;
        /* 0x0058 */ struct _EPROCESS* OriginatingProcess;
        /* 0x0060 */ struct _ETHREAD* IoIssuerThread;
        /* 0x0068 */ void* DiskIoAttribution;
        /* 0x0070 */ char RequestorMode;
        /* 0x0061 */ char Padding_861[3];
        /* 0x0074 */ unsigned long NestingLevel;
        /* 0x0078 */ union _LARGE_INTEGER StartTime;
      } /* size: 0x0070 */ AsyncRead;
      struct
      {
        /* 0x0010 */ struct _CC_FLUSH_PACKET* FlushPacket;
        /* 0x0018 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
        /* 0x0020 */ struct _KEVENT FlushEvent;
        /* 0x0038 */ struct _IO_STATUS_BLOCK IoStatus;
        /* 0x0048 */ unsigned char DoWriteBehindPostProcessing;
        /* 0x0049 */ char __PADDING__[7];
      } /* size: 0x0040 */ AsyncWriteBehind;
    }; /* size: 0x0070 */
  } /* size: 0x0070 */ Parameters;
  /* 0x0080 */ enum _WORKER_FUNCTION Function;
  /* 0x0084 */ long Padding_862;
  /* 0x0088 */ struct _CC_PARTITION* Partition;
  /* 0x0090 */ struct _PRIVATE_VOLUME_CACHEMAP* PrivateVolumeCacheMap;
  /* 0x0098 */ struct _CC_NUMA_NODE* NumaNode;
} WORK_QUEUE_ENTRY, *PWORK_QUEUE_ENTRY; /* size: 0x00a0 */

typedef struct _DEFERRED_WRITE
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ long Padding_863;
  /* 0x0008 */ struct _FILE_OBJECT* FileObject;
  /* 0x0010 */ unsigned long BytesToWrite;
  /* 0x0014 */ long Padding_864;
  /* 0x0018 */ struct _LIST_ENTRY DeferredWriteLinks;
  /* 0x0028 */ struct _KEVENT* Event;
  /* 0x0030 */ void* PostRoutine /* function */;
  /* 0x0038 */ void* Context1;
  /* 0x0040 */ void* Context2;
  /* 0x0048 */ struct _CC_PARTITION* Partition;
  /* 0x0050 */ struct _PRIVATE_VOLUME_CACHEMAP* PrivateVolumeCacheMap;
  /* 0x0058 */ unsigned char SoftThrottle;
  /* 0x0059 */ char Padding_865[7];
  /* 0x0060 */ union _LARGE_INTEGER TimeAdded;
} DEFERRED_WRITE, *PDEFERRED_WRITE; /* size: 0x0068 */

typedef struct _HEAP_SPAN
{
  /* 0x0000 */ char* Address;
  /* 0x0008 */ unsigned __int64 Size;
} HEAP_SPAN, *PHEAP_SPAN; /* size: 0x0010 */

typedef struct _SEGMENT_HEAP_EXTRA
{
  /* 0x0000 */ unsigned short AllocationTag;
  struct /* bitfield */
  {
    /* 0x0002 */ unsigned char InterceptorIndex : 4; /* bit position: 0 */
    /* 0x0002 */ unsigned char UserFlags : 4; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0003 */ unsigned char ExtraSizeInUnits;
  /* 0x0004 */ long Padding_866;
  /* 0x0008 */ void* Settable;
} SEGMENT_HEAP_EXTRA, *PSEGMENT_HEAP_EXTRA; /* size: 0x0010 */

typedef struct _RTLP_HP_HEAP_GLOBALS
{
  /* 0x0000 */ unsigned __int64 HeapKey;
  /* 0x0008 */ unsigned __int64 LfhKey;
  /* 0x0010 */ struct _HEAP_FAILURE_INFORMATION* FailureInfo;
  /* 0x0018 */ struct _RTLP_HEAP_COMMIT_LIMIT_DATA CommitLimitData;
  union
  {
    /* 0x0028 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0028 */ unsigned long CpuFeaturesChecked : 1; /* bit position: 0 */
      /* 0x0028 */ unsigned long ErmsSupported : 1; /* bit position: 1 */
      /* 0x0028 */ unsigned long BMI2Supported : 1; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x002c */ long Padding_867[5];
  /* 0x0040 */ unsigned __int64 RandomSeed;
  /* 0x0048 */ long __PADDING__[14];
} RTLP_HP_HEAP_GLOBALS, *PRTLP_HP_HEAP_GLOBALS; /* size: 0x0080 */

typedef struct _FAKE_HEAP_ENTRY
{
  /* 0x0000 */ unsigned __int64 Size;
  /* 0x0008 */ unsigned __int64 PreviousSize;
} FAKE_HEAP_ENTRY, *PFAKE_HEAP_ENTRY; /* size: 0x0010 */

typedef struct _HEAP_FAILURE_INFORMATION
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long StructureSize;
  /* 0x0008 */ enum _HEAP_FAILURE_TYPE FailureType;
  /* 0x000c */ long Padding_868;
  /* 0x0010 */ void* HeapAddress;
  /* 0x0018 */ void* Address;
  /* 0x0020 */ void* Param1;
  /* 0x0028 */ void* Param2;
  /* 0x0030 */ void* Param3;
  /* 0x0038 */ void* PreviousBlock;
  /* 0x0040 */ void* NextBlock;
  /* 0x0048 */ struct _FAKE_HEAP_ENTRY ExpectedDecodedEntry;
  /* 0x0058 */ void* StackTrace[32];
  /* 0x0158 */ unsigned char HeapMajorVersion;
  /* 0x0159 */ unsigned char HeapMinorVersion;
  /* 0x015a */ char Padding_869[6];
  /* 0x0160 */ struct _EXCEPTION_RECORD ExceptionRecord;
  /* 0x01f8 */ long Padding_870[2];
  /* 0x0200 */ struct _CONTEXT ContextRecord;
} HEAP_FAILURE_INFORMATION, *PHEAP_FAILURE_INFORMATION; /* size: 0x06d0 */

typedef struct _RTL_STACKDB_CONTEXT
{
  /* 0x0000 */ struct _RTL_HASH_TABLE StackSegmentTable;
  /* 0x0010 */ struct _RTL_HASH_TABLE StackEntryTable;
  /* 0x0020 */ struct _RTL_SRWLOCK StackEntryTableLock;
  /* 0x0028 */ struct _RTL_SRWLOCK SegmentTableLock;
  /* 0x0030 */ void* Allocate /* function */;
  /* 0x0038 */ void* Free /* function */;
  /* 0x0040 */ void* AllocatorContext;
} RTL_STACKDB_CONTEXT, *PRTL_STACKDB_CONTEXT; /* size: 0x0048 */

typedef struct _HEAP_LFH_LIST_ENTRY
{
  union
  {
    /* 0x0000 */ unsigned short Next;
    /* 0x0000 */ unsigned __int64 Preserve;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned long Check;
  /* 0x000c */ long __PADDING__[1];
} HEAP_LFH_LIST_ENTRY, *PHEAP_LFH_LIST_ENTRY; /* size: 0x0010 */

typedef struct _POP_IO_INFO
{
  /* 0x0000 */ struct _MDL* DumpMdl;
  /* 0x0008 */ enum _POP_IO_STATUS IoStatus;
  /* 0x000c */ long Padding_871;
  /* 0x0010 */ unsigned __int64 IoStartCount;
  /* 0x0018 */ unsigned __int64 IoBytesCompleted;
  /* 0x0020 */ unsigned __int64 IoBytesInProgress;
  /* 0x0028 */ unsigned __int64 RequestSize;
  /* 0x0030 */ union _LARGE_INTEGER IoLocation;
  /* 0x0038 */ unsigned __int64 FileOffset;
  /* 0x0040 */ void* Buffer;
  /* 0x0048 */ unsigned char AsyncCapable;
  /* 0x0049 */ char Padding_872[7];
  /* 0x0050 */ unsigned __int64 BytesToRead;
  /* 0x0058 */ unsigned long Pages;
  /* 0x005c */ long Padding_873;
  /* 0x0060 */ unsigned __int64 HighestChecksumIndex;
  /* 0x0068 */ unsigned short PreviousChecksum;
  /* 0x006a */ char __PADDING__[6];
} POP_IO_INFO, *PPOP_IO_INFO; /* size: 0x0070 */

typedef struct _RTLP_HP_QUEUE_LOCK_HANDLE
{
  /* 0x0000 */ unsigned __int64 Reserved1;
  /* 0x0008 */ unsigned __int64 LockPtr;
  /* 0x0010 */ unsigned __int64 HandleData;
} RTLP_HP_QUEUE_LOCK_HANDLE, *PRTLP_HP_QUEUE_LOCK_HANDLE; /* size: 0x0018 */

typedef struct _HEAP_VS_SUBSEGMENT
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned __int64 CommitBitmap;
  /* 0x0018 */ unsigned __int64 CommitLock;
  /* 0x0020 */ unsigned short Size;
  struct /* bitfield */
  {
    /* 0x0022 */ unsigned short Signature : 15; /* bit position: 0 */
    /* 0x0022 */ unsigned short FullCommit : 1; /* bit position: 15 */
  }; /* bitfield */
  /* 0x0024 */ long __PADDING__[1];
} HEAP_VS_SUBSEGMENT, *PHEAP_VS_SUBSEGMENT; /* size: 0x0028 */

typedef union _HEAP_SEGMENT_MGR_COMMIT_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short CommittedPageCount : 11; /* bit position: 0 */
      /* 0x0000 */ unsigned short Spare : 3; /* bit position: 11 */
      /* 0x0000 */ unsigned short LargePageOperationInProgress : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned short LargePageCommit : 1; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0000 */ volatile unsigned short EntireUShortV;
    /* 0x0000 */ unsigned short EntireUShort;
  }; /* size: 0x0002 */
} HEAP_SEGMENT_MGR_COMMIT_STATE, *PHEAP_SEGMENT_MGR_COMMIT_STATE; /* size: 0x0002 */

typedef struct _EXP_SECURE_POOL_CONTEXT
{
  /* 0x0000 */ struct _EXP_POOL_CONTEXT_HEADER Header;
  /* 0x0008 */ void* Handle;
} EXP_SECURE_POOL_CONTEXT, *PEXP_SECURE_POOL_CONTEXT; /* size: 0x0010 */

typedef struct _ALPC_COMPLETION_LIST_STATE
{
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned __int64 Head : 24; /* bit position: 0 */
          /* 0x0000 */ unsigned __int64 Tail : 24; /* bit position: 24 */
          /* 0x0000 */ unsigned __int64 ActiveThreadCount : 16; /* bit position: 48 */
        }; /* bitfield */
      } /* size: 0x0008 */ s1;
      /* 0x0000 */ __int64 Value;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
} ALPC_COMPLETION_LIST_STATE, *PALPC_COMPLETION_LIST_STATE; /* size: 0x0008 */

typedef struct _LDR_SERVICE_TAG_RECORD
{
  /* 0x0000 */ struct _LDR_SERVICE_TAG_RECORD* Next;
  /* 0x0008 */ unsigned long ServiceTag;
  /* 0x000c */ long __PADDING__[1];
} LDR_SERVICE_TAG_RECORD, *PLDR_SERVICE_TAG_RECORD; /* size: 0x0010 */

typedef struct _PORT_MESSAGE
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ short DataLength;
        /* 0x0002 */ short TotalLength;
      } /* size: 0x0004 */ s1;
      /* 0x0000 */ unsigned long Length;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ short Type;
        /* 0x0006 */ short DataInfoOffset;
      } /* size: 0x0004 */ s2;
      /* 0x0004 */ unsigned long ZeroInit;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
  union
  {
    /* 0x0008 */ struct _CLIENT_ID ClientId;
    /* 0x0008 */ double DoNotUseThisField;
  }; /* size: 0x0010 */
  /* 0x0018 */ unsigned long MessageId;
  /* 0x001c */ long Padding_874;
  union
  {
    /* 0x0020 */ unsigned __int64 ClientViewSize;
    struct
    {
      /* 0x0020 */ unsigned long CallbackId;
      /* 0x0024 */ long __PADDING__[1];
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} PORT_MESSAGE, *PPORT_MESSAGE; /* size: 0x0028 */

typedef struct _ALPC_MESSAGE_ATTRIBUTES
{
  /* 0x0000 */ unsigned long AllocatedAttributes;
  /* 0x0004 */ unsigned long ValidAttributes;
} ALPC_MESSAGE_ATTRIBUTES, *PALPC_MESSAGE_ATTRIBUTES; /* size: 0x0008 */

typedef struct _BLOB_COUNTERS
{
  /* 0x0000 */ unsigned long CreatedObjects;
  /* 0x0004 */ unsigned long DeletedObjects;
} BLOB_COUNTERS, *PBLOB_COUNTERS; /* size: 0x0008 */

typedef struct _THERMAL_INFORMATION
{
  /* 0x0000 */ unsigned long ThermalStamp;
  /* 0x0004 */ unsigned long ThermalConstant1;
  /* 0x0008 */ unsigned long ThermalConstant2;
  /* 0x000c */ long Padding_875;
  /* 0x0010 */ unsigned __int64 Processors;
  /* 0x0018 */ unsigned long SamplingPeriod;
  /* 0x001c */ unsigned long CurrentTemperature;
  /* 0x0020 */ unsigned long PassiveTripPoint;
  /* 0x0024 */ unsigned long CriticalTripPoint;
  /* 0x0028 */ unsigned char ActiveTripPointCount;
  /* 0x0029 */ char Padding_876[3];
  /* 0x002c */ unsigned long ActiveTripPoint[10];
  /* 0x0054 */ long __PADDING__[1];
} THERMAL_INFORMATION, *PTHERMAL_INFORMATION; /* size: 0x0058 */

typedef struct _KALPC_SECTION
{
  /* 0x0000 */ void* SectionObject;
  /* 0x0008 */ unsigned __int64 Size;
  /* 0x0010 */ struct _ALPC_HANDLE_TABLE* HandleTable;
  /* 0x0018 */ void* SectionHandle;
  /* 0x0020 */ struct _EPROCESS* OwnerProcess;
  /* 0x0028 */ struct _ALPC_PORT* OwnerPort;
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0030 */ unsigned long Internal : 1; /* bit position: 0 */
        /* 0x0030 */ unsigned long Secure : 1; /* bit position: 1 */
      }; /* bitfield */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x0034 */ unsigned long NumberOfRegions;
  /* 0x0038 */ struct _LIST_ENTRY RegionListHead;
} KALPC_SECTION, *PKALPC_SECTION; /* size: 0x0048 */

typedef struct _ALPC_HANDLE_TABLE
{
  /* 0x0000 */ struct _ALPC_HANDLE_ENTRY* Handles;
  /* 0x0008 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0010 */ unsigned __int64 TotalHandles;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ long __PADDING__[1];
} ALPC_HANDLE_TABLE, *PALPC_HANDLE_TABLE; /* size: 0x0020 */

typedef struct _OBJECT_HEADER_PADDING_INFO
{
  /* 0x0000 */ unsigned long PaddingAmount;
} OBJECT_HEADER_PADDING_INFO, *POBJECT_HEADER_PADDING_INFO; /* size: 0x0004 */

typedef struct _ALPC_COMMUNICATION_INFO
{
  /* 0x0000 */ struct _ALPC_PORT* ConnectionPort;
  /* 0x0008 */ struct _ALPC_PORT* ServerCommunicationPort;
  /* 0x0010 */ struct _ALPC_PORT* ClientCommunicationPort;
  /* 0x0018 */ struct _LIST_ENTRY CommunicationList;
  /* 0x0028 */ struct _ALPC_HANDLE_TABLE HandleTable;
  /* 0x0048 */ struct _KALPC_MESSAGE* CloseMessage;
} ALPC_COMMUNICATION_INFO, *PALPC_COMMUNICATION_INFO; /* size: 0x0050 */

typedef struct _KALPC_MESSAGE
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0010 */ struct _ALPC_PORT* PortQueue;
  /* 0x0018 */ struct _ALPC_PORT* OwnerPort;
  /* 0x0020 */ struct _ETHREAD* WaitingThread;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0028 */ unsigned long QueueType : 3; /* bit position: 0 */
          /* 0x0028 */ unsigned long QueuePortType : 4; /* bit position: 3 */
          /* 0x0028 */ unsigned long Canceled : 1; /* bit position: 7 */
          /* 0x0028 */ unsigned long Ready : 1; /* bit position: 8 */
          /* 0x0028 */ unsigned long ReleaseMessage : 1; /* bit position: 9 */
          /* 0x0028 */ unsigned long SharedQuota : 1; /* bit position: 10 */
          /* 0x0028 */ unsigned long ReplyWaitReply : 1; /* bit position: 11 */
          /* 0x0028 */ unsigned long OwnerPortReference : 1; /* bit position: 12 */
          /* 0x0028 */ unsigned long ReceiverReference : 1; /* bit position: 13 */
          /* 0x0028 */ unsigned long ViewAttributeRetrieved : 1; /* bit position: 14 */
          /* 0x0028 */ unsigned long ViewAttributeDeleteOnRelease : 1; /* bit position: 15 */
          /* 0x0028 */ unsigned long InDispatch : 1; /* bit position: 16 */
          /* 0x0028 */ unsigned long InCanceledQueue : 1; /* bit position: 17 */
        }; /* bitfield */
      } /* size: 0x0004 */ s1;
      /* 0x0028 */ unsigned long State;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x002c */ long SequenceNo;
  union
  {
    /* 0x0030 */ struct _EPROCESS* QuotaProcess;
    /* 0x0030 */ void* QuotaBlock;
  }; /* size: 0x0008 */
  /* 0x0038 */ struct _ALPC_PORT* CancelSequencePort;
  /* 0x0040 */ struct _ALPC_PORT* CancelQueuePort;
  /* 0x0048 */ long CancelSequenceNo;
  /* 0x004c */ long Padding_877;
  /* 0x0050 */ struct _LIST_ENTRY CancelListEntry;
  /* 0x0060 */ struct _KALPC_RESERVE* Reserve;
  /* 0x0068 */ struct _KALPC_MESSAGE_ATTRIBUTES MessageAttributes;
  /* 0x00b0 */ void* DataUserVa;
  /* 0x00b8 */ struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;
  /* 0x00c0 */ struct _ALPC_PORT* ConnectionPort;
  /* 0x00c8 */ struct _ETHREAD* ServerThread;
  /* 0x00d0 */ void* WakeReference;
  /* 0x00d8 */ void* WakeReference2;
  /* 0x00e0 */ void* ExtensionBuffer;
  /* 0x00e8 */ unsigned __int64 ExtensionBufferSize;
  /* 0x00f0 */ struct _PORT_MESSAGE PortMessage;
} KALPC_MESSAGE, *PKALPC_MESSAGE; /* size: 0x0118 */

typedef struct _KALPC_REGION
{
  /* 0x0000 */ struct _LIST_ENTRY RegionListEntry;
  /* 0x0010 */ struct _KALPC_SECTION* Section;
  /* 0x0018 */ unsigned __int64 Offset;
  /* 0x0020 */ unsigned __int64 Size;
  /* 0x0028 */ unsigned __int64 ViewSize;
  union
  {
    struct
    {
      /* 0x0030 */ unsigned long Secure : 1; /* bit position: 0 */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x0034 */ unsigned long NumberOfViews;
  /* 0x0038 */ struct _LIST_ENTRY ViewListHead;
  /* 0x0048 */ struct _KALPC_VIEW* ReadOnlyView;
  /* 0x0050 */ struct _KALPC_VIEW* ReadWriteView;
} KALPC_REGION, *PKALPC_REGION; /* size: 0x0058 */

typedef struct _OB_DUPLICATE_OBJECT_STATE
{
  /* 0x0000 */ struct _EPROCESS* SourceProcess;
  /* 0x0008 */ void* SourceHandle;
  /* 0x0010 */ void* Object;
  /* 0x0018 */ unsigned long TargetAccess;
  /* 0x001c */ struct _HANDLE_TABLE_ENTRY_INFO ObjectInfo;
  /* 0x0024 */ unsigned long HandleAttributes;
} OB_DUPLICATE_OBJECT_STATE, *POB_DUPLICATE_OBJECT_STATE; /* size: 0x0028 */

typedef struct _KALPC_HANDLE_DATA
{
  /* 0x0000 */ unsigned long ObjectType;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _OB_DUPLICATE_OBJECT_STATE DuplicateContext;
} KALPC_HANDLE_DATA, *PKALPC_HANDLE_DATA; /* size: 0x0030 */

typedef struct _ALPC_COMPLETION_LIST
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0010 */ struct _EPROCESS* OwnerProcess;
  /* 0x0018 */ struct _EX_PUSH_LOCK CompletionListLock;
  /* 0x0020 */ struct _MDL* Mdl;
  /* 0x0028 */ void* UserVa;
  /* 0x0030 */ void* UserLimit;
  /* 0x0038 */ void* DataUserVa;
  /* 0x0040 */ void* SystemVa;
  /* 0x0048 */ unsigned __int64 TotalSize;
  /* 0x0050 */ struct _ALPC_COMPLETION_LIST_HEADER* Header;
  /* 0x0058 */ void* List;
  /* 0x0060 */ unsigned __int64 ListSize;
  /* 0x0068 */ void* Bitmap;
  /* 0x0070 */ unsigned __int64 BitmapSize;
  /* 0x0078 */ void* Data;
  /* 0x0080 */ unsigned __int64 DataSize;
  /* 0x0088 */ unsigned long BitmapLimit;
  /* 0x008c */ unsigned long BitmapNextHint;
  /* 0x0090 */ unsigned long ConcurrencyCount;
  /* 0x0094 */ unsigned long AttributeFlags;
  /* 0x0098 */ unsigned long AttributeSize;
  /* 0x009c */ long __PADDING__[1];
} ALPC_COMPLETION_LIST, *PALPC_COMPLETION_LIST; /* size: 0x00a0 */

typedef struct _ALPC_COMPLETION_LIST_HEADER
{
  /* 0x0000 */ unsigned __int64 StartMagic;
  /* 0x0008 */ unsigned long TotalSize;
  /* 0x000c */ unsigned long ListOffset;
  /* 0x0010 */ unsigned long ListSize;
  /* 0x0014 */ unsigned long BitmapOffset;
  /* 0x0018 */ unsigned long BitmapSize;
  /* 0x001c */ unsigned long DataOffset;
  /* 0x0020 */ unsigned long DataSize;
  /* 0x0024 */ unsigned long AttributeFlags;
  /* 0x0028 */ unsigned long AttributeSize;
  /* 0x002c */ long Padding_878[5];
  /* 0x0040 */ volatile struct _ALPC_COMPLETION_LIST_STATE State;
  /* 0x0048 */ volatile unsigned long LastMessageId;
  /* 0x004c */ volatile unsigned long LastCallbackId;
  /* 0x0050 */ long Padding_879[12];
  /* 0x0080 */ volatile unsigned long PostCount;
  /* 0x0084 */ long Padding_880[15];
  /* 0x00c0 */ volatile unsigned long ReturnCount;
  /* 0x00c4 */ long Padding_881[15];
  /* 0x0100 */ volatile unsigned long LogSequenceNumber;
  /* 0x0104 */ long Padding_882[15];
  /* 0x0140 */ struct _RTL_SRWLOCK UserLock;
  /* 0x0148 */ unsigned __int64 EndMagic;
  /* 0x0150 */ long __PADDING__[12];
} ALPC_COMPLETION_LIST_HEADER, *PALPC_COMPLETION_LIST_HEADER; /* size: 0x0180 */

typedef struct _OBJECT_ATTRIBUTES
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_883;
  /* 0x0008 */ void* RootDirectory;
  /* 0x0010 */ struct _UNICODE_STRING* ObjectName;
  /* 0x0018 */ unsigned long Attributes;
  /* 0x001c */ long Padding_884;
  /* 0x0020 */ void* SecurityDescriptor;
  /* 0x0028 */ void* SecurityQualityOfService;
} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES; /* size: 0x0030 */

typedef struct _OBJECT_TYPE
{
  /* 0x0000 */ struct _LIST_ENTRY TypeList;
  /* 0x0010 */ struct _UNICODE_STRING Name;
  /* 0x0020 */ void* DefaultObject;
  /* 0x0028 */ unsigned char Index;
  /* 0x0029 */ char Padding_885[3];
  /* 0x002c */ unsigned long TotalNumberOfObjects;
  /* 0x0030 */ unsigned long TotalNumberOfHandles;
  /* 0x0034 */ unsigned long HighWaterNumberOfObjects;
  /* 0x0038 */ unsigned long HighWaterNumberOfHandles;
  /* 0x003c */ long Padding_886;
  /* 0x0040 */ struct _OBJECT_TYPE_INITIALIZER TypeInfo;
  /* 0x00b8 */ struct _EX_PUSH_LOCK TypeLock;
  /* 0x00c0 */ unsigned long Key;
  /* 0x00c4 */ long Padding_887;
  /* 0x00c8 */ struct _LIST_ENTRY CallbackList;
  /* 0x00d8 */ unsigned long SeMandatoryLabelMask;
  /* 0x00dc */ unsigned long SeTrustConstraintMask;
} OBJECT_TYPE, *POBJECT_TYPE; /* size: 0x00e0 */

typedef struct _OBJECT_DUMP_CONTROL
{
  /* 0x0000 */ void* Stream;
  /* 0x0008 */ unsigned long Detail;
  /* 0x000c */ long __PADDING__[1];
} OBJECT_DUMP_CONTROL, *POBJECT_DUMP_CONTROL; /* size: 0x0010 */

typedef struct _OB_EXTENDED_PARSE_PARAMETERS
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ char Padding_888[2];
  /* 0x0004 */ unsigned long RestrictedAccessMask;
  /* 0x0008 */ struct _EJOB* Silo;
} OB_EXTENDED_PARSE_PARAMETERS, *POB_EXTENDED_PARSE_PARAMETERS; /* size: 0x0010 */

typedef struct _PORT_MESSAGE32
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ short DataLength;
        /* 0x0002 */ short TotalLength;
      } /* size: 0x0004 */ s1;
      /* 0x0000 */ unsigned long Length;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ short Type;
        /* 0x0006 */ short DataInfoOffset;
      } /* size: 0x0004 */ s2;
      /* 0x0004 */ unsigned long ZeroInit;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
  union
  {
    /* 0x0008 */ struct _CLIENT_ID32 ClientId;
    /* 0x0008 */ double DoNotUseThisField;
  }; /* size: 0x0008 */
  /* 0x0010 */ unsigned long MessageId;
  union
  {
    /* 0x0014 */ unsigned long ClientViewSize;
    /* 0x0014 */ unsigned long CallbackId;
  }; /* size: 0x0004 */
} PORT_MESSAGE32, *PPORT_MESSAGE32; /* size: 0x0018 */

typedef struct _REMOTE_PORT_VIEW
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_889;
  /* 0x0008 */ unsigned __int64 ViewSize;
  /* 0x0010 */ void* ViewBase;
} REMOTE_PORT_VIEW, *PREMOTE_PORT_VIEW; /* size: 0x0018 */

typedef struct _IO_ADAPTER_CRYPTO_PARAMETERS
{
  /* 0x0000 */ unsigned __int64 Tweak;
  /* 0x0008 */ struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR* KeyDescriptor;
} IO_ADAPTER_CRYPTO_PARAMETERS, *PIO_ADAPTER_CRYPTO_PARAMETERS; /* size: 0x0010 */

typedef struct _COPY_INFORMATION
{
  /* 0x0000 */ struct _FILE_OBJECT* SourceFileObject;
  /* 0x0008 */ __int64 SourceFileOffset;
} COPY_INFORMATION, *PCOPY_INFORMATION; /* size: 0x0010 */

typedef struct _IOP_IRP_EXTENSION
{
  union
  {
    /* 0x0000 */ unsigned short ExtensionFlags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short Allocated : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short PropagateId : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short SpareBits : 14; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0002 */ unsigned short TypesAllocated;
  /* 0x0004 */ unsigned char GenericExtension[4];
  /* 0x0008 */ void* VerifierContext;
  /* 0x0010 */ unsigned __int64 DiskIoAttributionHandle;
  /* 0x0018 */ struct _GUID ActivityId;
  union
  {
    /* 0x0028 */ union _LARGE_INTEGER Timestamp;
    /* 0x0028 */ unsigned long ZeroingOffset;
    struct
    {
      /* 0x0028 */ struct _IO_IRP_EXT_TRACK_OFFSET_HEADER* FsTrackOffsetBlob;
      /* 0x0030 */ __int64 FsTrackedOffset;
    }; /* size: 0x0010 */
    /* 0x0028 */ struct _IO_ADAPTER_CRYPTO_PARAMETERS AdapterCryptoParameters;
  }; /* size: 0x0010 */
  union
  {
    union
    {
      /* 0x0038 */ unsigned __int64 Value;
      struct /* bitfield */
      {
        /* 0x0038 */ unsigned __int64 UserFlags : 32; /* bit position: 0 */
        /* 0x0038 */ unsigned __int64 SystemFlags : 16; /* bit position: 32 */
        /* 0x0038 */ unsigned __int64 UserFlagsId : 16; /* bit position: 48 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ DriverFlags;
  /* 0x0040 */ struct _COPY_INFORMATION CopyInformation;
} IOP_IRP_EXTENSION, *PIOP_IRP_EXTENSION; /* size: 0x0050 */

typedef struct _ARBITER_LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned long AlternativeCount;
  /* 0x0014 */ long Padding_890;
  /* 0x0018 */ struct _IO_RESOURCE_DESCRIPTOR* Alternatives;
  /* 0x0020 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0028 */ enum _ARBITER_REQUEST_SOURCE RequestSource;
  /* 0x002c */ unsigned long Flags;
  /* 0x0030 */ __int64 WorkSpace;
  /* 0x0038 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x003c */ unsigned long SlotNumber;
  /* 0x0040 */ unsigned long BusNumber;
  /* 0x0044 */ long Padding_891;
  /* 0x0048 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* Assignment;
  /* 0x0050 */ struct _IO_RESOURCE_DESCRIPTOR* SelectedAlternative;
  /* 0x0058 */ enum _ARBITER_RESULT Result;
  /* 0x005c */ long __PADDING__[1];
} ARBITER_LIST_ENTRY, *PARBITER_LIST_ENTRY; /* size: 0x0060 */

typedef struct _OBJECT_CREATE_INFORMATION
{
  /* 0x0000 */ unsigned long Attributes;
  /* 0x0004 */ long Padding_892;
  /* 0x0008 */ void* RootDirectory;
  /* 0x0010 */ char ProbeMode;
  /* 0x0011 */ char Padding_893[3];
  /* 0x0014 */ unsigned long PagedPoolCharge;
  /* 0x0018 */ unsigned long NonPagedPoolCharge;
  /* 0x001c */ unsigned long SecurityDescriptorCharge;
  /* 0x0020 */ void* SecurityDescriptor;
  /* 0x0028 */ struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;
  /* 0x0030 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService;
  /* 0x003c */ long __PADDING__[1];
} OBJECT_CREATE_INFORMATION, *POBJECT_CREATE_INFORMATION; /* size: 0x0040 */

typedef struct _PNP_DEVICE_ACTION_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0018 */ enum _PNP_DEVICE_ACTION_REQUEST RequestType;
  /* 0x001c */ unsigned char ReorderingBarrier;
  /* 0x001d */ char Padding_894[3];
  /* 0x0020 */ struct _PNP_DEVICE_ACTION_REQUEST_ARGUMENT RequestArgument;
  /* 0x0030 */ struct _KEVENT* CompletionEvent;
  /* 0x0038 */ long* CompletionStatus;
  /* 0x0040 */ struct _GUID ActivityId;
  /* 0x0050 */ long RefCount;
  /* 0x0054 */ unsigned char Dequeued;
  /* 0x0055 */ char Padding_895[3];
  /* 0x0058 */ struct _EX_PUSH_LOCK CancelLock;
  /* 0x0060 */ unsigned char CancelRequested;
  /* 0x0061 */ char __PADDING__[7];
} PNP_DEVICE_ACTION_ENTRY, *PPNP_DEVICE_ACTION_ENTRY; /* size: 0x0068 */

typedef struct _SEP_LOWBOX_NUMBER_ENTRY
{
  /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  /* 0x0018 */ __int64 ReferenceCount;
  /* 0x0020 */ void* PackageSid;
  /* 0x0028 */ unsigned long LowboxNumber;
  /* 0x002c */ long Padding_896;
  /* 0x0030 */ void* AtomTable;
} SEP_LOWBOX_NUMBER_ENTRY, *PSEP_LOWBOX_NUMBER_ENTRY; /* size: 0x0038 */

typedef struct _OBJECT_HANDLE_COUNT_DATABASE
{
  /* 0x0000 */ unsigned long CountEntries;
  /* 0x0004 */ long Padding_897;
  /* 0x0008 */ struct _OBJECT_HANDLE_COUNT_ENTRY HandleCountEntries[1];
} OBJECT_HANDLE_COUNT_DATABASE, *POBJECT_HANDLE_COUNT_DATABASE; /* size: 0x0018 */

typedef struct _EX_WORK_QUEUE
{
  /* 0x0000 */ struct _KPRIQUEUE WorkPriQueue;
  /* 0x02b0 */ struct _EX_PARTITION* Partition;
  /* 0x02b8 */ struct _ENODE* Node;
  /* 0x02c0 */ volatile unsigned long WorkItemsProcessed;
  /* 0x02c4 */ unsigned long WorkItemsProcessedLastPass;
  /* 0x02c8 */ volatile long ThreadCount;
  struct /* bitfield */
  {
    /* 0x02cc */ long MinThreads : 31; /* bit position: 0 */
    /* 0x02cc */ volatile unsigned long TryFailed : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x02d0 */ long MaxThreads;
  /* 0x02d4 */ enum _EXQUEUEINDEX QueueIndex;
  /* 0x02d8 */ struct _KEVENT* AllThreadsExitedEvent;
} EX_WORK_QUEUE, *PEX_WORK_QUEUE; /* size: 0x02e0 */

typedef struct _OBJECT_HEADER_NAME_INFO
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY* Directory;
  /* 0x0008 */ struct _UNICODE_STRING Name;
  /* 0x0018 */ long ReferenceCount;
  /* 0x001c */ unsigned long Reserved;
} OBJECT_HEADER_NAME_INFO, *POBJECT_HEADER_NAME_INFO; /* size: 0x0020 */

typedef struct _OBJECT_HEADER_AUDIT_INFO
{
  /* 0x0000 */ void* SecurityDescriptor;
  /* 0x0008 */ unsigned __int64 Reserved;
} OBJECT_HEADER_AUDIT_INFO, *POBJECT_HEADER_AUDIT_INFO; /* size: 0x0010 */

typedef struct _OBJECT_FOOTER
{
  /* 0x0000 */ struct _HANDLE_REVOCATION_INFO HandleRevocationInfo;
  /* 0x0020 */ struct _OB_EXTENDED_USER_INFO ExtendedUserInfo;
} OBJECT_FOOTER, *POBJECT_FOOTER; /* size: 0x0030 */

typedef struct _OBP_LOOKUP_CONTEXT
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY* Directory;
  /* 0x0008 */ struct _OBJECT_DIRECTORY_ENTRY** EntryLink;
  /* 0x0010 */ unsigned long HashValue;
  /* 0x0014 */ unsigned char HashIndex;
  /* 0x0015 */ unsigned char LockedExclusive;
  /* 0x0016 */ unsigned char DirectoryReferenced;
  /* 0x0017 */ unsigned char Unused;
} OBP_LOOKUP_CONTEXT, *POBP_LOOKUP_CONTEXT; /* size: 0x0018 */

typedef struct _WHEAP_WORK_QUEUE
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0010 */ unsigned __int64 ListLock;
  /* 0x0018 */ volatile long ItemCount;
  /* 0x001c */ long Padding_898;
  /* 0x0020 */ struct _KDPC Dpc;
  /* 0x0060 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0080 */ void* WorkRoutine /* function */;
} WHEAP_WORK_QUEUE, *PWHEAP_WORK_QUEUE; /* size: 0x0088 */

typedef struct _WHEAP_ERROR_SOURCE
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ unsigned long FailedAllocations;
  /* 0x0014 */ unsigned long PlatformErrorSourceId;
  /* 0x0018 */ long ErrorCount;
  /* 0x001c */ unsigned long RecordCount;
  /* 0x0020 */ unsigned long RecordLength;
  /* 0x0024 */ unsigned long PoolTag;
  /* 0x0028 */ enum _WHEA_ERROR_SOURCE_TYPE Type;
  /* 0x002c */ long Padding_899;
  /* 0x0030 */ struct _WHEAP_ERROR_RECORD_WRAPPER* Records;
  /* 0x0038 */ void* Context;
  /* 0x0040 */ unsigned long SectionCount;
  /* 0x0044 */ unsigned long SectionLength;
  /* 0x0048 */ union _LARGE_INTEGER TickCountAtLastError;
  /* 0x0050 */ unsigned long AccumulatedErrors;
  /* 0x0054 */ unsigned long TotalErrors;
  /* 0x0058 */ unsigned char Deferred;
  /* 0x0059 */ char Padding_900[3];
  /* 0x005c */ volatile long Busy;
  /* 0x0060 */ struct _WHEA_ERROR_SOURCE_DESCRIPTOR Descriptor;
  /* 0x042c */ long __PADDING__[1];
} WHEAP_ERROR_SOURCE, *PWHEAP_ERROR_SOURCE; /* size: 0x0430 */

typedef struct _WNF_DISPATCHER
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ long Padding_901;
  /* 0x0008 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0028 */ long State;
  /* 0x002c */ long __PADDING__[1];
} WNF_DISPATCHER, *PWNF_DISPATCHER; /* size: 0x0030 */

typedef struct _POP_IRP_WORKER_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _ETHREAD* Thread;
  /* 0x0018 */ struct _IRP* Irp;
  /* 0x0020 */ struct _DEVICE_OBJECT* Device;
  /* 0x0028 */ unsigned char Static;
  /* 0x0029 */ char __PADDING__[7];
} POP_IRP_WORKER_ENTRY, *PPOP_IRP_WORKER_ENTRY; /* size: 0x0030 */

typedef struct _POOL_LIMIT_TABLE_ENTRY
{
  union
  {
    /* 0x0000 */ struct _RTL_HASH_ENTRY HashEntry;
    struct
    {
      /* 0x0000 */ unsigned __int64 Reserved;
      /* 0x0008 */ struct _SINGLE_LIST_ENTRY SListEntry;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0010 */ struct _POOL_LIMIT_INFO LimitInfo[2];
  /* 0x0040 */ struct _WNF_STATE_NAME NotificationObject;
  /* 0x0048 */ long Padding_902[2];
  /* 0x0050 */ struct _SLIST_ENTRY NotificationEntry;
  /* 0x0060 */ unsigned long Scheduled;
  /* 0x0064 */ long __PADDING__[3];
} POOL_LIMIT_TABLE_ENTRY, *PPOOL_LIMIT_TABLE_ENTRY; /* size: 0x0070 */

typedef struct _POP_HIBER_CONTEXT
{
  /* 0x0000 */ unsigned char Reset;
  /* 0x0001 */ unsigned char HiberFlags;
  /* 0x0002 */ unsigned char WroteHiberFile;
  /* 0x0003 */ unsigned char KernelPhaseVerificationActive;
  /* 0x0004 */ volatile unsigned char InitializationFinished;
  /* 0x0005 */ char Padding_903[3];
  /* 0x0008 */ volatile long NextTableLockHeld;
  /* 0x000c */ volatile long BootPhaseFinishedBarrier;
  /* 0x0010 */ volatile long KernelResumeFinishedBarrier;
  /* 0x0014 */ volatile long HvCaptureReadyBarrier;
  /* 0x0018 */ volatile long HvCaptureCompletedBarrier;
  /* 0x001c */ unsigned char MapFrozen;
  /* 0x001d */ char Padding_904[3];
  /* 0x0020 */ struct _RTL_BITMAP BootRestoredPagesMap;
  union
  {
    /* 0x0030 */ struct _RTL_BITMAP DiscardMap;
    /* 0x0030 */ struct _RTL_BITMAP KernelPhaseMap;
  }; /* size: 0x0010 */
  /* 0x0040 */ struct _RTL_BITMAP BootPhaseMap;
  /* 0x0050 */ struct _LIST_ENTRY ClonedRanges;
  /* 0x0060 */ unsigned long ClonedRangeCount;
  /* 0x0064 */ long Padding_905;
  /* 0x0068 */ unsigned __int64 ClonedPageCount;
  /* 0x0070 */ struct _RTL_BITMAP* CurrentMap;
  /* 0x0078 */ struct _LIST_ENTRY* NextCloneRange;
  /* 0x0080 */ unsigned __int64 NextPreserve;
  /* 0x0088 */ struct _MDL* LoaderMdl;
  /* 0x0090 */ struct _MDL* AllocatedMdl;
  /* 0x0098 */ unsigned __int64 PagesOut;
  /* 0x00a0 */ void* IoPages;
  /* 0x00a8 */ unsigned long IoPagesCount;
  /* 0x00ac */ long Padding_906;
  /* 0x00b0 */ void* CurrentMcb;
  /* 0x00b8 */ struct _DUMP_STACK_CONTEXT* DumpStack;
  /* 0x00c0 */ struct _KPROCESSOR_STATE* WakeState;
  /* 0x00c8 */ unsigned long IoProgress;
  /* 0x00cc */ long Status;
  /* 0x00d0 */ unsigned long GraphicsProc;
  /* 0x00d4 */ long Padding_907;
  /* 0x00d8 */ struct PO_MEMORY_IMAGE* MemoryImage;
  /* 0x00e0 */ unsigned long* PerformanceStats;
  /* 0x00e8 */ struct _MDL* BootLoaderLogMdl;
  /* 0x00f0 */ struct _MDL* FirmwareRuntimeInformationMdl;
  /* 0x00f8 */ void* FirmwareRuntimeInformationVa;
  /* 0x0100 */ unsigned __int64 IumFirmwareRuntimeInformationPageCount;
  /* 0x0108 */ unsigned __int64 IumFirmwareRuntimeInformationPfnBase;
  /* 0x0110 */ void* ResumeContext;
  /* 0x0118 */ unsigned long ResumeContextPages;
  /* 0x011c */ unsigned long SecurePages;
  /* 0x0120 */ unsigned long ProcessorCount;
  /* 0x0124 */ long Padding_908;
  /* 0x0128 */ struct _POP_PER_PROCESSOR_CONTEXT* ProcessorContext;
  /* 0x0130 */ char* ProdConsBuffer;
  /* 0x0138 */ unsigned long ProdConsSize;
  /* 0x013c */ unsigned long MaxDataPages;
  /* 0x0140 */ void* ExtraBuffer;
  /* 0x0148 */ unsigned __int64 ExtraBufferSize;
  /* 0x0150 */ void* ExtraMapVa;
  /* 0x0158 */ unsigned __int64 BitlockerKeyPFN;
  /* 0x0160 */ struct _POP_IO_INFO IoInfo;
  /* 0x01d0 */ unsigned short* IoChecksums;
  /* 0x01d8 */ unsigned __int64 IoChecksumsSize;
  /* 0x01e0 */ unsigned long HardwareConfigurationSignature;
  /* 0x01e4 */ unsigned char IumEnabled;
  /* 0x01e5 */ unsigned char SecureBoot;
  /* 0x01e6 */ unsigned char DisableCompressionCallbacks;
  /* 0x01e7 */ unsigned char LZ4BootPhaseEnabled;
  /* 0x01e8 */ unsigned char LZ4KernelPhaseEnabled;
  /* 0x01e9 */ unsigned char Feature_Servicing_PopResetOnHiber_IsEnabled;
  /* 0x01ea */ char __PADDING__[6];
} POP_HIBER_CONTEXT, *PPOP_HIBER_CONTEXT; /* size: 0x01f0 */

typedef struct _INTERRUPT_TRACKING_ROOT
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _LIST_ENTRY TrackingEntryList;
  /* 0x0020 */ unsigned long Gsiv;
  /* 0x0024 */ long Padding_909;
  /* 0x0028 */ struct _INTERRUPT_VECTOR_DATA VectorData;
  /* 0x0080 */ enum _INTERRUPT_STEERING_MODE SteeringMode;
  /* 0x0084 */ unsigned char EnableSteering;
  /* 0x0085 */ char Padding_910[3];
  /* 0x0088 */ struct _GROUP_AFFINITY CpuSetMask;
  /* 0x0098 */ unsigned __int64 AffinityEpoch;
  /* 0x00a0 */ struct _GROUP_AFFINITY CurrentTarget;
  /* 0x00b0 */ struct _GROUP_AFFINITY NextTarget;
  /* 0x00c0 */ unsigned __int64 TimeDelta;
  /* 0x00c8 */ void* RedirectHandle;
  /* 0x00d0 */ struct _LIST_ENTRY SteerQueueLink;
} INTERRUPT_TRACKING_ROOT, *PINTERRUPT_TRACKING_ROOT; /* size: 0x00e0 */

typedef struct _TRIAGE_9F_PNP
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ long Padding_911;
  /* 0x0008 */ struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE* CompletionQueue;
  /* 0x0010 */ struct _TRIAGE_EX_WORK_QUEUE* DelayedWorkQueue;
  /* 0x0018 */ struct _TRIAGE_EX_WORK_QUEUE* DelayedIoWorkQueue;
  /* 0x0020 */ struct _TRIAGE_DEVICE_NODE* DeviceNode;
} TRIAGE_9F_PNP, *PTRIAGE_9F_PNP; /* size: 0x0028 */

typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE
{
  /* 0x0000 */ struct _LIST_ENTRY DispatchedList;
} TRIAGE_PNP_DEVICE_COMPLETION_QUEUE, *PTRIAGE_PNP_DEVICE_COMPLETION_QUEUE; /* size: 0x0010 */

typedef struct _TRIAGE_EX_WORK_QUEUE
{
  /* 0x0000 */ struct _KPRIQUEUE WorkPriQueue;
} TRIAGE_EX_WORK_QUEUE, *PTRIAGE_EX_WORK_QUEUE; /* size: 0x02b0 */

typedef struct _OBJECT_SYMBOLIC_LINK
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  union
  {
    /* 0x0008 */ struct _UNICODE_STRING LinkTarget;
    struct
    {
      /* 0x0008 */ void* Callback /* function */;
      /* 0x0010 */ void* CallbackContext;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0018 */ unsigned long DosDeviceDriveIndex;
  /* 0x001c */ unsigned long Flags;
  /* 0x0020 */ unsigned long AccessMask;
  /* 0x0024 */ unsigned long IntegrityLevel;
} OBJECT_SYMBOLIC_LINK, *POBJECT_SYMBOLIC_LINK; /* size: 0x0028 */

typedef struct _TRIAGE_DEVICE_NODE
{
  /* 0x0000 */ struct _TRIAGE_DEVICE_NODE* Sibling;
  /* 0x0008 */ struct _TRIAGE_DEVICE_NODE* Child;
  /* 0x0010 */ struct _TRIAGE_DEVICE_NODE* Parent;
  /* 0x0018 */ struct _TRIAGE_DEVICE_NODE* LastChild;
  /* 0x0020 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0028 */ struct _UNICODE_STRING InstancePath;
  /* 0x0038 */ struct _UNICODE_STRING ServiceName;
  /* 0x0048 */ struct _IRP* PendingIrp;
  /* 0x0050 */ struct _TRIAGE_POP_FX_DEVICE* FxDevice;
} TRIAGE_DEVICE_NODE, *PTRIAGE_DEVICE_NODE; /* size: 0x0058 */

typedef struct _TRIAGE_POP_IRP_DATA
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0018 */ struct _DEVICE_OBJECT* Pdo;
} TRIAGE_POP_IRP_DATA, *PTRIAGE_POP_IRP_DATA; /* size: 0x0020 */

typedef struct _PI_RESOURCE_ARBITER_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY DeviceArbiterList;
  /* 0x0010 */ unsigned char ResourceType;
  /* 0x0011 */ char Padding_912[7];
  /* 0x0018 */ struct _ARBITER_INTERFACE* ArbiterInterface;
  /* 0x0020 */ struct _DEVICE_NODE* DeviceNode;
  /* 0x0028 */ struct _LIST_ENTRY ResourceList;
  /* 0x0038 */ struct _LIST_ENTRY BestResourceList;
  /* 0x0048 */ struct _LIST_ENTRY BestConfig;
  /* 0x0058 */ struct _LIST_ENTRY ActiveArbiterList;
  /* 0x0068 */ unsigned char State;
  /* 0x0069 */ unsigned char ResourcesChanged;
  /* 0x006a */ char __PADDING__[6];
} PI_RESOURCE_ARBITER_ENTRY, *PPI_RESOURCE_ARBITER_ENTRY; /* size: 0x0070 */

typedef struct _POP_DEVICE_SYS_STATE
{
  /* 0x0000 */ unsigned char IrpMinor;
  /* 0x0001 */ char Padding_913[3];
  /* 0x0004 */ enum _SYSTEM_POWER_STATE SystemState;
  /* 0x0008 */ unsigned __int64 SpinLock;
  /* 0x0010 */ struct _KTHREAD* Thread;
  /* 0x0018 */ struct _KEVENT* AbortEvent;
  /* 0x0020 */ struct _KSEMAPHORE* ReadySemaphore;
  /* 0x0028 */ struct _KSEMAPHORE* FinishedSemaphore;
  /* 0x0030 */ struct _PO_DEVICE_NOTIFY_ORDER Order;
  /* 0x01b0 */ struct _LIST_ENTRY Pending;
  /* 0x01c0 */ long Status;
  /* 0x01c4 */ long Padding_914;
  /* 0x01c8 */ struct _DEVICE_OBJECT* FailedDevice;
  /* 0x01d0 */ unsigned char Waking;
  /* 0x01d1 */ unsigned char Cancelled;
  /* 0x01d2 */ unsigned char IgnoreErrors;
  /* 0x01d3 */ unsigned char IgnoreNotImplemented;
  /* 0x01d4 */ unsigned char TimeRefreshLockAcquired;
  /* 0x01d5 */ char __PADDING__[3];
} POP_DEVICE_SYS_STATE, *PPOP_DEVICE_SYS_STATE; /* size: 0x01d8 */

typedef struct _OBJECT_REF_INFO
{
  /* 0x0000 */ struct _OBJECT_HEADER* ObjectHeader;
  /* 0x0008 */ void* NextRef;
  /* 0x0010 */ unsigned char ImageFileName[16];
  /* 0x0020 */ unsigned short NextPos;
  /* 0x0022 */ unsigned short MaxStacks;
  union
  {
    /* 0x0024 */ struct _OBJECT_REF_STACK_INFO* StackInfo /* zero-length array */;
    /* 0x0024 */ long __PADDING__[1];
  }; /* size: 0x0004 */
} OBJECT_REF_INFO, *POBJECT_REF_INFO; /* size: 0x0028 */

typedef struct _FAST_ERESOURCE
{
  /* 0x0000 */ void* Reserved1[3];
  /* 0x0018 */ unsigned long Reserved2;
  /* 0x001c */ long Padding_915;
  /* 0x0020 */ void* Reserved3[4];
  /* 0x0040 */ unsigned long Reserved4[4];
  /* 0x0050 */ void* Reserved5;
  /* 0x0058 */ void* Reserved6[2];
} FAST_ERESOURCE, *PFAST_ERESOURCE; /* size: 0x0068 */

typedef struct _EX_HEAP_SESSION_STATE
{
  /* 0x0000 */ struct _RTLP_HP_HEAP_MANAGER HeapManager;
  /* 0x38e0 */ struct RTL_HP_ENV_HANDLE PagedEnv;
  /* 0x38f0 */ struct _SEGMENT_HEAP* PagedHeap;
  /* 0x38f8 */ struct _SEGMENT_HEAP* SpecialPoolHeap;
} EX_HEAP_SESSION_STATE, *PEX_HEAP_SESSION_STATE; /* size: 0x3900 */

typedef struct _MEMORY_ALLOCATION_DESCRIPTOR
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY ListEntry;
    /* 0x0000 */ struct _RTL_BALANCED_NODE Node;
  }; /* size: 0x0018 */
  /* 0x0018 */ enum _TYPE_OF_MEMORY MemoryType;
  /* 0x001c */ long Padding_916;
  /* 0x0020 */ unsigned __int64 BasePage;
  /* 0x0028 */ unsigned __int64 PageCount;
} MEMORY_ALLOCATION_DESCRIPTOR, *PMEMORY_ALLOCATION_DESCRIPTOR; /* size: 0x0030 */

typedef struct _DELAY_ACK_FO
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ struct _FILE_OBJECT* OriginalFileObject;
} DELAY_ACK_FO, *PDELAY_ACK_FO; /* size: 0x0018 */

struct HAL_PRIVATE_DISPATCH
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ long Padding_917;
  /* 0x0008 */ void* HalHandlerForBus /* function */;
  /* 0x0010 */ void* HalHandlerForConfigSpace /* function */;
  /* 0x0018 */ void* HalLocateHiberRanges /* function */;
  /* 0x0020 */ void* HalRegisterBusHandler /* function */;
  /* 0x0028 */ void* HalSetWakeEnable /* function */;
  /* 0x0030 */ void* HalSetWakeAlarm /* function */;
  /* 0x0038 */ void* HalPciTranslateBusAddress /* function */;
  /* 0x0040 */ void* HalPciAssignSlotResources /* function */;
  /* 0x0048 */ void* HalHaltSystem /* function */;
  /* 0x0050 */ void* HalFindBusAddressTranslation /* function */;
  /* 0x0058 */ void* HalResetDisplay /* function */;
  /* 0x0060 */ void* HalAllocateMapRegisters /* function */;
  /* 0x0068 */ void* KdSetupPciDeviceForDebugging /* function */;
  /* 0x0070 */ void* KdReleasePciDeviceForDebugging /* function */;
  /* 0x0078 */ void* KdGetAcpiTablePhase0 /* function */;
  /* 0x0080 */ void* KdCheckPowerButton /* function */;
  /* 0x0088 */ void* HalVectorToIDTEntry /* function */;
  /* 0x0090 */ void* KdMapPhysicalMemory64 /* function */;
  /* 0x0098 */ void* KdUnmapVirtualAddress /* function */;
  /* 0x00a0 */ void* KdGetPciDataByOffset /* function */;
  /* 0x00a8 */ void* KdSetPciDataByOffset /* function */;
  /* 0x00b0 */ void* HalGetInterruptVectorOverride /* function */;
  /* 0x00b8 */ void* HalGetVectorInputOverride /* function */;
  /* 0x00c0 */ void* HalLoadMicrocode /* function */;
  /* 0x00c8 */ void* HalUnloadMicrocode /* function */;
  /* 0x00d0 */ void* HalPostMicrocodeUpdate /* function */;
  /* 0x00d8 */ void* HalAllocateMessageTargetOverride /* function */;
  /* 0x00e0 */ void* HalFreeMessageTargetOverride /* function */;
  /* 0x00e8 */ void* HalDpReplaceBegin /* function */;
  /* 0x00f0 */ void* HalDpReplaceTarget /* function */;
  /* 0x00f8 */ void* HalDpReplaceControl /* function */;
  /* 0x0100 */ void* HalDpReplaceEnd /* function */;
  /* 0x0108 */ void* HalPrepareForBugcheck /* function */;
  /* 0x0110 */ void* HalQueryWakeTime /* function */;
  /* 0x0118 */ void* HalReportIdleStateUsage /* function */;
  /* 0x0120 */ void* HalTscSynchronization /* function */;
  /* 0x0128 */ void* HalWheaInitProcessorGenericSection /* function */;
  /* 0x0130 */ void* HalStopLegacyUsbInterrupts /* function */;
  /* 0x0138 */ void* HalReadWheaPhysicalMemory /* function */;
  /* 0x0140 */ void* HalWriteWheaPhysicalMemory /* function */;
  /* 0x0148 */ void* HalDpMaskLevelTriggeredInterrupts /* function */;
  /* 0x0150 */ void* HalDpUnmaskLevelTriggeredInterrupts /* function */;
  /* 0x0158 */ void* HalDpGetInterruptReplayState /* function */;
  /* 0x0160 */ void* HalDpReplayInterrupts /* function */;
  /* 0x0168 */ void* HalQueryIoPortAccessSupported /* function */;
  /* 0x0170 */ void* KdSetupIntegratedDeviceForDebugging /* function */;
  /* 0x0178 */ void* KdReleaseIntegratedDeviceForDebugging /* function */;
  /* 0x0180 */ void* HalGetEnlightenmentInformation /* function */;
  /* 0x0188 */ void* HalAllocateEarlyPages /* function */;
  /* 0x0190 */ void* HalMapEarlyPages /* function */;
  /* 0x0198 */ void* Dummy1;
  /* 0x01a0 */ void* Dummy2;
  /* 0x01a8 */ void* HalNotifyProcessorFreeze /* function */;
  /* 0x01b0 */ void* HalPrepareProcessorForIdle /* function */;
  /* 0x01b8 */ void* HalRegisterLogRoutine /* function */;
  /* 0x01c0 */ void* HalResumeProcessorFromIdle /* function */;
  /* 0x01c8 */ void* Dummy;
  /* 0x01d0 */ void* HalVectorToIDTEntryEx /* function */;
  /* 0x01d8 */ void* HalSecondaryInterruptQueryPrimaryInformation /* function */;
  /* 0x01e0 */ void* HalMaskInterrupt /* function */;
  /* 0x01e8 */ void* HalUnmaskInterrupt /* function */;
  /* 0x01f0 */ void* HalIsInterruptTypeSecondary /* function */;
  /* 0x01f8 */ void* HalAllocateGsivForSecondaryInterrupt /* function */;
  /* 0x0200 */ void* HalAddInterruptRemapping /* function */;
  /* 0x0208 */ void* HalRemoveInterruptRemapping /* function */;
  /* 0x0210 */ void* HalSaveAndDisableHvEnlightenment /* function */;
  /* 0x0218 */ void* HalRestoreHvEnlightenment /* function */;
  /* 0x0220 */ void* HalFlushIoBuffersExternalCache /* function */;
  /* 0x0228 */ void* HalFlushExternalCache /* function */;
  /* 0x0230 */ void* HalPciEarlyRestore /* function */;
  /* 0x0238 */ void* HalGetProcessorId /* function */;
  /* 0x0240 */ void* HalAllocatePmcCounterSet /* function */;
  /* 0x0248 */ void* HalCollectPmcCounters /* function */;
  /* 0x0250 */ void* HalFreePmcCounterSet /* function */;
  /* 0x0258 */ void* HalProcessorHalt /* function */;
  /* 0x0260 */ void* HalTimerQueryCycleCounter /* function */;
  /* 0x0268 */ void* Dummy3;
  /* 0x0270 */ void* HalPciMarkHiberPhase /* function */;
  /* 0x0278 */ void* HalQueryProcessorRestartEntryPoint /* function */;
  /* 0x0280 */ void* HalRequestInterrupt /* function */;
  /* 0x0288 */ void* HalEnumerateUnmaskedInterrupts /* function */;
  /* 0x0290 */ void* HalFlushAndInvalidatePageExternalCache /* function */;
  /* 0x0298 */ void* KdEnumerateDebuggingDevices /* function */;
  /* 0x02a0 */ void* HalFlushIoRectangleExternalCache /* function */;
  /* 0x02a8 */ void* HalPowerEarlyRestore /* function */;
  /* 0x02b0 */ void* HalQueryCapsuleCapabilities /* function */;
  /* 0x02b8 */ void* HalUpdateCapsule /* function */;
  /* 0x02c0 */ void* HalPciMultiStageResumeCapable /* function */;
  /* 0x02c8 */ void* HalDmaFreeCrashDumpRegisters /* function */;
  /* 0x02d0 */ void* HalAcpiAoacCapable /* function */;
  /* 0x02d8 */ void* HalInterruptSetDestination /* function */;
  /* 0x02e0 */ void* HalGetClockConfiguration /* function */;
  /* 0x02e8 */ void* HalClockTimerActivate /* function */;
  /* 0x02f0 */ void* HalClockTimerInitialize /* function */;
  /* 0x02f8 */ void* HalClockTimerStop /* function */;
  /* 0x0300 */ void* HalClockTimerArm /* function */;
  /* 0x0308 */ void* HalTimerOnlyClockInterruptPending /* function */;
  /* 0x0310 */ void* HalAcpiGetMultiNode /* function */;
  /* 0x0318 */ void* HalPowerSetRebootHandler /* function */;
  /* 0x0320 */ void* HalIommuRegisterDispatchTable /* function */;
  /* 0x0328 */ void* HalTimerWatchdogStart /* function */;
  /* 0x0330 */ void* HalTimerWatchdogResetCountdown /* function */;
  /* 0x0338 */ void* HalTimerWatchdogStop /* function */;
  /* 0x0340 */ void* HalTimerWatchdogGeneratedLastReset /* function */;
  /* 0x0348 */ void* HalTimerWatchdogTriggerSystemReset /* function */;
  /* 0x0350 */ void* HalInterruptVectorDataToGsiv /* function */;
  /* 0x0358 */ void* HalInterruptGetHighestPriorityInterrupt /* function */;
  /* 0x0360 */ void* HalProcessorOn /* function */;
  /* 0x0368 */ void* HalProcessorOff /* function */;
  /* 0x0370 */ void* HalProcessorFreeze /* function */;
  /* 0x0378 */ void* HalDmaLinkDeviceObjectByToken /* function */;
  /* 0x0380 */ void* HalDmaCheckAdapterToken /* function */;
  /* 0x0388 */ void* Dummy4;
  /* 0x0390 */ void* HalTimerConvertPerformanceCounterToAuxiliaryCounter /* function */;
  /* 0x0398 */ void* HalTimerConvertAuxiliaryCounterToPerformanceCounter /* function */;
  /* 0x03a0 */ void* HalTimerQueryAuxiliaryCounterFrequency /* function */;
  /* 0x03a8 */ void* HalConnectThermalInterrupt /* function */;
  /* 0x03b0 */ void* HalIsEFIRuntimeActive /* function */;
  /* 0x03b8 */ void* HalTimerQueryAndResetRtcErrors /* function */;
  /* 0x03c0 */ void* HalAcpiLateRestore /* function */;
  /* 0x03c8 */ void* KdWatchdogDelayExpiration /* function */;
  /* 0x03d0 */ void* HalGetProcessorStats /* function */;
  /* 0x03d8 */ void* HalTimerWatchdogQueryDueTime /* function */;
  /* 0x03e0 */ void* HalConnectSyntheticInterrupt /* function */;
  /* 0x03e8 */ void* HalPreprocessNmi /* function */;
  /* 0x03f0 */ void* HalEnumerateEnvironmentVariablesWithFilter /* function */;
  /* 0x03f8 */ void* HalCaptureLastBranchRecordStack /* function */;
  /* 0x0400 */ void* HalClearLastBranchRecordStack /* function */;
  /* 0x0408 */ void* HalConfigureLastBranchRecord /* function */;
  /* 0x0410 */ void* HalGetLastBranchInformation /* function */;
  /* 0x0418 */ void* HalResumeLastBranchRecord /* function */;
  /* 0x0420 */ void* HalStartLastBranchRecord /* function */;
  /* 0x0428 */ void* HalStopLastBranchRecord /* function */;
  /* 0x0430 */ void* HalIommuBlockDevice /* function */;
  /* 0x0438 */ void* HalIommuUnblockDevice /* function */;
  /* 0x0440 */ void* HalGetIommuInterface /* function */;
  /* 0x0448 */ void* HalRequestGenericErrorRecovery /* function */;
  /* 0x0450 */ void* HalTimerQueryHostPerformanceCounter /* function */;
  /* 0x0458 */ void* HalTopologyQueryProcessorRelationships /* function */;
  /* 0x0460 */ void* HalInitPlatformDebugTriggers /* function */;
  /* 0x0468 */ void* HalRunPlatformDebugTriggers /* function */;
  /* 0x0470 */ void* HalTimerGetReferencePage /* function */;
  /* 0x0478 */ void* HalGetHiddenProcessorPowerInterface /* function */;
  /* 0x0480 */ void* HalGetHiddenProcessorPackageId /* function */;
  /* 0x0488 */ void* HalGetHiddenPackageProcessorCount /* function */;
  /* 0x0490 */ void* HalGetHiddenProcessorApicIdByIndex /* function */;
  /* 0x0498 */ void* HalRegisterHiddenProcessorIdleState /* function */;
  /* 0x04a0 */ void* HalIommuReportIommuFault /* function */;
  /* 0x04a8 */ void* HalIommuDmaRemappingCapable /* function */;
  /* 0x04b0 */ void* HalAllocatePmcCounterSetEx /* function */;
  /* 0x04b8 */ void* HalStartProfileInterruptEx /* function */;
  /* 0x04c0 */ void* HalGetIommuInterfaceEx /* function */;
  /* 0x04c8 */ void* HalNotifyIommuDomainPolicyChange /* function */;
  /* 0x04d0 */ void* HalPciGetDeviceLocationFromPhysicalAddress /* function */;
  /* 0x04d8 */ void* HalInvokeSmc /* function */;
  /* 0x04e0 */ void* HalInvokeHvc /* function */;
  /* 0x04e8 */ void* HalGetSoftRebootDatabase /* function */;
  /* 0x04f0 */ void* HalRequestPmuAccess /* function */;
  /* 0x04f8 */ void* HalTopologyQueryProcessorCacheInformation /* function */;
  /* 0x0500 */ void* HalReleasePmuAccessRequest /* function */;
  /* 0x0508 */ void* HalTimerQueryRtcErrors /* function */;
  /* 0x0510 */ void* HalExternalPciConfigSpaceAccess /* function */;
}; /* size: 0x0518 */

typedef struct _MAP_REGISTER_ENTRY
{
  /* 0x0000 */ void* MapRegister;
  /* 0x0008 */ unsigned char WriteToDevice;
  /* 0x0009 */ char __PADDING__[7];
} MAP_REGISTER_ENTRY, *PMAP_REGISTER_ENTRY; /* size: 0x0010 */

typedef struct _HEADLESS_LOADER_BLOCK
{
  /* 0x0000 */ unsigned char UsedBiosSettings;
  /* 0x0001 */ unsigned char DataBits;
  /* 0x0002 */ unsigned char StopBits;
  /* 0x0003 */ unsigned char Parity;
  /* 0x0004 */ unsigned long BaudRate;
  /* 0x0008 */ unsigned long PortNumber;
  /* 0x000c */ long Padding_918;
  /* 0x0010 */ unsigned char* PortAddress;
  /* 0x0018 */ unsigned short PciDeviceId;
  /* 0x001a */ unsigned short PciVendorId;
  /* 0x001c */ unsigned char PciBusNumber;
  /* 0x001d */ char Padding_919;
  /* 0x001e */ unsigned short PciBusSegment;
  /* 0x0020 */ unsigned char PciSlotNumber;
  /* 0x0021 */ unsigned char PciFunctionNumber;
  /* 0x0022 */ char Padding_920[2];
  /* 0x0024 */ unsigned long PciFlags;
  /* 0x0028 */ struct _GUID SystemGUID;
  /* 0x0038 */ unsigned char IsMMIODevice;
  /* 0x0039 */ unsigned char TerminalType;
  /* 0x003a */ unsigned char InterfaceType;
  /* 0x003b */ unsigned char RegisterBitWidth;
  /* 0x003c */ unsigned char RegisterAccessSize;
  /* 0x003d */ char __PADDING__[3];
} HEADLESS_LOADER_BLOCK, *PHEADLESS_LOADER_BLOCK; /* size: 0x0040 */

typedef struct _NUMA_MEMORY_RANGE
{
  /* 0x0000 */ unsigned long ProximityId;
  /* 0x0004 */ long Padding_921;
  /* 0x0008 */ unsigned __int64 BasePage;
  /* 0x0010 */ unsigned __int64 EndPage;
} NUMA_MEMORY_RANGE, *PNUMA_MEMORY_RANGE; /* size: 0x0018 */

typedef struct _COMPOSITEFS_LAYER_INFORMATION
{
  /* 0x0000 */ unsigned long DeviceType;
  /* 0x0004 */ long Padding_922;
  union
  {
    union
    {
      /* 0x0008 */ struct _BLOCK_IO_LAYER_INFORMATION BlockIo;
      /* 0x0008 */ struct _CIMFS_LAYER_INFORMATION Cimfs;
    }; /* size: 0x0030 */
  } /* size: 0x0030 */ u;
} COMPOSITEFS_LAYER_INFORMATION, *PCOMPOSITEFS_LAYER_INFORMATION; /* size: 0x0038 */

typedef struct _LOADER_FEATURE_CONFIGURATION_INFORMATION2
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ long Padding_923;
  /* 0x0008 */ void* DelayedFeatureUsageDataBuffer;
  /* 0x0010 */ unsigned __int64 DelayedFeatureUsageDataBufferSize;
  /* 0x0018 */ unsigned char ExperimentationClientPresent;
  /* 0x0019 */ char __PADDING__[7];
} LOADER_FEATURE_CONFIGURATION_INFORMATION2, *PLOADER_FEATURE_CONFIGURATION_INFORMATION2; /* size: 0x0020 */

typedef struct _HAL_DP_REPLACE_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_924;
  /* 0x0008 */ struct _PNP_REPLACE_PROCESSOR_LIST* TargetProcessors;
  /* 0x0010 */ struct _PNP_REPLACE_PROCESSOR_LIST* SpareProcessors;
} HAL_DP_REPLACE_PARAMETERS, *PHAL_DP_REPLACE_PARAMETERS; /* size: 0x0018 */

typedef struct _INPUT_MAPPING_ELEMENT
{
  /* 0x0000 */ unsigned long InputMappingId;
} INPUT_MAPPING_ELEMENT, *PINPUT_MAPPING_ELEMENT; /* size: 0x0004 */

typedef struct _HAL_LBR_ENTRY
{
  /* 0x0000 */ void* FromAddress;
  /* 0x0008 */ void* ToAddress;
  /* 0x0010 */ void* Reserved;
} HAL_LBR_ENTRY, *PHAL_LBR_ENTRY; /* size: 0x0018 */

typedef struct _HAL_IOMMU_DISPATCH
{
  /* 0x0000 */ void* HalIommuSupportEnabled /* function */;
  /* 0x0008 */ void* HalIommuGetConfiguration /* function */;
  /* 0x0010 */ void* HalIommuGetLibraryContext /* function */;
  /* 0x0018 */ void* HalIommuMapDevice /* function */;
  /* 0x0020 */ void* HalIommuEnableDevicePasid /* function */;
  /* 0x0028 */ void* HalIommuSetAddressSpace /* function */;
  /* 0x0030 */ void* HalIommuDisableDevicePasid /* function */;
  /* 0x0038 */ void* HalIommuUnmapDevice /* function */;
  /* 0x0040 */ void* HalIommuFreeLibraryContext /* function */;
  /* 0x0048 */ void* HalIommuFlushTb /* function */;
  /* 0x0050 */ void* HalIommuFlushAllPasid /* function */;
  /* 0x0058 */ void* HalIommuProcessPageRequestQueue /* function */;
  /* 0x0060 */ void* HalIommuFaultRoutine /* function */;
  /* 0x0068 */ void* HalIommuReferenceAsid /* function */;
  /* 0x0070 */ void* HalIommuDereferenceAsid /* function */;
  /* 0x0078 */ void* HalIommuServicePageFault /* function */;
  /* 0x0080 */ void* HalIommuDevicePowerChange /* function */;
  /* 0x0088 */ void* HalIommuBeginDeviceReset /* function */;
  /* 0x0090 */ void* HalIommuFinalizeDeviceReset /* function */;
  /* 0x0098 */ void* HalIommuGetAtsSettings /* function */;
  /* 0x00a0 */ void* HalIommuCreateAtsDevice /* function */;
  /* 0x00a8 */ void* HalIommuDeleteAtsDevice /* function */;
  /* 0x00b0 */ void* HalIommuGetDomainTransitionSupport /* function */;
  /* 0x00b8 */ void* HalIommuSetDeviceMpam /* function */;
  /* 0x00c0 */ void* HalIommuGetDeviceMpam /* function */;
} HAL_IOMMU_DISPATCH, *PHAL_IOMMU_DISPATCH; /* size: 0x00c8 */

typedef struct _IOMMU_DMA_LOGICAL_ALLOCATOR_CONFIG
{
  /* 0x0000 */ enum _IOMMU_DMA_LOGICAL_ALLOCATOR_TYPE LogicalAllocatorType;
  struct
  {
    /* 0x0004 */ unsigned long AddressWidth;
  } /* size: 0x0004 */ BuddyAllocatorConfig;
} IOMMU_DMA_LOGICAL_ALLOCATOR_CONFIG, *PIOMMU_DMA_LOGICAL_ALLOCATOR_CONFIG; /* size: 0x0008 */

typedef struct _IOMMU_DMA_DEVICE_INFORMATION
{
  /* 0x0000 */ unsigned char DefaultPasidEnabled;
  /* 0x0001 */ unsigned char PasidTaggedDmaEnabled;
  /* 0x0002 */ unsigned char PasidFaultsSuppressed;
} IOMMU_DMA_DEVICE_INFORMATION, *PIOMMU_DMA_DEVICE_INFORMATION; /* size: 0x0003 */

typedef struct _SECTION
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE SectionNode;
  /* 0x0018 */ unsigned __int64 StartingVpn;
  /* 0x0020 */ unsigned __int64 EndingVpn;
  union
  {
    union
    {
      /* 0x0028 */ struct _CONTROL_AREA* ControlArea;
      /* 0x0028 */ struct _FILE_OBJECT* FileObject;
      struct /* bitfield */
      {
        /* 0x0028 */ unsigned __int64 RemoteImageFileObject : 1; /* bit position: 0 */
        /* 0x0028 */ unsigned __int64 RemoteDataFileObject : 1; /* bit position: 1 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
  /* 0x0030 */ unsigned __int64 SizeOfSection;
  union
  {
    union
    {
      /* 0x0038 */ unsigned long LongFlags;
      /* 0x0038 */ struct _MMSECTION_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  struct /* bitfield */
  {
    /* 0x003c */ unsigned long InitialPageProtection : 12; /* bit position: 0 */
    /* 0x003c */ unsigned long SessionId : 19; /* bit position: 12 */
    /* 0x003c */ unsigned long NoValidationNeeded : 1; /* bit position: 31 */
  }; /* bitfield */
} SECTION, *PSECTION; /* size: 0x0040 */

typedef struct _MI_COMBINE_BLOCK
{
  union
  {
    union
    {
      /* 0x0000 */ struct _RTL_BALANCED_NODE ActiveNode;
      /* 0x0000 */ struct _LIST_ENTRY ListEntry;
      /* 0x0000 */ struct _MI_COMBINE_BLOCK_BASE CombineBase;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u1;
  /* 0x0018 */ unsigned __int64 HashValue;
  /* 0x0020 */ struct _MMCLONE_BLOCK Clone;
  /* 0x0040 */ unsigned __int64 CombineDomain;
} MI_COMBINE_BLOCK, *PMI_COMBINE_BLOCK; /* size: 0x0048 */

typedef struct _MI_DRIVER_VA
{
  /* 0x0000 */ struct _MI_DRIVER_VA* Next;
  /* 0x0008 */ struct _MMPTE* PointerPte;
  /* 0x0010 */ struct _RTL_BITMAP BitMap;
  /* 0x0020 */ unsigned long Hint;
  /* 0x0024 */ unsigned long Flags;
  /* 0x0028 */ struct _RTL_BITMAP PageTableCommitmentBitMap;
} MI_DRIVER_VA, *PMI_DRIVER_VA; /* size: 0x0038 */

typedef struct _MI_SYSTEM_NODE_NONPAGED_POOL
{
  /* 0x0000 */ struct _MI_DYNAMIC_BITMAP DynamicBitMapNonPagedPool;
  /* 0x0048 */ volatile long NonPagedPoolSpinLock;
  /* 0x004c */ long Padding_925;
  /* 0x0050 */ struct _MI_PAGE_CHAIN_HEAD CachedNonPagedPool;
  /* 0x0068 */ void* NonPagedPoolFirstVa;
  /* 0x0070 */ void* NonPagedPoolLastVa;
  /* 0x0078 */ enum _MI_PFN_CACHE_ATTRIBUTE OptimalZeroingAttribute[4][4];
  /* 0x00b8 */ struct _MI_ZERO_COST_COUNTS ZeroCostCounts[2][2][3];
  /* 0x0178 */ struct _MI_SYSTEM_NODE_INFORMATION* SystemNodeInformation;
} MI_SYSTEM_NODE_NONPAGED_POOL, *PMI_SYSTEM_NODE_NONPAGED_POOL; /* size: 0x0180 */

typedef struct _MI_HUGE_PFN
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ unsigned __int64 EntireField;
      } /* size: 0x0008 */ e1;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned __int64 PageState : 3; /* bit position: 0 */
          /* 0x0000 */ unsigned __int64 HasError : 1; /* bit position: 3 */
          /* 0x0000 */ unsigned __int64 Partition : 11; /* bit position: 4 */
          /* 0x0000 */ unsigned __int64 ZeroedDuringStateChanges : 49; /* bit position: 15 */
        }; /* bitfield */
      } /* size: 0x0008 */ e2;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned __int64 PageState : 3; /* bit position: 0 */
          /* 0x0000 */ unsigned __int64 HasError : 1; /* bit position: 3 */
          /* 0x0000 */ unsigned __int64 Partition : 11; /* bit position: 4 */
          /* 0x0000 */ unsigned __int64 Flink : 22; /* bit position: 15 */
          /* 0x0000 */ unsigned __int64 Blink : 22; /* bit position: 37 */
          /* 0x0000 */ unsigned __int64 WriteInProgress : 1; /* bit position: 59 */
        }; /* bitfield */
      } /* size: 0x0008 */ OnList;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned __int64 PageState : 3; /* bit position: 0 */
          /* 0x0000 */ unsigned __int64 HasError : 1; /* bit position: 3 */
          /* 0x0000 */ unsigned __int64 Partition : 11; /* bit position: 4 */
          /* 0x0000 */ unsigned __int64 DeleteBit : 1; /* bit position: 15 */
          /* 0x0000 */ unsigned __int64 ContentsWereNonZeroWhenInitiallyUnlinked : 1; /* bit position: 16 */
          /* 0x0000 */ unsigned __int64 ShareCount : 22; /* bit position: 17 */
        }; /* bitfield */
      } /* size: 0x0008 */ Active;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned __int64 PageState : 3; /* bit position: 0 */
          /* 0x0000 */ unsigned __int64 HasError : 1; /* bit position: 3 */
          /* 0x0000 */ unsigned __int64 Partition : 11; /* bit position: 4 */
          /* 0x0000 */ unsigned __int64 DanglingIoNodes : 9; /* bit position: 15 */
        }; /* bitfield */
      } /* size: 0x0008 */ Transition;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
} MI_HUGE_PFN, *PMI_HUGE_PFN; /* size: 0x0008 */

struct PROCESSOR_IDLESTATE_POLICY
{
  /* 0x0000 */ unsigned short Revision;
  union
  {
    union
    {
      /* 0x0002 */ unsigned short AsUSHORT;
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned short AllowScaling : 1; /* bit position: 0 */
        /* 0x0002 */ unsigned short Disabled : 1; /* bit position: 1 */
        /* 0x0002 */ unsigned short Reserved : 14; /* bit position: 2 */
      }; /* bitfield */
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ Flags;
  /* 0x0004 */ unsigned long PolicyCount;
  /* 0x0008 */ struct PROCESSOR_IDLESTATE_INFO Policy[3];
}; /* size: 0x0020 */

typedef struct _EXCEPTION_POINTERS
{
  /* 0x0000 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x0008 */ struct _CONTEXT* ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS; /* size: 0x0010 */

typedef struct _ARBITER_ORDERING
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
} ARBITER_ORDERING, *PARBITER_ORDERING; /* size: 0x0010 */

typedef struct _ARBITER_ALTERNATIVE
{
  /* 0x0000 */ unsigned __int64 Minimum;
  /* 0x0008 */ unsigned __int64 Maximum;
  /* 0x0010 */ unsigned __int64 Length;
  /* 0x0018 */ unsigned __int64 Alignment;
  /* 0x0020 */ long Priority;
  /* 0x0024 */ unsigned long Flags;
  /* 0x0028 */ struct _IO_RESOURCE_DESCRIPTOR* Descriptor;
  /* 0x0030 */ unsigned long Reserved[3];
  /* 0x003c */ long __PADDING__[1];
} ARBITER_ALTERNATIVE, *PARBITER_ALTERNATIVE; /* size: 0x0040 */

typedef struct _VF_DRIVER_IO_CALLBACKS
{
  /* 0x0000 */ void* DriverInit /* function */;
  /* 0x0008 */ void* DriverStartIo /* function */;
  /* 0x0010 */ void* DriverUnload /* function */;
  /* 0x0018 */ void* AddDevice /* function */;
  /* 0x0020 */ void* MajorFunction[28] /* function */;
} VF_DRIVER_IO_CALLBACKS, *PVF_DRIVER_IO_CALLBACKS; /* size: 0x0100 */

typedef struct _PI_BUS_EXTENSION
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char NumberCSNs;
  /* 0x0005 */ char Padding_926[3];
  /* 0x0008 */ unsigned char* ReadDataPort;
  /* 0x0010 */ unsigned char DataPortMapped;
  /* 0x0011 */ char Padding_927[7];
  /* 0x0018 */ unsigned char* AddressPort;
  /* 0x0020 */ unsigned char AddrPortMapped;
  /* 0x0021 */ char Padding_928[7];
  /* 0x0028 */ unsigned char* CommandPort;
  /* 0x0030 */ unsigned char CmdPortMapped;
  /* 0x0031 */ char Padding_929[3];
  /* 0x0034 */ unsigned long NextSlotNumber;
  /* 0x0038 */ struct _SINGLE_LIST_ENTRY DeviceList;
  /* 0x0040 */ struct _SINGLE_LIST_ENTRY CardList;
  /* 0x0048 */ struct _DEVICE_OBJECT* PhysicalBusDevice;
  /* 0x0050 */ struct _DEVICE_OBJECT* FunctionalBusDevice;
  /* 0x0058 */ struct _DEVICE_OBJECT* AttachedDevice;
  /* 0x0060 */ unsigned long BusNumber;
  /* 0x0064 */ enum _SYSTEM_POWER_STATE SystemPowerState;
  /* 0x0068 */ enum _DEVICE_POWER_STATE DevicePowerState;
  /* 0x006c */ long __PADDING__[1];
} PI_BUS_EXTENSION, *PPI_BUS_EXTENSION; /* size: 0x0070 */

typedef struct _RTL_ATOM_TABLE_ENTRY
{
  /* 0x0000 */ struct _RTL_ATOM_TABLE_ENTRY* HashLink;
  /* 0x0008 */ unsigned short HandleIndex;
  /* 0x000a */ unsigned short Atom;
  /* 0x000c */ long Padding_930;
  /* 0x0010 */ struct _RTL_ATOM_TABLE_REFERENCE Reference;
  /* 0x0028 */ unsigned char NameLength;
  /* 0x0029 */ char Padding_931;
  /* 0x002a */ wchar_t Name[1];
  /* 0x002c */ long __PADDING__[1];
} RTL_ATOM_TABLE_ENTRY, *PRTL_ATOM_TABLE_ENTRY; /* size: 0x0030 */

typedef struct _TraceLoggingMetadata_t
{
  /* 0x0000 */ unsigned int Signature;
  /* 0x0004 */ unsigned short Size;
  /* 0x0006 */ unsigned char Version;
  /* 0x0007 */ unsigned char Flags;
  /* 0x0008 */ unsigned __int64 Magic;
} TraceLoggingMetadata_t, *PTraceLoggingMetadata_t; /* size: 0x0010 */

typedef struct _EX_PARTITION
{
  /* 0x0000 */ struct _EPARTITION* PartitionObject;
  /* 0x0008 */ struct _EX_WORK_QUEUE** volatile* WorkQueues;
  /* 0x0010 */ struct _EX_WORK_QUEUE_MANAGER** WorkQueueManagers;
  /* 0x0018 */ volatile long QueueAllocationMask;
  /* 0x001c */ long __PADDING__[1];
} EX_PARTITION, *PEX_PARTITION; /* size: 0x0020 */

struct _VERIFIER_SHARED_EXPORT_THUNK;

typedef struct _VI_VERIFIER_POOL_HEADER
{
  /* 0x0000 */ struct _VI_POOL_ENTRY* VerifierPoolEntry;
} VI_VERIFIER_POOL_HEADER, *PVI_VERIFIER_POOL_HEADER; /* size: 0x0008 */

typedef struct _ETWP_NOTIFICATION_HEADER
{
  /* 0x0000 */ enum _ETW_NOTIFICATION_TYPE NotificationType;
  /* 0x0004 */ unsigned long NotificationSize;
  /* 0x0008 */ long RefCount;
  /* 0x000c */ unsigned char ReplyRequested;
  /* 0x000d */ char Padding_932[3];
  union
  {
    /* 0x0010 */ unsigned long ReplyIndex;
    /* 0x0010 */ unsigned long Timeout;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0014 */ unsigned long ReplyCount;
    /* 0x0014 */ unsigned long NotifyeeCount;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0018 */ unsigned __int64 ReplyHandle;
    /* 0x0018 */ void* ReplyObject;
    /* 0x0018 */ unsigned long RegIndex;
  }; /* size: 0x0008 */
  /* 0x0020 */ unsigned long TargetPID;
  /* 0x0024 */ unsigned long SourcePID;
  /* 0x0028 */ struct _GUID DestinationGuid;
  /* 0x0038 */ struct _GUID SourceGuid;
} ETWP_NOTIFICATION_HEADER, *PETWP_NOTIFICATION_HEADER; /* size: 0x0048 */

typedef struct _ETW_PROVIDER_TRAITS
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE Node;
  /* 0x0018 */ unsigned long ReferenceCount;
  /* 0x001c */ unsigned char Traits[1];
  /* 0x001d */ char __PADDING__[3];
} ETW_PROVIDER_TRAITS, *PETW_PROVIDER_TRAITS; /* size: 0x0020 */

typedef struct _VI_TRACK_IRQL
{
  /* 0x0000 */ void* Thread;
  /* 0x0008 */ unsigned char OldIrql;
  /* 0x0009 */ unsigned char NewIrql;
  /* 0x000a */ unsigned short Processor;
  /* 0x000c */ unsigned long TickCount;
  /* 0x0010 */ void* StackTrace[5];
} VI_TRACK_IRQL, *PVI_TRACK_IRQL; /* size: 0x0038 */

typedef struct _IOV_FORCED_PENDING_TRACE
{
  /* 0x0000 */ struct _IRP* Irp;
  /* 0x0008 */ struct _ETHREAD* Thread;
  /* 0x0010 */ void* StackTrace[62];
} IOV_FORCED_PENDING_TRACE, *PIOV_FORCED_PENDING_TRACE; /* size: 0x0200 */

typedef struct _DIAGNOSTIC_BUFFER
{
  /* 0x0000 */ unsigned __int64 Size;
  /* 0x0008 */ enum _REQUESTER_TYPE CallerType;
  /* 0x000c */ long Padding_933;
  union
  {
    struct
    {
      /* 0x0010 */ unsigned __int64 ProcessImageNameOffset;
      /* 0x0018 */ unsigned long ProcessId;
      /* 0x001c */ unsigned long ServiceTag;
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0010 */ unsigned __int64 DeviceDescriptionOffset;
      /* 0x0018 */ unsigned __int64 DevicePathOffset;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0020 */ unsigned __int64 ReasonOffset;
} DIAGNOSTIC_BUFFER, *PDIAGNOSTIC_BUFFER; /* size: 0x0028 */

typedef struct _DUMP_STACK_CONTEXT
{
  /* 0x0000 */ struct _DUMP_INITIALIZATION_CONTEXT Init;
  /* 0x0108 */ union _LARGE_INTEGER PartitionOffset;
  union
  {
    /* 0x0110 */ void* DumpPointers;
    /* 0x0110 */ void* StorageInfo;
  }; /* size: 0x0008 */
  /* 0x0118 */ unsigned char UseStorageInfo;
  /* 0x0119 */ char Padding_934[3];
  /* 0x011c */ unsigned long PointersLength;
  /* 0x0120 */ wchar_t* ModulePrefix;
  /* 0x0128 */ struct _LIST_ENTRY DriverList;
  /* 0x0138 */ struct _STRING InitMsg;
  /* 0x0148 */ struct _STRING ProgMsg;
  /* 0x0158 */ struct _STRING DoneMsg;
  /* 0x0168 */ void* FileObject;
  /* 0x0170 */ enum _DEVICE_USAGE_NOTIFICATION_TYPE UsageType;
  /* 0x0174 */ long __PADDING__[1];
} DUMP_STACK_CONTEXT, *PDUMP_STACK_CONTEXT; /* size: 0x0178 */

struct PO_MEMORY_IMAGE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long ImageType;
  /* 0x0008 */ unsigned long CheckSum;
  /* 0x000c */ unsigned long LengthSelf;
  /* 0x0010 */ unsigned __int64 PageSelf;
  /* 0x0018 */ unsigned long PageSize;
  /* 0x001c */ long Padding_935;
  /* 0x0020 */ union _LARGE_INTEGER SystemTime;
  /* 0x0028 */ unsigned __int64 InterruptTime;
  /* 0x0030 */ unsigned __int64 FeatureFlags;
  /* 0x0038 */ unsigned char HiberFlags;
  /* 0x0039 */ unsigned char HiberSimulateFlags;
  /* 0x003a */ unsigned char spare[2];
  /* 0x003c */ unsigned long NoHiberPtes;
  /* 0x0040 */ unsigned __int64 HiberVa;
  /* 0x0048 */ unsigned long RestoredPagesBitmapSize;
  /* 0x004c */ unsigned long RestoredPagesBitmapBitmapCheck;
  /* 0x0050 */ unsigned long WakeCheck;
  /* 0x0054 */ long Padding_936;
  /* 0x0058 */ unsigned __int64 NumPagesForLoader;
  /* 0x0060 */ unsigned __int64 FirstSecureRestorePage;
  /* 0x0068 */ unsigned __int64 FirstBootRestorePage;
  /* 0x0070 */ unsigned __int64 FirstKernelRestorePage;
  /* 0x0078 */ unsigned __int64 FirstChecksumRestorePage;
  /* 0x0080 */ unsigned __int64 NoChecksumEntries;
  /* 0x0088 */ struct _PO_HIBER_PERF PerfInfo;
  /* 0x0370 */ unsigned long FirmwareRuntimeInformationPages;
  /* 0x0374 */ long Padding_937;
  /* 0x0378 */ unsigned __int64 FirmwareRuntimeInformation[1];
  /* 0x0380 */ unsigned __int64 IumFirmwareRuntimeInformationPageCount;
  /* 0x0388 */ unsigned __int64 IumFirmwareRuntimeInformationPfnBase;
  /* 0x0390 */ unsigned long SpareUlong;
  /* 0x0394 */ unsigned long NoBootLoaderLogPages;
  /* 0x0398 */ unsigned __int64 BootLoaderLogPages[24];
  /* 0x0458 */ unsigned long NotUsed;
  /* 0x045c */ unsigned long ResumeContextCheck;
  /* 0x0460 */ unsigned long ResumeContextPages;
  struct /* bitfield */
  {
    /* 0x0464 */ unsigned long Hiberboot : 1; /* bit position: 0 */
    /* 0x0464 */ unsigned long SecureLaunched : 1; /* bit position: 1 */
    /* 0x0464 */ unsigned long SecureBoot : 1; /* bit position: 2 */
    /* 0x0464 */ unsigned long Fasr : 1; /* bit position: 3 */
    /* 0x0464 */ unsigned long HiberResumeXhciHandoffSkip : 1; /* bit position: 4 */
    /* 0x0464 */ unsigned long InitializeUSBCore : 1; /* bit position: 5 */
    /* 0x0464 */ unsigned long ValidUSBCoreId : 1; /* bit position: 6 */
    /* 0x0464 */ unsigned long SkipMemoryMapValidation : 1; /* bit position: 7 */
    /* 0x0464 */ unsigned long SuppressResumePrompt : 1; /* bit position: 8 */
    /* 0x0464 */ unsigned long Reserved : 23; /* bit position: 9 */
  }; /* bitfield */
  /* 0x0468 */ unsigned __int64 HvPageTableRoot;
  /* 0x0470 */ unsigned __int64 HvEntryPoint;
  /* 0x0478 */ unsigned __int64 HvReservedTransitionAddress;
  /* 0x0480 */ unsigned __int64 HvReservedTransitionAddressSize;
  /* 0x0488 */ unsigned __int64 BootFlags;
  /* 0x0490 */ unsigned __int64 RestoreProcessorStateRoutine;
  /* 0x0498 */ unsigned __int64 HighestPhysicalPage;
  /* 0x04a0 */ unsigned __int64 BitlockerKeyPfns[4];
  /* 0x04c0 */ unsigned long HardwareSignature;
  /* 0x04c4 */ long Padding_938;
  /* 0x04c8 */ union _LARGE_INTEGER SMBiosTablePhysicalAddress;
  /* 0x04d0 */ unsigned long SMBiosTableLength;
  /* 0x04d4 */ unsigned char SMBiosMajorVersion;
  /* 0x04d5 */ unsigned char SMBiosMinorVersion;
  /* 0x04d6 */ unsigned char USBCoreId;
  /* 0x04d7 */ char __PADDING__[1];
}; /* size: 0x04d8 */

typedef struct _ISR_THUNK
{
  /* 0x0000 */ unsigned char PushImm;
  /* 0x0001 */ unsigned char Vector;
  /* 0x0002 */ unsigned char PushRbp;
  /* 0x0003 */ unsigned char JmpOp;
  /* 0x0004 */ long JmpOffset;
} ISR_THUNK, *PISR_THUNK; /* size: 0x0008 */

typedef struct _WAITING_IRP
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0018 */ void* CompletionRoutine /* function */;
  /* 0x0020 */ void* Context;
  /* 0x0028 */ struct _KEVENT* Event;
  /* 0x0030 */ unsigned long Information;
  /* 0x0034 */ unsigned char BreakAllRH;
  /* 0x0035 */ unsigned char OplockBreakNotify;
  /* 0x0036 */ char Padding_939[2];
  /* 0x0038 */ struct _FILE_OBJECT* FileObject;
} WAITING_IRP, *PWAITING_IRP; /* size: 0x0040 */

typedef struct _EXP_PULLED_FILE_TABLE
{
  /* 0x0000 */ long NumberOfFiles;
  /* 0x0004 */ long TableSize;
  /* 0x0008 */ unsigned __int64 Hashes[1];
} EXP_PULLED_FILE_TABLE, *PEXP_PULLED_FILE_TABLE; /* size: 0x0010 */

typedef struct _TRIAGE_9F_POWER
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ long Padding_940;
  /* 0x0008 */ struct _LIST_ENTRY* IrpList;
  /* 0x0010 */ struct _LIST_ENTRY* ThreadList;
  /* 0x0018 */ struct _TRIAGE_EX_WORK_QUEUE* DelayedWorkQueue;
  /* 0x0020 */ struct _TRIAGE_EX_WORK_QUEUE* DelayedIoWorkQueue;
} TRIAGE_9F_POWER, *PTRIAGE_9F_POWER; /* size: 0x0028 */

typedef struct _PTE_TRACKER
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _MDL* Mdl;
  /* 0x0018 */ unsigned __int64 Count;
  /* 0x0020 */ void* SystemVa;
  /* 0x0028 */ void* StartVa;
  /* 0x0030 */ unsigned long Offset;
  /* 0x0034 */ unsigned long Length;
  /* 0x0038 */ unsigned __int64 Page;
  struct /* bitfield */
  {
    /* 0x0040 */ unsigned long IoMapping : 1; /* bit position: 0 */
    /* 0x0040 */ unsigned long Matched : 1; /* bit position: 1 */
    /* 0x0040 */ unsigned long CacheAttribute : 2; /* bit position: 2 */
    /* 0x0040 */ unsigned long GuardPte : 1; /* bit position: 4 */
    /* 0x0040 */ unsigned long Spare : 27; /* bit position: 5 */
  }; /* bitfield */
  /* 0x0044 */ long Padding_941;
  /* 0x0048 */ void* StackTrace[7];
} PTE_TRACKER, *PPTE_TRACKER; /* size: 0x0080 */

typedef struct _POOL_TRACKER_BIG_PAGES
{
  /* 0x0000 */ volatile unsigned __int64 Va;
  /* 0x0008 */ unsigned long Key;
  struct /* bitfield */
  {
    /* 0x000c */ unsigned long Pattern : 8; /* bit position: 0 */
    /* 0x000c */ unsigned long PoolFlags : 12; /* bit position: 8 */
    /* 0x000c */ unsigned long SlushSize : 12; /* bit position: 20 */
  }; /* bitfield */
  /* 0x0010 */ unsigned __int64 NumberOfBytes;
  /* 0x0018 */ struct _EPROCESS* ProcessBilled;
} POOL_TRACKER_BIG_PAGES, *PPOOL_TRACKER_BIG_PAGES; /* size: 0x0020 */

struct PROCESSOR_PERFSTATE_POLICY
{
  /* 0x0000 */ unsigned long Revision;
  /* 0x0004 */ unsigned char MaxThrottle;
  /* 0x0005 */ unsigned char MinThrottle;
  /* 0x0006 */ unsigned char BusyAdjThreshold;
  union
  {
    /* 0x0007 */ unsigned char Spare;
    union
    {
      union
      {
        /* 0x0007 */ unsigned char AsUCHAR;
        struct /* bitfield */
        {
          /* 0x0007 */ unsigned char NoDomainAccounting : 1; /* bit position: 0 */
          /* 0x0007 */ unsigned char IncreasePolicy : 2; /* bit position: 1 */
          /* 0x0007 */ unsigned char DecreasePolicy : 2; /* bit position: 3 */
          /* 0x0007 */ unsigned char Reserved : 3; /* bit position: 5 */
        }; /* bitfield */
      }; /* size: 0x0001 */
    } /* size: 0x0001 */ Flags;
  }; /* size: 0x0001 */
  /* 0x0008 */ unsigned long TimeCheck;
  /* 0x000c */ unsigned long IncreaseTime;
  /* 0x0010 */ unsigned long DecreaseTime;
  /* 0x0014 */ unsigned long IncreasePercent;
  /* 0x0018 */ unsigned long DecreasePercent;
}; /* size: 0x001c */

typedef struct _LDR_DDAG_NODE
{
  /* 0x0000 */ struct _LIST_ENTRY Modules;
  /* 0x0010 */ struct _LDR_SERVICE_TAG_RECORD* ServiceTagList;
  /* 0x0018 */ unsigned long LoadCount;
  /* 0x001c */ unsigned long LoadWhileUnloadingCount;
  /* 0x0020 */ unsigned long LowestLink;
  /* 0x0024 */ long Padding_942;
  /* 0x0028 */ struct _LDRP_CSLIST Dependencies;
  /* 0x0030 */ struct _LDRP_CSLIST IncomingDependencies;
  /* 0x0038 */ enum _LDR_DDAG_STATE State;
  /* 0x003c */ long Padding_943;
  /* 0x0040 */ struct _SINGLE_LIST_ENTRY CondenseLink;
  /* 0x0048 */ unsigned long PreorderNumber;
  /* 0x004c */ long __PADDING__[1];
} LDR_DDAG_NODE, *PLDR_DDAG_NODE; /* size: 0x0050 */

typedef struct _POP_POWER_SETTING_VALUES
{
  /* 0x0000 */ unsigned long StructureSize;
  /* 0x0004 */ struct _SYSTEM_POWER_POLICY PopPolicy;
  /* 0x00ec */ enum SYSTEM_POWER_CONDITION CurrentAcDcPowerState;
  /* 0x00f0 */ unsigned char AwayModeEnabled;
  /* 0x00f1 */ unsigned char AwayModeEngaged;
  /* 0x00f2 */ unsigned char AwayModePolicyAllowed;
  /* 0x00f3 */ char Padding_944;
  /* 0x00f4 */ long AwayModeIgnoreUserPresent;
  /* 0x00f8 */ volatile long AwayModeIgnoreAction;
  /* 0x00fc */ unsigned char DisableFastS4;
  /* 0x00fd */ unsigned char DisableStandbyStates;
  /* 0x00fe */ char Padding_945[2];
  /* 0x0100 */ unsigned long UnattendSleepTimeout;
  /* 0x0104 */ volatile unsigned long DiskIgnoreTime;
  /* 0x0108 */ volatile unsigned long DeviceIdlePolicy;
  /* 0x010c */ unsigned long VideoDimTimeout;
  /* 0x0110 */ unsigned long VideoNormalBrightness;
  /* 0x0114 */ unsigned long VideoDimBrightness;
  /* 0x0118 */ unsigned long AlsOffset;
  /* 0x011c */ unsigned long AlsEnabled;
  /* 0x0120 */ unsigned long EsBrightness;
  /* 0x0124 */ unsigned char SwitchShutdownForced;
  /* 0x0125 */ char Padding_946[3];
  /* 0x0128 */ unsigned long SystemCoolingPolicy;
  /* 0x012c */ unsigned char MediaBufferingEngaged;
  /* 0x012d */ unsigned char AudioActivity;
  /* 0x012e */ unsigned char FullscreenVideoPlayback;
  /* 0x012f */ char Padding_947;
  /* 0x0130 */ unsigned long EsBatteryThreshold;
  /* 0x0134 */ unsigned char EsAggressive;
  /* 0x0135 */ unsigned char EsUserAwaySetting;
  /* 0x0136 */ char Padding_948[2];
  /* 0x0138 */ unsigned long ConnectivityInStandby;
  /* 0x013c */ unsigned long DisconnectedStandbyMode;
  /* 0x0140 */ unsigned long UserPresencePredictionEnabled;
  /* 0x0144 */ unsigned char AirplaneModeEnabled;
  /* 0x0145 */ unsigned char BluetoothDeviceCharging;
  /* 0x0146 */ char __PADDING__[2];
} POP_POWER_SETTING_VALUES, *PPOP_POWER_SETTING_VALUES; /* size: 0x0148 */

typedef struct _RTLP_RANGE_LIST_ENTRY
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
  union
  {
    struct
    {
      /* 0x0010 */ void* UserData;
      /* 0x0018 */ void* Owner;
    } /* size: 0x0010 */ Allocated;
    struct
    {
      /* 0x0010 */ struct _LIST_ENTRY ListHead;
    } /* size: 0x0010 */ Merged;
  }; /* size: 0x0010 */
  /* 0x0020 */ unsigned char Attributes;
  /* 0x0021 */ unsigned char PublicFlags;
  /* 0x0022 */ unsigned short PrivateFlags;
  /* 0x0024 */ long Padding_949;
  /* 0x0028 */ struct _LIST_ENTRY ListEntry;
} RTLP_RANGE_LIST_ENTRY, *PRTLP_RANGE_LIST_ENTRY; /* size: 0x0038 */

typedef struct _KWAIT_CHAIN_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _KTHREAD* Thread;
  /* 0x0018 */ struct _KEVENT Event;
  /* 0x0030 */ void* AbLockHandle;
} KWAIT_CHAIN_ENTRY, *PKWAIT_CHAIN_ENTRY; /* size: 0x0038 */

typedef struct _CALL_HASH_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ void* CallersAddress;
  /* 0x0018 */ void* CallersCaller;
  /* 0x0020 */ unsigned long CallCount;
  /* 0x0024 */ long __PADDING__[1];
} CALL_HASH_ENTRY, *PCALL_HASH_ENTRY; /* size: 0x0028 */

/*
$$0
$$1
$$10
$$11
$$12
$$13
$$14
$$15
$$16
$$17
$$18
$$19
$$1a
$$1b
$$1c
$$1d
$$1e
$$1f
$$2
$$3
$$4
$$5
$$6
$$7
$$8
$$9
$$a
$$b
$$c
$$d
$$e
$$f
??$RtlpGetCapabilityBitmap@U_RTL_FUNCTION_OVERRIDE_CAPABILITIES@@E@@YAEPEAKPEAU_RTL_FUNCTION_OVERRIDE_CAPABILITIES@@EPEAPEAE@Z
??$Write@U?$_tlgWrapperByVal@$07@@U?$_tlgWrapperByVal@$03@@U2@U?$_tlgWrapperByVal@$00@@U?$_tlgWrapperByRef@$0BA@@@U_tlgWrapperBinary@@U1@U3@U5@U1@U3@U5@U1@U3@U5@U1@U3@U5@U1@U3@U5@U1@U3@U5@U1@U3@U5@U1@U3@U5@U2@U3@@?$_tlgWriteTemplate@$$A6AJPEBU_tlgProvider_t@@PEBXPEBU_GUID@@2IPEAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YAJ0122I3@ZPEBU2@PEBU2@@@SAJPEBU_tlgProvider_t@@PEBXPEBU_GUID@@2AEBU?$_tlgWrapperByVal@$07@@AEBU?$_tlgWrapperByVal@$03@@4AEBU?$_tlgWrapperByVal@$00@@AEBU?$_tlgWrapperByRef@$0BA@@@AEBU_tlgWrapperBinary@@35735735735735735735735745@Z
??$copy@$$CBE$0?0E$0?0@gsl@@YAXV?$span@$$CBE$0?0@0@V?$span@E$0?0@0@@Z
??0RTLP_FLS_CALLBACK_ENTRY@@QEAA@XZ
??0SC_DEVICE@@QEAA@XZ
??0SC_DISK@@QEAA@XZ
??1SC_DEVICE@@UEAA@XZ
??1SC_DISK@@UEAA@XZ
??3SC_ENV_ALLOCATOR@@SAXPEAX@Z
??_ENT_DISK@@UEAAPEAXI@Z
??_ESC_DEVICE@@UEAAPEAXI@Z
??_ESC_DISK@@UEAAPEAXI@Z
??_GNT_DISK@@UEAAPEAXI@Z
??_GSC_DEVICE@@UEAAPEAXI@Z
??_GSC_DISK@@UEAAPEAXI@Z
?Allocate@SC_ENV@@SAPEAX_KKEK@Z
?BTreeChangeKey@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAKPEAU1@PEAUSEARCH_RESULT@1@K@Z
?BTreeDeleteEx@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAJPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeDeleteEx@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAJPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeDeleteEx@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAJPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeDeleteEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAJPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeDeleteNode@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAXPEAU1@PEAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeDeleteNode@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAXPEAU1@PEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeDeleteNode@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAXPEAU1@PEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeDescendToSibling@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAPEAPEAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAUPATH_ENTRY@1@KPEAUSEARCH_RESULT@1@@Z
?BTreeDescendToSibling@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAPEAPEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAUPATH_ENTRY@1@KPEAUSEARCH_RESULT@1@@Z
?BTreeDescendToSibling@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAPEAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAUPATH_ENTRY@1@KPEAUSEARCH_RESULT@1@@Z
?BTreeFindLeafSibling@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAU23@K@Z
?BTreeFindLeafSibling@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAU23@K@Z
?BTreeFindLeafSibling@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAU23@K@Z
?BTreeFindLeafSiblingEx@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@K@Z
?BTreeFindLeafSiblingEx@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@K@Z
?BTreeFindLeafSiblingEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@K@Z
?BTreeFindPreviousEntry@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAPEAU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeFindSeperatorIndexEntry@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAKPEAUSEARCH_RESULT@1@KPEAUPATH_ENTRY@1@@Z
?BTreeFindSeperatorIndexEntry@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAKPEAUSEARCH_RESULT@1@KPEAUPATH_ENTRY@1@@Z
?BTreeFindSeperatorIndexEntry@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAKPEAUSEARCH_RESULT@1@KPEAUPATH_ENTRY@1@@Z
?BTreeInsert@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAJPEAU1@PEAU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@PEAUSEARCH_RESULT@1@@Z
?BTreeInsert@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAJPEAU1@PEAUSMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@PEAUSEARCH_RESULT@1@@Z
?BTreeInsertEx@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAJPEAU1@PEAUSEARCH_RESULT@1@PEAK@Z
?BTreeInsertEx@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAJPEAU1@PEAUSEARCH_RESULT@1@PEAK@Z
?BTreeInsertEx@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAJPEAU1@PEAUSEARCH_RESULT@1@PEAT_SM_PAGE_KEY@@@Z
?BTreeInsertEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAJPEAU1@PEAUSEARCH_RESULT@1@PEAT_SM_PAGE_KEY@@@Z
?BTreeIteratorAttachEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAUITERATOR@1@PEAU1@@Z
?BTreeIteratorCleanup@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAXPEAUITERATOR@1@PEAU1@@Z
?BTreeIteratorCleanup@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAXPEAUITERATOR@1@PEAU1@@Z
?BTreeIteratorFromSearchResult@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAXPEAU1@PEAUITERATOR@1@PEAUSEARCH_RESULT@1@@Z
?BTreeIteratorFromSearchResult@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAXPEAU1@PEAUITERATOR@1@PEAUSEARCH_RESULT@1@@Z
?BTreeIteratorFromSearchResult@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAXPEAU1@PEAUITERATOR@1@PEAUSEARCH_RESULT@1@@Z
?BTreeMergeNodes@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAXPEAU1@PEAUSEARCH_RESULT@1@PEAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeMergeNodes@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAXPEAU1@PEAUSEARCH_RESULT@1@PEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeMergeNodes@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAXPEAU1@PEAUSEARCH_RESULT@1@PEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@@Z
?BTreeMergeNodes@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAXPEAU1@PEAUSEARCH_RESULT@1@PEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeNewNode@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@KK@Z
?BTreeNewNode@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@KK@Z
?BTreeNewNode@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@PEAU1@KK@Z
?BTreeNewNode@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@KK@Z
?BTreeNodeFree@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAXPEAU1@PEAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeNodeFree@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAXPEAU1@PEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeNodeFree@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAXPEAU1@PEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@@Z
?BTreeNodeFree@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAXPEAU1@PEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeRedistribute@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeRedistribute@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeRedistribute@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeRedistribute@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAJPEAU1@KPEAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAJPEAU1@KPEAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAJPEAU1@T_SM_PAGE_KEY@@PEAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAJPEAU1@T_SM_PAGE_KEY@@PEAUSEARCH_RESULT@1@@Z
?BTreeSearchResultCleanup@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAXPEAU1@PEAUSEARCH_RESULT@1@K@Z
?BTreeSearchResultCleanup@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAXPEAU1@PEAUSEARCH_RESULT@1@K@Z
?BTreeSearchResultDeref@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAXPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSearchResultDeref@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAXPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSearchResultDeref@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAXPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSearchResultDeref@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAXPEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSearchResultIterStart@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAJPEAUSEARCH_RESULT@1@PEAU1@KW4_BTREE_ITERATOR_DISPOSITION@1@@Z
?BTreeSplitChild@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSplitChild@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAPEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSplitChild@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeSplitChild@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAPEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU1@PEAUSEARCH_RESULT@1@@Z
?BTreeWalkPostOrderInternal@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SAJPEAU1@PEAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU_SINGLE_LIST_ENTRY@@P6AJPEAX3PEA_K@Z3PEAPEAU23@@Z
?BTreeWalkPostOrderInternal@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SAJPEAU1@PEAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PEAU_SINGLE_LIST_ENTRY@@P6AJPEAX3PEA_K@Z3PEAPEAU23@@Z
?CheckSum@MBR_HEADER@@QEAAKXZ
?ChunkAllocate@?$RTL_BINARY_ARRAY@URTLP_FLS_SLOT@@$03$03@@SAPEAURTL_BINARY_ARRAY_CHUNK@1@PEAU1@K@Z
?Compare@ST_REGION_ENTRY_COMPARATOR@?$ST_STORE@USM_TRAITS@@@@SAHPEAXAEBK1@Z
?CompareLangIDs@@YAHPEBX0@Z
?CompareLangName@@YAHPEBX0@Z
?ComputeChs@MBR_ENTRY@@QEAAXPEAU_DISK_GEOMETRY@@@Z
?Control@NT_DISK@@UEAAJKPEAXK0K@Z
?CreateGuid@SC_ENV@@SAJPEAU_GUID@@@Z
?CreatePartitionTable@SC_DISK@@QEAAJPEAU_CREATE_DISK@@@Z
?CreatePartitionTable@SC_GPT@@QEAAJPEAU_CREATE_DISK@@@Z
?CreatePartitionTable@SC_MBR@@QEAAJPEAU_CREATE_DISK@@@Z
?CreatePartitionTable@SC_RAW@@QEAAJXZ
?Free@SC_ENV@@SAXPEAXK@Z
?GenerateId@SC_DISK@@AEAAJXZ
?GetPnpProperty@NT_DISK@@UEAAJPEAXPEAPEAX@Z
?GetStorageProperty@SC_DEVICE@@QEAAJW4_STORAGE_PROPERTY_ID@@PEAPEAU_STORAGE_DESCRIPTOR_HEADER@@@Z
?GetStoragePropertyPost@SC_DEVICE@@MEAAJW4_STORAGE_PROPERTY_ID@@PEAU_STORAGE_DESCRIPTOR_HEADER@@@Z
?GetStoragePropertyPost@SC_DISK@@MEAAJW4_STORAGE_PROPERTY_ID@@PEAU_STORAGE_DESCRIPTOR_HEADER@@@Z
?GetStoragePropertyPre@SC_DEVICE@@MEAAJW4_STORAGE_PROPERTY_ID@@PEAK@Z
?GetStoragePropertyPre@SC_DISK@@MEAAJW4_STORAGE_PROPERTY_ID@@PEAK@Z
?Initialize@NT_DISK@@QEAAJPEAU_DEVICE_OBJECT@@@Z
?Initialize@SC_DEVICE@@UEAAJXZ
?Initialize@SC_DISK@@UEAAJXZ
?Initialize@SC_MBR@@QEAAXPEAVSC_DISK@@@Z
?InitializePartitionCache@SC_DISK@@QEAAJXZ
?IsNeutralLanguageItem@@YAHPEBUCultureDataType@@@Z
?IsUnused@SC_PART_ENTRY@@QEAAEXZ
?IsVbr@SC_DISK@@QEAAEXZ
?KiAdaptThreadIdealProcessorForProcessIdealSetChange@@YAXPEAU_KPROCESS@@PEAU_KTHREAD@@PEAU_KAFFINITY_EX@@2PEAE3PEAK@Z
?KiAddProcessorToGroupSchedulingList@@YAXPEAU_KPRCB@@PEAU_LIST_ENTRY@@K@Z
?KiAdjustRescheduleContextEntryForThreadRemoval@@YAXPEAU_KI_RESCHEDULE_CONTEXT_ENTRY@@PEAU_KTHREAD@@EE@Z
?KiAdvanceReadyQueueEnumeratorToNextList@@YAJPEAU_KI_READY_QUEUE_ENUMERATOR@@@Z
?KiAdvanceReadyQueueEnumeratorToNextPhase@@YAJPEAU_KI_READY_QUEUE_ENUMERATOR@@@Z
?KiAdvanceReadyQueueEnumeratorToNextProcessor@@YAJPEAU_KI_READY_QUEUE_ENUMERATOR@@@Z
?KiAdvanceReadyQueueEnumeratorToNextRootScb@@YAJPEAU_KI_READY_QUEUE_ENUMERATOR@@@Z
?KiAdvanceReadyQueueEnumeratorToNextScb@@YAJPEAU_KI_READY_QUEUE_ENUMERATOR@@@Z
?KiAndAffinityEx@@YAKPEAU_KAFFINITY_EX@@00G@Z
?KiAndAffinityExNoResult@@YAKPEAU_KAFFINITY_EX@@0@Z
?KiAssignSchedulingGroupWeights@@YAXW4_KSCHEDULING_GROUP_TYPE@@EPEAU_KSCHEDULING_GROUP@@@Z
?KiCanLocalReadyThreadBeScheduledToRescheduleContextEntry@@YAEPEAU_KI_RESCHEDULE_CONTEXT_ENTRY@@PEAU_KTHREAD@@PEAU_KPRCB@@PEAU_KSHARED_READY_QUEUE@@PEAU_KSCB@@@Z
?KiChargeSchedulingGroupCycleTime@@YAEPEAU_KSCHEDULING_GROUP@@PEAU_KSCB@@@Z
?KiCheckForEffectivePriorityChange@@YAXPEAU_KPRCB@@PEAT_KISOLATION_UNIT_LOCK_HANDLE@@PEAU_KSCB@@@Z
?KiCheckMaxOverQuotaTransition@@YAEPEAU_KSCB@@PEAU_KSCHEDULING_GROUP@@@Z
?KiClearSystemPriority@@YAXPEAU_KTHREAD@@PEAJ@Z
?KiCommitRescheduleContextEntry@@YAEPEAU_KI_RESCHEDULE_CONTEXT_ENTRY@@PEAU_KPRCB@@KPEAU_SINGLE_LIST_ENTRY@@@Z
?KiComplementAffinityEx@@YAXPEAU_KAFFINITY_EX@@G0@Z
?KiCompleteRescheduleContextEntry@@YAXPEAU_KI_RESCHEDULE_CONTEXT_ENTRY@@PEAU_KPRCB@@PEAU_KTHREAD@@PEAU_KTHREAD_SCHEDULE_REASON_DATA@@@Z
?KiComputeGroupSchedulingRank@@YAXPEAU_KSCHEDULING_GROUP@@PEAU_KPRCB@@PEAT_KISOLATION_UNIT_LOCK_HANDLE@@PEAU_KSCB@@@Z
?KiConstrainIdealProcessorSetBreakpoints@@YAXPEAU_KI_IDEAL_PROCESSOR_SET_BREAKPOINTS@@0@Z
?KiCopyAffinityEx@@YAXPEAU_KAFFINITY_EX@@G0@Z
?KiDeregisterObjectWaitBlock@@YAEPEAXPEAU_KWAIT_BLOCK@@@Z
?KiDoesThreadDominateRescheduleContextEntry@@YAEPEAU_KI_RESCHEDULE_CONTEXT_ENTRY@@PEAU_KTHREAD@@KPEAPEAU_KSCB@@@Z
?KiEnableGroupScheduling@@YAXXZ
?KiFindRescheduleContextEntryForPrcb@@YAPEAU_KI_RESCHEDULE_CONTEXT_ENTRY@@PEAU_KI_RESCHEDULE_CONTEXT@@PEAU_KPRCB@@@Z
?KiFlushScbReferences@@YAXPEAU_KPRCB@@PEAU_KSCB@@@Z
?KiFlushScbReferencesDpc@@YAXPEAU_KDPC@@PEAX11@Z
?KiForceIdleParkUnparkDpcRoutine@@YAXPEAU_KDPC@@PEAX11@Z
?KiForceIdleParkUnparkProcessor@@YAXPEAU_KPRCB@@E@Z
?KiForceIdleStartDpcRoutine@@YAXPEAU_KDPC@@PEAX11@Z
?KiForceIdleStopDpcRoutine@@YAXPEAU_KDPC@@PEAX11@Z
?KiForceIdleUpdateSchedulerParkState@@YAXE@Z
?KiIdealProcessorRebalancerTimerCallback@@YAXPEAU_KTIMER2@@PEAX@Z
?KiIdealProcessorRebalancerWorker@@YAXPEAX@Z
?KiInitializeMutant@@YAXPEAU_KMUTANT@@EEK@Z
?KiInitializeProcessConcurrencyCount@@YAXPEAT_KI_PROCESS_CONCURRENCY_COUNT@@K@Z
?KiInitializeProcessorGroupSchedulingData@@YAXPEAU_KPRCB@@@Z
?KiInitializeScb@@YAXPEAU_KSCB@@PEAU_KSCHEDULING_GROUP@@1K@Z
?KiInsertNonMaxOverQuotaScb@@YAXPEAU_KSCB@@PEAU_KPRCB@@E@Z
?KiInsertSchedulingGroupQueue@@YAXPEAU_KPRCB@@PEAU_KSCB@@E@Z
?KiInterruptMessageDispatch@@YAEPEAU_KINTERRUPT@@PEAX@Z
?KiIsConcurrencyCountWithinIdealProcessorSetBreakpoints@@YAEPEAU_KI_IDEAL_PROCESSOR_SET_BREAKPOINTS@@PEAT_KI_PROCESS_CONCURRENCY_COUNT@@@Z
?KiLogSingleSchedulingGroupRundown@@YAXPEAU_ETW_SILODRIVERSTATE@@KPEAU_KSCHEDULING_GROUP@@@Z
?KiMaskInterruptDpc@@YAXPEAU_KDPC@@PEAX11@Z
?KiMoveScbThreadsToNewReadylist@@YAXPEAU_KSCB@@0PEAU_KPRCB@@PEAU_SINGLE_LIST_ENTRY@@@Z
?KiOrAffinityEx@@YAKPEAU_KAFFINITY_EX@@00G@Z
?KiOrAffinityExNoResult@@YAKPEAU_KAFFINITY_EX@@0@Z
?KiRecomputeGroupSchedulingRank@@YAXPEAU_KSCHEDULING_GROUP@@PEAU_KSCB@@PEAU_KPRCB@@@Z
?KiRemoveSchedulingGroupQueue@@YAXPEAU_KPRCB@@PEAU_KSCB@@E@Z
?KiResetScb@@YAXPEAU_KSCB@@PEAU_KPRCB@@@Z
?KiResortScbQueue@@YAEPEAU_KPRCB@@PEAU_KSCB@@E@Z
?KiSelectIdealProcessorForProcess@@YAGPEAU_KSCHEDULER_SUBNODE@@PEAU_GROUP_AFFINITY@@@Z
?KiSelectIdealProcessorSetForGroup@@YAXPEAU_GROUP_AFFINITY@@GK_KPEA_KPEAU_KI_IDEAL_PROCESSOR_SET_BREAKPOINTS@@@Z
?KiSelectIdealProcessorSetForNode@@YAXPEAU_KSCHEDULER_SUBNODE@@_KGK1PEA_KPEAK3@Z
?KiSelectIdealProcessorSetForProcessGroup@@YAXPEAU_KPROCESS@@GKPEA_KPEAU_KI_IDEAL_PROCESSOR_SET_BREAKPOINTS@@@Z
?KiSelectIdealProcessorSetsForProcess@@YAXPEAU_KPROCESS@@PEAT_KI_PROCESS_CONCURRENCY_COUNT@@PEAU_KAFFINITY_EX@@PEAU_KI_IDEAL_PROCESSOR_SET_BREAKPOINTS@@@Z
?KiSetIdealProcessorThread@@YAJPEAU_KTHREAD@@KEPEAKE@Z
?KiSetProcessConcurrencyCount@@YAXPEAU_KPROCESS@@T_KI_PROCESS_CONCURRENCY_COUNT@@PEAE@Z
?KiSetSystemPriorityThread@@YAXPEAU_KTHREAD@@JK@Z
?KiStartRescheduleContextEntry@@YAXPEAU_KI_RESCHEDULE_CONTEXT_ENTRY@@PEAU_KPRCB@@PEAT_KISOLATION_UNIT_LOCK_HANDLE@@PEAU_KTHREAD@@@Z
?KiSubtractAffinityEx@@YAKPEAU_KAFFINITY_EX@@00G@Z
?KiSubtractAffinityExNoResult@@YAKPEAU_KAFFINITY_EX@@0@Z
?KiUpdateChildrenCpuTarget@@YAXPEAU_LIST_ENTRY@@E@Z
?KiUpdateCpuTargetByRate@@YAXPEAU_KSCHEDULING_GROUP@@E@Z
?KiUpdateCpuTargetByWeight@@YAXPEAU_KSCHEDULING_GROUP@@E@Z
?KiUpdateMinimumWeight@@YAEW4_KSCHEDULING_GROUP_TYPE@@EPEAU_KSCHEDULING_GROUP@@@Z
?KiUpdateProcessConcurrencyCounts@@YAXXZ
?KiXorAffinityEx@@YAKPEAU_KAFFINITY_EX@@00G@Z
?MinCryptCopyAsn1IntToFixedBuffer@@YAJPEBEKPEAEK@Z
?NpCleanup@NP_CONTEXT@@SAXPEAU1@K@Z
?NpGetResidentLeaf@NP_CONTEXT@@SAPEAUB_TREE_NODE_HDR@@PEAUNP_CTX@1@PEAT_NP_LEAF_PTR@@@Z
?NpLeafDerefInternal@NP_CONTEXT@@SAXPEAUNP_CTX@1@PEAPEAX@Z
?NpLeafRefInternal@NP_CONTEXT@@SAPEAXPEAUNP_CTX@1@PEAPEAXK@Z
?NpLeafRemoveInternal@NP_CONTEXT@@SAPEAXPEAUNP_CTX@1@PEAPEAX@Z
?NpNodeAllocate@NP_CONTEXT@@SAPEAXPEAUNP_CTX@1@KK@Z
?NpNodeFree@NP_CONTEXT@@SAXPEAUNP_CTX@1@PEAXK@Z
?NpNodesPageOut@NP_CONTEXT@@SAJPEAUNP_CTX@1@@Z
?NpStart@NP_CONTEXT@@SAJPEAU1@PEAU_NP_PARAMETERS@1@@Z
?NpiGetReservedBuffer@NP_CONTEXT@@SAPEAXPEAU1@PEAUNP_CTX@1@@Z
?NpiLeafPageIn@NP_CONTEXT@@SAXPEAU1@PEAUNP_CTX@1@PEAT_NP_LEAF_PTR@@@Z
?NpiPerformPageOut@NP_CONTEXT@@SAJPEAU1@PEAUNP_CTX@1@@Z
?NpiRebaseCallback@NP_CONTEXT@@SAJPEAX0PEA_K@Z
?NpiTreeWalkCallback@NP_CONTEXT@@SAJPEAX0PEA_K@Z
?PspCopyNtdllExport@@YAJPEBU_PS_SYSTEM_DLL_INFO@@KPEADPEAX_K@Z
?PspFinalizeScpCfgPage@@YAJV?$span@E$0?0@gsl@@W4_RTL_SCP_CFG_PAGE_TYPE@@PEAX2PEAU_RTL_SCP_CFG_NTDLL_EXPORTS@@PEAU_RTL_SCP_CFG_NTDLL_EXPORTS_ARM64EC@@EK@Z
?PspLocateNtdllAddressesForScpCfg@@YAJKEKPEAU_RTL_SCP_CFG_NTDLL_EXPORTS@@PEAU_RTL_SCP_CFG_NTDLL_EXPORTS_ARM64EC@@@Z
?Read@NT_DISK@@UEAAJ_KKPEAE@Z
?ReadEntries@SC_GPT@@AEAAJPEAVGPT_HEADER@@PEAPEAVGPT_ENTRY@@@Z
?ReadEntries@SC_GPT@@AEAAJPEAVGPT_HEADER@@PEAVGPT_ENTRY@@@Z
?ReadHeader@SC_GPT@@AEAAJKPEAVGPT_HEADER@@@Z
?ReadPartitionTable@SC_DISK@@QEAAJPEAPEAVSC_DISK_LAYOUT@@@Z
?ReadPartitionTable@SC_GPT@@QEAAJPEAPEAVSC_DISK_LAYOUT@@@Z
?ReadPartitionTable@SC_MBR@@QEAAJPEAPEAVSC_DISK_LAYOUT@@@Z
?ReadPartitionTable@SC_RAW@@QEAAJPEAPEAVSC_DISK_LAYOUT@@@Z
?ReadSectors@SC_DISK@@QEAAJK_KPEAX@Z
?ResetPartitionCache@SC_DISK@@QEAAJXZ
?RtlStringCbCopyUnicodeString@@YAJPEAG_KPEBU_UNICODE_STRING@@@Z
?RtlStringCbCopyW@@YAJPEAG_KPEBG@Z
?RtlpAllocateFunctionOverrideInfo@@YAJV?$span@$$CBK$0?0@gsl@@KPEAPEAU_RTL_FUNCTION_OVERRIDE_INFORMATION@@@Z
?RtlpCompareRelocation@@YAHPEBX0@Z
?RtlpCreateFunctionOverrideFixupInfo@@YAJV?$span@$$CBE$0?0@gsl@@KKPEBU_RTL_FUNCTION_OVERRIDE_CAPABILITIES@@PEAPEAU_RTL_FUNCTION_OVERRIDE_INFORMATION@@PEBU_RTL_SYSTEM_OVERRIDE_INFORMATION@@@Z
?RtlpFindFunctionOverrideDvrtRecord@@YAJV?$span@$$CBE$0?0@gsl@@PEAV12@@Z
?RtlpGetFunctionOverrideIndex@@YAPEAU_RTL_FUNCTION_OVERRIDE_INDEX@@PEAU_RTL_FUNCTION_OVERRIDE_INFORMATION@@K@Z
?RtlpGetFunctionOverrideIndex@@YAPEBU_RTL_FUNCTION_OVERRIDE_INDEX@@PEBU_RTL_FUNCTION_OVERRIDE_INFORMATION@@K@Z
?RtlpGetRelocationLastByteRva@@YAGPEBU_RTL_FUNCTION_OVERRIDE_RELOCATION@@@Z
?RtlpGetSystemOverrideRva@@YA_NKEPEBU_RTL_SYSTEM_OVERRIDE_INFORMATION@@PEAKK@Z
?RtlpParseBinaryDecisionDiagram@@YAJV?$span@$$CBE$0?0@gsl@@V?$span@$$CBK$0?0@2@KPEBU_RTL_FUNCTION_OVERRIDE_CAPABILITIES@@PEAU_RTL_FUNCTION_OVERRIDE_ENTRY@@PEBU_RTL_SYSTEM_OVERRIDE_INFORMATION@@K@Z
?RtlpParseFunctionOverrideRelocations@@YAJKV?$span@$$CBE$0?0@gsl@@KPEAU_RTLP_PARSE_RELOCATIONS_PACKET@@@Z
?RtlpRecordFunctionOverrideRelocation@@YAXPEAU_RTLP_PARSE_RELOCATIONS_PACKET@@EKGGE@Z
?RtlpSelectFunctionFromBinaryDecisionDiagram@@YAXV?$span@$$CBU_IMAGE_BDD_DYNAMIC_RELOCATION@@$0?0@gsl@@V?$span@$$CBK$0?0@2@PEAU_RTL_FUNCTION_OVERRIDE_ENTRY@@PEBU_RTL_FUNCTION_OVERRIDE_CAPABILITIES@@EPEBU_RTL_SYSTEM_OVERRIDE_INFORMATION@@K@Z
?RtlpSortAndValidateRelocations@@YAJPEAU_RTL_FUNCTION_OVERRIDE_INFORMATION@@@Z
?ST_PAGE_RECORD_GET@?$ST_STORE@USM_TRAITS@@@@SAPEAU_ST_PAGE_RECORD@1@PEAU_ST_DATA_MGR@1@PEAU_ST_PAGE_ENTRY@1@@Z
?SaveStorageProperty@SC_DEVICE@@MEAAXW4_STORAGE_PROPERTY_ID@@PEAU_STORAGE_DESCRIPTOR_HEADER@@@Z
?SaveStorageProperty@SC_DISK@@MEAAXW4_STORAGE_PROPERTY_ID@@PEAU_STORAGE_DESCRIPTOR_HEADER@@@Z
?ScAnsiToUnicodeString@@YAJPEADPEAU_UNICODE_STRING@@@Z
?ScExtractDeviceStrings@@YAJPEAU_STORAGE_DEVICE_DESCRIPTOR@@PEAU_UNICODE_STRING@@111@Z
?ScTrimString@@YAXPEAD@Z
?SetPartition@SC_DISK@@QEAAJKPEAU_SET_PARTITION_INFORMATION_EX@@@Z
?SetValue@?$RTL_BINARY_ARRAY@URTLP_FLS_SLOT@@$03$03@@SAJPEAU1@KURTLP_FLS_SLOT@@K@Z
?SlotAllocate@?$RTL_BINARY_ARRAY@URTLP_FLS_CALLBACK_ENTRY@@$03$03@@SAKPEAU1@@Z
?SlotFree@?$RTL_BINARY_ARRAY@URTLP_FLS_CALLBACK_ENTRY@@$03$03@@SAXPEAU1@K@Z
?SmAsyncReadQueueInsert@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAU_SM_ASYNC_READ_QUEUE@1@PEAU_SM_ASYNC_DIRECT_READ_CTX@1@K@Z
?SmAsyncReadQueueWorker@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAX@Z
?SmBugcheckCallback@@YAXW4_KBUGCHECK_CALLBACK_REASON@@PEAU_KBUGCHECK_REASON_CALLBACK_RECORD@@PEAXK@Z
?SmCleanup@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@@Z
?SmCompressCtxBalancerThread@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAX@Z
?SmCompressCtxCompleteEntry@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU_SM_COMPRESS_THREAD_CTX@1@PEAU_SM_WORK_ITEM@1@KKJ@Z
?SmCompressCtxCompletePendingEntry@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU_SM_COMPRESS_THREAD_CTX@1@@Z
?SmCompressCtxCreateThread@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU_SM_COMPRESS_CONTEXT@1@PEAU1@PEAKP6AXPEAX@Z@Z
?SmCompressCtxCreateThreadParams@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAPEAU_SM_COMPRESS_THREAD_PARAMS@1@PEAU_SM_COMPRESS_CONTEXT@1@K@Z
?SmCompressCtxDeleteThreadParams@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU_SM_COMPRESS_THREAD_PARAMS@1@@Z
?SmCompressCtxNewThreadNeeded@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU_SM_COMPRESS_CONTEXT@1@@Z
?SmCompressCtxProcessEntry@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU_SM_COMPRESS_THREAD_CTX@1@PEAU_SM_COMPRESS_ENTRY@1@@Z
?SmCompressCtxProcessReadyQueue@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU_SM_COMPRESS_CONTEXT@1@PEAU1@E@Z
?SmCompressCtxQueueEntries@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU_SM_COMPRESS_CONTEXT@1@PEAU_PF_QUEUE@@@Z
?SmCompressCtxStart@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU_SM_COMPRESS_CONTEXT@1@W4_ST_COMPRESSION_FORMAT@@@Z
?SmCompressCtxUpdatePriority@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU_SM_COMPRESS_CONTEXT@1@J@Z
?SmCompressCtxUpdateThreadTopology@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU_SM_COMPRESS_CONTEXT@1@PEAU_ETHREAD@@@Z
?SmCompressCtxWorkerThread@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAX@Z
?SmCompressManagerCleanup@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU_SM_COMPRESS_MANAGER@1@@Z
?SmCompressManagerGetIdealProcessor@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU_SM_COMPRESS_MANAGER@1@KK@Z
?SmCompressManagerStart@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU_SM_COMPRESS_MANAGER@1@W4_ST_COMPRESSION_FORMAT@@@Z
?SmCompressManagerUpdateMemoryCondition@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU_SM_COMPRESS_MANAGER@1@W4_SMP_MEMORY_CONDITION@@K@Z
?SmCompressManagerUpdateTopology@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU_SM_COMPRESS_MANAGER@1@@Z
?SmDrainSList@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAT_SLIST_HEADER@@K@Z
?SmEvictKeys@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAT_SM_PAGE_KEY@@KPEAU?$SMKM_STORE@USM_TRAITS@@@@@Z
?SmFatalHeapCorruptionDumpCallback@@YAXW4_KBUGCHECK_CALLBACK_REASON@@PEAU_KBUGCHECK_REASON_CALLBACK_RECORD@@PEAXK@Z
?SmFeAddComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAT_SM_PAGE_KEY@@KKK@Z
?SmFeAddInitiate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAU_SMKM_ADD_PAGE_CONTEXT@1@K@Z
?SmFeCheckPresent@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@PEAK2@Z
?SmFeDeleteEntry@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAUSEARCH_RESULT@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@PEAUITERATOR@3@PEAUSMKM_FRONTEND_ENTRY@1@@Z
?SmFeEmpty@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@@Z
?SmFeEvictComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAT_SM_PAGE_KEY@@KK@Z
?SmFeEvictInitiate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@PEAK2@Z
?SmFeEvictUpdatePass@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@PEAK2PEAUSEARCH_RESULT@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@@Z
?SmFeSetEvictFailed@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAT_SM_PAGE_KEY@@KK@Z
?SmFeStoreDelete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@K@Z
?SmFeStoreEvictKeys@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAT_SM_PAGE_KEY@@KK@Z
?SmFirstTimeInit@@YAJPEAU_SM_PARTITION@@K@Z
?SmHighMemPriorityTimerStart@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@@Z
?SmHighMemPriorityWatchdogTimerCallback@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU_KTIMER2@@PEAX@Z
?SmHighMemPriorityWatchdogWorker@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAX@Z
?SmInitialize@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAU_SMKM_STORE_MGR_PARAMS@@@Z
?SmIoCtxQueueWork@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU_SM_IO_CONTEXT@1@PEAU1@KPEAU_SM_WORK_ITEM@1@@Z
?SmIoCtxWorkItemComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU_ST_WORK_ITEM_HDR@@PEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@J@Z
?SmKmIssueFileIo@@YAJPEAU_SMKM_FILE_INFO@@PEAU_SMKM_ISSUE_IO_PARAMS@@PEAT_LARGE_INTEGER@@P6AXPEAXPEAU_IO_STATUS_BLOCK@@K@Z3@Z
?SmKmProbeAndLockAddress@@YAJPEAX_KPEAU_MDL@@K@Z
?SmPageRead@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAT_SM_PAGE_KEY@@PEAU_MDL@@PEAXPEAU_IO_STATUS_BLOCK@@@Z
?SmPageWrite@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAT_SM_PAGE_KEY@@T_SM_PAGE_ADD_PARAM@@PEAU_MDL@@PEAXPEAU_IO_STATUS_BLOCK@@PEAU_SMKM_WRITE_QUEUE_CONTEXT@@@Z
?SmPerformStoreMaintenance@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@W4_ST_MAINTENANCE_TYPE@@@Z
?SmProcessAddCompletion@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAU_SM_WORK_ITEM@1@KPEAU?$SMKM_STORE@USM_TRAITS@@@@J@Z
?SmProcessIoCompletion@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAT_SM_PAGE_KEY@@KKJK@Z
?SmReadPickStore@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAT_SM_PAGE_KEY@@PEAKPEAPEAU?$SMKM_STORE@USM_TRAITS@@@@2@Z
?SmStAcquireStoreLockExclusive@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@@Z
?SmStAllocatePhysicalRegion@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@K@Z
?SmStAllocateVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@K@Z
?SmStCheckLockInProgressRegionComplete@?$SMKM_STORE@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_VIRTUAL_REGION@@K@Z
?SmStCleanup@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@@Z
?SmStCompareRegionDataCallback@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU_SMKM_STORE_HELPER@@PEAXK@Z
?SmStDirectRead@?$SMKM_STORE@USM_TRAITS@@@@SAKPEAU1@PEAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@@Z
?SmStDirectReadCallout@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAX@Z
?SmStDirectReadComplete@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@PEAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@J@Z
?SmStDirectReadIssue@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@PEAX@Z
?SmStEtwFillStoreEvent@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@PEAU_SMKM_EVENT_DESCRIPTOR@@@Z
?SmStEtwFillStoreStatsEvent@?$SMKM_STORE@USM_TRAITS@@@@SAKPEAU1@PEAU_SMKM_EVENT_DESCRIPTOR@@@Z
?SmStFindVirtualLockedRegion@?$SMKM_STORE@USM_TRAITS@@@@SAPEAU_SM_VIRTUAL_LOCKED_REGION@@PEAU1@KPEAX@Z
?SmStGetStoreStats@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@W4_ST_STATS_LEVEL@@PEAU_ST_STATS@@PEAK@Z
?SmStHelperSendCommand@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@W4_SMKM_STORE_HELPER_COMMAND@@PEAU_SMKM_STORE_HELPER_PARAMS@@K@Z
?SmStInSwapStore@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@@Z
?SmStInitialize@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@@Z
?SmStIsRegionBusy@?$SMKM_STORE@USM_TRAITS@@@@SAKPEAU1@K@Z
?SmStLockVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SAPEAXPEAU1@KPEAT_SM_VIRTUAL_REGION@@PEAXK@Z
?SmStMapPhysicalRegion@?$SMKM_STORE@USM_TRAITS@@@@SAPEAXPEAU1@KKKK@Z
?SmStMapRegion@?$SMKM_STORE@USM_TRAITS@@@@SAPEADPEAU1@KKKK@Z
?SmStMapVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SAPEAXPEAU1@KKKK@Z
?SmStOutSwapPrepareStore@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@@Z
?SmStOutSwapStore@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@@Z
?SmStPrioritizeRegionsStore@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_SMST_PRIORITIZE_REGIONS_CTX@@@Z
?SmStReadThread@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAX@Z
?SmStReleaseStoreLockExclusive@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@@Z
?SmStReleaseVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@KK@Z
?SmStStart@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_SMST_PARAMETERS@@@Z
?SmStSwapStore@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@W4_SM_STORE_SWAP_OPERATION@@@Z
?SmStTrimWsStore@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@_K@Z
?SmStTrimWsStoreBatch@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@PEAKPEAPEAXKKPEA_K@Z
?SmStUnhandledExceptionFilter@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAXPEAU_EXCEPTION_POINTERS@@W4_SMST_STORE_EXCEPTION_SOURCE@1@@Z
?SmStUnmapPhysicalRegion@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@KKKPEAXK@Z
?SmStUnmapVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@KKKPEAXK@Z
?SmStUpdateMemoryCondition@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@W4_SMP_MEMORY_CONDITION@@@Z
?SmStWorkItemQueue@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAU1@PEAU_ST_WORK_ITEM_HDR@@K@Z
?SmStWorker@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAX@Z
?SmStWorkerThread@?$SMKM_STORE@USM_TRAITS@@@@SAXPEAX@Z
?SmStWorkerThreadStartThread@?$SMKM_STORE@USM_TRAITS@@@@SAJPEAU1@PEAXP6AX1@ZPEAPEAU_ETHREAD@@@Z
?SmStoreCompressCompleteCompressedChunks@@YAJPEAU_SM_COMPRESSED_PAGE_HEADER@@PEAKK1@Z
?SmStoreContentsRundown@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@@Z
?SmStoreDecompressBufferContextCleanup@@YAXPEAU_SM_STORE_DECOMPRESS_BUFFER_CONTEXT@@@Z
?SmStoreMgrCallback@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU_SMKM_STORE_LIST@@PEAXW4_SMKM_CALLBACK_TYPE@@@Z
?SmStorePrepare@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@@Z
?SmStoreRequest@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@KPEAU_SM_WORK_ITEM@1@PEAU_KEVENT@@PEAU_IO_STATUS_BLOCK@@@Z
?SmStoreRequestEx@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@PEAU_SM_WORK_ITEM@1@PEAU_KEVENT@@PEAU_IO_STATUS_BLOCK@@@Z
?SmStoreTerminate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@W4_ST_ETW_TERMINATION_REASON@@J@Z
?SmSwapStore@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@W4_SM_STORE_SWAP_OPERATION@@@Z
?SmTrimWsStore@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAJPEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@_K@Z
?SmUpdateMemoryConditions@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@W4_SMP_MEMORY_CONDITION@@K@Z
?SmWorkItemFree@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAU?$SMKM_STORE@USM_TRAITS@@@@PEAU_ST_WORK_ITEM_HDR@@PEAJ@Z
?SmWorkItemFreeResource@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAXPEAU1@PEAU_SM_WORK_ITEM@1@PEAU_SM_IO_CONTEXT@1@@Z
?SmpDeviceIoCompletion@@YAJPEAU_DEVICE_OBJECT@@PEAU_IRP@@PEAX@Z
?SmpIoCompletionApc@@YAXPEAXPEAU_IO_STATUS_BLOCK@@K@Z
?SmpPageEvict@?$SMKM_STORE_MGR@USM_TRAITS@@@@SAKPEAU1@PEAT_SM_PAGE_KEY@@KPEAX@Z
?SmpProcessQueryStoreStats@@YAJPEAU_EPROCESS@@PEAU_ST_STATS@@@Z
?SmpStoreMgrCallback@@YAJPEAU_SMKM_STORE_LIST@@PEAXW4_SMKM_CALLBACK_TYPE@@@Z
?StAcquireReadContext@?$ST_STORE@USM_TRAITS@@@@SAPEAXPEAU1@@Z
?StAddRemoveRegions@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_ST_WORK_ITEM@1@@Z
?StCleanup@?$ST_STORE@USM_TRAITS@@@@SAXPEAU1@@Z
?StCompactRegions@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEADK1KK@Z
?StCompactionFindEmptiest@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@PEAPEAT_ST_REGION_STATE@1@KK@Z
?StCompactionPerformEmergency@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@@Z
?StCompactionPerformInMem@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@K@Z
?StCompactionPickPriority@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@PEAPEAT_ST_REGION_STATE@1@K1K@Z
?StCompactionWorker@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@@Z
?StCopyIoStats@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_IO_STATS@@PEAU_ST_IO_COUNTS@@@Z
?StDeviceIoBuild@?$ST_STORE@USM_TRAITS@@@@SAPEAU_ST_WORK_ITEM@1@PEAU_ST_DATA_MGR@1@PEAU_ST_PAGE_LOCATION@1@KPEAX@Z
?StDeviceIoIsFailed@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DEVICE_IO@1@PEAJ@Z
?StDeviceIoIssue@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_PF_QUEUE@@@Z
?StDeviceWorkItemCleanup@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@PEAU_ST_WORK_ITEM@1@@Z
?StDmCheckForCompaction@?$ST_STORE@USM_TRAITS@@@@SA?AW4_ST_COMPACTION_CHECK_RESULT@@PEAU_ST_DATA_MGR@1@K@Z
?StDmCleanup@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@K@Z
?StDmCombineBufferAddEntry@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_SM_PAGE_COMBINE_BUFFER@@PEAU_STDM_COMBINE_ENTRY_CACHE@1@PEAU_ST_PAGE_RECORD@1@@Z
?StDmCombineBufferProcess@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAPEAU_SM_PAGE_COMBINE_BUFFER@@@Z
?StDmCombineLazyCleanup@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@@Z
?StDmCombineRegion@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@K@Z
?StDmCombineTargetCompare@?$ST_STORE@USM_TRAITS@@@@SAHPEAXPEBX1@Z
?StDmCompletePendingReads@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_PAGE_LOCATION@1@PEAU_STDM_READ_CONTEXT@1@PEAU_ST_WORK_ITEM@1@KPEAK@Z
?StDmCurrentRegionSet@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@KK@Z
?StDmDeviceError@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@W4_ST_DEVICE_FAIL_TYPE@1@J@Z
?StDmDeviceIoCompletion@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_WORK_ITEM@1@@Z
?StDmDeviceIoTransfer@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_WORK_ITEM@1@PEAU_ST_DEVICE_IO@1@@Z
?StDmEtaPerformIo@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@KK@Z
?StDmEtaRefresh@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@@Z
?StDmEtwPageRundown@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@@Z
?StDmEtwRegionRundown@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@@Z
?StDmFinishPageRetrieve@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_PAGE_LOCATION@1@PEAU_STDM_READ_CONTEXT@1@PEAU_ST_WORK_ITEM@1@J@Z
?StDmFixSingleBitCorruption@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@PEADKK@Z
?StDmGetSpaceStats@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@PEAK1@Z
?StDmGetStatsBitmap@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@KPEAEPEA_K@Z
?StDmHandleDecompressionFailure@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAD1PEAU_ST_PAGE_LOCATION@1@PEAU_STDM_READ_CONTEXT@1@@Z
?StDmInitialize@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@0@Z
?StDmInvalidateCurrentRegions@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@@Z
?StDmIsCurrentRegion@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@K@Z
?StDmLazyRegionsWorker@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@KPEAU_ST_WORK_ITEM@1@@Z
?StDmLazyWorkItemQueue@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@PEAU_ST_WORK_ITEM@1@@Z
?StDmPageError@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAD1PEAU_ST_PAGE_LOCATION@1@PEAU_STDM_READ_CONTEXT@1@J@Z
?StDmPageRecordRemove@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_PAGE_RECORD@1@PEAUSEARCH_RESULT@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@@Z
?StDmPageRecordUnprotect@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@PEAU_ST_PAGE_RECORD@1@@Z
?StDmPageRemove@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_WORK_ITEM@1@@Z
?StDmPageRetrieve@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_STDM_READ_CONTEXT@1@PEAU_ST_WORK_ITEM@1@@Z
?StDmPickRandomRegion@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@@Z
?StDmRegionEvict@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_STDM_SEARCH_RESULTS@1@KKKK@Z
?StDmRegionGetKeys@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_STDM_SEARCH_RESULTS@1@KKKPEAT_SM_PAGE_KEY@@PEAK@Z
?StDmRegionRemove@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAK@Z
?StDmReuseCurrentRegion@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_CURRENT_REGION@1@@Z
?StDmSinglePageCopy@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAXPEAD2PEAU_ST_PAGE_LOCATION@1@PEAU_STDM_READ_CONTEXT@1@@Z
?StDmSinglePageRetrieveSync@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAX1K@Z
?StDmSinglePageTransfer@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAXPEAD11PEAU_ST_PAGE_LOCATION@1@PEAU_STDM_READ_CONTEXT@1@@Z
?StDmStart@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_ST_DATA_MGR@1@PEAU_STDM_PARAMETERS@@PEAU_RTL_BITMAP@@PEAKK@Z
?StDmUpdateRegionLazyCleanup@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@KK@Z
?StDmpHashBytes@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEADKPEAK@Z
?StDmpSinglePageAdd@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_IO_PARAMS@1@PEAU_ST_WORK_ITEM@1@PEAK@Z
?StDmpSinglePageFindSpace@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@KKPEAPEADPEAK@Z
?StDmpSinglePageInsert@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_ST_IO_PARAMS@1@PEAU_ST_PAGE_RECORD@1@@Z
?StDmpSinglePageRetrieve@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_ST_DATA_MGR@1@PEAU_STDM_READ_CONTEXT@1@PEAXPEAU_ST_PAGE_LOCATION@1@@Z
?StDmpUpdateRegionState@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@KJK@Z
?StDrainReadContextList@?$ST_STORE@USM_TRAITS@@@@SAXPEAU1@@Z
?StEmptyStore@?$ST_STORE@USM_TRAITS@@@@SAXPEAU1@K@Z
?StGetStats@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_ST_WORK_ITEM@1@@Z
?StGetStatsWorker@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@W4_ST_STATS_LEVEL@@PEAU_ST_STATS@@PEAK@Z
?StInitialize@?$ST_STORE@USM_TRAITS@@@@SAXPEAU1@@Z
?StLazyWorkMgrInitialize@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_LAZY_WORK_MGR@1@@Z
?StLazyWorkMgrQueueWork@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_LAZY_WORK_MGR@1@W4_ST_LAZY_WORK_TYPE@1@KK@Z
?StLazyWorkMgrResetIdle@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_LAZY_WORK_MGR@1@@Z
?StLazyWorkMgrRunExpiredWork@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_LAZY_WORK_MGR@1@_K@Z
?StLazyWorkMgrSetSchedule@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_LAZY_WORK_MGR@1@_K@Z
?StLockAcquireExclusive@@YAKPEAUVLOCK@@@Z
?StLockAcquireShared@@YAKPEAUVLOCK@@@Z
?StLockReleaseExclusive@@YAXPEAUVLOCK@@K@Z
?StLockReleaseShared@@YAXPEAUVLOCK@@K@Z
?StMapAndLockRegion@?$ST_STORE@USM_TRAITS@@@@SAPEADPEAU_ST_DATA_MGR@1@KKK@Z
?StMetaRegionsUpdate@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_ST_WORK_ITEM@1@@Z
?StNpEnumBTreeNodes@?$ST_STORE@USM_TRAITS@@@@SAJPEAUNP_CTX@NP_CONTEXT@@P6AJPEAX1PEA_K@Z1@Z
?StNpLeafDelete@?$ST_STORE@USM_TRAITS@@@@SAXPEAUNP_CTX@NP_CONTEXT@@_K@Z
?StNpLeafPageIn@?$ST_STORE@USM_TRAITS@@@@SAJPEAUNP_CTX@NP_CONTEXT@@PEAX_K@Z
?StNpLeafPageOut@?$ST_STORE@USM_TRAITS@@@@SA_KPEAUNP_CTX@NP_CONTEXT@@PEAX@Z
?StQueueCompaction@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@W4_ST_COMPACTION_CHECK_RESULT@@@Z
?StRegionAccessExceptionFilter@?$ST_STORE@USM_TRAITS@@@@SAJPEAU_EXCEPTION_POINTERS@@PEAU_ST_DATA_MGR@1@PEAU_ST_PAGE_LOCATION@1@PEAJ@Z
?StRegionFindCompact@?$ST_STORE@USM_TRAITS@@@@SAPEAT_ST_REGION_STATE@1@PEAU_ST_DATA_MGR@1@K@Z
?StRegionFindRepurpose@?$ST_STORE@USM_TRAITS@@@@SAPEAT_ST_REGION_STATE@1@PEAU_ST_DATA_MGR@1@K@Z
?StRegionReadDereference@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@K@Z
?StRegionReadReference@?$ST_STORE@USM_TRAITS@@@@SAKPEAU_ST_DATA_MGR@1@K@Z
?StReleaseReadContext@?$ST_STORE@USM_TRAITS@@@@SAXPEAU1@PEAX@Z
?StReleaseRegion@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@K@Z
?StStagingRegionCleanup@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@PEAU_ST_STAGING_REGION@1@@Z
?StStagingRegionFind@?$ST_STORE@USM_TRAITS@@@@SAPEAU_ST_STAGING_REGION@1@PEAU_ST_DATA_MGR@1@K@Z
?StStart@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_ST_CREATE_PARAMS@@@Z
?StStoreWorkItemCleanup@?$ST_STORE@USM_TRAITS@@@@SAXPEAU1@PEAU_ST_WORK_ITEM@1@@Z
?StUnlockAndUnmapRegion@?$ST_STORE@USM_TRAITS@@@@SAXPEAU_ST_DATA_MGR@1@KPEAD@Z
?StWorkItemProcess@?$ST_STORE@USM_TRAITS@@@@SAJPEAU1@PEAU_ST_WORK_ITEM@1@@Z
?StartHelper@StEtaHelper@@SAJPEAU_ST_ETA_CONTEXT@@K@Z
?StpKeyCompare@?$ST_STORE@USM_TRAITS@@@@SAHPEBX0@Z
?StringCchCopyNW@@YAJPEAG_KPEBG1@Z
?TlgAggregateInternalFlushTimerCallbackKernelMode@@YAXPEAU_EX_TIMER@@PEAX@Z
?TlgAggregateInternalFlushWorkItemRoutineKernelMode@@YAXPEAX@Z
?TlgAggregateInternalProviderCallback@@YAXPEBU_GUID@@KE_K1PEAU_EVENT_FILTER_DESCRIPTOR@@PEAX@Z
?TlgAggregateInternalRegisteredProviderEtwCallback@@YAXPEBU_GUID@@KE_K1PEAU_EVENT_FILTER_DESCRIPTOR@@PEAX@Z
?Validate@MBR_ENTRY@@QEAAEK_K@Z
?VerifyPartitionTable@SC_DISK@@QEAAJE@Z
?VerifyPartitionTable@SC_GPT@@QEAAJE@Z
?Write@NT_DISK@@UEAAJ_KKPEAE@Z
?WritePartitionTable@SC_DISK@@QEAAJPEAVSC_DISK_LAYOUT@@@Z
?WritePartitionTable@SC_GPT@@QEAAJPEAVSC_DISK_LAYOUT@@E@Z
?WritePartitionTable@SC_MBR@@QEAAJPEAVSC_DISK_LAYOUT@@@Z
?WriteSectors@SC_DISK@@QEAAJK_KPEAX@Z
?default_terminate_handler@details@gsl@@YAXXZ
?terminate@details@gsl@@YAXXZ
ADD_MAP_REGISTERS
AMDMicrocodeGetRecordData
AccelBuildDescriptorMemoryCompress
AccelBuildDescriptorMemoryDecompress
AccelBuildDescriptorMemoryFill
AccelBuildDescriptorNop
AccelCompressBuffer
AccelDecompressBuffer
AccelFillMemory
AccelGetStatusFromCompletionRecord
AccelInitializeCompressionWorkspace
AccelInitializeDescriptor
AccelQueryCompletionInformation
AccelQueryDescriptorSize
AccelSetDescriptorAddressSpace
AccelSubmitWorkAsync
AccelWaitForWorkCompletion
AccelpBuildDescriptorComputeHistogram
AccelpBuildHuffmanEncoding
AccelpCodeSort
AccelpComputeHistogram
AccelpInternalOperationHandler
AccelpSiovCompressionDecompression
AccelpSiovDsaOperationHandler
AccelpSiovGetOperationType
AccelpSiovIaaOperationHandler
AccelpSiovIaaQueryCompletionInformation
AccelpSiovInternalOperationHandler
AccelpSiovSetCompressionWorkspace
AccelpSiovWaitForCompletionUMWait
AccelpSubmitWork
AdtpAppendString
AdtpAppendZString
AdtpBuildAccessReasonAuditString
AdtpBuildAccessReasonAuditStringInternal
AdtpBuildAccessesString
AdtpBuildContextFromSecurityDescriptor
AdtpBuildGuidString
AdtpBuildHexInt64String
AdtpBuildIPv4Strings
AdtpBuildIPv6Strings
AdtpBuildLogonIdStrings
AdtpBuildMacStrings
AdtpBuildMessageString
AdtpBuildMultiSzStringListString
AdtpBuildObjectTypeStrings
AdtpBuildPrivilegeAuditString
AdtpBuildRegistryValueString
AdtpBuildReplacementString
AdtpBuildSecurityDescriptorChangeString
AdtpBuildSecurityDescriptorUnicodeString
AdtpBuildSidListString
AdtpBuildSockAddrString
AdtpBuildStagingReasonAuditStringInternal
AdtpBuildStringListString
AdtpBuildUlongString
AdtpBuildUserAccountControlString
AdtpCleanupParameterAllocations
AdtpDbInitializePrivilegeObject
AdtpEtwBuildDashString
AdtpEtwBuildString
AdtpFormatPrefix
AdtpGetCategoryAndSubCategoryId
AdtpInitializeAuditingCommon
AdtpInitializeDriveLetters
AdtpIsCorrectlyFormedUnicodeString
AdtpIsSDValidSelfRelative
AdtpLookupDriveLetter
AdtpLookupKnownPrivilegeNameQuickly
AdtpNormalizeAuditInfoHelper
AdtpObjsInitialize
AdtpPackageParameters
AdtpPermissionBitPosition
AdtpSubstituteDriveLetter
AdtpWriteToEtw
AdtpWriteToEtwEx
AhcCacheQueryHwId
AllocateOrValidateCharStringBuffer
AllocateOrValidateUnicodeStringBuffer
AlpcAddHandleTableEntry
AlpcConnectionCleanupProcedure
AlpcConnectionDeleteProcedure
AlpcConnectionDestroyProcedure
AlpcCreateSecurityContext
AlpcDeleteBlobByHandle
AlpcGetHeaderSize
AlpcGetMessageAttribute
AlpcHandleDataCleanupProcedure
AlpcHandleDataDeleteProcedure
AlpcHandleDataDestroyProcedure
AlpcInitializeHandleTable
AlpcInitializeMessageAttribute
AlpcMaxAllowedMessageLength
AlpcMessageCleanupProcedure
AlpcMessageDeleteProcedure
AlpcMessageDestroyProcedure
AlpcReferenceBlobByHandle
AlpcRegionCleanupProcedure
AlpcRegionDeleteProcedure
AlpcRegionDestroyProcedure
AlpcRegisterLogRoutine
AlpcReserveCleanupProcedure
AlpcReserveDeleteProcedure
AlpcReserveDestroyProcedure
AlpcSectionCleanupProcedure
AlpcSectionDeleteProcedure
AlpcSectionDestroyProcedure
AlpcSecurityCleanupProcedure
AlpcSecurityDeleteProcedure
AlpcSecurityDestroyProcedure
AlpcUnregisterLogRoutine
AlpcViewCleanupProcedure
AlpcViewDeleteProcedure
AlpcViewDestroyProcedure
AlpciDestroyDeferredMessageContext
AlpcpAcceptConnectPort
AlpcpAdjustCompletionListConcurrencyCount
AlpcpAllocateBlob
AlpcpAllocateBuffer
AlpcpAllocateCompletionPacketLookaside
AlpcpAllocateFromBitmap
AlpcpAllocateMessage
AlpcpAllocateMessageFromExtendedTables
AlpcpAllocateMessageFunction
AlpcpAllocateMessageLog
AlpcpAllocateSnapshotMessageLog
AlpcpAssociateIoCompletionPort
AlpcpAvailableBufferSize
AlpcpCancelMessage
AlpcpCancelMessagesByRequestor
AlpcpCaptureAttributes
AlpcpCaptureContextAttribute
AlpcpCaptureContextAttribute32
AlpcpCaptureDirectAttribute
AlpcpCaptureDirectAttribute32
AlpcpCaptureHandleAttribute
AlpcpCaptureHandleAttribute32
AlpcpCaptureHandleAttributeInternal
AlpcpCaptureIdMessage
AlpcpCaptureMessageData
AlpcpCaptureMessageDataSafe
AlpcpCaptureSecurityAttribute
AlpcpCaptureSecurityAttribute32
AlpcpCaptureSecurityAttributeInternal
AlpcpCaptureViewAttribute
AlpcpCaptureViewAttribute32
AlpcpCaptureViewAttributeInternal
AlpcpCaptureWorkOnBehalfAttribute
AlpcpChargePagedPoolQuota
AlpcpCheckConnectionSecurity
AlpcpCleanupProcessViews
AlpcpClearOwnerPortMessage
AlpcpClosePort
AlpcpCompleteDispatchMessage
AlpcpConnectPort
AlpcpCreateClientPort
AlpcpCreateConnectionPort
AlpcpCreatePort
AlpcpCreateRegion
AlpcpCreateReserve
AlpcpCreateSection
AlpcpCreateSectionView
AlpcpCreateSecurityContext
AlpcpCreateView
AlpcpDeferredFreeCompletionPacketLookaside
AlpcpDeleteBlob
AlpcpDeletePort
AlpcpDeleteView
AlpcpDereferenceBlobEx
AlpcpDestroyPort
AlpcpDisconnectPort
AlpcpDispatchCloseMessage
AlpcpDispatchConnectionRequest
AlpcpDispatchNewMessage
AlpcpDispatchReplyToPort
AlpcpDispatchReplyToWaitingThread
AlpcpDoPortCleanup
AlpcpEndInitialization
AlpcpEnterAllocationEventMessageLog
AlpcpEnterFreeEventMessageLog
AlpcpEnterStateChangeEventMessageLog
AlpcpEnumerateResourcesPort
AlpcpExposeAttributes
AlpcpExposeCapturedContextAttribute
AlpcpExposeContextAttribute
AlpcpExposeHandleAttribute
AlpcpExposeTokenAttribute
AlpcpExposeViewAttributeInSenderContext
AlpcpExposeWorkOnBehalfAttribute
AlpcpFlushCancelQueue
AlpcpFlushMessagesPort
AlpcpFlushResourcesPort
AlpcpForceUnlinkSecureView
AlpcpFormatConnectionRequest
AlpcpFreeBitmap
AlpcpFreeBuffer
AlpcpFreeCompletionList
AlpcpFreeCompletionPacketLookaside
AlpcpFreeMessageFunction
AlpcpGetDataFromMessage
AlpcpGetDataFromUserVaSafe
AlpcpGetEffectiveTokenMessage
AlpcpGetPortNameInformation
AlpcpInitSystem
AlpcpInitializeCompletionList
AlpcpInitializeMessageLog
AlpcpInitializePort
AlpcpInsertMessageCanceledQueue
AlpcpInsertMessageLargeMessageQueue
AlpcpInsertMessageMainQueue
AlpcpInsertMessagePendingQueue
AlpcpInsertResourcePort
AlpcpInvokeLogCallbacks
AlpcpLocateMessageLog
AlpcpLocateSectionView
AlpcpLocateView
AlpcpLockBlobExclusive
AlpcpLockBlobShared
AlpcpLockForCachedReferenceBlob
AlpcpLogClosePort
AlpcpLogConnectFail
AlpcpLogConnectRequest
AlpcpLogConnectSuccess
AlpcpLogReceiveMessage
AlpcpLogSendMessage
AlpcpLogUnwait
AlpcpLogWaitForNewMessage
AlpcpLogWaitForReply
AlpcpLookasidePacketCallbackRoutine
AlpcpLookupMessage
AlpcpMapLegacyPortRemoteView
AlpcpMapLegacyPortView
AlpcpOpenPort
AlpcpPortQueryBasicInfo
AlpcpPortQueryConnectedSidInfo
AlpcpPortQueryServerInfo
AlpcpPortQueryServerSessionInfo
AlpcpPrepareViewForDelivery
AlpcpProbeAndCaptureMessageHeader
AlpcpProbeForWriteMessageHeader
AlpcpProbeMessageAttributes
AlpcpProcessConnectionRequest
AlpcpProcessSynchronousRequest
AlpcpQueryHandleInformationMessage
AlpcpQueryHeadCanceledQueue
AlpcpQueryHeadLargeQueue
AlpcpQueryHeadMainQueue
AlpcpQueryRemoteView
AlpcpQuerySidMessage
AlpcpQuerySidToken
AlpcpQueryTokenModifiedIdMessage
AlpcpQueueIoCompletion
AlpcpQueueIoCompletionPort
AlpcpReceiveDirectMessagePort
AlpcpReceiveLegacyConnectionReply
AlpcpReceiveLegacyMessage
AlpcpReceiveMessage
AlpcpReceiveMessagePort
AlpcpReceiveSynchronousReply
AlpcpReferenceAndLockTargetPortsAndCommunicationInfo
AlpcpReferenceBlob
AlpcpReferenceConnectedPort
AlpcpReferenceMessageByWaitingThread
AlpcpReferenceMessageByWaitingThreadPort
AlpcpReferenceMessageByWaitingThreadPortQueue
AlpcpRegisterCompletionListDatabase
AlpcpReleaseAttributes
AlpcpReleaseDirectAttribute
AlpcpReleaseMessageAttributesOnCancel
AlpcpReleasePagedPoolQuota
AlpcpReleaseViewAttribute
AlpcpRemoveMessageFromPendingQueue
AlpcpRemoveMessagePort
AlpcpRemoveResourcePort
AlpcpReplyLegacySynchronousRequest
AlpcpRestoreWriteAccess
AlpcpReturnMessageOnInsufficientBuffer
AlpcpSendCloseMessage
AlpcpSendLegacySynchronousRequest
AlpcpSendMessage
AlpcpSetOwnerPortMessage
AlpcpSetOwnerProcessPort
AlpcpSetupMessageDataForDeferredCopy
AlpcpSignal
AlpcpSignalAndWait
AlpcpSignalPortAndUnlock
AlpcpStartInitialization
AlpcpTransferQuotaMessage
AlpcpTryLockForCachedReferenceBlob
AlpcpUnlockAndDereferenceTargetPortsAndCommunicationInfo
AlpcpUnlockBlob
AlpcpUnlockBlobUncachedExclusive
AlpcpUnlockMessage
AlpcpUnregisterCompletionListDatabase
AlpcpValidateAndSetPortAttributes
AlpcpValidateConnectionMessage
AlpcpValidateDataInformation
AlpcpViewSearchCallbackFunction
AlpcpWaitForPortReferences
AlpcpWaitForSingleObject
AlpcpWalkConnectionList
Amd64AddProfileSource
Amd64AllocateCounter
Amd64CheckCoreEventConstraints
Amd64ConfigureCounter
Amd64DisableMonitoring
Amd64EnableMonitoring
Amd64FreeCounter
Amd64GetCounterResolution
Amd64GetEventSelectDef
Amd64GetGenericPerfEvent
Amd64InitializeCacheStatus
Amd64InitializeDataFabricStatus
Amd64InitializeProfiling
Amd64InitializeUncoreProfiling
Amd64InitializeUncoreStatus
Amd64IsModifiedByBadActor
Amd64IsModifiedByBadActorInternal
Amd64IsProfileBeingUsed
Amd64OverflowHandler
Amd64OverflowHandlerInternal
Amd64PauseProfiling
Amd64PauseProfilingInternal
Amd64QueryInformation
Amd64RemoveProfileSource
Amd64RestartProfiling
Amd64RestartProfilingInternal
Amd64ResumeProfiling
Amd64ResumeProfilingInternal
Amd64SetInterval
AnFwConfigureProgressResources
AnFwDisableBackgroundUpdateTimer
AnFwDisplayBackgroundUpdate
AnFwDisplayFade
AnFwDisplayProgressIndicator
AnFwFadeCompletion
AnFwProgressIndicatorTransition
AnFwpBackgroundUpdateTimer
AnFwpDisableProgressTimer
AnFwpFadeAnimationTimer
AnFwpProgressAnimationManual
AnFwpProgressIndicatorTimer
ApiSetComposeSchema
ApiSetIsSchemaSealed
ApiSetLoadSchemaEx
ApiSetLoadSchemaWithExtensions
ApiSetQuerySchemaInfo
ApiSetReleaseSchema
ApiSetResolveToHost
ApiSetValidateSchemaFormat
ApiSetpSearchForApiSet
ApiSetpSearchForApiSetHost
AppModelFreeUnicodeString
AppModelPolicy_GetPolicy_Internal
AppendCondition
AppendUlongAsHexadecimalW
ArbAddAllocation
ArbAddInaccessibleAllocationRange
ArbAddMmConfigRangeAsBootReserved
ArbAddOrdering
ArbAddReserved
ArbAllocateEntry
ArbArbiterHandler
ArbBacktrackAllocation
ArbBootAllocation
ArbBuildAssignmentOrdering
ArbCommitAllocation
ArbDeleteMmConfigRange
ArbDeleteOwnerRanges
ArbFindSuitableRange
ArbFreeOrderingList
ArbGetNextAllocationRange
ArbInitializeArbiterInstance
ArbInitializeMmConfigRange
ArbInitializeOrderingList
ArbInitializeOsInaccessibleRange
ArbInitializeRangeList
ArbLibraryInitialize
ArbOverrideConflict
ArbPreprocessEntry
ArbPruneOrdering
ArbQueryArbitrate
ArbQueryConflict
ArbRegReadMmConfigRanges
ArbRetestAllocation
ArbRollbackAllocation
ArbShareDriverExclusive
ArbStartArbiter
ArbTestAllocation
ArbpBuildAllocationStack
ArbpBuildAlternative
ArbpGetRegistryValue
ArbpQueryConflictCallback
ArbpUpdatePriority
ArrayContains
AsiAddDataToSchema
AsiPopulateHashes
AsiSortHashTableHelper
AsiSortValueList
AslAlloc
AslComputeCrc32
AslDoesDirectoryExistNtPath
AslDoesFileExistNtPath
AslEnvExpandStrings
AslEnvExpandStrings2
AslEnvGetProcessWowInfo
AslEnvGetSysNativeDirPathForGuestBuf
AslEnvGetSystem32DirPathBuf
AslEnvVarQuery
AslFileAllocAndGetAttributes
AslFileFreeAttributes
AslFileMappingCreate
AslFileMappingCreateFromImageView
AslFileMappingDelete
AslFileMappingEnsure
AslFileMappingEnsureMappedAs
AslFileMappingGetFileKindDetail
AslFileMappingGetImageTypeEx
AslFileMappingGetViewBase
AslFileNotFound
AslFree
AslGuidToString
AslGuidToString_UStr
AslHashFree
AslImageFileToArchitecture
AslLogCallPrintf
AslPathClean
AslPathCleanUstr
AslPathCombine
AslPathGetFileNamePart
AslPathSplit
AslPathToNetworkPathNt
AslPathToSystemPath
AslPathToSystemPathBuf
AslPathWildcardFindClose
AslPathWildcardFindFirst
AslPathWildcardFindNext
AslRegWildcardFindClose
AslRegWildcardFindFirst
AslRegWildcardFindNext
AslRegistryBuildMachinePath
AslRegistryBuildUserPath
AslRegistryEnumKey
AslRegistryGetKey
AslRegistryGetString
AslRegistryGetUInt32
AslRegistryGetUInt32_UStr
AslRegistryOpenKey_UStr
AslRegistryOpenSubKey
AslStringAnsiToUnicode
AslStringDuplicate
AslStringHasWildcard
AslStringPatternMatchExA
AslStringPatternMatchExW
AslStringPatternMatchW
AslStringSearchA
AslStringSearchW
AslStringUpcaseToMultiByteN
AslStringXmlSanitize
AslUnicodeStringFree
AslpAllocMatchNode
AslpDetermineDosPathNameType
AslpEnvResolveVars
AslpFileGet16BitDescription
AslpFileGet16BitModuleName
AslpFileGetChecksum
AslpFileGetChecksumAttributes
AslpFileGetClrVersion
AslpFileGetClrVersionAttribute
AslpFileGetCrcChecksum
AslpFileGetCrcChecksumBoot
AslpFileGetExeWrapper
AslpFileGetExeWrapperAttribute
AslpFileGetExportName
AslpFileGetFileKindDetailAttribute
AslpFileGetHeaderAttributesNE
AslpFileGetHeaderAttributesPE
AslpFileGetImageCodeSectionHeader
AslpFileGetImageNtHeader
AslpFileGetImageResourceDirectoryRoot
AslpFileGetNtHeaderAttributes
AslpFileGetPeExportNameAttribute
AslpFileGetVersionAttributes
AslpFileGetVersionBlock
AslpFileGetVersionBlockFromResourceRoot
AslpFileGetVersionBlockImageOnly
AslpFileHasActiveMarkWrapper
AslpFileHasSecuromWrapper
AslpFileIsArm64XBinary
AslpFileLargeEnsureLargeFileMapping
AslpFileLargeGetChecksum
AslpFileLargeGetChecksumAttributes
AslpFileLargeGetCrcChecksum
AslpFileLargeMapCreate
AslpFileLargeMapDelete
AslpFileMakeBinVersionAttributes
AslpFileMakeStringVersionAttributes
AslpFileMappingGetFileKind
AslpFilePartialViewFree
AslpFileQuery16BitDescription
AslpFileQuery16BitModuleName
AslpFileQueryExportName
AslpFileQueryVersionString
AslpFileStringTokenize
AslpFileVerBlockGetValueOffset
AslpFileVerQueryBlock
AslpFileVerStringBlockGetValue
AslpHasStarForceWrapper
AslpImageRvaToVa
AslpMemoryCheckBounds
AslpMemoryRangeCheckBounds
AslpMemorySpanCheckBounds
AslpParsePattern
AslpPathWildcardAllocMatchNode
AslpPathWildcardFreeFindContext
AslpPathWildcardFreeMatchNode
AslpPathWildcardMakeLeaves
AslpProcessMatchRegNode
AstAddBloomFilter
AstGetHashedBitNumbers
AstInitializeBloomFilter
AstIsRecording
AstLogDeviceCreated
AstLogDeviceSDDLUpdated
AuthzBasepAddAccessTypeList
AuthzBasepAddSecurityAttribute
AuthzBasepAddSecurityAttributeToLists
AuthzBasepAddSecurityAttributeValueToLists
AuthzBasepAddSecurityAttributeValues
AuthzBasepAllocateClaimCollectionNoLists
AuthzBasepAllocateSecurityAttribute
AuthzBasepAllocateSecurityAttributeValue
AuthzBasepAllocateSecurityAttributesList
AuthzBasepCompareFQBNOperands
AuthzBasepCompareIntegerOperands
AuthzBasepCompareLegacySecurityAttributesInformation
AuthzBasepCompareOctetStringOperands
AuthzBasepCompareSecurityAttribute
AuthzBasepCompareSecurityAttributesInformation
AuthzBasepCompareUnicodeStringOperands
AuthzBasepCompareUnsigned
AuthzBasepComputeExpression
AuthzBasepConvertRelativeToAbsoluteTokenAttribute
AuthzBasepCopyoutClaimAttributeValues
AuthzBasepCopyoutClaimAttributes
AuthzBasepCopyoutInternalSecurityAttributeValues
AuthzBasepCopyoutInternalSecurityAttributes
AuthzBasepCopyoutSecurityAttributeValues
AuthzBasepCopyoutSecurityAttributes
AuthzBasepDeleteAllSecurityAttributeValues
AuthzBasepDeleteAllSecurityAttributes
AuthzBasepDeleteSecurityAttribute
AuthzBasepDeleteSecurityAttributeValues
AuthzBasepDeviceMemberOf
AuthzBasepDuplicateSecurityAttributes
AuthzBasepEqualUnicodeString
AuthzBasepEqualUnicodeStringCaseSensitive
AuthzBasepEvaluateAceCondition
AuthzBasepEvaluateAttribute
AuthzBasepEvaluateExpression
AuthzBasepEvaluateSetRelationship
AuthzBasepFinaliseSecurityAttributesList
AuthzBasepFindSecurityAttribute
AuthzBasepFindSecurityAttributeValue
AuthzBasepFindSystemSecurityAttribute
AuthzBasepFreeSecurityAttributeValues
AuthzBasepFreeSecurityAttributesList
AuthzBasepGetClaimAttributeValueCopyoutBufferSize
AuthzBasepGetClaimAttributesCopyoutBufferSize
AuthzBasepGetConstantOperand
AuthzBasepGetInternalSecurityAttributeValueCopyoutBufferSize
AuthzBasepGetNextValue
AuthzBasepGetOperandStringCaseForEvaluation
AuthzBasepGetOperandTypeForEvaluation
AuthzBasepGetSecurityAttributeValueCopyoutBufferSize
AuthzBasepInitializeResourceClaimsFromSacl
AuthzBasepInitializeSystemSecurityAttributes
AuthzBasepIsCompareRelevantAttribute
AuthzBasepIsValidExpression
AuthzBasepMemAlloc
AuthzBasepMemberOf
AuthzBasepMergeAccessReasons
AuthzBasepObjectInTypeList
AuthzBasepOperandValueTypesCompatible
AuthzBasepProbeAndInsertTailList
AuthzBasepPushResult
AuthzBasepQueryClaimAttributesToken
AuthzBasepQueryInternalSecurityAttributesToken
AuthzBasepQuerySecurityAttributeAndValues
AuthzBasepQuerySecurityAttributesToken
AuthzBasepQuerySystemSecurityAttributeAndValues
AuthzBasepQueryTokenAttributeAndValues
AuthzBasepRemoveSecurityAttributeFromLists
AuthzBasepRemoveSecurityAttributeValueFromLists
AuthzBasepReplaceSecurityAttribute
AuthzBasepResetOperands
AuthzBasepRestartOperandValueEnumeration
AuthzBasepRollbackSecurityAttributeChanges
AuthzBasepSecurityAttributePresent
AuthzBasepSetAccessReasons
AuthzBasepSetAppContainerAccessReasons
AuthzBasepSetSecurityAttributesToken
AuthzBasepSetTypeListAccessReasons
AuthzBasepSupportSetOperation
AuthzBasepUnicodeStringFromOperandValue
AuthzBasepUpdateParentTypeList
AuthzBasepValidateSecurityAttributes
AuthzBasepValueInSet
BCryptCloseAlgorithmProvider
BCryptCreateHash
BCryptDestroyHash
BCryptDestroyKey
BCryptEncrypt
BCryptFinishHash
BCryptGenRandom
BCryptGenerateSymmetricKey
BCryptGetProperty
BCryptHashData
BCryptImportKeyPair
BCryptOpenAlgorithmProvider
BCryptSetProperty
BapdGetISRegistryKey
BapdProcessFwRamdiskInformation
BapdProcessOslRamdiskInformation
BapdRecordFirmwareBootStats
BapdRegisterEtwProvider
BapdRegisterSiData
BapdRemoveWbclData
BapdWriteEtwEvents
BapdpInitializePageDatabase
BapdpKsrCancelScenario
BapdpKsrComplete
BapdpKsrCompleteScenario
BapdpKsrCompleteScenarioPhase0
BapdpKsrInitiateScenarioPhase0
BapdpKsrpInitiateScenario
BapdpMarshallBootDataToRegistry
BapdpParseEventParts
BapdpProcessBitlockerStatus
BapdpProcessBootMetadata
BapdpProcessEDrvHintInfo
BapdpProcessEtwEvents
BapdpProcessFwUpdateResults
BapdpProcessHSTIResults
BapdpProcessResumeInformation
BapdpProcessSpacesBootInformation
BapdpProcessVsmKeyBlobs
BapdpProcessWmdResults
BapdpQueryData
BapdpRecordIumStatus
BapdpRegisterBitlockerStatus
BapdpRegisterEDrvHintInfo
BapdpRegisterFwUpdateResults
BapdpRegisterResumeInformation
BapdpRegisterWbclData
BapdpRegisterWmdResult
BapdpWriteEventDataToRegistry
BcdCloseObject
BcdCloseStore
BcdCreateObject
BcdDeleteObject
BcdEnumerateObjects
BcdFlushStore
BcdForciblyUnloadStore
BcdGetElementData
BcdGetElementDataWithFlags
BcdGetSystemStorePath
BcdInitializeBcdSyncMutant
BcdMarkAsSystemStore
BcdOpenObject
BcdOpenStore
BcdOpenSystemStore
BcdQueryObject
BcdSetBootBcdAsSystemStore
BcdSetElementData
BcdSetElementDataWithFlags
BcdSetSystemStore
BcdUtilGetBootOption
BcdUtilGetBootOptionBoolean
BcdUtilGetBootOptionInteger
BcdUtilGetBootOptionString
BcpConvertBugDataToString
BcpConvertProgressToString
BcpCursorLessThan
BcpDisplayCriticalCharacter
BcpDisplayCriticalString
BcpDisplayEarlyBugCheckScreen
BcpDisplayErrorInformation
BcpDisplayProgress
BcpFindMessage
BcpGetCharacterMaxResourceProfile
BcpGetComponentOffsets
BcpGetDisplayType
BcpGetMaxResourceProfile
BcpGetProgressMessages
BcpPrintSpaces
BcpSanitizeDriverName
BcpSetCursorPosition
Below4gb_AllocateCommonBuffer_Entry
Below4gb_MmAllocateContiguousMemorySpecifyCacheNode_Entry
Below4gb_MmAllocateContiguousMemorySpecifyCache_Entry
Below4gb_MmAllocateContiguousMemory_Entry
Below4gb_MmAllocateContiguousNodeMemory_Entry
Below4gb_MmAllocateNodePagesForMdlEx_Entry
Below4gb_MmAllocatePagesForMdlEx_Entry
Below4gb_MmAllocatePagesForMdl_Entry
BgAcquireSpinLock
BgConsoleDestroyInterface
BgConsoleGetInterface
BgConvertResources
BgDisplayBackgroundUpdate
BgDisplayFade
BgDisplayProgressIndicator
BgDisplaySafeToPowerOffScreen
BgFreeContext
BgGetContext
BgGetDisplayContext
BgGetIsColorOverridden
BgLibraryDisable
BgLibraryEnable
BgLibraryInitialize
BgMarkHiberPhase
BgQueryBootGraphicsInformation
BgReleaseSpinLock
BgSetFrameBufferAccess
BgfxGrowDirtyRect
BgkAcquireDisplayOwnership
BgkDestroy
BgkDisplayCharacter
BgkDisplayString
BgkDisplayStringEx
BgkDrawText
BgkGetConsoleState
BgkGetCursorState
BgkInitialize
BgkNotifyDisplayOwnershipChange
BgkNotifyDisplayOwnershipLost
BgkQueryBootGraphicsInformation
BgkResumeFinished
BgkResumePrepare
BgkSetBootGraphicsInformation
BgkSetCursor
BgkSetDisplayOwnership
BgkSetTextColor
BgkSetVirtualFrameBuffer
BgkSolidColorFill
BgkpAcquireConsole
BgkpDisableConsole
BgkpLockBgfxCodeSection
BgkpReleaseConsole
BgkpResetDisplay
BgkpTryEnableConsole
BgkpUnlockBgfxCodeSection
BgkpVgaBltRoutine
BgpBcInitializeCriticalMode
BgpClearScreen
BgpConsoleClearScreen
BgpConsoleClearScreenEx
BgpConsoleDisplayCharacter
BgpConsoleDisplayCharacterEx
BgpConsoleDisplayString
BgpConsoleDrawCursor
BgpConsoleGetCursorState
BgpConsoleGetFontName
BgpConsoleGetState
BgpConsoleInitialize
BgpConsoleScrollScreen
BgpConsoleSetCursor
BgpConsoleSetPointSize
BgpConsoleSetTextColor
BgpDisplayCharacterDestroyContext
BgpDisplayCharacterEx
BgpDisplayCharacterGetContext
BgpDisplaySafeToPowerOffScreen
BgpFmRoundUp
BgpFmSqrt
BgpFoDestroy
BgpFoDetermineFontInformation
BgpFoGetAdvanceWidth
BgpFoGetFontHandle
BgpFoGetStringAdvanceWidth
BgpFoGetTextMetrics
BgpFoInitialize
BgpFwAcquireLock
BgpFwAllocateMemory
BgpFwDisplayBugCheckProgressUpdate
BgpFwDisplayBugCheckScreen
BgpFwFreeMemory
BgpFwInitializeLock
BgpFwInitializeReservePool
BgpFwLibraryDestroy
BgpFwLibraryDisable
BgpFwLibraryEnable
BgpFwLibraryInitialize
BgpFwMapFrameBuffer
BgpFwQueryBootGraphicsInformation
BgpFwQueryPerformanceCounter
BgpFwReleaseLock
BgpFwReserveAllocate
BgpFwReservePoolSwap
BgpFwSetBootGraphicsInformation
BgpGetBitsPerPixel
BgpGetResolution
BgpGxBlendColor
BgpGxBlendRectangle
BgpGxConvertRectangle
BgpGxConvertRectangleEx
BgpGxCopyBitmapToRectangle
BgpGxCopyRectangle
BgpGxDrawBitmapImage
BgpGxDrawRectangle
BgpGxFillRectangle
BgpGxFindSubRectangle
BgpGxInitializeRectangle
BgpGxMarkClean
BgpGxParseBitmap
BgpGxProcessQrCodeBitmap
BgpGxReadRectangle
BgpGxRectangleCreate
BgpGxRectangleDestroy
BgpGxRectangleSize
BgpGxReservePoolRectangleSize
BgpRasGetGlyphAdvanceWidth
BgpRasGetGlyphTextCellDimensions
BgpRasInitializeRasterizer
BgpRasPrintGlyph
BgpTxtAdjustStaticRegion
BgpTxtCacheDestroy
BgpTxtClearRegion
BgpTxtCreateRegion
BgpTxtDestroyRegion
BgpTxtDisplayCharacter
BgpTxtDisplayString
BgpTxtGetRegionContext
BgpTxtRegionSize
BiAcquireBcdSyncMutant
BiAcquirePrivilege
BiAddBootEntry
BiAddBootEntryToEfiBootManagerDisplayOrder
BiAddBootEntryToNvramDisplayOrder
BiAddStoreFromFile
BiAdjustPrivilege
BiBindEfiBootManager
BiBindEfiEntries
BiBindEfiEntryToBcdObject
BiBindEfiNamespaceObjects
BiBuildIdentifierList
BiCloseKey
BiCloseStore
BiConvertBootEnvironmentDeviceToElement
BiConvertBootEnvironmentDeviceToNt
BiConvertBootEnvironmentDeviceToQualifiedPartition
BiConvertBootEnvironmentDeviceToUnknown
BiConvertElementFormatToValueType
BiConvertElementToRegistryData
BiConvertNtDeviceToBootEnvironment
BiConvertNtFilePathToBootEnvironment
BiConvertQualifiedPartitionToBootEnvironment
BiConvertRegistryDataToElement
BiCreateBootEntry
BiCreateEfiEntry
BiCreateFileDeviceElement
BiCreateKey
BiCreateKeySecurityDescriptor
BiCreateMergedBootEntry
BiCreateObject
BiCreatePartitionDevice
BiCreateVhdRamdiskBootDevice
BiDeleteBootEntry
BiDeleteEfiVariable
BiDeleteElement
BiDeleteKey
BiDeleteRegistryValue
BiDoesHiveExist
BiDoesHiveKeyExist
BiEnumerateBootEntries
BiEnumerateSubKeys
BiExportBcdObjects
BiExportEfiBootManager
BiExportStoreAlterationsToEfi
BiExportStoreAlterationsToFirmware
BiFreeIdentifierList
BiGetAliasedIdentifier
BiGetDefaultBootEntryIdentifier
BiGetDeviceFromEfiPath
BiGetDriveLayoutBlock
BiGetDriveLayoutInformation
BiGetElement
BiGetFilePathFromEfiPath
BiGetFirmwareType
BiGetKeyName
BiGetNtPartitionPath
BiGetObjectDescription
BiGetObjectIdentifier
BiGetObjectReferenceFromEfiEntry
BiGetPartitionInformation
BiGetPartitionVhdFilePath
BiGetPartitionVhdFilePathFromUnicodeString
BiGetPhysicalDriveName
BiGetRegistryValue
BiGetSavedBootEntry
BiGetSystemPartition
BiGetVolumeDiskExtentsInformation
BiHandleFirmwareDefaultEntry
BiIsBootRamdisk
BiIsEnumerateMatch
BiIsLinkedToFirmwareVariable
BiIsLogEnabled
BiIsObjectAliased
BiIsOfflineHandle
BiIsPortableWorkspaceBoot
BiIsSynchFirmwareEntries
BiIsSystemStore
BiIsSystemStoreCandidate
BiIsValidDiskDevice
BiIsValidObject
BiIsVolumePartitionInformationRetained
BiIsWinPEBoot
BiIsWindowsEfiEntry
BiIssueGetDriveLayoutIoctl
BiLoadHive
BiLoadSystemStore
BiLogFileOwnerProcess
BiLogMessage
BiMapEfiDeviceForSpaces
BiMarkTreatAsSystemStore
BiModifyBootEntry
BiOpenEffectiveToken
BiOpenKey
BiOpenKeyNonBcd
BiOpenStoreKeyFromObject
BiOpenSystemStore
BiQueryBootEntryOrder
BiQueryBootOptions
BiReleaseBcdSyncMutant
BiReleasePrivilege
BiRemoveBootEntryFromNvramDisplayOrder
BiRemoveEntryFromBootOrder
BiResolveLocateDevice
BiSanitizeHandle
BiSetBootEntryOrder
BiSetBootOptions
BiSetFirmwareModified
BiSetFirmwareModifiedFromObject
BiSetObjectDescription
BiSetRegistryValue
BiSpacesUpdatePhysicalDevicePath
BiTranslateBootEntryId
BiTranslateBootOrder
BiTranslateDisplayOrder
BiTranslateFilePath
BiTranslateObjectIdentifier
BiTranslateSymbolicLink
BiTranslateSymbolicLinkFile
BiUnloadHiveByHandle
BiUnloadHiveByName
BiUpdateBcdObject
BiUpdateEfiEntry
BiUpdateObjectReferenceInEfiEntry
BiVerifyBootPartition
BiWasFirmwareModified
BiZwClose
BiZwCreateKey
BiZwDeleteKey
BiZwDeleteValueKey
BiZwEnumerateKey
BiZwOpenKey
BiZwQueryKey
BiZwQueryValueKey
BiZwSetSecurityObject
BiZwSetValueKey
BootApplicationPersistentDataInitialize
BootApplicationPersistentDataProcess
BuildQueryDirectoryIrp
BvgaAcquireDisplayOwnership
BvgaAcquireLock
BvgaBitBlt
BvgaCheckDisplayOwnership
BvgaDisplayString
BvgaDriverInitialize
BvgaEnableBootDriver
BvgaGetDisplayState
BvgaGetResourceAddress
BvgaIndicateProgress
BvgaIsBootDriverInstalled
BvgaNotifyDisplayOwnershipChange
BvgaNotifyDisplayOwnershipLost
BvgaReleaseLock
BvgaReleaseResources
BvgaResetDisplay
BvgaSaveResources
BvgaSetDisplayOwnership
BvgaSetProgressBarSubset
BvgaSetScrollRegion
BvgaSetTextColor
BvgaSetVirtualFrameBuffer
BvgaSolidColorFill
BvgaUpdateProgressBar
CMFAllocFn
CMFCheckAccess
CMFCreateSecurityDescriptor
CMFFlushHitsFile
CMFFreeFn
CMFGetFileSizeEx
CMFGetLargePageSectionSize
CMFReadCompressedSegment
CMFRegisterEventTime
CMFSystemThreadRoutine
CMFUnmapModules
CONTEXT_TRACING_ENABLED
CanComposeHangul
CarAcquireDbLockAtDpcLevelSafe
CarAddUniqueViolation
CarAllocDbNode
CarCleanDbLockContext
CarCleanup
CarComparRuleViolation
CarCopyDriverName
CarCopyRuleViolationDetails
CarCreateRuleOverrideEntry
CarCreateRuleViolationDetails
CarDbRaiseIrqlSafe
CarDeleteDriverRuleViolations
CarDeletePluginRuleViolations
CarDeleteRuleOverrideEntry
CarDeleteRuleViolationDB
CarDeleteRuleViolationDetails
CarDeregisterRuleClassConfiguration
CarDeregisterRuleOverride
CarEtwCopyDriverName
CarEtwCrashEvent
CarEtwRegister
CarEtwWriteBugCheckEvent
CarEtwWriteLiveDumpEvent
CarFindRuleClassConfigurationEntryByRuleClassId
CarFindRuleOverrideEntryByGlobalRuleId
CarFindRuleOverrideEntryByLocalRuleId
CarFreeDbNode
CarGetDriverInfoFromDriverName
CarGetDriverInfoFromViolationStack
CarHandleEtwEvent
CarInit
CarInitLogging
CarInitializeRuleViolationDetails
CarInitializeTelemetryData
CarInitiateBugcheck
CarIsOnecheckEnabled
CarLiveDump
CarLiveDumpCallBack
CarLoadFromDV
CarLoadImageHandler
CarOverrideReportAction
CarQueryReportAction
CarQueryReportActionForTriage
CarReadRegistry
CarRegisterDefaultRuleClassConfiguration
CarRegisterRuleClassConfiguration
CarRegisterRuleOverride
CarRegisterRuleOverrideAllContexts
CarRegisterRuleOverridesAllContexts
CarReleaseDbLockFromDpcLevel
CarReportDifPluginRuleViolation
CarReportRuleViolationFromNt
CarReportUnusualShutdown
CarSetCustomIdInRuleOverride
CarSetCustomRuleIdRange
CarTipLogDriverLoad
CarWriteEarlyRuleViolationEvents
CarWriteLivedump
CarpDbgPrint
CarpSecondaryDataCallback
CcAcquireBcbLockAndVacbLock
CcAcquireByteRangeForWrite
CcAddDirtyPagesToExternalCache
CcAddExternalCacheInternal
CcAddExternalCacheInternalEx
CcAddExternalCacheToVolumeEx
CcAdjustBcbDepth
CcAdjustThrottleForExternalCache
CcAdjustThrottleForPartition
CcAdjustThrottleForVolume
CcAdjustVacbLevelLockCount
CcAdjustWriteBehindThreadPool
CcAdjustWriteBehindThreadPoolIfNeeded
CcAggregateCumulativeGlobalTelemetry
CcAggregateCumulativeVolumeTelemetry
CcAllocateInitializeBcb
CcAllocateInitializeMbcb
CcAllocateInitializeVacbArray
CcAllocateObcb
CcAllocateVacbLevel
CcAllocateVacbLevels
CcAllocateWorkQueueEntry
CcAmILowPriorityWriter
CcApplyLowIoPriorityToThread
CcAsyncCopyRead
CcAsyncLazywriteWorker
CcAsyncLazywriteWorkerMulti
CcAsyncLazywriteWorkerThread
CcAsyncReadPrefetch
CcAsyncReadWorker
CcAsyncReadWorkerThread
CcBcbProfiler
CcBoostLowPriorityWorkerThread
CcBuildUpHighPriorityMappings
CcCachemapUninitWorkerThread
CcCalculatePagesToWrite
CcCalculatePagesToWriteForVolume
CcCalculateVacbLevelLockCount
CcCanIWrite
CcCanIWriteStreamEx
CcCancelMmWaitForUninitializeCacheMap
CcChangeBackingFileObject
CcChargeDirtyPagesInternal
CcChargeThreadForReadAhead
CcCheckContainerWaitForRestore
CcCoalescingCallBack
CcCoalescingCallBackHelper
CcCoherencyFlushAndPurgeCache
CcCompleteAsyncLazywriteWorker
CcCompleteAsyncLazywriteWorkerThread
CcCompleteAsyncRead
CcCompleteAsyncReadWorker
CcCompleteAsyncWriteBehind
CcComputeNextScanTime
CcContainerRestoreCallBack
CcCopyBytesToUserBuffer
CcCopyRead
CcCopyReadEx
CcCopyReadExceptionFilter
CcCopyWrite
CcCopyWriteEx
CcCopyWriteWontFlush
CcCreatePartition
CcCreatePrivateVolumeCacheMap
CcCreateVacbArray
CcDeallocateBcb
CcDeallocateVacbLevel
CcDebugExceptionFilter
CcDecrementOpenCount
CcDecrementPrivateVolumeUseCount
CcDecrementVolumeUseCountWithDelete
CcDeductDirtyPages
CcDeductDirtyPagesFromExternalCache
CcDeductDirtyPagesInternal
CcDeferWrite
CcDeleteBcbs
CcDeleteMbcb
CcDeleteNumaNode
CcDeletePartition
CcDeletePrivateVolumeCacheMap
CcDeleteSectionsForPartition
CcDeleteSharedCacheMap
CcDeleteVolumeCacheMap
CcDereferenceFileOffset
CcDereferencePartition
CcDereferencePartitionAndPrivateVolumeCacheMap
CcDereferenceVacbArray
CcDrainDelayDeleteForPartitionExit
CcErrorCallbackRoutine
CcExitPartition
CcExtendVacbArray
CcFastCopyRead
CcFastCopyWrite
CcFetchDataForRead
CcFindBcb
CcFindBitmapRangeToClean
CcFindNextWBWorkQueueEntry
CcFindNextWorkQueueEntry
CcFindPrivateVolumeCacheMap
CcFlushCache
CcFlushCacheAcquireRange
CcFlushCacheOneRange
CcFlushCachePostProcess
CcFlushCachePostProcessOneRange
CcFlushCachePreProcess
CcFlushCachePriv
CcFlushCacheToLsn
CcForEachNumaNode
CcForEachPartition
CcForEachPrivateVolumeCacheMap
CcForceWriteThrough
CcFreeSharedCacheMapIgnoreNull
CcFreeUnusedVacbLevels
CcFreeVacbArray
CcFreeVirtualAddress
CcFreeWorkQueueEntry
CcGetActiveWorkerCountInPartition
CcGetActiveWorkerCountPerNode
CcGetBcbListHeadLargeOffset
CcGetCachedDirtyPageCountForFile
CcGetContainerPolicyForDTP
CcGetCurrentNumaNode
CcGetDeviceGuid
CcGetDeviceGuidAsync
CcGetDirtyPages
CcGetDirtyPagesHelper
CcGetFileObjectFromBcb
CcGetFileObjectFromSectionPtrs
CcGetFileObjectFromSectionPtrsRef
CcGetFlushedValidData
CcGetLsnForFileObject
CcGetNodeForLazyWrite
CcGetNodeForReadAhead
CcGetNumberOfMappedPages
CcGetPartitionForSectionObject
CcGetPrivateVolumeCacheMap
CcGetPrivateVolumeCacheMapFromFileObject
CcGetRandomVacbArrayWithReference
CcGetVacbFromFreeList
CcGetVacbLargeOffset
CcGetVacbMiss
CcGetVirtualAddress
CcHasGlobalTelemetryChanged
CcHasVolumeCumulativeTelemetryChanged
CcHasVolumeTelemetryChanged
CcIncrementWriteBehindPriority
CcInitPerVolumeParameters
CcInitializeAsyncLazywriteForNodeHelper
CcInitializeAsyncReadForNodeHelper
CcInitializeBcbProfiler
CcInitializeCacheManager
CcInitializeCacheMap
CcInitializeCacheMapEx
CcInitializeCacheMapEx2
CcInitializeCacheMapInternal
CcInitializeNumaNode
CcInitializeNumaNodeForVolume
CcInitializePartition
CcInitializePartitionVacbs
CcInitializePrivateVolumeCacheMap
CcInitializeProcessor
CcInitializeQuickLWSThreadItem
CcInitializeTelemetry
CcInitializeVacbs
CcInitializeVolumeCacheMap
CcInsertIntoCleanSharedCacheMapList
CcInsertIntoDirtySharedCacheMapList
CcInsertPrivateVolumeCacheMap
CcInsertVacbArray
CcIsCacheManagerCallbackNeeded
CcIsDirtyCachemapListEmptyForVolume
CcIsFatalWriteError
CcIsFileObjectDirectMapped
CcIsLazyWriteScanQueuedInternal
CcIsThereDirtyData
CcIsThereDirtyDataEx
CcIsThereDirtyDataHelper
CcIsThereDirtyLoggedPages
CcIsWriteBehindThreadpoolAtLowPriority
CcLazyWriteScan
CcLazyWriteScanVolume
CcLockSystemCacheBuffer
CcLogExtraWBThreadAction
CcMapAndCopyFromCache
CcMapAndCopyInToCache
CcMapAndRead
CcMapData
CcMapDataCommon
CcMapDataForOverwrite
CcMdlRead
CcMdlReadComplete
CcMdlReadComplete2
CcMdlWriteAbort
CcMdlWriteComplete
CcMdlWriteComplete2
CcMmLogLostDelayedWriteError
CcNotifyEnhancedExternalCaches
CcNotifyExternalCachesInternal
CcNotifyOfMappedWrite
CcNotifyOfMappedWriteComplete
CcNotifyWriteBehind
CcNotifyWriteBehindAllVolumesHelper
CcNotifyWriteBehindEx
CcNotifyWriteBehindHelper
CcNotifyWriteBehindInternal
CcNotifyWriteBehindVolume
CcOkToAddWriteBehindThread
CcOpenRegistryPath
CcPVCMDelayedDeleteTimerDpc
CcPartitionTelemetryCallback
CcPerfLogCanWriteFail
CcPerfLogExtraWBThreadAction
CcPerfLogFlushCache
CcPerfLogFlushSection
CcPerfLogLazyWriteScan
CcPerfLogLoggedStreamsStats
CcPerfLogScheduleReadAhead
CcPerfLogVolumeLogHandleInfo
CcPerfLogWorkItemComplete
CcPerfLogWorkItemDequeue
CcPerfLogWorkItemEnqueue
CcPerformReadAhead
CcPinFileData
CcPinMappedData
CcPinRead
CcPostDeferredWrites
CcPostDeferredWritesOnVolumeHelper
CcPostPVCMDelayedDelete
CcPostPVCMForDeleteToPartition
CcPostVolumeTelemetry
CcPostWorkQueue
CcPostWorkQueueAsyncLazywrite
CcPostWorkQueueAsyncRead
CcPostWorkQueueCachemapUninit
CcPostWorkQueueRegular
CcPostWorkQueueSpecial
CcPrepareMdlWrite
CcPreparePinWrite
CcPrivateVolumeCacheMapTelemetryCallback
CcProcessDelayedDeletePVCM
CcPurgeAndClearCacheSection
CcPurgeCacheSection
CcQueryRegKeyValue
CcQueueAsyncGetDeviceGuid
CcQueueAsyncLazywriteCompletion
CcQueueLazyWriteScanThread
CcQueueLazyWriteScanThreadForVolume
CcQuickLazyWriteScanForVolume
CcReEngageWorkerThreads
CcReapPrivateVolumeCachemap
CcReapPrivateVolumeCachemapWorkerThread
CcRecalculateVacbArrayHighwaterMark
CcReferenceFileOffset
CcReferencePartitionAndPrivateVolumeCacheMap
CcReferencePartitionFromFileObject
CcReferencePrivateVolumeCacheMap
CcReferenceSharedCacheMapFileObject
CcReferenceVacbArray
CcRegisterExternalCache
CcRegisterExternalCacheEx
CcRegisterForContainerRestore
CcRegistryChangeCallback
CcReleaseBcbLockAndVacbLock
CcReleaseByteRangeFromWrite
CcRemapBcb
CcRemoveExternalCache
CcRemoveExternalCacheEx
CcRemoveVacbArray
CcRepinBcb
CcRepostToSynchronousLazywriter
CcRescheduleLazyWriteScan
CcRescheduleLazyWriteScanOnVolume
CcResetGlobalTelemetry
CcScanLogHandleList
CcScheduleLazyWriteScan
CcScheduleReadAhead
CcScheduleReadAheadEx
CcScheduleReadAheadNuma
CcSerializeWithLazyWriter
CcSetAdditionalCacheAttributes
CcSetAdditionalCacheAttributesEx
CcSetBcbOwnerPointer
CcSetDirtyInMask
CcSetDirtyPageThreshold
CcSetDirtyPinnedData
CcSetFileSizes
CcSetFileSizesEx
CcSetLazyWriteScanQueuedInternal
CcSetLogHandleForFile
CcSetLogHandleForFileEx
CcSetLoggedDataThreshold
CcSetMaxNumberOfWriteBehindThreads
CcSetParallelFlushFile
CcSetReadAheadGranularity
CcSetReadAheadGranularityEx
CcSetTelemetryPeriodicTimer
CcSetVacbInFreeList
CcSetVacbIntoList
CcSetVacbLargeOffset
CcSetValidData
CcSetupWatchForRegistryChanges
CcShouldIssueVDLUpdate
CcShouldLazyWriteCacheMap
CcShouldSpinAsyncReadWorkerThread
CcSlowReferenceSharedCacheMapFileObject
CcTelemetryBucketizeLatency
CcTelemetryPeriodicTimerCallback
CcTelemetryPeriodicTimerDpc
CcTestControl
CcUnInitializeAsyncReadForNodeHelper
CcUninitializeAsyncLazywriteForNodeHelper
CcUninitializeCacheMap
CcUninitializePartitionVacbs
CcUnmapAndPurge
CcUnmapFileOffsetFromSystemCache
CcUnmapInactiveViews
CcUnmapInactiveViewsInternal
CcUnmapVacb
CcUnmapVacbArray
CcUnpinData
CcUnpinDataForThread
CcUnpinFileDataEx
CcUnpinRepinnedBcb
CcUnregisterExternalCache
CcUnregisterExternalCacheEx
CcUpdateDynamicRegistrySettings
CcUpdateExternalCacheInfoEx
CcUpdateReadHistory
CcUpdateSharedCacheMapFlag
CcUpdateTimeOnLogHandles
CcWaitForCurrentLazyWriterActivity
CcWaitForCurrentLazyWriterActivityHelper
CcWaitForCurrentLazyWriterActivityOnNode
CcWaitForCurrentLazyWriterActivityOnPartition
CcWaitForUninitializeCacheMap
CcWorkerThread
CcWriteBehind
CcWriteBehindAsync
CcWriteBehindAsyncFlushOneRange
CcWriteBehindAsyncPreProcess
CcWriteBehindInternal
CcWriteBehindPostProcess
CcWriteBehindPreProcess
CcWriteBehindReleaseFile
CcZeroData
CcZeroDataInCache
CcZeroDataOnDisk
CcZeroEndOfLastPage
CfgAddressToBitState
CheckOneBitValidFlag
CimfsGetDiskParameters
CimfsInitialize
CimfsInitializeBootDisk
ClipInitHandles
CmAddLogForAction
CmAllocateExtraParameter
CmBootLastKnownGood
CmCallbackGetKeyObjectID
CmCallbackGetKeyObjectIDEx
CmCallbackReleaseKeyObjectIDEx
CmCheckNoTxContext
CmCheckRegistry
CmCleanupThreadInfo
CmCloseRmHandle
CmCloseTmHandle
CmCompleteRegistryInitialization
CmConvertHandleToKernelHandle
CmCreateKey
CmDeleteKey
CmDeleteKeyRecursive
CmDeleteLayeredKey
CmDeleteValueKey
CmDumpKeyToFile
CmEnumerateKey
CmEnumerateValueFromLayeredKey
CmEnumerateValueKeyFromMergedView
CmEqualTrans
CmEtwRunDown
CmFcInitSystem0
CmFcInitSystem2
CmFcInitSystem3
CmFcManagerDrainAllFeatureUsageNotifications
CmFcManagerFlushFeatureUsage
CmFcManagerInitialize
CmFcManagerNotifyFeatureUsage
CmFcManagerOverwriteFeatureConfigurationSection
CmFcManagerQueryFeatureConfigurationSectionInformation
CmFcManagerRecordFeatureUsage
CmFcManagerRegisterFeatureConfigurationChangeNotification
CmFcManagerRegisterFeatureUsageProvider
CmFcManagerStartBootPhase
CmFcManagerStartRuntimePhase
CmFcManagerUnregisterFeatureConfigurationChangeNotification
CmFcManagerUnregisterFeatureUsageProvider
CmFcManagerUpdateFeatureConfigurations
CmFcManagerUpdateFeatureUsageSubscriptions
CmFcRegisterFeatureConfigurationChangeNotification
CmFcShutdownSystem
CmFcpChangeSubscriptionWrapper
CmFcpCleanupSectionState
CmFcpConnectToAlpcServer
CmFcpCopySectionState
CmFcpCreateAlpcSectionView
CmFcpFeatureUsageProviderSubscriptionWrapper
CmFcpIncrementChangeStamp
CmFcpInitializeSectionState
CmFcpManagerAddBufferIntoPublishListAndSetPublishState
CmFcpManagerAllocateChangeSubscription
CmFcpManagerAllocateUsageProviderSubscription
CmFcpManagerArmFeatureUsageProviderFlushNotification
CmFcpManagerArmFeatureUsageProviderFlushTimer
CmFcpManagerArmFeatureUsageProviderFlushTimerDpc
CmFcpManagerArmFeatureUsageProviderPublishTimer
CmFcpManagerArmFeatureUsageRetryTimer
CmFcpManagerComputeMinimumFeatureUsageFlushTimestampIncrement
CmFcpManagerCreateSection
CmFcpManagerCreateSectionFromBuffer
CmFcpManagerDrainUsageNotifications
CmFcpManagerDrainUsageNotificationsDpc
CmFcpManagerDrainUsageNotificationsWorker
CmFcpManagerFeatureUsageBufferNearCapacityThreshold
CmFcpManagerFlushFeatureUsageDataWorker
CmFcpManagerFlushUsageTimerRoutine
CmFcpManagerOnFeatureUsageDataTransferComplete
CmFcpManagerProcessUsageDataProviders
CmFcpManagerPublishChangeNotifications
CmFcpManagerPublishFeatureUsageData
CmFcpManagerPublishFeatureUsageDataBuffers
CmFcpManagerPublishFeatureUsageDataBuffersWorker
CmFcpManagerPublishFeatureUsageDataIfNearCapacity
CmFcpManagerPublishFeatureUsageDataIfNearCapacityDpc
CmFcpManagerPublishFeatureUsageDataIfNearCapacityWorker
CmFcpManagerPublishUsageTimerRoutine
CmFcpManagerRetryUsageNotificationsTimerRoutine
CmFcpManagerRetryUsageNotificationsWorker
CmFcpManagerSoftwareHiveReady
CmFcpMapSection
CmFcpSendFeatureUsageReportAlpcMessage
CmFcpSubscribeScmWnfStateChange
CmFcpSwapSectionState
CmFcpUnmapSection
CmFcpWnfScmStateChangeNotificationCallback
CmFreezeRegistry
CmGetBoundTransaction
CmGetCallbackVersion
CmGetKCBCacheSecurity
CmGetKeyFlags
CmGetKeyLastWriteTime
CmGetRootKeyObjectForSilo
CmGetSystemDriverList
CmGetVisibleMaxValueNameLenAndDataLen
CmGetVisibleSubkeyCount
CmGetVisibleValueCount
CmHiveCacheDriverSetup
CmInitBootFeatureConfigurations
CmInitServerSiloState
CmInitSiloNamespace
CmInitSystem0
CmInitSystem1
CmInitSystem2
CmInitializeProcessor
CmInitializeProcessorCallbacks
CmInitializeThreadInfo
CmIsLastKnownGoodBoot
CmIsStateSeparationDevModeEnabled
CmIsStateSeparationEnabled
CmKeyBodyNeedsVirtualImage
CmKeyBodyRemapToVirtual
CmKeyBodyRemapToVirtualForEnum
CmKeyBodyReplicateToVirtual
CmKtmNotification
CmListGetNextElement
CmListGetPrevElement
CmLoadAppKey
CmLoadDifferencingKey
CmLoadKey
CmLockHive
CmLockHiveSecurityExclusive
CmLockHiveSecurityShared
CmLockKeyForWrite
CmLogTmRmAction
CmNotifyRunDown
CmObReferenceObjectByHandle
CmObReferenceObjectByName
CmObliterateRMTxArray
CmOpenKey
CmOpenKeyForBugCheckRecovery
CmPostCallbackNotification
CmPostCallbackNotificationEx
CmQueryBuildVersionInformation
CmQueryFeatureConfigurationSections
CmQueryKey
CmQueryLayeredKey
CmQueryMultipleValueForLayeredKey
CmQueryMultipleValueKey
CmQueryRegistryQuotaInformation
CmQuerySingleFeatureConfiguration
CmQueryValueKey
CmRealKCBToVirtualPath
CmReconcileAndValidateAllHives
CmRegisterCallback
CmRegisterCallbackEx
CmRegisterInternalCallback
CmRegisterMachineHiveLoadedNotification
CmRegisterSystemHiveLimitCallback
CmReleaseLoadKeyContext
CmRenameKey
CmReplaceKey
CmRestoreKey
CmRetrieveExtraParameter
CmRmFinalizeRecovery
CmRmIsKCBVisible
CmRmIsKcbStackVisible
CmSaveKey
CmSaveKeyToBuffer
CmSaveMergedKeys
CmSelectQualifiedInstallLanguage
CmSetAcpiHwProfile
CmSetCallbackObjectContext
CmSetKeyFlags
CmSetLastWriteTimeKey
CmSetLazyFlushState
CmSetRegistryQuotaInformation
CmSetValueKey
CmShutdownCmRM
CmShutdownSystem
CmShutdownSystem0
CmShutdownSystem1
CmShutdownSystem2
CmSiAcquireProcessLockedPagesCharge
CmSiAllocateMemory
CmSiBugCheck
CmSiCloseSection
CmSiCreateEvent
CmSiCreateSectionForFile
CmSiEventTupleCleanup
CmSiEventTupleInitialize
CmSiExtendSection
CmSiFreeMemory
CmSiGetMemoryAllocationGranularity
CmSiGetPageSize
CmSiGetSectionLength
CmSiLockViewOfSection
CmSiMapViewOfSection
CmSiPrefetchVirtualMemoryRange
CmSiProcessTupleInitialize
CmSiProcessTupleStartFromHandle
CmSiProtectViewOfSection
CmSiQuerySystemTime
CmSiRWLockAcquireExclusive
CmSiRWLockInitialize
CmSiRWLockReleaseExclusive
CmSiReleaseProcessLockedPagesCharge
CmSiSetEvent
CmSiSetProcessWorkingSetMaximum
CmSiUnlockViewOfSection
CmSiUnmapViewOfSection
CmSiWaitForMultipleEvents
CmSiWaitForSingleEvent
CmSizeOfThreadInfo
CmSnapshotRMTxArray
CmThawRegistry
CmTmCreateEnlistment
CmUnRegisterCallback
CmUnloadKey
CmUnlockHive
CmUnlockHiveSecurity
CmUnregisterMachineHiveLoadedNotification
CmUpdateFeatureConfiguration
CmUpdateFeatureUsageSubscription
CmVirtualKCBToRealPath
CmpAbortLightWeightTransaction
CmpAbortRollbackPacket
CmpAcceptBoot
CmpAccountForLogReservation
CmpAcquireHiveLoadUnloadRundown
CmpAcquireShutdownRundown
CmpAcquireSystemDriverHiveContext
CmpAcquireWriteQueue
CmpAddAcpiAliasEntry
CmpAddAliasEntry
CmpAddDockingInfo
CmpAddDriverToList
CmpAddEnlistmentToRollbackPacket
CmpAddKeyHashToEntry
CmpAddPointerToRollbackPacket
CmpAddProcessorConfigurationEntry
CmpAddRemoveContainerToCLFSLog
CmpAddRemoveRMLogContainer
CmpAddSecurityCellToCache
CmpAddStringToMapping
CmpAddSubKey
CmpAddSubKeyEx
CmpAddSubKeyToList
CmpAddToDelayedClose
CmpAddToDelayedDeref
CmpAddToHiveFileList
CmpAddToLeaf
CmpAddUoWToRollbackPacket
CmpAddValueKeyNew
CmpAddValueKeyTombstone
CmpAddValueToListEx
CmpAdjustRequestedFileSize
CmpAdjustSecurityCacheSize
CmpAdminSystemSecurityDescriptor
CmpAllocate
CmpAllocateForNonPagedHive
CmpAllocateKeyControlBlock
CmpAllocateLayerInfoForKcb
CmpAllocatePool
CmpAllocatePoolLookaside
CmpAllocatePoolWithQuota
CmpAllocatePostBlock
CmpAllocateSiloContext
CmpAllocateTransientPool
CmpAllocateTransientPoolWithQuota
CmpAllocateUnitOfWork
CmpAppendDllSection
CmpAppendLine
CmpAppendSection
CmpAppendValue
CmpApplyAdminSdOnHiveFiles
CmpArmDelayedCloseTimer
CmpArmLazyWriter
CmpAssignKeySecurity
CmpAssignSecurityDescriptor
CmpAssignSecurityToKcb
CmpAttachContextToSilo
CmpAttachToRegistryProcess
CmpBecomeActiveFlusherAndReconciler
CmpBindHiveToTrans
CmpBlockHiveWrites
CmpBlockTwoHiveWrites
CmpBounceContextCleanup
CmpBounceContextCopyDataToCallerBuffer
CmpBounceContextStart
CmpBuildAdminInformation
CmpBuildMachineHiveCache
CmpBuildMachineHiveMountPoint
CmpBuildRegMultiSz
CmpBuildVirtualReplicationStack
CmpCallCallBacks
CmpCallCallBacksEx
CmpCallbackFatalFilter
CmpCallbackFetchCallContext
CmpCallbackFillObjectContext
CmpCanGrowHive
CmpCancelSubordinatePost
CmpCaptureKeyValueArray
CmpCheckAdminAccess
CmpCheckAndFixSecurityCellsRefcount
CmpCheckCreateAccess
CmpCheckCreateAccessOnKcbStack
CmpCheckExeOwnerForPca
CmpCheckHivePrimaryFileReadWriteAccess
CmpCheckKcbStackAccess
CmpCheckKey
CmpCheckKeyAccess
CmpCheckKeyBodyAccess
CmpCheckKeyNodeStackAccess
CmpCheckKeyOwnerForPca
CmpCheckKeySecurityDescriptorAccess
CmpCheckLeaf
CmpCheckLexicographicalOrder
CmpCheckOpenAccessOnKeyBody
CmpCheckRegistry2
CmpCheckSecurityCellAccess
CmpCheckValueList
CmpClaimGlobalQuota
CmpCleanUpHigherLayerKcbCachesPostCallback
CmpCleanUpHigherLayerKcbCachesPreCallback
CmpCleanUpKCBCacheTable
CmpCleanUpKcbCacheWithLock
CmpCleanUpKcbCachedSymlink
CmpCleanUpSubKeyInfo
CmpCleanupDiscardReplaceContext
CmpCleanupDiscardReplacePost
CmpCleanupDiscardReplacePre
CmpCleanupKcbStack
CmpCleanupKeyNodeStack
CmpCleanupLightWeightPrepare
CmpCleanupLightWeightTransaction
CmpCleanupLightWeightUoWData
CmpCleanupParseContext
CmpCleanupPathInfo
CmpCleanupRollbackPacket
CmpCleanupThreadInfo
CmpCleanupTransactionState
CmpClearKeyAccessBits
CmpCloneHwProfile
CmpCloneKCBValueListForTrans
CmpCloneToUnbackedKcb
CmpCloseKeyObject
CmpCloseLightWeightTransaction
CmpCloseSystemDriverHiveContext
CmpCmdHiveClose
CmpCmdHiveOpen
CmpCmdInit
CmpCmdRenameHive
CmpCoalescingCallback
CmpCommitDiscardAndReplaceKcbAndUnbackedHigherLayers
CmpCommitDiscardReplacePost
CmpCommitLightWeightTransaction
CmpCommitPreparedLightWeightTransaction
CmpCompareCompressedName
CmpCompareInIndex
CmpCompareKeysByName
CmpCompareLayerDescriptors
CmpCompareNewValueDataAgainstKCBCache
CmpCompareTwoCompressedNames
CmpCompareUnicodeString
CmpCompleteFlushAndPurgeIrp
CmpCompleteLazyWrite
CmpCompleteUnloadKey
CmpComputeComponentHashes
CmpComputeLogFillLevel
CmpConcatenateValueLists
CmpConstructAndCacheName
CmpConstructName
CmpConstructNameFromKcbNameBlocks
CmpConstructNameFromKeyNodes
CmpConstructNameWithStatus
CmpConvertLangId
CmpCopyCell
CmpCopyCompressedName
CmpCopyKeyPartial
CmpCopyMergeOfLayeredKeyNode
CmpCopyName
CmpCopySaclToVirtualKey
CmpCopySyncTree
CmpCopySyncTree2
CmpCopyValue
CmpCreateChild
CmpCreateControlSet
CmpCreateControlSetOverride
CmpCreateEmptyHiveClone
CmpCreateEvent
CmpCreateExtendedControlSets
CmpCreateGlobalKeyLockEntry
CmpCreateHardwareProfiles
CmpCreateHive
CmpCreateHiveRootCell
CmpCreateHwProfileFriendlyName
CmpCreateKeyBody
CmpCreateKeyControlBlock
CmpCreateLayerLink
CmpCreateObjectTypes
CmpCreatePerfKeys
CmpCreatePredefined
CmpCreateRegistryProcessToken
CmpCreateRegistryRoot
CmpCreateRegistryThread
CmpCreateRootNode
CmpCreateSiloKeyLockEntry
CmpCreateTemporaryHive
CmpCreateTombstone
CmpDecommisssionKcb
CmpDecrementAppHiveUnloadCount
CmpDelayCloseWorker
CmpDelayDerefKeyControlBlock
CmpDelayFreeCmRm
CmpDelayFreeRMDpcRoutine
CmpDelayFreeRMWorker
CmpDelayedDerefKeys
CmpDeleteHive
CmpDeleteKcbCache
CmpDeleteKeyObject
CmpDeleteLightWeightTransaction
CmpDeleteTree
CmpDereferenceHive
CmpDereferenceKeyControlBlock
CmpDereferenceKeyControlBlockUnsafe
CmpDereferenceKeyControlBlockWithLock
CmpDereferenceNameControlBlockWithLock
CmpDereferenceSecurityNode
CmpDestroyHive
CmpDestroySecurityCache
CmpDetachFromRegistryProcess
CmpDisableLazyFlush
CmpDiscardKcb
CmpDiskFullWarning
CmpDiskFullWarningWorker
CmpDoAccessCheckOnKCB
CmpDoAccessCheckOnLayeredSubtree
CmpDoAccessCheckOnSubtree
CmpDoBuildVirtualStack
CmpDoCompareKeyName
CmpDoFileFlush
CmpDoFileRead
CmpDoFileSetSizeEx
CmpDoFileWrite
CmpDoFindSubKeyByNumber
CmpDoFlushAll
CmpDoFlushNextHive
CmpDoLocalizeNextHive
CmpDoParseKey
CmpDoQueryKeyName
CmpDoQueueLateUnloadWorker
CmpDoQueueSystemHiveHysteresis
CmpDoReDoCreateKey
CmpDoReDoRecord
CmpDoReOpenTransKey
CmpDoReadTxRBigLogRecord
CmpDoReconcileNextHive
CmpDoSort
CmpDoTransWriteLogRecord
CmpDoWritethroughReparse
CmpDoesBufferRequireCapturing
CmpDoesKeyHaveOpenSubkeys
CmpDoesKeyHaveOpenSubkeysWorker
CmpDrainDelayDerefContext
CmpDummyApc
CmpDummyThreadRoutine
CmpDumpKeyBodyList
CmpDumpKeyToBuffer
CmpDumpOneKeyBody
CmpDuplicateIndex
CmpEffectiveTokenForSubject
CmpEnableLazyFlush
CmpEnableLazyFlushDpcRoutine
CmpEnlistKeyBody
CmpEnumerateAllHigherLayerKcbs
CmpEnumerateAllOpenSubKeys
CmpEnumerateCallback
CmpEnumerateKcbCacheBucket
CmpEnumerateLayeredKey
CmpEtwDumpKcb
CmpExamineSaclForAuditEvent
CmpExpandPathInfo
CmpFatalFilter
CmpFileFlush
CmpFileFlushAndPurge
CmpFileRead
CmpFileWrite
CmpFilterAcpiDockingState
CmpFindCellInIndex
CmpFindControlSet
CmpFindDrivers
CmpFindExtraParameterInBlock
CmpFindGroupOrderList
CmpFindHiveSubKey
CmpFindKcbInHashEntryByCellIndex
CmpFindKcbInHashEntryByCompressedName
CmpFindKcbInHashEntryByName
CmpFindMachineHiveByMountPoint
CmpFindMatchingDescriptorCell
CmpFindNameInList
CmpFindNameInListCellWithStatus
CmpFindNameInListWithStatus
CmpFindPathByNameEx
CmpFindRedirectedDriverServiceStateNode
CmpFindSecurityCellCacheIndex
CmpFindStateSepKeysRedirectionMapNode
CmpFindSubKeyByName
CmpFindSubKeyByNameWithStatus
CmpFindSubKeyByNumber
CmpFindSubKeyByNumberEx
CmpFindSubKeyByNumberFromMergedView
CmpFindSubKeyInLeafWithStatus
CmpFindSubKeyInRoot
CmpFindSubkeyInHashByChildCell
CmpFindTagIndex
CmpFindValueByName
CmpFinishBeingActiveFlusherAndReconciler
CmpFinishSystemHivesLoad
CmpFireCleanupNotifications
CmpFlushBackupHive
CmpFlushHive
CmpFlushNotifiesOnAllUnbackedHigherLayerKcbs
CmpFlushNotifiesOnKeyBodyList
CmpFlushNotifiesPostCallback
CmpFlushNotifiesPreCallback
CmpFlushNotify
CmpFlushTraceLoggingProvider
CmpFlushUnsupportedOperationTelemetry
CmpForceFlushForCoalescing
CmpForceFlushWorker
CmpFree
CmpFreeAllMemory
CmpFreeBootRegistry
CmpFreeDriverList
CmpFreeExtraParameter
CmpFreeIndexByCell
CmpFreeKeyBody
CmpFreeKeyByCell
CmpFreeKeyControlBlock
CmpFreeKeyValueList
CmpFreeKeyValues
CmpFreeLineList
CmpFreeOffsetArray
CmpFreePool
CmpFreePoolLookaside
CmpFreePoolWithTag
CmpFreePostBlock
CmpFreeSecurityDescriptor
CmpFreeSiloContextCallback
CmpFreeSiloKeyLockEntry
CmpFreeSubordinatePost
CmpFreeTransientPool
CmpFreeTransientPoolWithTag
CmpFreeValue
CmpFreeValueData
CmpFreezeHive
CmpFreezeThawDpcRoutine
CmpFreezeThawWorker
CmpFullPromoteHiveRootFromKcbStack
CmpFullPromoteSingleKeyFromKeyNodeStacks
CmpGenerateAppHiveSecurityDescriptor
CmpGenerateFastLeafHintForUnicodeString
CmpGenerateFlushControlData
CmpGetAcpiBiosVersion
CmpGetAcpiProfileInformation
CmpGetBiosDate
CmpGetBiosVersion
CmpGetBootValueData
CmpGetCallbackObjectContext
CmpGetCmHiveFromVirtualPath
CmpGetCompleteFileName
CmpGetComponentHashAtIndex
CmpGetComponentNameAtIndex
CmpGetContextForSiloNoRef
CmpGetEffectiveCellType
CmpGetEffectiveKcbSemantics
CmpGetEffectiveKeyNodeSemantics
CmpGetFileSize
CmpGetIndexElementSize
CmpGetKcbAtLayerHeight
CmpGetKeyName
CmpGetKeyNodeForKcb
CmpGetKnownHivePathNode
CmpGetLastHive
CmpGetMappingHiveForString
CmpGetNameControlBlock
CmpGetNextActiveHive
CmpGetNextHive
CmpGetNextName
CmpGetNodeName
CmpGetOrCreateContextForSiloNoRef
CmpGetPhaseAccessBit
CmpGetRegistryValue
CmpGetSectionLineIndex
CmpGetSectionLineIndexValueCount
CmpGetSecurityCacheEntryForKcbStack
CmpGetSecurityCellForKeyNodeStack
CmpGetSecurityDescriptorForKcbStack
CmpGetSecurityDescriptorNodeEx
CmpGetStateSepKeysRedirectionPathValue
CmpGetSubKeyCountForKcbStack
CmpGetSubKeyCountForKeyNodeStack
CmpGetSymbolicLinkTarget
CmpGetSystemControlValues
CmpGetSystemRelativeRegistryHiveFilePath
CmpGetToken
CmpGetValueCountForKeyNodeStack
CmpGetValueData
CmpGetValueForAudit
CmpGetVirtualStoreRoot
CmpGetVirtualizationID
CmpGetVirtualizationIDFromFullVirtualPath
CmpGetVolumeClusterSize
CmpGetVolumeClusterSizeCompletion
CmpGetVolumeLogFileSizeCap
CmpGlobalLockKeyForWrite
CmpGlobalUnlockKeyForWrite
CmpHandlePageFileOpenNotification
CmpHashCompressedComponent
CmpHashUnicodeComponent
CmpHiveCacheAcknowledgeOplockBreak
CmpHiveCacheClaimHiveEntry
CmpHiveCacheCreateHiveEntry
CmpHiveCacheEntryCleanup
CmpHiveCacheEntryLockAcquire
CmpHiveCacheEntryLockRelease
CmpHiveCachePnpNotificationCallback
CmpHiveCachePopulateHiveEntry
CmpHiveCachePopulateHiveEntryThread
CmpHiveCacheSubscribePnpNotifications
CmpHiveInitialize
CmpHiveRootSecurityDescriptor
CmpHwprofileDefaultSelect
CmpIncrementCachedSecurityRefcount
CmpIncrementKcbSequenceNumber
CmpInitBackupHive
CmpInitCallbacks
CmpInitCmRM
CmpInitGlobalQuotaAllowed
CmpInitHiveFromFile
CmpInitSIDToHiveMapping
CmpInitSecurityCache
CmpInitSiloSupport
CmpInitializeActualFileSizes
CmpInitializeDelayDerefContext
CmpInitializeDelayedCloseTable
CmpInitializeDiscardReplaceContext
CmpInitializeDriverStores
CmpInitializeFreezeThaw
CmpInitializeGlobalKeyLockTracker
CmpInitializeHardwareConfiguration
CmpInitializeKcbCache
CmpInitializeKcbStack
CmpInitializeKeyNameString
CmpInitializeKeyNodeStack
CmpInitializeLazyWriters
CmpInitializeLightWeightTransactionType
CmpInitializeLoadOptions
CmpInitializeMachineDependentConfiguration
CmpInitializeMachineHiveLoadedCallbacks
CmpInitializeNameCache
CmpInitializeParseContext
CmpInitializePreloadedHive
CmpInitializePreloadedHives
CmpInitializeRegistryNames
CmpInitializeRegistryNode
CmpInitializeRegistryProcess
CmpInitializeRollbackPacket
CmpInitializeSystemBiosInformation
CmpInitializeSystemHive
CmpInitializeSystemHivesLoad
CmpInitializeThreadInfo
CmpInitializeTransactions
CmpInitializeTrustedInstallerSid
CmpInitializeValueNameString
CmpInsertCallbackInListByAltitude
CmpInsertKeyHash
CmpInsertSecurityCellList
CmpInterlockedFunction
CmpInvalidateAllHigherLayerKcbs
CmpInvalidateAllHigherLayerKcbsPostCallback
CmpInvalidateAllHigherLayerKcbsPreCallback
CmpInvalidateSubtree
CmpInvalidateSubtreeWorker
CmpIsCmRm
CmpIsHiveAlreadyLoaded
CmpIsHiveEligibleForLazyReconcile
CmpIsHiveLoadUnloadRundownActive
CmpIsKcbInsideVirtualizedHive
CmpIsKcbLockAllowed
CmpIsKcbLockedExclusive
CmpIsKeyBodyEligibleForDump
CmpIsKeyDeleted
CmpIsKeyDeletedForKeyBody
CmpIsKeyStackDeleted
CmpIsKeyStackSymlink
CmpIsLoadType
CmpIsRegistryLockAcquired
CmpIsRegistryLockContended
CmpIsShutdownRundownActive
CmpIsSystemEntity
CmpIsThisSameFile
CmpIsValueTombstone
CmpIsWriteQueueActive
CmpIssueNewDirtyCallback
CmpJoinClassOfTrust
CmpKeyEnumStackAdvance
CmpKeyEnumStackAdvanceInternal
CmpKeyEnumStackBeginEnumerationForKeyNodeStack
CmpKeyEnumStackCleanup
CmpKeyEnumStackCreateResumeContext
CmpKeyEnumStackEntryAdvance
CmpKeyEnumStackEntryBegin
CmpKeyEnumStackEntryCleanup
CmpKeyEnumStackEntryInitialize
CmpKeyEnumStackEntryNotifyPromotion
CmpKeyEnumStackFreeResumeContext
CmpKeyEnumStackGetEntryAtLayerHeight
CmpKeyEnumStackInitialize
CmpKeyEnumStackNotifyPromotion
CmpKeyEnumStackReset
CmpKeyEnumStackStart
CmpKeyEnumStackStartFromKcbStack
CmpKeyEnumStackStartFromKeyNodeStack
CmpKeyEnumStackVerifyResumeContext
CmpKeyFullNameLength
CmpKeyNodeStackEntryCleanup
CmpKeyNodeStackEntryInitialize
CmpKeyNodeStackEntryReset
CmpKeyNodeStackGetEntryAtLayerHeight
CmpKeySecurityIncrementReferenceCount
CmpLateUnloadHiveWorker
CmpLazyCommitDpcRoutine
CmpLazyCommitWorker
CmpLazyFlushDpcRoutine
CmpLazyWriteWorker
CmpLightWeightCleanupModifyKeyDataUoW
CmpLightWeightCleanupSetSecDescUoW
CmpLightWeightCleanupSetValueKeyUoW
CmpLightWeightCommitAddKeyUoW
CmpLightWeightCommitDeleteKeyUoW
CmpLightWeightCommitDeleteValueKeyUoW
CmpLightWeightCommitRecreateKeyUoW
CmpLightWeightCommitSetSecDescUoW
CmpLightWeightCommitSetUserFlagsUoW
CmpLightWeightCommitSetValueKeyUoW
CmpLightWeightCreateModificationData
CmpLightWeightCreateSetValueData
CmpLightWeightDuplicateParentLists
CmpLightWeightPrepareAddKeyUoW
CmpLightWeightPrepareDeleteKeyUoW
CmpLightWeightPrepareDeleteValueKeyUoW
CmpLightWeightPrepareSetKeyUserFlags
CmpLightWeightPrepareSetSecDescUoW
CmpLightWeightPrepareSetValueKeyUoW
CmpLightWeightSwapParentSubKeyList
CmpLightWeightUpdateModificationActions
CmpLightWeightUpdateSharedSetValueData
CmpLinkHiveToMaster
CmpLinkKeyToHive
CmpLoadHiveThread
CmpLoadHiveVolatile
CmpLoadKeyCommon
CmpLoadLayerVersion
CmpLoadLayerVersions
CmpLoadManufacturingModeNode
CmpLoadManufacturingProfileNode
CmpLoadManufacturingProfileServicesNode
CmpLoadServicesNode
CmpLoadSystemVersionData
CmpLockAppHiveLoadList
CmpLockCallbackListExclusive
CmpLockCallbackListShared
CmpLockContextListExclusive
CmpLockContextListShared
CmpLockDeletedHashEntryExclusiveByKcb
CmpLockFreezeQueue
CmpLockGlobalKeyLockTrackerExclusive
CmpLockGlobalKeyLockTrackerShared
CmpLockHashEntryByIndexExclusive
CmpLockHashEntryExclusiveByKcb
CmpLockHashEntryShared
CmpLockHashEntrySharedByKcb
CmpLockHiveListExclusive
CmpLockHiveListShared
CmpLockIXLockExclusive
CmpLockIXLockIntent
CmpLockKcbExclusive
CmpLockKcbShared
CmpLockKcbStackExclusive
CmpLockKcbStackFlusherLocksExclusive
CmpLockKcbStackShared
CmpLockKcbStackTopExclusiveRestShared
CmpLockKeyBodyIntoMemory
CmpLockRegistry
CmpLockRegistryExclusive
CmpLockRegistryFreezeAware
CmpLockSiloKeyLockTrackerExclusive
CmpLockTwoKcbsShared
CmpLockTwoSecurityCachesExclusiveShared
CmpLogCheckpoint
CmpLogClearAccessBitsEvent
CmpLogDirtyVectorUse
CmpLogEvent
CmpLogFailureToGetFileSize
CmpLogFlushPhaseEnd
CmpLogFlushPhaseStart
CmpLogHiveDestroyEvent
CmpLogHiveDirtyEvent
CmpLogHiveFileInaccessible
CmpLogHiveInitializeEvent
CmpLogHiveLinkEvent
CmpLogHiveRundownEvent
CmpLogNotificationRegister
CmpLogReorganizeEvent
CmpLogTransactionAbortedByName
CmpLogTransactionAbortedForRollbackPacket
CmpLogTransactionAbortedWithChildName
CmpLogTxrInitEvent
CmpLogUnsupportedOperation
CmpMachineHiveCacheClaimEntry
CmpMachineHiveCachePopulateEntry
CmpMachineHiveCallbackFatalFilter
CmpMachineHiveListInitialize
CmpMachineHiveLoadedWorkItem
CmpMarkAllChildrenDirty
CmpMarkCurrentProfileDirty
CmpMarkCurrentValueDirty
CmpMarkEntireIndexDirty
CmpMarkIndexDirty
CmpMarkIndexDirtyInStorageType
CmpMarkKeyDirty
CmpMarkKeyParentDirty
CmpMarkKeyUnbacked
CmpMarkKeyValuesDirty
CmpMarkValueDataDirty
CmpMergeKeyValues
CmpMergeVersionDescriptors
CmpMigrateOOBELanguageToInstallationLanguage
CmpMountPreloadedHives
CmpMoveBiosAliasTable
CmpNameFromAttributes
CmpNameSize
CmpNotifyChangeKey
CmpNotifyMachineHiveLoaded
CmpNotifyTriggerCheck
CmpOKToFollowLink
CmpOpenDevicesControlSet
CmpOpenHiveFile
CmpOpenHiveFiles
CmpOpenSystemDriverHiveContext
CmpParseInfBuffer
CmpParseKey
CmpPartialPromoteSingleKeyFromKeyNodeStacks
CmpPartialPromoteSubkeys
CmpPerformCompleteKcbCacheLookup
CmpPerformKeyBodyDeletionCheck
CmpPerformSiloKeyLockTrackerEnabledCheck
CmpPerformTrustClassAccessCheck
CmpPerformUnloadKey
CmpPopulateKcbStack
CmpPopulateKeyBasicInformation
CmpPopulateKeyCachedInformation
CmpPopulateKeyFullInformation
CmpPopulateKeyNodeInformation
CmpPopulateKeyNodeStackFromKcbStack
CmpPostApc
CmpPostApcRunDown
CmpPostNotify
CmpPrepareDiscardAndReplaceKcbAndUnbackedHigherLayers
CmpPrepareDiscardReplacePost
CmpPrepareDiscardReplacePre
CmpPrepareForSubtreeInvalidation
CmpPrepareForSubtreeInvalidationWorker
CmpPrepareLightWeightTransaction
CmpPrepareToInvalidateAllHigherLayerKcbs
CmpPrepareToInvalidateAllHigherLayerKcbsPostCallback
CmpPrepareToInvalidateAllHigherLayerKcbsPreCallback
CmpPreserveSystemHiveData
CmpProcessForSimpleStringSub
CmpProcessLightWeightUOW
CmpPromoteKey
CmpPromoteSingleKeyFromKcbStacks
CmpPromoteSingleKeyFromParentKcbAndChildKeyNode
CmpPromoteSubtree
CmpProtectPool
CmpProtectPoolEx
CmpPublishEventForPcaResolver
CmpQueryDowncastString
CmpQueryFileSecurityDescriptor
CmpQueryHiveRedirectionFileList
CmpQueryKeyData
CmpQueryKeyDataFromCache
CmpQueryKeyDataFromKeyNodeStack
CmpQueryKeyDataFromNode
CmpQueryKeyName
CmpQueryKeyValueData
CmpQueryLayerVersionString
CmpQueryLayerVersionUlong
CmpQueryNameString
CmpQuitNextActiveHive
CmpQuitNextHive
CmpQuotaWarningWorker
CmpReadBuildVersion
CmpRealignLogBuffers
CmpRebuildKcbCache
CmpRebuildKcbCacheFromNode
CmpRecheckHiveVolumePolicy
CmpRecordParseFailure
CmpRecordRegistryLockAcquire
CmpRecordRegistryLockRelease
CmpRecordShutdownStopTime
CmpRecordUnloadEventForHive
CmpRecoverEnlistment
CmpRecoverFlushProtocolStateFromFiles
CmpReferenceHive
CmpReferenceKeyControlBlock
CmpReferenceKeyControlBlockLockNotHeld
CmpReferenceKeyControlBlockUnsafe
CmpReferenceSecurityNode
CmpRefreshHive
CmpRefreshWorkerRoutine
CmpRegisterCallbackInternal
CmpRegisterTraceLoggingProvider
CmpRehashKcbSubtree
CmpReleaseGlobalQuota
CmpReleaseHiveLoadUnloadRundown
CmpReleaseShutdownRundown
CmpReleaseWriteQueue
CmpRemoveCellFromIndex
CmpRemoveFromDelayedClose
CmpRemoveFromSecurityCache
CmpRemoveHiveFromNamespace
CmpRemoveKeyHash
CmpRemoveKeyHashFromDeletedKcbTable
CmpRemoveKeyHashFromTableEntry
CmpRemoveLayerLinkForDiscardedKcb
CmpRemoveSecurityCellList
CmpRemoveSubKey
CmpRemoveSubKeyCellNoCellRef
CmpRemoveSubKeyFromList
CmpRemoveValueFromList
CmpReorganizeHive
CmpReparseToVirtualPath
CmpReplicateKeyToVirtual
CmpReportAuditVirtualizationEvent
CmpReportNotify
CmpReportNotifyForKcbStack
CmpReportNotifyHelper
CmpRequestOplockOnHiveFile
CmpReserveRollbackPacketSpace
CmpResetKeyNodeStack
CmpResolveHiveLoadConflict
CmpRestampVersion
CmpRetryBackOff
CmpRmAnalysisPhase
CmpRmReDoPhase
CmpRmUnDoPhase
CmpRollbackLightWeightTransaction
CmpRollbackTransactionArray
CmpRunDownCmRM
CmpRundownUnitOfWork
CmpSaveBootControlSet
CmpSaveKeyByFileCopy
CmpSearchAndCountWorker
CmpSearchAndRehashWorker
CmpSearchAndTagNoDelayCloseWorker
CmpSearchForOpenSubKeys
CmpSearchForTrans
CmpSearchKeyControlBlockTreeEx
CmpSearchLineInSectionByIndex
CmpSearchSectionByName
CmpSearchSecurityCellCache
CmpSecConvKey
CmpSecurityMethod
CmpSelectLeaf
CmpSendUnsupportedOperationTelemetryEvent
CmpSetAccessStateForBackupRestore
CmpSetGlobalQuotaAllowed
CmpSetIoPriorityThread
CmpSetKeySecurity
CmpSetNetworkValue
CmpSetPriorityThread
CmpSetRespectIoPriorityThread
CmpSetSecurityDescriptorInfo
CmpSetSystemBiosInformation
CmpSetSystemRegistryString
CmpSetSystemValues
CmpSetValueDataExisting
CmpSetValueDataNew
CmpSetValueKeyExisting
CmpSetValueKeyNew
CmpSetValueKeyTombstone
CmpSetVersionData
CmpSetVideoBiosInformation
CmpSetupConfigurationTree
CmpSetupLoggingState
CmpShutdownWorkers
CmpSignalDeferredPosts
CmpSignalUnloadEventArrayForHive
CmpSnapshotKcbStackSecurity
CmpSnapshotTxOwnerArray
CmpSnapshotTxOwnerArrayToRollbackPacket
CmpSortByTag
CmpSortDriverList
CmpSortedValueEnumStackAdvance
CmpSortedValueEnumStackAdvanceInternal
CmpSortedValueEnumStackCleanup
CmpSortedValueEnumStackEntryCleanup
CmpSortedValueEnumStackEntryStart
CmpSortedValueEnumStackGetEntryAtLayerHeight
CmpSortedValueEnumStackInitialize
CmpSortedValueEnumStackStartFromKeyNodeStack
CmpSortedValueEnumStackValueCompareFunction
CmpSplitLeaf
CmpSplitParentKeyName
CmpStartCLFSLog
CmpStartKcbStack
CmpStartKcbStackForTopLayerKcb
CmpStartKeyNodeStack
CmpStartKeyNodeStackFromKcbStack
CmpStartRMLog
CmpStartRMLogs
CmpStartSiloRegistryNamespace
CmpStopRMLog
CmpStopSiloKeyLockTracker
CmpSubtreeEnumeratorAdvance
CmpSubtreeEnumeratorBeginForKcbStack
CmpSubtreeEnumeratorBeginForKeyNodeStack
CmpSubtreeEnumeratorCleanup
CmpSubtreeEnumeratorGetCurrentKeyStacks
CmpSubtreeEnumeratorInitialize
CmpSubtreeEnumeratorStart
CmpSubtreeEnumeratorStartForKcbStack
CmpSwapHiveStorage
CmpSwapValueInList
CmpSyncKcbCacheForHive
CmpSyncKeyValues
CmpSyncNextBackupHive
CmpSyncSubKeysAfterDelete
CmpSystemHiveHysteresisWorker
CmpSystemQuotaWarningWorker
CmpThreadInfoLogStack
CmpTraceHiveFlushFinishWaitForActive
CmpTraceHiveFlushStart
CmpTraceHiveFlushStartWaitForActive
CmpTraceHiveFlushStop
CmpTraceHiveFlushWroteLogFile
CmpTraceHiveFlushWrotePrimaryFile
CmpTraceHiveLoadStart
CmpTraceHiveLoadStop
CmpTraceHiveMountBaseFileMounted
CmpTraceHiveMountLogEntryApplied
CmpTraceHiveMountStart
CmpTraceHiveMountStop
CmpTraceHiveRestoreStart
CmpTraceHiveRestoreStop
CmpTraceHiveSaveStart
CmpTraceHiveSaveStop
CmpTraceHiveUnloadStart
CmpTraceHiveUnloadStop
CmpTraceSecurityChanging
CmpTraceShutdownFlushStart
CmpTraceShutdownFlushStop
CmpTraceShutdownRundownComplete
CmpTraceShutdownStart
CmpTraceShutdownStop
CmpTransAllocateTrans
CmpTransDereferenceTransaction
CmpTransEnlistUowInCmTrans
CmpTransEnlistUowInKcb
CmpTransGetTransPtr
CmpTransInitializeTransaction
CmpTransIsTransActive
CmpTransMgrCommit
CmpTransMgrFreeVolatileData
CmpTransMgrPrepare
CmpTransMgrRollback
CmpTransMgrSyncHive
CmpTransReferenceTransaction
CmpTransSearchAddLightWeightTrans
CmpTransSearchAddTrans
CmpTransSearchAddTransFromHive
CmpTransSearchAddTransFromKeyBody
CmpTransSearchAddTransFromRm
CmpTransSilentIgnore
CmpTransUowIsEqual
CmpTransWriteLog
CmpTrimHive
CmpTryAcquireIXLockWithRollbackPacket
CmpTryAcquireKcbIXLocks
CmpTryToLockHashEntryExclusive
CmpTryToLockKcbExclusive
CmpTryToRundownHive
CmpUnJoinClassOfTrust
CmpUnLockFreezeQueue
CmpUnblockHiveWrites
CmpUnblockTwoHiveWrites
CmpUndoDeleteKeyForTrans
CmpUnfreezeHive
CmpUnlockAppHiveLoadList
CmpUnlockCallbackList
CmpUnlockContextList
CmpUnlockDeletedHashEntryByKcb
CmpUnlockGlobalKeyLockTracker
CmpUnlockHashEntry
CmpUnlockHashEntryByIndex
CmpUnlockHashEntryByKcb
CmpUnlockHiveList
CmpUnlockKcb
CmpUnlockKcbStack
CmpUnlockKcbStackFlusherLocksExclusive
CmpUnlockRegistry
CmpUnlockSiloKeyLockTracker
CmpUnlockTwoKcbs
CmpUnlockTwoSecurityCaches
CmpUpdateGlobalQuotaAllowed
CmpUpdateHiveRootCellFlags
CmpUpdateKeyNodeAccessBits
CmpUpdateParentForEachSon
CmpUpdateReorganizeRegistryValues
CmpUpdateSystemHiveHysteresis
CmpUserPresenceCallback
CmpUuidCreate
CmpVEAddHiveToSIDMappingTable
CmpVEExecuteCreateLogic
CmpVEExecuteOpenLogic
CmpVEExecuteParseLogic
CmpVEExecuteRealStoreParseLogic
CmpVEExecuteVirtualStoreParseLogic
CmpVERemoveHiveFromSIDMappingTable
CmpValidateComponents
CmpValidateGlobalFlushControlFlags
CmpValidateHiveSecurityDescriptors
CmpValueEnumStackAdvance
CmpValueEnumStackCleanup
CmpValueEnumStackEntryCleanup
CmpValueEnumStackEntryInitialize
CmpValueEnumStackEntryStart
CmpValueEnumStackGetCurrentValueHive
CmpValueEnumStackGetEntryAtLayerHeight
CmpValueEnumStackInitialize
CmpValueEnumStackMatchingValueInUpperLayer
CmpValueEnumStackStartFromKcbStack
CmpValueEnumStackStartFromKeyNodeStack
CmpValueToData
CmpVerifyBigLogRecordChunk
CmpVerifyLogRecord
CmpVirtualBranchIsReplicated
CmpVirtualPathPresent
CmpVolumeContextCanHiveSectionBeExtended
CmpVolumeContextCleanup
CmpVolumeContextCreate
CmpVolumeContextDecrementRefCount
CmpVolumeContextFree
CmpVolumeContextLockExclusive
CmpVolumeContextLockShared
CmpVolumeContextMustHiveFilePagesBeKeptLocal
CmpVolumeContextSendDeviceUsageNotification
CmpVolumeContextStart
CmpVolumeContextUnlockExclusive
CmpVolumeContextUnlockShared
CmpVolumeManagerCreateContextsForWellKnownVolumes
CmpVolumeManagerGetContextForFile
CmpVolumeManagerGetContextForFilePath
CmpVolumeManagerGetContextForGuidUnsafe
CmpVolumeManagerInitialize
CmpVolumeManagerLockContextListExclusive
CmpVolumeManagerLockContextListShared
CmpVolumeManagerUnlockContextListExclusive
CmpWaitForHiveLoadUnloadRundownRelease
CmpWaitForHiveMount
CmpWaitForLateUnloadWorker
CmpWaitForShutdownRundownRelease
CmpWaitOnHiveWriteQueue
CmpWakeWriteQueueWaiters
CmpWalkOneLevel
CmpWalkPath
CmpWalkUnicodeStringPath
CmpWorkItemInitialize
CmpWorkItemQueueWork
CmpWorkItemRundown
CmpWorkItemWrapper
CmpWriteOffsetArrayToFile
CompareFileTimeType
CompareNamesCaseSensitive
CompareObjectTypes
CompareUnicodeStrings
ComposeHangulLV
ComposeHangulLVT
CompositefsBootIsEnabled
ComputeNameLength
ComputeUnicodeNameLength
ConstraintEval
ConsumerGetBuffer
ConsumerPeekAndConsumeBuffer
ConvertDevpropcompkeyToString
ConvertDevpropertyToString
CountUTF8ToUnicode
CountUnicodeToUTF8
CreateMiniNtBootKey
CreateSystemRootLink
CsanRead16NoCheck
CsanRead64NoCheck
CsanRead8NoCheck
CsanReadNoCheck
CsanWrite16NoCheck
CsanWrite64NoCheck
CsanWrite8NoCheck
CsanWriteNoCheck
CvmDebugLog
DECREMENT_ADAPTER_CHANNELS
DECREMENT_COMMON_BUFFERS
DECREMENT_SCATTER_GATHER_LISTS
DbgBreakPoint
DbgBreakPointWithStatus
DbgCommandString
DbgEnumerateCallback
DbgLoadImageSymbols
DbgLoadImageSymbolsUnicode
DbgLoadUserImageSymbols
DbgPrint
DbgPrintEx
DbgPrintReturnControlC
DbgPrompt
DbgQueryDebugFilterState
DbgSetDebugFilterState
DbgSetDebugPrintCallback
DbgUnLoadImageSymbols
DbgUnLoadImageSymbolsUnicode
DbgUnicodeStringToAnsiString
DbgUserBreakPoint
DbgkCaptureLiveDump
DbgkCaptureLiveKernelDump
DbgkClearProcessDebugObject
DbgkCopyProcessDebugPort
DbgkCreateMinimalProcess
DbgkCreateMinimalThread
DbgkCreateThread
DbgkExitProcess
DbgkExitThread
DbgkFlushErrorPort
DbgkForwardException
DbgkInitialize
DbgkLkmdRegisterCallback
DbgkLkmdUnregisterCallback
DbgkMapViewOfSection
DbgkOpenProcessDebugPort
DbgkPostEnclaveModuleMessages
DbgkPostModuleMessage
DbgkQueueUserExceptionReport
DbgkRegisterErrorPort
DbgkSendSystemDllMessages
DbgkUnMapViewOfSection
DbgkUserReportWorkRoutine
DbgkWerAddSecondaryData
DbgkWerCaptureLiveKernelDump
DbgkWerCaptureLiveKernelDump2
DbgkpCloseObject
DbgkpConvertKernelToUserStateChange
DbgkpCreateNotificationEvent
DbgkpDeleteErrorPort
DbgkpDeleteObject
DbgkpDereferenceErrorPort
DbgkpFreeDebugEvent
DbgkpGetServerSiloState
DbgkpInitializePhase0
DbgkpInitializePhase0SiloState
DbgkpInitializePhase1SiloState
DbgkpLkmdEnumApcOrDpcDataCallback
DbgkpLkmdFireCallbacks
DbgkpLkmdIsMemoryBlockPresentFromCallback
DbgkpLkmdLaunchSnapApc
DbgkpLkmdSnapData
DbgkpLkmdSnapDataEx
DbgkpLkmdSnapGlobals
DbgkpLkmdSnapKernelStack
DbgkpLkmdSnapKernelStackSegmentCallback
DbgkpLkmdSnapObject
DbgkpLkmdSnapPendingIrps
DbgkpLkmdSnapThread
DbgkpLkmdSnapThreadApc
DbgkpLkmdSnapThreadInContext
DbgkpLkmdSqmIncrementDword
DbgkpLkmdSqmIsOptedIn
DbgkpLkmdSqmStatus
DbgkpMarkProcessPeb
DbgkpOpenHandles
DbgkpPostFakeProcessCreateMessages
DbgkpPostFakeThreadMessages
DbgkpPostModuleMessages
DbgkpQueueMessage
DbgkpRemoveErrorPort
DbgkpResumeProcess
DbgkpSectionToFileHandle
DbgkpSendApiMessage
DbgkpSendApiMessageLpc
DbgkpSendErrorMessage
DbgkpSetProcessDebugObject
DbgkpStartSystemErrorHandler
DbgkpSuppressDbgMsg
DbgkpSuspendProcess
DbgkpTriageDumpCheckPresentHashTable
DbgkpTriageDumpFillHeaders
DbgkpTriageDumpInitialize
DbgkpTriageDumpIsMemoryBlockPresent
DbgkpTriageDumpRestoreState
DbgkpTriageDumpSaveState
DbgkpTriageDumpSnapData
DbgkpTriageDumpWrite
DbgkpWakeTarget
DbgkpWerAllocateNonpagedPool
DbgkpWerAllocatePool
DbgkpWerCaptureLiveFullDump
DbgkpWerCaptureLiveTriageDump
DbgkpWerCleanupContext
DbgkpWerDeferredWriteRoutine
DbgkpWerFreePool
DbgkpWerInitializeDeferredLiveDump
DbgkpWerInvokeCallbacks
DbgkpWerIsFullLiveDumpDisabled
DbgkpWerProcessPolicyResult
DbgkpWerStartDeferredLiveDump
DbgkpWerUpdateTriageDumpHeader
DbgkpWerWriteSecondaryData
DbgkpWerWriteTriageDump
DbgpInsertDebugPrintCallback
DbgpRemoveDebugPrintCallback
DebugPrint
DebugPrompt
DebugService2
DecodeAttributeName
DefaultAddProfileSource
DefaultDisableMonitoring
DefaultEnableMonitoring
DefaultGetCounterResolution
DefaultInitializeProfiling
DefaultIsModifiedByBadActor
DefaultOverflowHandler
DefaultQueryInformation
DefaultRemoveProfileSource
DefaultRestartProfiling
DefaultSetInterval
DifAcquireSpinLockAtDpcLevelSafe
DifAddDeviceWrapper
DifAddPerDriverDataForPlugins
DifAvlRealPredecessor
DifAvlRealSuccessor
DifCallPluginEntry
DifCcCopyWriteExWrapper
DifCcCopyWriteWrapper
DifCcDeferWriteWrapper
DifCcFastCopyWriteWrapper
DifCmRegisterCallbackExWrapper
DifCmRegisterCallbackWrapper
DifCmUnRegisterCallbackWrapper
DifCreateAPIThunkContext
DifDeregisterPlugin
DifDllInitializeWrapper
DifDllUnloadWrapper
DifDriverCancelWrapper
DifDriverEntryWrapper
DifDriverStartIoWrapper
DifDriverUnloadWrapper
DifEnumeratePluginData
DifEtwRegisterWrapper
DifEtwUnregisterWrapper
DifExAcquireFastMutexUnsafeWrapper
DifExAcquireFastMutexWrapper
DifExAcquireFastResourceExclusiveWrapper
DifExAcquireFastResourceSharedStarveExclusiveWrapper
DifExAcquireFastResourceSharedWrapper
DifExAcquireResourceExclusiveLiteWrapper
DifExAcquireResourceSharedLiteWrapper
DifExAcquireSharedStarveExclusiveWrapper
DifExAcquireSharedWaitForExclusiveWrapper
DifExAllocateCacheAwareRundownProtectionWrapper
DifExAllocatePool2Wrapper
DifExAllocatePool3Wrapper
DifExAllocatePoolWithQuotaTagWrapper
DifExAllocatePoolWithQuotaWrapper
DifExAllocatePoolWithTagPriorityWrapper
DifExAllocatePoolWithTagWrapper
DifExAllocatePoolWrapper
DifExConvertExclusiveToSharedLiteWrapper
DifExConvertFastResourceExclusiveToSharedWrapper
DifExCreateCallbackWrapper
DifExDeleteFastResourceWrapper
DifExDeleteLookasideListExWrapper
DifExDeleteNPagedLookasideListWrapper
DifExDeletePagedLookasideListWrapper
DifExDeleteResourceLiteWrapper
DifExDisownFastResourceWrapper
DifExEnterCriticalRegionAndAcquireResourceExclusiveWrapper
DifExEnterCriticalRegionAndAcquireResourceSharedWrapper
DifExEnterCriticalRegionAndAcquireSharedWaitForExclusiveWrapper
DifExEnterPriorityRegionAndAcquireResourceExclusiveWrapper
DifExEnterPriorityRegionAndAcquireResourceSharedWrapper
DifExFreePoolWithTagWrapper
DifExFreePoolWrapper
DifExInitializeFastOwnerEntryWrapper
DifExInitializeFastResourceAcquiredWrapper
DifExInitializeFastResourceWrapper
DifExInitializeLookasideListExWrapper
DifExInitializeNPagedLookasideListWrapper
DifExInitializePagedLookasideListWrapper
DifExInitializeResourceLiteWrapper
DifExIsFastResourceContendedWrapper
DifExIsFastResourceHeldExclusiveWrapper
DifExIsFastResourceHeldWrapper
DifExIsProcessorFeaturePresentWrapper
DifExIsResourceAcquiredExclusiveLiteWrapper
DifExIsResourceAcquiredSharedLiteWrapper
DifExRaiseAccessViolationWrapper
DifExRaiseDatatypeMisalignmentWrapper
DifExRaiseStatusWrapper
DifExRegisterCallbackWrapper
DifExReinitializeFastResourceWrapper
DifExReleaseDisownedFastResourceExclusiveWrapper
DifExReleaseDisownedFastResourceSharedWrapper
DifExReleaseDisownedFastResourceWrapper
DifExReleaseFastMutexUnsafeWrapper
DifExReleaseFastMutexWrapper
DifExReleaseFastResourceExclusiveWrapper
DifExReleaseFastResourceSharedWrapper
DifExReleaseFastResourceWrapper
DifExReleaseResourceAndLeaveCriticalRegionWrapper
DifExReleaseResourceAndLeavePriorityRegionWrapper
DifExReleaseResourceForThreadLiteWrapper
DifExReleaseResourceLiteWrapper
DifExSetTimerResolutionWrapper
DifExTryToAcquireFastMutexWrapper
DifExTryToAcquireResourceExclusiveLiteWrapper
DifExTryToConvertFastResourceSharedToExclusiveWrapper
DifExUnregisterCallbackWrapper
DifExUuidCreateWrapper
DifExfAcquirePushLockExclusiveWrapper
DifExfAcquirePushLockSharedWrapper
DifExfReleasePushLockSharedWrapper
DifExfReleasePushLockWrapper
DifExfTryAcquirePushLockSharedWrapper
DifExfTryToWakePushLockWrapper
DifFindThreadContextData
DifGetAPIThunkContextById
DifGetAvailableSystemPages
DifGetPluginPerDriverData
DifGetReturnAddressForWrappers
DifHalAllocateCrashDumpRegistersWrapper
DifHalDmaAllocateCrashDumpRegistersExWrapper
DifHalDmaFreeCrashDumpRegistersExWrapper
DifIRP_MJ_CLEANUPWrapper
DifIRP_MJ_CLOSEWrapper
DifIRP_MJ_CREATEWrapper
DifIRP_MJ_CREATE_MAILSLOTWrapper
DifIRP_MJ_CREATE_NAMED_PIPEWrapper
DifIRP_MJ_DEVICE_CHANGEWrapper
DifIRP_MJ_DEVICE_CONTROLWrapper
DifIRP_MJ_DIRECTORY_CONTROLWrapper
DifIRP_MJ_FILE_SYSTEM_CONTROLWrapper
DifIRP_MJ_FLUSH_BUFFERSWrapper
DifIRP_MJ_INTERNAL_DEVICE_CONTROLWrapper
DifIRP_MJ_LOCK_CONTROLWrapper
DifIRP_MJ_PNPWrapper
DifIRP_MJ_POWERWrapper
DifIRP_MJ_QUERY_EAWrapper
DifIRP_MJ_QUERY_INFORMATIONWrapper
DifIRP_MJ_QUERY_QUOTAWrapper
DifIRP_MJ_QUERY_SECURITYWrapper
DifIRP_MJ_QUERY_VOLUME_INFORMATIONWrapper
DifIRP_MJ_READWrapper
DifIRP_MJ_SET_EAWrapper
DifIRP_MJ_SET_INFORMATIONWrapper
DifIRP_MJ_SET_QUOTAWrapper
DifIRP_MJ_SET_SECURITYWrapper
DifIRP_MJ_SET_VOLUME_INFORMATIONWrapper
DifIRP_MJ_SHUTDOWNWrapper
DifIRP_MJ_SYSTEM_CONTROLWrapper
DifIRP_MJ_WRITEWrapper
DifIoAcquireRemoveLockExWrapper
DifIoAllocateControllerWrapper
DifIoAllocateDriverObjectExtensionWrapper
DifIoAllocateErrorLogEntryWrapper
DifIoAllocateIrpExWrapper
DifIoAllocateIrpWrapper
DifIoAllocateMdlWrapper
DifIoAllocateWorkItemWrapper
DifIoAttachDeviceWrapper
DifIoBuildAsynchronousFsdRequestWrapper
DifIoBuildDeviceIoControlRequestWrapper
DifIoBuildSynchronousFsdRequestWrapper
DifIoCheckShareAccessWrapper
DifIoConnectInterruptExWrapper
DifIoConnectInterruptWrapper
DifIoCreateControllerWrapper
DifIoCreateDeviceWrapper
DifIoCreateFileExWrapper
DifIoCreateFileSpecifyDeviceObjectHintWrapper
DifIoCreateFileWrapper
DifIoCreateNotificationEventWrapper
DifIoCreateSymbolicLinkWrapper
DifIoCreateSynchronizationEventWrapper
DifIoCreateUnprotectedSymbolicLinkWrapper
DifIoDeleteControllerWrapper
DifIoDeleteDeviceWrapper
DifIoDeleteSymbolicLinkWrapper
DifIoDetachDeviceWrapper
DifIoDisconnectInterruptExWrapper
DifIoDisconnectInterruptWrapper
DifIoFreeControllerWrapper
DifIoFreeIrpWrapper
DifIoFreeMdlWrapper
DifIoGetConfigurationInformationWrapper
DifIoGetDeviceDirectoryWrapper
DifIoGetDeviceObjectPointerWrapper
DifIoGetDeviceToVerifyWrapper
DifIoGetDmaAdapterWrapper
DifIoGetDriverDirectoryWrapper
DifIoGetFileObjectGenericMappingWrapper
DifIoGetInitialStackWrapper
DifIoInitializeRemoveLockExWrapper
DifIoInitializeTimerWrapper
DifIoInitializeWorkItemWrapper
DifIoIsWdmVersionAvailableWrapper
DifIoOpenDeviceInterfaceRegistryKeyWrapper
DifIoOpenDeviceRegistryKeyWrapper
DifIoOpenDriverRegistryKeyWrapper
DifIoRaiseHardErrorWrapper
DifIoRaiseInformationalHardErrorWrapper
DifIoReadPartitionTableWrapper
DifIoRegisterDeviceInterfaceWrapper
DifIoRegisterDriverReinitializationWrapper
DifIoRegisterShutdownNotificationWrapper
DifIoReleaseRemoveLockAndWaitExWrapper
DifIoReleaseRemoveLockExWrapper
DifIoRemoveShareAccessWrapper
DifIoSetCompletionRoutineExWrapper
DifIoSetDeviceInterfaceStateWrapper
DifIoSetDeviceToVerifyWrapper
DifIoSetPartitionInformationWrapper
DifIoSetShareAccessWrapper
DifIoStartNextPacketWrapper
DifIoUnregisterShutdownNotificationWrapper
DifIoUpdateShareAccessWrapper
DifIoWMIAllocateInstanceIdsWrapper
DifIoWMIRegistrationControlWrapper
DifIoWriteErrorLogEntryWrapper
DifIoWritePartitionTableWrapper
DifIofCallDriverWrapper
DifIofCompleteRequestWrapper
DifIsPluginEnabled
DifIsPluginRunningWithoutReboot
DifIsValidTrackingObject
DifKeAcquireGuardedMutexUnsafeWrapper
DifKeAcquireGuardedMutexWrapper
DifKeAcquireInStackQueuedSpinLockAtDpcLevelWrapper
DifKeAcquireInStackQueuedSpinLockForDpcWrapper
DifKeAcquireInStackQueuedSpinLockRaiseToSynchWrapper
DifKeAcquireInStackQueuedSpinLockWrapper
DifKeAcquireQueuedSpinLockRaiseToSynchWrapper
DifKeAcquireQueuedSpinLockWrapper
DifKeAcquireSpinLockAtDpcLevelWrapper
DifKeAcquireSpinLockRaiseToDpcWrapper
DifKeCancelTimerWrapper
DifKeClearEventWrapper
DifKeDelayExecutionThreadWrapper
DifKeDeregisterNmiCallbackWrapper
DifKeEnterCriticalRegionWrapper
DifKeEnterGuardedRegionWrapper
DifKeInitializeDeviceQueueWrapper
DifKeInitializeEventWrapper
DifKeInitializeMutantWrapper
DifKeInitializeMutexWrapper
DifKeInitializeSemaphoreWrapper
DifKeInitializeTimerExWrapper
DifKeInitializeTimerWrapper
DifKeInsertByKeyDeviceQueueWrapper
DifKeInsertDeviceQueueWrapper
DifKeInsertQueueDpcWrapper
DifKeLeaveCriticalRegionWrapper
DifKeLeaveGuardedRegionWrapper
DifKeLowerIrqlWrapper
DifKePulseEventWrapper
DifKeRaiseIrqlToDpcLevelWrapper
DifKeReadStateEventWrapper
DifKeReadStateTimerWrapper
DifKeRegisterNmiCallbackWrapper
DifKeReleaseGuardedMutexUnsafeWrapper
DifKeReleaseGuardedMutexWrapper
DifKeReleaseInStackQueuedSpinLockForDpcWrapper
DifKeReleaseInStackQueuedSpinLockFromDpcLevelWrapper
DifKeReleaseInStackQueuedSpinLockWrapper
DifKeReleaseMutantWrapper
DifKeReleaseMutexWrapper
DifKeReleaseQueuedSpinLockWrapper
DifKeReleaseSpinLockFromDpcLevelWrapper
DifKeReleaseSpinLockWrapper
DifKeRemoveByKeyDeviceQueueWrapper
DifKeRemoveDeviceQueueWrapper
DifKeRemoveEntryDeviceQueueWrapper
DifKeRemoveQueueDpcWrapper
DifKeResetEventWrapper
DifKeRestoreExtendedProcessorStateWrapper
DifKeSaveExtendedProcessorStateWrapper
DifKeSetEventWrapper
DifKeSetTimerExWrapper
DifKeSetTimerWrapper
DifKeSynchronizeExecutionWrapper
DifKeTryToAcquireGuardedMutexWrapper
DifKeTryToAcquireQueuedSpinLockRaiseToSynchWrapper
DifKeTryToAcquireQueuedSpinLockWrapper
DifKeTryToAcquireSpinLockAtDpcLevelWrapper
DifKeWaitForMultipleObjectsWrapper
DifKeWaitForSingleObjectWrapper
DifKfRaiseIrqlWrapper
DifMarkHiberPhase
DifMmAllocateContiguousMemoryExWrapper
DifMmAllocateContiguousMemorySpecifyCacheNodeWrapper
DifMmAllocateContiguousMemorySpecifyCacheWrapper
DifMmAllocateContiguousMemoryWrapper
DifMmAllocateContiguousNodeMemoryWrapper
DifMmAllocateMappingAddressExWrapper
DifMmAllocateMappingAddressWrapper
DifMmAllocateNodePagesForMdlExWrapper
DifMmAllocateNonCachedMemoryWrapper
DifMmAllocatePagesForMdlExWrapper
DifMmAllocatePagesForMdlWrapper
DifMmBuildMdlForNonPagedPoolWrapper
DifMmCreateMdlWrapper
DifMmCreateSectionWrapper
DifMmFreeContiguousMemorySpecifyCacheWrapper
DifMmFreeContiguousMemoryWrapper
DifMmFreeMappingAddressWrapper
DifMmFreeNonCachedMemoryWrapper
DifMmFreePagesFromMdlWrapper
DifMmLockPagableDataSectionWrapper
DifMmLockPagableSectionByHandleWrapper
DifMmMapIoSpaceExWrapper
DifMmMapIoSpaceWrapper
DifMmMapLockedPagesSpecifyCacheWrapper
DifMmMapLockedPagesWrapper
DifMmMapViewOfSectionWrapper
DifMmPageEntireDriverWrapper
DifMmProbeAndLockPagesWrapper
DifMmProbeAndLockProcessPagesWrapper
DifMmProtectMdlSystemAddressWrapper
DifMmResetDriverPagingWrapper
DifMmSecureVirtualMemoryWrapper
DifMmUnlockPagableImageSectionWrapper
DifMmUnlockPagesWrapper
DifMmUnmapIoSpaceWrapper
DifMmUnmapLockedPagesWrapper
DifMmUnsecureVirtualMemoryWrapper
DifNotifyPluginSystemEvent
DifNtCreateFileWrapper
DifNtCreateSectionWrapper
DifNtDeleteFileWrapper
DifNtMapViewOfSectionWrapper
DifNtOpenFileWrapper
DifNtSetInformationFileWrapper
DifNtWriteFileWrapper
DifObGetObjectSecurityWrapper
DifObReferenceObjectByHandleWrapper
DifObReferenceObjectByPointerWithTagWrapper
DifObReferenceObjectByPointerWrapper
DifObReleaseObjectSecurityWrapper
DifObfDereferenceObjectWithTagWrapper
DifObfDereferenceObjectWrapper
DifObfReferenceObjectWithTagWrapper
DifObfReferenceObjectWrapper
DifObjTrkAllocNode
DifObjTrkCompareNode
DifObjTrkFreeNode
DifObjTrkGetPluginContext
DifObjTrkInsertItem
DifObjTrkIsExceptionPluginId
DifObjTrkQeuryInvokeDeleteRange
DifObjTrkRemoveItem
DifPluginSimplePerfControl
DifPoCallDriverWrapper
DifPoFxActivateComponentWrapper
DifPoFxCompleteDevicePowerNotRequiredWrapper
DifPoFxCompleteIdleConditionWrapper
DifPoFxCompleteIdleStateWrapper
DifPoFxIdleComponentWrapper
DifPoFxNotifySurprisePowerOnWrapper
DifPoFxPowerControlWrapper
DifPoFxRegisterDeviceWrapper
DifPoFxReportDevicePoweredOnWrapper
DifPoFxSetComponentLatencyWrapper
DifPoFxSetComponentResidencyWrapper
DifPoFxSetComponentWakeWrapper
DifPoFxSetDeviceIdleTimeoutWrapper
DifPoFxStartDevicePowerManagementWrapper
DifPoFxUnregisterDeviceWrapper
DifPoRequestPowerIrpWrapper
DifPopThreadContextData
DifProbeForReadWrapper
DifProbeForWriteWrapper
DifPsCreateSystemThreadWrapper
DifPsGetVersionWrapper
DifPsSetCreateProcessNotifyRoutineWrapper
DifPsSetCreateThreadNotifyRoutineWrapper
DifPsSetLoadImageNotifyRoutineWrapper
DifPsTerminateSystemThreadWrapper
DifPushThreadContextData
DifRegisterClassDriverPlugin
DifRegisterKernelPlugins
DifRegisterObjectTracking
DifRegisterPlugin
DifReleaseSpinLockFromDpcLevelSafe
DifRemovePerDriverDataForPlugins
DifRtlAnsiStringToUnicodeStringWrapper
DifRtlCheckRegistryKeyWrapper
DifRtlCreateRegistryKeyWrapper
DifRtlCreateSystemVolumeInformationFolderWrapper
DifRtlCreateUnicodeStringWrapper
DifRtlDeleteRegistryValueWrapper
DifRtlDowncaseUnicodeStringWrapper
DifRtlDuplicateUnicodeStringWrapper
DifRtlOemStringToCountedUnicodeStringWrapper
DifRtlOemStringToUnicodeStringWrapper
DifRtlQueryRegistryValueWithFallbackWrapper
DifRtlQueryRegistryValuesExWrapper
DifRtlQueryRegistryValuesWrapper
DifRtlUnicodeStringToAnsiStringWrapper
DifRtlUnicodeStringToCountedOemStringWrapper
DifRtlUnicodeStringToOemStringWrapper
DifRtlUpcaseUnicodeStringToAnsiStringWrapper
DifRtlUpcaseUnicodeStringToCountedOemStringWrapper
DifRtlUpcaseUnicodeStringToOemStringWrapper
DifRtlUpcaseUnicodeStringWrapper
DifRtlWriteRegistryValueWrapper
DifUpdatePluginState
DifUtilDbgPrint
DifZwAccessCheckAndAuditAlarmWrapper
DifZwAddBootEntryWrapper
DifZwAddDriverEntryWrapper
DifZwAdjustPrivilegesTokenWrapper
DifZwAllocateVirtualMemoryWrapper
DifZwAlpcAcceptConnectPortWrapper
DifZwAlpcConnectPortWrapper
DifZwAlpcCreatePortSectionWrapper
DifZwAlpcCreatePortWrapper
DifZwAlpcCreateResourceReserveWrapper
DifZwAlpcCreateSectionViewWrapper
DifZwAlpcCreateSecurityContextWrapper
DifZwAlpcQueryInformationWrapper
DifZwAlpcSendWaitReceivePortWrapper
DifZwAlpcSetInformationWrapper
DifZwCancelIoFileWrapper
DifZwCancelTimerWrapper
DifZwCloseObjectAuditAlarmWrapper
DifZwCloseWrapper
DifZwCommitEnlistmentWrapper
DifZwConnectPortWrapper
DifZwCreateDirectoryObjectWrapper
DifZwCreateEnlistmentWrapper
DifZwCreateEventWrapper
DifZwCreateFileWrapper
DifZwCreateJobObjectWrapper
DifZwCreateKeyTransactedWrapper
DifZwCreateKeyWrapper
DifZwCreateResourceManagerWrapper
DifZwCreateSectionWrapper
DifZwCreateSymbolicLinkObjectWrapper
DifZwCreateTimerWrapper
DifZwCreateTransactionManagerWrapper
DifZwCreateTransactionWrapper
DifZwDeleteBootEntryWrapper
DifZwDeleteFileWrapper
DifZwDeleteKeyWrapper
DifZwDeleteValueKeyWrapper
DifZwDeviceIoControlFileWrapper
DifZwDisplayStringWrapper
DifZwDuplicateObjectWrapper
DifZwDuplicateTokenWrapper
DifZwEnumerateBootEntriesWrapper
DifZwEnumerateDriverEntriesWrapper
DifZwEnumerateKeyWrapper
DifZwEnumerateValueKeyWrapper
DifZwFlushBuffersFileExWrapper
DifZwFlushBuffersFileWrapper
DifZwFlushInstructionCacheWrapper
DifZwFlushKeyWrapper
DifZwFlushVirtualMemoryWrapper
DifZwFreeVirtualMemoryWrapper
DifZwFsControlFileWrapper
DifZwGetNotificationResourceManagerWrapper
DifZwLoadDriverWrapper
DifZwLoadKeyWrapper
DifZwMapViewOfSectionWrapper
DifZwModifyBootEntryWrapper
DifZwModifyDriverEntryWrapper
DifZwNotifyChangeKeyWrapper
DifZwOpenDirectoryObjectWrapper
DifZwOpenEnlistmentWrapper
DifZwOpenEventWrapper
DifZwOpenFileWrapper
DifZwOpenJobObjectWrapper
DifZwOpenKeyExWrapper
DifZwOpenKeyTransactedExWrapper
DifZwOpenKeyTransactedWrapper
DifZwOpenKeyWrapper
DifZwOpenProcessTokenExWrapper
DifZwOpenProcessTokenWrapper
DifZwOpenProcessWrapper
DifZwOpenResourceManagerWrapper
DifZwOpenSectionWrapper
DifZwOpenSymbolicLinkObjectWrapper
DifZwOpenThreadTokenExWrapper
DifZwOpenThreadTokenWrapper
DifZwOpenThreadWrapper
DifZwOpenTimerWrapper
DifZwOpenTransactionManagerWrapper
DifZwOpenTransactionWrapper
DifZwPowerInformationWrapper
DifZwPrePrepareEnlistmentWrapper
DifZwPrepareCompleteWrapper
DifZwPrepareEnlistmentWrapper
DifZwProtectVirtualMemoryWrapper
DifZwPulseEventWrapper
DifZwQueryBootEntryOrderWrapper
DifZwQueryBootOptionsWrapper
DifZwQueryDefaultLocaleWrapper
DifZwQueryDefaultUILanguageWrapper
DifZwQueryDirectoryFileExWrapper
DifZwQueryDirectoryFileWrapper
DifZwQueryDirectoryObjectWrapper
DifZwQueryDriverEntryOrderWrapper
DifZwQueryEaFileWrapper
DifZwQueryFullAttributesFileWrapper
DifZwQueryInformationEnlistmentWrapper
DifZwQueryInformationFileWrapper
DifZwQueryInformationJobObjectWrapper
DifZwQueryInformationProcessWrapper
DifZwQueryInformationResourceManagerWrapper
DifZwQueryInformationThreadWrapper
DifZwQueryInformationTokenWrapper
DifZwQueryInformationTransactionManagerWrapper
DifZwQueryInformationTransactionWrapper
DifZwQueryInstallUILanguageWrapper
DifZwQueryKeyWrapper
DifZwQueryLicenseValueWrapper
DifZwQueryObjectWrapper
DifZwQuerySectionWrapper
DifZwQuerySecurityObjectWrapper
DifZwQuerySymbolicLinkObjectWrapper
DifZwQuerySystemInformationWrapper
DifZwQueryValueKeyWrapper
DifZwQueryVolumeInformationFileWrapper
DifZwReadFileWrapper
DifZwRemoveIoCompletionExWrapper
DifZwRenameKeyWrapper
DifZwReplaceKeyWrapper
DifZwRequestWaitReplyPortWrapper
DifZwResetEventWrapper
DifZwRestoreKeyWrapper
DifZwRollbackEnlistmentWrapper
DifZwSetBootEntryOrderWrapper
DifZwSetBootOptionsWrapper
DifZwSetDriverEntryOrderWrapper
DifZwSetEaFileWrapper
DifZwSetEventWrapper
DifZwSetInformationEnlistmentWrapper
DifZwSetInformationFileWrapper
DifZwSetInformationJobObjectWrapper
DifZwSetInformationKeyWrapper
DifZwSetInformationObjectWrapper
DifZwSetInformationProcessWrapper
DifZwSetInformationThreadWrapper
DifZwSetInformationTransactionWrapper
DifZwSetSecurityObjectWrapper
DifZwSetSystemInformationWrapper
DifZwSetSystemTimeWrapper
DifZwSetTimerWrapper
DifZwSetValueKeyWrapper
DifZwSetVolumeInformationFileWrapper
DifZwTranslateFilePathWrapper
DifZwUnloadDriverWrapper
DifZwUnloadKeyWrapper
DifZwWaitForMultipleObjectsWrapper
DifZwWaitForSingleObjectWrapper
DifZwWriteFileWrapper
DifiDbgPrint
DifpExAllocatePool2_LwSP_Enter
DifpExAllocatePool2_LwSP_Exit
DifpExAllocatePool3_LwSP_Enter
DifpExAllocatePool3_LwSP_Exit
DifpExAllocatePoolWithQuotaTag_LwSP_Enter
DifpExAllocatePoolWithQuotaTag_LwSP_Exit
DifpExAllocatePoolWithQuota_LwSP_Enter
DifpExAllocatePoolWithQuota_LwSP_Exit
DifpExAllocatePoolWithTagPriority_LwSP_Enter
DifpExAllocatePoolWithTagPriority_LwSP_Exit
DifpExAllocatePoolWithTag_LwSP_Enter
DifpExAllocatePoolWithTag_LwSP_Exit
DifpExAllocatePool_LwSP_Enter
DifpExAllocatePool_LwSP_Exit
DifpExFreePoolWithTag_LwSP_Enter
DifpExFreePool_LwSP_Enter
DifpLwSPProcessPostPoolAlloc
DifpLwSPProcessPrePoolAlloc
DisplayBootBitmap
DisplayFilter
DmrCheckPathMatch
DmrConvertDeviceScope
DmrEnumerateRmrrDomains
DmrEnumerateSatcDevices
DmrFindDrhdForDeviceScope
DmrFreeRmrrTree
DmrGetNextDeviceScope
DmrGetNextDrhdDeviceScope
DmrGetNextRemappingStructure
DmrValidateDeviceScope
DmrpRmrrTreeAddNewScope
DmrpRmrrTreeAddRegionToDevice
DownLevelGetParentLanguageName
DownLevelLangIDToLanguageName
DownLevelLanguageNameToLangID
DpxAcquireSimpleRundown
DpxEndpointDataAcquisition
DpxEndpointWrappedCall
DpxReleaseSimpleRundown
DrpGetRecord
DrpGetRecordCount
DrpGetSectionAtIndex
DrpVerifyData
DrvDbAcquireDatabaseNodeBaseKey
DrvDbBuildDeviceIdDriverInfMatch
DrvDbCreateDatabaseNode
DrvDbDeleteObjectRegKey
DrvDbDeleteObjectSubKey
DrvDbDestroyDatabaseNode
DrvDbDispatchDeviceId
DrvDbDispatchDriverDatabase
DrvDbDispatchDriverFile
DrvDbDispatchDriverInfFile
DrvDbDispatchDriverPackage
DrvDbFindDatabaseNode
DrvDbGetCompositeMappedPropertyKeys
DrvDbGetConfigurationSubKeyCallback
DrvDbGetDeviceIdDriverInfMatches
DrvDbGetDeviceIdMappedProperty
DrvDbGetDeviceIdMappedPropertyKeys
DrvDbGetDriverDatabaseCompositeMappedPropertyKeys
DrvDbGetDriverDatabaseList
DrvDbGetDriverDatabaseMappedProperty
DrvDbGetDriverDatabaseMappedPropertyKeys
DrvDbGetDriverFileMappedProperty
DrvDbGetDriverFileMappedPropertyKeys
DrvDbGetDriverInfFileMappedProperty
DrvDbGetDriverInfFileMappedPropertyKeys
DrvDbGetDriverPackageMappedProperty
DrvDbGetDriverPackageMappedPropertyKeys
DrvDbGetDriverPackageSignerName
DrvDbGetDriverPackageSignerScore
DrvDbGetObjectDatabaseNode
DrvDbGetObjectDatabaseNodeName
DrvDbGetObjectList
DrvDbGetObjectSubKeyCallback
DrvDbGetObjectSubKeyList
DrvDbGetRegValueMappedProperty
DrvDbGetRegValueMappedPropertyKeys
DrvDbGetRegistrarSecurityDescriptor
DrvDbGetSecurityDescriptor
DrvDbInitializeDatabaseNodeVersion
DrvDbLoadDatabaseNode
DrvDbOpenContext
DrvDbOpenDeviceIdRegKey
DrvDbOpenDriverDatabaseRegKey
DrvDbOpenDriverFileRegKey
DrvDbOpenDriverInfFileRegKey
DrvDbOpenDriverPackageRegKey
DrvDbOpenObjectRegKey
DrvDbRegisterDatabase
DrvDbReleaseDatabaseNodeBaseKey
DrvDbSetDeviceIdDriverInfMatches
DrvDbSetDeviceIdMappedProperty
DrvDbSetDriverDatabaseMappedProperty
DrvDbSetDriverFileMappedProperty
DrvDbSetDriverInfFileMappedProperty
DrvDbSetDriverPackageMappedProperty
DrvDbSetRegValueMappedProperty
DrvDbSplitDeviceIdDriverInfMatch
DrvDbSuspendDatabase
DrvDbUnloadDatabaseNode
DrvDbUnregisterDatabase
DrvDbValidateDeviceIdName
DrvDbValidateDriverDatabaseName
DrvDbValidateDriverFileName
DrvDbValidateDriverInfFileName
DrvDbValidateDriverPackageName
DsaBuildDescriptorCommon
EmClientQueryRuleState
EmClientRuleDeregisterNotification
EmClientRuleEvaluate
EmClientRuleRegisterNotification
EmCpuMatchCallback
EmFalseCallback
EmInitSystem
EmMatchDate
EmPowerPagingEnabled
EmProviderDeregister
EmProviderDeregisterEntry
EmProviderRegister
EmProviderRegisterEntry
EmRemoveBadS3PagesCallback
EmSystemArchitectureCallback
EmTrueCallback
EmonAddProfileSource
EmonAllocateCounter
EmonAllocateCounterInternal
EmonAllocateResources
EmonCompleteInitializeProfiling
EmonConfigureCounter
EmonDisableMonitoring
EmonEnableMonitoring
EmonFindCounterToAllocate
EmonFindCounterToDisable
EmonFreeCounter
EmonGetCounterResolution
EmonInitializePebs
EmonInitializeProfiling
EmonIsModifiedByBadActor
EmonIsModifiedByBadActorInternal
EmonIsProfileSourceInUse
EmonMarkCountersReserved
EmonOverflowHandler
EmonOverflowHandlerInternalV1
EmonOverflowHandlerInternalV2
EmonPauseProfiling
EmonPauseProfilingInternal
EmonPebsOverflowHandler
EmonPreOverflowHandler
EmonQueryInformation
EmonReleaseProfileResources
EmonReleaseProfileResourcesInternal
EmonReleaseReservedCounters
EmonRemoveProfileSource
EmonReserveProfileResources
EmonRestartProfiling
EmonRestartProfilingInternal
EmonResumeProfiling
EmonResumeProfilingInternal
EmonSaveProfilingContext
EmonSaveProfilingContextInternal
EmonSetInterval
EmonSetIntervalInternal
EmpAcquirePagingReference
EmpCacheBiosDate
EmpCheckErrataList
EmpCheckOperator
EmpClientRuleRegisterNotification
EmpEvaluateNodeLink
EmpEvaluatePermuteRuleEntries
EmpEvaluateTargetRule
EmpEvaluateUpdateRuleEvalState
EmpInfParseGetGuidFromName
EmpInfParseGetSectionLineCount
EmpInfParseGetValueFromSectionAndKeyName
EmpInfParseSearchDependencyList
EmpMapPhysicalAddress
EmpParseCallbacks
EmpParseEntryTypes
EmpParseInfDatabase
EmpParseRuleExpression
EmpParseRuleTerm
EmpParseRuleTermArgMapping
EmpParseRules
EmpParseStrings
EmpParseTargetRuleStringIndexList
EmpParseTargetRules
EmpProviderDeregisterEntry
EmpProviderRegister
EmpQueueRuleUpdateState
EmpReleasePagingReference
EmpRemoveBadS3PageWorker
EmpRuleParserStackPop
EmpRuleParserStackPush
EmpRuleStateChangeNotify
EmpRuleUpdateWorkerThread
EmpSearchCallbackDatabase
EmpSearchEntryDatabase
EmpSearchRuleDatabase
EmpSearchTargetRuleList
EmpUpdateRuleState
EncloseSubCondition
EncodeAttributeName
EnlistKeyBodyWithKCB
EtwActivityIdControl
EtwCheckSecurityLoggerAccess
EtwCleanupSiloState
EtwCovSampHash
EtwDeleteProcessor
EtwDereferenceSpinLockCounters
EtwEnableTrace
EtwEventEnabled
EtwExitProcess
EtwGetKernelTraceTimestamp
EtwGetKernelTraceTimestampSilo
EtwGetProcessorBuffer
EtwGetProviderIdFromHandle
EtwInitialize
EtwInitializeProcessor
EtwInitializeProcessorActivityId
EtwKernelMemoryRundown
EtwLogPfnInfoRundown
EtwProviderEnabled
EtwQueryPerformanceTraceInformation
EtwQueryProcessTelemetryCoverage
EtwQueryProcessTelemetryInfo
EtwQueryTraceHandleByLoggerName
EtwReferenceSpinLockCounters
EtwRegister
EtwRegisterClassicProvider
EtwRegisterCounters
EtwRegisterEventCallback
EtwSendTraceBuffer
EtwSetInformation
EtwSetPerformanceTraceInformation
EtwSetProcessTelemetryCoverage
EtwShutdown
EtwStartAutoLogger
EtwTelemetryCoverageReport
EtwTiLogAllocExecVm
EtwTiLogDeviceObjectLoadUnload
EtwTiLogDriverObjectLoad
EtwTiLogDriverObjectUnLoad
EtwTiLogImpersonateClient
EtwTiLogInsertQueueUserApc
EtwTiLogMapExecView
EtwTiLogProtectExecVm
EtwTiLogReadWriteVm
EtwTiLogSetContextThread
EtwTiLogSuspendResumeProcess
EtwTiLogSuspendResumeThread
EtwTiLogSyscallUsage
EtwTimLogBlockNonCetBinaries
EtwTimLogControlProtectionKernelModeReturnMismatch
EtwTimLogControlProtectionUserModeReturnMismatch
EtwTimLogProhibitChildProcessCreation
EtwTimLogProhibitDynamicCode
EtwTimLogProhibitLowILImageMap
EtwTimLogProhibitNonMicrosoftBinaries
EtwTimLogProhibitWin32kSystemCalls
EtwTimLogRedirectionTrustPolicy
EtwTimLogUserCetSetContextIpValidationFailure
EtwTimeProfileReset
EtwTraceAntiStarvationBoost
EtwTraceAppStateChange
EtwTraceAutoBoostClearFloor
EtwTraceAutoBoostConvertWaiterToOwner
EtwTraceAutoBoostEntryExhaustion
EtwTraceAutoBoostProcessLockEntry
EtwTraceAutoBoostSetFloor
EtwTraceContAllocationEvent
EtwTraceContFreeEvent
EtwTraceContextSwap
EtwTraceCpuCacheFlush
EtwTraceCpuPartitionAffinityViolation
EtwTraceCpuPartitionDpcSchedulingViolation
EtwTraceCpuPartitionGenericDpcViolation
EtwTraceCumulativeDpcSoftTimeout
EtwTraceDebuggerEvent
EtwTraceDequeueWork
EtwTraceDpcEnqueueEvent
EtwTraceDpcProfilingStack
EtwTraceDpcProfilingStackBegin
EtwTraceDuplicateHandle
EtwTraceEnqueueWork
EtwTraceEnterVtl1
EtwTraceEvent
EtwTraceExitVtl1
EtwTraceForceParkTransition
EtwTraceFreezeThawProcess
EtwTraceHvHypercall
EtwTraceIdealProcessor
EtwTraceInswapProcess
EtwTraceIoTimerEvent
EtwTraceJob
EtwTraceJobAssignProcess
EtwTraceJobRemoveProcess
EtwTraceJobSendNotification
EtwTraceJobServerSiloMonitorCallback
EtwTraceJobServerSiloStateChange
EtwTraceJobSetQuery
EtwTraceKernelEvent
EtwTraceLeapSecondDataParseFailure
EtwTraceLeapSecondDataUpdate
EtwTraceLongDpcDetectionEvent
EtwTraceLongDpcMitigationEvent
EtwTraceLpacAccessFailure
EtwTraceMdlAllocationEvent
EtwTraceMemoryAcg
EtwTraceObject
EtwTraceObjectOperation
EtwTracePageFault
EtwTraceParkTransition
EtwTracePool
EtwTracePriQDequeueWork
EtwTracePriQEnqueueFailed
EtwTracePriQEnqueueWork
EtwTracePriority
EtwTraceProcess
EtwTraceProcessSetInPrivateMode
EtwTraceProcessTerminate
EtwTracePsIoAttribution
EtwTracePsIoRateControl
EtwTraceRaw
EtwTraceReadyQueueInsertion
EtwTraceReadyThread
EtwTraceRetpolineExit
EtwTraceScbRankChange
EtwTraceScbRundown
EtwTraceScheduleThread
EtwTraceSchedulingGroup
EtwTraceSchedulingGroupRundown
EtwTraceShouldYieldProcessor
EtwTraceSiloDcEvent
EtwTraceSiloKernelEvent
EtwTraceSiloTimedEvent
EtwTraceSingleDpcSoftTimeout
EtwTraceSystemTimeChange
EtwTraceThread
EtwTraceThreadAffinity
EtwTraceThreadFeedbackRead
EtwTraceThreadSchedulingGroup
EtwTraceThreadSchedulingGroupRundown
EtwTraceThreadSetName
EtwTraceThreadWorkItem
EtwTraceThreadWorkOnBehalfUpdate
EtwTraceTimeZoneBiasChange
EtwTraceTimeZoneInformationRefresh
EtwTraceTimedEvent
EtwTraceWakeCounter
EtwTraceWakeEvent
EtwTraceWorkingSetInSwapStoreFail
EtwTraceWorkingSetSwap
EtwTraceWorkloadClassUpdate
EtwTraceXSchedulerPriorityKickReceive
EtwTraceXSchedulerPriorityKickSend
EtwTraceXSchedulerPriorityUpdate
EtwUnregister
EtwWmitraceWorker
EtwWrite
EtwWriteEndScenario
EtwWriteErrorLogEntry
EtwWriteEx
EtwWriteKMSecurityEvent
EtwWriteStartScenario
EtwWriteString
EtwWriteTransfer
EtwpAccessCheck
EtwpAccessCheckFromState
EtwpAcquireLoggerContext
EtwpAcquireLoggerContextByLoggerId
EtwpAcquireLoggerContextByLoggerName
EtwpAcquireTokenAccessInformation
EtwpAddBinaryInfoEvents
EtwpAddDataSource
EtwpAddDebugInfoEvents
EtwpAddEventToBuffer
EtwpAddGuidEntry
EtwpAddKmRegEntry
EtwpAddLastDroppedEvent
EtwpAddLogHeader
EtwpAddMicroarchitecturalPmcToPmcGroup
EtwpAddMicroarchitecturalPmcToRegistry
EtwpAddNotificationEvent
EtwpAddRegEntryToGroup
EtwpAdjustFreeBuffers
EtwpAdjustLastBranchLookasideBuffers
EtwpAdjustSiloTraceBuffers
EtwpAdjustStackLookasideBuffers
EtwpAdjustTraceBuffers
EtwpAllocDataBlock
EtwpAllocGuidEntry
EtwpAllocateEventNameFilter
EtwpAllocateFilter
EtwpAllocateFreeBuffers
EtwpAllocateKeyNameEntry
EtwpAllocateLbrData
EtwpAllocateLevelKwFilter
EtwpAllocatePartitionMemory
EtwpAllocatePayloadFilterData
EtwpAllocatePhysicalMemoryForTraceBuffers
EtwpAllocatePhysicalPages
EtwpAllocatePidFilter
EtwpAllocatePmcData
EtwpAllocateSchematizedFilter
EtwpAllocateStringFilterData
EtwpAllocateTraceBuffer
EtwpAllocateTraceBufferPool
EtwpApcPoolDpc
EtwpApcPoolThunk
EtwpApplyContainerFilter
EtwpApplyEventIdPayloadFilter
EtwpApplyEventIdPayloadFilterOnUserEvent
EtwpApplyEventNameFilter
EtwpApplyExeFilter
EtwpApplyLevelKwFilter
EtwpApplyLevelKwFilterInner
EtwpApplyPackageIdFilter
EtwpApplyPayloadFilterInternal
EtwpApplyScopeFilters
EtwpApplyStackWalkFilterOnUserEvent
EtwpApplyStackWalkIdFilter
EtwpApplyTransientFilters
EtwpAvlCompareKeyNames
EtwpBufferingModeCompressionFlush
EtwpBufferingModeFlush
EtwpBuffersFlushRequired
EtwpBugCheckMultiPartCallback
EtwpBuildMdlForTraceBuffer
EtwpBuildNotificationPacket
EtwpBuildProcessEvent
EtwpCCSwapDeleteProcessor
EtwpCCSwapStart
EtwpCCSwapStop
EtwpCCSwapTrace
EtwpCalculateUpdateNotification
EtwpCancelApcThunk
EtwpCancelContextRegisterTracingApc
EtwpCancelMemoryPreservation
EtwpCancelPendingApcs
EtwpCancelStackWalkApc
EtwpCancelTraceImageUnloadApc
EtwpCapturePreviousRegistryData
EtwpCaptureRegistryData
EtwpCaptureString
EtwpCheckCurrentUserProcessAccess
EtwpCheckDebugInfoEqual
EtwpCheckForPoolTagFilterExtension
EtwpCheckForStackTracingExtension
EtwpCheckGuidAccess
EtwpCheckGuidAccessAndDoRundown
EtwpCheckLoggerAccessAndDoRundown
EtwpCheckLoggerControlAccess
EtwpCheckNotificationAccess
EtwpCheckPoolTagFilters
EtwpCheckSystemTraceAccess
EtwpCleanupSiloState
EtwpClearPartitionContext
EtwpClearSessionAndUnreferenceEntry
EtwpClockSourceRunDown
EtwpCloseLogger
EtwpCloseRealTimeConnectionObject
EtwpCloseRegistrationObject
EtwpCompareGuid
EtwpComparePfn
EtwpCompleteBuffer
EtwpCompressBuffer
EtwpCompressPendingBuffers
EtwpCompressionDpc
EtwpCompressionProc
EtwpComputeRegEntryEnableInfo
EtwpConstructIptData
EtwpConstructSchedulingGroupEvent
EtwpContainerStateWnfCallback
EtwpContextRegisterTracingApc
EtwpContextRegisterTracingDispatcher
EtwpCopyEventData
EtwpCopyJobGuidSafe
EtwpCopyJobIdSafe
EtwpCopyMetaProviderGuids
EtwpCopySchematizedFilters
EtwpCovSampAcquireSamplerRundown
EtwpCovSampApplyBounds
EtwpCovSampCaptureAllocateApc
EtwpCovSampCaptureAllocateCaptureBuffer
EtwpCovSampCaptureAllocateSampleBuffer
EtwpCovSampCaptureApc
EtwpCovSampCaptureApcRelease
EtwpCovSampCaptureApcRundown
EtwpCovSampCaptureBufferAddIP
EtwpCovSampCaptureBufferGet
EtwpCovSampCaptureBufferIsEmpty
EtwpCovSampCaptureBufferMapAddressesAndQueue
EtwpCovSampCaptureBufferOptimizeIP
EtwpCovSampCaptureBufferProcess
EtwpCovSampCaptureBufferQueue
EtwpCovSampCaptureBufferRelease
EtwpCovSampCaptureCancelApcs
EtwpCovSampCaptureCleanupDpc
EtwpCovSampCaptureCleanupLookasides
EtwpCovSampCaptureContextSetPaused
EtwpCovSampCaptureContextStart
EtwpCovSampCaptureContextStop
EtwpCovSampCaptureFlush
EtwpCovSampCaptureFlushSampleBuffers
EtwpCovSampCaptureFlushStats
EtwpCovSampCaptureFreeLookasides
EtwpCovSampCaptureKernelStack
EtwpCovSampCaptureQueueApc
EtwpCovSampCaptureQueueBuffer
EtwpCovSampCaptureQueueDpc
EtwpCovSampCaptureRebalanceDpc
EtwpCovSampCaptureReleaseToLookaside
EtwpCovSampCaptureSample
EtwpCovSampCaptureUserAddresses
EtwpCovSampCaptureUserStack
EtwpCovSampCaptureWorkerThread
EtwpCovSampCheckForSegments
EtwpCovSampContextAddAddresses
EtwpCovSampContextAddSamples
EtwpCovSampContextCleanup
EtwpCovSampContextFastFindModule
EtwpCovSampContextGetModule
EtwpCovSampContextPruneModules
EtwpCovSampContextRemoveAndFreeModule
EtwpCovSampEnumerateDriver
EtwpCovSampEnumerateProcess
EtwpCovSampHashLookupInTable
EtwpCovSampHashMakeRoomAndAcquireLock
EtwpCovSampImageNotify
EtwpCovSampLookasideControlInitialize
EtwpCovSampLookasideFlushFreeListToCleanupList
EtwpCovSampLookasideGrow
EtwpCovSampLookasideInitialize
EtwpCovSampLookasidePop
EtwpCovSampModuleCleanup
EtwpCovSampModuleDereference
EtwpCovSampModuleGetName
EtwpCovSampModuleNameInfoCleanup
EtwpCovSampModuleReference
EtwpCovSampProcessAddModule
EtwpCovSampProcessCleanup
EtwpCovSampProcessEnsureContext
EtwpCovSampProcessRemoveModule
EtwpCovSampProcessUpperBoundModule
EtwpCovSampProfileInterrupt
EtwpCovSampPushListSList
EtwpCovSampReleaseSamplerRundown
EtwpCovSampSafeForUserAddressCapture
EtwpCovSampSampleBufferDecRef
EtwpCovSampSampleBufferGet
EtwpCovSampSampleBufferProcess
EtwpCovSampSampleBufferReserve
EtwpCovSampSplitSegments
EtwpCovSampStackHashCheck
EtwpCovSampStackHashLookup
EtwpCovSampStackHashTableAlloc
EtwpCovSampStrideSamplerInitialize
EtwpCovSampTryAcquireBufferLock
EtwpCoverageAddToStringBuffer
EtwpCoverageCheckCP
EtwpCoverageEnsureContext
EtwpCoverageEnsureStringBuffer
EtwpCoverageEnsureUserModeView
EtwpCoverageFlushPending
EtwpCoverageFlushTimerCallback
EtwpCoverageFlushWorkItemCallback
EtwpCoverageFreeStringBuffers
EtwpCoverageHighIrqlCPWorkItemCallback
EtwpCoverageInitializeStringBuffer
EtwpCoverageProvEnableCallback
EtwpCoverageRecord
EtwpCoverageRecordAtHighIrql
EtwpCoverageReset
EtwpCoverageResetCP
EtwpCoverageResetTimerCallback
EtwpCoverageResetWorkItemCallback
EtwpCoverageSamplerAllocateTable
EtwpCoverageSamplerCleanup
EtwpCoverageSamplerClose
EtwpCoverageSamplerContextSwap
EtwpCoverageSamplerDelete
EtwpCoverageSamplerFreeTable
EtwpCoverageSamplerPageFault
EtwpCoverageSamplerQuery
EtwpCoverageSamplerQueryStatusInformation
EtwpCoverageSamplerReadyThread
EtwpCoverageSamplerSetBloomFilter
EtwpCoverageSamplerStart
EtwpCoverageSamplerStop
EtwpCoverageSamplerUnloadImage
EtwpCoverageUserIsAdmin
EtwpCoverageValidateCP
EtwpCpuStarvationProvEnableCallback
EtwpCreateActivityId
EtwpCreateDirectoryFile
EtwpCreateEventKey
EtwpCreateKey
EtwpCreateKeyTreeForPath
EtwpCreateLogFile
EtwpCreateNtFileName
EtwpCreatePerfectHashFunction
EtwpCreateUmReplyObject
EtwpCrimsonProvEnableCallback
EtwpDelayCreate
EtwpDeleteRealTimeConnectionObject
EtwpDeleteRegistrationObject
EtwpDeleteSessionDemuxObject
EtwpDemuxPrivateTraceHandle
EtwpDequeueBuffer
EtwpDequeueBufferPendingCompression
EtwpDequeueBufferPendingCompressionFromQueue
EtwpDequeueFreeBuffer
EtwpDereferenceLoggerSecurityDescriptor
EtwpDereferenceStackEntry
EtwpDestructIptData
EtwpDisableCompression
EtwpDisableKernelTrace
EtwpDisablePerProcessTracing
EtwpDisableStackWalkApc
EtwpDisableTraceProviders
EtwpDisassociateConsumer
EtwpDiskProvTraceDisk
EtwpEnableAutoLoggerProvider
EtwpEnableBootLoggerRegistryProviders
EtwpEnableDisableSpecialGuids
EtwpEnableDisableUMGL
EtwpEnableGuid
EtwpEnableKernelTrace
EtwpEnableKeyProviders
EtwpEnableMetaProviderGuid
EtwpEnableStackCaching
EtwpEnableTrace
EtwpEnqueueAvailableBuffer
EtwpEnqueueOverflowBuffer
EtwpEnumerateAddressSpace
EtwpEnumerateAutologgerPath
EtwpEnumerateKeyProviders
EtwpEnumerateTraceGuids
EtwpEnumerateWorkingSet
EtwpEventTracingCounterSetCallback
EtwpEventWriteCaptureState
EtwpEventWriteDebugLookupFailed
EtwpEventWriteEnableInfo
EtwpEventWriteFull
EtwpEventWriteGroupJoin
EtwpEventWriteGuidEntry
EtwpEventWriteProviderAccessCheckStatus
EtwpEventWriteProviderEnabled
EtwpEventWriteRegEntry
EtwpEventWriteRegistrationStatus
EtwpEventWriteTemplateAdmin
EtwpEventWriteTemplateBackingFile
EtwpEventWriteTemplateInvalidGroupMask
EtwpEventWriteTemplateMaxFileSize
EtwpEventWriteTemplateSessAndProv
EtwpEventWriteTemplateSession
EtwpEventWriteTemplateSessionAndHandle
EtwpEventWriteTemplateSessionDesiredAccess
EtwpEventWriteTemplateSessionEnd
EtwpEventWriteTemplateSessionFromCapturedData
EtwpEventWriteTemplateSessionMaxLoggers
EtwpExecutiveResourceConfigRunDown
EtwpExpandFileName
EtwpExpandStackAndWalkFrameChain
EtwpExpandedStackWalk
EtwpFailLogging
EtwpFileModeCompress
EtwpFillPerfectHashTable
EtwpFinalizeHeader
EtwpFinalizePendingApc
EtwpFinalizePendingStackwalkApc
EtwpFindAndLockBufferForFlushing
EtwpFindDebugId
EtwpFindGuidEntryByGuid
EtwpFindMatchingPmcRegistryGroup
EtwpFindOrCreateGuidEntry
EtwpFindUserBufferSpace
EtwpFixBootLoggers
EtwpFixBootSystemTime
EtwpFlushActiveBuffers
EtwpFlushBuffer
EtwpFlushBufferToLogfile
EtwpFlushBufferToRealtime
EtwpFlushCoverage
EtwpFlushTrace
EtwpFreeApcPool
EtwpFreeCompression
EtwpFreeEventNameFilter
EtwpFreeFilterInfo
EtwpFreeGuidEntry
EtwpFreeKeyNameEntry
EtwpFreeKeyNameList
EtwpFreeLbrData
EtwpFreeLoggerContext
EtwpFreePartitionMemory
EtwpFreePfnArray
EtwpFreePlaceholderList
EtwpFreePmcData
EtwpFreeSecurityDescriptor
EtwpFreeSoftRestartContext
EtwpFreeStackCache
EtwpFreeTraceBuffer
EtwpFreeTraceBufferPool
EtwpFreeUserBufferSpace
EtwpGenerateFileName
EtwpGetAutoLoggerEventNameFilter
EtwpGetAutoLoggerLevelKwFilter
EtwpGetAutoLoggerProviderFilter
EtwpGetCompressionSettings
EtwpGetCrimsonStackKey
EtwpGetCurrentSiloMaxLoggers
EtwpGetDisallowList
EtwpGetDriverDataDosPath
EtwpGetDurationSince
EtwpGetEnableInfoIndex
EtwpGetEventNameFromEventMetadata
EtwpGetFlagExtension
EtwpGetGuidList
EtwpGetGuidSecurityDescriptor
EtwpGetHostPerfCounter
EtwpGetImageSize
EtwpGetLoggerInfoFromContext
EtwpGetLoggerTimeStamp
EtwpGetMaxTrackingEventBufferSize
EtwpGetMetaProviderContext
EtwpGetMicroarchitecturalPmcAffinity
EtwpGetNextEventOffsetType
EtwpGetNextGuidEntry
EtwpGetPmcCpuHierarchyRegistry
EtwpGetPmcOwnership
EtwpGetPmcProfileSource
EtwpGetPmcSessions
EtwpGetPrivateSessionTraceHandle
EtwpGetProcessStartKey
EtwpGetPsmKeyExtendedHeaderItem
EtwpGetReserveTraceBufferStatus
EtwpGetSchematizedFilterSize
EtwpGetScsiPassThroughCdb
EtwpGetSecurityDescriptorByGuid
EtwpGetSidExtendedHeaderItem
EtwpGetSoftRestartInformation
EtwpGetStackExtendedHeaderItem
EtwpGetStackLookasideListEntry
EtwpGetSystemMaximumBufferCount
EtwpGetTimeStampAndQpcDelta
EtwpGetTraceGroupInfo
EtwpGetTraceGuidInfo
EtwpGetTraceGuidList
EtwpGetTrackingLockSlotForThread
EtwpIncrementTraceFile
EtwpInitLoggerContext
EtwpInitialize
EtwpInitializeActivityIdSeed
EtwpInitializeApcPool
EtwpInitializeAutoLoggers
EtwpInitializeBootTimeStamps
EtwpInitializeBufferHeader
EtwpInitializeClassicStackTracing
EtwpInitializeCompressedWriter
EtwpInitializeCompression
EtwpInitializeCoverage
EtwpInitializeCoverageSampler
EtwpInitializeKsrSupport
EtwpInitializeLastBranchTracing
EtwpInitializeLoggerSecurityDescriptor
EtwpInitializePrivateSessionDemuxObject
EtwpInitializeProcessorTrace
EtwpInitializeProviderInfoBuffer
EtwpInitializeProviderTraits
EtwpInitializeRealTimeConnection
EtwpInitializeRegEntry
EtwpInitializeRegistration
EtwpInitializeSecurity
EtwpInitializeSiloState
EtwpInitializeStackLookasideList
EtwpInitializeTimeStamp
EtwpInvokeEventCallback
EtwpIsEventNameFilterEnabled
EtwpIsGuidAllowed
EtwpIsProcessZombie
EtwpIsStackWalkingEnabled
EtwpIsValidImageAddress
EtwpIsWow64Logger
EtwpKernelProvEnableCallback
EtwpKernelTraceRundown
EtwpKsrCallback
EtwpKsrMemoryEnumCallback
EtwpLevelKeywordEnabled
EtwpLoadMicroarchitecturalPmcs
EtwpLoadMicroarchitecturalProfileGroup
EtwpLoadMicroarchitecturalProfileSource
EtwpLocateDbgIdForRegEntry
EtwpLockBufferList
EtwpLockUnlockBufferList
EtwpLogAlwaysPresentRundown
EtwpLogContextSwapEvent
EtwpLogFileNameRundown
EtwpLogGroupMask
EtwpLogKernelEvent
EtwpLogKernelTraceRundown
EtwpLogMemInfo
EtwpLogMemInfoRundown
EtwpLogMemInfoTimerCallback
EtwpLogMemInfoWs
EtwpLogMemInfoWsHelper
EtwpLogMemNodeInfo
EtwpLogPmcCounterRundown
EtwpLogProcessPerfCtrs
EtwpLogRefSetAutoMark
EtwpLogSystemEventUnsafe
EtwpLogTxREvent
EtwpLogger
EtwpLoggerDpc
EtwpLookupLoggerIdByName
EtwpMapEnableFlags
EtwpMapMetaProviderKeywords
EtwpMdlInit
EtwpMetaProviderCount
EtwpNetProvTraceNetwork
EtwpNotifyDisallowedGuidChange
EtwpNotifyGuid
EtwpNotifyProcessTracingChange
EtwpObjectHandleEnumCallback
EtwpObjectHandleRundown
EtwpObjectTypeRundown
EtwpOpenConsumer
EtwpOpenLogger
EtwpOpenRealTimeConnectionObject
EtwpOpenRegistrationObject
EtwpOpenSessionDemuxObject
EtwpParsePoolTagFilter
EtwpPerfMemInfoWork
EtwpPerfectHashFunctionSearch
EtwpPmcInterrupt
EtwpPoolRunDown
EtwpPowerStateCallback
EtwpPreInitializeSiloState
EtwpPreallocateApcPool
EtwpPrepareDirtyBuffer
EtwpPrepareHeader
EtwpPrepareWmitraceLoggerInfo
EtwpPreserveLogger
EtwpPreserveMdlList
EtwpProcessEnumCallback
EtwpProcessPerfCtrsRundown
EtwpProcessThreadImageRundown
EtwpProcessorRundown
EtwpProfileInterrupt
EtwpProviderArrivalCallback
EtwpPsProvCaptureState
EtwpPsProvProcessEnumCallback
EtwpPsProvTraceImage
EtwpPsProvTraceJob
EtwpPsProvTracePriority
EtwpPsProvTraceProcess
EtwpPsProvTraceThread
EtwpQueryCoverageSamplerInformation
EtwpQueryPartitionRegistryInformation
EtwpQueryPersistedMemory
EtwpQueryProcessCommandLine
EtwpQueryProcessEnabledSecurityMitigations
EtwpQueryProcessOtherInfo
EtwpQueryPsmKey
EtwpQueryReferenceTime
EtwpQueryRegistryCallback
EtwpQuerySessionDemuxObject
EtwpQuerySiloRegistrySettings
EtwpQueryTokenPackageInfo
EtwpQueryTrace
EtwpQueryUsedProcessorCount
EtwpQueueApc
EtwpQueueApcPoolDpc
EtwpQueueNotification
EtwpQueuePerfMemInfoWorkItem
EtwpQueueReply
EtwpReadConfigParameters
EtwpRealtimeConnect
EtwpRealtimeCreateLogfile
EtwpRealtimeDeliverBuffer
EtwpRealtimeDisconnectAllConsumers
EtwpRealtimeDisconnectConsumer
EtwpRealtimeDisconnectConsumerByHandle
EtwpRealtimeFlushSavedBuffers
EtwpRealtimeInjectEtwBuffer
EtwpRealtimeNotifyConsumers
EtwpRealtimeResetReferenceTime
EtwpRealtimeRestoreBuffer
EtwpRealtimeRestoreState
EtwpRealtimeSaveBuffer
EtwpRealtimeSaveState
EtwpRealtimeSendEmptyMarker
EtwpRealtimeUpdateConsumers
EtwpRealtimeUpdateReferenceTime
EtwpRealtimeZeroTruncateLogfile
EtwpReceiveNotification
EtwpReceiveReplyDataBlock
EtwpReenableCompression
EtwpReenableStackWalkApc
EtwpReferenceCurrentBuffer
EtwpReferenceGuidEntry
EtwpReferenceLastBranchLookasideList
EtwpReferenceLoggerSecurityDescriptor
EtwpReferenceStackLookasideList
EtwpRegTraceCallback
EtwpRegTraceEnableCallback
EtwpRegisterKMProvider
EtwpRegisterPartitionPages
EtwpRegisterPrivateSession
EtwpRegisterUMProvider
EtwpReleaseLoggerContext
EtwpReleaseProviderTraitsReference
EtwpReleaseQueueEntry
EtwpReleaseStackLookasideListEntry
EtwpReleaseTraceBuffer
EtwpRelinquishCompressionTarget
EtwpRemoveMicroarchitecturalPmcFromPmcGroup
EtwpRemoveMicroarchitecturalPmcFromRegistry
EtwpRequestFlushTimer
EtwpReserveTraceBuffer
EtwpReserveWithPebsIndex
EtwpReserveWithPmcCounters
EtwpResetBufferHeader
EtwpResetFlushTimer
EtwpRotateCompressionTarget
EtwpRotateCompressionTargetIfNeeded
EtwpRundownNotifications
EtwpSampledProfileRunDown
EtwpSavePersistedLogger
EtwpSavePersistedLoggers
EtwpSavePersistedLoggersWorker
EtwpSendBufferToDebugger
EtwpSendDataBlock
EtwpSendDbgId
EtwpSendNoReplyReply
EtwpSendReplyDataBlock
EtwpSendSessionNotification
EtwpSendTraceEvent
EtwpSetCompressionSettings
EtwpSetCoverageSamplerInformation
EtwpSetMark
EtwpSetPartitionContext
EtwpSetPmcProfileSource
EtwpSetProviderBinaryTracking
EtwpSetProviderTraitsKm
EtwpSetProviderTraitsUm
EtwpSetQpcDeltaTracking
EtwpSetSoftRestartInformation
EtwpShutdownConsumers
EtwpSpinLockConfigRunDown
EtwpStackDeleteProcessor
EtwpStackInitializeProcessor
EtwpStackRundown
EtwpStackTraceDispatcher
EtwpStackWalkApc
EtwpStartBootLogger
EtwpStartLogger
EtwpStartLoggerThread
EtwpStartTrace
EtwpStopLoggerInstance
EtwpStopTrace
EtwpSwitchBuffer
EtwpSynchronizationDpc
EtwpSynchronizeWithLogger
EtwpSysModuleRunDown
EtwpSystemImageEnumCallback
EtwpSystemTraceWdf
EtwpThreadEnumCallback
EtwpThreadRundownApc
EtwpTiAllocVadQueryEventWriteWorkItemContext
EtwpTiAsyncVadQueryEventWrite
EtwpTiClearBloomFilter
EtwpTiFillProcessIdentity
EtwpTiFillThreadIdentity
EtwpTiFillTokenIdentity
EtwpTiFillVad
EtwpTiFillVadEventWrite
EtwpTiFillZeroVad
EtwpTiFreeTokenIdentity
EtwpTiFreeVad
EtwpTiGetHashedBitNumbers
EtwpTiParseContextRecord
EtwpTiQueryCodeIntegrityOptions
EtwpTiQueryTokenIdentity
EtwpTiQueryVad
EtwpTiSerializeTokenGroups
EtwpTiTestBloomFilter
EtwpTiVadQueryEventWrite
EtwpTiVadQueryEventWriteCallback
EtwpTimLogMitigationForProcess
EtwpTimeProfileStart
EtwpTraceALPC
EtwpTraceBootSystemTime
EtwpTraceCachedStack
EtwpTraceContextRegisters
EtwpTraceDebugPrint
EtwpTraceFileIo
EtwpTraceFileName
EtwpTraceFltIo
EtwpTraceFltTimedIo
EtwpTraceHandle
EtwpTraceImageUnload
EtwpTraceImageUnloadApc
EtwpTraceImageUnloadApcStub
EtwpTraceIo
EtwpTraceIoInit
EtwpTraceKernelEventWithFilter
EtwpTraceLastBranchRecord
EtwpTraceLoggingProvEnableCallback
EtwpTraceLostEvent
EtwpTraceLostSystemEvent
EtwpTraceMessageVa
EtwpTraceNetwork
EtwpTraceOpticalIo
EtwpTraceOpticalIoInit
EtwpTraceProcessRundown
EtwpTraceProcessorTrace
EtwpTraceRedirectedIo
EtwpTraceRegistry
EtwpTraceRegistryTransaction
EtwpTraceSavePersistedLoggerStop
EtwpTraceSplitIo
EtwpTraceStackKey
EtwpTraceStackWalk
EtwpTraceSystemInitialization
EtwpTraceSystemShutdown
EtwpTraceThreadRundown
EtwpTraceThreadRundownWithStack
EtwpTraceWdf
EtwpTracingProvEnableCallback
EtwpTrackBinaryForSession
EtwpTrackDebugIdForSession
EtwpTrackDecodeGuidForSession
EtwpTrackGuidEntryRegistrations
EtwpTrackProviderBinary
EtwpTrackProviderRegistration
EtwpTransitionToRealtime
EtwpUMGLEnabled
EtwpUnlockBufferList
EtwpUnreferenceDataBlock
EtwpUnreferenceGuidEntry
EtwpUnregisterPartitionPages
EtwpUnsubscribeContainerStateWnf
EtwpUpdateContextRegisterTraceEvents
EtwpUpdateDisallowList
EtwpUpdateDisallowedGuids
EtwpUpdateEnableMask
EtwpUpdateEventFilterAndFree
EtwpUpdateEventsLostCount
EtwpUpdateFileHeader
EtwpUpdateFileInfoDriverRegistration
EtwpUpdateFileInfoDriverState
EtwpUpdateGlobalGroupMasks
EtwpUpdateGroupMasks
EtwpUpdateGuidEnableInfo
EtwpUpdateGuidFilterData
EtwpUpdateKernelGroupsWork
EtwpUpdateLastBranchTracingConfiguration
EtwpUpdateLastBranchTracingEvents
EtwpUpdateLastBranchTracingHalState
EtwpUpdateLoggerGroupMasks
EtwpUpdateLoggerSecurityDescriptor
EtwpUpdatePerProcessTracing
EtwpUpdatePeriodicCaptureState
EtwpUpdatePmcCounters
EtwpUpdatePmcEvents
EtwpUpdateProcessTracingCallback
EtwpUpdateProcessorTraceConfiguration
EtwpUpdateProcessorTraceEvents
EtwpUpdateSelectedGroupMasks
EtwpUpdateStackTracing
EtwpUpdateTagFilter
EtwpUpdateTrace
EtwpUseDescriptorTypeUm
EtwpUserInAdminOrLogUsersGroup
EtwpValidateEnableNotification
EtwpValidateFilterDescriptors
EtwpValidateFlagExtension
EtwpValidateLoggerInfo
EtwpValidatePayloadFilter
EtwpValidateTraceControlFilterDescriptors
EtwpWaitForBufferReferenceCount
EtwpWriteBufferCompressed
EtwpWriteProcessorTrace
EtwpWriteRemainingCompressedData
EtwpWriteUserEvent
EventDataDescCreateString
ExAccessByte
ExAcquireAutoExpandPushLockExclusive
ExAcquireAutoExpandPushLockShared
ExAcquireCacheAwarePushLockExclusive
ExAcquireCacheAwarePushLockExclusiveEx
ExAcquireCacheAwarePushLockSharedEx
ExAcquireFastMutex
ExAcquireFastMutexUnsafe
ExAcquireFastResourceExclusive
ExAcquireFastResourceShared
ExAcquireFastResourceSharedStarveExclusive
ExAcquireFastResourceWithFlags
ExAcquirePushLockExclusiveEx
ExAcquirePushLockSharedEx
ExAcquireResourceExclusiveLite
ExAcquireResourceSharedLite
ExAcquireRundownProtection
ExAcquireRundownProtectionCacheAware
ExAcquireRundownProtectionCacheAwareEx
ExAcquireRundownProtectionEx
ExAcquireSharedStarveExclusive
ExAcquireSharedWaitForExclusive
ExAcquireSpinLockExclusive
ExAcquireSpinLockExclusiveAtDpcLevel
ExAcquireSpinLockShared
ExAcquireSpinLockSharedAtDpcLevel
ExAcquireTimeRefreshLockExclusive
ExAcquireTimeRefreshLockShared
ExAddPrivateDataToCrashDump
ExAllocateAutoExpandPushLock
ExAllocateCacheAwarePushLock
ExAllocateCacheAwareRundownProtection
ExAllocateCallBack
ExAllocateContiguousHeapPool
ExAllocateFromLookasideListEx
ExAllocateFromNPagedLookasideList
ExAllocateFromPagedLookasideList
ExAllocateHeapPages
ExAllocateHeapPool
ExAllocatePool
ExAllocatePool2
ExAllocatePool3
ExAllocatePoolEx
ExAllocatePoolMm
ExAllocatePoolSanityChecks
ExAllocatePoolWithQuota
ExAllocatePoolWithQuotaTag
ExAllocatePoolWithTag
ExAllocatePoolWithTagFromNode
ExAllocatePoolWithTagPriority
ExAllocatePoolZero
ExAllocatePrivateWorkerPool
ExAllocateTimer
ExAllocateTimerInternal
ExAllocateTimerInternal2
ExAreApcsDisabledForThread
ExAtsSvmDevicePowerCallback
ExAtsSvmSecureDevicePowerCallback
ExBlockOnAddressPushLock
ExBlockPushLock
ExBuildPasidMsrForThread
ExBurnMemory
ExCallCallBack
ExCancelDpcEventWait
ExCancelTimer
ExCheckFullProcessInformationAccess
ExCheckSingleFilter
ExCheckValidIRTimerId
ExCleanTimerResolutionRequest
ExCleanupAutoExpandPushLock
ExCleanupRundownProtectionCacheAware
ExClearPoolFlags
ExCompareExchangeCallBack
ExComputeTickCountMultiplier
ExConvertExclusiveToSharedLite
ExConvertFastResourceExclusiveToShared
ExConvertPushLockExclusiveToShared
ExCopyWakeTimerInfo
ExCpuSetResourceManagerAccessCheck
ExCreateCallback
ExCreateDpcEvent
ExCreateHandle
ExCreateHandleEx
ExCreateHandleTable
ExCreateHeap
ExCreatePool
ExCreatePoolTagTable
ExDeleteDpcEvent
ExDeleteFastResource
ExDeleteLookasideListEx
ExDeleteNPagedLookasideList
ExDeletePagedLookasideList
ExDeletePoolTagTable
ExDeleteResourceLite
ExDeleteTimer
ExDeleteWakeTimerInfo
ExDereferenceCallBackBlock
ExDereferenceHandleDebugInfo
ExDestroyHandle
ExDestroyHandleTable
ExDestroyPool
ExDisableAllLookasideLists
ExDisableHandleTracing
ExDisableResourceBoostLite
ExDisownFastResource
ExDupHandleTable
ExEnableHandleExceptions
ExEnableHandleTracing
ExEnableRaiseUMExceptionOnInvalidHandleClose
ExEnterCriticalRegionAndAcquireFastMutexUnsafe
ExEnterCriticalRegionAndAcquireResourceExclusive
ExEnterCriticalRegionAndAcquireResourceShared
ExEnterCriticalRegionAndAcquireSharedWaitForExclusive
ExEnterPriorityRegionAndAcquireResourceExclusive
ExEnterPriorityRegionAndAcquireResourceShared
ExEnumHandleTable
ExEnumerateSystemFirmwareTables
ExExtendZone
ExFastReplenishHandleTableEntry
ExFlushLookasideListEx
ExFlushTb
ExFreeAsid
ExFreeAutoExpandPushLock
ExFreeCacheAwarePushLock
ExFreeCacheAwareRundownProtection
ExFreeCallBack
ExFreeHeapPages
ExFreeHeapPool
ExFreePool
ExFreePool2
ExFreePoolEx
ExFreePoolSanityChecks
ExFreePoolWithTag
ExFreeSvmAsid
ExFreeToLookasideListEx
ExFreeToNPagedLookasideList
ExFreeToPagedLookasideList
ExGenRandom
ExGetBigPoolInfo
ExGetCallBackBlockRoutine
ExGetCurrentProcessorCounts
ExGetCurrentProcessorCpuUsage
ExGetExclusiveWaiterCount
ExGetExpirationDate
ExGetExtensionTable
ExGetFirmwareEnvironmentVariable
ExGetFirmwareType
ExGetHandleAttributes
ExGetHandlePointer
ExGetHeapFromVA
ExGetLicenseTamperState
ExGetNextProcess
ExGetNextWakeTime
ExGetPoolTagInfo
ExGetPreviousMode
ExGetPrmInterface
ExGetSharedWaiterCount
ExGetSuiteMask
ExGetSystemFirmwareTable
ExGetWakeTimerList
ExHandleLogBadReference
ExHeapLookasideRebalance
ExHeapQueryPoolUsage
ExInitLicenseCallback
ExInitPoolLookasidePointers
ExInitSystem
ExInitializeAutoExpandPushLock
ExInitializeCallBack
ExInitializeDeviceAts
ExInitializeFastOwnerEntry
ExInitializeFastResource
ExInitializeFastResource2
ExInitializeFastResourceAcquired
ExInitializeLeapSecondData
ExInitializeLookasideListEx
ExInitializeLookasideListExInternal
ExInitializeNPagedLookasideList
ExInitializeNPagedLookasideListInternal
ExInitializeNls
ExInitializePagedHeaps
ExInitializePagedLookasideList
ExInitializePagedLookasideListInternal
ExInitializePoolHeapManagement
ExInitializePoolTracker
ExInitializeProcessor
ExInitializePushLock
ExInitializeResourceLite
ExInitializeResourceLite2
ExInitializeRundownProtection
ExInitializeRundownProtectionCacheAware
ExInitializeRundownProtectionCacheAwareEx
ExInitializeSystemLookasideList
ExInitializeTimeRefresh
ExInitializeUtcTimeZoneBias
ExInitializeZone
ExInsertPoolTag
ExInterlockedAddLargeInteger
ExInterlockedAddUlong
ExInterlockedExtendZone
ExInterlockedInsertHeadList
ExInterlockedInsertTailList
ExInterlockedPopEntryList
ExInterlockedPushEntryList
ExInterlockedRemoveHeadList
ExIsFastResourceContended
ExIsFastResourceHeld
ExIsFastResourceHeldExclusive
ExIsManufacturingModeEnabled
ExIsMultiSessionSku
ExIsProcessorFeaturePresent
ExIsResourceAcquiredExclusiveLite
ExIsResourceAcquiredSharedLite
ExIsRestrictedCaller
ExIsSafeWorkItem
ExIsSoftBoot
ExIsSpecialPoolAddress
ExIsStateSeparationEnabled
ExIsSvmEnabledForProcess
ExIsSvmPasidMsrUpdateRequiredForProcess
ExLocalTimeToSystemTime
ExLockHandleTableEntry
ExLockUserBuffer
ExLogTimeZoneInformation
ExMapHandleToPointer
ExMapHandleToPointerEx
ExMoveFastResourceOwnershipWithFlags
ExNotifyBootDeviceRemoval
ExNotifyCallback
ExNotifyPlatformBinaryExecuted
ExNotifyWithProcessing
ExPoolCleanupExpansionTable
ExPoolQueryLimits
ExPoolSetLimit
ExPreInitializeNls
ExProcessCounterSetCallback
ExProcessorCounterSetCallback
ExProtectPool
ExProtectPoolEx
ExQueryBigPoolTag
ExQueryBootEntropyInformation
ExQueryDepthSList
ExQueryHandleExceptionsPermanency
ExQueryPoolBlockSize
ExQueryPoolUsage
ExQueryProcessHandleInformation
ExQuerySystemLockInformation
ExQueryTimerResolution
ExQueryWnfStateData
ExQueueDebuggerWorker
ExQueueDpcEventWait
ExQueueWorkItem
ExQueueWorkItemEx
ExQueueWorkItemExFromIo
ExQueueWorkItemFromIo
ExQueueWorkItemToPartition
ExQueueWorkItemToPrivatePool
ExRaiseAccessViolation
ExRaiseDatatypeMisalignment
ExRaiseHardError
ExReInitializeRundownProtection
ExReInitializeRundownProtectionCacheAware
ExRealTimeIsUniversal
ExRebootSystemForRecovery
ExReferenceCallBackBlock
ExReferenceHandleDebugInfo
ExRegisterBootDevice
ExRegisterCallback
ExRegisterExtension
ExRegisterHost
ExReinitializeFastResource
ExReinitializeResourceLite
ExReleaseAutoExpandPushLockExclusive
ExReleaseAutoExpandPushLockShared
ExReleaseCacheAwarePushLockExclusive
ExReleaseCacheAwarePushLockExclusiveEx
ExReleaseCacheAwarePushLockSharedEx
ExReleaseDisownedFastResource
ExReleaseDisownedFastResourceExclusive
ExReleaseDisownedFastResourceShared
ExReleaseExtensionTable
ExReleaseFastMutex
ExReleaseFastMutexUnsafe
ExReleaseFastMutexUnsafeAndLeaveCriticalRegion
ExReleaseFastResource
ExReleaseFastResourceExclusive
ExReleaseFastResourceShared
ExReleasePushLockEx
ExReleasePushLockExclusiveEx
ExReleasePushLockSharedEx
ExReleaseResourceAndLeaveCriticalRegion
ExReleaseResourceAndLeavePriorityRegion
ExReleaseResourceForThreadLite
ExReleaseResourceLite
ExReleaseRundownProtection
ExReleaseRundownProtectionCacheAware
ExReleaseRundownProtectionCacheAwareEx
ExReleaseRundownProtectionEx
ExReleaseSpinLockExclusive
ExReleaseSpinLockExclusiveFromDpcLevel
ExReleaseSpinLockRegardlessFromDpcLevel
ExReleaseSpinLockShared
ExReleaseSpinLockSharedFromDpcLevel
ExReleaseTimeRefreshLockExclusive
ExReleaseTimeRefreshLockShared
ExRemoveLowBoxAtomReferences
ExRemovePoolTag
ExRemoveVirtualizedTimer
ExReturnPoolQuota
ExRngInitializeSystem
ExRundownCompleted
ExRundownCompletedCacheAware
ExSaAllocate
ExSaFree
ExSecurePoolUpdate
ExSecurePoolValidate
ExSetFirmwareEnvironmentVariable
ExSetLeapSecondEnabled
ExSetLicenseTamperState
ExSetPoolFlags
ExSetResourceOwnerPointer
ExSetResourceOwnerPointerEx
ExSetTimer
ExSetTimerResolution
ExShareAddressSpaceWithDevice
ExShareSystemAddressSpaceWithDevice
ExShutdownSystem
ExSizeOfAutoExpandPushLock
ExSizeOfRundownProtectionCacheAware
ExSlowReplenishHandleTableEntry
ExStartRecordingIRTimerExpiries
ExStopRecordingIRTimerExpiries
ExStopSharingAddressSpaceWithDevice
ExStopSharingSystemAddressSpaceWithDevice
ExSubscribeWnfStateChange
ExSvmBeginDeviceReset
ExSvmFinalizeDeviceReset
ExSvmUpdateThreadPasidMsrApc
ExSwapinWorkerThreads
ExSweepHandleTable
ExSystemExceptionFilter
ExSystemTimeToLocalTime
ExTimedWaitForUnblockPushLock
ExTimerRundown
ExTraceTimerResolution
ExTryAcquireAutoExpandPushLockExclusive
ExTryAcquireAutoExpandPushLockShared
ExTryAcquireCacheAwarePushLockExclusiveEx
ExTryAcquireCacheAwarePushLockSharedEx
ExTryAcquirePushLockExclusiveEx
ExTryAcquirePushLockSharedEx
ExTryAcquireSpinLockExclusiveAtDpcLevel
ExTryAcquireSpinLockSharedAtDpcLevel
ExTryAcquireTimeRefreshLockExclusive
ExTryConvertPushLockSharedToExclusiveEx
ExTryConvertSharedSpinLockExclusive
ExTryConvertSharedToExclusiveLite
ExTryQueueWorkItem
ExTryToAcquireFastMutex
ExTryToAcquireResourceExclusiveLite
ExTryToConvertFastResourceSharedToExclusive
ExUnblockOnAddressPushLockEx
ExUnblockPushLockEx
ExUninitializeDeviceAts
ExUnlockHandleTableEntry
ExUnlockUserBuffer
ExUnregisterCallback
ExUnregisterExtension
ExUnsubscribeWnfStateChange
ExUpdateLicenseData
ExUpdateOsPfnInRegistry
ExUpdateSystemTimeFromCmos
ExUpdateTimerResolutionPolicy
ExUuidCreate
ExVerifySuite
ExWaitForCallBacks
ExWaitForRundownProtectionRelease
ExWaitForRundownProtectionReleaseCacheAware
ExWaitForUnblockPushLock
ExWakeTimersPause
ExWakeTimersResume
ExWnfCrossVmCallback
ExWnfHiveUnloaded
ExecuteHotpatchTestBootFunction
ExfAcquirePushLockExclusive
ExfAcquirePushLockExclusiveEx
ExfAcquirePushLockShared
ExfAcquirePushLockSharedEx
ExfAcquireReleasePushLockExclusive
ExfAcquireRundownProtection
ExfReleasePushLock
ExfReleasePushLockExclusive
ExfReleasePushLockShared
ExfReleasePushLockSharedEx
ExfReleaseRundownProtection
ExfTryAcquirePushLockShared
ExfTryAcquirePushLockSharedEx
ExfTryToWakePushLock
ExfUnblockPushLock
ExfWaitForRundownProtectionRelease
ExpAcquireFannedOutPushLockExclusive
ExpAcquireFastMutexContended
ExpAcquireFastResourceExclusiveSlow
ExpAcquireFastResourceSharedSlow
ExpAcquirePoolListLockExclusive
ExpAcquirePoolListLockShared
ExpAcquirePrmInterface
ExpAcquireResourceSharedLite
ExpAcquireSharedStarveExclusive
ExpAcquireSpinLockDisabled
ExpAcquireSpinLockExclusive
ExpAcquireSpinLockExclusiveAtDpcLevelInstrumented
ExpAcquireSpinLockSharedAtDpcLevelInstrumented
ExpAcquireSvmAgentsLock
ExpAddFastOwnerEntryToThreadList
ExpAddNonMirroredRanges
ExpAddResourceToSystemResourceList
ExpAddTagForBigPages
ExpAeMeasureContention
ExpAeThresholdInitWorker
ExpAeThresholdInitialization
ExpAllocateAsid
ExpAllocateFannedOutPushLock
ExpAllocateHandleTable
ExpAllocateHandleTableEntrySlow
ExpAllocateLowLevelTable
ExpAllocateMidLevelTable
ExpAllocateOwnerEntryForLegacyShim
ExpAllocatePoolWithQuotaTag
ExpAllocatePoolWithTagFromNode
ExpAllocateStringRoutine
ExpAllocateTablePagedPool
ExpAllocateTablePagedPoolNoZero
ExpAllocateUuids
ExpApplyPrewaitBoost
ExpApplyPriorityBoost
ExpApplyRewaitBoost
ExpAssignPasid
ExpAtsConfigureSecureDevice
ExpAtsDereferenceDevice
ExpBlockOnLockedHandleEntry
ExpBoostIoAfterAcquire
ExpCalcAdjustedDueTime
ExpCancelTimer
ExpCapabilityCheck
ExpCaptureWnfStateName
ExpCenturyDpcRoutine
ExpCheckForFreedEnhancedTimer
ExpCheckForLookaside
ExpCheckForLookasideList
ExpCheckForResource
ExpCheckForWorker
ExpCheckIRTimerAccess
ExpCheckTestsigningEnabled
ExpCheckThreadHistory
ExpCheckWakeTimerAccess
ExpCleanupAutoExpandPushLock
ExpCleanupBigTag
ExpCloseWorkerFactory
ExpCloudbookHardwareIDProvider
ExpCloudbookHardwareLockedProvider
ExpCommitWakeFastResource
ExpCompactPrivatePools
ExpComputeCyclesPerYield
ExpComputeLookasideDepth
ExpConsumeAddonPolicySetCacheProvider
ExpConvertArcName
ExpConvertExclusiveToSharedLite
ExpConvertFastResourceExclusiveToShared
ExpConvertLdrEntryToModuleInfo
ExpConvertSignatureName
ExpConvertSvmDevice
ExpCopyProcessInfo
ExpCreateCrossVmEvent
ExpCreateCrossVmMutant
ExpCreateOutputARC
ExpCreateOutputEFI
ExpCreateOutputNT
ExpCreateOutputSIGNATURE
ExpCreateWorkerThread
ExpCrossVmIntHostCallback
ExpCrossVmWnfPull
ExpCrossVmWnfPush
ExpDebuggerDpcRoutine
ExpDebuggerWorker
ExpDeleteCallback
ExpDeleteMutant
ExpDeleteSiloState
ExpDeleteTimer
ExpDeleteTimer2
ExpDeleteWorkerFactory
ExpDereferenceHost
ExpDetermineLargePagePolicy
ExpDuplicateSingleHandle
ExpEnumerateCallback
ExpEventInitialization
ExpExTimerAttributesAreValid
ExpExpandResourceOwnerTable
ExpExpirationThread
ExpFastResourceLegacyAcquireSharedStarveExclusive
ExpFastResourceLegacyConvertExclusiveToShared
ExpFastResourceLegacyIsAcquiredShared
ExpFastResourceLegacyRelease
ExpFinalizeTimerDeletion
ExpFindArcName
ExpFindCurrentThread
ExpFindDiskSignature
ExpFindEmptyEntry
ExpFindFastOwnerEntryForThread
ExpFindHost
ExpFirmwareAccessAppContainerCheck
ExpFlushGeneralLookaside
ExpFreeAsid
ExpFreeHandleTable
ExpFreeHeapSpecialPool
ExpFreeLowLevelTable
ExpFreeOwnerEntry
ExpFreePoolChecks
ExpFreeTablePagedPool
ExpGenuinePolicyPostProcess
ExpGetDeviceDataInformation
ExpGetDriveGeometry
ExpGetEntryBilledProcess
ExpGetExtensionHostForCrossVmObject
ExpGetFirmwareEnvironmentVariable
ExpGetGlobalLocaleSection
ExpGetHandleExtraInfo
ExpGetHandleInformation
ExpGetHandleInformationEx
ExpGetIRTimerDesc
ExpGetLeapSecondDataRegistryKeyHandle
ExpGetLicenseTamperState
ExpGetLockInformation
ExpGetLookasideInformation
ExpGetNextCallback
ExpGetNextHandleTableEntry
ExpGetNtProductTypeFromLicenseValue
ExpGetNumberOfInitialSessionsFromRegistry
ExpGetObjectInformation
ExpGetOriginalImageVersion
ExpGetOriginalImageVersionRegistryValue
ExpGetPartitionTableInfo
ExpGetPoolTagInfoTarget
ExpGetProcessInformation
ExpGetProductInfoSuiteTypeMap
ExpGetSystemBasicInformation
ExpGetSystemEmulationBasicInformation
ExpGetSystemEmulationProcessorInformation
ExpGetSystemFirmwareTableInformation
ExpGetSystemFlushInformation
ExpGetSystemPlatformBinary
ExpGetSystemProcessorFeaturesInformation
ExpGetSystemProcessorInformation
ExpGetSystemWriteConstraintInformation
ExpGetThreadResourceHint
ExpHeapDumpEnumLargeAllocs
ExpHeapInitLfhStartCallback
ExpHeapInitPhase1
ExpHpCompactHeapCallback
ExpHpCompactionRoutine
ExpHpEnumerateHeaps
ExpHpGCTimerCallback
ExpHpIsSpecialPoolHeap
ExpInitBootEntropyInformation
ExpInitExpCheckTestSigningInfo
ExpInitFullProcessSecurityInfo
ExpInitLicensing
ExpInitSystemPhase0
ExpInitSystemPhase1
ExpInitializeBootEnvironment
ExpInitializeCallbacks
ExpInitializeCrossVmIntegration
ExpInitializeMemoryMirroring
ExpInitializePoolTrackerTable
ExpInitializePrivatePools
ExpInitializeSessionDriver
ExpInitializeSvm
ExpInitializeThreadHistory
ExpInitializeTimeChangeWorker
ExpInitializeTimeZoneInformation
ExpInsertLowLevelTableIntoFreeList
ExpInsertPoolTracker
ExpInsertPoolTrackerExpansion
ExpInsertTimerResolutionEntry
ExpInterlockedFlushSList
ExpInterlockedPopEntrySList
ExpInterlockedPushEntrySList
ExpIoPoolDeadlockWorker
ExpIsBootEntry
ExpIsDevicePathForRemovableMedia
ExpIsDriverEntry
ExpIsFastResourceOwned
ExpKdPullRemoteFileForUser
ExpKernelExpirationDateCacheProvider
ExpKeyedEventInitialization
ExpLeapSecondDataRegistryNotifyHandler
ExpLeaveWorkerFactoryAwayMode
ExpLegacyWorkerInitialization
ExpLicUpdateChecksum
ExpLicenseWatchInitWorker
ExpLimitDpcInsertEntry
ExpLimitInsertDpc
ExpLockCallbackListExclusive
ExpLockCallbackListShared
ExpLockHandleTableExclusive
ExpLogRefreshTimeZoneInformationCutoverFail
ExpLogRefreshTimeZoneInformationQueryFail
ExpLogRefreshTimeZoneInformationSuccess
ExpLookupHandleTableEntry
ExpMoveSharedFastResourceOwnershipWithFlags
ExpMutantInitialization
ExpNewThreadNecessary
ExpNextYearDpcRoutine
ExpNlsDeleteSiloState
ExpNodeCreateSystemThread
ExpNodeHotAddProcessorWorker
ExpNodeInitialize
ExpNtDeleteWnfStateData
ExpNtUpdateWnfStateData
ExpObCloseCrossVmEvent
ExpObCloseCrossVmMutant
ExpObDeleteCrossVmEvent
ExpObDeleteCrossVmMutant
ExpOsProductCacheProviderHelper
ExpOsProductContentIdCacheProvider
ExpOsProductPfnCacheProvider
ExpOwnerEntryToThread
ExpParseAndUpdateLeapSecondData
ExpParseArcPathName
ExpParseEfiPath
ExpParseSignatureName
ExpParseSuiteMask
ExpPartitionCreatePool
ExpPartitionCreatePoolDelayed
ExpPartitionCreatePoolInternal
ExpPartitionCreateSystemThread
ExpPartitionCreateThreadIfNecessary
ExpPartitionDestroy
ExpPartitionInitialize
ExpPartitionStart
ExpPcwDisabledStatus
ExpPcwHostCallback
ExpPlFindLimitEntry
ExpPlGrowTableIfNeeded
ExpPlProcessNotifications
ExpPlRunOnceInit
ExpPoolContextHeaderFromHandle
ExpPoolFlagsToPoolType
ExpPoolTrackerChargeEntry
ExpPoolTrackerReturnLimit
ExpPoolTypeToPoolFlags
ExpPrepareNewAtsDevice
ExpPrepareNewSvmDevice
ExpPrepareToWakeFastResourceExclusive
ExpPrepareToWakeFastResourceShared
ExpPrivatePoolCreate
ExpPrivatePoolDestroy
ExpPrivatePoolGetNext
ExpPrmInitialization
ExpPrmNotifyInterfaceChange
ExpPrmTargetDeviceChangeCallback
ExpPrmWaitForForZeroActiveCount
ExpProfileCreate
ExpProfileDelete
ExpProfileInitialization
ExpPulseCrossVmEvent
ExpPurgeThreadHistory
ExpQueryBootLoaderMetadata
ExpQueryChannelInformation
ExpQueryCodeIntegrityCertificateInfo
ExpQueryCrossVmEvent
ExpQueryElamCertInfo
ExpQueryInterruptSteeringInformation
ExpQueryLegacyDriverInformation
ExpQueryMemoryTopologyInformation
ExpQueryModuleInformation
ExpQueryModuleInformationEx
ExpQueryModuleInformationImage
ExpQueryModuleInformationImageEx
ExpQueryNumaAvailableMemory
ExpQueryNumaProcessorMap
ExpQueryNumaProximityNode
ExpQueryOriginalImageFeatureInformation
ExpQueryPortableWorkspaceEfiLauncherInformation
ExpQueryPrmInterface
ExpQueryProcessorInformationCounters
ExpQueryRegistryRoutine
ExpQuerySingleModuleInformation
ExpQuerySystemInformation
ExpQuerySystemMemoryNumaInformation
ExpQuerySystemMemoryNumaPerformanceInformation
ExpQuerySystemPerformanceInformation
ExpQueueWorkItem
ExpRaiseHardError
ExpReadComPlusPackage
ExpReadLeapSecondData
ExpReadSiloTimeZoneMarker
ExpRecordShutdownTime
ExpReducedLicenseData
ExpRefreshSystemTime
ExpRefreshTimeZoneInformation
ExpRegisterCounterSet
ExpRegisterFirmwareTableInformationHandler
ExpReleaseCrossVmMutant
ExpReleaseDisownedFastResourceExclusive
ExpReleaseDisownedFastResourceShared
ExpReleaseFannedOutPushLockExclusive
ExpReleaseFastResourceExclusive
ExpReleaseFastResourceExclusiveSlow
ExpReleaseFastResourceShared
ExpReleasePoolListLockExclusive
ExpReleaseResourceForThreadLite
ExpReleaseRundownProtection
ExpReleaseSpinLockDisabled
ExpReleaseSpinLockExclusiveFromDpcLevelInstrumented
ExpReleaseSpinLockSharedFromDpcLevelInstrumented
ExpReleaseSvmAgentsLock
ExpRemoveCurrentThreadFromThreadHistory
ExpRemoveFastOwnerEntryFromThreadList
ExpRemoveGeneralLookaside
ExpRemoveHandleTable
ExpRemovePoolTrackerExpansion
ExpRemoveTagForBigPages
ExpResetCrossVmEvent
ExpResizeBigPageTable
ExpResourceEnforcesOwnershipTransfer
ExpResourceTimeoutCaptureLiveDump
ExpRevokeBootLoaderPagePrivileges
ExpSaAllocatorAllocate
ExpSaAllocatorFree
ExpSaAllocatorInitialize
ExpSaAllocatorOptimizeList
ExpSaBinaryArrayInsert
ExpSaBinaryArrayRemove
ExpSaInitialize
ExpSaPageGroupAllocateMemory
ExpSaPageGroupDescriptorAllocate
ExpSaPageGroupDescriptorFree
ExpSaPageGroupFreeMemory
ExpSafeWcslen
ExpSaveAbHandle
ExpScanGeneralLookasideList
ExpScanSystemLookasideList
ExpSecurePoolCreate
ExpSecurePoolFromHandle
ExpSeedHotTags
ExpSemaphoreInitialization
ExpSetBootEntry
ExpSetBootLoaderMetadata
ExpSetCrossVmEvent
ExpSetDriverEntry
ExpSetFirmwareEnvironmentVariable
ExpSetHandleExtraInfo
ExpSetLicenseTamperState
ExpSetPendingUILanguage
ExpSetProcessorMicrocodeUpdateInformation
ExpSetResourceOwnerPointerEx
ExpSetSoftRebootFlags
ExpSetSwappingKernelApc
ExpSetSystemTime
ExpSetTimeZoneInformation
ExpSetTimer2
ExpSetTimerObject
ExpSetTimerObject2
ExpSetWorkerFactoryDeferredCreateTimer
ExpShareAddressSpaceWithDevice
ExpShutdownWorkerFactory
ExpSizeHeapPool
ExpSnapShotHandleTables
ExpSplitCacheAlignedAllocation
ExpStampBigPoolEntry
ExpStringCapture
ExpStringFree
ExpSvmDereferenceAsid
ExpSvmDereferenceDevice
ExpSvmDpcRoutine
ExpSvmFaultRoutine
ExpSvmReferenceAsid
ExpSvmServicePageFault
ExpSvmWorkerThread
ExpSysInfoShouldSkipProcess
ExpSystemErrorHandler
ExpSystemErrorHandler2
ExpTimeRefreshCallback
ExpTimeRefreshDpcRoutine
ExpTimeRefreshWork
ExpTimeZoneCleanupSiloState
ExpTimeZoneDpcRoutine
ExpTimeZoneInitSiloState
ExpTimeZoneWork
ExpTimerAdjust
ExpTimerApcRoutine
ExpTimerDpcRoutine
ExpTimerInitialization
ExpTimerPause
ExpTimerResume
ExpTimerSetParametersAreValid
ExpTrackRaiseLimitNotification
ExpTrackTableGetMoreLimit
ExpTrackTableInsertLimit
ExpTranslateArcPath
ExpTranslateBootEntryNameToId
ExpTranslateDriverEntryNameToId
ExpTranslateEfiPath
ExpTranslateHexStringToGUID
ExpTranslateHexStringToULONG
ExpTranslateHexStringToULONGLONG
ExpTranslateNtPath
ExpTranslateSymbolicLink
ExpTryAcquireFannedOutPushLockExclusive
ExpTryAcquireFannedOutPushLockShared
ExpTryAcquireResourceExclusive
ExpTryAcquireResourceShared
ExpTryAcquireSpinLockExclusiveAtDpcLevelInstrumented
ExpTryAcquireSpinLockShared
ExpTryAcquireSpinLockSharedAtDpcLevelInstrumented
ExpTryConvertSharedSpinLockExclusiveInstrumented
ExpTryConvertSharedToExclusiveLite
ExpTryEnterWorkerFactoryAwayMode
ExpTryExpandAutoExpandPushLock
ExpTryQueueWorkItem
ExpTryToAcquireResourceExclusiveLite
ExpTypeToPriority
ExpUnblockPushLock
ExpUnicodeStringToNonpagedWStr
ExpUnlockCallbackListExclusive
ExpUnlockCallbackListShared
ExpUnlockHandleTableExclusive
ExpUpdateComPlusPackage
ExpUpdateDebugInfo
ExpUpdateLockWordForRelease
ExpUpdateProductSuiteTypeInRegistry
ExpUpdateTimerConfiguration
ExpUpdateTimerConfigurationWorker
ExpUpdateTimerResolution
ExpUuidGetValues
ExpUuidLoadSequenceNumber
ExpUuidSaveSequenceNumber
ExpUuidSaveSequenceNumberIf
ExpValidateWorkItem
ExpVerifyCallbackResult
ExpVerifyFilePath
ExpVerifyWindowsOsOptions
ExpWaitForBootDevices
ExpWaitForFastResource
ExpWaitForResource
ExpWaitForSpinLockExclusiveAndAcquire
ExpWaitForSpinLockSharedAndAcquire
ExpWakePushLock
ExpWin32CloseProcedure
ExpWin32DeleteProcedure
ExpWin32Initialization
ExpWin32OkayToCloseProcedure
ExpWin32OpenProcedure
ExpWin32ParseProcedure
ExpWnfAcquirePermanentDataStoreHandle
ExpWnfAcquireSubscriptionByName
ExpWnfAcquireSubscriptionNameInstance
ExpWnfAllocateNextPersistentNameSequence
ExpWnfAllocateScopeInstance
ExpWnfAllocateScopeMap
ExpWnfCaptureScopeInstanceId
ExpWnfCheckCallerAccess
ExpWnfCheckCrossScopeAccess
ExpWnfCompleteThreadSubscriptions
ExpWnfComposeValueName
ExpWnfCreateNameInstance
ExpWnfCreateProcessContext
ExpWnfDeleteNameInstance
ExpWnfDeleteNameInstanceCallback
ExpWnfDeletePermanentName
ExpWnfDeletePermanentStateData
ExpWnfDeleteProcessContext
ExpWnfDeleteScopeById
ExpWnfDeleteScopeInstances
ExpWnfDeleteStateData
ExpWnfDeleteSubscription
ExpWnfDeliverThreadNotifications
ExpWnfDestroyPermanentDataStore
ExpWnfDispatchKernelSubscription
ExpWnfEnumeratePermanentDataStoreHandles
ExpWnfEnumerateScopeInstances
ExpWnfFindScopeInstance
ExpWnfFindStateName
ExpWnfFreeScopeInstance
ExpWnfGenerateStateName
ExpWnfGetCurrentScopeInstance
ExpWnfGetNameStoreRegistryRoot
ExpWnfGetPermanentDataStore
ExpWnfGetPermanentDataStoreHandleByScopeId
ExpWnfGetPermanentPerUserDataStoreHandle
ExpWnfInsertSubscriptionInPendingQueue
ExpWnfInvalidateDataStores
ExpWnfLookupNameInstance
ExpWnfLookupPermanentName
ExpWnfNotifyNameSubscribers
ExpWnfNotifySubscription
ExpWnfPopulateStateData
ExpWnfPopulateStateDataRemoteCallback
ExpWnfQueryCurrentUserSID
ExpWnfReadStateData
ExpWnfRegisterPermanentName
ExpWnfReleaseCapturedScopeInstanceId
ExpWnfResolveScopeInstance
ExpWnfSpecializeSecurityDescriptor
ExpWnfStartKernelDispatcher
ExpWnfSubscribeNameInstance
ExpWnfSubscribeWnfStateChange
ExpWnfUpdateSubscription
ExpWnfValidateKernelCallbackEnvironment
ExpWnfValidatePubSubPreconditions
ExpWnfWorkItemRoutine
ExpWnfWriteStateData
ExpWorkQueueDestroy
ExpWorkQueueInitialize
ExpWorkQueueManagerInitialize
ExpWorkQueueManagerReaperTimer
ExpWorkQueueManagerStart
ExpWorkQueueManagerThread
ExpWorkerFactoryCheckCreate
ExpWorkerFactoryCompletionPacketRoutine
ExpWorkerFactoryCreateThread
ExpWorkerFactoryDeferredThreadCreation
ExpWorkerFactoryFinishDeferredWork
ExpWorkerFactoryInitialization
ExpWorkerFactoryManagerThread
ExpWorkerFactoryWantsToCreate
ExpWorkerInitialization
ExpWorkerThread
ExpWriteTimeZoneBias
ExpressionConvertToString
ExtEnvAllocateMemory
ExtEnvAllocatePhysicalMemory
ExtEnvClearBits
ExtEnvCriticalFailure
ExtEnvFreeMemory
ExtEnvFreePhysicalMemory
ExtEnvInitializeBitMap
ExtEnvInitializeSpinLock
ExtEnvRegisterIommu
ExtEnvSetVpptTarget
FContainCallBackAce
FadePalette
Feature_1428755768__private_IsEnabledDeviceUsageNoInline
Feature_1428755768__private_IsEnabledFallback
Feature_2068400441__private_IsEnabledDeviceUsageNoInline
Feature_2068400441__private_IsEnabledFallback
Feature_2382718267__private_IsEnabledDeviceUsageNoInline
Feature_2382718267__private_IsEnabledFallback
Feature_2723316028__private_IsEnabledDeviceUsageNoInline
Feature_2723316028__private_IsEnabledFallback
Feature_3462037821__private_IsEnabledDeviceUsageNoInline
Feature_3462037821__private_IsEnabledFallback
Feature_3840312638__private_IsEnabledDeviceUsageNoInline
Feature_3840312638__private_IsEnabledFallback
Feature_AggressiveInputSuppression__private_IsEnabledPreCheck
Feature_Arm64XMatching__private_IsEnabledDeviceUsageNoInline
Feature_Arm64XMatching__private_IsEnabledFallback
Feature_CallbackLookasideEarlyInit__private_IsEnabledDeviceUsageNoInline
Feature_CallbackLookasideEarlyInit__private_IsEnabledFallback
Feature_CcFlushNPurge_TrimFailure__private_IsEnabledDeviceUsageNoInline
Feature_CcFlushNPurge_TrimFailure__private_IsEnabledFallback
Feature_CcPartitionExit_DrainDelPVCM__private_IsEnabledDeviceUsageNoInline
Feature_CcPartitionExit_DrainDelPVCM__private_IsEnabledFallback
Feature_CcSectionLeak__private_IsEnabledDeviceUsageNoInline
Feature_CcSectionLeak__private_IsEnabledFallback
Feature_CovSampProcContextAlignment__private_IsEnabledDeviceUsageNoInline
Feature_CovSampProcContextAlignment__private_IsEnabledFallback
Feature_CvmDmaBouncing__private_IsEnabledDeviceUsageNoInline
Feature_CvmDmaBouncing__private_IsEnabledFallback
Feature_DisableEarlyIbpbOptimizationOnAmd__private_IsEnabledDeviceUsageNoInline
Feature_DisableEarlyIbpbOptimizationOnAmd__private_IsEnabledFallback
Feature_ETWStackExpandedStackwalks__private_IsEnabledDeviceUsageNoInline
Feature_ETWStackExpandedStackwalks__private_IsEnabledFallback
Feature_EcoModeEnergySaver__private_ReportDeviceUsage
Feature_ForegroundBoost_ApiRemoval__private_IsEnabledDeviceUsageNoInline
Feature_ForegroundBoost_ApiRemoval__private_IsEnabledFallback
Feature_ForegroundBoost_ApiRemoval__private_IsEnabledPreCheck
Feature_HaltOnAddress_Barrier__private_ReportDeviceUsage
Feature_HaltOnAddress_QueuedSpinLock__private_ReportDeviceUsage
Feature_HeteroRescheduleFixes__private_IsEnabledFallback
Feature_HeteroRescheduleFixes__private_IsEnabledNoReportingNoInline
Feature_IdleSearchImprovements__private_IsEnabledFallback
Feature_IdleSearchImprovements__private_IsEnabledNoReportingNoInline
Feature_IoInvalidateDeviceState_Unconditional__private_ReportDeviceUsage
Feature_KernelPnP_DeviceConfigStaleDriverKey__private_IsEnabledDeviceUsageNoInline
Feature_KernelPnP_DeviceConfigStaleDriverKey__private_IsEnabledFallback
Feature_KernelPnP_SwDeviceAttributes__private_IsEnabledDeviceUsageNoInline
Feature_KernelPnP_SwDeviceAttributes__private_IsEnabledFallback
Feature_Livedump_PPL_UM_Fix__private_IsEnabledDeviceUsageNoInline
Feature_Livedump_PPL_UM_Fix__private_IsEnabledFallback
Feature_LockFreeIdleMasks__private_IsEnabledFallback
Feature_LockFreeIdleMasks__private_IsEnabledNoReportingNoInline
Feature_MachineHiveCache__private_ReportDeviceUsage
Feature_NewWpsAssignmentAlgorithm__private_ReportDeviceUsage
Feature_NpuProcessAttribution__private_IsEnabledDeviceUsageNoInline
Feature_NpuProcessAttribution__private_IsEnabledFallback
Feature_OpocksAndMappedSections__private_ReportDeviceUsage
Feature_PdcClientPnpActionQueue__private_ReportDeviceUsage
Feature_PdcClientPnpEventQueue__private_IsEnabledPreCheck
Feature_PrefetchQueueWorkerProactivelyForProcessExit__private_IsEnabledDeviceUsageNoInline
Feature_PrefetchQueueWorkerProactivelyForProcessExit__private_IsEnabledFallback
Feature_PreventInterfaceChangeConcurrentNotify__private_ReportDeviceUsage
Feature_RestrictKernelAddressLeaks__private_IsEnabledDeviceUsageNoInline
Feature_RestrictKernelAddressLeaks__private_IsEnabledFallback
Feature_SdbValidateRootTagsOnOpen__private_IsEnabledDeviceUsageNoInline
Feature_SdbValidateRootTagsOnOpen__private_IsEnabledFallback
Feature_Servicing_AutoBoostEtwEventingFixes__private_IsEnabledDeviceOpportunityNoInline
Feature_Servicing_AutoBoostEtwEventingFixes__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_AutoBoostEtwEventingFixes__private_IsEnabledFallback
Feature_Servicing_AutoBoostEtwEventingFixes__private_IsEnabledNoReportingNoInline
Feature_Servicing_AutoBoostEtwEventingFixes__private_IsEnabledOtherReporting
Feature_Servicing_AutoBoostEtwEventingFixes__private_IsEnabledPreCheckWithReporting
Feature_Servicing_AutoBoostEtwEventingFixes__private_IsEnabledWithReporting
Feature_Servicing_BatteryTripPointFix__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_BatteryTripPointFix__private_IsEnabledFallback
Feature_Servicing_DeadlineQosReschedule__private_ReportDeviceUsage
Feature_Servicing_DeadlineQosReschedule__private_ReportUsageFallback
Feature_Servicing_DisableContainmentOnForceParkHint__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_DisableContainmentOnForceParkHint__private_IsEnabledFallback
Feature_Servicing_EtwLostEventsFlags__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_EtwLostEventsFlags__private_IsEnabledFallback
Feature_Servicing_HiberResetPolicyFix__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_HiberResetPolicyFix__private_IsEnabledFallback
Feature_Servicing_IdealProcessorEventOutsideLocks__private_ReportDeviceUsage
Feature_Servicing_IdealProcessorEventOutsideLocks__private_ReportUsageFallback
Feature_Servicing_KernelArm64FpLrContextControl__private_IsEnabledFallback
Feature_Servicing_KernelArm64FpLrContextControl__private_IsEnabledNoReportingNoInline
Feature_Servicing_KernelLargeDemoteLocalLargePageInPortions__private_IsEnabledFallback
Feature_Servicing_KernelLargeDemoteLocalLargePageInPortions__private_IsEnabledNoReportingNoInline
Feature_Servicing_Kernel_ClockTickIdleEstimateFix__private_IsEnabledFallback
Feature_Servicing_Kernel_ClockTickIdleEstimateFix__private_IsEnabledNoReportingNoInline
Feature_Servicing_MercuryNewSdbTagsForBackup__private_IsEnabledPreCheck
Feature_Servicing_Mm_DbgMemCopy__private_IsEnabledFallback
Feature_Servicing_Mm_DbgMemCopy__private_IsEnabledNoReportingNoInline
Feature_Servicing_Mm_HugeZeroContextLeak__private_IsEnabledFallback
Feature_Servicing_Mm_HugeZeroContextLeak__private_IsEnabledNoReportingNoInline
Feature_Servicing_Mm_IoPfn__private_IsEnabledFallback
Feature_Servicing_Mm_IoPfn__private_IsEnabledNoReportingNoInline
Feature_Servicing_Mm_ZeroingBelow4GB__private_IsEnabledFallback
Feature_Servicing_Mm_ZeroingBelow4GB__private_IsEnabledNoReportingNoInline
Feature_Servicing_NoIdleCpuWake__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_NoIdleCpuWake__private_IsEnabledFallback
Feature_Servicing_PoShutdownWatchdog__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_PoShutdownWatchdog__private_IsEnabledFallback
Feature_Servicing_PopBsdFlush__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_PopBsdFlush__private_IsEnabledFallback
Feature_Servicing_PopResetOnHiber__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_PopResetOnHiber__private_IsEnabledFallback
Feature_Servicing_RelaxAgressiveInputSuppression__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_RelaxAgressiveInputSuppression__private_IsEnabledFallback
Feature_Servicing_RsAudio__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_RsAudio__private_IsEnabledFallback
Feature_Servicing_SMBFileAbeStatusCacheFix__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_SMBFileAbeStatusCacheFix__private_IsEnabledFallback
Feature_Servicing_SgxOutOfPagesBugcheck__private_IsEnabledFallback
Feature_Servicing_SgxOutOfPagesBugcheck__private_IsEnabledNoReportingNoInline
Feature_Servicing_StandbyAudioPolicy_Win32Compat__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_StandbyAudioPolicy_Win32Compat__private_IsEnabledFallback
Feature_Servicing_TopologyUnparkPolicy__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_TopologyUnparkPolicy__private_IsEnabledFallback
Feature_Servicing_WpsContaintmentFixSoftParking__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_WpsContaintmentFixSoftParking__private_IsEnabledFallback
Feature_Servicing_WpsHintsForContainment__private_IsEnabledDeviceUsageNoInline
Feature_Servicing_WpsHintsForContainment__private_IsEnabledFallback
Feature_ShortThreadQuantum__private_ReportDeviceUsage
Feature_SleepStudySlimControlEtl__private_ReportDeviceUsage
Feature_SmartSuspend__private_GetVariant
Feature_StandbyAudioPolicyEnabled__private_ReportDeviceUsage
Feature_TriageDumpDataExtension__private_IsEnabledDeviceUsageNoInline
Feature_TriageDumpDataExtension__private_IsEnabledFallback
Feature_UC_ConfigFix__private_IsEnabledDeviceUsageNoInline
Feature_UC_ConfigFix__private_IsEnabledFallback
Feature_UpperThresholdInheritance__private_ReportDeviceUsage
Feature_UserPresenceThrottling__private_IsEnabledDeviceUsageNoInline
Feature_UserPresenceThrottling__private_IsEnabledFallback
Feature_VHDAutoAttachOnBoot__private_IsEnabledPreCheck
Feature_VReg_DenyNSNRenames__private_IsEnabledDeviceUsageNoInline
Feature_VReg_DenyNSNRenames__private_IsEnabledFallback
FilterConvertToString
FilterEvalImpliedAnd
FilterEvalStrict
FinalizeBootLogo
FindBitmapResource
FindEmailAt
FindFilterOperatorClose
FindLabelEnd
FindNodeOrParent
FioFwReadBytesAtOffset
FioFwReadUlongAtOffset
FioFwReadUshortAtOffset
FirstEntrySList
FopFreeFontData
FopFreeMappingTable
FopGetTableOffsetAndSize
FopInitializeFonts
FopReadCmapTable
FopReadMappingTable
FopReadNamingTable
FopValidateFontNameTable
FreeOperandValue
FsFilterAllocateCompletionStack
FsFilterCtrlFree
FsFilterCtrlInit
FsFilterInit
FsFilterPerformCallbacks
FsFilterPerformCompletionCallbacks
FsRtlAcknowledgeEcp
FsRtlAcquireAutoExpandPushLockExclusive
FsRtlAcquireAutoExpandPushLockShared
FsRtlAcquireEofLock
FsRtlAcquireFileExclusive
FsRtlAcquireFileExclusiveCommon
FsRtlAcquireFileForCcFlushEx
FsRtlAcquireFileForModWriteEx
FsRtlAcquireHeaderMutex
FsRtlAcquirePushLockExclusive
FsRtlAcquirePushLockShared
FsRtlAcquireToCreateMappedSection
FsRtlAddBaseMcbEntry
FsRtlAddBaseMcbEntryEx
FsRtlAddDiskIOCounterInstance
FsRtlAddEntry
FsRtlAddLargeMcbEntry
FsRtlAddMcbEntry
FsRtlAddToTunnelCache
FsRtlAddToTunnelCacheEx
FsRtlAllocateAePushLock
FsRtlAllocateExtraCreateParameter
FsRtlAllocateExtraCreateParameterFromLookasideList
FsRtlAllocateExtraCreateParameterList
FsRtlAllocateFileLock
FsRtlAllocatePool
FsRtlAllocatePoolWithQuota
FsRtlAllocatePoolWithQuotaTag
FsRtlAllocatePoolWithTag
FsRtlAllocateResource
FsRtlAreThereCurrentOrInProgressFileLocks
FsRtlAreThereWaitingFileLocks
FsRtlAreVolumeStartupApplicationsComplete
FsRtlBalanceReads
FsRtlCancelNotify
FsRtlCancellableWaitForMultipleObjects
FsRtlCancellableWaitForSingleObject
FsRtlChangeBackingFileObject
FsRtlCheckFileSystemFilterCallbacksRegistered
FsRtlCheckLockForOplockRequest
FsRtlCheckLockForReadAccess
FsRtlCheckLockForWriteAccess
FsRtlCheckNoExclusiveConflict
FsRtlCheckNoSharedConflict
FsRtlCheckNotifyForDelete
FsRtlCheckNotifyForDeleteLite
FsRtlCheckOplock
FsRtlCheckOplockEx
FsRtlCheckOplockEx2
FsRtlCheckOplockForFsFilterCallback
FsRtlCheckUpperOplock
FsRtlCompleteLockIrpReal
FsRtlCopyRead
FsRtlCopyWrite
FsRtlCreateSectionForDataScan
FsRtlCurrentBatchOplock
FsRtlCurrentOplock
FsRtlCurrentOplockH
FsRtlDedupChangeInit
FsRtlDedupChangeLogOverwriteOrFree
FsRtlDedupChangeLogWrite
FsRtlDedupChangeUninit
FsRtlDeleteExtraCreateParameterLookasideList
FsRtlDeleteKeyFromTunnelCache
FsRtlDeleteTunnelCache
FsRtlDeregisterUncProvider
FsRtlDisallowLegacyFilterOnDevice
FsRtlDiskIOCounterSetCallback
FsRtlDismountComplete
FsRtlDissectDbcs
FsRtlDoesDbcsContainWildCards
FsRtlEmptyFreePoolList
FsRtlFastCheckLockForRead
FsRtlFastCheckLockForWrite
FsRtlFastUnlockAll
FsRtlFastUnlockAllByKey
FsRtlFastUnlockSingle
FsRtlFastUnlockSingleExclusive
FsRtlFastUnlockSingleShared
FsRtlFindExtraCreateParameter
FsRtlFindFirstOverlapInNode
FsRtlFindFirstOverlappingExclusiveNode
FsRtlFindFirstOverlappingSharedNode
FsRtlFindInTunnelCache
FsRtlFindInTunnelCacheEx
FsRtlFindLargeIndex
FsRtlFreeAePushLock
FsRtlFreeExtraCreateParameter
FsRtlFreeExtraCreateParameterList
FsRtlFreeFileLock
FsRtlFreeTunnelNode
FsRtlGetCompatibilityModeValue
FsRtlGetCurrentProcessLoaderList
FsRtlGetDirectImageOriginalBase
FsRtlGetEcpListFromIrp
FsRtlGetFileExtents
FsRtlGetFileNameInformation
FsRtlGetFileSize
FsRtlGetIoAtEof
FsRtlGetMarkHandleInfo
FsRtlGetNextBaseMcbEntry
FsRtlGetNextExtraCreateParameter
FsRtlGetNextFileLock
FsRtlGetNextLargeMcbEntry
FsRtlGetNextMcbEntry
FsRtlGetSectorSizeInformation
FsRtlGetSupportedFeatures
FsRtlGetTunnelParameterValue
FsRtlGetVirtualDiskNestingLevel
FsRtlHeatInit
FsRtlHeatLogIo
FsRtlHeatLogTierMove
FsRtlHeatUninit
FsRtlIncrementCcFastMdlReadWait
FsRtlIncrementCcFastReadNoWait
FsRtlIncrementCcFastReadNotPossible
FsRtlIncrementCcFastReadResourceMiss
FsRtlIncrementCcFastReadWait
FsRtlInitExtraCreateParameterLookasideList
FsRtlInitSystem
FsRtlInitializeBaseMcb
FsRtlInitializeBaseMcbEx
FsRtlInitializeDedupChange
FsRtlInitializeEofLock
FsRtlInitializeExtraCreateParameter
FsRtlInitializeExtraCreateParameterList
FsRtlInitializeFileLock
FsRtlInitializeFileLocks
FsRtlInitializeLargeMcb
FsRtlInitializeLargeMcbs
FsRtlInitializeMcb
FsRtlInitializeOplock
FsRtlInitializeSmssEvent
FsRtlInitializeTieringHeat
FsRtlInitializeTunnelCache
FsRtlInitializeTunnels
FsRtlInitializeWorkerThread
FsRtlInsertExtraCreateParameter
FsRtlInsertPerFileContext
FsRtlInsertPerFileContextWithReserve
FsRtlInsertPerFileObjectContext
FsRtlInsertPerStreamContext
FsRtlIs32BitProcess
FsRtlIsDaxVolume
FsRtlIsDbcsInExpression
FsRtlIsEcpAcknowledged
FsRtlIsEcpFromUserMode
FsRtlIsExtentDangling
FsRtlIsFatDbcsLegal
FsRtlIsHpfsDbcsLegal
FsRtlIsMobileOS
FsRtlIsNonEmptyDirectoryReparsePointAllowed
FsRtlIsNotifyOnList
FsRtlIsNtstatusExpected
FsRtlIsPagingFile
FsRtlIsSystemPagingFile
FsRtlIsTotalDeviceFailure
FsRtlIssueDeviceIoControl
FsRtlIssueFileNotificationFsctl
FsRtlKernelFsControlFile
FsRtlLogCcFlushError
FsRtlLookupBaseMcbEntry
FsRtlLookupLargeMcbEntry
FsRtlLookupLastBaseMcbEntry
FsRtlLookupLastBaseMcbEntryAndIndex
FsRtlLookupLastLargeMcbEntry
FsRtlLookupLastLargeMcbEntryAndIndex
FsRtlLookupLastMcbEntry
FsRtlLookupMcbEntry
FsRtlLookupPerFileContext
FsRtlLookupPerFileObjectContext
FsRtlLookupPerStreamContextInternal
FsRtlMdlRead
FsRtlMdlReadComplete
FsRtlMdlReadCompleteDev
FsRtlMdlReadCompleteDevEx
FsRtlMdlReadDev
FsRtlMdlReadEx
FsRtlMdlWriteComplete
FsRtlMdlWriteCompleteDev
FsRtlMupGetProviderIdFromName
FsRtlMupGetProviderInfoFromFileObject
FsRtlNormalizeNtstatus
FsRtlNotifyChangeDirectory
FsRtlNotifyCleanup
FsRtlNotifyCleanupAll
FsRtlNotifyCleanupOneEntry
FsRtlNotifyCompleteIrp
FsRtlNotifyCompleteIrpList
FsRtlNotifyFilterChangeDirectory
FsRtlNotifyFilterChangeDirectoryLite
FsRtlNotifyFilterReportChange
FsRtlNotifyFilterReportChangeLite
FsRtlNotifyFilterReportChangeLiteEx
FsRtlNotifyFullChangeDirectory
FsRtlNotifyFullReportChange
FsRtlNotifyInitializeSync
FsRtlNotifyReportChange
FsRtlNotifySetCancelRoutine
FsRtlNotifyUninitializeSync
FsRtlNotifyUpdateBuffer
FsRtlNotifyVolumeEvent
FsRtlNotifyVolumeEventEx
FsRtlNumberOfRunsInBaseMcb
FsRtlNumberOfRunsInLargeMcb
FsRtlNumberOfRunsInMcb
FsRtlOpenFileSystemRegistryKeyFromFsGuid
FsRtlOplockBreakH
FsRtlOplockBreakH2
FsRtlOplockBreakToNone
FsRtlOplockBreakToNoneEx
FsRtlOplockFsctrl
FsRtlOplockFsctrlEx
FsRtlOplockGetAnyBreakOwnerProcess
FsRtlOplockIsFastIoPossible
FsRtlOplockIsSharedRequest
FsRtlOplockKeysEqual
FsRtlPostPagingFileStackOverflow
FsRtlPostStackOverflow
FsRtlPrepareMdlWrite
FsRtlPrepareMdlWriteDev
FsRtlPrepareMdlWriteEx
FsRtlPrepareToReuseEcp
FsRtlPrivateCancelFileLockIrp
FsRtlPrivateCheckForExclusiveLockAccess
FsRtlPrivateCheckForSharedLockAccess
FsRtlPrivateCheckWaitingLocks
FsRtlPrivateFastUnlockAll
FsRtlPrivateInitializeFileLock
FsRtlPrivateInsertExclusiveLock
FsRtlPrivateInsertLock
FsRtlPrivateInsertSharedLock
FsRtlPrivateLock
FsRtlPrivateRemoveLock
FsRtlPrivateResetLowestLockOffset
FsRtlProcessFileLock
FsRtlPruneTunnelCache
FsRtlQueryCachedVdl
FsRtlQueryInformationFile
FsRtlQueryKernelEaFile
FsRtlQueryMaximumVirtualDiskNestingLevel
FsRtlQueryOpen
FsRtlRegisterFileSystemFilterCallbacks
FsRtlRegisterFltMgrCalls
FsRtlRegisterMupCalls
FsRtlRegisterUncProvider
FsRtlRegisterUncProviderEx
FsRtlRegisterUncProviderEx2
FsRtlReleaseAutoExpandPushLockExclusive
FsRtlReleaseAutoExpandPushLockShared
FsRtlReleaseEofLock
FsRtlReleaseFile
FsRtlReleaseFileForCcFlush
FsRtlReleaseFileForModWrite
FsRtlReleaseFileNameInformation
FsRtlReleaseHeaderMutex
FsRtlReleasePushLock
FsRtlRemoveBaseMcbEntry
FsRtlRemoveDotsFromPath
FsRtlRemoveExtraCreateParameter
FsRtlRemoveLargeEntry
FsRtlRemoveLargeMcbEntry
FsRtlRemoveMcbEntry
FsRtlRemoveNodeFromTunnel
FsRtlRemovePerFileContext
FsRtlRemovePerFileContextWithReserve
FsRtlRemovePerFileObjectContext
FsRtlRemovePerStreamContext
FsRtlResetBaseMcb
FsRtlResetLargeMcb
FsRtlSendModernAppTermination
FsRtlSetDriverBacking
FsRtlSetEcpListIntoIrp
FsRtlSetFileSize
FsRtlSetKernelEaFile
FsRtlSplitBaseMcb
FsRtlSplitLargeMcb
FsRtlSplitLocks
FsRtlStackOverflowRead
FsRtlSyncVolumes
FsRtlTeardownPerFileContexts
FsRtlTeardownPerStreamContexts
FsRtlTruncateBaseMcb
FsRtlTruncateLargeMcb
FsRtlTruncateMcb
FsRtlTruncateSmallMcb
FsRtlTryToAcquireHeaderMutex
FsRtlUninitializeBaseMcb
FsRtlUninitializeFileLock
FsRtlUninitializeLargeMcb
FsRtlUninitializeMcb
FsRtlUninitializeOplock
FsRtlUninitializeSmallMcb
FsRtlUpdateDiskCounters
FsRtlUpperOplockFsctrl
FsRtlValidateReparsePointBuffer
FsRtlVolumeDeviceToCorrelationId
FsRtlWaitForSmssEvent
FsRtlWorkerThread
FsRtlpAcknowledgeOplockBreak
FsRtlpAcknowledgeOplockBreakByCacheFlags
FsRtlpAllocateOplock
FsRtlpAttachOplockKey
FsRtlpCallerIsAtomicRequestor
FsRtlpCancelExclusiveIrp
FsRtlpCancelOplockRHIrp
FsRtlpCancelReadOnlyOplockIrp
FsRtlpCancelWaitingIrp
FsRtlpCheckSharingAgainstOplockOwner
FsRtlpCleanupEcps
FsRtlpClearOwner
FsRtlpComputeShareableOplockState
FsRtlpDedupChangeEventsControlCallbackV2
FsRtlpDedupChangeQueryValueKey
FsRtlpDedupChangeRegisterVolume
FsRtlpDoBoost
FsRtlpExclusiveIrpCancelRoutine
FsRtlpFreeMdlChain
FsRtlpGenericCompletion
FsRtlpGetMaxVirtualDiskNestingLevel
FsRtlpGrantAnyOplockFromExclusive
FsRtlpHeatRegisterVolume
FsRtlpHeatUnregisterVolume
FsRtlpModifyThreadPriorities
FsRtlpNotifyOplockBreakComplete
FsRtlpOpBatchBreakClosePending
FsRtlpOpenDev
FsRtlpOplockBreakByCacheFlags
FsRtlpOplockBreakNotify
FsRtlpOplockBreakToII
FsRtlpOplockBreakToNone
FsRtlpOplockCleanup
FsRtlpOplockDequeueRH
FsRtlpOplockEnqueueRH
FsRtlpOplockFsctrlInternal
FsRtlpOplockKeysEqual
FsRtlpOplockRHIrpCancelRoutine
FsRtlpOplockSendModernAppTermination
FsRtlpOplockStoreKeyForDeleteOperation
FsRtlpOplockUpperLowerCompatible
FsRtlpOplockWaitCompleteRoutine
FsRtlpPostStackOverflow
FsRtlpPrepareExtraCreateParametersForCreate
FsRtlpQueryValueKey
FsRtlpReadOnlyOplockIrpCancelRoutine
FsRtlpRegisterProviderWithMUP
FsRtlpRegisterUncProvider
FsRtlpReleaseIrpsWaitingForRH
FsRtlpRemoveAndCompleteRHIrp
FsRtlpRemoveAndCompleteReadOnlyIrp
FsRtlpRemoveAndCompleteWaitingIrp
FsRtlpRequestExclusiveOplock
FsRtlpRequestShareableOplock
FsRtlpTieringHeatEventsControlCallbackV2
FsRtlpWaitForIoAtEof
FsRtlpWaitOnIrp
FsRtlpWaitingIrpCancelRoutine
GetAttributeName
GetBinaryOperandLen
GetBootSystemTime
GetConditionToken
GetCpuManufacturer
GetDigitFromChar
GetDigitFromChar2
GetFlags
GetGlobalizationUserModelType
GetMicrocodePatchData
GetNextNoneWhiteSpace
GetOperandValue
GetOperatorIndexByName
GetOperatorIndexByToken
GetPrintableAttributeName
GetPrintableOperandValue
GetPropertyFromPropArray
GetStringOperandValue
GetUTF32
GetValueType
GxpAdjustRectangleToFrameBuffer
GxpBitsToBytes
GxpGetRotatedPixelOffset
GxpMatchPaletteColor
GxpReadFrameBufferPixels
GxpWriteFrameBufferPixels
HalAcpiEmCheckOperator
HalAcpiGetAllTablesDispatch
HalAcpiGetFacsMappingDispatch
HalAcpiGetRsdpDispatch
HalAcpiGetTable
HalAcpiGetTableDispatch
HalAcpiGetTableEx
HalAcquireDisplayOwnership
HalAdjustResourceList
HalAllProcessorsStarted
HalAllocateAdapterChannel
HalAllocateAdapterChannelEx
HalAllocateAdapterChannelV2
HalAllocateCommonBuffer
HalAllocateCommonBufferDmaThin
HalAllocateCommonBufferDmaThinEx
HalAllocateCommonBufferDmarThin
HalAllocateCommonBufferDmarThinEx
HalAllocateCommonBufferExV2
HalAllocateCommonBufferExV3
HalAllocateCommonBufferV2
HalAllocateCommonBufferV3
HalAllocateCommonBufferVector
HalAllocateCommonBufferWithBounds
HalAllocateCommonBufferWithBoundsDmaThin
HalAllocateCommonBufferWithBoundsDmarThin
HalAllocateCrashDumpRegisters
HalAllocateDomainCommonBuffer
HalAllocateDomainCommonBufferDmaThin
HalAllocateDomainCommonBufferDmarThin
HalAllocateHardwareCounters
HalAssignSlotResources
HalBugCheckSystem
HalBuildMdlFromScatterGatherListDmaThin
HalBuildMdlFromScatterGatherListV2
HalBuildMdlFromScatterGatherListV3
HalBuildScatterGatherListDmaThin
HalBuildScatterGatherListDmaThinEx
HalBuildScatterGatherListDmarThin
HalBuildScatterGatherListDmarThinEx
HalBuildScatterGatherListEx
HalBuildScatterGatherListV2
HalBuildScatterGatherListV3
HalCalculateScatterGatherListSizeV2
HalCalculateScatterGatherListSizeV3
HalCalibratePerformanceCounter
HalCancelAdapterChannel
HalCancelAdapterChannelDmaThin
HalCancelAdapterChannelDmarThin
HalCancelMappedTransfer
HalClearSoftwareInterrupt
HalConfigureAdapterChannel
HalConvertDeviceIdtToIrql
HalCreateCommonBufferFromMdl
HalCreateCommonBufferFromMdlDmaThin
HalCreateCommonBufferFromMdlDmarThin
HalCvmDmaEnabled
HalDisableInterrupt
HalDisplayString
HalDmaAllocateCrashDumpRegistersEx
HalDmaFreeCrashDumpRegistersEx
HalEfiGetTime
HalEfiResetSystem
HalEfiSetEnvironmentVariable
HalEfiSetTime
HalEfiUpdateCapsule
HalEnableInterrupt
HalEnumerateEnvironmentVariablesEx
HalEnumerateProcessors
HalExamineMBR
HalFlushAdapterBuffersEx
HalFlushCommonBuffer
HalFlushDmaBuffer
HalFreeAdapterObject
HalFreeCommonBuffer
HalFreeCommonBufferDmaThin
HalFreeCommonBufferDmarThin
HalFreeCommonBufferFromVector
HalFreeCommonBufferV2
HalFreeCommonBufferV3
HalFreeCommonBufferVector
HalFreeHardwareCounters
HalGetAdapter
HalGetAdapterV2
HalGetAdapterV3
HalGetBusData
HalGetBusDataByOffset
HalGetCommonBufferFromVectorByIndex
HalGetDmaAdapterInfo
HalGetDmaAlignment
HalGetDmaDomain
HalGetDmaTransferInfo
HalGetDmaTransferInfoInternal
HalGetEnvironmentVariable
HalGetEnvironmentVariableEx
HalGetInterruptTargetInformation
HalGetInterruptVector
HalGetMemoryCachingRequirements
HalGetMessageRoutingInfo
HalGetProcessorIdByNtNumber
HalGetScatterGatherList
HalGetScatterGatherListDmaThin
HalGetScatterGatherListDmaThinEx
HalGetScatterGatherListDmarThin
HalGetScatterGatherListDmarThinEx
HalGetScatterGatherListEx
HalGetVectorInput
HalHandleMcheck
HalHandleNMI
HalInitSystem
HalInitializeBios
HalInitializeDmaTransferContext
HalInitializeOnResume
HalInitializeProcessor
HalIsHyperThreadingEnabled
HalJoinDmaDomain
HalLeaveDmaDomain
HalMakeBeep
HalMapIoSpace
HalMapTransferEx
HalMatchAcpiCreatorRevision
HalMatchAcpiFADTBootArch
HalMatchAcpiOemId
HalMatchAcpiOemRevision
HalMatchAcpiOemTableId
HalMatchAcpiRevision
HalPerformEndOfInterrupt
HalPnpGetDmaAdapter
HalPnpInterfaceNullReference
HalProcessorIdle
HalPutDmaAdapter
HalPutScatterGatherList
HalPutScatterGatherListDmaThin
HalPutScatterGatherListDmarThin
HalPutScatterGatherListV2
HalPutScatterGatherListV3
HalQueryDisplayParameters
HalQueryEnvironmentVariableInfoEx
HalQueryMaximumProcessorCount
HalQueryRealTimeClock
HalReadBootRegister
HalReadDmaCounter
HalReadDmaCounterV2
HalReadDmaCounterV3
HalRealAllocateAdapterChannelV2
HalRealAllocateAdapterChannelV3
HalRegisterDynamicProcessor
HalRegisterErrataCallbacks
HalRegisterPermanentAddressUsage
HalReportResourceUsage
HalRequestClockInterrupt
HalRequestDeferredRecoveryServiceInterrupt
HalRequestIpi
HalRequestIpiSpecifyVector
HalRequestSoftwareInterrupt
HalReturnToFirmware
HalSendNMI
HalSendSoftwareInterrupt
HalSetBusData
HalSetBusDataByOffset
HalSetDisplayParameters
HalSetEnvironmentVariable
HalSetEnvironmentVariableEx
HalSetProfileInterval
HalSetRealTimeClock
HalSetTimerProblem
HalSocGetAcpiTable
HalSocRequestApi
HalSocRequestConfigurationData
HalStartDynamicProcessor
HalStartNextProcessor
HalStartProfileInterrupt
HalStopProfileInterrupt
HalSystemVectorDispatchEntry
HalTranslateBusAddress
HalUnmapIoSpace
HalUpdateTimerCapabilities
HalWheaUpdateCmciPolicy
HalWriteBootRegister
HalacpIrqTranslatorDereference
HalacpiIrqTranslateResourceRequirementsIsa
HalacpiIrqTranslateResourcesIsa
HalacpiIrqTranslatorReference
HaliAcpiMachineStateInit
HaliAcpiQueryFlags
HaliAcpiSleep
HaliAcpiTimerCarry
HaliAddInterruptRemapping
HaliGetDmaAdapter
HaliGetInterruptTranslator
HaliHaltSystem
HaliHandlePCIConfigSpaceAccess
HaliInitPnpDriver
HaliInitPowerManagement
HaliInitializePlatformDebugTriggers
HaliLocateHiberRanges
HaliPciInterfaceReadConfig
HaliPciInterfaceWriteConfig
HaliQuerySystemInformation
HaliRemoveInterruptRemapping
HaliRunPlatformDebugTriggers
HaliSaveProcessorContextAndSleep
HaliSetMaxLegacyPciBusNumber
HaliSetPciErrorHandlerCallback
HaliSetSystemInformation
HaliSetWakeAlarm
HaliWheaInitProcessorGenericSection
HalpAcpiAccessSecureAddress
HalpAcpiAllocateMemory
HalpAcpiAoacCapable
HalpAcpiCacheOverrideTables
HalpAcpiCacheTable
HalpAcpiCalculateCacheSizeForOverrideTables
HalpAcpiCheckAndMapTable
HalpAcpiCopyBiosTable
HalpAcpiDetectMachineSpecificActions
HalpAcpiDetectPiix4
HalpAcpiDetectPiix4Work
HalpAcpiFallbackOnLegacyConfigMethod
HalpAcpiFindRsdp
HalpAcpiFlushCache
HalpAcpiGetAllTables
HalpAcpiGetAllTablesWork
HalpAcpiGetCachedTable
HalpAcpiGetFacsMapping
HalpAcpiGetPrmCache
HalpAcpiGetRsdt
HalpAcpiGetTable
HalpAcpiGetTableFromBios
HalpAcpiGetTableWork
HalpAcpiIBMExaMatch
HalpAcpiIBMVigilMatch
HalpAcpiInitDiscard
HalpAcpiInitSystem
HalpAcpiInitializePmRegisters
HalpAcpiInvokePrmFwHandler
HalpAcpiIsCachedTableCompromised
HalpAcpiPmRegisterAvailable
HalpAcpiPmRegisterRead
HalpAcpiPmRegisterReadPciConfigSpace
HalpAcpiPmRegisterReadPort
HalpAcpiPmRegisterReadRegister
HalpAcpiPmRegisterWrite
HalpAcpiPmRegisterWritePciConfigSpace
HalpAcpiPmRegisterWritePort
HalpAcpiPmRegisterWriteRegister
HalpAcpiPopulateTableCache
HalpAcpiPopulateTableCacheWork
HalpAcpiPostSleep
HalpAcpiPreSleep
HalpAcpiPrmCacheInit
HalpAcpiPrmFwBufferInit
HalpAcpiRealTimeToUtcTime
HalpAcpiSetupPmRegister
HalpAcpiSetupPmRegisterLegacy
HalpAcpiTableCacheInit
HalpAcquireCmosSpinLock
HalpAcquireCmosSpinLockAndWait
HalpAcquireDrsPool
HalpAcquireHighLevelLock
HalpAcquirePccInterface
HalpAcquirePmuAccessRequest
HalpAcquireSecondaryIcEntryExclusive
HalpAddAdapterToList
HalpAddAdapterToSystemList
HalpAddChildPdo
HalpAddDevice
HalpAddErrorEntryToPacket
HalpAddMcaToMemoryErrorSection
HalpAddMcaToProcessorGenericSection
HalpAddMcaToProcessorSpecificSection
HalpAddPrmAddressTranslationToMemoryExtIntelSection
HalpAdjustWakeSecondsDue
HalpAllocPhysicalMemory
HalpAllocPhysicalMemoryEx
HalpAllocPhysicalMemoryFromDescriptor
HalpAllocPhysicalMemoryInternal
HalpAllocateAdapterCallbackV2
HalpAllocateAdapterCallbackV3
HalpAllocateAdapterChannel
HalpAllocateCR3Root
HalpAllocateCommonBufferDmaThin
HalpAllocateCommonBufferDmarThin
HalpAllocateCommonBufferEntry
HalpAllocateCommonBufferVectorInternal
HalpAllocateDmaChannels
HalpAllocateDmaResourcesInternal
HalpAllocateDomainCommonBufferInternal
HalpAllocateEarlyPages
HalpAllocateGsivForSecondaryInterrupt
HalpAllocateHalCounters
HalpAllocateKInterrupt
HalpAllocateMapRegisters
HalpAllocateNumaConfigData
HalpAllocatePmcCounterSet
HalpAllocatePmcCounterSetEx
HalpAllocateScratchMemory
HalpApic1EndOfInterrupt
HalpApic1ReadRegister
HalpApic1WaitForIcr
HalpApic1WriteIcr
HalpApic1WriteRegister
HalpApicClearLocalUnitError
HalpApicConvertFromRte
HalpApicConvertId
HalpApicConvertToRte
HalpApicDeinitializeLocalUnit
HalpApicDescribeLines
HalpApicDescribeLocalLines
HalpApicDirectedEndOfInterrupt
HalpApicDiscover
HalpApicGenerateMessage
HalpApicGetCpuInfo
HalpApicGetLocalUnitError
HalpApicHvUpdateCallback
HalpApicInitializeIoUnit
HalpApicInitializeLocalUnit
HalpApicIsCmciImplemented
HalpApicQueryAndGetSource
HalpApicRegisterIoUnit
HalpApicReplayLocalInterrupts
HalpApicReplaySendSelfIpi
HalpApicRequestInterrupt
HalpApicSaveLocalInterrupts
HalpApicSetLineState
HalpApicSetLogicalId
HalpApicSetPriority
HalpApicSetupRegisterAccess
HalpApicStartProcessor
HalpApicTimerAcknowledgeInterrupt
HalpApicTimerArm
HalpApicTimerDiscover
HalpApicTimerInitialize
HalpApicTimerIsInvariant
HalpApicTimerQueryCounter
HalpApicTimerSetInterruptVector
HalpApicTimerStop
HalpApicWriteEndOfInterrupt
HalpApicX2EndOfInterrupt
HalpApicX2ReadRegister
HalpApicX2WaitForCommand
HalpApicX2WriteCommand
HalpApicX2WriteRegister
HalpAreDriversDmarCompatible
HalpArmAcpiWakeAlarm
HalpArtAvailable
HalpArtDiscover
HalpArtInitialize
HalpArtQueryCounter
HalpAssignSlotResourcesStub
HalpAuditAcpiTables
HalpAuditAllocateRsdtArrayTable
HalpAuditEnumerateRsdts
HalpAuditEnumerateRsdtsInRange
HalpAuditQueryResults
HalpAuditQuerySlicAddresses
HalpAuditSelectRsdtOrXsdt
HalpAuditSlicTables
HalpBiosDisplayReset
HalpBlkAddVirtualMapping
HalpBlkAlignmentFault
HalpBlkAllocateAndShadowMemory
HalpBlkAllocatePageTablePage
HalpBlkAllocateShadowCode
HalpBlkAllocateShadowCodePages
HalpBlkAllocateShadowData
HalpBlkApicEndOfInterrupt
HalpBlkApicInitializeLocalUnit
HalpBlkApicRead
HalpBlkApicWrite
HalpBlkBoundRangeExceededFault
HalpBlkBreakpointTrap
HalpBlkCoprocessorSegmentOverrunFault
HalpBlkDebugExceptionTrap
HalpBlkDeviceNotAvailableFault
HalpBlkDivideErrorFault
HalpBlkDoubleFaultAbort
HalpBlkFatalErrorHalt
HalpBlkFloatingPointErrorFault
HalpBlkFloatingPointFault
HalpBlkGeneralProtectionFault
HalpBlkHandleIpi
HalpBlkHandleMachineCheckAbort
HalpBlkIdleHalt
HalpBlkIdleLoop
HalpBlkIdleMonitorMWait
HalpBlkIdlePortRead
HalpBlkIdlePortReadHalt
HalpBlkInitSystem
HalpBlkInitializeIdt
HalpBlkInitializePageTables
HalpBlkInitializeProcessorState
HalpBlkInitializeVirtualAddressSpace
HalpBlkInvalidOpcodeFault
HalpBlkInvalidTssFault
HalpBlkIpiInterrupt
HalpBlkLocalErrorInterrupt
HalpBlkMachineCheckAbort
HalpBlkMceFastForward
HalpBlkMceInitialize
HalpBlkNmiInterrupt
HalpBlkNmiInterruptStart
HalpBlkOverflowTrap
HalpBlkPageFault
HalpBlkPoBusyWait
HalpBlkPoGetApicIdByIndex
HalpBlkPoGetPackageId
HalpBlkPoGetPowerInterface
HalpBlkPoGetProcessorCount
HalpBlkPoPerformPpmOperation
HalpBlkPoPerformPpmOperationForIoPort
HalpBlkPoReadPerfIoPort
HalpBlkPoReadPerfMsr
HalpBlkPoReadPort
HalpBlkPoRegisterIdleState
HalpBlkPoWritePerfIoPort
HalpBlkPoWritePerfMsr
HalpBlkProcessorStartup
HalpBlkReservedVector21
HalpBlkReservedVector22
HalpBlkReservedVector23
HalpBlkReservedVector24
HalpBlkReservedVector25
HalpBlkReservedVector26
HalpBlkReservedVector27
HalpBlkReservedVector28
HalpBlkReservedVector29
HalpBlkReservedVector30
HalpBlkReservedVector31
HalpBlkSegmentNotPresentFault
HalpBlkSpuriousInterrupt
HalpBlkStackSegmentFault
HalpBlkStartBlockedProcessor
HalpBlkStubInterrupt
HalpBlkUnexpectedInterrupt
HalpBlkUnexpectedInterruptCommon
HalpBlkVirtualizationFault
HalpBlkWdFatalExceptionCheck
HalpBlkWdTimerRoutine
HalpBlkWdWorkerRoutine
HalpBuddyAllocatorAllocateLogicalAddress
HalpBuddyAllocatorBltAdd
HalpBuddyAllocatorBltFindAndPop
HalpBuddyAllocatorBltRemove
HalpBuddyAllocatorBltRemoveInternal
HalpBuddyAllocatorCleanUp
HalpBuddyAllocatorCreateAllocator
HalpBuddyAllocatorDeleteSubtree
HalpBuddyAllocatorFreeLogicalAddress
HalpBuddyAllocatorGetNodeForLogicalAddress
HalpBuddyAllocatorQueryCapabilities
HalpBuddyAllocatorReserveLogicalAddress
HalpBuddyAllocatorSplitNode
HalpBuildResumeStructures
HalpBuildScatterGatherList
HalpBuildScatterGatherListDmaThin
HalpBuildScatterGatherListDmarThin
HalpCalculateScatterGatherListSize
HalpCallEfiGetTime
HalpCallWakeAlarmDriver
HalpChannelAscendingSort
HalpChannelAssignmentSort
HalpChannelInitializeStaticConfiguration
HalpChannelMpnIdSort
HalpChannelPowerRequest
HalpCheckAndReportGhes
HalpCheckFixedWakeSources
HalpCheckInterruptType
HalpCheckLowMemoryPostSleep
HalpCheckLowMemoryPreSleep
HalpCheckNumaConfiguration
HalpCheckPowerButton
HalpCheckSecondaryInterruptSupported
HalpCheckSratMemoryRanges
HalpCheckWakeupTimeAndAdjust
HalpClaimDebugResource
HalpCmcDeferredRoutine
HalpCmcInitializeErrorPacketContents
HalpCmcInitializePolling
HalpCmcIsDpcTimeRunningLow
HalpCmcLogPollingTimeoutEvent
HalpCmcPollProcessor
HalpCmcStartPolling
HalpCmcWorkerRoutine
HalpCmciDeferredRoutine
HalpCmciHandler
HalpCmciInit
HalpCmciInitProcessor
HalpCmciInitializeErrorPacket
HalpCmciLoadThresholdConfiguration
HalpCmciPollProcessor
HalpCmciSetProcessorConfig
HalpCmciSetProcessorConfigAMD
HalpCmciSetProcessorConfigIntel
HalpCmciSetProcessorMiscConfigAMD
HalpCmosNullReference
HalpCmosRangeHandler
HalpCmosReadByte
HalpCmosWriteByte
HalpCollectPmcCounters
HalpCollectProfileCorruptionStatus
HalpCollectProfileOwnershipStatus
HalpCollectProfileOwnershipStatusInternal
HalpCollectSamplingProfileCorruptionStatus
HalpCollectSamplingProfileCorruptionStatusInternal
HalpCommitCR3Worker
HalpCompareNumaMemoryRanges
HalpCompleteInitializeProfiling
HalpConnectThermalInterrupt
HalpConstructScatterGatherListDmaThin
HalpConstructScatterGatherListDmarThin
HalpConsumeLowMemory
HalpContinueProcessingWaitQueue
HalpConvertEfiToNtStatus
HalpCopyDebugDescriptor
HalpCorrectErrSrc
HalpCorrectGenericErrSrc
HalpCorrectNMIErrSrc
HalpCpuID
HalpCreateCommonBufferFromMdlVerifyParams
HalpCreateErrorRecord
HalpCreateInterrupt
HalpCreateMachineCheckErrorRecord
HalpCreateMcaMemoryErrorRecord
HalpCreateMcaProcessorErrorRecord
HalpCreateNMIErrorRecord
HalpCreateSecondaryIcEntry
HalpDbgInitSystem
HalpDeallocateMsiLines
HalpDeleteSecondaryIcEntry
HalpDeviceEquals
HalpDisableCmciOnProcessor
HalpDisableSecondaryInterrupt
HalpDispatchPnp
HalpDispatchPower
HalpDispatchSystemStateTransition
HalpDispatchWmi
HalpDmaAcquireBufferMappings
HalpDmaAllocateChildAdapterV2
HalpDmaAllocateChildAdapterV3
HalpDmaAllocateContiguousMemory
HalpDmaAllocateContiguousPagesFromContiguousPool
HalpDmaAllocateContiguousPagesFromContiguousPoolAtHighLevel
HalpDmaAllocateContiguousPagesFromContiguousPoolAtHighLevelV2
HalpDmaAllocateContiguousPagesFromContiguousPoolAtHighLevelV3
HalpDmaAllocateContiguousPagesFromContiguousPoolV2
HalpDmaAllocateContiguousPagesFromContiguousPoolV3
HalpDmaAllocateDomain
HalpDmaAllocateEmergencyResources
HalpDmaAllocateLocalContiguousPool
HalpDmaAllocateLocalScatterPool
HalpDmaAllocateMapRegisterFrame
HalpDmaAllocateMapRegisters
HalpDmaAllocateMapRegistersAtHighLevel
HalpDmaAllocateMappingResources
HalpDmaAllocateNewTranslationBuffer
HalpDmaAllocateReservedMapping
HalpDmaAllocateReservedMappingArray
HalpDmaAllocateScatterMemory
HalpDmaAllocateScatterPagesFromContiguousPool
HalpDmaAllocateScatterPagesFromContiguousPoolAtHighLevelV2
HalpDmaAllocateScatterPagesFromContiguousPoolAtHighLevelV3
HalpDmaAllocateScatterPagesFromContiguousPoolV2
HalpDmaAllocateScatterPagesFromContiguousPoolV3
HalpDmaAllocateScatterPagesFromScatterPool
HalpDmaAllocateScatterPagesFromScatterPoolAtHighLevel
HalpDmaAllocateScatterPagesFromScatterPoolAtHighLevelV2
HalpDmaAllocateScatterPagesFromScatterPoolAtHighLevelV3
HalpDmaAllocateScatterPagesFromScatterPoolV3
HalpDmaAllocateTranslationBuffer
HalpDmaAlwaysReserveLogicalAddressRangeInternal
HalpDmaCheckAdapterToken
HalpDmaCheckMdlAccessibility
HalpDmaCommitContiguousMapBuffers
HalpDmaCommitScatterMapBuffers
HalpDmaConfigureInterrupt
HalpDmaControllerCancelTransfer
HalpDmaControllerDpcRoutine
HalpDmaControllerFlushChannel
HalpDmaControllerInitializeController
HalpDmaControllerInterruptRoutine
HalpDmaControllerProgramChannel
HalpDmaControllerQueryMaxFragments
HalpDmaControllerReadDmaCounter
HalpDmaControllerValidateRequestLineBinding
HalpDmaCvmHandleUnrecoverableFrames
HalpDmaCvmMakeContiguousVirtualBufferPrivate
HalpDmaCvmMakeContiguousVirtualBufferShared
HalpDmaCvmMakeMdlDevicePrivate
HalpDmaCvmMakeMdlDeviceShared
HalpDmaCvmQueryRegistryKeys
HalpDmaCvmSetPageShareability
HalpDmaDeleteDomain
HalpDmaDequeueAdapter
HalpDmaDereferenceDomainObject
HalpDmaExtractFromVerifierShadowAdapter
HalpDmaFinalizeDoubleBufferingDisposition
HalpDmaFindAdapterByDeviceId
HalpDmaFindAdapterByDeviceObject
HalpDmaFindDeviceObjectByToken
HalpDmaFlushBuffer
HalpDmaFlushBufferWithEmergencyResources
HalpDmaFlushContiguousTransferV2
HalpDmaFlushContiguousTransferV3
HalpDmaFlushDriverMdl
HalpDmaFlushScatterTransferV3
HalpDmaForceAllocation
HalpDmaFreeChildAdapter
HalpDmaFreeCrashDumpRegisters
HalpDmaFreeCrashdumpRegistersInternal
HalpDmaFreeLa
HalpDmaFreeMapRegisterFrame
HalpDmaFreeMapRegisters
HalpDmaFreeTranslationBuffer
HalpDmaGetAdapterCacheAlignment
HalpDmaGetAdapterVersion
HalpDmaGetIommuInterface
HalpDmaGetMasterAdapterVersion
HalpDmaGetNextWcb
HalpDmaGetRemappingInformation
HalpDmaGetReservedRegionsForDeviceResources
HalpDmaGetReservedRegionsForHybridPassthroughDomain
HalpDmaGetReservedRegionsForTranslateDomain
HalpDmaGetTranslationEntries
HalpDmaGrowContiguousMapBuffers
HalpDmaGrowScatterMapBuffers
HalpDmaIndexToTranslationEntry
HalpDmaInit
HalpDmaInitDiscard
HalpDmaInitEarly
HalpDmaInitMemory
HalpDmaInitPowerManagement
HalpDmaInitSystem
HalpDmaInitializeControllers
HalpDmaInitializeCvmSupport
HalpDmaInitializeMasterAdapter
HalpDmaInitializeObjectType
HalpDmaInsertDeviceObjectByToken
HalpDmaIsAutomaticDomain
HalpDmaIsDomainCompatible
HalpDmaIsThinDmaCapable
HalpDmaIsThinDmarCapable
HalpDmaLinkContiguousTranslations
HalpDmaLinkDeviceObjectByToken
HalpDmaMapContiguousTransferV2
HalpDmaMapContiguousTransferV3
HalpDmaMapScatterTransferV3
HalpDmaMarkHiberAdapter
HalpDmaNextContiguousPiece
HalpDmaNextContiguousPieceV2
HalpDmaNextContiguousPieceV3
HalpDmaPowerCriticalTransitionCallback
HalpDmaPrependTranslations
HalpDmaProcessMapRegisterQueueV2
HalpDmaProcessMapRegisterQueueV3
HalpDmaQueueAdapter
HalpDmaReferenceDomainObject
HalpDmaReleaseBufferMappings
HalpDmaRemoveAdapterFromChannelQueue
HalpDmaRemoveAdapterFromMasterQueue
HalpDmaRemoveFromEmergencyLogicalAddressQueue
HalpDmaRemoveWcb
HalpDmaReturnEmergencyLogicalAddressResources
HalpDmaReturnPageToOwner
HalpDmaReturnPageToSource
HalpDmaReturnToContiguousPool
HalpDmaReturnToScatterPool
HalpDmaStartWcb
HalpDmaSyncMapBuffers
HalpDmaSyncMapBuffersWithEmergencyResources
HalpDmaTranslationEntryToIndex
HalpDmaUseEmergencyLogicalAddressResources
HalpDmaZeroMapBuffers
HalpDpGetInterruptReplayState
HalpDpInitDiscard
HalpDpInitSystem
HalpDpOfflineProcessorForReplace
HalpDpPostReplace
HalpDpPostReplaceInitialization
HalpDpPreReplace
HalpDpQueryMaxHotPlugMemoryAddress
HalpDpReplaceBegin
HalpDpReplaceControl
HalpDpReplaceEnd
HalpDpReplaceTarget
HalpDpReplayInterrupts
HalpDpSortApicList
HalpDpStartProcessor
HalpDriverEntry
HalpDynamicDeviceInterfaceNotification
HalpECmosReadByte
HalpECmosWriteByte
HalpEfiBugCheckAddPagesCallback
HalpEfiDecrementEfiCall
HalpEfiIncrementEfiCall
HalpEfiInitialization
HalpEfiInitializeOnResume
HalpEfiLockOutRuntimeCallsForSystemSleep
HalpEfiStartRuntimeCode
HalpEnableSecondaryInterrupt
HalpEndOfBoot
HalpEnlightenmentInitialize
HalpEnumerateEnvironmentVariablesWithFilter
HalpErrataApplyPerProcessor
HalpErrataInitDiscard
HalpErrataInitSystem
HalpErrorDeferredHandler
HalpExtBuildResourceIdString
HalpExtEnvInitSystem
HalpExtEnvMarkHiberRegions
HalpExtGetAcpiTable
HalpExtGetNextResourceDescriptor
HalpExtInitExtensions
HalpExtMarkHiberPhase
HalpExtRegisterResourceDescriptor
HalpExtractGenericErrorData
HalpFindAdapterByRequestLine
HalpFindBusAddressTranslation
HalpFindDevice
HalpFindDmaControllerByRequestLine
HalpFindGhesEntry
HalpFindInterruptController
HalpFindSecondaryIcEntry
HalpFindTimer
HalpFirmwareInitDiscard
HalpFirmwareInitSystem
HalpFlushAndWait
HalpFlushMapBuffers
HalpFlushTLB
HalpFreeDmaChannels
HalpFreeDrsPool
HalpFreeNvsBuffers
HalpFreePmcCounterSet
HalpFreeResumeStructures
HalpGenInitialRead
HalpGenericErrorSourceRecovery
HalpGenericPolledDpcRoutine
HalpGenericPolledWorkerRoutine
HalpGetAcpiStaticNumaTopology
HalpGetAdapter
HalpGetApHibernateResumePc
HalpGetAvailableProximityId
HalpGetCacheCoherency
HalpGetChipHacks
HalpGetCmosCenturyByte
HalpGetCmosData
HalpGetCpuInfo
HalpGetCpuVendor
HalpGetCurrentMicrocodePlatform
HalpGetDisplayBiosInformation
HalpGetDynamicDevicePointer
HalpGetFullPmuOwnership
HalpGetHotPlugMemoryInfo
HalpGetIommuInterface
HalpGetIommuInterfaceEx
HalpGetIrtEntryCount
HalpGetMcaExtendedLogStatusBlock
HalpGetMcaLog
HalpGetMcaMaxVendorSpecificSectionLength
HalpGetMcaPcrContext
HalpGetMcaVendorSpecificSections
HalpGetMceInformation
HalpGetMicrocodePatchRecord
HalpGetNumaProcMemoryCount
HalpGetNumberOfSGElementsDmarThin
HalpGetPCIData
HalpGetProcessorBrandString
HalpGetProcessorStateByNtIndex
HalpGetProfileDescriptor
HalpGetPteAddress
HalpGetResourceSortValue
HalpGetSetCmosData
HalpGrowMapBufferWorker
HalpHalExtInitSystem
HalpHandleMachineCheck
HalpHandleMaskUnmaskSecondaryInterrupt
HalpHandlePreviousMcaErrors
HalpHandlePreviousMcaErrorsOnProcessor
HalpHpetAcknowledgeInterrupt
HalpHpetArmTimer
HalpHpetDiscover
HalpHpetInitialize
HalpHpetQueryCounter
HalpHpetSetMatchValue
HalpHpetStop
HalpHsaCreateReservedDevice
HalpHsapInitializeReservedDomain
HalpHvBuildDeviceId
HalpHvCounterInitialize
HalpHvCounterQueryCounter
HalpHvCounterUpdateCallback
HalpHvCpuid
HalpHvDiscover
HalpHvEnterSleepState
HalpHvEpCpuid
HalpHvEpReadMsr
HalpHvEpWriteMsr
HalpHvGetApicFrequency
HalpHvGetMachineCheckContext
HalpHvGetTscFrequency
HalpHvInitDiscard
HalpHvInitMcaPcrContext
HalpHvInitMcaStatusMsrCache
HalpHvInitSegRegister
HalpHvInitSystem
HalpHvInvokeWheaErrorNotificationCallback
HalpHvIsFrequencyAvailable
HalpHvIsReferenceTscConfigured
HalpHvLpReadMcaStatusMsr
HalpHvLpReadMultipleMsr
HalpHvMapDeviceMsiRange
HalpHvMapIoApicDeviceInterrupt
HalpHvMceConsumedMemoryErrorRecovery
HalpHvNotifyDebugDeviceAvailable
HalpHvQueryAssociatedProcessors
HalpHvQueryHyperlaunchEntrypoint
HalpHvRetargetDeviceMsiInterrupt
HalpHvRetargetIoApicDeviceInterrupt
HalpHvSetMachineCheckHandlerState
HalpHvSetMachineCheckRecoveryState
HalpHvSetSleepStateProperty
HalpHvStartProcessor
HalpHvStartVirtualProcessor
HalpHvTimerAcknowledgeInterrupt
HalpHvTimerArm
HalpHvTimerInitialize
HalpHvTimerSetInterruptVector
HalpHvTimerStop
HalpHvUnmapDeviceMsiRange
HalpHvUnmapIoApicDeviceInterrupt
HalpHvVpStartEnabled
HalpHvWatchdogArm
HalpHvWatchdogDiscover
HalpHvWatchdogInitialize
HalpHvWatchdogStop
HalpHwPerfCntInitSystem
HalpInitChipHacks
HalpInitGenericErrorSourceEntry
HalpInitGenericErrorSourceEntryV2
HalpInitGenericErrorSourcePollingRoutine
HalpInitMemoryCachingRequirementsTable
HalpInitNonBusHandler
HalpInitSystemHelper
HalpInitSystemPhase0
HalpInitSystemPhase1
HalpInitializeCmc
HalpInitializeCmciVector
HalpInitializeConfigurationFromMadt
HalpInitializeDeferredErrorVector
HalpInitializeErrSrc
HalpInitializeGenericErrorSource
HalpInitializeGhesRecovery
HalpInitializeInterruptRemappingBspLate
HalpInitializeInterrupts
HalpInitializeInterruptsBspLate
HalpInitializeInterruptsPn
HalpInitializeLateSystemActions
HalpInitializeMce
HalpInitializeNMI
HalpInitializePmcCounterSetInfo
HalpInitializePmuArbiter
HalpInitializePnTimers
HalpInitializeProfiling
HalpInitializeSecondaryInterruptServices
HalpInitializeTimers
HalpInitializeUncoreProfiling
HalpInitializeWheaPhysicalMappings
HalpInsertProfileSource
HalpInsertSecondarySignalList
HalpInterruptAddTarget
HalpInterruptAffinityIsSteerable
HalpInterruptApplyOverrides
HalpInterruptBlockSmtSiblings
HalpInterruptBuildGlobalStartupStub
HalpInterruptBuildStartupStub
HalpInterruptCmciService
HalpInterruptConnect
HalpInterruptControllerInUse
HalpInterruptCreateGdtEntry32
HalpInterruptDeferredErrorService
HalpInterruptDeferredRecoveryService
HalpInterruptDestinationToTarget
HalpInterruptDpReplaceBegin
HalpInterruptEnableNmi
HalpInterruptEnablePerformanceEvents
HalpInterruptEnsureLineSwapComplete
HalpInterruptEnumerateUnmaskedInterrupts
HalpInterruptEnumerateUnmaskedSecondaryInterrupts
HalpInterruptFindBestRouting
HalpInterruptFindControllerAndLineState
HalpInterruptFindLines
HalpInterruptFindLinesForGsiRange
HalpInterruptForceClusterMode
HalpInterruptGenerateMessage
HalpInterruptGetApicVersion
HalpInterruptGetHighestPriorityInterrupt
HalpInterruptGetIdentifiers
HalpInterruptGetIrtInfo
HalpInterruptGetNextProcessorLocalId
HalpInterruptGetParkingPageInformation
HalpInterruptGetPriority
HalpInterruptGetRemappedLineState
HalpInterruptGetX2ApicPolicy
HalpInterruptGsiToLine
HalpInterruptInitDiscard
HalpInterruptInitPowerManagement
HalpInterruptInitSystem
HalpInterruptInitializeController
HalpInterruptInitializeGlobals
HalpInterruptInitializeIpis
HalpInterruptInitializeLocalUnit
HalpInterruptIsCmciSupported
HalpInterruptIsDeferredErrorSupported
HalpInterruptIsGsiValid
HalpInterruptIsHvLineBasedRemappingSupported
HalpInterruptIsHvMsiRemappingSupported
HalpInterruptIsMsiSupported
HalpInterruptIsPicStateIntact
HalpInterruptIsRemappingRequired
HalpInterruptLineToGsi
HalpInterruptLocalErrorService
HalpInterruptLookupController
HalpInterruptMarkProcessorStarted
HalpInterruptMaskAcpi
HalpInterruptMaskLevelTriggeredLines
HalpInterruptModel
HalpInterruptOfflineProcessor
HalpInterruptParseAcpiTables
HalpInterruptParseMadt
HalpInterruptPerformDirectedEndOfInterrupt
HalpInterruptPicLine
HalpInterruptPowerChange
HalpInterruptPowerComponentActiveCallback
HalpInterruptPowerComponentIdleCallback
HalpInterruptPowerCriticalTransitionCallback
HalpInterruptQueryControllerInfo
HalpInterruptQueryProcessorRestartEntryPoint
HalpInterruptRebootService
HalpInterruptRegisterController
HalpInterruptRegisterDynamicProcessor
HalpInterruptRegisterLine
HalpInterruptReinitialize
HalpInterruptReinitializeThisProcessor
HalpInterruptRemap
HalpInterruptRemapFixedLines
HalpInterruptRemapUpdateDeliveryMode
HalpInterruptRequestInterrupt
HalpInterruptRequestSecondaryInterrupt
HalpInterruptResetThisProcessor
HalpInterruptRestoreAllControllerState
HalpInterruptRestoreClock
HalpInterruptRestoreController
HalpInterruptSelectController
HalpInterruptSendIpi
HalpInterruptSendIpiToPhysicalTarget
HalpInterruptServiceActiveBoth
HalpInterruptSetDestination
HalpInterruptSetDestinationInternal
HalpInterruptSetIdtEntry
HalpInterruptSetLineSpecificOverride
HalpInterruptSetLineState
HalpInterruptSetLineStateInternal
HalpInterruptSetMsiOverride
HalpInterruptSetProblemEx
HalpInterruptSetProcessorStartContext
HalpInterruptSetRemappedDestination
HalpInterruptSetRemappedDestinationHv
HalpInterruptSetRemappedLineStateInternal
HalpInterruptSortProcessorTable
HalpInterruptSpuriousService
HalpInterruptStandardEndOfInterrupt
HalpInterruptStartBlockedProcessors
HalpInterruptStartProcessor
HalpInterruptStubService
HalpInterruptSwapProcessorIdentifiers
HalpInterruptThermalService
HalpInterruptUnmap
HalpInterruptUnmaskLevelTriggeredLines
HalpInterruptUpdateLinesPostSwap
HalpInterruptUpdateLocalUnitIdentifier
HalpInterruptVectorDataToGsiv
HalpInterruptWaitForProcessorStartUp
HalpInvokeIsrForGsiv
HalpIoDelay
HalpIommuAcquireNewDomain
HalpIommuAddDebuggerException
HalpIommuAllocateAndZeroPageTable
HalpIommuAllocateDmaDomain
HalpIommuAllocateRemappingTableEntry
HalpIommuAttachDeviceDomain
HalpIommuBlockDevice
HalpIommuCheckDpptException
HalpIommuCheckExceptionList
HalpIommuCleanupPageTable
HalpIommuCloneDeviceId
HalpIommuConfigureInterrupt
HalpIommuConstructReservedPageTable
HalpIommuConvertPciBusMasterDescriptorToDeviceId
HalpIommuCreateDevice
HalpIommuCreateDeviceInternal
HalpIommuCreateDmarPageTable
HalpIommuCreateIncreaseAliasTrack
HalpIommuDecreaseAliasTrack
HalpIommuDeleteDevice
HalpIommuDereferenceHardwareDomain
HalpIommuDetermineReservedPciRid
HalpIommuDeviceGetDomainTypes
HalpIommuDmaRemappingCapable
HalpIommuDmarPageTableMarkHiberPhase
HalpIommuDomainFreeLogicalAddressRange
HalpIommuDomainGetLogicalAddressRange
HalpIommuDomainMapIdentityRange
HalpIommuDomainMapLogical
HalpIommuDomainMapLogicalRange
HalpIommuDomainMarkHiberLogicalRange
HalpIommuDomainUnmapIdentityRange
HalpIommuDomainUnmapLogicalRange
HalpIommuEarlyFaultDpcRoutine
HalpIommuEnableInterrupts
HalpIommuExtMarkHiberMemory
HalpIommuFlushDmaDomain
HalpIommuFlushDomainTB
HalpIommuFlushDomainTbs
HalpIommuFlushPhysicalPtesFromCacheSize
HalpIommuFreeDeviceId
HalpIommuFreeDmaDomain
HalpIommuFreeDomainId
HalpIommuFreeRemappingTableEntry
HalpIommuGetAcpiDeviceMapCount
HalpIommuGetDeviceId
HalpIommuGetDmarptRootAddress
HalpIommuGetDomainId
HalpIommuGetExceptionList
HalpIommuGetHardwareDomain
HalpIommuGetNextFlushDevice
HalpIommuGetPageTableType
HalpIommuGetReservedRanges
HalpIommuGetRootIommuFaultPolicy
HalpIommuGetSecurityPolicy
HalpIommuHsaDiscover
HalpIommuInitDiscard
HalpIommuInitInterrupts
HalpIommuInitSystem
HalpIommuInitializeAll
HalpIommuInitializeDmaGuardPolicy
HalpIommuInitializeDmar
HalpIommuInitializeDmarPageTable
HalpIommuInterruptRoutine
HalpIommuInvokeInterfaceStateChangeCallbacks
HalpIommuIsDmarStageCompatible
HalpIommuIsInPermanentPassthrough
HalpIommuJoinDmaDomain
HalpIommuLeaveDmaDomain
HalpIommuLocateFromDevice
HalpIommuLogEarlyFault
HalpIommuMapLogical
HalpIommuMapLogicalRange
HalpIommuMarkHiberPhase
HalpIommuPopulateExceptionList
HalpIommuProcessDeviceEntries
HalpIommuProcessIvhdEntry
HalpIommuProcessMemoryErrata
HalpIommuProcessReservations
HalpIommuProcessReservationsInternal
HalpIommuProcessReservedDomains
HalpIommuQueryAcpiDeviceMapping
HalpIommuRegisterBuiltinPlugins
HalpIommuRegisterDispatchTable
HalpIommuReportIommuFault
HalpIommuSetupMessageInterruptRouting
HalpIommuSupportEnabled
HalpIommuTraceFault
HalpIommuUnblockDevice
HalpIommuUnmapLogicalRange
HalpIommuUpdatePageTableLevel
HalpIommuUpdatePageWalkCapability
HalpIommuUpdateRemappingDestination
HalpIommuUpdateRemappingTableEntry
HalpIrtAllocateDeviceAperture
HalpIrtAllocateIndex
HalpIrtExtendApertureRange
HalpIrtExtendRemappingRange
HalpIrtFreeIndex
HalpIrtReleaseDeviceAperture
HalpIsCmciImplemented
HalpIsCmciImplementedAMD
HalpIsEFIRuntimeActive
HalpIsHeap64KRegionExecutable
HalpIsHvPresent
HalpIsHvRemappingInterrupts
HalpIsHybridPassthroughCapable
HalpIsInterruptTypeSecondary
HalpIsLmceSupported
HalpIsMicrosoftCompatibleHvLoaded
HalpIsPartitionCpuManager
HalpIsXboxNanovisorPresent
HalpIumGetNextVariableName
HalpIumGetTime
HalpIumGetVariable
HalpIumQueryCapsuleCapabilities
HalpIumQueryVariableInfo
HalpIumResetSystem
HalpIumSetTime
HalpIumSetVariable
HalpIumUpdateCapsule
HalpIvtCheckIdPathMatch
HalpIvtCreateReservedDevice
HalpIvtFindReservedDomain
HalpIvtProcessDmarTable
HalpIvtProcessDrhdEntry
HalpIvtpInitializeReservedDomain
HalpKdEnumerateDebuggingDevices
HalpKdReadPCIConfig
HalpKdReleaseDebuggingDevice
HalpKdSetupDebuggingDevice
HalpKdWritePCIConfig
HalpKsrCallbackRoutine
HalpLMIdentityStub
HalpLMStub
HalpLMStubForVM
HalpLbrCaptureStack
HalpLbrClearStack
HalpLbrConfigurationWorker
HalpLbrConfigureProcessor
HalpLbrConfigureRecording
HalpLbrGetInformation
HalpLbrInitialize
HalpLbrInitializeIntel
HalpLbrResumeRecording
HalpLbrStartRecording
HalpLbrStopRecording
HalpLeaveDmaDomain
HalpLegacyShutdown
HalpLoadMicrocode
HalpLoadMicrocodeSerialized
HalpMap
HalpMapCR3Ex
HalpMapEarlyPages
HalpMapNvsArea
HalpMapPhysicalMemory64
HalpMapPhysicalMemoryWriteThrough64
HalpMapTransferV3
HalpMaskInterrupt
HalpMcEnumerateAndSetPatchConfig
HalpMcExportAndChargeNeededData
HalpMcGetLoadConfiguration
HalpMcGetRollbackRequest
HalpMcLoadMicrocodeWorker
HalpMcParallelLoadSupported
HalpMcPatchConfiguration
HalpMcUpdateInitializeBSP
HalpMcUpdateLock
HalpMcUpdateMicrocode
HalpMcUpdatePostUpdate
HalpMcUpdateUnlock
HalpMcaAMDIsMemoryError
HalpMcaClearError
HalpMcaExtendedLogGetL1DirectoryBase
HalpMcaExtendedLogInitialize
HalpMcaInitializePcrContext
HalpMcaPopulateErrorData
HalpMcaPopulateErrorDataEx
HalpMcaProcessorBankConfig
HalpMcaProcessorBankConfigAmd
HalpMcaReadError
HalpMcaReadErrorPresence
HalpMcaReadErrorUncorrected
HalpMcaReportError
HalpMcaResumeProcessorConfig
HalpMcaSetFeatureFlags
HalpMcaSetProcessorConfig
HalpMcaStuckErrorCheck
HalpMceBarrierWait
HalpMceHandler
HalpMceHandlerCore
HalpMceHandlerWithRendezvous
HalpMceInit
HalpMceInitProcessor
HalpMceInitializeErrorPacket
HalpMceInitializeErrorPacketContents
HalpMceInitializeRecovery
HalpMceMemoryErrorRecovery
HalpMceRecovery
HalpMceRecoveryMemoryError
HalpMceRecoveryMemoryErrorAmd
HalpMceRecoveryMemoryErrorIntel
HalpMceRecoveryNotRequiredIntel
HalpMceRecoveryRequired
HalpMemoryErrorDeferredHandler
HalpMemoryErrorDeferredRecovery
HalpMiscBugCheckCallback
HalpMiscGetParameters
HalpMiscInitDiscard
HalpMiscInitSystem
HalpMiscInitializeKsr
HalpMiscInitializeTelemetry
HalpMiscIsLegacyPcType
HalpMmAllocCtxAlloc
HalpMmAllocCtxAllocBuffer
HalpMmAllocCtxBufferCleanup
HalpMmAllocCtxFree
HalpMmAllocCtxInit
HalpMmAllocCtxMarkHiberPhase
HalpMmAllocateAndInsertPageTablePage
HalpMmAllocateMemory
HalpMmAllocateMemoryInternal
HalpMmAllocatePerProcessorMemory
HalpMmBuildTiledMemoryMap
HalpMmGetPteAddressSafe
HalpMmInitSystem
HalpMmIsInsideHalVa
HalpMmReservePageTablePages
HalpMmUpdateTiledMemoryMapTargetStub
HalpMmZeroPageWithTemporaryMapping
HalpMpsValueAscendingSort
HalpNMIHalt
HalpNmiReboot
HalpNodeCostSort
HalpNotifyActorIfPmuAvailable
HalpNotifyIommuDomainPolicyChange
HalpNullReadWriteBusData
HalpNumaAddRangeProximity
HalpNumaCalculateSllbiSize
HalpNumaCompareMemorySideCacheEntries
HalpNumaCompareMemorySideCacheNodeAndLevel
HalpNumaGetHmatConfigSize
HalpNumaInitializeHmaConfiguration
HalpNumaInitializeStaticConfiguration
HalpNumaParseHmat
HalpNumaQueryMemoryNumaAttributes
HalpNumaQueryMemorySideCacheInfo
HalpNumaQueryNodeCapacity
HalpNumaQueryNodeDistance
HalpNumaQueryProcessorNode
HalpNumaQueryProximityId
HalpNumaQueryProximityNode
HalpNumaQuerySystemLocalityLatencyAndBandwidthInfo
HalpNumaSortProcessors
HalpNumaSwapP0NodeToFront
HalpNumaSystemLocalityInfoFindInitiatorIndex
HalpNumaSystemLocalityInfoFindTargetIndex
HalpNumaSystemLocalityInfoIncludeQueryDataType
HalpPCIAcquireConfigSpaceLock
HalpPCIConfig
HalpPCIPerformConfigAccess
HalpParseChannelCount
HalpParseCommonBufferExtendedConfigurations
HalpPassIrpFromFdoToPdo
HalpPciAccessIoConfigSpace
HalpPciAccessMmConfigSpace
HalpPciConvertDevicePathToRid
HalpPciGetDeviceLocationFromPhysicalAddress
HalpPciGetHpetInterruptSource
HalpPciGetHpetInterruptSourceAmd
HalpPciGetHpetInterruptSourceIntel
HalpPciInitSystem
HalpPciInitializeMmConfigAccess
HalpPciIsAddressWithinMcfg
HalpPciMapMmConfigPhysicalAddress
HalpPciMarkHiberPhase
HalpPciReadIoConfigUchar
HalpPciReadIoConfigUlong
HalpPciReadIoConfigUshort
HalpPciReadMmConfigUchar
HalpPciReadMmConfigUlong
HalpPciReadMmConfigUshort
HalpPciReadSecondaryBusNumber
HalpPciReportMmConfigAddressRange
HalpPciWriteIoConfigUchar
HalpPciWriteIoConfigUlong
HalpPciWriteIoConfigUshort
HalpPciWriteMmConfigUchar
HalpPciWriteMmConfigUlong
HalpPciWriteMmConfigUshort
HalpPeiInterruptHandler
HalpPerfInterrupt
HalpPicDiscover
HalpPicInitializeIoUnit
HalpPicRequestInterrupt
HalpPicSetLineState
HalpPicWriteEndOfInterrupt
HalpPiix4Detect
HalpPmTimerConfigure
HalpPmTimerDiscover
HalpPmTimerInitialize
HalpPmTimerQueryCounterIoPort
HalpPmTimerQueryCounterMemory
HalpPmemErrorDeferredHandler
HalpPmemErrorDeferredRecovery
HalpPmuArbiterNotifyActor
HalpPmuArbiterPeriodicTimerCallback
HalpPmuArbiterPeriodicWorkItem
HalpPmuArbiterQueryRegistryQuantum
HalpPmuArbiterUpdateActiveActorTime
HalpPmuGetNumberOfReservedCounters
HalpPmuProcessorCallbackDpcRoutine
HalpPmuReservedResourcesProcessorCallback
HalpPnpInitSystem
HalpPopCommonBufferEntry
HalpPopulateMsiMessages
HalpPostSleepMP
HalpPowerEarlyRestore
HalpPowerInitDiscard
HalpPowerInitFwPerformanceTableMappings
HalpPowerInitNvsRegionData
HalpPowerInitSystem
HalpPowerSetRebootHandler
HalpPowerStateCallback
HalpPowerWriteResetCommand
HalpPreAllocateKInterrupts
HalpPrepareForBugcheck
HalpPreprocessNmi
HalpPreserveNvsArea
HalpProcGetFeatureBits
HalpProcInitDiscard
HalpProcInitSystem
HalpProcIsSmtDisabled
HalpProcessSecondarySignalList
HalpProcessorPrepareForIdle
HalpProcessorResumeFromIdle
HalpPutAcpiHacksInRegistry
HalpPutScatterGatherListDmarThin
HalpQosInitSystem
HalpQueryAcpiRealTimeClock
HalpQueryAcpiResourceRequirements
HalpQueryAcpiWakeAlarmSystemPowerState
HalpQueryCapsuleCapabilities
HalpQueryChannelTopologyInformation
HalpQueryDebuggerInformation
HalpQueryDeviceRelations
HalpQueryHeterogeneousMemoryAttributesInterface
HalpQueryIdFdo
HalpQueryIdPdo
HalpQueryInterface
HalpQueryIommuReservedRegionInformation
HalpQueryMaximumGsiv
HalpQueryMaximumRegisteredProcessorCount
HalpQueryNumaRangeTableInformation
HalpQueryPccInterface
HalpQueryPerDeviceMsiLimitInformation
HalpQueryPrimaryInterruptInformation
HalpQueryProfileInformation
HalpQueryProfileSource
HalpQueryProfileSourceList
HalpQueryResources
HalpQuerySecondaryInterruptInformation
HalpQueryVirtualRtc
HalpQueueMapBufferWorker
HalpReadCmosDataByPort
HalpReadCmosTime
HalpReadExtendedMcaRegistersAMD
HalpReadExtendedMcaRegistersIntel
HalpReadGenericErrorInfo
HalpReadPCIConfig
HalpReadRtcStdPCAT
HalpReadStdCmosData
HalpReadWheaPhysicalMemory
HalpReadWriteWheaPhysicalMemory
HalpReboot
HalpRecordSecondaryGsivRange
HalpReenableAcpi
HalpRegisterDeviceInUse
HalpRegisterDmaChannel
HalpRegisterDmaController
HalpRegisterKdSupportFunctions
HalpRegisterPeiErrorSource
HalpRegisterPmuNotification
HalpRegisterProcessorTraceInterruptHandler
HalpRegisterProfileSourceInterruptHandler
HalpRegisterSecondaryIcInterface
HalpRegisterTimerInterruptHandler
HalpRegisterUsbController
HalpReleaseCmosSpinLock
HalpReleaseHighLevelLock
HalpReleasePmuAccessRequest
HalpReleaseSecondaryIcEntryShared
HalpRemapVirtualAddress64
HalpRemoveProfileSourceFromList
HalpReportResourceUsage
HalpRequestGenericErrorRecovery
HalpRequestPmuAccess
HalpReserveHalPtes
HalpResetSBF
HalpRestartPmcCounterSet
HalpRestartProfiling
HalpRestoreDmaControllerState
HalpRestoreHvEnlightenment
HalpRestoreLegacyDmaControllerState
HalpRestoreNvsArea
HalpResumePoint
HalpSaveAndDisableEnlightenment
HalpSaveDmaControllerState
HalpSaveProcessorState
HalpScanForProfilingCorruption
HalpScanForProfilingCorruptionInternal
HalpSecondaryInterruptQueryPrimaryInformation
HalpSecureResumePoint
HalpSelectFeasibleLowPowerState
HalpSetAcpiRealTimeClock
HalpSetClockAfterSleep
HalpSetClockBeforeSleep
HalpSetCmosCenturyByte
HalpSetCmosData
HalpSetIrtEntry
HalpSetPCIData
HalpSetProcessorStateByNtIndex
HalpSetProfileSourceInterval
HalpSetResumeTime
HalpSetShutdownResetHandler
HalpSetSystemInformation
HalpSetTimer
HalpSetTimerAnyMode
HalpSetVirtualRtc
HalpSetWakeAlarm
HalpSetupAcpiPhase0
HalpSetupRealModeResume
HalpShouldRecoveryBeAttempted
HalpShutdown
HalpShutdownReset
HalpSignalRAS
HalpSimpleCheck
HalpSocApiAllocatePhysicalMemory
HalpStartPccCommand
HalpStartProfileInterruptEx
HalpStopLegacyUsbInterrupts
HalpStopLegacyUsbInterruptsInternal
HalpStoreFreeCr3
HalpTimerAlwaysOnClockInterrupt
HalpTimerBuildKnownResourceIdString
HalpTimerCalculateMaximumAllowableDrift
HalpTimerCalibratePerformanceCounter
HalpTimerCaptureCloestAuxiliaryQpcPair
HalpTimerCaptureCurrentAuxiliaryQpcPair
HalpTimerClearProblem
HalpTimerClockActivate
HalpTimerClockArm
HalpTimerClockInitialize
HalpTimerClockInterrupt
HalpTimerClockInterruptStub
HalpTimerClockInterruptWork
HalpTimerClockIpiRoutine
HalpTimerClockPowerChange
HalpTimerClockStop
HalpTimerConfigureInterrupt
HalpTimerConfigureQpcBypass
HalpTimerConvertAuxiliaryCounter
HalpTimerConvertAuxiliaryCounterToPerformanceCounter
HalpTimerConvertPerformanceCounterToAuxiliaryCounter
HalpTimerDelayedQueryCounter
HalpTimerDetermineValidTimerPairReadLatency
HalpTimerDpcRoutine
HalpTimerEnableHypervisorTimer
HalpTimerFindBestAlwaysOnTimer
HalpTimerFindIdealClockSource
HalpTimerFindIdealPerformanceCounterSource
HalpTimerFindIdealScalingSource
HalpTimerFindIdealWatchdog
HalpTimerGetClockConfiguration
HalpTimerGetClockRates
HalpTimerGetInternalData
HalpTimerGetReferencePage
HalpTimerGetSavedPerformanceCounter
HalpTimerHypervisorInterrupt
HalpTimerHypervisorInterruptStub
HalpTimerInitPowerManagement
HalpTimerInitSystem
HalpTimerInitialize
HalpTimerInitializeClock
HalpTimerInitializeClockPn
HalpTimerInitializeEarlyStallSource
HalpTimerInitializeHypervisorTimer
HalpTimerInitializeProfiling
HalpTimerInitializeSystemWatchdog
HalpTimerInitializeVpptClockTimer
HalpTimerIsHypervisorReferenceAvailable
HalpTimerMarkHiberPhase
HalpTimerMarkWake
HalpTimerMeasureFrequencies
HalpTimerMeasureProcessorsWorker
HalpTimerNotifyProcessorFreeze
HalpTimerOnlyClockInterruptPending
HalpTimerPerformanceCounterPowerChange
HalpTimerPowerChange
HalpTimerPowerComponentActiveCallback
HalpTimerPowerComponentIdleCallback
HalpTimerPowerCriticalTransitionCallback
HalpTimerPrepareClockInterrupt
HalpTimerProfileInterrupt
HalpTimerPropagateQpcBiasUpdate
HalpTimerQueryAndResetRtcErrors
HalpTimerQueryAuxiliaryCounterFrequency
HalpTimerQueryClockSourceType
HalpTimerQueryCycleCounter
HalpTimerQueryHostPerformanceCounter
HalpTimerQueryRtcErrors
HalpTimerQueryWakeTime
HalpTimerQueryWatchdogType
HalpTimerReadTimerPairWithLatencyLimit
HalpTimerRegister
HalpTimerRegisterBuiltinPluginsCommon
HalpTimerReportIdleStateUsage
HalpTimerResetProfileAdjustment
HalpTimerRestartProfileInterrupt
HalpTimerRestorePerformanceCounter
HalpTimerRestoreProcessorCounter
HalpTimerSavePerformanceCounter
HalpTimerSaveProcessorCounter
HalpTimerSaveProcessorFrequency
HalpTimerScaleCounter
HalpTimerSchedulePeriodicQueries
HalpTimerSelectRoles
HalpTimerSetClockTimerMinimumInterval
HalpTimerSetProblemEx
HalpTimerSetProfilingTarget
HalpTimerSetTimerBackedProfileInterval
HalpTimerStallCounterPowerChange
HalpTimerStallExecutionProcessor
HalpTimerStartProfileInterrupt
HalpTimerStopProfileInterrupt
HalpTimerSwitchStallSource
HalpTimerSwitchToNormalClock
HalpTimerTestHypervisorTimer
HalpTimerTraceTimingHardware
HalpTimerUnmapInterrupt
HalpTimerUpdateApiConsumers
HalpTimerWatchdogGeneratedLastReset
HalpTimerWatchdogLogReset
HalpTimerWatchdogPreResetInterrupt
HalpTimerWatchdogQueryDueTime
HalpTimerWatchdogResetCountdown
HalpTimerWatchdogStart
HalpTimerWatchdogStop
HalpTimerWatchdogTriggerSystemReset
HalpTimerWatchdogWakeSetDueTime
HalpTopologyInitSystem
HalpTranslateBusAddress
HalpTranslateToLegacyMcaException
HalpTscAdvSynchCalculateRemoteDelta
HalpTscAdvSynchCalculateRemoteDeltas
HalpTscAdvSynchComputeMinimumDeltaAlternate
HalpTscAdvSynchLeader
HalpTscAdvSynchReadTimeStamp
HalpTscAdvSynchSkewCounter
HalpTscAdvSynchTarget
HalpTscAdvSynchToLeader
HalpTscAdvSynchToTarget
HalpTscCompatibilitySynchronization
HalpTscDiscover
HalpTscFallback
HalpTscFallbackToPlatformSource
HalpTscGetAttributes
HalpTscInitialize
HalpTscInitializeSynchronizationContext
HalpTscQueryCounter
HalpTscQueryCounterOrdered
HalpTscReportSyncStatus
HalpTscReserveResources
HalpTscSynchronization
HalpTscSynchronizationWorker
HalpTscTraceProcessorDelta
HalpTscTraceProcessorSynchronization
HalpTscTraceStatus
HalpTscTraceSynchronizationSummary
HalpUnloadMicrocode
HalpUnmapVirtualAddress
HalpUnmaskInterrupt
HalpUnregisterPmuNotification
HalpUnregisterSecondaryIcInterface
HalpUpdateCapsule
HalpUpdateConfigurationFromMsct
HalpUpdateCoolingPacket
HalpUpdateIrtDestinationId
HalpUsbLegacyDeviceHandoff
HalpUsbLegacyReadPCIConfig
HalpUsbLegacyScanBusForHandoff
HalpUsbLegacyStopOhciInterrupt
HalpUsbLegacyStopUhciInterrupt
HalpUsbLegacyWritePCIConfig
HalpUtcTimeToAcpiRealTime
HalpValidPCISlot
HalpValidateInterface
HalpValidateMpns
HalpVerifyGenericError
HalpVerifyHmatEntryValidity
HalpVerifySratEntryLengthAndFlag
HalpVpptAcknowledgeInterrupt
HalpVpptArmTimer
HalpVpptInitialize
HalpVpptInitializePhysicalTimer
HalpVpptStop
HalpVpptTimerRegister
HalpVpptUpdatePhysicalTimer
HalpWatchdogCheckPreResetNMI
HalpWatchdogDelayExpiration
HalpWdatArmTimer
HalpWdatDiscover
HalpWdatExecuteActionBeforeInitialize
HalpWdatInitialize
HalpWdatInitializeWdat
HalpWdatInitializeWdrt
HalpWdatProcessWdrtInternalData
HalpWdatStop
HalpWhackICHUsbSmi
HalpWheaGetApicId
HalpWheaGetBankFromMciStatusIndex
HalpWheaInitDiscard
HalpWheaInitProcessorGenericSection
HalpWheaInitSystem
HalpWheaNativeCpuid
HalpWheaNativeReadMsr
HalpWheaNativeWriteMsr
HalpWheaReadMsrAddress
HalpWheaReadMsrMisc
HalpWheaReadMsrStatus
HalpWheaWriteMsrControl
HalpWheaWriteMsrStatus
HalpWriteCmosDataByPort
HalpWriteCmosTime
HalpWritePCIConfig
HalpWriteRtcStdPCAT
HalpWriteStdCmosData
HalpWriteWheaPhysicalMemory
HalpcGetCmosDataByType
HalpcSetCmosDataByType
HashpFinalizeHash
HashpHashBytes
HashpHashMemory
HashpInitHash
HashpVerifyEcdsaSignature
HashpVerifyPkcs1Signature
HdlspAddLogEntry
HdlspBugCheckProcessing
HdlspDispatch
HdlspEnableTerminal
HdlspGetLine
HdlspKernelAddLogEntry
HdlspProcessDumpCommand
HdlspPutMore
HdlspPutString
HdlspPutWideString
HdlspSendBlueScreenInfo
HdlspSendStringAtBaud
HdlspSetBlueScreenInformation
HdlspUTF8Encode
HeadlessDispatch
HeadlessInit
HeadlessKernelAddLogEntry
HeadlessTerminalAddResources
HsaAllocatePasidTables
HsaAllocateRemappingTableEntry
HsaAttachDeviceDomain
HsaAttachDeviceDomainInternal
HsaBuildDeviceTableEntry
HsaBuildInterruptRemappingEntry
HsaCompleteFlush
HsaConfigureSettings
HsaCreateDevice
HsaDeleteDevice
HsaDetachDeviceDomain
HsaDisableInterrupt
HsaDismissPageFault
HsaEnableInterrupt
HsaEnsureNoPendingFaults
HsaEnumerateIvmdDevices
HsaFindDevice
HsaFlConfigureIntermediatePhysicalPte
HsaFlConfigureLeafPhysicalPfn
HsaFlConfigureLeafPhysicalPte
HsaFlGetPermissions
HsaFlGetPhyAddress
HsaFlushDeviceTbOnly
HsaFlushDomainTb
HsaFlushTb
HsaFlushTbInternal
HsaFreePasidTables
HsaFreeRemappingTableEntry
HsaGetBlockedDomain
HsaGetDeviceAperture
HsaGetPageFault
HsaGetRidAcpiMapCount
HsaGrowPasidTable
HsaHandleInterrupt
HsaInitializeInterruptRemapping
HsaInitializeIommu
HsaInvalidateRemappingTableEntries
HsaInvalidateRemappingTableEntry
HsaIommuSendCommand
HsaIommuWaitCommand
HsaMarkHiberRegions
HsaProcessDeviceExceptions
HsaProcessIvmd
HsaProcessReservedDomains
HsaQueryAcpiDeviceMapping
HsaSetDevicePasidTable
HsaSetDeviceSvmCapabilities
HsaSetMessageInterruptRouting
HsaSetPasidAddressSpace
HsaSlConfigureIntermediatePhysicalPte
HsaSlConfigureLeafPhysicalPfn
HsaSlConfigureLeafPhysicalPte
HsaSlGetPermissions
HsaSlGetPhyAddress
HsaSyncFlush
HsaUpdateDeviceTableEntry
HsaUpdateInterruptDestination
HsaUpdateRemappingDestination
HsaUpdateRemappingTableEntry
HsaUpdateRemappingTableInDeviceTableEntry
HsaUpdateSingleTargetExtendedDestination
HvAddToLayoutStats
HvAllocateCell
HvAllocateOffsetArraysForHiveSnapshot
HvAnalyzeLogFiles
HvApplyLogFiles
HvBufferCheckSum
HvCheckAndUpdateHiveBackupTimeStamp
HvCheckBin
HvCheckHive
HvDuplicateCell
HvExtendHivePrimaryFileValidDataLength
HvFoldBackDirtyData
HvFoldBackUnreconciledData
HvFreeCell
HvFreeDirtyData
HvFreeHivePartial
HvFreeUnreconciledData
HvGetEffectiveLogSizeCapForHive
HvGetHiveLogFileStatus
HvHiveCleanup
HvHiveInitialize
HvHiveStartEmptyClone
HvHiveStartFileBacked
HvHiveStartMemoryBacked
HvInitializeHashLibrary
HvIsCellAllocated
HvIsCurrentLogSwappable
HvIsInPlaceBaseBlockValid
HvIsRangeDirty
HvLoadHive
HvLockHiveFlusherExclusive
HvLockHiveFlusherShared
HvLockHiveWriter
HvMarkBaseBlockDirty
HvMarkCellDirty
HvMarkDirtyForFlush
HvMarkHiveWithNoSectionExtend
HvMoveLayoutStats
HvReallocateCell
HvRecoverFlushProtocolStateFromFiles
HvResetDirtyData
HvResetLogFileStatusAll
HvSnapshotHiveToOffsetArray
HvStoreModifiedData
HvSwapHiveStorage
HvSwapLogFiles
HvTrimHive
HvTruncateAllLogFilesIfRequired
HvTruncateCurrentLogFileIfRequired
HvUnCOWReconciledPages
HvUnlockHiveFilePages
HvUnlockHiveFlusherExclusive
HvUnlockHiveFlusherShared
HvUnlockHiveWriter
HvValidateOrInvalidatePrimaryFileHeader
HvViewMapContainsLockedPages
HvWriteExternal
HvWriteHivePrimaryFile
HvWriteLogFile
HvcallFastExtended
HvcallInitInputControl
HvcallInitiateHypercall
HvcallpExtendedFastHypercall
HvcallpExtendedFastHypercallWithOutput
HvcallpNoHypervisorPresent
HviCopyMemory
HviCopyMemoryNonTemporal
HviEnterKernelAperture
HviGetEnlightenmentInformation
HviGetHardwareFeatures
HviGetHypervisorFeatures
HviGetHypervisorInterface
HviGetHypervisorVendorAndMaxFunction
HviGetHypervisorVersion
HviGetImplementationLimits
HviGetIptFeatures
HviGetSharedGpaBoundary
HviIsAnyHypervisorPresent
HviIsHypervisorMicrosoftCompatible
HviIsHypervisorVendorMicrosoft
HviIsKernelApertureAvailable
HviIsXboxNanovisorPresent
HviLeaveKernelAperture
HvipApertureAmdVmcall
HvipApertureIntelVmcall
HvipApertureVmfuncSwitchEptp
HvlAcknowledgePageRequest
HvlAddPagesCallbackRoutine
HvlAddSecureHvPagesCallbackRoutine
HvlAddSecurePagesCallbackRoutine
HvlAddSecureSkPagesCallbackRoutine
HvlAllocateHibernateResources
HvlAttachPasidSpace
HvlAttachPrQueue
HvlBugCheckCallbackRoutine
HvlCalculateLivedumpSize
HvlChangeIsolatedMemoryVisibility
HvlClearPrqStalled
HvlCollectLivedump
HvlConfigureDynamicMemory
HvlConfigureIdleStates
HvlConfigureMemoryZeroingOnReset
HvlCrashdumpCallbackRoutine
HvlCreatePasidSpace
HvlCreatePrQueue
HvlDebuggerSupportInitialize
HvlDeletePrQueue
HvlDeleteProcessor
HvlDetachPasidSpace
HvlDetachPrQueue
HvlDisableEnlightenment
HvlDisablePasid
HvlDiscardPagesFromHibernation
HvlDiscardSecurePagesFromHibernation
HvlDmaAllocateDeviceDomain
HvlDmaAttachDeviceDomain
HvlDmaConfigureDeviceDomain
HvlDmaDeleteDeviceDomain
HvlDmaDetachDeviceDomain
HvlDmaFlushDeviceDomain
HvlDmaFlushDeviceDomainVaList
HvlDmaGetDmaGuardEnabled
HvlDmaGetHybridPassthroughReservedRegions
HvlDmaMapDeviceLogicalRange
HvlDmaMapDeviceSparsePages
HvlDmaReserveDeviceDomainAttachment
HvlDmaUnmapDeviceLogicalRange
HvlDmaUnmapDeviceSparsePages
HvlDmaUnreserveDeviceDomainAttachment
HvlDummyInterruptCallback
HvlEnablePasid
HvlEnableVsmCalls
HvlEndSystemInterrupt
HvlEnlightenProcessor
HvlEnterSleepState
HvlFlushPasid
HvlFlushRangeListTb
HvlFlushTbAllPartitions
HvlGetApicIdFromLpIndex
HvlGetDeviceCapabilities
HvlGetEncryptedData
HvlGetEnlightenmentInfo
HvlGetGpaPagesAccessState
HvlGetImplementedPhysicalBits
HvlGetLpIndexFromApicId
HvlGetLpIndexFromProcessorIndex
HvlGetMicrocodeLatency
HvlGetProcessorIndexFromVpIndex
HvlGetQpcBias
HvlGetReferenceTime
HvlGetReferenceTimeUsingTscPage
HvlGetRootVpSharedPages
HvlGetSharedPageVa
HvlGetSparseGpaPagesAccessState
HvlGetSystemPasidCapabilities
HvlGetVpSintMessagePage
HvlHalGetVpIndexFromApicId
HvlHalStartVirtualProcessor
HvlHalVpStartEnabled
HvlHvDebuggerPowerHandler
HvlInitializeProcessor
HvlInvokeHypervisorDebugger
HvlInvokeWheaErrorNotificationCallback
HvlIsCoreSharingPossible
HvlIsHypercallOverlayLocked
HvlIsHypervisorPresent
HvlIsRootPowerSchedulerQosPresent
HvlIsSchedulerAssistAvailable
HvlIsSingleGroupRequired
HvlIsStibpPairingRecommended
HvlIterateSecurePagesForHibernation
HvlLogGuestCrashInformation
HvlLpGetLogicalProcessorHwId
HvlLpGetMachineCheckContext
HvlLpReadCpuid
HvlLpReadMultipleMsr
HvlLpWriteMultipleMsr
HvlLpWritebackInvalidate
HvlMapDeviceInterrupt
HvlMapDmaRanges
HvlMapGpaPages
HvlMapSparseGpaPages
HvlMarkHiberPhase
HvlNotifyAcpiReenabled
HvlNotifyAllProcessorsStarted
HvlNotifyDebugDeviceAvailable
HvlNotifyHpetEnabled
HvlNotifyLongSpinWait
HvlNotifyPageHeat
HvlNotifyRootCrashdump
HvlParkedVirtualProcessors
HvlPerformEndOfInterrupt
HvlPhase0Initialize
HvlPhase1Initialize
HvlPhase2Initialize
HvlPrepareForHibernate
HvlPrepareForRootCrashdump
HvlPrepareForSecureHibernate
HvlPrepareLivedumpDescriptor
HvlQueryActiveHypervisorProcessorCount
HvlQueryActiveProcessors
HvlQueryAssociatedProcessors
HvlQueryConnection
HvlQueryDetailInfo
HvlQueryEnlightenmentInfo
HvlQueryHvCppcPerfSupport
HvlQueryHypervisorProcessorNodeNumber
HvlQueryHypervisorTscAdjustment
HvlQueryL1tfMitigationInformation
HvlQueryMinrootInfo
HvlQueryNumaDistance
HvlQueryProcessorTopology
HvlQueryProcessorTopologyCount
HvlQueryProcessorTopologyEx
HvlQueryProcessorTopologyHighestId
HvlQuerySetBootPagesInfo
HvlQueryStartedProcessors
HvlQueryVsmConnection
HvlQueryVsmProtectionInfo
HvlReadPerfIoPort
HvlReadPerfMsr
HvlReadPerformanceStateCounters
HvlRegisterDeviceId
HvlRegisterInterruptCallback
HvlRegisterLogicalProcessorFrequency
HvlRegisterPerfFeedbackCounters
HvlRegisterWheaErrorNotification
HvlRequestProcessorHalt
HvlRescindEnlightenments
HvlRestoreEnlightenment
HvlRestoreTime
HvlResumeFromRootCrashdump
HvlResumePartition
HvlRetargetDeviceInterrupt
HvlSchedulerAssistAcknowledgeEvents
HvlSendSyntheticClusterIpi
HvlSetApicVirtualizationAvailable
HvlSetDeviceCapabilities
HvlSetDeviceDmaEnabled
HvlSetHardwareMbecAvailable
HvlSetHpetConfig
HvlSetLogicalProcessorCppcRequest
HvlSetPartitionProperty
HvlSetPasidAddressSpace
HvlSetPlatformIdleState
HvlSetQpcBias
HvlSetRootFaultReportingReady
HvlSetSystemMachineCheckProperty
HvlSetSystemSleepProperty
HvlSetupLiveDumpBuffer
HvlSetupPhysicalFaultNotificationQueue
HvlSharedIsr
HvlSkBugCheckCallbackRoutine
HvlSkCrashdumpCallbackRoutine
HvlStartBootLogicalProcessors
HvlSuspendPartition
HvlSwitchToVsmVtl1
HvlSwitchVirtualAddressSpace
HvlUnblockDefaultDma
HvlUnmapDeviceInterrupt
HvlUnmapDmaRanges
HvlUnregisterDeviceId
HvlUnregisterInterruptCallback
HvlUnregisterWheaErrorNotification
HvlUpdateMicrocodeDatabase
HvlUpdatePerformanceStateCountersForLp
HvlWakeVirtualProcessors
HvlWheaInUsePageOfflineNotificationCallback
HvlWriteApicCommandRegister
HvlWritePerfIoPort
HvlWritePerfMsr
HvlpAcquireHypercallPage
HvlpAffinityToHvProcessorSet
HvlpAffinityToVirtualAffinity
HvlpAllocateEarlyPages
HvlpAllocateOverlayPages
HvlpAllowFastFlushList
HvlpApplyIoCachePolicy
HvlpCheckTscSync
HvlpCompareActiveLpcbs
HvlpComputeLpComparisonMetrics
HvlpCopyFlushVaList
HvlpCountFlushVaList
HvlpDepositPages
HvlpDetermineEnlightenments
HvlpDiscoverTopologyAmd
HvlpDiscoverTopologyComplete
HvlpDiscoverTopologyIntel
HvlpDiscoverTopologyLocal
HvlpDmaFastFlushDeviceDomainVaList
HvlpDmaSlowFlushDeviceDomainVaList
HvlpDynamicUpdateMicrocode
HvlpEndSecurePageListIteration
HvlpEtwRegister
HvlpFastAcknowledgePageRequest
HvlpFastFlushAddressSpaceTb
HvlpFastFlushAddressSpaceTbEx
HvlpFastFlushListTbEx
HvlpFastFlushPasidAddressList
HvlpFastSendSyntheticClusterIpiEx
HvlpFlushPasidAddressSpace
HvlpFlushRangeListTbEx
HvlpFreeOverlayPages
HvlpGetEncryptedDataFromHypervisor
HvlpGetEncryptedDataFromSecureKernel
HvlpGetLogicalProcessorProperty
HvlpGetLpcbByLpIndex
HvlpGetPageList
HvlpGetRegister128
HvlpGetRegister64
HvlpGetVpIndexFromApicId
HvlpGetVtlCallVa
HvlpHandleInsufficientMemory
HvlpHandleIommuFaultMessage
HvlpHvIdentityInfoCallback
HvlpHvStatusIsInsufficientMemory
HvlpHvToNtStatus
HvlpInitializeBootProcessor
HvlpInitializeHvCrashdump
HvlpInitializeHvCrashdumpPhase2
HvlpInitializePartitionInfoPage
HvlpInitializePowerStatistics
HvlpInitializeSvmIommuSupport
HvlpIommuPrqDpcRoutine
HvlpLogGuestStateScrubbingStatus
HvlpLogIommuInitStatus
HvlpLogProcessorStartupFailure
HvlpLpComparison
HvlpLpCpuid
HvlpMapEarlyPages
HvlpMapStatisticsPage
HvlpMarkHvlPagesForHibernation
HvlpMarkHypervisorPagesForHibernation
HvlpPhase0Enlightenments
HvlpPowerPolicySettingCallback
HvlpPowerStateCallback
HvlpPrepareFlushHeader
HvlpProcessIommu
HvlpProcessIommuPrq
HvlpQueryExtendedCapabilities
HvlpQueryHypervisorSchedulerType
HvlpReleaseHypercallPage
HvlpSecureFlushLargeRangeList
HvlpSelectLpSet
HvlpSelectVpSet
HvlpSetPowerProperty
HvlpSetRegister64
HvlpSetupBootProcessorEarlyHypercallPages
HvlpSetupCachedHypercallPages
HvlpSetupPageListIteration
HvlpSetupSchedulerAssist
HvlpSlowAcknowledgePageRequest
HvlpSlowFlushAddressSpaceTb
HvlpSlowFlushAddressSpaceTbEx
HvlpSlowFlushListTbEx
HvlpSlowFlushPasidAddressList
HvlpSlowSendSyntheticClusterIpiEx
HvlpSnapshotCrashArea
HvlpStartPageListIteration
HvlpStartSecurePageListIteration
HvlpStartVirtualProcessor
HvlpSwitchToVsmVtl1RetpolineHelper
HvlpTryConfigureInterface
HvlpUpdateLpcbIndex
HvlpUseExtendedProcessorSetHypercalls
HvlpVtlCallExceptionHandler
HvlpWithdrawPages
HvpAddBin
HvpAddDummyBinToHive
HvpAdjustBitmap
HvpAdjustHiveFreeDisplay
HvpAllExceptionsFatalFilter
HvpAllocateBin
HvpAllocateLogBuffers
HvpAllocateMap
HvpAllocateNonPagedBin
HvpAnalyzeSingleLogFile
HvpApplyIncrementalLogFile
HvpApplyLegacyLogFile
HvpApplyLogEntryDataToFileBackedHive
HvpBuildMapForMemoryBackedHive
HvpCompareLogSequenceNumbers
HvpCopyDataToOffsetArray
HvpCopyModifiedData
HvpCountSetRangesInVector
HvpDelistFreeCell
HvpDetermineFinalViewReservationEnd
HvpDetermineLogFileApplicationOrder
HvpDetermineResultingLoggingState
HvpDoAllocateCell
HvpDropPagedBins
HvpEnlistFreeCell
HvpEnlistFreeCells
HvpExpandMap
HvpFillFileName
HvpFindFreeBin
HvpFindFreeCell
HvpFindNextDirtyBlock
HvpFindNextDirtyRun
HvpFinishPrimaryWrite
HvpFreeBin
HvpFreeHiveFreeDisplay
HvpFreeMap
HvpGenerateLogEntry
HvpGenerateLogEntryChecksums
HvpGenerateLogEntryDirtyData
HvpGenerateLogEntryHeader
HvpGenerateLogEntryMetadata
HvpGenerateLogMetadata
HvpGetBinContextInitialize
HvpGetBinContextMove
HvpGetCellContextInitialize
HvpGetCellContextMove
HvpGetCellContextReinitialize
HvpGetCellFlat
HvpGetCellMap
HvpGetCellPaged
HvpGetHiveHeader
HvpGrowDirtyVectors
HvpHeaderCheckSum
HvpIncrementalLogFileEnumeratorAdvance
HvpInitMap
HvpInpageErrorFilter
HvpIsMetadataArrayCoherent
HvpIsReadErrorTransient
HvpLogEntryCheckDataChecksum
HvpLogEntryCheckHeaderChecksum
HvpLogIneligibleLogHeader
HvpLogInvalidLogHeader
HvpLogTypeToLogArrayIndex
HvpLogUnreadableLog
HvpMakeHiveReadOnly
HvpMapEntryGetBinAddress
HvpMapEntryGetBlockAddress
HvpMapEntryGetFreeBin
HvpMapEntryReleaseBinAddress
HvpMapEntryReleaseBlockAddress
HvpMapHiveImage
HvpMapHiveImageFromFile
HvpMapHiveImageFromViewMap
HvpMappedViewConvertLockedPagesToCOWByPolicy
HvpMappedViewConvertRegionFromLockedToCOWByPolicy
HvpMarkCellDirty
HvpMarkDirty
HvpPerformLogFileRecovery
HvpPointMapEntriesToBuffer
HvpProtectBinPartial
HvpReadHiveDataFromFile
HvpRecoverDataReadRoutine
HvpReleaseCellFlat
HvpReleaseCellPaged
HvpRemapAndEnlistHiveBins
HvpRemoveFreeCellHint
HvpResetPageProtection
HvpSetRangeProtection
HvpShrinkMap
HvpSwapDual
HvpTruncateBins
HvpUpdateRecoveryVector
HvpValidateLoadedBin
HvpViewMapAcquireChargesAndLockViewPages
HvpViewMapAdjustFlag
HvpViewMapCOWAndUnsealRange
HvpViewMapCleanup
HvpViewMapConvertLockedPagesToCOWByPolicy
HvpViewMapCreateView
HvpViewMapCreateViewsForRegion
HvpViewMapDeleteViewTreeNode
HvpViewMapExtendStorage
HvpViewMapFindViewForFileOffset
HvpViewMapFreeView
HvpViewMapGetStorageLength
HvpViewMapMakeViewRangeCOWByCaller
HvpViewMapMakeViewRangeInvalid
HvpViewMapMakeViewRangeUnCOWByCaller
HvpViewMapMakeViewRangeUnCOWByPolicy
HvpViewMapMakeViewRangeValid
HvpViewMapMigrateCOWData
HvpViewMapPromoteRangeToMapping
HvpViewMapReleaseChargesAndUnlockViewPages
HvpViewMapSealRange
HvpViewMapShrinkStorage
HvpViewMapStart
HvpViewMapTouchPages
HvpViewMapUnCOWAndSealRange
INCREASE_MAPPED_TRANSFER_BYTE_COUNT
INCREMENT_ADAPTER_CHANNELS
IPT_TRACING_ENABLED
IS_PTE_NOT_DEMAND_ZERO
I_MinCryptCheckEKU
I_MinCryptFindIssuerCertificateByName
I_MinCryptFindRootByKey
I_MinCryptFindRootByName
I_MinCryptGetCertificateEKUs
I_MinCryptGetCommonName
I_MincryptAddChainInfo
I_MincryptFreeChainInfo
IaLpssInitializePort
IaLpssPciSetPower
IaLpssReadClockParams
IaLpssReadCmdStatus
IaLpssReadPmcsr
IaLpssReadResetRegister
IaLpssSetPowerD0
IaLpssSetPowerD3
IaLpssWriteClockParams
IaLpssWriteCmdStatus
IaLpssWritePmcsr
IaLpssWriteResetRegister
IaaBuildDescriptorCommon
IaaBuildDescriptorFixedCompress
IaaBuildDescriptorHuffmanCompress
IaaBuildDescriptorHuffmanDecompress
IaaCodeValuesSort
IaaGetStatusFromCompletionRecord
IaapSetAecsDecompressionHuffmanTable
IidAreIdsStrictlyEqual
IidCloneDeviceId
IidCloneDeviceIdAcpi
IidCloneDeviceIdPci
IidGetDeviceIdBufferSize
IidValidateDeviceId
InbvAcquireDisplayOwnership
InbvAcquireLock
InbvBitBlt
InbvCheckDisplayOwnership
InbvDetermineFunction
InbvDisplayString
InbvDriverInitialize
InbvEnableBootDriver
InbvEnableDisplayString
InbvGetDisplayState
InbvGetResourceAddress
InbvIndicateProgress
InbvInstallDisplayStringFilter
InbvIsBootDriverInstalled
InbvNotifyDisplayOwnershipChange
InbvNotifyDisplayOwnershipLost
InbvPortGetByte
InbvPortInitialize
InbvPortPollOnly
InbvPortPutByte
InbvPortTerminate
InbvReleaseLock
InbvReleaseResources
InbvResetDisplay
InbvRotateGuiBootDisplay
InbvSetFunction
InbvSetProgressBarSubset
InbvSetScrollRegion
InbvSetTextColor
InbvSetVirtualFrameBuffer
InbvSolidColorFill
InitBootProcessor
InitCounterGroupAps
InitCounterGroupBsp
InitLoadDebuggerSymbols
InitOnceGetStringTableOffset
InitOnceScanIndexes
InitSafeBoot
InitializeBuildStrings
InitializeDynamicPartitioningPolicy
InitializeSListHead
InitializeSidLookupTable
InsertChar
IntPartCreate
IntPartCriticalFailure
IntPartGetClassAffinityGroup
IntPartGetProcessorEfficiencyClass
IntPartIsInterruptSteerable
IntelMicrocodeChecksumValidate
IntelMicrocodeGetRecordData
IntelMicrocodeMetaDataCheck
IntelUpdateMicrocodeGetProcessorFlags
InterlockedPushListSList
IntpAddNextProcessorToPartition
IntpAllocateGroupContext
IntpAllocateProcessorContext
IntpAssignProcessorsToPartitions
IntpInitClassContext
IntpMergeClassContexts
IntpProcessorCompareEfficiencyClass
IoAcquireCancelSpinLock
IoAcquireKsrPersistentMemory
IoAcquireKsrPersistentMemoryEx
IoAcquireRemoveLockEx
IoAcquireVpbSpinLock
IoAddBugcheckTriageThread
IoAddPagesForPartialKernelDump
IoAddProcessThreadsToDump
IoAddProcessesToDump
IoAddThreadStackToDump
IoAddTriageDumpDataBlock
IoAdjustStackSizeForRedirection
IoAllocateAdapterChannel
IoAllocateController
IoAllocateDriverObjectExtension
IoAllocateErrorLogEntry
IoAllocateGenericErrorLogEntry
IoAllocateIrp
IoAllocateIrpEx
IoAllocateMdl
IoAllocateMiniCompletionPacket
IoAllocateSfioStreamIdentifier
IoAllocateWorkItem
IoAllowExecution
IoApplyPriorityInfoThread
IoAssignResources
IoAsynchronousPageWrite
IoAttachDevice
IoAttachDeviceByPointer
IoAttachDeviceToDeviceStack
IoAttachDeviceToDeviceStackSafe
IoBoostThreadIo
IoBoostThreadIoPriority
IoBugCheckDriverDataCallback
IoBugCheckTriageDumpDataCallback
IoBuildAsynchronousFsdRequest
IoBuildDeviceIoControlRequest
IoBuildPartialMdl
IoBuildPoDeviceNotifyList
IoBuildSynchronousFsdRequest
IoCallDriver
IoCancelFileOpen
IoCancelIrp
IoCancelMiniCompletionPacket
IoCancelThreadIo
IoCaptureLiveDump
IoCapturePristineTriageDump
IoChangeFileObjectFilterContext
IoCheckDesiredAccess
IoCheckEaBufferValidity
IoCheckFileObjectOpenedAsCopyDestination
IoCheckFileObjectOpenedAsCopySource
IoCheckFunctionAccess
IoCheckLinkShareAccess
IoCheckQuerySetFileInformation
IoCheckQuerySetVolumeInformation
IoCheckQuotaBufferValidity
IoCheckRedirectionTrustLevel
IoCheckShareAccess
IoCheckShareAccessEx
IoCleanupIrp
IoClearActivityIdThread
IoClearAdapterCryptoEngineExtension
IoClearFsTrackOffsetState
IoClearIrpExtraCreateParameter
IoCompleteRequest
IoComputeRedirectionTrustLevel
IoConfigureCrashDump
IoConnectInterrupt
IoConnectInterruptEx
IoControlPnpDeviceActionQueue
IoConvertFileHandleToKernelHandle
IoCopyDeviceObjectHint
IoCreateArcName
IoCreateController
IoCreateDevice
IoCreateDeviceSecure
IoCreateDisk
IoCreateDriver
IoCreateDriverProxyExtension
IoCreateFile
IoCreateFileEx
IoCreateFileSpecifyDeviceObjectHint
IoCreateNotificationEvent
IoCreateObjectTypes
IoCreateStreamFileObject
IoCreateStreamFileObjectEx
IoCreateStreamFileObjectEx2
IoCreateStreamFileObjectLite
IoCreateSymbolicLink
IoCreateSymbolicLink2
IoCreateSynchronizationEvent
IoCreateSystemThread
IoCreateUnprotectedSymbolicLink
IoCsqInitialize
IoCsqInitializeEx
IoCsqInsertIrp
IoCsqInsertIrpEx
IoCsqRemoveIrp
IoCsqRemoveNextIrp
IoDecrementKeepAliveCount
IoDeleteController
IoDeleteDevice
IoDeleteDriver
IoDeleteSymbolicLink
IoDetachDevice
IoDiagTraceDevicesRundown
IoDiscardDeferredLiveDumpData
IoDisconnectInterrupt
IoDisconnectInterruptEx
IoDiskIoAttributionAllocate
IoDiskIoAttributionDereference
IoDiskIoAttributionQuery
IoDiskIoAttributionReference
IoDriverProxyCreateHotSwappableWorkerThread
IoDumpStackResumeCapable
IoDuplicateDependency
IoEnqueueIrp
IoEnumerateDeviceObjectList
IoEnumerateEnvironmentVariablesEx
IoEnumerateKsrPersistentMemoryEx
IoEnumerateRegisteredFiltersList
IoFastQueryNetworkAttributes
IoFillDumpHeader
IoFillTriageDumpBuffer
IoFindDeviceThatFailedIrp
IoFlushAdapterBuffers
IoFlushAdapterBuffersV2
IoFlushAdapterBuffersV3
IoForwardIrpSynchronously
IoFreeAdapterChannel
IoFreeAdapterChannelV2
IoFreeAdapterChannelV3
IoFreeAdapterChannelV3Internal
IoFreeAdapterChannelV3Passive
IoFreeController
IoFreeDumpRange
IoFreeErrorLogEntry
IoFreeIrp
IoFreeKsrPersistentMemory
IoFreeMapRegisters
IoFreeMapRegistersThunk
IoFreeMapRegistersV2
IoFreeMapRegistersV3
IoFreeMdl
IoFreeMiniCompletionPacket
IoFreePoDeviceNotifyList
IoFreeSfioStreamIdentifier
IoFreeWorkItem
IoGetActivityIdIrp
IoGetActivityIdThread
IoGetAdapterCryptoEngineExtension
IoGetAffinityInterrupt
IoGetAttachedDevice
IoGetAttachedDeviceReference
IoGetAttachedDeviceReferenceWithTag
IoGetBaseFileSystemDeviceObject
IoGetBootDiskInformation
IoGetBootDiskInformationLite
IoGetConfigurationInformation
IoGetContainerInformation
IoGetCopyInformationExtension
IoGetDeviceAttachmentBaseRef
IoGetDeviceAttachmentBaseRefWithTag
IoGetDeviceDirectory
IoGetDeviceInstanceName
IoGetDeviceInterfaceAlias
IoGetDeviceInterfacePropertyData
IoGetDeviceInterfaces
IoGetDeviceNumaNode
IoGetDeviceObjectPointer
IoGetDeviceProperty
IoGetDevicePropertyData
IoGetDeviceToVerify
IoGetDiskDeviceObject
IoGetDmaAdapter
IoGetDriverDirectory
IoGetDriverObjectExtension
IoGetDriverProxyEndpointWrapper
IoGetDriverProxyFeatures
IoGetDumpHiberRanges
IoGetDumpStack
IoGetDumpStackTransferSizes
IoGetEnvironmentVariableEx
IoGetFileMemoryPartitionInformation
IoGetFileObjectFilterContext
IoGetFileObjectGenericMapping
IoGetFsTrackOffsetState
IoGetFsZeroingOffset
IoGetGenericIrpExtension
IoGetInitialStack
IoGetInitiatorProcess
IoGetIoAttributionHandle
IoGetIoPriorityHint
IoGetIoRateControl
IoGetIommuInterface
IoGetIommuInterfaceEx
IoGetIrpExtraCreateParameter
IoGetKsrPersistentMemoryBuffer
IoGetLegacyVetoList
IoGetLoadedDriverInfo
IoGetLowerDeviceObject
IoGetLowerDeviceObjectWithTag
IoGetOplockFullFoExt
IoGetOplockKeyContext
IoGetOplockKeyContextEx
IoGetPagingIoPriority
IoGetRelatedDeviceObject
IoGetRelatedTargetDevice
IoGetRequestorProcess
IoGetRequestorProcessId
IoGetRequestorSessionId
IoGetSfioStreamIdentifier
IoGetShadowFileInformation
IoGetSilo
IoGetSiloParameters
IoGetStackLimits
IoGetSymlinkSupportInformation
IoGetTopLevelIrp
IoGetTransactionParameterBlock
IoIncrementKeepAliveCount
IoInitSystem
IoInitSystemPreDrivers
IoInitializeCrashDump
IoInitializeDumpStack
IoInitializeIrp
IoInitializeIrpEx
IoInitializeIrpPriv
IoInitializeLiveDump
IoInitializeMiniCompletionPacket
IoInitializeProcessor
IoInitializeRemoveLockEx
IoInitializeTimer
IoInitializeWorkItem
IoInvalidateDeviceRelations
IoInvalidateDeviceState
IoIrpHasFsTrackOffsetExtensionType
IoIs32bitProcess
IoIsActivityTracingEnabled
IoIsDeviceEjectable
IoIsFileObjectIgnoringSharing
IoIsFileOriginRemote
IoIsInitiator32bitProcess
IoIsIoPriorityBoostActive
IoIsKernelPagingRead
IoIsOperationSynchronous
IoIsPartialDumpRetry
IoIsProcessAntiMalware
IoIsSystemThread
IoIsValidIrpStatus
IoIsValidNameGraftingBuffer
IoIsWdmVersionAvailable
IoLoadCrashDumpDriver
IoLockUnlockPnpDeviceTree
IoMakeAssociatedIrp
IoMakeAssociatedIrpEx
IoMakeAssociatedIrpPriv
IoMapKsrPersistentMemoryEx
IoMapTransfer
IoMapTransferInternal
IoNotifyDump
IoNotifyDumpEx
IoNotifyPowerOperationVetoed
IoNotifyQuotaState
IoOpenDeviceInterfaceRegistryKey
IoOpenDeviceRegistryKey
IoOpenDriverRegistryKey
IoPageRead
IoPageReadEx
IoPerfInit
IoPerfReset
IoProcessPassiveInterrupts
IoPropagateActivityIdToThread
IoPropagateIrpExtension
IoPropagateIrpExtensionEx
IoProvisionCrashDumpKey
IoQueryDeviceDescription
IoQueryEnvironmentVariableInfoEx
IoQueryFileDosDeviceName
IoQueryFileInformation
IoQueryFullDriverPath
IoQueryInformationByName
IoQueryInterface
IoQueryKsrPersistentMemorySize
IoQueryKsrPersistentMemorySizeEx
IoQueryLowPriorityIoInformation
IoQuerySystemDeviceName
IoQueryVhdBootInformation
IoQueryVolumeInformation
IoQueueThreadIrp
IoQueueWorkItem
IoQueueWorkItemEx
IoQueueWorkItemToNode
IoRaiseHardError
IoRaiseInformationalHardError
IoReadDiskSignature
IoReadPartitionTable
IoReadPartitionTableEx
IoRecordIoAttribution
IoReferenceIoAttributionFromThread
IoRegisterBootDriverCallback
IoRegisterBootDriverReinitialization
IoRegisterContainerNotification
IoRegisterDeviceInterface
IoRegisterDriverProxyEndpoints
IoRegisterDriverReinitialization
IoRegisterFileSystem
IoRegisterFsRegistrationChange
IoRegisterFsRegistrationChangeMountAware
IoRegisterIoTracking
IoRegisterLastChanceShutdownNotification
IoRegisterPlugPlayNotification
IoRegisterPriorityCallback
IoRegisterShutdownNotification
IoReleaseCancelSpinLock
IoReleaseIoRateControl
IoReleaseRemoveLockAndWaitEx
IoReleaseRemoveLockEx
IoReleaseVpbSpinLock
IoRemoveIoCompletion
IoRemoveLinkShareAccess
IoRemoveLinkShareAccessEx
IoRemoveShareAccess
IoReplaceFileObjectName
IoReplacePartitionUnit
IoReportDetectedDevice
IoReportHalResourceUsage
IoReportInterruptActive
IoReportInterruptInactive
IoReportResourceForDetection
IoReportResourceUsage
IoReportResourceUsageInternal
IoReportRootDevice
IoReportTargetDeviceChange
IoReportTargetDeviceChangeAsynchronous
IoRequestDeviceEject
IoRequestDeviceEjectEx
IoRequestDeviceRemovalForReset
IoReserveDependency
IoReserveKsrPersistentMemory
IoReserveKsrPersistentMemoryEx
IoResolveDependency
IoRetrievePriorityInfo
IoRetryAsMiniDump
IoReuseIrp
IoRevertFromDemotedDumpType
IoRevokeHandlesForProcess
IoSaveBugCheckProgress
IoSaveBugCheckRecoveryStatus
IoSaveInitialBugCheckProgress
IoSetActivityIdIrp
IoSetActivityIdThread
IoSetAdapterCryptoEngineExtension
IoSetBugCheckProgressFlag
IoSetCompletionRoutineEx
IoSetDeferredLiveDumpFileHandle
IoSetDependency
IoSetDeviceInterfacePropertyData
IoSetDeviceInterfaceState
IoSetDevicePropertyData
IoSetDeviceToVerify
IoSetDiskIoAttributionFromThread
IoSetDiskIoAttributionOnProcess
IoSetDumpRange
IoSetEnvironmentVariableEx
IoSetFileObjectIgnoreSharing
IoSetFileOrigin
IoSetFsTrackOffsetState
IoSetFsZeroingOffset
IoSetFsZeroingOffsetRequired
IoSetGenericIrpExtension
IoSetHardErrorOrVerifyDevice
IoSetInformation
IoSetIoAttributionIrp
IoSetIoCompletion
IoSetIoCompletionEx
IoSetIoCompletionEx2
IoSetIoCompletionEx3
IoSetIoPriorityHint
IoSetIoPriorityHintIntoFileObject
IoSetIoPriorityHintIntoThread
IoSetIrpExtraCreateParameter
IoSetLinkShareAccess
IoSetMasterIrpStatus
IoSetOplockKeyContext
IoSetOplockPrivateFoExt
IoSetPartitionInformation
IoSetPartitionInformationEx
IoSetShadowFileInformation
IoSetShareAccess
IoSetShareAccessEx
IoSetStartIoAttributes
IoSetSystemPartition
IoSetThreadHardErrorMode
IoSetTopLevelIrp
IoShutdownSystem
IoSizeOfIrpEx
IoSizeofGenericIrpExtension
IoSizeofWorkItem
IoStartDiskIoAttributionForContext
IoStartIoRateControl
IoStartNextPacket
IoStartNextPacketByKey
IoStartPacket
IoStartTimer
IoSteerInterrupt
IoStopDiskIoAttributionForContext
IoStopIoRateControl
IoStopTimer
IoSynchronousCallDriver
IoSynchronousPageWrite
IoSynchronousPageWriteEx
IoTestDependency
IoThreadToProcess
IoTransferActivityId
IoTranslateBusAddress
IoTryQueueWorkItem
IoTryReleasePages
IoUninitializeWorkItem
IoUnregisterBootDriverCallback
IoUnregisterContainerNotification
IoUnregisterFileSystem
IoUnregisterFsRegistrationChange
IoUnregisterIoTracking
IoUnregisterPlugPlayNotification
IoUnregisterPlugPlayNotificationEx
IoUnregisterPriorityCallback
IoUnregisterShutdownNotification
IoUpdateBugCheckProgressEnvVariable
IoUpdateDumpPhysicalRanges
IoUpdateIrpIoAttributionHandle
IoUpdateLinkShareAccess
IoUpdateLinkShareAccessEx
IoUpdateShareAccess
IoUpdateThreadIoRateThrottle
IoValidateDeviceIoControlAccess
IoVerifierCheckForSettingsChange
IoVerifierInit
IoVerifyPartitionTable
IoVerifyVolume
IoVolumeDeviceNameToGuid
IoVolumeDeviceNameToGuidPath
IoVolumeDeviceToDosName
IoVolumeDeviceToGuid
IoVolumeDeviceToGuidPath
IoWMIAllocateInstanceIds
IoWMICompleteRequest
IoWMIDeviceObjectToInstanceName
IoWMIDeviceObjectToProviderId
IoWMIExecuteMethod
IoWMIHandleToInstanceName
IoWMIOpenBlock
IoWMIQueryAllData
IoWMIQueryAllDataMultiple
IoWMIQuerySingleInstance
IoWMIQuerySingleInstanceMultiple
IoWMIRegistrationControl
IoWMISetNotificationCallback
IoWMISetSingleInstance
IoWMISetSingleItem
IoWMISuggestInstanceName
IoWMISystemControl
IoWMIWriteEvent
IoWithinStackLimits
IoWriteCapturedPristineTriageDumpToDedicatedDumpFile
IoWriteCrashDump
IoWriteDeferredLiveDumpData
IoWriteErrorLogEntry
IoWriteKsrPersistentMemory
IoWritePartitionTable
IoWritePartitionTableEx
IofCallDriver
IofCallDriverSpecifyReturn
IofCompleteRequest
IofGetDriverProxyWrapperFromEndpoint
IommuBeginDeviceReset
IommuCreateAtsDevice
IommuDeleteAtsDevice
IommuDeviceCreate
IommuDeviceDelete
IommuDevicePowerChange
IommuDeviceQueryDomainTypes
IommuDeviceQueryInformation
IommuDisableDevicePasid
IommuDomainAttachDevice
IommuDomainAttachDeviceEx
IommuDomainAttachPasidDevice
IommuDomainConfigure
IommuDomainCreate
IommuDomainCreateEx
IommuDomainDelete
IommuDomainDetachDevice
IommuDomainDetachDeviceEx
IommuDomainDetachPasidDevice
IommuEnableDevicePasid
IommuFinalizeDeviceReset
IommuFlushAllPasid
IommuFlushDomain
IommuFlushDomainVaList
IommuFlushTb
IommuFreeLibraryContext
IommuFreeReservedLogicalAddressRange
IommuGetAtsSettings
IommuGetConfiguration
IommuGetLeastMaximumSupportedAsidValue
IommuGetLibraryContext
IommuHvDevicePowerChange
IommuHvFlushAllPasid
IommuHvFlushTb
IommuHvGetConfiguration
IommuHvSetAddressSpace
IommuInitializeLibrary
IommuMapDevice
IommuMapIdentityRange
IommuMapIdentityRangeEx
IommuMapLogicalRange
IommuMapLogicalRangeEx
IommuMapReservedLogicalRange
IommuPasidDeviceCreate
IommuPasidDeviceDelete
IommuProcessPageRequestQueue
IommuQueryInputMappings
IommuRegisterInterfaceStateChangeCallback
IommuReserveLogicalAddressRange
IommuSetAddressSpace
IommuSetDeviceFaultReporting
IommuSetDeviceFaultReportingEx
IommuUnmapDevice
IommuUnmapIdentityRange
IommuUnmapIdentityRangeEx
IommuUnmapLogicalRange
IommuUnmapReservedLogicalRange
IommuUnregisterInterfaceStateChangeCallback
IommupCreateDeviceId
IommupDeviceDisablePasidTaggedDma
IommupDeviceDisableSvm
IommupDeviceEnablePasidTaggedDma
IommupDeviceEnableSvm
IommupDeviceGetPasidDevice
IommupDeviceGetPasidSettings
IommupDomainAttachPasidDevice
IommupDomainDetachPasidDevice
IommupFindAndPopCachedDevice
IommupFreeSystemContext
IommupGetSystemContext
IommupHvAttachDeviceDomain
IommupHvAttachPasidDevice
IommupHvAttachPasidDeviceDomain
IommupHvConfigureDeviceDomain
IommupHvCreateSvmPasidSpace
IommupHvDetachPasidDevice
IommupHvDetachPasidDeviceDomain
IommupHvDismissPageFault
IommupHvFlushDeviceDomainVaList
IommupHvFlushDomainTbs
IommupHvGetDeviceSvmCapabilities
IommupHvGetPageFault
IommupHvInitializeLibrary
IommupHvInterruptRoutine
IommupHvIsStage1DmarCompatible
IommupHvMapDevice
IommupHvMapDeviceIdentityRange
IommupHvMapDeviceLogical
IommupHvMapDeviceLogicalRange
IommupHvSetRootFaultReportingReady
IommupHvUnblockDefaultDma
IommupHvUnmapDevice
IommupHvUnmapDeviceLogicalRange
IommupHvUnregisterDeviceId
IommupHvValidatePageRequestGpa
IommupMapDeviceInternal
IommupPasidDeviceCreate
IommupPasidDeviceDelete
IommupPasidDevicePowerCallback
IommupProcessPhysicalAddress
IommupUnmapDeviceInternal
IommupValidateMdl
IopAbortRequest
IopAcquireGlobalPassiveInterruptListLock
IopAcquirePassiveInterruptBlockLock
IopAcquireReleaseDispatcherLock
IopAddAddressRangeToRemovePagesArray
IopAddBootDiskInformation
IopAddBugcheckDirectedTransitionTriageData
IopAddBugcheckPnpWatchdogTriageData
IopAddBugcheckPowerTriageData
IopAddBugcheckTriageCompletionQueue
IopAddBugcheckTriageDataFromParameters
IopAddBugcheckTriageDevice
IopAddBugcheckTriageDeviceNode
IopAddBugcheckTriageIrp
IopAddBugcheckTriagePowerIrpWorkers
IopAddBugcheckTriagePowerIrps
IopAddBugcheckTriageThread
IopAddBugcheckTriageUnicodeString
IopAddBugcheckTriageWorkQueue
IopAddCodeRegion
IopAddLiveDumpPagesToPartialKernelDump
IopAddMiniDumpPagesToPartialKernelDump
IopAddPageDumpRange
IopAddPageRangeToPageMaps
IopAddPageToPageMap
IopAddRelationToList
IopAddRemoveReqDescs
IopAddRunTimeTriageDataBlocks
IopAddStackSegmentKernelShadowStackToDump
IopAddTriageDumpDataBlock
IopAddTriageDumpDataToPartialKernelDump
IopAdjustFileObjectKeepAliveCount
IopAllocRealFileObject
IopAllocateAndLockMdl
IopAllocateAndPopulateWriteIrp
IopAllocateBackpocketIrp
IopAllocateBootResources
IopAllocateBootResourcesInternal
IopAllocateErrorLogEntry
IopAllocateFileObjectExtension
IopAllocateGenericTableEntry
IopAllocateIrpCleanup
IopAllocateIrpExReturn
IopAllocateIrpExtension
IopAllocateIrpMustSucceed
IopAllocateIrpPrivate
IopAllocateIrpWithExtension
IopAllocateLegacyBootResources
IopAllocateMdl
IopAllocateMiniCompletionPacket
IopAllocatePassiveInterruptBlock
IopAllocateRelationList
IopAllocateReserveIrp
IopAllocateUnicodeString
IopAllowRemoteDASD
IopApcHardError
IopAppendLegacyVeto
IopApplyMutableTagToRegistryKey
IopApplySystemPartitionProt
IopAttachDeviceToDeviceStackSafe
IopBoostThreadCallback
IopBootAllocation
IopBootLog
IopBootLogDriver
IopBootLogToFile
IopBugCheckProgressEfiVariableServicesAvailable
IopBuildAsynchronousFsdRequest
IopBuildDeviceIoControlRequest
IopBuildFullDriverPath
IopBuildGlobalSymbolicLinkString
IopBuildSynchronousFsdRequest
IopBusNumberInitialize
IopBusNumberPackResource
IopBusNumberScoreRequirement
IopBusNumberUnpackRequirement
IopBusNumberUnpackResource
IopCachePreviousBootData
IopCalculateStackInformation
IopCallArbiter
IopCallBootDriverReinitializationRoutines
IopCallDriverReference
IopCallDriverReinitializationRoutines
IopCancelAlertedRequest
IopCancelApcRequired
IopCancelIoFile
IopCancelIrpsInCurrentThreadList
IopCancelIrpsInCurrentThreadListApcRoutine
IopCancelIrpsInCurrentThreadListDummyApc
IopCancelIrpsInCurrentThreadListSpecialApc
IopCancelIrpsInFileObjectList
IopCancelIrpsInThreadList
IopCancelIrpsInThreadListForCurrentProcess
IopCancelPendingEject
IopCancelSynchronousIrpsForThread
IopCancelWaitCompletionPacket
IopCaptureObjectName
IopChangeInterfaceType
IopCheckAndUpdateStopOnSymlinkEcp
IopCheckBackupRestorePrivilege
IopCheckDeviceAndDriver
IopCheckDeviceFlags
IopCheckDiskName
IopCheckGetQuotaBufferValidity
IopCheckHandleForRevocation
IopCheckHardErrorEmpty
IopCheckIfMergeRequired
IopCheckIfNotNativeDriver
IopCheckInitiatorHint
IopCheckListForCancelableIrp
IopCheckSessionDeviceAccess
IopCheckStackForTransactionSupport
IopCheckTopDeviceHint
IopCheckUnloadDriver
IopCheckVpbMounted
IopChildToRootTranslation
IopCleanupExtraCreateParameters
IopCleanupFileObjectIosbRange
IopCleanupNotifications
IopCloseFile
IopCloseFileObjectExtension
IopCloseIoCompletion
IopCloseIoRing
IopCloseWaitCompletionPacket
IopCollectTriageDumpData
IopCombineCmResourceList
IopCombineLegacyResources
IopCommitConfiguration
IopCompactRemovePagesArray
IopCompareIosbRanges
IopCompareReqAlternativePriority
IopCompleteIoRingEntry
IopCompletePageWrite
IopCompleteRequest
IopCompleteUnloadOrDelete
IopConnectInterrupt
IopConnectInterruptFullySpecified
IopConnectLineBasedInterrupt
IopConnectLinkTrackingPort
IopConnectMessageBasedInterrupt
IopConstructInMemoryDumpHeader
IopCopyAbortCopyReadRequest
IopCopyBootLogRegistryToFile
IopCopyCompleteReadIrp
IopCopyCompleteReadRequest
IopCopyOverNewPath
IopCopyOverNewPathSecure
IopCrashDumpPolicyChangeWnfCallback
IopCreateArcName
IopCreateArcNames
IopCreateArcNamesCd
IopCreateArcNamesDisk
IopCreateCmResourceList
IopCreateDefaultDeviceSecurityDescriptor
IopCreateFile
IopCreateIoRingObjectType
IopCreateLegacyDeviceIds
IopCreatePassiveInterruptRealtimeThreads
IopCreateRegistryKeyEx
IopCreateRootDirectories
IopCreateRootEnumeratedDeviceObject
IopCreateSecureDeviceClassSettings
IopCreateSecurityCheck
IopCreateSecurityDescriptorPerType
IopCreateUmdfDirectory
IopCreateUnicodeFromAnsiBuffer
IopCreateVpb
IopCsqCancelRoutine
IopDeallocateApc
IopDebugPrint
IopDecDisableableDepends
IopDecrementCompletionContextUsageCount
IopDecrementDeviceObjectHandleCount
IopDecrementDeviceObjectRef
IopDecrementDeviceObjectRefCount
IopDecrementVpbRefCount
IopDeleteDevice
IopDeleteDriver
IopDeleteFile
IopDeleteFileObjectExtension
IopDeleteIoCompletion
IopDeleteIoCompletionInternal
IopDeleteIoRing
IopDequeueIrpFromFileObject
IopDequeueIrpFromThread
IopDereferencePassiveInterruptBlock
IopDereferenceVpbAndFree
IopDestroyActiveConnectBlock
IopDestroyDeviceNode
IopDestroyPassiveInterruptBlock
IopDeviceEjectComplete
IopDeviceInterfaceFilterCallback
IopDeviceObjectFromSymbolicName
IopDisableCrashDump
IopDisableTimer
IopDisassociateThreadIrp
IopDiskIoAttributionTreeCompare
IopDispatchSessionNotifications
IopDmaInitialize
IopDmaOverrideConflict
IopDmaPackResource
IopDmaScoreRequirement
IopDmaUnpackRequirement
IopDmaUnpackResource
IopDoDeferredSetInterfaceState
IopDoesCompletionNeedsApc
IopDropIrp
IopDumpCallAddPagesCallbacks
IopDumpCallRemovePagesCallbacks
IopDumpIsTracingEnabled
IopDumpTraceCrashDumpDisabled
IopDumpTraceCrashDumpReconfiguration
IopDumpTraceDisableCrashDumpFailure
IopDumpTraceForceDumpDisabled
IopDumpTraceFreeDumpStackFailure
IopDumpTraceInitializeCrashDumpFailure
IopDumpTraceInitializeDumpStackFailure
IopDumpTraceLoadCrashDumpDriverFailure
IopDumpTraceLoadDumpStackFailure
IopDumpTracingControlCallback
IopDuplicateDetection
IopEfiStatusToNTSTATUS
IopEjectDevice
IopEnableTimer
IopEnumerateEnvironmentVariablesHal
IopEnumerateEnvironmentVariablesSysEnv
IopEnumerateEnvironmentVariablesTrEE
IopEnumerateRelations
IopErrorLogConnectSession
IopErrorLogDpc
IopErrorLogGetEntry
IopErrorLogQueueRequest
IopErrorLogRequeueEntry
IopErrorLogThread
IopEtwEnableCallback
IopExceptionCleanupEx
IopExceptionFilter
IopExceptionFilterMode
IopExecuteHardwareProfileChange
IopExecuteHwpDefaultSelect
IopFastQueryNetworkAttributes
IopFetchConfigurationInformation
IopFileObjectRevoked
IopFileUtilClearAttributes
IopFileUtilRename
IopFileUtilWalkDirectoryTreeBottomUp
IopFileUtilWalkDirectoryTreeHelper
IopFileUtilWalkDirectoryTreeTopDown
IopFillTriageDumpDataBlocks
IopFilterAndAddPageRangeToPageMaps
IopFilterResourceRequirementsCall
IopFindDiskIoAttribution
IopFindLegacyBusDeviceNode
IopFindLegacyDeviceNode
IopFindMatchingComponentsLengthR
IopFindPassiveInterruptBlock
IopFindPassiveInterruptBlockLocked
IopFindResourceHandlerInfo
IopFindSystemDevice
IopFlushBuffersFile
IopFreeBackpocketIrp
IopFreeBandwidthContract
IopFreeCompletionListPackets
IopFreeCopyObjectsFromDataBuffer
IopFreeCopyObjectsFromIrp
IopFreeGenericTableEntry
IopFreeIrp
IopFreeIrpExtension
IopFreeMiniCompletionPacket
IopFreePoDeviceNotifyListHead
IopFreeRelationList
IopFreeReqAlternative
IopFreeReqList
IopFreeReserveIrp
IopFreeWaitCompletionPacket
IopGenericPackResource
IopGenericScoreRequirement
IopGenericTranslateOrdering
IopGenericUnpackRequirement
IopGenericUnpackResource
IopGetBasicInformationFile
IopGetBootDiskInformation
IopGetBootDiskInformationLite
IopGetDeviceAttachmentBase
IopGetDeviceInterfaces
IopGetDevicePDO
IopGetDriverNameFromKeyNode
IopGetDriverPathInformation
IopGetEnvironmentVariableHal
IopGetEnvironmentVariableSysEnv
IopGetEnvironmentVariableTrEE
IopGetFileInformation
IopGetFileVolumeNameInformation
IopGetFsRegistrationInProgress
IopGetInterruptConnectionData
IopGetLegacyVetoListDeviceNode
IopGetLegacyVetoListDrivers
IopGetMaxValidMemorySize
IopGetMaxValidMemorySizeDown
IopGetModeInformation
IopGetMountFlag
IopGetNetworkOpenInformation
IopGetNumaNodeInformation
IopGetOriginalServiceName
IopGetPersistedStateLocation
IopGetPhysicalMemoryBlock
IopGetRegistryBoolValue
IopGetRegistryKeyInformation
IopGetRegistryULongValue
IopGetRegistryValue
IopGetRegistryValues
IopGetRelatedFileName
IopGetRootDeviceId
IopGetRootDevices
IopGetSecurityDescriptorInformation
IopGetSessionIdFromPDO
IopGetSessionIdFromSymbolicName
IopGetSetObjectId
IopGetSetSecurityObject
IopGetSetSpecificExtension
IopGetSetStreamIdentifier
IopGetThreadActiveConsoleId
IopGetVolumeId
IopGraftName
IopHardErrorThread
IopIncDisableableDepends
IopIncrementCompletionContextUsageCountAndReadData
IopIncrementDeviceObjectRefCount
IopIncrementVpbRefCount
IopInitActivityIdIrp
IopInitCrashDumpDuringSysInit
IopInitCrashDumpRegCallback
IopInitDumpCapsuleSupport
IopInitializeActiveConnectBlock
IopInitializeBootDrivers
IopInitializeBootLogging
IopInitializeBugCheckDriverData
IopInitializeBuiltinDriver
IopInitializeCrashDump
IopInitializeDeviceInstanceKey
IopInitializeDumpPolicySettings
IopInitializeInMemoryDumpData
IopInitializeMdlCache
IopInitializeOfflineCrashDump
IopInitializePlugPlayServices
IopInitializeRemovePagesArray
IopInitializeReserveIrps
IopInitializeResourceMap
IopInitializeSessionNotifications
IopInitializeSystemDrivers
IopInitializeSystemVariableService
IopInitializeTriageDumpData
IopInsertActiveConnectListLocked
IopInsertLegacyBusDeviceNode
IopInsertPassiveInterruptBlock
IopInsertRemoveDevice
IopInterlockedDecrementUlong
IopInterlockedInsertHeadList
IopInterlockedInsertTailList
IopInterlockedRemoveHeadList
IopInvalidDeviceRequest
IopInvalidateBusRelationsWorker
IopInvalidateVolumesForDevice
IopIoRateStartRateControl
IopIoRingCleanupRegBufferArray
IopIoRingCompleteIrp
IopIoRingDispatchCancel
IopIoRingDispatchComplete
IopIoRingDispatchFlush
IopIoRingDispatchRead
IopIoRingDispatchReadScatter
IopIoRingDispatchRegisterBuffers
IopIoRingDispatchRegisterFiles
IopIoRingDispatchWrite
IopIoRingDispatchWriteGather
IopIoRingGetBuffer
IopIoRingReferenceFileObject
IopIoRingSetupCompletionWait
IopIoRingUpdateCompletionUserEvent
IopIoRingWaitForCompletionEvent
IopIrpExtensionControl
IopIrpHasExtensionType
IopIrpHasValidCombinationOfExtensionTypes
IopIrpStackProfilerDpcRoutine
IopIrqInitialize
IopIrqPackResource
IopIrqScoreRequirement
IopIrqUnpackRequirement
IopIrqUnpackResource
IopIsActivityTracingEnabled
IopIsActivityTracingEventEnabled
IopIsAddressRangeValid
IopIsBitlockerOn
IopIsDescendantNode
IopIsFileOpenOrSection
IopIsIosbInLockedRange
IopIsKnownGoodLegacyFsFilter
IopIsNotNativeDriverImage
IopIsNotifyInBroadcast
IopIsPciRootBus
IopIsReportedAlready
IopIsRootEnumeratedDeviceObjectActive
IopIssueSystemEnvironmentCallout
IopIssueSystemEnvironmentRequest
IopIssueTrEERequest
IopKeepAliveWorker
IopLegacyResourceAllocation
IopLiveDumpAddIptTraceBuffers
IopLiveDumpAddIptTraceBuffersPredicate
IopLiveDumpAddPfnDatabase
IopLiveDumpAddPfnDatabasePredicate
IopLiveDumpAddPoolTrackTables
IopLiveDumpAddPoolTrackTablesPredicate
IopLiveDumpAddProcessFilter
IopLiveDumpAddProcesses
IopLiveDumpAddProcessesCallback
IopLiveDumpAddProcessesPredicate
IopLiveDumpAddTriageDumpData
IopLiveDumpAddTriageDumpDataPredicate
IopLiveDumpAllocAndInitProcessFilters
IopLiveDumpAllocAndInitResources
IopLiveDumpAllocateDumpBuffers
IopLiveDumpAllocateExtraBuffers
IopLiveDumpAllocateFromIOSpace
IopLiveDumpAllocateFromVMMemoryPartition
IopLiveDumpAllocateIoSpaceRanges
IopLiveDumpAllocateIptBuffers
IopLiveDumpAllocateMappingResources
IopLiveDumpBufferDumpData
IopLiveDumpCallRemovePagesCallbacks
IopLiveDumpCapture
IopLiveDumpCaptureDumpStart
IopLiveDumpCaptureMemoryPages
IopLiveDumpCheckTermination
IopLiveDumpCollectPages
IopLiveDumpCorralDpc
IopLiveDumpCorralProcessors
IopLiveDumpDiscardVirtualAddressRange
IopLiveDumpEndMirroringCallback
IopLiveDumpEnterCorralledState
IopLiveDumpEstimateMemoryPages
IopLiveDumpFreeDumpBuffers
IopLiveDumpFreeIoSpaceRanges
IopLiveDumpFreeMappingResources
IopLiveDumpGenerateIptSecondaryData
IopLiveDumpGetCapturePages
IopLiveDumpGetCapturePagesNoLock
IopLiveDumpGetExtraMergePages
IopLiveDumpGetMillisecondCounter
IopLiveDumpGetNtMergePages
IopLiveDumpInitRegistrySettings
IopLiveDumpInitiateCorralStateChange
IopLiveDumpIsChunkInIOSpace
IopLiveDumpIsChunkInIOSpaceBuffer
IopLiveDumpIsProcessPageIncluded
IopLiveDumpIsTracingEnabled
IopLiveDumpIsUnderMemoryPressure
IopLiveDumpLookupProcessFilter
IopLiveDumpMarkDeviceNode
IopLiveDumpMarkImportantDumpData
IopLiveDumpMarkLoadedModuleList
IopLiveDumpMarkProcessorData
IopLiveDumpMarkRequiredDumpData
IopLiveDumpMirrorPhysicalMemoryCallback
IopLiveDumpOpenVMMemoryPartition
IopLiveDumpPolicyChangeWnfCallback
IopLiveDumpPopulateBitmapForDump
IopLiveDumpProcessCorralStateChange
IopLiveDumpQueryIOSpaceRanges
IopLiveDumpRegisterWnfNotificationCallback
IopLiveDumpReleaseResources
IopLiveDumpRemoveSystemCacheFromDump
IopLiveDumpShouldCheckChunkCRC
IopLiveDumpStartMirroringCallback
IopLiveDumpTrace
IopLiveDumpTraceBufferAllocation
IopLiveDumpTraceBufferEstimation
IopLiveDumpTraceCaptureGenerateIptSecondaryDataDuration
IopLiveDumpTraceCaptureMemoryPages
IopLiveDumpTraceCaptureProcessorContextDuration
IopLiveDumpTraceChunkCRCMismatchWrite
IopLiveDumpTraceCorralProcessorsDuration
IopLiveDumpTraceDumpDisabledOnBoot
IopLiveDumpTraceDumpFileWriteEnd
IopLiveDumpTraceEstimatedAndAllocatedPageCount
IopLiveDumpTraceEstimatedPageCountNotAvailable
IopLiveDumpTraceEventGeneric
IopLiveDumpTraceInterfaceEnd
IopLiveDumpTraceInterfaceStart
IopLiveDumpTraceIoCaptureLiveDumpEntry
IopLiveDumpTraceMarkImportantDumpDataDuration
IopLiveDumpTraceMarkRequiredDumpDataDuration
IopLiveDumpTraceMmDuplicateMemoryFailure
IopLiveDumpTraceNoArgs
IopLiveDumpTracePopulateBitmapForDumpDuration
IopLiveDumpTraceRemovePagesCallbackFailure
IopLiveDumpTraceRunPageCountLoop
IopLiveDumpTraceUncorralProcessorsDuration
IopLiveDumpTraceWriteBuffer
IopLiveDumpTracingControlCallback
IopLiveDumpUncorralProcessors
IopLiveDumpUnpackMemoryRun
IopLiveDumpValidateDumpFileHandle
IopLiveDumpValidateParameters
IopLiveDumpValidateProtectedProcessExclusions
IopLiveDumpWriteBuffer
IopLiveDumpWriteDumpFile
IopLiveDumpWriteDumpFileWithExtraPages
IopLiveDumpWriteSecondaryData
IopLoadCrashdmpImage
IopLoadCrashdumpDriver
IopLoadDriver
IopLoadDriverImage
IopLoadFileSystemDriver
IopLoadUnloadDriver
IopLogAuditIoRegisterNotificationEvent
IopLogBlockedDriverEvent
IopLogDeviceResetComplete
IopMapTransfer
IopMarkApcRoutineIfAsynchronousIo32
IopMarkBootPartition
IopMarkDeviceToBeReset
IopMarkPagesForDeviceNode
IopMarkPagesForDpcData
IopMarkPagesForLoadedDriverInformation
IopMarkPagesForProcessorData
IopMarkPagesForRunTimeTriageDataBlocks
IopMarshalIds
IopMaskInterrupt
IopMcAddMdlPagesToTable
IopMcCreateBufferEntry
IopMcCreateBufferEntryMdl
IopMcCreatePartialMdl
IopMcDereferenceBufferEntry
IopMcDereferenceMdl
IopMcFindNextTableEntryForUnlock
IopMcGetBuffer
IopMcReferenceBufferEntry
IopMcReleaseMdl
IopMcRemoveMdlPagesFromTable
IopMcShouldYield
IopMcTryUnlockMdl
IopMcWaitAndCleanupBufferEntry
IopMemFindSuitableRange
IopMemInitialize
IopMemQueryConflict
IopMergeRelationLists
IopMountInitializeVpb
IopMountVolume
IopNotifyAlreadyRegisteredFileSystems
IopOpenIoRing
IopOpenLinkOrRenameTarget
IopOpenRegistryKey
IopOpenRegistryKeyEx
IopOpenSystemVariableDevice
IopParentToRawTranslation
IopParseDevice
IopParseFile
IopPartialDumpAddProcessesCallback
IopPassiveInterruptDpc
IopPassiveInterruptRealtimeWorker
IopPassiveInterruptWorker
IopPerfCallDriver
IopPerfCompleteRequest
IopPerfCompletionRoutine
IopPerfLogCallEvent
IopPerfLogCallReturnEvent
IopPnPAddDevice
IopPnPCompleteRequest
IopPnPDispatch
IopPoHandleIrp
IopPopulateCopyWriteWorkerData
IopPortAddAllocation
IopPortBacktrackAllocation
IopPortFindSuitableRange
IopPortGetNextAlias
IopPortInitialize
IopPowerDispatch
IopProcessBufferedIoCompletion
IopProcessInvalidateBusRelationsRequest
IopProcessIoRingEntry
IopProcessIoTracking
IopProcessIrpStackProfiler
IopProcessSetInterfaceState
IopProcessWorkItem
IopProtectSystemPartition
IopQueryBusResourceUpdateInterface
IopQueryDeviceHardwareIdForPdcTask
IopQueryDeviceResources
IopQueryDeviceState
IopQueryDockRemovalInterface
IopQueryEnvironmentVariableInfoHal
IopQueryEnvironmentVariableInfoSysEnv
IopQueryEnvironmentVariableInfoTrEE
IopQueryInformation
IopQueryInterfaceRecurseUp
IopQueryLegacyBusInformation
IopQueryName
IopQueryNameInternal
IopQueryPassiveInterruptRegistryOptions
IopQueryProcessIdsUsingFile
IopQueryProcessorInitValues
IopQueryReconfiguration
IopQueryRegistryKeySystemPath
IopQueryResourceHandlerInterface
IopQuerySecureDeviceClassState
IopQueryVpbFlagsSafe
IopQueryXxxInformation
IopQueueCopyWrite
IopQueueDeviceResetEvent
IopQueueInvalidateBusRelationsRequest
IopQueueIrpToFileObject
IopQueueThreadIrp
IopQueueWorkItemProlog
IopRaiseHardError
IopRaiseInformationalHardError
IopReadDumpRegistry
IopReadFile
IopReadFileScatter
IopReadyDeviceObjects
IopRearrangeReqList
IopReassignSystemRoot
IopRecordIoAttribution
IopReferenceDriverObjectByName
IopReferenceFileObject
IopReferenceIoAttributionFromProcess
IopReferenceVerifyVpb
IopRegisterDeviceInterface
IopRegistryCallback
IopRegistryInitializeCallbacks
IopRegistryOpenDeepestPath
IopReleaseDeviceResources
IopReleaseFileObjectLock
IopReleaseFilteredBootResources
IopReleaseGlobalPassiveInterruptListLock
IopReleasePassiveInterruptBlockLock
IopReleaseResources
IopRemoveCurrentRelationFromList
IopRemoveDevice
IopRemoveDeviceRelationsFromList
IopRemoveDumpCapsuleSupport
IopRemoveHardErrorPacket
IopRemoveLargeAllocsFromPartialDump
IopRemoveLegacyDeviceNode
IopRemovePageDumpRange
IopRemovePageFromPageMap
IopRemovePagesRunsSort
IopRemoveRelationFromList
IopRemoveTimerFromTimerList
IopReplaceCompletionPort
IopReplaceSeperatorWithPound
IopReplaceSymlinkPath
IopReportBootResources
IopResetEvent
IopResourceRequirementsChanged
IopResourceRequirementsListToReqList
IopResurrectDriver
IopRetestConfiguration
IopRetrieveSystemDeviceName
IopRetrieveTransactionParameters
IopRetrieveTransactionParametersFromOpenPacket
IopSafebootDriverLoad
IopSaveRestoreConfiguration
IopSearchAndAddPageRangeToPageMaps
IopSelectNextConfiguration
IopSendMessageToTrackService
IopSessionChangeWorker
IopSetCopyInformationExtension
IopSetDeviceSecurityDescriptor
IopSetDeviceSecurityDescriptors
IopSetDiskIoAttributionExtension
IopSetDiskIoAttributionFromProcess
IopSetDriverFlagsExtension
IopSetEaOrQuotaInformationFile
IopSetEnvironmentVariableHal
IopSetEnvironmentVariableSysEnv
IopSetEnvironmentVariableTrEE
IopSetFileMemoryPartitionInformation
IopSetFileObjectExtensionFlag
IopSetFileObjectIosbRange
IopSetFsRegistrationInProgress
IopSetIrpPriorityHintFromFileObject
IopSetLegacyResourcesFlag
IopSetLockOperationProcess
IopSetRelationsTag
IopSetRemoteLink
IopSetTypeSpecificFoExtension
IopSetupArbiterAndTranslators
IopShutdownBaseFileSystems
IopSortRelationListForRemove
IopStartApcHardError
IopStartNextPacket
IopStartNextPacketByKey
IopStartNextPacketByKeyEx
IopStoreArcInformation
IopStoreBootDriveLetter
IopStoreSystemPartitionInformation
IopSymlinkAllocateAndAddECP
IopSymlinkApplyToOpenedName
IopSymlinkCleanupECP
IopSymlinkCreateECP
IopSymlinkEnforceEnabledTypes
IopSymlinkFreeRelatedMountPointChain
IopSymlinkGetECP
IopSymlinkGetMostRecentlyUsedName
IopSymlinkGetRelatedMountPoint
IopSymlinkInitializeSymlinkInfo
IopSymlinkProcessReparse
IopSymlinkPropagateToExtensionIfNeeded
IopSymlinkQueryEnabledClasses
IopSymlinkRegistryCallback
IopSymlinkRegistryInitCallback
IopSymlinkRememberJunction
IopSymlinkRemoveECP
IopSymlinkUpdateECP
IopSynchronousApiServiceTail
IopSynchronousCall
IopSynchronousServiceTail
IopSystemControlDispatch
IopTestConfiguration
IopThreadStart
IopTimerDispatch
IopTraceCrashDumpDisabledOnBoot
IopTrackLink
IopTranslateAndAdjustReqDesc
IopTranslateBusAddress
IopTranslatorHandlerCm
IopTranslatorHandlerIo
IopUncacheInterfaceInformation
IopUnloadDriver
IopUnloadSafeCompletion
IopUnlockAndFreeMdl
IopUnmaskInterrupt
IopUpdateFunctionPointers
IopUpdateIrpTransferCount
IopUpdateMinidumpContext
IopUpdateSecureDeviceClassState
IopUserCompletion
IopUserRundown
IopValidateAndGetWriteParameters
IopValidateJunctionTarget
IopValidateQueryInformationParameters
IopVerifyDeviceObjectOnStack
IopVerifyDiskSignature
IopVerifyDriverObjectOnStack
IopWaitAndAcquireFileObjectLock
IopWaitForLockAlertable
IopWaitForSynchronousIo
IopWaitForSynchronousIoEvent
IopWarmEjectDevice
IopWheaSelLogCheckPoint
IopWheaSelLogError
IopWriteAllocatedResourcesToRegistry
IopWriteCapsuleTriageDumpToFirmware
IopWriteDriverList
IopWriteFile
IopWriteFileGather
IopWriteResourceList
IopWriteTriageDumpToFirmware
IopXxxControlFile
IopfCallDriver
IopfCompleteRequest
IovAllocateIrp
IovAllocateMdl
IovAllocateWorkItem
IovAttachDeviceToDeviceStack
IovBuildAsynchronousFsdRequest
IovBuildDeviceIoControlRequest
IovBuildSynchronousFsdRequest
IovCallDriver
IovCancelIrp
IovCompleteRequest
IovDeleteDevice
IovDetachDevice
IovFreeIrpPrivate
IovInitializeIrp
IovInitializeTimer
IovIsDisabledWithoutReboot
IovUnloadDrivers
IovUtilFlushStackCache
IovUtilGetBottomDeviceObjectWithTag
IovUtilGetLowerDeviceObjectWithTag
IovUtilGetUpperDeviceObjectWithTag
IovUtilIsDeviceObjectMarked
IovUtilIsVerifiedDeviceStack
IovUtilIsWdmStack
IovUtilMarkDeviceObject
IovUtilMarkStack
IovUtilRelateDeviceObjects
IovUtilUninitialize
IovUtilWatermarkIrp
IovpAdvanceStackDownwards
IovpBuildDriverObjectList
IovpCallDriver1
IovpCallDriver2
IovpCallDriverNoIrpTracking
IovpCallDriverWithStackBuffer
IovpCancelRoutine
IovpCheckIrpForCriticalTracking
IovpCompleteRequest1
IovpCompleteRequest2
IovpCompleteRequest3
IovpCompleteRequest5
IovpExamineDevObjForwarding
IovpExamineIrpStackForwarding
IovpInternalCompletionTrap
IovpLocalCompletionRoutine
IovpLogStackCallout
IovpLogStackTrace
IovpSessionDataCreate
IovpSessionDataDereference
IovpSessionDataReference
IovpUnloadDriver
IovpUtilMarkDeviceObject
IovpValidateDeviceObject
IovpValidateStatusInformation
IpmiHwContextInitialized
IpmiHwInitializeContext
IpmiHwKcsInit
IpmiHwpParseSpmiTable
IpmiHwpReadSpmiConfiguration
IpmiLibAddSelBugcheckRecord
IpmiLibAddSelCheckpointRecord
IpmiLibAddSelErrorRecord
IpmiLibAddSelRecord
IpmiLibKcsIpmiMessageUnpack
IpmiLibReadOneByte
IpmiLibReadSmbiosRecord38
IpmiLibRequestReceive
IpmiLibWriteOneByte
IpmiLibpAddSelRawData
IpmiLibpDelay
IpmiLibpGetTimeout
IpmiLibpHandleErrorInterrupt
IpmiLibpHandleReadInterrupt
IpmiLibpHandleSendInterrupt
IpmiLibpKcsBmcTransact
IpmiLibpKcsHandleError
IpmiLibpKcsIpmiMessagePack
IpmiLibpKcsReceiveResponseFromBmc
IpmiLibpKcsRequestAndReceive
IpmiLibpKcsSendRequestToBMC
IpmiLibpKcsSpinRegister
IpmiLibpParseDeviceInfo
IpmiLibpTimeAfter
IsArrayType
IsEncodedAttributeChar
IsHangulLV
IsLegalAttributeChar2
IsRegistryKeyLocked
IsTrustletCreateAttributeWellFormed
IsValueSizeFixed
IvmdFindDeviceEntry
IvmdProcessRange
IvtAllocateContextTable
IvtAllocateDevice
IvtAllocateDomain
IvtAllocateScalableModePasidTables
IvtAllocateTranslationStructures
IvtAttachDeviceDomain
IvtAttachDeviceDomainInternal
IvtBuildContextEntry
IvtBuildScalableModeContextEntry
IvtBuildScalableModePasidDirectoryEntry
IvtBuildScalableModePasidTableS1Entry
IvtBuildScalableModePasidTableS2Entry
IvtCancelPageRequests
IvtCheckForReservedRegion
IvtClearPendingFaults
IvtCompleteFlush
IvtConfigureAts
IvtConfigureSettings
IvtCreateDevice
IvtDeleteDevice
IvtDetachDeviceDomain
IvtDisableInterrupt
IvtDismissPageFault
IvtDrainSvmPageRequests
IvtEnableInterrupt
IvtEnsureNoPendingFaults
IvtEnumerateRmrrDevices
IvtExtendScalableModePasidTables
IvtFindDevice
IvtFlushDeviceTbOnly
IvtFlushDomainTb
IvtFlushTb
IvtFlushTbInternal
IvtFreeDomain
IvtFreeScalableModePasidTables
IvtGetBlockedDomain
IvtGetContextEntryType
IvtGetDomainId
IvtGetIdentityMappedDomain
IvtGetPageFault
IvtGetPasidGranularTranslationType
IvtGetScalableModePasidTables
IvtGrowPasidTable
IvtHandleInterrupt
IvtInitializeIdentityMappings
IvtInitializeIommu
IvtInitializeLargePagePte
IvtInitializeMTRR
IvtInitializeScalableModePasidTables
IvtInvalidateAllContextEntries
IvtInvalidateContextEntry
IvtInvalidateRemappingTableEntries
IvtInvalidateRemappingTableEntry
IvtInvalidateScalableModeContextEntry
IvtInvalidateScalableModePasidCache
IvtIommuSendCommand
IvtIommuWaitCommand
IvtMarkHiberMemoryScalableModePasidTables
IvtMarkHiberRegions
IvtProcessDeviceExceptions
IvtProcessReservedDomains
IvtSetDevicePasidTable
IvtSetDeviceSvmCapabilities
IvtSetMessageInterruptRouting
IvtSetPasidAddressSpace
IvtSetScalableModeContextEntry
IvtSetScalableModePasidTableEntry
IvtSetupScalableModeDefaultPasidTables
IvtSlConfigureIntermediatePhysicalPte
IvtSlConfigureLeafPhysicalPfn
IvtSlConfigureLeafPhysicalPte
IvtSlGetPermissions
IvtSlGetPhyAddress
IvtSyncFlush
IvtUpdateContextEntry
IvtUpdateGlobalCommand
IvtUpdateInterruptDestination
IvtUpdateRemappingDestination
IvtUpdateRemappingTableEntry
IvtUpdateScalableModeContextEntry
IvtUpdateScalableModePasidTablesForPasid
IvtUpdateScalableModeTranslationStructures
IvtUpdateSingleTargetExtendedDestination
IvtUpdateTranslationStructures
IvtpGetNextInternalDeviceScope
KGetAppModelStateSeparatedRegKeyPath
KGetUnlockSetting
KIsDeveloperModeEnabled
KIsSideloadingEnabled
KIsUnlockSettingEnabled
KasanDriverLoadImage
KasanDriverLoadImageInternal
KasanDriverUnloadImage
KasanHibernationGetStackLow
KasanHibernationResume
KasanInitSystem
KasanInitializeLoadedModules
KasanMarkAddressInvalid
KasanMarkAddressRedZone
KasanMarkAddressValid
KasanPoolAllocate
KasanTrackAddress
KasanUnloadInfoCompare
KasanValidateAddress
KasanWrapperRtlRestoreContext
KasaniBuildPc
KasaniGetModuleFromAddress
KasaniReport
KasaniReportTelemetry
KasaniSendReport
KasaniSendTelemetryDriver
KasaniTelemetryThread
KcsanInitSystem
KcsanMarkAddressIgnored
KcsanReportTelemetry
KcsanValidateAddress
KcsaniBuildPc
KcsaniInsertInDatabase
KcsaniSendReport
KcsaniTelemetryThread
KdAcquireDebuggerLock
KdCallPowerHandlers
KdChangeOption
KdCheckForDebugBreak
KdCopyDataBlock
KdDecodeDataBlock
KdDeregisterPowerHandler
KdDisableDebugger
KdDisableDebuggerWithLock
KdEnableDebugger
KdEnableDebuggerWithLock
KdEncodeDataBlock
KdEnterDebugger
KdExitDebugger
KdGetDebugDevice
KdInitSystem
KdIsThisAKdTrap
KdLogDbgPrint
KdMarkHiberPhase
KdPollBreakIn
KdPowerTransition
KdPowerTransitionEx
KdPullRemoteFile
KdPullRemoteFileEx
KdRefreshDebuggerNotPresent
KdRegisterDebuggerDataBlock
KdRegisterPowerHandler
KdReleaseDebuggerLock
KdSendTraceData
KdSetDbgPrintBufferSize
KdSetEventLoggingPresent
KdSystemDebugControl
KdTrap
KdUpdateTimeSlipEvent
KdpAddBreakpoint
KdpAllowDisable
KdpCheckLowMemory
KdpCloseFileCallback
KdpCloseRemoteFile
KdpCommandString
KdpCopyCodeStream
KdpCopyContext
KdpCopyMemoryChunks
KdpCreateFileCallback
KdpCreateRemoteFile
KdpDeleteBreakpoint
KdpDeleteBreakpointRange
KdpFillMemory
KdpGetBusData
KdpGetContext
KdpGetContextEx
KdpGetContextOrig
KdpGetStateChange
KdpGetVersion
KdpInitializeExtendedContext
KdpInsertBreakpoint
KdpIsBreakpoint
KdpLowRestoreBreakpoint
KdpLowWriteContent
KdpNotSupported
KdpPollBreakInWithPortLock
KdpPrint
KdpPrintString
KdpPrompt
KdpPromptString
KdpPullRemoteFile
KdpQueryMemory
KdpQuickMoveMemory
KdpReadControlSpace
KdpReadIoSpace
KdpReadIoSpaceExtended
KdpReadMachineSpecificRegister
KdpReadPhysicalMemory
KdpReadPhysicalMemoryLong
KdpReadRemoteFile
KdpReadVirtualMemory
KdpRemoveBreakpoint
KdpReport
KdpReportCommandStringStateChange
KdpReportExceptionStateChange
KdpReportLoadSymbolsStateChange
KdpRestoreAllBreakpoints
KdpRestoreBreakPointEx
KdpRestoreBreakpoint
KdpSanitizeContextFlags
KdpSearchMemory
KdpSearchPhysicalPage
KdpSearchPhysicalPageRange
KdpSendWaitContinue
KdpSetBusData
KdpSetCommonState
KdpSetContext
KdpSetContextEx
KdpSetContextState
KdpSetOwedBreakpoints
KdpStub
KdpSuspendAllBreakpoints
KdpSymbol
KdpSysCheckLowMemory
KdpSysGetVersion
KdpSysReadBusData
KdpSysReadControlSpace
KdpSysReadIoSpace
KdpSysReadMsr
KdpSysWriteBusData
KdpSysWriteControlSpace
KdpSysWriteIoSpace
KdpSysWriteMsr
KdpTimeSlipDpcRoutine
KdpTimeSlipWork
KdpTrap
KdpWriteBreakPointEx
KdpWriteBreakpoint
KdpWriteControlSpace
KdpWriteCustomBreakpoint
KdpWriteFileCallback
KdpWriteInstructionBuffer
KdpWriteIoSpace
KdpWriteIoSpaceExtended
KdpWriteMachineSpecificRegister
KdpWritePhysicalMemory
KdpWriteVirtualMemory
KeAbCrossThreadDelete
KeAbCrossThreadDeleteDpcRoutine
KeAbCrossThreadDeleteNopDpcRoutine
KeAbCrossThreadRelease
KeAbInitializeThreadState
KeAbIsValidUserModeLockAddress
KeAbMarkCrossThreadReleasable
KeAbPostAcquire
KeAbPostRelease
KeAbPostReleaseEx
KeAbPreAcquire
KeAbPreWait
KeAbPreWakeupHandle
KeAbPreWakeupThread
KeAbProcessBaseIoPriorityChange
KeAbProcessBaseIoPriorityChangeInternal
KeAbProcessEffectiveIoPriorityChange
KeAbThreadAreAllEntriesFree
KeAbUserModeEntryFree
KeAccumulateTicks
KeAcquireGuardedMutex
KeAcquireGuardedMutexUnsafe
KeAcquireInStackQueuedSpinLock
KeAcquireInStackQueuedSpinLockAtDpcLevel
KeAcquireInStackQueuedSpinLockForDpc
KeAcquireInStackQueuedSpinLockRaiseToSynch
KeAcquireInterruptSpinLock
KeAcquireQueuedSpinLock
KeAcquireQueuedSpinLockRaiseToSynch
KeAcquireSpinLockAtDpcLevel
KeAcquireSpinLockForDpc
KeAcquireSpinLockRaiseToDpc
KeAcquireSpinLockRaiseToSynch
KeAddEnclavePage
KeAddGroupAffinityEx
KeAddProcessorAffinityEx
KeAddProcessorGroupAffinity
KeAddSystemServiceTable
KeAddTriageDumpDataBlock
KeAdjustInterruptTime
KeAdjustPriorityFloor
KeAdjustTimerDelayProcess
KeAdjustWobPriority
KeAlertMultipleThreadByThreadId
KeAlertResumeThread
KeAlertThread
KeAlertThreadByThreadId
KeAlertThreadByThreadIdEx
KeAllocateCalloutStack
KeAllocateCalloutStackEx
KeAllocateInterrupt
KeAllocateKernelHiberSwapShadowStacks
KeAllocateProcessorProfileStructures
KeAllocateXStateContext
KeAndAffinityEx
KeAndAffinityEx2
KeAndGroupAffinityEx
KeAndGroupMasks
KeApplyWobBamQos
KeAreAllApcsDisabled
KeAreApcsDisabled
KeAreInterruptsEnabled
KeAssignCpuPartitionsToProcess
KeAttachProcess
KeBalanceSetManager
KeBlockEnclavePage
KeBoostPriorityThread
KeBugCheck
KeBugCheck2
KeBugCheckEx
KeBuildLogicalProcessorSystemInformation
KeCanChangeEnclavePageProtection
KeCanUseHaltOnAddress
KeCancelTimer
KeCancelTimer2
KeCancelTimerInternal
KeCapturePersistentThreadState
KeChangeEnclavePageProtection
KeChangeMemoryAttributes
KeCheckAndApplyBamQos
KeCheckForTimer
KeCheckForZeroPage
KeCheckProcessorAffinityEx
KeCheckProcessorGroupAffinity
KeCheckStackAndTargetAddress
KeCheckedKernelInitialize
KeCleanupImageTracepoints
KeCleanupThreadState
KeClearBitGroupMask
KeClearForceIdle
KeClockInterruptNotify
KeCommitSmtState
KeCompactServiceTable
KeComplementAffinityEx
KeComplementAffinityEx2
KeComputeGroupMask
KeComputeParallelSha256
KeComputeParallelSha256StateSize
KeComputeSha256
KeConfigureDynamicMemory
KeConfigureHeteroPolicy
KeConfigureHeteroProcessors
KeConnectInterrupt
KeConnectInterruptForHal
KeContextFromKframes
KeContextToKframes
KeConvertAuxiliaryCounterToPerformanceCounter
KeConvertPerformanceCounterToAuxiliaryCounter
KeCopyAffinityEx
KeCopyAffinityEx2
KeCopyExceptionRecord
KeCopyLastBranchInformation
KeCopyPage
KeCopyPage$thunk$17553164197770287351
KeCopyPageNt
KeCopyPageNtMfence
KeCopyPrivilegedPage
KeCopyXfdMaskToPeb
KeCopyXfdMaskToTeb
KeCountSetBitsAffinityEx
KeCountSetBitsGroupAffinity
KeCountSetBitsGroupMask
KeCpuPartitionMoveCpus
KeCpuSetReportParkedProcessors
KeCreateCpuPartition
KeCreateEnclave
KeCreateEnclaveMetadataPage
KeDebugReadEnclaveMemory
KeDebugWriteEnclaveMemory
KeDeepSleepProcessor
KeDelayExecutionThread
KeDeleteCpuPartition
KeDeleteMutant
KeDeleteThread
KeDeregisterBoundCallback
KeDeregisterBugCheckCallback
KeDeregisterBugCheckReasonCallback
KeDeregisterNmiCallback
KeDeregisterProcessorChangeCallback
KeDetachProcess
KeDetectHeterogeneousSets
KeDisableForceIdle
KeDisableProfiling
KeDisableQueueingPriorityIncrement
KeDisableTimer2
KeDisconnectInterrupt
KeDispatchSecondaryInterrupt
KeEnableCoreIsolationMitigationPolicyThread
KeEnableOptionalXStateFeaturesApc
KeEnableProfiling
KeEnterCriticalRegion
KeEnterCriticalRegionThread
KeEnterGuardedRegion
KeEnterKernelDebugger
KeEnumerateKernelStackSegments
KeEnumerateNextProcessor
KeEnumerateNextSchedulerSubNodeInNode
KeEnumerateProcessorDpcs
KeEnumerateQueueApc
KeEstimateClockTickDuration
KeEtwInitializeCpuStarvationProvider
KeExitRetpoline
KeExpandKernelStackAndCallout
KeExpandKernelStackAndCalloutEx
KeExpandKernelStackAndCalloutInternal
KeFindBiasedSetBitGroupMask
KeFindBiasedSetMember
KeFindConfigurationEntry
KeFindConfigurationNextEntry
KeFindFirstSetLeftAffinityEx
KeFindFirstSetLeftGroupAffinity
KeFindFirstSetLeftGroupMask
KeFindFirstSetRightAffinityEx
KeFindFirstSetRightGroupAffinity
KeFindFirstSetRightGroupMask
KeFindNextSetRightGroupMask
KeFirstGroupAffinityEx
KeFlushCurrentTbImmediately
KeFlushCurrentTbOnly
KeFlushEntireTb
KeFlushIoBuffers
KeFlushProcessTb
KeFlushProcessWriteBuffers
KeFlushQueuedDpcs
KeFlushRsb
KeFlushSingleCurrentTb
KeFlushSingleTb
KeFlushTb
KeFlushWriteBuffer
KeFoldProcessStatisticsThread
KeForceAttachProcess
KeForceDetachProcess
KeForceEnableNx
KeForceResumeProcess
KeForceResumeThread
KeFreeCalloutStack
KeFreeInitializationCode
KeFreeInterrupt
KeFreeXStateContext
KeFreezeExecution
KeFreezeProcess
KeFrozenProcessorCount
KeGenericCallDpc
KeGenericCallDpcEx
KeGenericProcessorCallback
KeGetAffinitizedInterruptsInfo
KeGetBugMessageText
KeGetClockOwner
KeGetClockTimerResolution
KeGetCurrentIrql
KeGetCurrentNode
KeGetCurrentNodeNumber
KeGetCurrentPrcb
KeGetCurrentProcessorIndex
KeGetCurrentProcessorNumberEx
KeGetCurrentStackPointer
KeGetCurrentThread
KeGetDynamicTickDisableReason
KeGetEffectiveIrql
KeGetExecuteOptions
KeGetHeteroPolicies
KeGetHeteroSetByQoS
KeGetIdealNodeNumberThread
KeGetNextClockTickDuration
KeGetNextKernelStackSegment
KeGetNodePrimarySubNode
KeGetPcr
KeGetPrcb
KeGetProcessorIndexFromNumber
KeGetProcessorNode
KeGetProcessorNodeNumber
KeGetProcessorNodeNumberByIndex
KeGetProcessorNumberFromIndex
KeGetRecommendedSharedDataAlignment
KeGetSchedulingGroupSize
KeGetTbSize
KeGetThreadPpmPolicy
KeGetThreadWorkloadClassCount
KeGetTopologyIdForProcessor
KeGetTopologySiblingAffinityForProcessor
KeGetTopologySiblingGroupAffinityForProcessor
KeGuardCheckICall
KeGuardDispatchICall
KeHaltOnAddress
KeHwPolicyLocateResource
KeIdleSpecCtrl
KeInitAmd64SpecificState
KeInitSystem
KeInitThread
KeInitializeAffinityEx
KeInitializeAffinityEx2
KeInitializeApc
KeInitializeCatRegisters
KeInitializeClock
KeInitializeClockOtherProcessors
KeInitializeCrashDumpHeader
KeInitializeDeviceQueue
KeInitializeDpc
KeInitializeEnclave
KeInitializeEntropySystem
KeInitializeEnumerationContext
KeInitializeEnumerationContextFromAffinity
KeInitializeEnumerationContextFromGroup
KeInitializeEvent
KeInitializeGate
KeInitializeGuardedMutex
KeInitializeIRTimer
KeInitializeInterrupt
KeInitializeInterruptEx
KeInitializeMutant
KeInitializeMutantEx
KeInitializeMutex
KeInitializePriQueue
KeInitializeProcess
KeInitializeProcessUserCetLogging
KeInitializeProfileCallback
KeInitializeQueue
KeInitializeSchedulerSubNodeEnumerationContext
KeInitializeSecondaryInterruptServices
KeInitializeSemaphore
KeInitializeThreadedDpc
KeInitializeTimer
KeInitializeTimer2
KeInitializeTimerEx
KeInitializeTimerTable
KeInitializeTriageDumpDataArray
KeInitializeWaitChain
KeInitializeXSaveStructures
KeInsertByKeyDeviceQueue
KeInsertDeviceQueue
KeInsertHeadQueue
KeInsertQueue
KeInsertQueueApc
KeInsertQueueDpc
KeInsertQueueEx
KeInsertSchedulingGroup
KeIntSteerAssignCpuSet
KeIntSteerAssignCpuSetForGsiv
KeIntSteerGetSteeringMode
KeIntSteerIsSteeringEnabled
KeIntSteerPeriodic
KeIntSteerSnapPerf
KeInterlockedClearProcessorAffinityEx
KeInterlockedSetProcessorAffinityEx
KeInvalidAccessAllowed
KeInvalidateAllCaches
KeInvalidateRangeAllCaches
KeInvalidateRangeAllCachesNoIpi
KeIpiGenericCall
KeIsApcRunningThread
KeIsAttachedProcess
KeIsBugCheckActive
KeIsCetCapable
KeIsCoreIsolationMitigationPolicyEnforceable
KeIsEmptyAffinityEx
KeIsEmptyGroupMask
KeIsEnqueueStoreSupported
KeIsEqualAffinityEx
KeIsExecutingDpc
KeIsForceIdleEngaged
KeIsImageIATProtected
KeIsImportOptimizationEnabled
KeIsKernelCetAuditModeEnabled
KeIsKernelCetEnabled
KeIsRetpolineEnabled
KeIsSingleGroupAffinityEx
KeIsSubsetAffinityEx
KeIsThreadRunning
KeIsThreadedDpcThread
KeIsTraceCallbackAllowed
KeIsUserCetAllowed
KeIsUserVaAccessAllowed
KeIsWaitListEmpty
KeKeepData
KeKernelShadowStackRestoreContext
KeKvaShadowingActive
KeLeaveCriticalRegion
KeLeaveCriticalRegionThread
KeLeaveGuardedRegion
KeLoadMTRR
KeMakeUserDirectoryTableBase
KeMarkDynamicTracingHiberPhase
KeMarkHiberPhaseV0
KeMarkPcrHiberPhase
KeMaskInterrupt
KeModifySystemAllowedCpuSets
KeNotifyProcessorFreezeSupported
KeNumaInitialize
KeOptimizeSpecCtrlSettings
KeOrAffinityEx
KeOrAffinityEx2
KeOutPageEnclavePage
KePauseThreadCycleAccumulation
KePersistMemory
KePopulateContinuationContext
KePrepareClockTimerForIdle
KePrepareClockTimerForPlatformIdle
KePrepareToDispatchVirtualProcessor
KeProcessorGroupAffinity
KeProcessorProfileControlArea
KeProfileInterruptWithSource
KePulseEvent
KeQueryActiveGroupCount
KeQueryActiveProcessorAffinity
KeQueryActiveProcessorAffinity2
KeQueryActiveProcessorCount
KeQueryActiveProcessorCountEx
KeQueryActiveProcessors
KeQueryAffinityProcess
KeQueryAuxiliaryCounterFrequency
KeQueryBasePriorityThread
KeQueryBootTimeValues
KeQueryCpuPartitionAffinity
KeQueryCpuSetInformation
KeQueryCpuSetsProcess
KeQueryCpuSetsThread
KeQueryCurrentStackInformation
KeQueryCurrentStackInformationEx
KeQueryCycleTimeStatsProcessor
KeQueryDpcWatchdogConfiguration
KeQueryDpcWatchdogInformation
KeQueryEffectivePriorityThread
KeQueryGroupAffinity
KeQueryGroupAffinityEx
KeQueryGroupMaskProcess
KeQueryHardwareCounterConfiguration
KeQueryHeteroCpuPolicyThread
KeQueryHighestNodeNumber
KeQueryImplementedPhysicalBits
KeQueryInterruptPartitionCount
KeQueryInterruptPartitionInformation
KeQueryInterruptTimePrecise
KeQueryIntervalProfile
KeQueryKvaShadowInformation
KeQueryKvaShadowRegion
KeQueryLogicalProcessorRelationship
KeQueryMaximumGroupCount
KeQueryMaximumProcessorCount
KeQueryMaximumProcessorCountEx
KeQueryNodeActiveAffinity
KeQueryNodeActiveAffinity2
KeQueryNodeActiveAffinityEx
KeQueryNodeActiveProcessorCount
KeQueryNodeMaximumProcessorCount
KeQueryNumaCosts
KeQueryOwnerMutant
KeQueryPerformanceCounter
KeQueryPrcbAddress
KeQueryPrimaryGroupAffinityProcess
KeQueryPrimaryGroupAffinityThread
KeQueryPrimaryGroupProcess
KeQueryPrimaryGroupThread
KeQueryPriorityThread
KeQueryProcessAvailableCpus
KeQueryProcessorTaggedCyclesImprecise
KeQueryProcessorTotalCyclesImprecise
KeQueryRuntimeThread
KeQuerySchedulingGroupHistory
KeQuerySchedulingGroupReadyTime
KeQuerySecureSpeculationInformation
KeQuerySpeculationControlInformation
KeQuerySystemAllowedCpuSetAffinity
KeQuerySystemAvailableCpus
KeQuerySystemCpuPartitionAffinity
KeQuerySystemTimePrecise
KeQuerySystemTimeUnsafe
KeQueryTimeIncrement
KeQueryTimelineBitmapTime
KeQueryTimerDueTime
KeQueryTotalCycleTimeThread
KeQueryTypeEvent
KeQueryUnbiasedInterruptTime
KeQueryUnbiasedInterruptTimePrecise
KeQueryUserAffinityThread
KeQueryValuesThread
KeQueryWakeSource
KeRaiseIrqlToDpcLevel
KeRaiseUserException
KeRcuFreePool
KeRcuReadLock
KeRcuReadUnlock
KeRcuSynchronize
KeReadStateEvent
KeReadStateMutant
KeReadStateQueue
KeReadStateSemaphore
KeReadStateTimer
KeReadyThread
KeRebaselineInterruptTime
KeRebaselineSystemTime
KeRecomputeCpuSetAffinityProcess
KeReenterRetpolinedCode
KeRegisterAvailableCpusChangeNotification
KeRegisterBoundCallback
KeRegisterBugCheckCallback
KeRegisterBugCheckReasonCallback
KeRegisterNmiCallback
KeRegisterObjectDpc
KeRegisterObjectNotification
KeRegisterProcessorChangeCallback
KeReinitializeAffinityEx
KeRelaxTimingConstraints
KeReleaseGuardedMutex
KeReleaseGuardedMutexUnsafe
KeReleaseInStackQueuedSpinLock
KeReleaseInStackQueuedSpinLockForDpc
KeReleaseInStackQueuedSpinLockFromDpcLevel
KeReleaseInterruptSpinLock
KeReleaseMutant
KeReleaseMutantEx
KeReleaseMutex
KeReleaseQueuedSpinLock
KeReleaseSemaphore
KeReleaseSemaphoreEx
KeReleaseSpinLock
KeReleaseSpinLockForDpc
KeReleaseSpinLockFromDpcLevel
KeRemoveByKeyDeviceQueue
KeRemoveByKeyDeviceQueueIfBusy
KeRemoveDeviceQueue
KeRemoveEnclavePage
KeRemoveEntryDeviceQueue
KeRemoveGroupAffinityEx
KeRemovePriQueue
KeRemoveProcessorAffinityEx
KeRemoveProcessorGroupAffinity
KeRemoveQueue
KeRemoveQueueApc
KeRemoveQueueDpc
KeRemoveQueueDpcEx
KeRemoveQueueEntry
KeRemoveQueueEx
KeRemoveSchedulingGroup
KeRemoveSystemServiceTable
KeReportCacheIncoherentDevice
KeRequestTerminationProcess
KeRequestTerminationThread
KeReservePrivilegedPages
KeResetEvent
KeResetKernelShadowStackRstorssp
KeResetLegacyFloatingPointState
KeRestoreExtendedAndSupervisorState
KeRestoreExtendedProcessorState
KeRestoreFloatingPointState
KeRestoreIptStateAfterProcessorComesOnline
KeRestoreLegacyFloatingPointControlWord
KeRestoreMtrrBroadcast
KeRestoreProcessorSpecificFeatures
KeRestoreSupervisorState
KeResumeClockTimer
KeResumeClockTimerFromIdle
KeResumeClockTimerSafe
KeResumeDynamicTracing
KeResumeThread
KeResumeThreadCycleAccumulation
KeRetryOutswapProcess
KeRevertToUserAffinityThread
KeRevertToUserAffinityThreadEx
KeRevertToUserGroupAffinityThread
KeRevertToUserMultipleGroupAffinityThread
KeRundownApcQueues
KeRundownPriQueue
KeRundownQueue
KeRundownQueueCommon
KeRundownQueueEx
KeRundownSecureProcess
KeSaveExtendedAndSupervisorState
KeSaveExtendedProcessorState
KeSaveFloatingPointState
KeSaveIptStateBeforeProcessorGoesOffline
KeSaveLegacyFloatingPointControlWord
KeSaveProcessorSpecificFeatures
KeSaveStateForHibernate
KeSaveSupervisorState
KeSecureProcess
KeSecureThread
KeSelectGroupFromNode
KeSelectIdealProcessor
KeSelectInitialIdealProcessorForThread
KeSelectNodeForAffinity
KeSetActualBasePriorityThread
KeSetAffinityProcess
KeSetAffinityThread
KeSetAutoAlignmentProcess
KeSetBasePriorityThread
KeSetBitGroupMask
KeSetCheckStackExtentsProcess
KeSetClockInterval
KeSetCoalescableTimer
KeSetCpuSetsProcess
KeSetDisableBoostProcess
KeSetDisableBoostThread
KeSetDisableQuantumProcess
KeSetDmaIoCoherency
KeSetEvent
KeSetEventBoostPriority
KeSetEventBoostPriorityEx
KeSetExecuteOptions
KeSetExpectedConcurrencyCountProcess
KeSetForceIdle
KeSetGroupMaskProcess
KeSetHardwareCounterConfiguration
KeSetHeteroCpuPolicyThread
KeSetIdealProcessorThread
KeSetIdealProcessorThreadByNumber
KeSetIdealProcessorThreadEx
KeSetImportanceDpc
KeSetIntervalProfile
KeSetKernelStackSwapEnable
KeSetLastBranchRecordInUse
KeSetMaxDynamicTickDuration
KeSetMaximumCountPriQueue
KeSetPagePrivilege
KeSetPriorityAndQuantumProcess
KeSetPriorityBoost
KeSetPriorityThread
KeSetProcess
KeSetProcessPpmPolicy
KeSetProcessSchedulingGroup
KeSetProfileIrql
KeSetQuantumProcess
KeSetSchedulingGroupCpuRates
KeSetSchedulingGroupCycleNotification
KeSetSchedulingGroupRankBias
KeSetSchedulingGroupWeights
KeSetSelectedCpuSetsThread
KeSetSystemAffinityThread
KeSetSystemAffinityThreadEx
KeSetSystemGroupAffinityThread
KeSetSystemMultipleGroupAffinityThread
KeSetSystemServiceCallback
KeSetSystemTime
KeSetTagCpuSets
KeSetTargetProcessorDpc
KeSetTargetProcessorDpcEx
KeSetThreadChargeOnlySchedulingGroup
KeSetThreadPpmPolicy
KeSetThreadSchedulerAssist
KeSetTimeAdjustment
KeSetTimer
KeSetTimer2
KeSetTimerEx
KeSetTracepoint
KeSetUserAffinityThread
KeSetUserCetAppcompatOptions
KeSetUserGroupAffinityThread
KeShouldYieldProcessor
KeSignalCallDpcDone
KeSignalCallDpcSynchronize
KeSignalGate
KeSizeOfAffinityEx
KeSizeOfKProcessExtension
KeSpecialUserApcKernelRoutine
KeSrcuAllocate
KeSrcuFree
KeSrcuReadLock
KeSrcuReadUnlock
KeSrcuSynchronize
KeStackAttachProcess
KeStallExecutionProcessor
KeStallWhileFrozen
KeStartAllProcessors
KeStartDynamicProcessor
KeStartProfile
KeStartThread
KeStopProfile
KeSubtractAffinityEx
KeSubtractAffinityEx2
KeSupportedPhysicalAddressBits
KeSuspendClockTimer
KeSuspendClockTimerSafe
KeSuspendDynamicTracing
KeSuspendThread
KeSwapDirectoryTableBase
KeSwapProcessOrStack
KeSwappablePageDereference
KeSwappablePageGetLockedAddress
KeSwappablePageReference
KeSweepLocalCaches
KeSwitchFrozenProcessor
KeSynchronizeAddressPolicy
KeSynchronizeExecution
KeSynchronizeSecurityDomain
KeSynchronizeTimeToQpc
KeSynchronizeWithDynamicProcessors
KeSystemFullyCacheCoherent
KeTerminateThread
KeTestAlertThread
KeTestBitGroupMask
KeTestSpinLock
KeThawExecution
KeThawMultiProcess
KeTimeOutQueueWaiters
KeTraceHgsPlusRundown
KeTraceParkingRundown
KeTraceSchedulingGroupRundown
KeTraceThreadAffinityRundown
KeTrackEnclaveTbFlush
KeTransitionProcessorParkState
KeTryToAcquireGuardedMutex
KeTryToAcquireQueuedSpinLock
KeTryToAcquireQueuedSpinLockRaiseToSynch
KeTryToAcquireSpinLockAtDpcLevel
KeTryToFreezeThreadStack
KeTryToInsertQueueApc
KeUninitThread
KeUnmaskInterrupt
KeUnregisterAvailableCpusChangeNotification
KeUnsecureProcess
KeUnsecureThread
KeUnstackDetachProcess
KeUpdateDpcWatchdogConfiguration
KeUpdateGroupSchedulingConstants
KeUpdatePendingQosRequest
KeUpdateProcessorRestrictions
KeUpdateSoftParkRankList
KeUpdateTebSchedulingPropertiesCurrentThread
KeUpdateThreadCpuSets
KeUpdateThreadTag
KeUpdateTotalCyclesCurrentThread
KeUserModeCallback
KeValidateBugCheckCallbackRecord
KeVerifyContextIpForUserCet
KeVerifyContextRecord
KeVerifyContextXStateCetU
KeVerifyGroupAffinity
KeWaitForAlertByThreadId
KeWaitForGate
KeWaitForMultipleObjects
KeWaitForSingleObject
KeWakeAddressAll
KeWakeProcessor
KeWakeWaitChain
KeWriteProtectPAT
KeWriteProtectProcessorState
KeYieldExecution
KeYieldProcessorEx
KeZeroPages
KeZeroSinglePage
KevSkipVerification
KiAbAcquireLocksForEntry
KiAbCleanupLockEntriesState
KiAbConvertWaiterToOwnerEntry
KiAbCpuBoostOwners
KiAbCrossThreadRelease
KiAbDeferredProcessingWorker
KiAbDetermineMinOwnerCpuPriority
KiAbEntryFreeAndEnableInterrupts
KiAbEntryGetCpuPriorityKey
KiAbEntryGetLockedHeadEntry
KiAbEntryRemoveEntryFromTreeAndRelease
KiAbEntryRemoveFromTree
KiAbEntryUpdateOwnerTreePosition
KiAbEntryUpdateWaiterTreePosition
KiAbForceProcessLockEntry
KiAbIoBoostOwners
KiAbLockEntriesFindLock
KiAbOwnerComputeCpuPriorityKey
KiAbProcessPostContextSwitch
KiAbProcessPreContextSwitch
KiAbProcessThreadLocks
KiAbPropagateBoosts
KiAbQueueAutoBoostDpc
KiAbReleaseLocksForEntry
KiAbReleaseTeeLockForEntry
KiAbSetMinimumThreadPriority
KiAbThreadInsertList
KiAbThreadRemoveBoosts
KiAbThreadRemoveBoostsSlow
KiAbTryDecrementIoWaiterCounts
KiAbTryIncrementIoWaiterCounts
KiAbUmPostWait
KiAbUmPreWait
KiAccessPage
KiAccumulateCycleStats
KiAccumulateProcessorCycleStats
KiAccumulateTicksFromCycles
KiAcquireCpuPartitionAssignmentLock
KiAcquireCpuPartitionLock
KiAcquireCpuPartitionLockAtDpcLevel
KiAcquireDpcCorralLock
KiAcquireInterruptConnectLock
KiAcquireKobjectLockSafe
KiAcquireMultiplePrcbLockArrays
KiAcquireMultiplePrcbLocks
KiAcquirePrcbLock
KiAcquirePrcbLocksForGroupAffinity
KiAcquirePrcbLocksForIsolationUnit
KiAcquirePrcbLocksForPreemptionAttempt
KiAcquirePrcbLocksForPreemptionAttemptSlowPath
KiAcquireProcessLockExclusive
KiAcquireProcessLockShared
KiAcquireQueuedSpinLockInstrumented
KiAcquireReleaseDpcData
KiAcquireReleaseObjectRundownLockExclusive
KiAcquireReleaseThreadLock
KiAcquireSecondaryInterruptConnectLock
KiAcquireSecondaryPassiveConnectLock
KiAcquireSecondarySignalListLock
KiAcquireSpinLockInstrumented
KiAcquireSubNodeLock
KiAcquireThreadLockRaiseToDpc
KiAcquireThreadStateLockForWrite
KiAcquireTimer2CollectionLockIfInserted
KiAcquireTimer2LockUnlessDisabled
KiActivateWaiterKQueue
KiActivateWaiterPriQueue
KiActivateWaiterQueueWithNoLocks
KiAddCpuToSystemCpuPartition
KiAddHaltBlockToWaitList
KiAddProcessorToCoreControlBlock
KiAddProcessorToGroupSchedulingDatabase
KiAddProcessorToSoftwareInterruptBatch
KiAddSubNodeToIdleSearchContextTargets
KiAddThreadToPrcbQueue
KiAddThreadToReadyQueue
KiAddThreadToScbQueue
KiAddTriageDumpDataBlock
KiAdjustCoreIsolationReasonThread
KiAdjustFeatureBitsForGdsErrata
KiAdjustGroupConfiguration
KiAdjustProcessCpuSetsAfterCpuPartitionChange
KiAdjustProcessIdealProcessorSetsForThreadCreation
KiAdjustReadyQueueScanOwnerOnParkingChange
KiAdjustRealtimePriorityFloor
KiAdjustRescheduleContextForIsolationWidthChange
KiAdjustRescheduleContextForParking
KiAdjustRescheduleContextForProcessorAddition
KiAdjustThreadTimer
KiAdjustTimer2DueTimes
KiAdjustTimerDueTimes
KiAdjustTimersAfterDripsExit
KiAdjustUserIsolationDomainThread
KiAdvanceReadyListEnumerator
KiAffinityContainsProcessorsOtherThanSelf
KiAlertSingleThreadByThreadId
KiAlignmentFault
KiAlignmentFaultShadow
KiAllocateDpcDelegateThread
KiAllocateForceParkingData
KiAllocateHeteroConfigBuffer
KiAllocateIdleSearchStructures
KiAllocateIdleThread
KiAllocateLocalSharedReadyQueue
KiAllocatePrcbThread
KiAllocatePrcbThreads
KiAllocateProcessorHiberSwapShadowStacks
KiAllocateProcessorLookupStructures
KiAllocateProcessorNumber
KiAllocateProcessorStacks
KiAllocateProcessorStateInitializationParameters
KiAllocateSchedulerSubNode
KiAllocateSmtIsolationThread
KiAllocateStaticRescheduleContext
KiAllocateXStateStack
KiAltContextProcessMcheckAltReturn
KiAltContextWorkQueueAddItem
KiAltReturnDpcRoutine
KiAltReturnWorkerRoutine
KiApcInterrupt
KiApcInterruptShadow
KiApplyDpcVerificationScaleSettings
KiApplyForegroundBoostThread
KiApplyProcessorDpcLimits
KiAreCodePatchesAllowed
KiArmForceParkDutyCyclingForLocalReadyQueue
KiAssignAdjustableSubNodes
KiAssignAllSubNodesToGroup0
KiAssignCooperativeIdleSearchContexts
KiAssignFixedSubNodes
KiAssignProcessorNumberToPrcb
KiAssignSubNodeSharedReadyQueues
KiAttachProcess
KiAttemptBugcheckRecovery
KiAttemptFastRemovePriQueue
KiAttemptFastRemoveQueue
KiAttemptToScheduleThreadToBusyIsolationUnit
KiAttemptToStealStandbyThread
KiAvailableCpusPartitionWorkItemCallback
KiAvailableCpusProcessWorkItemCallback
KiAvailableCpusSubscriptionQueueWorkItem
KiAvailableCpusWorkItemCallbackWrapper
KiBalanceSetManagerDeferredRoutine
KiBeginCounterAccumulation
KiBeginThreadAccountingPeriod
KiBeginThreadWait
KiBoundFault
KiBoundFaultShadow
KiBreakpointTrap
KiBreakpointTrapShadow
KiBugCheckConvertParameterValueToUnicodeString
KiBugCheckConvertProgressValueToUnicodeString
KiBugCheckDebugBreak
KiBugCheckDispatch
KiBugCheckProgress
KiBugCheckProgressCpusFrozen
KiBugCheckRecoveryCleanupFromCrashDump
KiBugCheckRecoveryFreezeOtherProcessors
KiBugCheckRecoveryFreezeProcessorDpc
KiBugCheckRecoveryPrepareForCrashDump
KiBugCheckShouldEnterPostBugCheckDebugger
KiBugCheckUnicodeToAnsi
KiBugCheckWriteCrashDump
KiBugcheckUnloadDebugSymbols
KiBuildShareCountListForSubNodeByAffinity
KiCalibrateTimeAdjustment
KiCallInterruptServiceRoutine
KiCallUserMode
KiCanDeferredReadyThreadBeScheduledToRescheduleContext
KiCanThreadBeReadiedImmediately
KiCancelClockTimer
KiCancelTimer
KiCaptureDumpPreRecovery
KiCaptureTotalCyclesCurrentThread
KiChainedDispatch
KiCheckAndApplyCacheIsolation
KiCheckAndRearmForceIdle
KiCheckAssistDataForBamQosLevelOverride
KiCheckDueTimeExpired
KiCheckEnqueueStoreFeaturePresence
KiCheckForAtlThunk
KiCheckForDuplicateBugCheckCallback
KiCheckForFreezeExecution
KiCheckForKernelApcDelivery
KiCheckForMaxOverQuotaScb
KiCheckForPendingQosUpdate
KiCheckForSListAddress
KiCheckForThreadDispatch
KiCheckForTimerExpiration
KiCheckGroupSchedulingQuantumEnd
KiCheckIfStackExpandCalloutActive
KiCheckKeepAlive
KiCheckMicrocode
KiCheckPrcbAffinityEx
KiCheckPreferredHeteroProcessor
KiCheckRangeOverlap
KiCheckStall
KiCheckThreadAffinity
KiCheckUserAddressCetCompat
KiCheckVpBackingLongSpinWaitHypercall
KiChooseTargetProcessor
KiClearForegroundBoost
KiClearLastBranchRecordStack
KiClearPriorityFloor
KiClockTimerOneShotReady
KiCollectFullProcessName
KiCollectTriageDumpDataBlocks
KiCommitGroupSubNodeAssignments
KiCommitRescheduleContext
KiCommitThreadWait
KiComparePrcbLockOrdering
KiCompareSubNodeConfigurationCapacity
KiCompareVarMtrr
KiCompleteBootProcessorContextInitialization
KiCompleteDirectSwitchThread
KiCompleteKernelInit
KiCompressSoftParkRankList
KiComputeCpuSetAffinity
KiComputeCpuSetAffinityMask
KiComputeDispatchInterruptCost
KiComputeDispatchInterruptCostDpcRoutine
KiComputeDueTime
KiComputeEffectivePriority
KiComputeEstimatedMaximumProcessors
KiComputeHeteroConfig
KiComputeHeteroSet
KiComputeHgsScore
KiComputeNewPriority
KiComputeNewSystemTime
KiComputeNumaCosts
KiComputePartialSharedReadyQueueAssignments
KiComputePriorityFloor
KiComputeProcessAutoBoostTreeCount
KiComputeProcessorDataSize
KiComputeSharedReadyQueueAssignments
KiComputeThreadAffinity
KiComputeThreadPriority
KiComputeThreadQos
KiComputeTopologyConstants
KiComputeTopologyConstantsAmd
KiComputeTopologyConstantsIntelCompatible
KiConfigureAllSchedulingInformation
KiConfigureAmdTprLowerInterruptDelayWorkaround
KiConfigureCooperativeIdleSearchContextTargets
KiConfigureCooperativeIdleSearchTargets
KiConfigureCpuSetSchedulingInformation
KiConfigureDynamicProcessor
KiConfigureHeteroMultiCoreProcessors
KiConfigureInitialNodes
KiConfigureNodeSchedulingInformation
KiConfigureProcessorBlock
KiConfigureSchedulingInformation
KiConnectInterrupt
KiConnectSecondaryInterrupt
KiConnectSwInterrupt
KiContinueEx
KiContinuePreviousModeUser
KiControlProtectionFault
KiControlProtectionFaultShadow
KiConvertToGuiThread
KiCopyCounters
KiCopyCountersWorker
KiCopyGroupMasksToAffinityEx
KiCpuPartitionCheckAffinitization
KiCpuPartitionCheckDpcEnqueue
KiCpuPartitionCheckGenericDpc
KiCpuPartitionUpdatePrcbs
KiCreateCpuSetForProcessor
KiCreateDpcLimitsProcessorConfiguration
KiCreateKernelShadowStack
KiCustomAccessHandler0
KiCustomAccessHandler1
KiCustomAccessHandler2
KiCustomAccessHandler3
KiCustomAccessHandler4
KiCustomAccessHandler5
KiCustomAccessHandler6
KiCustomAccessHandler7
KiCustomAccessHandler8
KiCustomAccessHandler9
KiCustomAccessRoutine0
KiCustomAccessRoutine1
KiCustomAccessRoutine2
KiCustomAccessRoutine3
KiCustomAccessRoutine4
KiCustomAccessRoutine5
KiCustomAccessRoutine6
KiCustomAccessRoutine7
KiCustomAccessRoutine8
KiCustomAccessRoutine9
KiCustomRecurseRoutine0
KiCustomRecurseRoutine1
KiCustomRecurseRoutine2
KiCustomRecurseRoutine3
KiCustomRecurseRoutine4
KiCustomRecurseRoutine5
KiCustomRecurseRoutine6
KiCustomRecurseRoutine7
KiCustomRecurseRoutine8
KiCustomRecurseRoutine9
KiDebugServiceTrap
KiDebugServiceTrapShadow
KiDebugTrapOrFault
KiDebugTrapOrFaultShadow
KiDecodeMcaFault
KiDecrementKernelShadowStack
KiDecrementProcessStackCount
KiDecrementRankListMembersUnderLock
KiDeduplicateTriageDumpDataArrays
KiDeferDpcWatchdogViolation
KiDeferGroupSchedulingPreemption
KiDeferredBugcheckRecoveryWorker
KiDeferredDpcWatchdogViolation
KiDeferredReadySingleThread
KiDeferredReadyThread
KiDeleteKernelShadowStack
KiDeleteXStateStack
KiDeliverApc
KiDeregisterNmiSxCallback
KiDetachProcess
KiDetectAmdNonArchSsbdSupport
KiDetectFpuLeakage
KiDetectHardwareSpecControlFeatures
KiDetectKvaLeakage
KiDetectTsx
KiDetermineImportOptimizationEnablement
KiDetermineNextScbForScbReadyQueueEnumerator
KiDetermineRetpolineEnablement
KiDirectSwitchThread
KiDisableCacheErrataSource
KiDisarmForceParkDutyCyclingIfNecessary
KiDisconnectInterruptCommon
KiDisconnectInterruptInternal
KiDisconnectSecondaryInterrupt
KiDisconnectSecondaryInterruptInternal
KiDispatchCallout
KiDispatchException
KiDispatchInterrupt
KiDispatchPassiveInterrupts
KiDisplayBlueScreen
KiDivideErrorFault
KiDivideErrorFaultShadow
KiDoesHeteroSoftParkElectionHaveWinner
KiDoubleFaultAbort
KiDoubleFaultAbortShadow
KiDowngradeIsolationUnitLockHandle
KiDpcDispatch
KiDpcInterrupt
KiDpcInterruptBypass
KiDpcInterruptShadow
KiDpcRuntimeHistoryHashTableAllocate
KiDpcRuntimeHistoryHashTableCleanupDpcRoutine
KiDpcRuntimeHistoryHashTableCleanupTimerCallback
KiDpcRuntimeHistoryHashTableDeallocate
KiDpcWatchdog
KiDpcWatchdogCaptureStack
KiDpcWatchdogCounterReset
KiDumpParameterImages
KiDynamicProcessorAddNotification
KiDynamicProcessorInitialization
KiEmulateAtlThunk
KiEnableKvaShadowing
KiEnableOptionalXStateFeatures
KiEnableXSave
KiEncls
KiEnclsDebugRead
KiEnclsStatus
KiEndCounterAccumulation
KiEndDebugAccumulation
KiEndIdleCycleAccumulation
KiEndInterruptCycleAccumulation
KiEndThreadAccountingPeriod
KiEndThreadAccountingPeriodEx
KiEndThreadCycleAccumulation
KiEnterDeferredReadyState
KiEnterLongDpcProcessing
KiEntropyDpcRoutine
KiEnumerateCallback
KiEnumerateNextSchedulerSubNodeInSystem
KiEnumerateNmiSxCallback
KiEpfComplete
KiEpfCompletionDpcRoutine
KiEpfDrainCompletionQueue
KiEpfHandleNotification
KiEpfInitialize
KiEpfStart
KiErrata361Present
KiErrata671Present
KiErrata704Present
KiErrataSkx55Present
KiEvaluateGroupSchedulingPreemption
KiEvaluateHgsClassChange
KiEvaluatePreemptionSwapTarget
KiEventClockStateChange
KiEventDynamicTickVeto
KiExceptionDispatch
KiExceptionDispatchOnExceptionStack
KiExceptionStackSwitchHandler
KiExecuteAllDpcs
KiExecuteDpc
KiExecuteDpcDelegate
KiExecuteSmtIsolationThread
KiExitDispatcher
KiExitThreadWait
KiExpandKernelStackAndCalloutOnStackSegment
KiExpandKernelStackAndCalloutSwitchStack
KiExpireTimer2
KiExtendProcessAffinity
KiFastExitThreadWait
KiFastFailDispatch
KiFastGetCallersAddress
KiFastReadyThread
KiFatalExceptionFilter
KiFatalExceptionHandler
KiFatalFilter
KiFilterBugCheckInfo
KiFilterFiberContext
KiFinalizeCoreControlBlockAssignment
KiFinalizeGroupAssignment
KiFinalizeTimer2Disablement
KiFindBiasedProcessorIndex
KiFindNextTimerDueTime
KiFindRankBiasedIdleSmtSet
KiFindStandbyThreadForSteal
KiFindSubNodeForProcessorNumber
KiFixupControlProtectionKernelModeReturnMismatch
KiFixupControlProtectionUserModeReturnMismatch
KiFloatingErrorFault
KiFloatingErrorFaultShadow
KiFlushAddressSpaceTb
KiFlushAffinity
KiFlushBhbDuringTrapEntryOrExit
KiFlushBhbDuringTrapEntryOrExitAlderLake
KiFlushBhbDuringTrapEntryOrExitPreAlderLake
KiFlushBhbDuringTrapEntryOrExitTsx
KiFlushCurrentRsb
KiFlushCurrentTbOnly
KiFlushQueueApc
KiFlushQueuedDpcsWorker
KiFlushRangeAllCaches
KiFlushRangeTb
KiFlushRangeWorker
KiFlushReadyLists
KiFlushRsbTarget
KiFlushSharedReadyQueueReadyLists
KiFlushSingleTbWorker
KiFlushSoftwareInterruptBatch
KiFlushWriteBuffersTarget
KiForceParkDutyCycleDpcCallback
KiForceSymbolReferences
KiForegroundTimerCallback
KiForwardTick
KiFreeForceParkingData
KiFreeIdleSearchStructures
KiFreeLocalSharedReadyQueue
KiFreePrcbThreads
KiFreeProcessorNumber
KiFreeProcessorStacks
KiFreeProcessorStateInitializationParameters
KiFreeStaticRescheduleContext
KiFreeTemporaryStacks
KiFreeThreadCycleTable
KiFreezeDataTableEntry
KiFreezeSingleThread
KiFreezeTargetExecution
KiGeneralProtectionFault
KiGeneralProtectionFaultShadow
KiGenerateHeteroSets
KiGenericCallDpcInitiatorDpc
KiGenericCallDpcInitiatorWorker
KiGetAllocatedXSaveArea
KiGetClockIntervalOneShot
KiGetClockTimerEarliestDeadline
KiGetClockTimerState
KiGetComparisonRanks
KiGetCpuSetData
KiGetCpuVendor
KiGetCurrentGroupCount
KiGetCurrentKernelShadowStackBounds
KiGetCurrentScheduledThreadProcessor
KiGetDeepIdleProcessors
KiGetGdtIdt
KiGetHalExtensionList
KiGetHalExtensionModuleFromLinks
KiGetHalNumaConversionFactor
KiGetIdealNodeProcessByGroup
KiGetInterruptObjectAddress
KiGetInterruptObjectFromVector
KiGetIptInfo
KiGetL2L3AssociativityAmd
KiGetLdtr
KiGetLoadOptions
KiGetNextClockOwner
KiGetNextIdleSearchTargetInGeneration
KiGetNextTimer2ExpirationDueTime
KiGetNextTimerExpirationDueTime
KiGetNtDdiVersion
KiGetNumberOfActiveSubNodes
KiGetPastDueIRTimerInfo
KiGetPendingTick
KiGetProcessCpuSetMaskPointer
KiGetProcessorClassForPolicy
KiGetProcessorInformation
KiGetProcessorSignature
KiGetRecoveryInformation
KiGetSavedIptState
KiGetSavedSupervisorState
KiGetSs
KiGetSubNodeForGroup
KiGetSystemServiceTraceTable
KiGetTbLeafInfo
KiGetThreadEffectiveRankNonZero
KiGetTr
KiGetTrapFrameMode
KiGetTrapFrameRegister
KiGroupSchedulingGenerationEnd
KiGroupSchedulingQuantumEnd
KiHaltOnAddress
KiHaltOnAddressWakeEntireList
KiHandleBound
KiHandleDeferredPreemption
KiHandleMcheck
KiHandleMultipleBugchecksDuringRecovery
KiHeadlessDisplayString
KiHeteroAttemptPreemptionSwapOnSubNode
KiHeteroComputeThreadImportance
KiHeteroComputeThreadWorkloadProperties
KiHeteroIdleSetReduction
KiHeteroIsSwapBeneficialForPerformance
KiHeteroReduceToMaximallyPreferredByClass
KiHeteroScanQueueForPreemptionSwapTarget
KiHeteroSelectIdleProcessorFromNode
KiHeteroSelectIdleProcessorFromSubNode
KiHeteroSelectProcessorToPreempt
KiHvEnlightenedGuestPriorityKick
KiHvInterrupt
KiHvInterruptDispatch
KiHvInterruptShadow
KiHvInterruptSubDispatch
KiIdleLoop
KiIdleSchedule
KiInSwapProcesses
KiInSwapSingleProcess
KiIncrementConcurrencyCount
KiIncrementRankListMembersUnderLock
KiInitDpcThresholds
KiInitDynamicProcessorIpi
KiInitDynamicTraceSupport
KiInitIptState
KiInitMachineDependent
KiInitPrcb
KiInitSupervisorStateExtensionHost
KiInitSystem
KiInitializeAndStartInitialThread
KiInitializeAvailableCpusWorkItem
KiInitializeBootStructures
KiInitializeBugcheckRecoveryProcessor
KiInitializeCacheErrataSupport
KiInitializeContextThread
KiInitializeCoreControlBlock
KiInitializeDescriptorIst
KiInitializeDpcList
KiInitializeDpcRuntimeHistoryHashTables
KiInitializeDynamicProcessor
KiInitializeDynamicProcessorDpc
KiInitializeForceIdle
KiInitializeForegroundBoostThread
KiInitializeGlobalState
KiInitializeHresetSupport
KiInitializeIdealProcessorAssignmentBlock
KiInitializeIdealProcessorRebalancer
KiInitializeIdleProcess
KiInitializeIdt
KiInitializeInterrupt
KiInitializeKernel
KiInitializeKernelShadowStacks
KiInitializeLegacyWatchdogProfileThresholds
KiInitializeMTRR
KiInitializeNormalPriorityAntiStarvationPolicies
KiInitializeNxSupportDiscard
KiInitializePrcbContext
KiInitializePriorityState
KiInitializeProcessAvailableCpuState
KiInitializeProcessor
KiInitializeProcessorCycleAccumulation
KiInitializeProcessorState
KiInitializeProcessorStateInitializationParameters
KiInitializeProcessorXSaveStructures
KiInitializeReservedCpuSets
KiInitializeSchedulerSubNode
KiInitializeSharedReadyQueue
KiInitializeSingleDpcRuntimeHistoryHashTable
KiInitializeSoftwareInterruptBatch
KiInitializeSystemSubNodeEnumerationContext
KiInitializeThreadCycleTable
KiInitializeTimer2
KiInitializeTimer2Data
KiInitializeTopologyStructures
KiInitializeUserApc
KiInitializeWpsWorkloadClasses
KiInitializeXSaveConfiguration
KiInitiateGenericCallDpc
KiInitiateUserApc
KiInsertDeferredPreemptionApc
KiInsertDeferredReadyList
KiInsertInterruptObjectOrdered
KiInsertNewDpcRuntime
KiInsertQueue
KiInsertQueueApc
KiInsertQueueDpc
KiInsertQueueInternal
KiInsertTimer2
KiInsertTimer2WithCollectionLockHeld
KiInsertTimerTable
KiInstallSubNodeHeteroSets
KiInswapAndReadyThread
KiIntPartGetLowestClassProcessorInMask
KiIntRedirectConnnect
KiIntRedirectQueueRequestOnProcessor
KiIntSteerAssignCpuSet
KiIntSteerCalculateDistribution
KiIntSteerCalculatePriorityDistribution
KiIntSteerCalculateUniformDistribution
KiIntSteerChooseInitialTargetProcessors
KiIntSteerClearCpuSetAssignment
KiIntSteerComputeCpuSet
KiIntSteerConnect
KiIntSteerDisable
KiIntSteerDistributeInterrupts
KiIntSteerEnable
KiIntSteerEtwEventEnabled
KiIntSteerEventTraceControlCallback
KiIntSteerGetLineInformation
KiIntSteerInit
KiIntSteerInitPrcb
KiIntSteerLogMask
KiIntSteerLogProc
KiIntSteerLogState
KiIntSteerLogStatus
KiIntSteerSetDestination
KiIntSteerUpdateDeviceInterruptMask
KiIntSteerVerifyDestination
KiInterlockedDecrementRankListMembersNoFence
KiInterlockedIncrementRankListMembersNoFence
KiInterruptDispatch
KiInterruptDispatchCommon
KiInterruptDispatchNoEOI
KiInterruptDispatchNoLock
KiInterruptDispatchNoLockNoEtw
KiInterruptHandler
KiInterruptSubDispatch
KiInterruptSubDispatchNoLock
KiInterruptSubDispatchNoLockNoEtw
KiInterruptThunk
KiIntersectFeaturesWithPolicy
KiInvalidOpcodeFault
KiInvalidOpcodeFaultShadow
KiInvalidTssFault
KiInvalidTssFaultShadow
KiInvokeBugCheckAddTriageDumpDataCallbacks
KiInvokeBugCheckEntryCallbacks
KiInvokeDeferredDpcWatchdogViolation
KiInvokeInterruptServiceRoutine
KiIpiEnlightenedGuestPriorityKick
KiIpiGenericCallTarget
KiIpiInterrupt
KiIpiInterruptShadow
KiIpiInterruptSubDispatch
KiIpiProcessRequests
KiIpiSendPacket
KiIpiSendRequest
KiIpiSendRequestEx
KiIpiStallOnPacketTargets
KiIpiStallOnPacketTargetsPrcb
KiIpiTargetCall
KiIpiTargetCallIpi
KiIpiUpdateExtendedSupervisorState
KiIpiUpdateThreadTag
KiIpiUpdateUserIsolationDomain
KiIpiWaitForRequestBarrier
KiIsAddressRangeValid
KiIsBranchConfusionMitigationDesired
KiIsBranchConfusionMitigationSupported
KiIsBranchConfusionPresent
KiIsFbClearSupported
KiIsFlushEntire
KiIsHyperVCr3RspErrataPresent
KiIsIntelPebsSupported
KiIsInterruptTypeSecondary
KiIsIsolationUnitIdleByHandle
KiIsKernelCfgActive
KiIsKernelStackSwappable
KiIsKvaLeakSimulated
KiIsKvaShadowDisabled
KiIsKvaShadowNeededForBranchConfusion
KiIsNXSupported
KiIsNodeFull
KiIsPgiKernel
KiIsPrcbThread
KiIsProcessTerminationRequested
KiIsQosGroupingActive
KiIsRecoveryPossibleOnCurrentStack
KiIsSafeBoot
KiIsSecureFlushRequired
KiIsSrsoMitigationDesired
KiIsThreadConstrainedBySchedulingGroup
KiIsThreadEligibleForPreemptionSwap
KiIsThreadExemptFromForcePark
KiIsThreadRankBiased
KiIsThreadRankNonZero
KiIsThreadStateControlledByProcessor
KiIsTraceMemoryAccess
KiIsWinPEBoot
KiIsXSaveFeatureAllowed
KiIsrThunk
KiIsrThunkShadow
KiJoinCooperativeIdleSearch
KiKernelExit
KiKernelIstExit
KiKernelIstMceExit
KiKernelIstMceExitStart
KiKernelShadowStackAssistMceAlternateReturn
KiKernelSysretExit
KiLeaveCooperativeIdleSearch
KiLeaveCriticalRegionUnsafe
KiLoadDirectoryTableBase
KiLoadMTRRTarget
KiLockExtendedServiceTable
KiLockServiceTable
KiLockStepExecution
KiLogClockIncrementUpdate
KiLogControlProtectionKernelModeReturnMismatch
KiLogControlProtectionUserModeReturnMismatch
KiLogSingleDpcSoftTimeoutEvent
KiLogUserCetSetContextIpValidationFailure
KiLogUserCetSetContextIpValidationFailureWorker
KiLowerIrqlProcessIrqlFlags
KiMachineCheckControl
KiMarkBugCheckRegions
KiMarkMtrrHiberPhase
KiMaskInterruptInternal
KiMaskSecondaryInterruptInternal
KiMaskToLength
KiMatchLoadOption
KiMayStealStandbyThread
KiMcaDeferredRecoveryService
KiMceDispatch
KiMceLinkage
KiMcheckAbort
KiMcheckAbortShadow
KiMcheckAlternateReturn
KiMcheckExit
KiMcheckFastForward
KiMergeSmallSharedReadyQueueAssignments
KiModifySystemAllowedCpuSetsWithLock
KiMonitorCacheErrata
KiMoveApcState
KiNmiInterrupt
KiNmiInterruptShadow
KiNmiInterruptShadowStart
KiNmiInterruptStart
KiNodeCostSort
KiNonNumaQueryNodeCapacity
KiNonNumaQueryNodeDistance
KiNormalPriorityReadyScan
KiNotifyAvailableCpusChangeCpuPartition
KiNotifyAvailableCpusChangeProcess
KiNpxNotAvailableFault
KiNpxNotAvailableFaultShadow
KiNpxSegmentOverrunAbort
KiNpxSegmentOverrunAbortShadow
KiOnlyClockInterruptPending
KiOpCheckUnhandledSecurePciAccessViolation
KiOpComputeLinearAddress
KiOpDecode
KiOpDecodeModRM
KiOpFetchBytes
KiOpFetchNextByte
KiOpGetPciConfigSpaceAccessInfoFromPhysicalAddress
KiOpPatchCode
KiOpPciConfigSpaceAccessCommon
KiOpPreprocessSecureFault
KiOpRetrieveRegMemAddress
KiOp_Div
KiOp_INT
KiOp_Illegal
KiOp_MOVAPS
KiOp_MOVDQA
KiOp_Mov
KiOp_PREFETCH3
KiOp_Priv
KiOp_SGDTSIDT
KiOp_SLDTSTRSMSW
KiOptimizeSpecCtrlSettingsWorker
KiOutSwapKernelStacks
KiOutSwapProcesses
KiOverflowTrap
KiOverflowTrapShadow
KiPageFault
KiPageFaultShadow
KiParkCurrentProcessor
KiParseLoadOptions
KiPassiveIsrWatchdog
KiPcToFileHeader
KiPerformAutomaticGroupConfiguration
KiPerformExplicitGroupAssignment
KiPerformGroupConfiguration
KiPerformHeteroSoftParkElection
KiPerformSoftParkElection
KiPerformWaitDeferredWork
KiPlatformSwapStacksAndCall
KiPollFreezeExecution
KiPopulateNodeInformation
KiPopulateSubNodes
KiPopulateTrivialProcessorSelectionResult
KiPrcbArrayForIsolationWidth
KiPrepareFlushCurrentAffinity
KiPrepareFlushParameters
KiPrepareReadyThreadForRescheduling
KiPrepareUpdateCoresHeteroMask
KiPreprocessFault
KiPreprocessFlushTb
KiPriQueueThreadPriorityChanged
KiPristineTriageDumpAllocationWorker
KiProcessControlProtection
KiProcessControlProtectionFromKernelMode
KiProcessDeferredDpcWatchdogViolation
KiProcessDeferredReadyList
KiProcessDisconnectList
KiProcessExpiredTimerList
KiProcessNMI
KiProcessPendingDisconnect
KiProcessPendingForegroundBoosts
KiProcessProfileList
KiProcessScbTracingList
KiProcessSecondarySignalList
KiProcessThreadWaitList
KiProcessorCallbackNop
KiPublishProcessorFeatures
KiQuantumEnd
KiQueryCpuPartitionAffinity
KiQueryCpuPartitionAffinityProcess
KiQueryCpuSetsProcessWithLock
KiQueryDpcRuntimeHistory
KiQueryEffectivePriorityThread
KiQueryHeteroSetFromSubNode
KiQueryIptSupport
KiQueryProcessorNode
KiQueryProximityNode
KiQueryQuantumReset
KiQuerySubNodeActiveAffinity
KiQueryUnbiasedInterruptTime
KiQueueReadyThread
KiQueueTebUpdateApc
KiRaiseAssertion
KiRaiseAssertionShadow
KiRaiseException
KiRaiseIrqlProcessIrqlFlags
KiRaiseSecurityCheckFailure
KiRaiseSecurityCheckFailureShadow
KiRcuCheckQuiescent
KiRcuCheckQuiescentForIdle
KiRcuCompareGraceSequence
KiRcuFlushCompleted
KiRcuFlushCompletedDpcRoutine
KiRcuFlushCompletedWorkerRoutine
KiRcuForEachParticipatingCpu
KiRcuProcessorInitialize
KiRcuReportQuiescentState
KiRcuStartGracePeriod
KiRcuStartGracePeriodEnumCallback
KiRcuSystemInitialize
KiReadFixedMtrr
KiReadGuestSchedulerAssistPriority
KiReadKernelDr7
KiReadNextTimer2DueTimeForHrCollections
KiReadyDeferredReadyList
KiReadyOutSwappedThreads
KiRebaselineProcessorStartCycles
KiReconfigureSubNodeSchedulingInformation
KiRecordRecoveryFailure
KiReduceAffinityToRankListMaximums
KiReduceAffinityToRankListMinimums
KiReduceAffinityToRankListValuesEqualTo
KiReduceByEffectiveIdleSmtSet
KiReduceToUnderMaxQuotaSet
KiRegisterBugcheckRecoveryCallback
KiRegisterProcessorWithCooperativeIdleSearchContext
KiReleaseCpuPartitionAssignmentLock
KiReleaseCpuPartitionLock
KiReleaseDpcCorralLock
KiReleasePrcbLock
KiReleasePrcbLocksForGroupAffinity
KiReleasePrcbLocksForIsolationUnit
KiReleaseProcessLockExclusive
KiReleaseProcessLockShared
KiReleaseQueuedSpinLockInstrumented
KiReleaseSecondaryInterruptConnectLock
KiReleaseSecondaryPassiveConnectLock
KiReleaseSecondarySignalListLock
KiReleaseSpinLockInstrumented
KiReleaseSubNodeLock
KiReleaseThreadLockLowerIrql
KiReleaseThreadStateLock
KiRemoveAndFreeCpuPartitionAssignmentProcess
KiRemoveBoostThread
KiRemoveCpuPartitionAssignmentProcess
KiRemoveCurrentThreadScbReadyQueueEnumerator
KiRemoveCurrentlyEnumeratedThreadFromReadyQueue
KiRemoveEntryTimer
KiRemoveForceParkedProcessorsFromAffinity
KiRemoveModelSpecificUnsupportedFeatures
KiRemovePrcbWaitEntry
KiRemoveProcessorFromCoreControlBlock
KiRemoveQueueApc
KiRemoveSystemWorkPriorityKick
KiRemoveThreadFromAnyReadyQueue
KiRemoveThreadFromReadyQueue
KiRemoveThreadFromScbQueue
KiRemoveThreadFromSchedulingGroup
KiRemoveThreadFromSharedReadyQueue
KiRemoveTimer2
KiReparkIdlingProcessorIfNecessary
KiRequestProcessInSwap
KiRequestSchedulerApcThread
KiRequestSoftwareInterrupt
KiRequestTimer2Expiration
KiRescheduleThreadAfterAffinityChange
KiReselectIdealProcessorAfterAffinityChange
KiResetBootProcessorApicMask
KiResetClockIntervalOneShot
KiResetForceIdle
KiResetGlobalDpcWatchdogProfiler
KiResetProcessorTraceBuffer
KiRestoreClockTickRate
KiRestoreDebugRegisterState
KiRestoreFeatureBits
KiRestoreIptState
KiRestoreProcessorControlState
KiRestoreProcessorState
KiRestoreSetContextState
KiRestoreThreadIptState
KiRestoreXSaveSupport
KiResumeClockTimer
KiResumeThread
KiResumeThreadCycleAccumulation
KiRetireDpcList
KiRollbackSlistPops
KiRspInIstStack
KiRundownAvailableCpusWorkItem
KiRundownMutants
KiSanitizeProfileInterval
KiSatisfyThreadWait
KiSaveBugcheckRecoveryProgress
KiSaveCurrentEtwTraceBuffer
KiSaveDebugRegisterState
KiSaveExtendedAndSupervisorState
KiSaveInitialProcessorControlState
KiSaveIptState
KiSaveProcessorControlState
KiSaveProcessorState
KiSaveThreadIptState
KiSaveXSaveSupport
KiScanBugCheckCallbackList
KiScanInterruptObjectList
KiScanSharedReadyThreads
KiScheduleBugcheckRecovery
KiScheduleBugcheckRecoveryWorkItem
KiScheduleNextForegroundBoost
KiScheduleSoftParkElectionIfNecessary
KiScheduleThreadToIdleIsolationUnit
KiScheduleThreadToRescheduleContext
KiSchedulerApc
KiSchedulerApcNop
KiSchedulerApcRundown
KiSchedulerApcTerminate
KiSchedulerAssistBugCheckAddPagesCallback
KiSearchForNewThread
KiSearchForNewThreadsForRescheduleContext
KiSearchForNewThreadsInStandby
KiSearchForNewThreadsOnTarget
KiSearchForNewThreadsWithinL0SearchContext
KiSearchForNewThreadsWithinL1SearchContext
KiSearchForNewThreadsWithinRestOfSystem
KiSearchForNewThreadsWithinSearchContext
KiSegmentNotPresentFault
KiSegmentNotPresentFaultShadow
KiSelectActiveTimerTable
KiSelectCandidateProcessor
KiSelectDpcData
KiSelectIdleProcessor
KiSelectProcessorToPreempt
KiSendClockInterruptToTargetProcessor
KiSendFreeze
KiSendHeteroRescheduleIntRequest
KiSendHeteroRescheduleIntRequestHelper
KiSendSoftwareInterrupt
KiSendSoftwareInterruptAffinity
KiSendThawExecution
KiServiceInternal
KiServiceLinkage
KiServiceTablesLocked
KiSetAddressPolicy
KiSetAffinityThread
KiSetBasePriorityAndClearDecrement
KiSetBugCheckRecoveryProgressFlag
KiSetCacheInformation
KiSetCacheInformationAmd
KiSetClockInterval
KiSetClockIntervalOneShot
KiSetClockIntervalToMinimumRequested
KiSetClockTickRate
KiSetClockTimer
KiSetClockTimerDeadlineNoWake
KiSetClockTimerKTimerDeadlines
KiSetControlEnforcement
KiSetDebuggerOwner
KiSetDisableBoostThread
KiSetDpcRequestFlag
KiSetFeatureBits
KiSetForceIdleState
KiSetForegroundBoost
KiSetHardwareSpeculationControlFeatures
KiSetIdealNodeProcessByGroup
KiSetIntervalWorker
KiSetLegacyAffinityThread
KiSetLockOwnershipQuantum
KiSetMicrocodeUpdateOptions
KiSetNextClockTickDueTime
KiSetPageAttributesTable
KiSetPendingTick
KiSetPriorityBoost
KiSetPriorityThread
KiSetProcessorDpcLimits
KiSetProcessorIdle
KiSetProcessorIdle_LockFree
KiSetProcessorIdle_WithLock
KiSetProcessorSignature
KiSetSchedulerAssistPriority
KiSetSpecCtrlNmi
KiSetStandardizedCacheInformation
KiSetSystemAffinityThread
KiSetSystemAffinityThreadToProcessor
KiSetSystemTimeDpc
KiSetThreadIsolationWidthUnsafe
KiSetThreadSchedulingGroup
KiSetTimerEx
KiSetUserTbFlushPending
KiSetVirtualHeteroClockIntervalRequest
KiSetVirtualHeteroClockIntervalRequestDpcRoutine
KiSetVirtualMitigationControl
KiSetVpThreadHrTimerActive
KiSetupForInstrumentationReturn
KiSetupTimeIncrement
KiShadowProcessorAllocation
KiShouldActivateHRTimerClock
KiShouldLogUserModeReturnMismatch
KiShouldPreemptionBeDeferred
KiShouldRearmClockTimer
KiShouldScanLocalReadyQueue
KiShouldScanSharedReadyQueue
KiShouldSearchSharedReadyQueue
KiShouldSoftParkElectionBePerformed
KiShuffleAssignedSubNodes
KiSignalThread
KiSignalThreadForApc
KiSignalWaitDisconnectLock
KiSlistRollbackDpc
KiSoftParkElectionDpcRoutine
KiSoftParkElectionUnparkProcessor
KiSpuriousDispatchNoEOI
KiSrcuCheckQuiescent
KiSrcuCompareGraceSequence
KiSrcuFlushCompleted
KiSrcuFlushCompletedDpcRoutine
KiSrcuInitializeTopology
KiSrcuNotifyGracePeriodStarted
KiSrcuNotifyGracePeriodStartedOnCpu
KiSrcuNotifyWorkerAcquire
KiSrcuNotifyWorkerDpcRoutine
KiSrcuNotifyWorkerSelectAndQueue
KiSrcuProcessorAddToTopologyTree
KiSrcuProcessorInitialize
KiSrcuReadUnlockIpi
KiSrcuReadUnlockRemote
KiSrcuReportQuiescent
KiSrcuStartGracePeriod
KiStackAttachProcess
KiStackFault
KiStackFaultShadow
KiStallBugcheckThread
KiStartDebugAccumulation
KiStartDpcThread
KiStartDynamicProcessor
KiStartForceParkSingleDutyCycleTimerCallback
KiStartIdealProcessorAssignmentBlock
KiStartIdleThread
KiStartInterruptCycleAccumulation
KiStartPrcbThread
KiStartPrcbThreads
KiStartProfileTarget
KiStartReadyListEnumerator
KiStartReadyQueueEnumeratorForRescheduleContext
KiStartRescheduleContext
KiStartSavingSupervisorState
KiStartSystemThread
KiStartThreadCycleAccumulation
KiStartThreadCycleAccumulationContextSwap
KiStopForceParkSingleDutyCycleTimerCallback
KiStopProfileTarget
KiSuspendClockTimer
KiSuspendThread
KiSwInterrupt
KiSwInterruptDispatch
KiSwInterruptPresent
KiSwInterruptShadow
KiSwapContext
KiSwapDirectoryTableBaseTarget
KiSwapStacksAndRetireDpcList
KiSwapThread
KiSwitchKernelStackAndCallout
KiSwitchPriQueue
KiSynchCounterSetCallback
KiSynchNumaCounterSetCallback
KiSynchronizeAddressPolicyTarget
KiSynchronizeIdleIsolationDomainEntry
KiSynchronizeIdleIsolationDomainExit
KiSynchronizePassiveInterruptExecution
KiSynchronizeSecurityDomainTarget
KiSynchronizeStibpPairingTarget
KiSynchronizeUserIsolationDomainEntry
KiSynchronizeUserIsolationDomainExit
KiSystemCall32
KiSystemCall32Shadow
KiSystemCall64
KiSystemCall64Shadow
KiSystemService
KiSystemServiceHandler
KiSystemServiceShadow
KiSystemServiceTraceTableCompareFunction
KiSystemStartup
KiTallyHeteroSoftParkElectionVotes
KiTestNodeAffinity
KiThawSingleThread
KiThreadSetUnusualBoost
KiTimer2ComputeDueTime
KiTimer2Expiration
KiTimerDispatch
KiTimerExpiration
KiTimerExpirationDpc
KiTimerWaitTest
KiTpCompletion
KiTpCompletionContextSize
KiTpHandleTrap
KiTpIsExcludedKernelTracepointLocation
KiTpIsSupportedKernelTracepointLocation
KiTpReadImageData
KiTpSetupCompletion
KiTpWriteBreakpoint
KiTpWriteMemory
KiTpWriteUmMemory
KiTraceCancelTimer2
KiTraceLogControlCallback
KiTraceLogHeteroRundown
KiTraceSetTimer
KiTraceSetTimer2
KiTrackSystemCallEntry
KiTrackSystemCallExit
KiTransitionSchedulingGroupGeneration
KiTriggerForegroundBoostDpc
KiTryAcquirePrcbLocksForIsolationUnit
KiTryLocalThreadSchedule
KiTryPopulateLogicalProcessorInformation
KiTryScheduleNextForegroundBoost
KiTryToAcquireQueuedSpinLockInstrumented
KiTryToAcquireSpinLockInstrumented
KiTryUnwaitThread
KiTryUpgradeIsolationUnitLockHandle
KiUnassignProcessorNumberFromPrcb
KiUncommitGroupSubNodeAssignments
KiUnlockKobjectArray
KiUnmaskInterruptInternal
KiUnmaskSecondaryInterruptInternal
KiUnparkCurrentProcessor
KiUnshadowProcessorAllocation
KiUnstackDetachProcess
KiUnwindUserSspForApcContextCopyBypass
KiUpdateBugcheckRecoveryProgress
KiUpdateGlobalCpuSetConfiguration
KiUpdateGroupSchedulingRank
KiUpdateHgsScores
KiUpdateLocalReadyQueueStatisticsOnInsertion
KiUpdateLocalReadyQueueStatisticsOnRemoval
KiUpdateNodeAffinitizedFlag
KiUpdateNumberProcessorsIpi
KiUpdatePriorityMatrixForRunningTransition
KiUpdateProcessAvailableCpuState
KiUpdateProcessorClasses
KiUpdateProcessorCount
KiUpdateProcessorDpcWatchdogConfiguration
KiUpdateRunTime
KiUpdateSavedSupervisorState
KiUpdateSharedReadyQueueAffinityThread
KiUpdateSharedReadyQueueStatisticsOnInsertion
KiUpdateSharedReadyQueueStatisticsOnRemoval
KiUpdateSoftParkElectionStatisticsOnInsertion
KiUpdateSoftParkElectionStatisticsOnRemoval
KiUpdateSpecCtrlEnhancedIBRS
KiUpdateSpeculationControl
KiUpdateStandbyStealSummaryForStandbyChange
KiUpdateStibpPairing
KiUpdateSystemAvailableCpuState
KiUpdateSystemTime
KiUpdateTebApc
KiUpdateTebApcNop
KiUpdateTebSchedulingPropertiesCurrentThread
KiUpdateThreadCpuSetAffinitiesFromDpcLevel
KiUpdateThreadCpuSetAffinitiesProcess
KiUpdateThreadCpuSets
KiUpdateThreadHgsFeedback
KiUpdateThreadPriority
KiUpdateThreadQosGroupingSummaries
KiUpdateThreadSchedulingProperties
KiUpdateTime
KiUpdateTimeAssist
KiUpdateTimer2Collections
KiUpdateTimer2Flags
KiUpdateTotalCyclesCurrentThread
KiUpdateVPBackingThreadPriority
KiUpdateVpBackingThreadPriorityDpcRoutine
KiUpdateVpBackingThreadPriorityFromTopLevel
KiUpdateVpBackingThreadPriorityOnPriorityQuery
KiUpdateVpBackingThreadPriorityOnReadyQueueInsertion
KiValidateComponentName
KiValidateCpuSetMasks
KiValidateDpcWatchdogConfiguration
KiValidateTriageDumpDataArray
KiVerifyContextIpForUserCet
KiVerifyContextXStateCetUEnabled
KiVerifyPdata
KiVerifyScopes
KiVerifyScopesExecute
KiVerifyXcpt0
KiVerifyXcpt1
KiVerifyXcpt10
KiVerifyXcpt11
KiVerifyXcpt12
KiVerifyXcpt13
KiVerifyXcpt14
KiVerifyXcpt15
KiVerifyXcpt2
KiVerifyXcpt3
KiVerifyXcpt4
KiVerifyXcpt5
KiVerifyXcpt6
KiVerifyXcpt7
KiVerifyXcpt8
KiVerifyXcpt9
KiVerifyXcptFilter
KiVerifyXcptFinally
KiVirtualizationException
KiVirtualizationExceptionShadow
KiVmbusInterrupt0
KiVmbusInterrupt0Shadow
KiVmbusInterrupt1
KiVmbusInterrupt1Shadow
KiVmbusInterrupt2
KiVmbusInterrupt2Shadow
KiVmbusInterrupt3
KiVmbusInterrupt3Shadow
KiVmbusInterruptDispatch
KiVmbusInterruptSubDispatch
KiWaitForAllObjects
KiWaitForContextSwap
KiWaitForReboot
KiWaitSatisfyMutant
KiWaitSatisfyOther
KiWakeAddressAll
KiWakeOtherQueueWaiters
KiWakePriQueueWaiter
KiWakeQueueWaiter
KiWobQosResponseRequired
KiWriteCpuSetMasks
KiWriteFixedMtrr
KiWriteRankListMembersUnderLock
KiXSavesManagesIpt
KiXmmException
KiXmmExceptionShadow
KiYieldWaitForDebugger
KitLogFeatureUsage
KitpInitAitSampleRate
KitpOpenRegKey
KitpReadUlongFromKey
KscpCfgDispatchUserCallTargetEsNoSmep
KscpCfgDispatchUserCallTargetEsSmep
KscpCfgHandleInvalidCallTarget
KseAddHardwareId
KseDriverLoadImage
KseDriverUnloadImage
KseDsCallbackHookAddDevice
KseDsCallbackHookDriverStartIo
KseDsCallbackHookDriverUnload
KseDsCallbackHookIrpDeviceControlFunction
KseDsCallbackHookIrpFunction
KseDsCallbackHookIrpInternalDeviceControlFunction
KseDsCallbackHookIrpPnpFunction
KseDsCallbackHookIrpPowerFunction
KseDsCompletionHookForPowerDevice
KseDsCompletionHookForStartDevice
KseDsCompletionHookForStopDevice
KseDsHookDriverTargeted
KseDsHookDriverUntargeted
KseDsHookExAllocatePool
KseDsHookExAllocatePoolWithTag
KseDsHookExFreePool
KseDsHookExFreePoolWithTag
KseDsHookIoCreateDevice
KseDsHookPoRequestPowerIrp
KseGetIoCallbacks
KseHookExAllocatePoolWithTag
KseHookMemcpy_s
KseHookMmGetVirtualForPhysical
KseHookMmMapIoSpace
KseHookQueryValueKey
KseInitialize
KseKPSOHookDriverTargeted
KseLookupHardwareId
KseQueryDeviceData
KseQueryDeviceDataList
KseQueryDeviceFlags
KseRegisterShim
KseRegisterShimEx
KseResetDeviceCache
KseSetCompletionHook
KseSetDeviceFlags
KseShimDatabaseBootInitialize
KseShimDatabaseBootRelease
KseShimDatabaseClose
KseShimDatabaseOpen
KseShimDriverIoCallbacks
KseSkipDriverUnloadCallbackHookDriverUnload
KseSkipDriverUnloadHookDriverTargeted
KseSkipDriverUnloadHookDriverUntargeted
KseUnregisterShim
KseUserCetBasicModeAllowRetTargetNotCetCompatHookDriverTargeted
KseVersionLieInitialize
KsepApplyShimsToDriver
KsepCacheDeviceEqual
KsepCacheDeviceFree
KsepCacheDeviceHash
KsepCacheDeviceInsertData
KsepCacheHwIdEqual
KsepCacheHwIdFree
KsepCacheHwIdHash
KsepCacheInitialize
KsepCacheInsert
KsepCacheLock
KsepCacheLookup
KsepCacheReset
KsepCacheUninitialize
KsepCacheUnlock
KsepCompletionSafeWrapper
KsepDbCacheInsertDevice
KsepDbCacheQueryDevice
KsepDbCacheQueryDeviceData
KsepDbCacheQueryDeviceDataList
KsepDbCacheReadDevice
KsepDbCacheReadDeviceInternal
KsepDbFreeDriverShims
KsepDbGetDriverShims
KsepDbGetDriverShimsInternal
KsepDbGetSdbString
KsepDbGetShimInfo
KsepDbQueryRegistryDeviceData
KsepDbQueryRegistryDeviceDataList
KsepDbReadKData
KsepDbReadKFlag
KsepDebugPrint
KsepDeletePatchSdb
KsepDsEventAddDevice
KsepDsEventDataIrp
KsepDsEventDevicePowerCompleted
KsepDsEventDevicePowerIrp
KsepDsEventDriverLoad
KsepDsEventDriverStartIo
KsepDsEventDriverUnload
KsepDsEventIoCreateDevice
KsepDsEventPnpIrp
KsepDsEventPnpStartDevice
KsepDsEventPnpStopDevice
KsepDsEventPoolAllocate
KsepDsEventPoolFree
KsepDsEventRequestPowerIrp
KsepDsEventSystemPowerIrp
KsepEngineGetShimsFromRegistry
KsepEngineInitialize
KsepEngineReadFlags
KsepEvntLogFlagsApplied
KsepEvntLogShimsApplied
KsepGetLoadedModulesList
KsepGetModuleInfoByName
KsepGetShimCallbacksForDriver
KsepGetShimsForDriver
KsepIsModuleShimmed
KsepIsShimRegistered
KsepLoadShimProvider
KsepLogError
KsepLogEtwMessage
KsepLogInfo
KsepMatchInitAcpiOemInfo
KsepMatchInitBiosInfo
KsepMatchInitCpuInfo
KsepMatchInitMachineInfo
KsepPatchDriverImportsTable
KsepPatchImportTableEntry
KsepPoolAllocateNonPaged
KsepPoolAllocatePaged
KsepPoolFreeNonPaged
KsepPoolFreePaged
KsepRegistryCloseKey
KsepRegistryCreateKey
KsepRegistryEnumValue
KsepRegistryOpenKey
KsepRegistryQueryDWORD
KsepRegistryQueryDriverShims
KsepRegistryQueryKeyInformation
KsepRegistryQueryMULTISZ
KsepRegistryQuerySZ
KsepRegistryQueryValue
KsepResolveApplicableShimsForDriver
KsepResolveShimHooks
KsepSdbBootInitialize
KsepSdbBootRelease
KsepSdbMapToMemory
KsepSdbUnmapFromMemory
KsepShimDatabaseTime
KsepShimDbChanged
KsepSkipDriverUnloadEventDriverLoad
KsepSkipDriverUnloadEventDriverUnload
KsepStringAnsiToUnicode
KsepStringConcatenate
KsepStringDuplicate
KsepStringDuplicateUnicode
KsepStringFree
KsepStringSplitMultiString
KsepStringTransform
KsepValidateShimProviderAndData
KxAcquireQueuedSpinLock
KxAcquireSpinLock
KxContextToKframes
KxDebugTrapOrFault
KxDeferredDpcWatchdogViolation
KxEnableOptionalXStateFeatures
KxExceptionDispatchOnExceptionStack
KxFlushEntireTb
KxFlushNonGlobalTb
KxFlushSingleTb
KxIsrLinkage
KxIsrLinkageShadow
KxMcheckAbort
KxMcheckAlternateReturn
KxMcheckAlternateReturnShadow
KxNmiInterrupt
KxPlatformSwapStacksAndCall
KxReenterRetpolinedCode
KxReleaseQueuedSpinLock
KxReleaseSpinLock
KxSetAddressPolicy
KxSetTimeStampBusy
KxStartSystemThread
KxStartUserThread
KxSwapStacksAndRetireDpcList
KxSwitchKernelStackCallout
KxTryToAcquireQueuedSpinLock
KxTryToAcquireSpinLock
KxUnexpectedInterrupt0
KxWaitForLockChainValid
KxWaitForLockOwnerShip
KxWaitForLockOwnerShipWithIrql
KxWaitForSpinLockAndAcquire
KyExceptionDispatchOnExceptionStack
KyPlatformSwapStacksAndCall
KyRaiseException
KyStartUserThread
KySwapStacksAndRetireDpcList
KySwitchKernelStackCallout
KzInitializeSpinLock
KzLowerIrql
KzRaiseIrql
KzRefreshWorkloadProperties
KzReleaseAdditionalPrcbLocks
KzSetIrqlUnsafe
LBR_TRACING_ENABLED
LOCK_ADDRESS_SPACE
LOCK_ADDRESS_SPACE_SHARED
LOCK_CM_RM_LIST
LOCK_HIVE_LOAD
LOCK_PAGE_TABLE_COMMITMENT
LOCK_TRANSACTION_LIST
LZ4_compressBound
LZ4_compress_HC_extStateHC
LZ4_compress_HC_extStateHC_fastReset
LZ4_compress_fast_extState
LZ4_initStreamHC
LZ4_resetStreamHC_fast
LZNT1CompressChunk
LZNT1DecompressChunk
LZNT1DecompressChunkNewThread
LZNT1DecompressChunkWorkItem
LZNT1FindMatchMaximum
LZNT1FindMatchStandard
LdrAccessResource
LdrApplyDynamicRelocations
LdrCaptureDynamicRelocationTableHeader
LdrEnumResources
LdrFindResourceDirectory_U
LdrFindResourceEx_U
LdrFindResource_U
LdrImageDirectoryEntryToLoadConfig
LdrInitSecurityCookie
LdrIsResItemExist
LdrLoadAlternateResourceModuleEx
LdrResFallbackLangList
LdrResFindResource
LdrResFindResourceDirectory
LdrResGetRCConfig
LdrResSearchResource
LdrRscIsTypeExist
LdrUnloadAlternateResourceModule
LdrUnloadAlternateResourceModuleEx
LdrpAccessResourceData
LdrpAccessResourceDataNoMultipleLanguage
LdrpCompareResourceNamesWithValidation
LdrpFindMessageInAlternateModule
LdrpGetAlternateResourceModuleHandleEx
LdrpGetFromMUIMemCache
LdrpGetImageSize
LdrpGetMappingFromCacheEntry
LdrpGetParentLangId
LdrpGetRcConfig
LdrpGetResourceFileName
LdrpInitMuiCrits
LdrpKrnGetDataTableEntry
LdrpLoadResourceFromAlternativeModule
LdrpMapResourceFile
LdrpOpenKey
LdrpQueryValueKey
LdrpResCompareResourceNames
LdrpResGetMappingSize
LdrpResGetResourceDirectory
LdrpResSearchResourceInsideDirectory
LdrpResSearchResourceMappedFile
LdrpSearchResourceSection_U
LdrpSectionTableFromVirtualAddress
LdrpSetAlternateResourceModuleHandle
LdrpVerifyAlternateResourceModuleEx
LkmdTelCreateReport
LkmdTelInsertTriageDataBlock
LkmdTelSubmitReport
LkmdTelpFreeMem
LkmdTelpWriteDumpFile
LocalConvertAclToString
LocalConvertSDToStringSD_Rev1
LocalConvertSidToStringSidW
LocalConvertStringSDToSD_Rev1
LocalGetAceCondition
LocalGetAclForString
LocalGetConditionForString
LocalGetRelativeAttributeForString
LocalGetSidForString
LocalGetStringForControl
LocalGetStringForRelativeAttribute
LocalGetStringForSid
LocalpConvertStringSidToSid
LocalpGetStringForCondition
LockRMLog
LogFwInitialize
LogFwReport
LogFwStat
LogFwpRegisterWorker
LookupSidInTable
LpcExitProcess
LpcReplyWaitReplyPort
LpcRequestPort
LpcRequestWaitReplyPort
LpcRequestWaitReplyPortEx
LpcSendWaitReceivePort
LsaCallAuthenticationPackage
LsaDeregisterLogonProcess
LsaFreeReturnBuffer
LsaLogonUser
LsaLookupAuthenticationPackage
LsaRegisterLogonProcess
MIDL_user_allocate
MIDL_user_free
MI_CLEAR_PTE_BITS_FOR_READ_CLUSTER
MI_CLEAR_RESET_PTE
MI_FLUSH_ENTIRE_TB
MI_GET_DIRECTORY_FRAME_FROM_PROCESS_PDE
MI_GET_GRAPHICS_PROTECTION_FROM_VAD
MI_GET_SLAB_STANDBY_PAGE_SLAB_ENTRY
MI_IS_PHYSICAL_ADDRESS
MI_IS_PTE_IN_WS_SWAP_SET
MI_IS_PTE_SHADOW_STACK
MI_IS_RESET_PTE
MI_IS_SOFTWARE_PTE_SHADOW_STACK
MI_LOCK_RELOCATIONS_EXCLUSIVE
MI_LOCK_RELOCATIONS_SHARED
MI_MAKE_PROTECT_WRITE_COPY
MI_NODE_FROM_PFN
MI_PAGEFILE_WRITE
MI_PAGE_TO_FULL_COLOR
MI_PFN_IS_PROTO
MI_PROTO_FORMAT_COMBINED
MI_READ_PTE_LOCK_FREE
MI_SET_PTE_SHADOW_STACK
MI_SET_SLAB_STANDBY_PAGE_SLAB_ENTRY
MI_SET_SOFTWARE_PTE_SHADOW_STACK
MI_TIGHTER_PERMISSIONS
MI_UNLOCK_RELOCATIONS_EXCLUSIVE
MI_UNLOCK_RELOCATIONS_SHARED
MI_WRITE_INVALID_PTE_TB_FLUSH_NEEDED
MI_WSLE_LOG_ACCESS
MUIBugCheck
MUIInitializeResourceLock
MUIRegistrySystemRoutine
MakeGdtReadOnly
MatchAll
McGenControlCallbackV2
McGenEventRegister_EtwRegister
McGenEventUnregister_EtwUnregister
McGenEventWrite_EtwWriteTransfer
McTemplateK0_EtwWriteTransfer
McTemplateK0d_EtwWriteTransfer
McTemplateK0dszud_EtwWriteTransfer
McTemplateK0dz_EtwWriteTransfer
McTemplateK0dzd_EtwWriteTransfer
McTemplateK0hzr0_EtwWriteTransfer
McTemplateK0hzr0d_EtwWriteTransfer
McTemplateK0hzr0hzr2_EtwWriteTransfer
McTemplateK0hzr0qqhzr4_EtwWriteTransfer
McTemplateK0izzx_EtwWriteTransfer
McTemplateK0izzxqjddjz_EtwWriteTransfer
McTemplateK0j_EtwWriteTransfer
McTemplateK0jhzr1_EtwWriteTransfer
McTemplateK0jhzr1d_EtwWriteTransfer
McTemplateK0jjq_EtwWriteTransfer
McTemplateK0jjtq_EtwWriteTransfer
McTemplateK0jq_EtwWriteTransfer
McTemplateK0jqzjzx_EtwWriteTransfer
McTemplateK0jxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_EtwWriteTransfer
McTemplateK0jxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_EtwWriteTransfer
McTemplateK0jxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_EtwWriteTransfer
McTemplateK0jzt_EtwWriteTransfer
McTemplateK0p_EtwWriteTransfer
McTemplateK0pqzzzzzzz_EtwWriteTransfer
McTemplateK0pzz_EtwWriteTransfer
McTemplateK0pzzqdqd_EtwWriteTransfer
McTemplateK0q_EtwWriteTransfer
McTemplateK0qhzr1jxjhzr6_EtwWriteTransfer
McTemplateK0qhzr1z_EtwWriteTransfer
McTemplateK0qqzqqjqzjztd_EtwWriteTransfer
McTemplateK0qqzqqjqzjztx_EtwWriteTransfer
McTemplateK0qqzqqtjqzjzttx_EtwWriteTransfer
McTemplateK0xxq_EtwWriteTransfer
McTemplateK0xxxqq_EtwWriteTransfer
McTemplateK0xxxqqqq_EtwWriteTransfer
McTemplateK0xxxxxxxxxxxxxxxxxxq_EtwWriteTransfer
McTemplateK0z_EtwWriteTransfer
McTemplateK0zd_EtwWriteTransfer
McTemplateK0zdq_EtwWriteTransfer
McTemplateK0zjdd_EtwWriteTransfer
McTemplateK0zjqdtd_EtwWriteTransfer
McTemplateK0zq_EtwWriteTransfer
McTemplateK0zqdi_EtwWriteTransfer
McTemplateK0zqz_EtwWriteTransfer
McTemplateK0zz_EtwWriteTransfer
McTemplateK0zzd_EtwWriteTransfer
McTemplateK0zzjzitd_EtwWriteTransfer
McTemplateK0zzjzzzdd_EtwWriteTransfer
McTemplateK0zzjzzztzdzztdzz_EtwWriteTransfer
McTemplateK0zzq_EtwWriteTransfer
McTemplateK0zzqq_EtwWriteTransfer
McTemplateK0zzqqzttquqqzxt_EtwWriteTransfer
McTemplateK0zzqqzttquxt_EtwWriteTransfer
McTemplateK0zzt_EtwWriteTransfer
McTemplateK0zztt_EtwWriteTransfer
McTemplateK0zzz_EtwWriteTransfer
McTemplateK0zzzd_EtwWriteTransfer
McTemplateK0zzzdzzq_EtwWriteTransfer
McTemplateK0zzzt_EtwWriteTransfer
McTemplateK0zzztdd_EtwWriteTransfer
McTemplateK0zzzzdd_EtwWriteTransfer
McTemplateK0zzzzz_EtwWriteTransfer
McTemplateU0qqqqzr3_EtwWriteTransfer
McTemplateU0qqzr1qzr3qqqqpqqzr11_EtwWriteTransfer
McTemplateU0qqzr1qzr3qqqxqpqqqzr13q_EtwWriteTransfer
McTemplateU0qqzr1qzr3qqqxqqqpqzr13q_EtwWriteTransfer
McTemplateU0qqzr1qzr3qqxqpqqzr11q_EtwWriteTransfer
MdlInvariantFindMdlInfo
MdlInvariantPostDriverCompletion
MdlInvariantPostProcessing1
MdlInvariantPreProcessing1
MfgInitSystem
Mi4KStartForSubsection
MiAbandonPrivatePfn
MiAbortCombineScan
MiAbsorbPossibleEngineChanges
MiAcceptNewAccelerators
MiAccessCheck
MiAccumulateTimeBoundTime
MiAcquireAddMemoryLocks
MiAcquireAddMemoryResources
MiAcquireKernelCfgLock
MiAcquireLoadLock
MiAcquireNonPagedResources
MiAcquirePageListLock
MiAcquirePrcbAgeTrimLists
MiAcquireRemoveMemoryResources
MiActOnLargeKernelHalPages
MiActOnMirrorBitmap
MiActOnPartitionNodePages
MiActOnPte
MiActivateCombineBlock
MiActivePageClaimCandidate
MiActivePageTradeable
MiAddEntryToImportList
MiAddExpansionNonPagedPool
MiAddKernelStackToPrcbCache
MiAddLoaderHalIoMappings
MiAddLoaderHalIoPte
MiAddLockedPageCharge
MiAddMappedPtes
MiAddMappedPtesPadding
MiAddMdlPageToTradeBlock
MiAddMdlToPartitionTree
MiAddMdlTracker
MiAddNonSecuredPagesToDump
MiAddPageToFlushMdl
MiAddPageToHeatList
MiAddPageToHeatRanges
MiAddPageToInsertList
MiAddPagesToEnclave
MiAddPartitionDataToCrashDump
MiAddPartitionHugeRange
MiAddPartitionToCrashDump
MiAddPendingBadPageNode
MiAddPhysicalMemory
MiAddPhysicalMemoryChunks
MiAddPhysicalPagesToCrashDump
MiAddPrivateFixupEntryForSystemImage
MiAddRangeToPartitionTree
MiAddRun
MiAddRuns
MiAddSecureEntry
MiAddSubRegionEntropy
MiAddSystemPageTableToList
MiAddToReservationCluster
MiAddTriageDumpPtes
MiAddUnicodeStringToCrashDump
MiAddViewsForSection
MiAddWorkingSetEntries
MiAddZeroingThreads
MiAddingWorkingSetPageShortly
MiAddressToRetpolineBit
MiAdjustCachedStackList
MiAdjustCachedStacks
MiAdjustFaultList
MiAdjustModifiedPageLoad
MiAdjustPteBins
MiAdjustSecureDriverStateForIatCapture
MiAdvanceFaultList
MiAdvancePastCurrentUltraMapping
MiAdvanceVadHint
MiAdvanceVadView
MiAgeAweRegions
MiAgePte
MiAgePteWorker
MiAgeTrimListsTail
MiAgeWorkingSet
MiAgeWorkingSetTail
MiAgeWorkingSetVpabCallback
MiAllocateAcceleratorDescriptor
MiAllocateAccessLog
MiAllocateAweInfo
MiAllocateChildVads
MiAllocateCombineBlock
MiAllocateContiguousMemory
MiAllocateCrcList
MiAllocateDbgPatches
MiAllocateDriverPage
MiAllocateDummyPage
MiAllocateEnclavePages
MiAllocateEnclavePagesForMdl
MiAllocateEnclaveVad
MiAllocateEntireImageFileExtents
MiAllocateFastAwePages
MiAllocateFastLargePagesForMdl
MiAllocateFileExtents
MiAllocateFromSubAllocatedRegion
MiAllocateHardwareDescriptor
MiAllocateHotPatchRecord
MiAllocateHyperSpace
MiAllocateImportList
MiAllocateInPageSupport
MiAllocateInPageSupportBlock
MiAllocateInitialMemoryBlocks
MiAllocateKernelCfgBitmapPageTables
MiAllocateKernelStackPages
MiAllocateLargeProcessPagesFromCache
MiAllocateLargeZeroPages
MiAllocateMappedWriterMdls
MiAllocateMdlPagesByLists
MiAllocateMemoryBlock
MiAllocateModWriterEntry
MiAllocateMostlyContiguousPagesForMdl
MiAllocateNewSubAllocatedRegion
MiAllocatePagesForMdl
MiAllocatePartitionId
MiAllocatePartitionPhysicalPages
MiAllocatePerSessionProtos
MiAllocatePfnRepurposeLogDispatch
MiAllocatePool
MiAllocatePrcb
MiAllocateProcessShadow
MiAllocateProcessVads
MiAllocateReadList
MiAllocateSecureImageActivePatch
MiAllocateSkipPagesForMdl
MiAllocateSlabEntry
MiAllocateSlabPageForMdl
MiAllocateSplitVads
MiAllocateTempLoaderEntry
MiAllocateTopLevelPage
MiAllocateUserPhysicalPages
MiAllocateUserPhysicalRanges
MiAllocateVad
MiAllocateVirtualMemory
MiAllocateVirtualMemoryPrepare
MiAllocateWorkingSetSwapSupport
MiAllocateWsle
MiAllocateZeroCalibrationBuffer
MiAllocateZeroPageDecisionTraceBuffer
MiAllowGuardFault
MiAllowImageMap
MiAllowProtectionChange
MiAllowReadInProgress
MiAllowWorkingSetExpansion
MiAnyPagesRemovalPending
MiAnyProtosAreMapped
MiAppendPageChain
MiAppendSubsectionChain
MiApplyBytestreamFixup
MiApplyCompressedFixups
MiApplyCrossPartitionCharges
MiApplyDebuggerPatches
MiApplyDriverHotPatch
MiApplyDynamicFixupsToKernelAndHal
MiApplyDynamicRelocationFixups
MiApplyDynamicRelocations
MiApplyFunctionOverrideToBootDriver
MiApplyHotPatchToDriver
MiApplyHotPatchToDriverDataPages
MiApplyHotPatchToLoadedDriver
MiApplyImageHotPatch
MiApplyImageHotPatchDpc
MiApplyImageHotPatchRequest
MiApplyImportOptimizationToBootDriver
MiApplyImportOptimizationToRuntimeDriver
MiApplyLazyStampToAwePtes
MiApplyRawFixups
MiApplyRequiredDriverHotPatches
MiApplyRetpolineToBootDriver
MiApplyStraddleFixups
MiArbitraryCodeBlocked
MiAreChargesNeededToLockPage
MiArePageContentsZero
MiArePagefileContentsCorrupted
MiAssemblePfnList
MiAssignBackgroundZeroThreadToProcessor
MiAssignDefaultChannel
MiAssignHalEntropy
MiAssignInitialPageAttribute
MiAssignNonPagedPoolPte
MiAssignSystemVa
MiAssignTopLevelRanges
MiAsyncSlabReplenish
MiAttachThreadDone
MiAttachWorkingSet
MiAttemptChangePagingFileMaximum
MiAttemptCoalesce
MiAttemptPageFileExtension
MiAttemptPageFileReduction
MiAttemptPageFileReductionApc
MiAttemptSectionDelete
MiAweControlArea
MiBackSingleImageWithPagefile
MiBackSystemImageWithPagefile
MiBackgroundZeroLocalPages
MiBackgroundZeroNodePages
MiBadMemoryLogger
MiBadPageInserted
MiBadPageSignaler
MiBadPageSort
MiBadRefCount
MiBadShareCount
MiBeginHoldingDirtyFaults
MiBeginPageAccessor
MiBeginProcessClean
MiBetterDriverPageNeeded
MiBitmapRangeZeroEx
MiBitmapsCachedEntryLengthChanged
MiBuildDynamicRegion
MiBuildForkPageTable
MiBuildForkPte
MiBuildImageControlArea
MiBuildImportsForBootDrivers
MiBuildMappedCluster
MiBuildMdlForMappedFileFault
MiBuildNewCloneDescriptor
MiBuildPagedPool
MiBuildPhysicalPageFreeChain
MiBuildReservationCluster
MiBuildSystemDataViews
MiBuildWakeList
MiBytesToMapSystemImage
MiCacheAttributeHasValue
MiCacheImageSymbols
MiCalibrateTbFlush
MiCallCreateSectionFilters
MiCallImageNotify
MiCanBatchHardFaultPages
MiCanBatchSystemCacheUnmapPages
MiCanDeleteEnclave
MiCanFileBeTruncatedInternal
MiCanFlushMakeProgress
MiCanGrantExecute
MiCanMergeTbFlushEntryBackwards
MiCanPageMove
MiCanPfnOriginalPteBeLost
MiCanStealKernelStack
MiCancelPhase0Locking
MiCaptureAllWorkingSetAccessBits
MiCaptureAllocateMapExtendedParameters
MiCaptureAndResetWorkingSetAccessBits
MiCaptureBootDriverRetpolineInfo
MiCaptureDeleteHierarchy
MiCaptureDirtyBitToPfn
MiCaptureHotPatchInfo
MiCaptureImageCfgContext
MiCaptureImageExceptionValues
MiCapturePageFileInfoInline
MiCapturePfnPageFileInfoInline
MiCapturePfnVm
MiCaptureProtectionFromLockedProto
MiCaptureRetpolineImportInfo
MiCaptureRetpolineRelocationTables
MiCaptureSectionCreateExtendedParameters
MiCaptureSecureImageBaseAddress
MiCaptureSparsePages
MiCaptureStackTraceCallout
MiCaptureStackTraceEx
MiCaptureUlongPtrArray
MiCaptureWriteWatchDirtyBit
MiCauseOverCommitPopup
MiCfgInitializeProcess
MiCfgMarkValidEntries
MiChangeAwePageAttributes
MiChangePageAttribute
MiChangePageAttributeAndZeroBatch
MiChangePageAttributeBatch
MiChangePageAttributeLargeFreeZeroPage
MiChangePageHeatImmediate
MiChangePagingFileMaximum
MiChangeSlabEntryIdentity
MiChangeSlabIdentitiesDpc
MiChangingSubsectionProtos
MiChargeCommit
MiChargeCrossPartitionSharedPage
MiChargeForLockedPage
MiChargeForWriteInProgressPage
MiChargeFullProcessCommitment
MiChargeLargeProtoSubsection
MiChargePartitionResidentAvailable
MiChargeProcessCommitment
MiChargeProcessPhysicalPages
MiChargeResident
MiChargeSegmentCommit
MiChargeSystemImageCommitment
MiCheckAndProcessCcAccessLog
MiCheckAndUpdateIoAttribution
MiCheckAndUpdatePagingFileMinimum
MiCheckAvailablePagesForFaultDelay
MiCheckCommitReleaseFromVad
MiCheckContiguityTradeEligible
MiCheckControlArea
MiCheckDosCalls
MiCheckFatalAccessViolation
MiCheckForBootMappingsBetweenDrivers
MiCheckForConflictingVad
MiCheckForConflictingVadExistence
MiCheckForControlAreaDeletion
MiCheckForDiscardableLongJumpTable
MiCheckForUserStackOverflow
MiCheckFreeModifiedReservations
MiCheckHintedPageFileSpace
MiCheckHoldFaultForHotPatch
MiCheckKernelShadow
MiCheckLargePageOk
MiCheckLargePageSystemImage
MiCheckLargePagesExist
MiCheckLinearProtectedPteAccessedBit
MiCheckLockUnlockByVa
MiCheckLogPinDriverAddresses
MiCheckLostBadPageNode
MiCheckMdlSlabFragmentation
MiCheckNodeChannelStandbyCount
MiCheckPageFileMapping
MiCheckPhysicalAddressRange
MiCheckProcessCombineSequence
MiCheckProcessShadow
MiCheckProcessorPteCache
MiCheckProtoAccess
MiCheckProtoPtePageState
MiCheckPteRelease
MiCheckPteReserve
MiCheckPurgeAndUpMapCount
MiCheckRelevantKernelShadows
MiCheckReservePageFileSpace
MiCheckSameSlabType
MiCheckSecuredVad
MiCheckShadowStackOverflow
MiCheckSlabAllocatorEmpty
MiCheckSlabEntryForDefrag
MiCheckSlabPage
MiCheckSystemNxFault
MiCheckSystemPageTables
MiCheckSystemTrimEndCriteria
MiCheckTrimUnusedPageFileRegions
MiCheckUserVirtualAddress
MiCheckVadSequential
MiCheckVerifierFunctionsCfgState
MiCheckVirtualAddress
MiCheckWriteInProgressFault
MiCheckWsLimits
MiCheckZeroFreeRebalance
MiClaimPhysicalRun
MiCleanCfg
MiCleanEmbryonicProcess
MiCleanProcessPhysicalPages
MiCleanSection
MiCleanVad
MiCleanWorkingSet
MiCleanupBestCandidatesContext
MiCleanupLazyStampedPageTable
MiCleanupPageTablePages
MiClearAweLargePageMetadata
MiClearCommitReleaseState
MiClearContainingMapping
MiClearDriverTablePtes
MiClearEntireStandbyLookasideList
MiClearFileOnlyPfn
MiClearFilePointer
MiClearHintSlabEntry
MiClearLoaderDescriptorFlags
MiClearMappingAndDereferenceIoSpace
MiClearMirrorBitmaps
MiClearNonPagedPtes
MiClearPageFileReservation
MiClearPartitionPageBitMap
MiClearPfnImageVerified
MiClearPfnReuseFields
MiClearPteAccessed
MiClearPteAccessedBitRange
MiClearRangeInPartitionTree
MiClearStackOwners
MiClearStaleSecurePageMapping
MiClearSystemAccessBits
MiClearVadBits
MiClearVadCellBits
MiClearVadTrimBehind
MiCloneCaptureVadCommit
MiCloneDiscardVadCommit
MiCloneImageVad
MiCloneLargeFileOnlyVad
MiCloneNoChange
MiCloneProcessAddressSpace
MiClonePteReadonly
MiCloneVads
MiClusterVadActive
MiClusterVadFull
MiCoalesceActivePagesIntoFree
MiCoalesceFreeLargePages
MiCoalesceFreeSmallPages
MiCoalescePageFileBitmapsCache
MiCoalescePlaceholderAllocations
MiColdPageSizeSupported
MiCollapseRunTopDown
MiColorBaseToNode
MiColorHasSlists
MiColorSetChannel
MiColorSetHighLow
MiCombineActiveCrcSortByHash
MiCombineActiveCrcSortByVa
MiCombineAllPhysicalMemory
MiCombineCandidate
MiCombineIdenticalPages
MiCombineInitialInstance
MiCombinePageSortByHash
MiCombinePte
MiCombineWithExisting
MiCombineWithStandbyExisting
MiCombineWorkingSet
MiCombineWorkingSetTail
MiCombiningInProgress
MiCommitEnclavePages
MiCommitExistingVad
MiCommitFileBackedSection
MiCommitHotPatchTable
MiCommitInitialVadMetadataBits
MiCommitPageTableRangesForVad
MiCommitPageTablesForVad
MiCommitPagefileBackedSection
MiCommitPoolMemory
MiCommitRequestFailed
MiCommitVadCfgBits
MiCommitVadMetadataBits
MiCommitmentAvailable
MiCompactDebuggerPatchTable
MiCompactServiceTable
MiCompareActiveCrcEntries
MiCompareHotPatchNodes
MiComparePageFileMemoryExtents
MiComparePages
MiComparePteProtections
MiCompareSecureImageHotPatchNodes
MiCompareTbFlushTimeStamp
MiCompareUserSidHotPatchNodes
MiCompensateForProcessorErrata
MiCompleteJoinHugeContext
MiCompleteMemoryAddition
MiCompletePrivateZeroFault
MiCompleteProtoPteFault
MiCompleteRestrictedImageFault
MiCompleteSecureDriverLoad
MiCompleteSecureProcessFault
MiCompressImportList
MiCompressRelocations
MiCompressTbFlushList
MiComputeAgeDistribution
MiComputeAgingAmount
MiComputeAgingPercent
MiComputeAweCharges
MiComputeBadImageHeaderType
MiComputeCacheAttributeSpeeds
MiComputeCombineHash
MiComputeCommitChargeForZeroPteRange
MiComputeCommitThresholds
MiComputeContiguousSubsectionPte
MiComputeCrossPartitionSectionCharges
MiComputeDataFlushRange
MiComputeDriverProtection
MiComputeFaultCluster
MiComputeFaultNode
MiComputeFlushRange
MiComputeHash64
MiComputeIdealDpcGang
MiComputeIdealFirstSubsection
MiComputeIdealLargePage
MiComputeImagePteIndex
MiComputeImageVadCommitCharge
MiComputeMaximumFaultCluster
MiComputeMemoryNodeProcessorAssignments
MiComputeNextWalkPte
MiComputeNodeMemory
MiComputeNumaCosts
MiComputePageCommitment
MiComputePageHash
MiComputePagedPoolSegmentBytes
MiComputePartitionHugeIoSpaceSize
MiComputePreferredNode
MiComputeProcessUserVa
MiComputeProportionalSystemCacheVaReduction
MiComputePxeWalkAction
MiComputeSoloZeroingTime
MiComputeSystemTrimCriteria
MiComputeTrimAmount
MiComputeUnusedSegmentReduction
MiComputeVadCharges
MiComputeZeroClusterMaximum
MiConfirmCombinePageContents
MiConfirmPageIsZero
MiConstructLoaderEntry
MiConstructLoaderMemoryTree
MiConstructNonRetpolineImageLoadRecord
MiConsumeOverCommit
MiConsumeSystemCachePde
MiConsumeSystemCacheTbFlushNeededView
MiContractPagingFiles
MiContractWsSwapPageFile
MiContractWsSwapPageFileWorker
MiControlAreaExemptFromCrossPartitionCharges
MiControlAreaHasHostRelocationsApplied
MiControlAreaRequiresCharge
MiConvertActiveLargePageToSmall
MiConvertAndFlushWsleVas
MiConvertAssignedRegionToVaType
MiConvertBaseLargePage
MiConvertContiguousMemoryParameters
MiConvertContiguousPages
MiConvertCrossPartitionChargeTypeToAggregate
MiConvertFaultStatus
MiConvertHiberPhasePages
MiConvertHiberPhasePte
MiConvertInitialMemoryBlock
MiConvertIoPfnTreeLockExclusiveToShared
MiConvertLargeActivePageToChain
MiConvertLargeFreePageToActive
MiConvertLargePfnToSmall
MiConvertLockedSmallPageToLarge
MiConvertPrivateToProto
MiConvertRunsToPages
MiConvertSmallPageRangeToLarge
MiConvertStandbyToProto
MiConvertStaticSubsections
MiConvertWorkingSetLockExclusiveToShared
MiConvertWorkingSetLockSharedToExclusive
MiCopyDataPageToImagePage
MiCopyFileOnlyGlobalSubsectionPage
MiCopyFilePage
MiCopyForkedFixupVad
MiCopyFromDirectMapExtent
MiCopyFromUntrustedMemory
MiCopyHeaderIfResident
MiCopyImageExtentContents
MiCopyKstack
MiCopyLargeVad
MiCopyMemoryPagefileData
MiCopyOnWrite
MiCopyOnWriteCheckConditions
MiCopyPage
MiCopyPagesIntoEnclave
MiCopyPfnEntryEx
MiCopyPfnEntryRaw
MiCopyPtes
MiCopySinglePage
MiCopyToCfgBitMap
MiCopyToUntrustedMemory
MiCopyToUserVa
MiCopyTopLevelMappings
MiCopyVirtualMemory
MiCopyWorkingSetFields
MiCountBootDriverRegionPtes
MiCountBootDriverRegions
MiCountCommittedPages
MiCountSharedPages
MiCountSlabContextAvailablePagesForDefrag
MiCountSlabContextFreePagesByIdentity
MiCountSystemPool
MiCountWslesInPageTable
MiCountWslesInPageTableRange
MiCrashdumpRemovePte
MiCrcStillIntact
MiCreateAweInfoBitMap
MiCreateBootDriverHotPatchLinkage
MiCreateBootSlabEntries
MiCreateCloneChain
MiCreateCombineAnchor
MiCreateDataFileMap
MiCreateDecayPfn
MiCreateDescriptorPfns
MiCreateEnclave
MiCreateEnclaveRegions
MiCreateFileOnlyImageFixupList
MiCreateFileOnlyPfns
MiCreateFixupRecord
MiCreateFreePfns
MiCreateHardwareEnclave
MiCreateHugeIoRanges
MiCreateImageFileMap
MiCreateImageOrDataSection
MiCreateInitialLargeLeafPfns
MiCreateInitialPfns
MiCreateInitialSystemWsles
MiCreateIoPageExclusion
MiCreateKernelHalSlabRange
MiCreateKernelStackNode
MiCreateLargePageVad
MiCreateLargePfnList
MiCreateMdl
MiCreateMemoryEvent
MiCreateMemoryEventSD
MiCreateNewProcessTopLevelMappings
MiCreateNewSection
MiCreateNodeLists
MiCreatePageChains
MiCreatePageFileSpaceBitmaps
MiCreatePagefile
MiCreatePagefileMemoryExtents
MiCreatePagingFile
MiCreatePagingFileMap
MiCreatePartitionNamespace
MiCreatePartitionOffsets
MiCreatePatchSectionRequest
MiCreatePebOrTeb
MiCreatePerNodeZeroingConductor
MiCreatePerSessionProtos
MiCreatePfnBitMaps
MiCreatePfnDatabase
MiCreatePfnTemplate
MiCreatePlaceholderStorage
MiCreatePoolPageTables
MiCreateProcessDefaultAweInfo
MiCreateProcessLargePageCacheAnchor
MiCreatePrototypePtes
MiCreatePteCopyList
MiCreatePteWsle
MiCreateResidentBasePfnTemplate
MiCreateResidentPfnTemplate
MiCreateRetpolineBitmap
MiCreateRetpolineRelocationInformation
MiCreateRotateView
MiCreateSection
MiCreateSectionCommon
MiCreateSectionForDriver
MiCreateSharedZeroPages
MiCreateSlabAllocationsFromLoaderBlock
MiCreateSlabEntry
MiCreateSlabIdentity
MiCreateSparsePfnDatabase
MiCreateSpecialPurposeMemoryPageFile
MiCreateSystemPageTable
MiCreateSystemPageTableTail
MiCreateSystemSection
MiCreateTopLevelUltraMappings
MiCreateUltraThreadContext
MiCreateUltraThreadContextHelper
MiCreateUserPhysicalView
MiCreateVadEventBitmap
MiCreateVsmEnclave
MiCreateWriteWatchView
MiCreateZeroThreadContext
MiDbgCopyMemory
MiDbgCopyMemoryTarget
MiDbgCopyPrivilegedData
MiDbgMarkPfnModified
MiDbgPatchIdentity
MiDbgPteWriteInProgress
MiDbgReadWriteEnclave
MiDbgReadWriteEnclaveUnaligned
MiDbgReleaseAddress
MiDbgTranslatePhysicalAddress
MiDbgUnTranslatePhysicalAddress
MiDbgWriteCheck
MiDecayNodeNowEmpty
MiDecayPfnFullyInitialized
MiDecommitAddTbFlushEntries
MiDecommitAddToList
MiDecommitComputeCheckPte
MiDecommitEnclavePages
MiDecommitFreePage
MiDecommitFreePageCharges
MiDecommitFreePagesTail
MiDecommitHandlePageFileFormatPte
MiDecommitHandleProtoFormatPte
MiDecommitHandleTransitionPte
MiDecommitHandleValidPte
MiDecommitHardwareEnclavePages
MiDecommitInitializePacket
MiDecommitLargePoolVa
MiDecommitLargePte
MiDecommitLockNewPageTable
MiDecommitPages
MiDecommitPagesCoalesce
MiDecommitPagesTail
MiDecommitPrivatePageTail
MiDecommitRegion
MiDecommitSharedPageTail
MiDecommitSystemPageTables
MiDecreaseAvailablePages
MiDecreaseUsedPtes
MiDecreaseUsedPtesInPfn
MiDecrementAweMapCount
MiDecrementCloneBlock
MiDecrementCloneBlockReference
MiDecrementCloneHeaderCount
MiDecrementCombinedPteEx
MiDecrementControlAreaCount
MiDecrementLargeSubsections
MiDecrementModifiedWriteCount
MiDecrementProtoShareCounts
MiDecrementShareCountEx
MiDecrementSubsection
MiDecrementSubsectionViewCount
MiDecrementSubsections
MiDecrementVadsBeingDeleted
MiDecrementZeroEngineThread
MiDefragFreeEmptySlabEntries
MiDefragmentAllSlabAllocators
MiDefragmentAllSlabsHelper
MiDefragmentSlabAllocator
MiDefragmentSlabWorker
MiDelayFaultingThread
MiDeleteAcceleratorDescriptor
MiDeleteAllHardwareEnclaves
MiDeleteAweBitMap
MiDeleteAweInfo
MiDeleteAweInfoPages
MiDeleteAwePageTables
MiDeleteBootRange
MiDeleteCachedEntry
MiDeleteCachedKernelShadowStack
MiDeleteCachedKernelStack
MiDeleteCachedSubsection
MiDeleteCloneDescriptor
MiDeleteCloneZombies
MiDeleteClusterPage
MiDeleteControlArea
MiDeleteControlAreaList
MiDeleteDebuggerPatches
MiDeleteDeferredCloneDescriptors
MiDeleteDeleteOnCloseSubsections
MiDeleteEmptyControlAreas
MiDeleteEmptyPageTable
MiDeleteEmptyPageTableCommit
MiDeleteEmptyPageTableTail
MiDeleteEmptyPageTableWorker
MiDeleteEmptyPageTables
MiDeleteEmptySubsectionProtoPool
MiDeleteEmptySubsections
MiDeleteEnclavePage
MiDeleteEnclavePages
MiDeleteExtentPfns
MiDeleteFileExtentList
MiDeleteFileExtents
MiDeleteFinalPageTables
MiDeleteHardwareAccelerators
MiDeleteHotPatchEntry
MiDeleteImageCreationMdls
MiDeleteInsertedCloneVads
MiDeleteKernelStackNode
MiDeleteKernelStackPages
MiDeleteLargeUserPde
MiDeleteMappedMdls
MiDeleteMergedPte
MiDeleteNewlyCreatedPartialVads
MiDeleteNonPagedPoolPte
MiDeleteNonPagedPoolTail
MiDeletePagablePteRange
MiDeletePageFileMemoryExtents
MiDeletePageFileSectionNodes
MiDeletePagefile
MiDeletePagingFiles
MiDeletePartialCloneVads
MiDeletePartialVad
MiDeletePartition
MiDeletePartitionPageNode
MiDeletePartitionPageNodes
MiDeletePartitionResources
MiDeletePartitionSlabState
MiDeletePendingBadPageNodesAwaitingDeleteList
MiDeletePendingSlabIdentities
MiDeletePerSessionProtos
MiDeletePfnBitMaps
MiDeleteProcessShadow
MiDeletePxeSharedLocks
MiDeleteRotateAndStopFaults
MiDeleteRotateVa
MiDeleteSectionAwe
MiDeleteSectionCluster
MiDeleteSegmentPages
MiDeleteShadowStackPtes
MiDeleteSlabAllocator
MiDeleteSlabEntriesForIdentity
MiDeleteSparseRange
MiDeleteSpecialPurposeMemory
MiDeleteStaleCacheMaps
MiDeleteSubsection
MiDeleteSubsectionLargePages
MiDeleteSubsectionPages
MiDeleteSystemPageTable
MiDeleteSystemPageTableTail
MiDeleteSystemPageTables
MiDeleteThreadContext
MiDeleteTopLevelPage
MiDeleteTransitionPte
MiDeleteTrimViewInfoList
MiDeleteUltraMapContext
MiDeleteUltraMapHierarchy
MiDeleteUltraThreadContext
MiDeleteUnumappedSystemCacheViews
MiDeleteVa
MiDeleteVaDirect
MiDeleteVaFinal
MiDeleteVaTail
MiDeleteVad
MiDeleteVadAwePtes
MiDeleteVadBitmap
MiDeleteVadHotPatchState
MiDeleteVirtualAddresses
MiDeleteWorkingSetList
MiDeleteWsleRange
MiDeleteZeroThreadContext
MiDeliverPicoExceptionForProbedPage
MiDemoteCombinedPte
MiDemoteLargeFreePage
MiDemoteLocalLargePage
MiDemotePfnListChain
MiDemoteSlabEntries
MiDemoteSlabEntriesDpc
MiDemoteSlabEntry
MiDemoteValidLargePageOneLevel
MiDeprioritizeVad
MiDeprioritizeVirtualAddresses
MiDerefPageFileSpaceBitmaps
MiDereferenceAnyActiveHugeContext
MiDereferenceControlArea
MiDereferenceControlAreaBySection
MiDereferenceControlAreaFile
MiDereferenceControlAreaPfnList
MiDereferenceControlAreaProbe
MiDereferenceDataSubsections
MiDereferenceEnclaveModule
MiDereferenceExtendInfo
MiDereferenceFailedControlArea
MiDereferenceHugeContext
MiDereferenceImports
MiDereferenceInPageAutoBoostLock
MiDereferenceIoHugeRange
MiDereferenceIoPageRuns
MiDereferenceIoPages
MiDereferencePageChains
MiDereferencePageRuns
MiDereferencePerSessionProtos
MiDereferenceSegmentThread
MiDereferenceSlabIdentity
MiDereferenceSubsectionProtos
MiDereferenceVad
MiDescribePageRun
MiDestroySection
MiDetachFromWorkingSet
MiDetermineCoalescedLargePageHeatState
MiDetermineDefragmentSlabIdentity
MiDetermineModifiedPageListHead
MiDetermineNewPfnHeatState
MiDeterminePoolType
MiDirtyPte
MiDisablePagingOfDriver
MiDiscardTransitionPteEx
MiDispatchFault
MiDistributeSystemCacheVaReductions
MiDoGangAssignment
MiDoSingleFixup
MiDoStackCopy
MiDoesControlAreaHaveUserWritableReferences
MiDoesControlAreaRequireRetpolineFixups
MiDoesImageContainFunctionOverrideFixups
MiDoesPageRequireConditionalFixups
MiDoesPageRequireImportLinkingFixups
MiDoesPageRequireRetpolineFixups
MiDoneWithThisPageGetAnother
MiDoubleLockMdlPage
MiDoubleUnlockMdlPage
MiDpcGangTarget
MiDrainControlAreaWrites
MiDrainCrossPartitionUsage
MiDrainEngineDescriptors
MiDrainOldAccessBuffers
MiDrainSystemAccessLog
MiDrainZeroLookasides
MiDriverLoadSucceeded
MiDriverPdeOkToDelete
MiDummyApcRoutine
MiDuplicateCloneLeaf
MiDuplicatePartitionNodeTree
MiEliminateStaleExtents
MiEliminateZeroPages
MiEmptyAccessLogs
MiEmptyAllWorkingSets
MiEmptyCacheSlice
MiEmptyDecayClusterTimers
MiEmptyDeferredWorkingSetEntries
MiEmptyPageAccessLog
MiEmptyPte
MiEmptyPteBins
MiEmptyTargetedWorkingSet
MiEmptyWorkingSet
MiEmptyWorkingSetHelper
MiEmptyWorkingSetInitiate
MiEmptyWorkingSetPrivatePagesByVa
MiEmptyWorkingSetTail
MiEnableFullSoftWsleDeletion
MiEnableImageDirectMap
MiEnableLargeSubsection
MiEnableNewPfns
MiEnablePagingOfDriver
MiEncodeProtoFill
MiEndingOffset
MiEndingOffsetWithLock
MiEngineAffinity
MiEnqueuePageList
MiEntireRangeAlreadyExists
MiEntireSubsectionIsPurged
MiEnumerateBadHugeRangePages
MiEnumerateBasePatches
MiEnumeratePartitionBadPages
MiEnumerateQuarantinedBadHugeRangePages
MiEnumerateSlabAllocatorsEx
MiEnumerateSystemImages
MiEstablishDefragSlabEntries
MiEvictPageTableLock
MiExamineHalVa
MiExamineZeroChunks
MiExceptionForMappedVa
MiExclusiveInsertPfnChainInList
MiExpandFlushMdl
MiExpandPartitionIds
MiExpandPtes
MiExpandSharedZeroCluster
MiExpandSystemCache
MiExpandVadBitMap
MiExpandVadBitMapDown
MiExtendDynamicBitMap
MiExtendMemoryBlocks
MiExtendPageFilesIfNecessary
MiExtendPagingFiles
MiExtendSection
MiExtendWorkingSetSwapPagefile
MiFailInProgressZeroing
MiFastLockLeafPageTable
MiFastReadLeafPte
MiFastReplenishWithAsync
MiFastTrimWorkingSet
MiFaultDelayNeeded
MiFaultGetFileExtents
MiFaultInPagedPool
MiFaultInProbeAddress
MiFaultListPagesRemaining
MiFillActivePatchesQueryBuffer
MiFillCommitReturnInfo
MiFillDbgPatches
MiFillFileOnlyProtoAsBad
MiFillGapAddresses
MiFillGapPtes
MiFillHyperPtes
MiFillLogProcessInfo
MiFillMapFileInfo
MiFillMemory
MiFillNoReservationCluster
MiFillPageWithImageExtentContents
MiFillPatchCallTargets
MiFillPhysicalPages
MiFillPoolCommitPageTable
MiFillPteHierarchy
MiFillPteWithProto
MiFillSystemPtes
MiFillUserPhysicalMdl
MiFillVirtualFaultInfo
MiFilterCrashDumpPte
MiFinalizeDriverCfgState
MiFinalizeImageHeaderPage
MiFinalizeKernelScpForSystemImage
MiFinalizeLagePageImageMapping
MiFinalizePageAttribute
MiFindActualFaultingPte
MiFindBestLargePageStealCandidates
MiFindBestOutswapPagefile
MiFindBestZeroingProcessor
MiFindClearVadBitsAligned
MiFindContiguousPagesEx
MiFindDefragmentSlabEntries
MiFindDefragmentSlabEntriesHelper
MiFindDefragmentSlabEntriesHelperByIdentity
MiFindDescriptorByPfn
MiFindEmptyAddressRange
MiFindEmptyAddressRangeDownTree
MiFindEmptyAddressRangeInTree
MiFindFirstDebuggerPatch
MiFindFreePageFileSpace
MiFindFreePageFileSpaceForward
MiFindHotPatchRecord
MiFindLargeMapping
MiFindLargeNodePage
MiFindLargePageMemory
MiFindLastSubsection
MiFindLoaderAppliedHotPatchEntry
MiFindMatchingPatch
MiFindNextAlignedForwardRunClearEx
MiFindNextLowerLargePageCandidate
MiFindPageFileMemoryExtent
MiFindPageFileWriteCluster
MiFindPagesForMdl
MiFindPlaceholderVadToReplace
MiFindProcessImageHotPatchRecord
MiFindProcessorsForMemoryOnlyNode
MiFindRebuildCandidate
MiFindReductionContendingThread
MiFindSlabEntryForDemoteByPage
MiFindSpecialPurposeMemoryType
MiFindSpecialPurposeMemoryTypeByPartition
MiFindSuitableLookasideReplacement
MiFindUserSidHotPatchContext
MiFindZeroCloneBlock
MiFinishChildPartitionHotAdd
MiFinishCreateSection
MiFinishHardFault
MiFinishHoldingDirtyFaults
MiFinishLargePageFree
MiFinishLastForkPageTable
MiFinishMdlForMappedFileFault
MiFinishPageFileExtension
MiFinishPageTableForLargePage
MiFinishPlaceholderVadReplacement
MiFinishPteChangesInPageTable
MiFinishResume
MiFinishVadDeletion
MiFlowThroughInsertNode
MiFlowThroughRemoveNode
MiFlushAcquire
MiFlushAllFilesystemPages
MiFlushAllPages
MiFlushAllPagesWorker
MiFlushAllStoreSwapPages
MiFlushCacheForAttributeChange
MiFlushCacheRange
MiFlushCachedIoPfnRange
MiFlushComplete
MiFlushDataSection
MiFlushDeferredRetpolineImageLoadEvents
MiFlushDirtyBitsToPfn
MiFlushEnclaveTb
MiFlushEntireTbDueToAttributeChange
MiFlushFileOnlyDeleteChain
MiFlushFileOnlyMdl
MiFlushGraphicsPtes
MiFlushRelease
MiFlushSection
MiFlushSingleTbEntry
MiFlushStaleCacheMap
MiFlushStrongCodeDriverLoadFailures
MiFlushTbAsNeeded
MiFlushTbList
MiFlushTbNowToAvoidOverflow
MiFlushValidPteFromTb
MiFlushWaitForReadInProgress
MiFlushZeroPageHeatBatch
MiForceCrashForInvalidAccess
MiForceSectionClosed
MiForcedTrim
MiFormCopyExtents
MiFormDllRegistryPath
MiFormFullImageName
MiFreeAwePagesFromMdl
MiFreeAweView
MiFreeBootDriverInitializationCode
MiFreeBootDriverPages
MiFreeBootPageTable
MiFreeCacheSlice
MiFreeCachedKernelShadowStackEntryCount
MiFreeCloneDescriptor
MiFreeClonePool
MiFreeCombineBlock
MiFreeCombinePool
MiFreeContiguousLargePageRun
MiFreeContiguousPages
MiFreeDeferredAcceleratorPool
MiFreeDeferredCrcPages
MiFreeDriverInitialization
MiFreeEmptyBootPageTable
MiFreeEnclaveModules
MiFreeExcessSegments
MiFreeForkMappingPte
MiFreeForkMaps
MiFreeHardwareDescriptor
MiFreeImageCfgContext
MiFreeImageLoadConfig
MiFreeImageRetpolineContext
MiFreeInPageSupportBlock
MiFreeInitializationCode
MiFreeKernelPadSections
MiFreeLargeInitializationCodePages
MiFreeLargePageChain
MiFreeLargePageCharges
MiFreeLargePageMemory
MiFreeLargePageView
MiFreeLargePages
MiFreeLargeProcessPagesToCache
MiFreeLargeZeroPages
MiFreeListPageContentsChanged
MiFreeLoadedImportList
MiFreeMdlPageRun
MiFreeMdlTracker
MiFreeModWriterEntry
MiFreeModifiedReservations
MiFreeOverlappedFlushEntry
MiFreePageChain
MiFreePageFileHashPfn
MiFreePageFileHashPfns
MiFreePageFileSpaceBitmaps
MiFreePageToSlabAllocator
MiFreePageToSlabEntry
MiFreePagesFromMdl
MiFreePartitionId
MiFreePartitionNodePages
MiFreePartitionPageRun
MiFreePartitionPhysicalPages
MiFreePartitionTree
MiFreePhysicalPageChain
MiFreePhysicalRange
MiFreePlaceholderStorage
MiFreePlaceholderVadEvent
MiFreePoolPagesLeft
MiFreePrivateFixupEntryForSystemImage
MiFreeProcessLargePageCache
MiFreeProtoPool
MiFreeReadListPages
MiFreeRelocations
MiFreeReservationRun
MiFreeReservationRuns
MiFreeRetpolineImportInfo
MiFreeRetpolineRelocationInformation
MiFreeRotateVadEvent
MiFreeRotateView
MiFreeSecureKernelPage
MiFreeSlabEntries
MiFreeSlabEntry
MiFreeSlabPage
MiFreeSmallPageFromMdl
MiFreeSubsectionProtos
MiFreeSystemCacheView
MiFreeToSubAllocatedRegion
MiFreeTransitionPageHeatList
MiFreeUltraMdlContext
MiFreeUnmappedPageTables
MiFreeUnusedPfnPages
MiFreeUnusedPfnPagesDpc
MiFreeUnusedSlabPages
MiFreeVadEventBitmap
MiFreeVadEventBitmapCharges
MiFreeVadEvents
MiFreeVadRange
MiFreeVirtualMemory
MiFreeWorkingSetSwapContext
MiFreeWsleList
MiFreeZeroCalibrationBuffer
MiFreeZeroPageSlistSufficient
MiFreeZeroPagesNeeded
MiFreedUnusedPfnPagesDpc
MiFreezeIoPfnNode
MiGatherMappedPages
MiGatherPagefilePages
MiGatherSlabDemoteCandidates
MiGenerateAccessViolation
MiGenerateSecureCookie
MiGenerateSystemImageNames
MiGetAggregateWorkingSetSize
MiGetAllRegisteredPatches
MiGetAnyMultiplexedVm
MiGetAvailablePagesBelowPriority
MiGetAvailablePagesExcludeSlists
MiGetAvailablePagesForTrimPass
MiGetAweInfoPartition
MiGetAweNode
MiGetAwePageSize
MiGetAwePageSizeFromVa
MiGetAweVadPageSize
MiGetAweVadPartition
MiGetAweViewPageSize
MiGetBackgroundHugePageToZero
MiGetBaseLoaderPortion
MiGetBaseNameFromImageFileName
MiGetBaseResidentPage
MiGetBaseResidentPageForBugCheck
MiGetBestHugeRangeFromNode
MiGetBestPageFromNode
MiGetBestPageToZero
MiGetBootImagePageProtection
MiGetCachedExtentWalkerNextPage
MiGetCachedPoolPages
MiGetCcAccessLog
MiGetChannelInformation
MiGetCloneCharges
MiGetClosestImplicitNode
MiGetClosestNodeWithProcessors
MiGetClusterPage
MiGetColorHeadBase
MiGetColorHeadHugeRangeBase
MiGetCombineDomain
MiGetCommittedPages
MiGetContainingPageTable
MiGetControlAreaLoadConfig
MiGetControlAreaPartition
MiGetControlAreaPtes
MiGetCrossPartitionCharges
MiGetCurrentSlabIdentity
MiGetDanglingExtent
MiGetDesiredZeroTime
MiGetEffectivePagePriorityThread
MiGetEnclavePageList
MiGetEngineBackgroundQualifications
MiGetEngineType
MiGetExceptionInfo
MiGetExtendedLoaderBitmap
MiGetExtendedLoaderPortion
MiGetExtendedStandbyPage
MiGetExtentTable
MiGetFastLargePages
MiGetFileOnlyRanges
MiGetFirstVad
MiGetFreeOrZeroPageAnyColor
MiGetGangAssignment
MiGetHardFaultPages
MiGetHighestPteConsumer
MiGetHighestUltraLevel
MiGetHugeBadRangeFromNode
MiGetHugeRange
MiGetIdleProcessorCount
MiGetImageExtensionBaseAddress
MiGetImageProtoProtection
MiGetImageWowSubsystemIndex
MiGetInPageAutoBoostLock
MiGetInPageSupportBlock
MiGetInstructionPointer
MiGetKernelStackSwapSupport
MiGetLargePage
MiGetLargePageChain
MiGetLargePageDemoteAsNeeded
MiGetLargePagesForChain
MiGetLargePagesForSystemMapping
MiGetLargePoolPages
MiGetLargePteAddress
MiGetLargeVadMappingIndex
MiGetLargestPageIndex
MiGetLeafPfnBuddy
MiGetLeafVa
MiGetListOfPendingBadPages
MiGetMultiplexedVm
MiGetNextAffinityWalker
MiGetNextDirectFixupProto
MiGetNextNonGapPfnPage
MiGetNextPageColor
MiGetNextPageTable
MiGetNextPageTablePte
MiGetNextPageTableTail
MiGetNextVad
MiGetNodeBaseDomain
MiGetNodeChannelPageCounts
MiGetNodeHugeRangeCounts
MiGetNodeStandbyPageCount
MiGetNodeSystemInformation
MiGetNumberOfCachedPtes
MiGetOptimalEngineMix
MiGetOptimalProcessorWriteCount
MiGetPage
MiGetPageChain
MiGetPageChainSmallPageProcess
MiGetPageChainYield
MiGetPageFileHigh
MiGetPageFileSectionForReservation
MiGetPageForEnclave
MiGetPageForHeader
MiGetPageForWriteCluster
MiGetPageFromSlabAllocator
MiGetPageFromSlabAllocatorByIdentity
MiGetPageFromSlabEntry
MiGetPageInHugePageBadStatus
MiGetPagePrivilege
MiGetPageProtection
MiGetPageSlist
MiGetPageTablePages
MiGetPageTablePfnBuddyRaw
MiGetPageTablesForLargeMap
MiGetPagesRemainingInResidentPage
MiGetPagingFileOffset
MiGetPartitionNodeInformation
MiGetPartitionNodePageCounts
MiGetPdeAddress
MiGetPerfectColorHeadHugeRange
MiGetPerfectColorHeadPage
MiGetPerfectFreeOrZeroHugeRange
MiGetPerfectFreeOrZeroPage
MiGetPfnChannel
MiGetPfnKernelStack
MiGetPfnPageSizeIndex
MiGetPfnPageSizeIndexUnsynchronized
MiGetPfnPidSafe
MiGetPfnPriority
MiGetPfnProtection
MiGetPfnSlabType
MiGetPhysicalAddress
MiGetPhysicalMemoryRanges
MiGetPoolPages
MiGetPreviousVad
MiGetPrivatePageCount
MiGetProcessHotPatchContext
MiGetProcessPartition
MiGetProcessorDomain
MiGetProcessorFlushList
MiGetProtectionFromPte
MiGetProtoPteAddress
MiGetPrototypePteBoundaries
MiGetPrototypePteRanges
MiGetPteAddress
MiGetPteFromCopyList
MiGetPteLink
MiGetPteMappingSet
MiGetReadyInPageBlock
MiGetRepurposedSlabStandbyPage
MiGetSectionStrongImageReference
MiGetSessionIdForVa
MiGetSharedProtos
MiGetSharedProtosAtDpc
MiGetSharedVm
MiGetSingleHugeRangeToZero
MiGetSinglePageToZero
MiGetSlabAllocatorRepurposedStandbyList
MiGetSlabAllocatorTypeByProtection
MiGetSlabCurrentTime
MiGetSlabPage
MiGetSlabRepurposedStandbyListWorker
MiGetSourcePageForDefrag
MiGetSpecialPurposeMemoryPartitionForCaching
MiGetStandbyLookaside
MiGetStandbyPageType
MiGetSubsectionCharges
MiGetSubsectionCrossPartitionReferences
MiGetSubsectionFromPte
MiGetSubsectionHoldingCrossPartitionReferences
MiGetSystemAddressForImage
MiGetSystemCacheRegionsToFree
MiGetSystemCacheReverseMap
MiGetSystemPage
MiGetSystemRegionIndex
MiGetSystemRegionType
MiGetThreadPartition
MiGetTopLevelPfn
MiGetTransitionPageHeatList
MiGetUltraHugeAlreadyActive
MiGetUltraMapping
MiGetUltraMdlContext
MiGetUltraPage
MiGetUserReservationHighestAddress
MiGetVaAge
MiGetVadCacheAttribute
MiGetVadForHotPatchInProgress
MiGetVadLargePageMinimumIndex
MiGetVadMandatoryPageSize
MiGetVadPageSize
MiGetVadPte
MiGetVadWakeList
MiGetValidAwePartitionId
MiGetValidAweProtection
MiGetVirtualFaultPageInfo
MiGetVmAccessLoggingPartition
MiGetVmPartition
MiGetWorkingSetInfo
MiGetWorkingSetInfoEx
MiGetWorkingSetInfoList
MiGetWorkingSetSwapSupport
MiGetWsAndMakePageTablesNx
MiGetWsleContents
MiGetWsleProtection
MiGetZeroExceptionInfo
MiGetZeroingContext
MiGetZeroingDescriptors
MiGraphicsProtectionAllowed
MiGroupZeroHugeRange
MiHandleBootImage
MiHandleCollidedFault
MiHandleDriverNonPagedSections
MiHandleEnclaveFault
MiHandleForkTransitionPte
MiHandleInPageError
MiHandlePageFileSizeChanges
MiHandleSpecialPurposeMemoryCachedFault
MiHandleSynchronousFlushError
MiHandleTransitionFault
MiHardFaultPageRelease
MiHashIsCommon
MiHonorExistingHotMemoryFlights
MiHonorRangeStraddleRequirement
MiHotAddBootDeferredDescriptors
MiHotAddBootDeferredDescriptorsDiscardable
MiHotAddHugeRange
MiHotAddPartitionMemory
MiHotPatchAllProcesses
MiHotPatchProcess
MiHotRemoveHugeRange
MiHotRemovePartitionPageRun
MiHugePageOperation
MiHugePagesSupported
MiHugePfnPartition
MiHugePurgeZeroList
MiHugeRangeFreeToZero
MiHugeRangeIsZeroed
MiHyperPage
MiHyperSpaceSize
MiIdealClusterPage
MiIdentifyImageDiscardablePages
MiIdentifyPatchImageDataPages
MiIdentifyPfn
MiIdentifyPfnWrapper
MiImageCanUseHighOverflowArea
MiImageCantMove
MiImageCfgEnumNextImageExtensionRva
MiImageCfgEnumRvaListFirst
MiImageCfgEnumRvaListNext
MiImageCfgRvaIteratorFirst
MiImageCfgRvaIteratorNext
MiImageContainsVa
MiImageGetRawRvaState
MiImagePagable
MiImagePageOk
MiImageProtoChargedCommit
MiImageRvaRawEnumFirst
MiImageRvaRawEnumNext
MiImageSuitableForSystem
MiImageSupportsAlternateMachine
MiImageUnused
MiImageVadHotPatchEligible
MiInPageGapPage
MiInPagePageTable
MiInPageSingleKernelStack
MiInPageSkipPage
MiInSwapSharedWorkingSetWorker
MiInSwapStore
MiInSwapStoreContextDereference
MiInSwapStoreWorker
MiIncludeSharedCommit
MiIncreaseAvailablePages
MiIncreaseCommitLimits
MiIncreaseExposedCommit
MiIncreaseUsedPtes
MiIncreaseUsedPtesInPfn
MiIncrementAweMapCount
MiIncrementCombinedPte
MiIncrementLargeSubsections
MiIncrementPageTableLockCheckWrap
MiIncrementSubsectionViewCount
MiIncrementVmFaultCount
MiIncrementZeroEngineThread
MiInitMachineDependent
MiInitNucleus
MiInitPerfMemoryFlags
MiInitSystem
MiInitialSlabPopulate
MiInitializeAffinityWalker
MiInitializeAllResidentPageBasePfns
MiInitializeApiSets
MiInitializeAwePfn
MiInitializeBestCandidatesContext
MiInitializeBootDefaults
MiInitializeBootKernelShadowStack
MiInitializeBootKernelShadowStacks
MiInitializeBootLoadedDriverPfnRange
MiInitializeBootLoadedDriverPfns
MiInitializeBootProcess
MiInitializeBootShadowStackPage
MiInitializeCacheFlushing
MiInitializeCachedExtentWalker
MiInitializeCfg
MiInitializeChannelOrdering
MiInitializeChannelRangesPermanent
MiInitializeChannelRangesTemporary
MiInitializeColorBase
MiInitializeCombining
MiInitializeCommitment
MiInitializeCreateSectionPacket
MiInitializeDebuggerSupport
MiInitializeDecayPfns
MiInitializeDemandCoalesceContext
MiInitializeDpcGang
MiInitializeDpcGroupAffinity
MiInitializeDriverPatchState
MiInitializeDriverPtes
MiInitializeDummyPages
MiInitializeDynamicBitmap
MiInitializeDynamicPfns
MiInitializeDynamicRegion
MiInitializeDynamicVa
MiInitializeEnclave
MiInitializeEnclavePfn
MiInitializeFaultVaListCore
MiInitializeFixupVad
MiInitializeForkMaps
MiInitializeFoundLargeNodePage
MiInitializeFreeZeroPfnListHead
MiInitializeFunctionOverrides
MiInitializeGetPageChannels
MiInitializeHardFaultPfn
MiInitializeHotPatches
MiInitializeHugeIoRanges
MiInitializeHugePfnDatabase
MiInitializeImageExtents
MiInitializeImageHeaderPage
MiInitializeImageHotPatchContext
MiInitializeImageProtos
MiInitializeImageSectionLocks
MiInitializeInPageSupport
MiInitializeIoPageNodeArray
MiInitializeKasan
MiInitializeKernelCfg
MiInitializeKernelCfgImages
MiInitializeKernelScp
MiInitializeKernelStacks
MiInitializeLargeMdlLeafPfns
MiInitializeLargeNonPagedPoolLeafFrames
MiInitializeLargePfnList
MiInitializeLargeUserBasePfn
MiInitializeLoadedModuleList
MiInitializeLoaderDescriptors
MiInitializeLockedPagesTracking
MiInitializeMdlBatchPages
MiInitializeMdlLeafPfns
MiInitializeMdlOneNodeBatchPages
MiInitializeMdlPfn
MiInitializeMdlSinglePage
MiInitializeMemoryEvents
MiInitializeMirroring
MiInitializeNewImageSectionProtos
MiInitializeNewPfns
MiInitializeNewUltraHugeContext
MiInitializeNonCachedMappingRegion
MiInitializeNonPagedPool
MiInitializeNonPagedPoolThresholds
MiInitializeNuma
MiInitializeNumaGraph
MiInitializeNumaRangesPermanent
MiInitializeNumaRangesTemporary
MiInitializePageAccessLogging
MiInitializePageChainHead
MiInitializePageChainPacket
MiInitializePageColorBase
MiInitializePageFaultPacket
MiInitializePageFaultResources
MiInitializePageHeatList
MiInitializePagedPoolEvents
MiInitializePagefileBitmapsCache
MiInitializePartialVad
MiInitializePartition
MiInitializePartitionFreeZeroLists
MiInitializePartitionSpecialPurposeMemory
MiInitializePartitionSpecialPurposeMemoryCallout
MiInitializePartitionThreads
MiInitializePartitions
MiInitializePfn
MiInitializePfnEntriesRaw
MiInitializePfnForOtherProcess
MiInitializePfnListHead
MiInitializePfnsForValidMappings
MiInitializePhysicalMemoryBlocks
MiInitializePoolCommitPacket
MiInitializePoolPageChainPacket
MiInitializePrivateFixupBitmap
MiInitializeProbePacketVm
MiInitializeProcessBottomUpEntropy
MiInitializeProcessPageTableCommitmentBitMaps
MiInitializeProcessTopDownEntropy
MiInitializePrototypePtes
MiInitializePteInfo
MiInitializeReadInProgressPfn
MiInitializeRelocations
MiInitializeRetpoline
MiInitializeScrubPacket
MiInitializeSections
MiInitializeSelfmap
MiInitializeShadowPageTable
MiInitializeSharedUserData
MiInitializeSlabAllocator
MiInitializeSlabDefragmentContext
MiInitializeSlabIdentities
MiInitializeSlowPte
MiInitializeStrongCode
MiInitializeSystemCache
MiInitializeSystemChannelOrdering
MiInitializeSystemImageRegion
MiInitializeSystemPageTable
MiInitializeSystemPteTracker
MiInitializeSystemPtes
MiInitializeSystemSpaceMap
MiInitializeSystemVa
MiInitializeSystemWorkingSetList
MiInitializeTbFlush
MiInitializeTbFlushList
MiInitializeTbFlushStamps
MiInitializeTopLevelBitmap
MiInitializeTransitionPfn
MiInitializeUltraSpace
MiInitializeUsedPtesCount
MiInitializeVadBitMap
MiInitializeVadCellBitMap
MiInitializeVsmEnclave
MiInitializeWalkBounds
MiInitializeWorkingSetList
MiInitializeWorkingSetManagerParameters
MiInitializeWowPeb
MiInitializeWsSwapping
MiInitializeZeroEngineCurrentPassDpcAffinity
MiInitializeZeroEngines
MiInitializeZeroFaultPacket
MiInitializeZeroGroup
MiInitializeZeroingAttributes
MiInitializeZeroingDomains
MiInjectThreadForHotPatch
MiInsertActivePageTableLinksTail
MiInsertCachedPte
MiInsertChildVads
MiInsertClone
MiInsertCopyExtents
MiInsertDecayClusterTimer
MiInsertDemotedPages
MiInsertDpcGang
MiInsertExtentList
MiInsertHotPatchRecord
MiInsertHugeRangeInList
MiInsertHugeRangeInPartition
MiInsertInPageBlock
MiInsertInSystemSpace
MiInsertLargeTbFlushEntry
MiInsertLargeUserMapping
MiInsertLargeVadMapping
MiInsertMappingNode
MiInsertMdlPageNeedsZero
MiInsertNewCombineBlocks
MiInsertNewProcess
MiInsertNewZeroThread
MiInsertPageChainHead
MiInsertPageFileInList
MiInsertPageFileMemoryExtents
MiInsertPageInFreeOrZeroedList
MiInsertPageInList
MiInsertPagesInList
MiInsertPartitionPageNodes
MiInsertPartitionPages
MiInsertPhysicalPteMapping
MiInsertPossiblyBadPage
MiInsertPreviouslyRegisteredHotPatchRecord
MiInsertProcessVads
MiInsertProtectedStandbyPage
MiInsertPteTracker
MiInsertReadiedSystemCacheViews
MiInsertRecursiveTbFlushEntries
MiInsertRegistryPageInModifiedList
MiInsertSecondaryListStandbyPage
MiInsertSecureImageActivePatch
MiInsertSharedCommitNode
MiInsertSlabEntry
MiInsertSubsectionNode
MiInsertTbFlushEntry
MiInsertUnusedSegment
MiInsertUnusedSubsection
MiInsertVad
MiInsertVadCharges
MiInsertVadEvent
MiInsertViewOfPhysicalSection
MiInvalidPteConforms
MiInvalidateCollidedIos
MiInvalidatePageFileBitmapsCache
MiInvokeIoReleasePages
MiInvokePatchCallback
MiIoPagesInRun
MiIoPfnTreeExclusionCompatible
MiIoPfnTreeLockContended
MiIoSpaceGetBounds
MiIrpCompletionApcRoutine
MiIsActiveSystemHotPatch
MiIsAddressGlobal
MiIsAnyPartOfRangeInHugePfn
MiIsBootImageTargetFullyRetpolined
MiIsCalibrationWorthwhile
MiIsCfgBitMapPageShared
MiIsDecayPfn
MiIsDriverPage
MiIsExtentDangling
MiIsFaultPteIntact
MiIsFreeSlabPage
MiIsFreeZeroPfnCold
MiIsImageFullyRetpolined
MiIsImportOptimizationEnabled
MiIsKernelHalPadSection
MiIsLazyStampedPte
MiIsPageAGapPage
MiIsPageEligibleForProtectedStandby
MiIsPageInHugePfn
MiIsPageInIoHugeRangeTransition
MiIsPageOnBadList
MiIsPageSecured
MiIsPageTableLocked
MiIsPdeOrAboveAccessible
MiIsPfn
MiIsPfnCommitNotCharged
MiIsPfnEnclave
MiIsPfnFromChargedSlabAllocation
MiIsPfnLocked
MiIsPfnOriginalPteLost
MiIsPfnRangeFromSlabAllocation
MiIsPfnSystemCharged
MiIsPoolPteInUse
MiIsProbeActive
MiIsProcessCfgExportSuppressionEnabled
MiIsProcessEcEnabled
MiIsPrototypePteVadLookup
MiIsPteDecommittedPage
MiIsPteEvaluated
MiIsPteInStore
MiIsRangeFullyCommitted
MiIsRegularMemory
MiIsRetpolineEnabled
MiIsRetryIoStatus
MiIsSectionActive
MiIsSoftwareEnclave
MiIsStandbyPageCorrupted
MiIsStoreProcess
MiIsStoreVirtualPagefileFull
MiIsSystemVaAllocated
MiIsTargetFullyRetpolined
MiIsUserQueryVmCallerTrusted
MiIsVaRangeAvailable
MiIsVadEligibleForCommitRelease
MiIsVadLarge
MiIsVadLargePrivate
MiIssueAsynchronousFlush
MiIssueDllInitializeCall
MiIssueFlowThroughFault
MiIssueFlushTbEntire
MiIssueHardFault
MiIssueHardFaultIo
MiIssueNoPtesBugcheck
MiIssuePageExtendRequest
MiIssuePageHeatList
MiIssueSegmentDereferenceWork
MiIssueSynchronousFlush
MiIterateOverPartitions
MiJoinHugeContext
MiJumpStack
MiJumpStackTarget
MiKcsanIgnoredRangeSort
MiKcsanPopulateHierarchy
MiKernelShadowStackIdealForCaching
MiKernelStackVaToStackNode
MiKernelWriteToExecutableMemory
MiKvaRangeSort
MiLargeCoalesceCandidatesExist
MiLargeFreePageToMdl
MiLargePageFault
MiLargePageHasNoDanglingReferences
MiLargePagePromote
MiLargePfnPromoteCandidate
MiLateInitializeSystemCache
MiLateWritePageHash
MiLaunchZeroParent
MiLaunchZeroWorkers
MiLdwPopupWorker
MiLeapPrefetch
MiLegacyImageArchitecture
MiLegitimatePageForDriversToMap
MiLimitLoaderBlockHighMemory
MiLimitLoaderBlockTotalMemory
MiLinkHotPatchToBase
MiLinkPoolCommitChain
MiLoadDataIntoVsmEnclave
MiLoadHotPatch
MiLoadHotPatchForUserSid
MiLoadSectionIntoVsmEnclave
MiLoadUserSymbols
MiLocateAddress
MiLocateCachedExtent
MiLocateCloneAddress
MiLocateCombineBlock
MiLocateExclusiveSecure
MiLocateKernelSections
MiLocateLockedVadEvent
MiLocateLowestConflictingVad
MiLocateOldestSecure
MiLocatePageCollisionByPfn
MiLocatePagefileSubsection
MiLocateSessionProtosInSubsection
MiLocateSharedPageViews
MiLocateSubsectionNode
MiLocateVadEvent
MiLockActivePageTableInList
MiLockAddressSpaceToo
MiLockAllMemoryLists
MiLockAndDecrementShareCount
MiLockAndIncrementShareCount
MiLockAndInsertPageInFreeList
MiLockAndMapEntireDriver
MiLockAwePagesExclusive
MiLockAwePagesShared
MiLockAweVadsExclusive
MiLockAweVadsShared
MiLockCloneBlockAtDpc
MiLockCode
MiLockColorHeadHugeAtDpc
MiLockControlAreaSectionExtend
MiLockDownWorkingSet
MiLockDriverMappings
MiLockDriverPageRange
MiLockDynamicMemoryExclusive
MiLockDynamicMemoryNestedExclusive
MiLockDynamicMemoryShared
MiLockFileExtentsExclusive
MiLockHotPatchPages
MiLockHugePfn
MiLockHugePfnInternal
MiLockHugeRangeColorHeadAtDpc
MiLockImageSection
MiLockIoPfnTree
MiLockKernelScpSection
MiLockLeafPage
MiLockLoadedDataTableEntry
MiLockLoadedDataTableEntryIfNecessary
MiLockLoaderEntry
MiLockLowestPrioritySecondaryStandbyPage
MiLockLowestValidPageTableEx
MiLockMemoryLists
MiLockMemoryListsCallback
MiLockMultipleZeroChunks
MiLockNestedPageAtDpcInline
MiLockNestedPageTable
MiLockNestedVad
MiLockNonPagedPoolPte
MiLockOwnedProtoPage
MiLockPagableImageSection
MiLockPagableSections
MiLockPageAndSetDirty
MiLockPageInline
MiLockPageLeafPageTable
MiLockPageListAndFirstPage
MiLockPageListAndLastPage
MiLockPageTable
MiLockPageTableInternal
MiLockPageTablePage
MiLockPageTableRange
MiLockPagedAddress
MiLockPagedRange
MiLockPartitionMappedWriter
MiLockPatchIatForDV
MiLockPoolCommitPageTable
MiLockPoolCommitWs
MiLockProbePacketWorkingSet
MiLockProtoPoolPage
MiLockProtoPoolPageForce
MiLockPte
MiLockRegistryRecoverySection
MiLockSectionControlArea
MiLockSetPfnPriority
MiLockSlabAllocator
MiLockSlabRepurposedStandbyList
MiLockSpecialPurposeMemoryCachedPage
MiLockStandbyLookasidePage
MiLockStandbyOldestPage
MiLockStealSystemVm
MiLockStealUserVm
MiLockSwitchedMdlTrackerCompare
MiLockTrackerCompare
MiLockTransitionLeafPageEx
MiLockUnlockCommon
MiLockUnlockSlabContextsForDefrag
MiLockVad
MiLockVadCore
MiLockVadRange
MiLockVadShared
MiLockVadTree
MiLockWorkingSetCoreExclusive
MiLockWorkingSetCoreShared
MiLockWorkingSetExclusive
MiLockWorkingSetExclusiveAtDpc
MiLockWorkingSetForLargeMapping
MiLockWorkingSetOptimal
MiLockWorkingSetShared
MiLockWorkingSetSharedAtDpc
MiLockWsSwapExclusive
MiLockdownSections
MiLockedPageTableHasActiveLargeEntries
MiLogAddPhysicalMemory
MiLogAllocateWsleEvent
MiLogBadMapper
MiLogCombinedPteDelete
MiLogCommitRequestFailed
MiLogContinueTrim
MiLogCreateImageFileMapFailure
MiLogDelayFaultingThread
MiLogFailedDriverLoad
MiLogHotPatchManagement
MiLogHotPatchOperation
MiLogHotPatchOperationStatus
MiLogHotPatchPagesLocked
MiLogHotPatchRundown
MiLogInsertSecureImageActivePatch
MiLogKernelStackEvent
MiLogMapFileEvent
MiLogMdlRangeEvent
MiLogMemResetInfo
MiLogNonPagedPoolReleaseEvent
MiLogNonRetpolineImageLoadEvent
MiLogNotifyPageHeat
MiLogOutswappedProcessCommitReacquire
MiLogOutswappedProcessCommitRelease
MiLogPageAccess
MiLogPartitionState
MiLogPerfMemoryEvent
MiLogPerfMemoryRangeEvent
MiLogPeriodicTelemetry
MiLogPeriodicTelemetryForSlabAllocator
MiLogPinDriverAddress
MiLogPinDriverAddressesWorker
MiLogProcessWorkingSetsStart
MiLogProcessWorkingSetsStop
MiLogRelocationFaults
MiLogRelocationRva
MiLogRemoveWsleEvent
MiLogReserveVaFailed
MiLogResetPagesCommitRelease
MiLogRetpolineImageLoadEvents
MiLogSectionCreate
MiLogSectionObjectEvent
MiLogSlabEntriesDemote
MiLogSlabEntryAllocateFailure
MiLogSlabEntryDemote
MiLogStandbyRepurpose
MiLogStrongCodeDriverLoadFailure
MiLogTrimWs
MiLogVirtualRotateEvent
MiLogWsAging
MiLogWsEmptyControl
MiLogZeroPageDecision
MiLookupIoPageNode
MiMakeColor
MiMakeCombineCandidateClean
MiMakeDemandZeroPte
MiMakeDriverPageStayResident
MiMakeDriverPagesPrivate
MiMakeEntireHugePfnGood
MiMakeFaultPfnActive
MiMakeGlobalSubsectionPte
MiMakeHyperPteDemandZero
MiMakeHyperRangeAccessible
MiMakeImageReadOnly
MiMakeIoRangePermanent
MiMakeIoRangePermanentDpc
MiMakeLargePageTable
MiMakeLinkedListPte
MiMakeOutswappedPageResident
MiMakePageAvoidRead
MiMakePageBad
MiMakePageFilePte
MiMakePagefileWriterEntryAvailable
MiMakePartitionActive
MiMakePartitionMemoryBlock
MiMakePerSessionProtoPte
MiMakeProtectionMask
MiMakeProtectionPfnCompatible
MiMakeProtoLeafValid
MiMakeProtoPrivate
MiMakeProtoReadOnly
MiMakeProtoTransition
MiMakePrototypePteDirect
MiMakePrototypePteVadLookup
MiMakePteClean
MiMakeQuasiPte
MiMakeSecureExclusive
MiMakeShadowPageTableRange
MiMakeSpaceForConductorListZeroThread
MiMakeSubsectionPte
MiMakeSystemAddressValid
MiMakeSystemCachePteValid
MiMakeSystemCacheRangeValid
MiMakeSystemLeavesNonZero
MiMakeSystemPtesAppear
MiMakeSystemRangeAvailable
MiMakeTransitionHeatBatch
MiMakeTransitionPte
MiMakeTransitionPteValid
MiMakeUnusedSegmentDeleteOnClose
MiMakeVaRangeNoAccess
MiMakeVaRangePhysicallyContiguous
MiMakeValidPte
MiMakeZeroedPageTables
MiMakeZeroedPageTablesEx
MiManagePartitionCharges
MiManageSubsectionView
MiManageUltraSpacePageTable
MiMapAllImageScpPages
MiMapArbitraryPage
MiMapBackgroundPagesToZero
MiMapCacheExceptionFilter
MiMapChildLargePageVads
MiMapContiguousMemory
MiMapContiguousMemoryLarge
MiMapDummyPages
MiMapExParametersInitialize
MiMapFrame
MiMapHotPatchImageInSystemSpace
MiMapImageForEnclaveUse
MiMapImageInSystemProcess
MiMapImageInSystemSpace
MiMapImageScpCfgPages
MiMapKernelScp
MiMapLockedPagesInUserSpace
MiMapLockedPagesInUserSpaceHelper
MiMapMdlCommon
MiMapMdlWithLargePages
MiMapMemoryDumpMdl
MiMapNewPfns
MiMapPageFileHash
MiMapPageInHyperSpaceWorker
MiMapPageTableCommit
MiMapParametersInitialize
MiMapProcessExecutable
MiMapSecurePureReserveView
MiMapSinglePage
MiMapSystemCachePage
MiMapSystemImage
MiMapUserLargePages
MiMapViewInSystemSpace
MiMapViewOfDataSection
MiMapViewOfImageSection
MiMapViewOfPhysicalSection
MiMapViewOfSection
MiMapViewOfSectionCommon
MiMapViewOfSectionExCommon
MiMapWithLargePages
MiMapWorkingSetTypeToVm
MiMappedPageWriter
MiMappingHasIoReferences
MiMappingHasIoTracker
MiMarkBootGuardPage
MiMarkBootKernelStack
MiMarkFileOnlyPfnBad
MiMarkFileOnlyPfnGood
MiMarkHiberNotCachedPte
MiMarkHiberProtectedImages
MiMarkHotPatchForHiberPhase
MiMarkHotPatchesForHiberPhase
MiMarkHugePfnBad
MiMarkHugePfnGood
MiMarkHugeRangeIoPfnDeleted
MiMarkHugeRangeTransition
MiMarkKernelCfgAddressTakenImports
MiMarkKernelCfgTarget
MiMarkKernelImageCfgBits
MiMarkKernelImageRetpolineBits
MiMarkKernelPageTablePages
MiMarkKernelPageTablePte
MiMarkKernelStack
MiMarkLargePageMappings
MiMarkLargePagePte
MiMarkLargePageRanges
MiMarkLockedChainAsProtected
MiMarkMdlComplete
MiMarkNonPagedHiberPhasePages
MiMarkNonPagedHiberPhasePte
MiMarkPendingCommitRequests
MiMarkPfnTradable
MiMarkPfnVerified
MiMarkPrivateImageCfgBits
MiMarkPxeAsShadowed
MiMarkResumptionPoint
MiMarkRetpolineBits
MiMarkSharedImageCfgBits
MiMarkSystemVaAllocated
MiMaximumCommitmentAvailable
MiMdlPageSort
MiMeasureDemandCoalesceTimeBounds
MiMemoryLicense
MiMemoryRangeAlreadyExists
MiMergeCalibrationResults
MiMergeCopyExtents
MiMergeMemoryBlocks
MiMergePageNodes
MiMigratePfn
MiMirrorAddPagesToBrownList
MiMirrorBlackPhase
MiMirrorBrownPhase
MiMirrorDiscardTreePageContents
MiMirrorInSingleProcessorMode
MiMirrorNodeFreeZeroPages
MiMirrorOmitPagesFromCopy
MiMirrorPerformBlackWrites
MiMirrorPerformBrownWrites
MiMirrorPurgePartitionPages
MiMirrorReduceBlackToActiveAndPrivatePages
MiMirrorReduceBlackWrites
MiMirrorRemoveBlackChildPartitionPages
MiMirrorRemoveInactivePages
MiMirrorVerify
MiMirrorZeroFreeListsCallback
MiModifiedPageWriter
MiModifiedWriterNoReservationSort
MiMoveBackgroundZeroThreads
MiMoveBadHugeRangeCrossPartition
MiMoveBadPageChargesCrossPartition
MiMoveBadPagePartition
MiMoveDirtyBitsToPfns
MiMoveModifiedPagesToCompressList
MiMoveUnusedSubsectionsToDeleteOnClose
MiMoveZeroThreadsToOtherCores
MiMoveZeroedPages
MiNewPfnsSuitable
MiNextPhysicallyContiguousPfnWorthTrying
MiNoFaultFound
MiNoPagesLastChance
MiNodeAvailablePages
MiNodeCostSort
MiNodeFreeZeroPages
MiNodeFromFaultPacket
MiNodeHasFreeOrZeroPages
MiNodeLargeFreeZeroPages
MiNodeLargeFreeZeroPages2
MiNodeLargeFreeZeroPagesRange
MiNodeZeroConductor
MiNonPagedPoolToNode
MiNotifyMemoryChange
MiNotifyUserOfLostData
MiNumberWsSwapPagefiles
MiObtainDynamicVa
MiObtainFaultCharges
MiObtainFreePages
MiObtainMdlCharges
MiObtainPagefileHashes
MiObtainParkedCoreMasks
MiObtainPoolCharges
MiObtainProtoBaseFromNode
MiObtainProtoReference
MiObtainReferencedSecureVad
MiObtainReferencedVadEx
MiObtainRelocationBits
MiObtainRotateProtectionRanges
MiObtainSectionForDriver
MiObtainSystemCacheView
MiObtainSystemCharges
MiObtainSystemVa
MiObtainedPageIsGood
MiOffsetToProtos
MiOkToBinMoreLargePtes
MiOkToSetPteDirtyForNotValidFault
MiOkToShrinkPageFiles
MiOpenHotPatchFile
MiOpenSpecialPurposeMemory
MiOrderTrimList
MiOutPageSingleKernelStack
MiOutSwapFreeSoftWslePxe
MiOutSwapKernelStackPage
MiOutSwapWorkingSet
MiOutSwapWorkingSetPte
MiOutlawInswaps
MiPageAlreadyLocked
MiPageAttributeBatchChangeNeeded
MiPageAvailable
MiPageBootRegistry
MiPageChainCount
MiPageChargedCommit
MiPageCombiningActive
MiPageContentsRetainedAcrossAttributeChange
MiPageFileLargestBitmapsRun
MiPageFileNoFreeSpace
MiPageFreeToZero
MiPageHasRelocations
MiPageHashBugCheck
MiPageIndexToMoveInProgress
MiPageListCollision
MiPageMightBeZero
MiPageNotZero
MiPageRead
MiPageSizeToPteLevel
MiPageStandbyLookasideStatus
MiPageTableLockIsContended
MiPageTablesNeeded
MiPageToChannel
MiPageToNode
MiParseComAndCetHeaders
MiParseImageLoadConfig
MiParseImageSectionHeaders
MiPartitionDeleteMemoryNode
MiPartitionObjectToPartition
MiPartitionWorkingSetManager
MiPatchCfgCallTargetsSort
MiPatchDataPagesCallback
MiPerformCombineScan
MiPerformFinalZeroing
MiPerformFixups
MiPerformMemoryChange
MiPerformOnDemandLargePageCoalesce
MiPerformSafePdeWrite
MiPerformVadSplitting
MiPeriodicGoodCitizen
MiPersistMdl
MiPersistMemory
MiPersistPage
MiPersistVa
MiPfAllocateMdls
MiPfCoalesceAndIssueIOs
MiPfCompleteCoalescedIo
MiPfCompleteInPageSupport
MiPfCompletePrefetchIos
MiPfExecuteReadList
MiPfIssueCoalesceCandidates
MiPfIssueCoalescedSupport
MiPfPrepareReadList
MiPfPrepareSequentialReadList
MiPfPutPagesInTransition
MiPfnBestZeroAttribute
MiPfnIsActivePageTable
MiPfnIsNonPagedPool
MiPfnLargeBitSet
MiPfnRangeIsZero
MiPfnReferenceCountIsZero
MiPfnShareCountIsZero
MiPfnToStandbyLookaside
MiPfnZeroingNeeded
MiPfnsWorthTrying
MiPhysicalMemoryEverRemoved
MiPickClusterForMappedFileFault
MiPopLargePfnList
MiPopulateCfgBitMap
MiPopulateFreeKernelShadowStackCacheEntries
MiPostInsertVad
MiPreInitializeSystemImagePage
MiPreemptivePageDemote
MiPreemptivePageDemoteAmount
MiPrefetchControlArea
MiPrefetchDriverPages
MiPrefetchJumpVad
MiPrefetchNormally
MiPrefetchPagesViable
MiPrefetchPreallocatePages
MiPrefetchReleasePreallocatedPages
MiPrefetchRestOfCluster
MiPrefetchVirtualMemory
MiPrepareAttachThread
MiPrepareDecayNodeForReuse
MiPrepareDeleteOnClose
MiPrepareDriverForHotPatch
MiPrepareDriverPatchState
MiPrepareEnclaveMetadataPage
MiPrepareImagePagesForHotPatch
MiPrepareLargePageSubPageForFree
MiPreparePageAccessor
MiPreparePfnDatabasePageForFree
MiPreparePhysicalPagesMdlForFree
MiPreparePlaceholderVadReplacement
MiPrepareScpFixupsForNtAndHal
MiPrepareSegmentForDeletion
MiPrepareToFlushSubsection
MiPrepareToHotPatchImage
MiPrepareToHotPatchImagePatchCallback
MiPrepareToHotPatchVad
MiPrepareToTradeUsingAccessedBit
MiPrepareVadDelete
MiPreserveBootDecisions
MiPreventControlAreaDeletion
MiPrivateFixup
MiProbeAndLockComplete
MiProbeAndLockPacket
MiProbeAndLockPages
MiProbeAndLockPrepare
MiProbeLeafPteAccess
MiProbeLockFrame
MiProbePacketContended
MiProbeUnlockPage
MiProcessCommitIntact
MiProcessCrcList
MiProcessDeleteOnClose
MiProcessHotPatchUndoTable
MiProcessKernelCfgAddressTakenImports
MiProcessKernelCfgImage
MiProcessKernelCfgImageLoadConfig
MiProcessLargeCoalesceBitmapCandidates
MiProcessLargeCoalesceCandidates
MiProcessLoadConfigForDriver
MiProcessPageGroupInfo
MiProcessPatchImageCfg
MiProcessRemoveFromWorkingSet
MiProcessSuitableForCombining
MiProcessVaContiguityInformation
MiProcessVaRangesInfoClass
MiProcessVpabAccessedInfo
MiProcessWorkingSets
MiProcessWsInSwapFault
MiProcessWsInSwapRanges
MiProcessWsInSwapSupport
MiProcessingPageExtendComplete
MiProcessorParked
MiPromoteControlAreaToStrongCode
MiPropagateFaultPacketFields
MiProtectAweRegion
MiProtectDriverSectionPte
MiProtectEnclavePages
MiProtectKernelCfgData
MiProtectLargeKernelHalRange
MiProtectPageListLocks
MiProtectPrivateMemory
MiProtectSharedUserPage
MiProtectSystemImage
MiProtectionToCacheAttribute
MiPruneCachedStackList
MiPruneProcessLargePageCaches
MiPruneStandbyPages
MiPteBinsNeedTrimming
MiPteEmbedsWsle
MiPteForProtoPoolMadeDemandFill
MiPteForTrimmedProto
MiPteHasShadow
MiPteInShadowRange
MiPteNeedsCommitCharge
MiPulseCommitSignal
MiPulseLowAvailableEvent
MiPureAweVad
MiPurgeBadFileOnlyPages
MiPurgeFileOnlyPfn
MiPurgeImageSection
MiPurgePartitionStandby
MiPurgeSlabEntries
MiPurgeSlabEntry
MiPurgeSubsection
MiPurgeValidPage
MiPurgeZeroListHead
MiPurgeZeroListHeads
MiQuantifyZeroWork
MiQueryAcceleratorHandle
MiQueryAddressSpan
MiQueryAddressState
MiQueryFlagsForRvaEntry
MiQueryHardwareCacheInformation
MiQueryImageExtensionInformation
MiQueryLeafPte
MiQueryLoadedPatches
MiQueryMemoryListInformation
MiQueryMemoryPhysicalContiguity
MiQueryPfn
MiQueryProcessActivePatches
MiQuerySpecialPurposeMemoryInformation
MiQueryStateMatches
MiQuerySystemBase
MiQueryVaPhysicalContiguity
MiQueryVpabAccessedState
MiQueueControlAreaDelete
MiQueueCoreWorkingSetEntries
MiQueueExtentPfnDeletion
MiQueuePageAccessLog
MiQueuePageFileExtension
MiQueuePinDriverAddressLog
MiQueueSyncModifiedWriterApc
MiQueueWorkingSetRequest
MiRaisedIrqlFault
MiReAcquireCommitFailWorker
MiReAcquireOutSwappedProcessCommit
MiReAllocateWorkingSetSwapSupport
MiReInitializeFreeSlabPfn
MiReacquireHigherPageTableLock
MiReacquireWalkLocks
MiReadEntirePageHashEntry
MiReadFromMemoryPagefile
MiReadImageHeaders
MiReadPagefilePage
MiReadReverseMapAttributes
MiReadVadFlags2
MiReadWriteAnyLevelShadowPte
MiReadWriteVirtualMemory
MiReadyFlushMdlToWrite
MiReadyLargeAwePageForFree
MiReadyLargePageToFree
MiReadyReservedView
MiReadyStandbyPageForActive
MiReadyToZeroNextLargePage
MiRealVaToFlushType
MiReapplyImportOptimizationForDriverVerifier
MiReapplyImportOptimizationWorker
MiReassessZeroThreads
MiReassignProcessorsToMemoryOnlyNodes
MiRebalanceSystemCacheFreedViews
MiRebalanceZeroFreeLists
MiRebaseDynamicRelocationRegions
MiRebuildLargePage
MiRebuildLargePages
MiRebuildLargePagesThread
MiRebuildPageTableAges
MiRebuildPartitionMemoryBlock
MiRebuildStandbyLookasideList
MiRecheckCombineVm
MiRecheckVpabAccessedVa
MiReclaimUnusedUltraMdlMaps
MiRecomputeWalkHierarchy
MiRecordLargePageCandidate
MiReduceCommitLimits
MiReduceMappedFileReadAhead
MiReduceMappedFileReadBehind
MiReduceMdl
MiReducePteUseCount
MiReduceShareCount
MiReduceSystemRegionType
MiReduceWs
MiReduceZeroingThreads
MiRefPageFileSpaceBitmaps
MiReferenceActiveControlArea
MiReferenceActiveSubsection
MiReferenceAweHandle
MiReferenceCfgVad
MiReferenceCloneProto
MiReferenceControlArea
MiReferenceControlAreaFile
MiReferenceControlAreaFileWithTag
MiReferenceControlAreaPfn
MiReferenceDataSubsections
MiReferenceDriverPage
MiReferenceExistingCloneProto
MiReferenceExistingControlArea
MiReferenceFileObjectForMap
MiReferenceInPageFile
MiReferenceIncomingPhysicalPages
MiReferenceIoPages
MiReferenceMappedControlArea
MiReferenceNonPagedMemoryProcessList
MiReferencePageForModifiedWrite
MiReferencePagePartition
MiReferencePageRuns
MiReferencePfBackedSection
MiReferenceSubsection
MiReferenceVad
MiRefillPurgedExtents
MiRegionAssignmentSort
MiRegisterForHardwareAcceleratorChanges
MiRegistryVaSort
MiReleaseAddMemoryLocks
MiReleaseArbitraryPage
MiReleaseCommitForResetPages
MiReleaseControlAreaCharges
MiReleaseControlAreaWaiters
MiReleaseDriverPtes
MiReleaseEnclaveMetadataPage
MiReleaseFaultCharges
MiReleaseFaultPte
MiReleaseFaultState
MiReleaseFreshPage
MiReleaseFreshPageAtDpc
MiReleaseFreshPageLocked
MiReleaseHotPatchResources
MiReleaseImageSection
MiReleaseInPageRefs
MiReleaseKernelCfgLock
MiReleaseLargePdeMappings
MiReleaseLoadLock
MiReleaseMemoryRuns
MiReleaseNonPagedResources
MiReleaseNonPagedResourcesNotExposed
MiReleaseOutSwapReservations
MiReleaseOutSwappedProcessCommit
MiReleasePageFileInfo
MiReleasePageFileSectionInfo
MiReleasePageFileSpace
MiReleasePageHash
MiReleasePageListLock
MiReleasePartitionHugeIoSpace
MiReleasePrefetchGapPages
MiReleasePrivilegedPtes
MiReleaseProcessorFlushList
MiReleaseProcessorHugeMappingAtDpc
MiReleasePteCopyList
MiReleasePteMappings
MiReleasePtes
MiReleaseReadListResources
MiReleaseScrubPacket
MiReleaseSpinLockExclusive
MiReleaseSpinLockShared
MiReleaseSystemCacheView
MiReleaseVadEventBlocks
MiReleaseWalkLocks
MiReleaseWriteInProgressCharges
MiReleaseWsSwapReservationPfn
MiRelinkDecayClusterTimer
MiRelinkStandbyPage
MiRelinkTransitionSlabPages
MiReloadBootLoadedDrivers
MiRelocateAmount
MiRelocateImage
MiRelocateImageAgain
MiRelocateImagePfn
MiRelockFaultState
MiRelockProtoPoolPage
MiRememberUnloadedDriver
MiRemoveActivePageTableLinks
MiRemoveBadPages
MiRemoveConductorListZeroThread
MiRemoveDecayClusterTimer
MiRemoveEnclavePagesFromDump
MiRemoveEnclavePagesFromMirror
MiRemoveFaultNode
MiRemoveFileOnlyPages
MiRemoveFromSystemSpace
MiRemoveHugeRangeAnyColor
MiRemoveIoPageExclusion
MiRemoveLargeFreeLoaderDescriptors
MiRemoveLargeFreeLoaderDescriptorsOld
MiRemoveLoaderEntry
MiRemoveLockedPageCharge
MiRemoveLockedPageChargeAndDecRef
MiRemoveLowestPriorityStandbyPage
MiRemoveMappedPtes
MiRemoveMappingNode
MiRemoveMdlPages
MiRemoveNonIdealCachedStacks
MiRemovePageAnyColor
MiRemovePendingBadPageNode
MiRemovePendingBadPagesFromDump
MiRemovePhysicalMemory
MiRemovePhysicalMemoryBatchComplete
MiRemovePteTracker
MiRemoveSecureEntry
MiRemoveSharedCommitNode
MiRemoveSlabEntry
MiRemoveSystemCacheReferences
MiRemoveSystemImagePage
MiRemoveThreadFromEngineLists
MiRemoveUnusedSegment
MiRemoveUnusedSegments
MiRemoveUnusedSubsection
MiRemoveUserPhysicalPagesView
MiRemoveVad
MiRemoveVadCharges
MiRemoveVadEvent
MiRemoveViewsFromSection
MiRemoveViewsFromSectionWithPfn
MiRemoveWsle
MiRemoveWsleList
MiReplaceActivePageTableLinks
MiReplaceImportEntry
MiReplaceLockedPage
MiReplacePageOfProtoPool
MiReplacePageTablePage
MiReplacePatchImportEntry
MiReplaceRotateWithDemandZero
MiReplaceRotateWithDemandZeroNoCopy
MiReplaceSecondaryListStandbyPage
MiReplaceStandbyLookaside
MiReplaceSystemProtoPtesNode
MiReplaceTransitionPage
MiReplenishCombineResources
MiReplenishLocalCommit
MiReplenishPageSlist
MiReplenishSlabAllocator
MiReplenishSlabAllocatorByIdentity
MiReplenishSlabAllocatorWorker
MiReplenishTransitionPageHeatList
MiReplenishUltraPageTables
MiReplicatePteChange
MiReplicatePteChangeToProcess
MiRepointPteAtExtendedStandby
MiRepurposeDecayNode
MiRepurposeStandbySlabPage
MiRequestIoPageMdlCacheRelease
MiRescanPageFileBitmapPortion
MiRescanPagefileBitmaps
MiReserveBootDriverPtes
MiReserveDriverPtes
MiReserveEnclavePages
MiReserveExistingDriverPtes
MiReserveFaultPte
MiReservePageFileSpace
MiReservePageFileSpaceForPage
MiReservePageHash
MiReservePoolMemory
MiReservePrivilegedPtes
MiReservePtes
MiReserveUserMemory
MiReserveWorkingSetSwapSpace
MiReserveWorkingSetSwapSpaceRuns
MiResetAccessBitPte
MiResetAccessBitPteWorker
MiResetAccessBitsTail
MiResetAccessBitsVpabCallback
MiResetVirtualMemory
MiResidentPageDangleFree
MiResidentPagesForSpan
MiResizeAweBitMap
MiResolveAwePageConflict
MiResolveDemandZeroFault
MiResolveImageImports
MiResolveImageReferences
MiResolveMappedFileFault
MiResolveMemoryEvent
MiResolvePageFileFault
MiResolvePageTablePage
MiResolvePrivateZeroFault
MiResolveProtoCombine
MiResolveProtoPteFault
MiResolveSharedZeroFault
MiResolveTransitionFault
MiRestartZeroingPass
MiRestockOverCommit
MiRestoreImportTableProtection
MiRestoreTransitionPte
MiRestrictRangeToNode
MiRestrictSystemCodeProtection
MiResumeFromHibernate
MiResumeMarkPageLists
MiRetainSubsection
MiRetardMdl
MiRetryNonPagedAllocation
MiReturnAddMemoryResources
MiReturnBadPagesToBadList
MiReturnCcAccessLog
MiReturnCloneCharges
MiReturnCommit
MiReturnCrossPartitionCharge
MiReturnCrossPartitionCharges
MiReturnCrossPartitionControlAreaCharges
MiReturnCrossPartitionSectionCharges
MiReturnEnclavePage
MiReturnExcessPoolCharges
MiReturnExcessPoolCommit
MiReturnFaultCharges
MiReturnFreeZeroPage
MiReturnFullProcessCharges
MiReturnFullProcessCommitment
MiReturnImageBase
MiReturnLockedVadOrNextVa
MiReturnMdlCharges
MiReturnMdlExcess
MiReturnPageTablePageCommitment
MiReturnPagedPoolLockCharge
MiReturnPartitionPagesToParent
MiReturnPfnList
MiReturnPfnReferenceCount
MiReturnPfnReferenceCountAtDpc
MiReturnPhysicalPoolPages
MiReturnPoolCharges
MiReturnProcessCommitment
MiReturnProcessPhysicalPages
MiReturnProcessVads
MiReturnPteMappingSet
MiReturnReservedEnclavePages
MiReturnResident
MiReturnSystemCacheRegionsToKva
MiReturnSystemCharges
MiReturnSystemImageAddress
MiReturnSystemImageCommitment
MiReturnSystemPtes
MiReturnSystemVa
MiReturnVadCharges
MiReturnVadQuota
MiReturnWsToExpansionList
MiReuseStandbyPage
MiReuseUltraPageTable
MiRevertPfnActivePageTable
MiRevertProcessorMove
MiRevertQuasiPte
MiRevertRelocatedImagePfn
MiRevertRelocations
MiRevertValidPte
MiRevokeExecutePte
MiRevokeExecuteTail
MiRewritePteWithLockBit
MiRotateComplete
MiRotateToFrameBuffer
MiRotateToFrameBufferNoCopy
MiRotatedToFrameBuffer
MiSafeLockPage
MiSafeLockPageAtDpc
MiSafeTryLockNestedPageAtDpc
MiSanitizePage
MiSanitizePfnProtection
MiSanitizeShadowPxe
MiSaveUnusedSegmentCalibration
MiScanPagefileSpace
MiScanPagefiles
MiScanRelocationPage
MiScheduleZeroPageThreads
MiScrubActiveLargePage
MiScrubInterrupted
MiScrubLargeMappedPage
MiScrubLargePage
MiScrubLargePageRegions
MiScrubMemoryWorker
MiScrubNode
MiScrubPage
MiScrubProcessLargePage
MiSearchChannelTable
MiSearchNumaNodeTable
MiSectionClose
MiSectionControlArea
MiSectionCreated
MiSectionDelete
MiSectionInitialization
MiSectionOpen
MiSecureVad
MiSegmentDelete
MiSegmentDereferenceWorker
MiSelectBestZeroingProcessor
MiSelectCfgBitMap
MiSelectImageBase
MiSelectOverflowDllBase
MiSelectRelocationStartHint
MiSelectSystemImageAddress
MiSelectUserAddress
MiSelfTrim
MiSendParkedCoreUpdateToAllChildPartitions
MiSetActivePfnHeat
MiSetBasicInfoPartitionId
MiSetControlAreaSystemVa
MiSetDeleteOnClose
MiSetDeleteOnCloseTimer
MiSetExclusionWalkBounds
MiSetFaultPacketDirectives
MiSetFreeZeroPfnCold
MiSetGraphicsPtes
MiSetHintSlabEntry
MiSetHugeRangePartitionId
MiSetIdealProcessorThread
MiSetImageProtection
MiSetImportTableProtection
MiSetInPagePrefetchPriority
MiSetInPagePriority
MiSetNextStandbyPageSecondaryNoLockAsserts
MiSetNonResidentPteHeat
MiSetOriginalPtePfnFromFreeList
MiSetPageFileAllocationBits
MiSetPageProtection
MiSetPageTablePfnBuddy
MiSetPageZeroInProgress
MiSetPagesModified
MiSetPagingOfDriver
MiSetPfnBlink
MiSetPfnContainingFrame
MiSetPfnIdentity
MiSetPfnKernelStack
MiSetPfnModified
MiSetPfnNodeBlinkLow
MiSetPfnNodeFlinkHigh
MiSetPfnOldestWsleLeafAge
MiSetPfnOwnedAndActive
MiSetPfnRemovalRequested
MiSetPfnTbFlushStamp
MiSetProbePagesAhead
MiSetProcessPartitionId
MiSetProtectionOnSection
MiSetProtectionOnTransitionPte
MiSetPteTimeStamp
MiSetReadOnlyOnSectionView
MiSetSlabAllocatorPolicy
MiSetSlabAllocatorSlabSize
MiSetSlabTypeIdentifiers
MiSetStandbyLookasideState
MiSetStoreVirtualPagefileValue
MiSetSubsectionBase
MiSetSystemCacheReverseMap
MiSetSystemCodeProtection
MiSetSystemRegionTypes
MiSetTrimWhileAgingState
MiSetVaAgeList
MiSetVadBits
MiSetVadDeleted
MiSetVadFlags
MiSetWsleProtection
MiSetZeroPageThreadPriority
MiSetZeroThreadState
MiShadowTopLevelPxes
MiShareExistingControlArea
MiSharePages
MiSharedInsertPfnChainInList
MiSharedVaToPartition
MiShouldLockPteDirectly
MiShouldTrimUnusedSegments
MiShouldUseExtendedStandby
MiShowBadMapper
MiShutdownSystem
MiSignalCommitSignals
MiSignalLargePageRebuild
MiSignalNewAcceleratorsAvailable
MiSignalNonPagedPoolWatchers
MiSignalZeroingPassComplete
MiSimpleAgePte
MiSimpleAging
MiSimpleInsertPageInList
MiSkipEntirePagefileRegions
MiSkipFractionalPagefileRegion
MiSkipStandbyEntries
MiSkipWalkLock
MiSlabContextDefragInProgress
MiSlabDemotionLowMemoryConditionUpdate
MiSlabEntryBecameEmpty
MiSlabEntryPageFreed
MiSlabUpdateRecentFailure
MiSlistGetFreePage
MiSlowRotateCopy
MiSmallVaStillMapsFrame
MiSnapDriverRange
MiSnapPageMoveInProgress
MiSnapThunk
MiSoftFaultMappedView
MiSoloZeroHugeRange
MiSortBestStealCandidates
MiSortMdlFrames
MiSortPageFramesRemoveDuplicates
MiSpecialPurposeMemoryCacheUpdateDpc
MiSpecialPurposeMemoryChangePrepare
MiSpecialPurposeMemoryRemoved
MiSpecialPurposeMemoryTypeDereference
MiSpinForProtoPoolLock
MiSplitBitmapPages
MiSplitDirectMapPage
MiSplitDriverPage
MiSplitMirrorBitMap
MiSplitPageChain
MiSplitPfnBitMaps
MiSplitPfnBitMapsForPartitionHierarchy
MiSplitPrivatePage
MiSplitReducedCommitClonePage
MiStackTheftFreezeProcessors
MiStandbyPageContentsIntact
MiStandbyPageStillCombineCandidate
MiStartDpcGang
MiStartDpcZeroingRound
MiStartZeroEngineThreads
MiStartingOffset
MiStartingOffsetNeedLock
MiStealPage
MiStopPageAccessor
MiStoreAttemptContractPageFile
MiStoreChargeReservedPages
MiStoreCheckCandidatePage
MiStoreCheckCompleteWriteBatch
MiStoreCheckContractPageFile
MiStoreContractVirtualPagefileApc
MiStoreDecrementOutstandingWrites
MiStoreDeletePartition
MiStoreDiscardPoisonedPage
MiStoreDrainWriteSupports
MiStoreEvictPageFile
MiStoreEvictThread
MiStoreExtendVirtualPagefile
MiStoreFaultComplete
MiStoreFreeWriteSupport
MiStoreGetVadForAddress
MiStoreGetWriteSupport
MiStoreGraphicsProtectionInVad
MiStoreLogDiscardPoisonedPage
MiStoreLogFullPagefile
MiStoreLogNotCandidate
MiStoreLogReadFailure
MiStoreLogWriteCompleteFailure
MiStoreLogWriteDisabled
MiStoreLogWriteIssueFailure
MiStoreMarkLockedPagesModified
MiStoreModifiedWriteComplete
MiStoreModifiedWriteCompletePfn
MiStoreModifiedWriteDereference
MiStoreReleaseReservedPageCharges
MiStoreRundownWritesApc
MiStoreUpdateMemoryConditions
MiStoreUpdatePagefileHash
MiStoreWriteModifiedCompleteApc
MiStoreWriteModifiedPages
MiStrongCodeImage
MiSubsectionNeedsExtents
MiSubsectionProtosCreated
MiSufficientAvailablePages
MiSwapHardFaultPage
MiSwapNumaStandbyPage
MiSwapStackPage
MiSwapStackPageNoDpc
MiSwitchBaseAddress
MiSwitchKstackPages
MiSwitchToPfns
MiSwitchToTransition
MiSwizzleInvalidPte
MiSyncCommitSignals
MiSynchronizeFastPageInsert
MiSynchronizeSystemVa
MiSynchronousPageWrite
MiSystemCacheVaControlArea
MiSystemFault
MiSystemImageHasPrivateFixups
MiSystemInSingleProcessorMode
MiSystemVaPreserveGuardPage
MiSystemVaToDynamicBitmap
MiSystemVaTypeHasWsles
MiSystemVaTypeToVm
MiTbFlushCostSort
MiTbFlushListPromoteThreshold
MiTbFlushSort
MiTbFlushTimeStampMayNeedFlush
MiTerminateEnclave
MiTerminateHardwareEnclave
MiTerminateWsle
MiThreadIdealNode
MiTimeToWriteMemory
MiTracingEnabledCallback
MiTradeActivePage
MiTradeBootImagePage
MiTradePage
MiTradeTransitionPage
MiTransferFileExtent
MiTransferMemoryPagefileData
MiTransferPageFileOwnership
MiTransferPartitionPageRun
MiTransferSoftwarePte
MiTransformVadSecure
MiTransformValidPteInPlace
MiTransformValidPteUsingAccessedBit
MiTransformValidPteViaIpi
MiTransientCombineAddress
MiTransientPageListWriter
MiTranslateCacheAttribute
MiTranslateCacheType
MiTranslatePageForCopy
MiTranslateSubsectionState
MiTranslateVmToLock
MiTranslateWsType
MiTrimAllSystemPagableMemory
MiTrimNoStealPagesFromWorkingSets
MiTrimOrAgeWorkingSet
MiTrimPte
MiTrimPteWorker
MiTrimSection
MiTrimSharedPage
MiTrimSharedPageFromViews
MiTrimSystemImagePages
MiTrimThisWsle
MiTrimUnusedPageFileRegionsApc
MiTrimUnusedPageFileRegionsWorker
MiTrimWorkingSet
MiTrimWorkingSetBuildup
MiTrimWorkingSetTail
MiTrimWorkingSetTailHelper
MiTrimWorkingSetVpabCallback
MiTrimmedEnough
MiTryAcquirePushLockUnordered
MiTryDeleteTransitionPte
MiTryLocateWsle
MiTryLockLeafPage
MiTryLockPageTableUnordered
MiTryLockProtoPoolPageAtDpc
MiTryLockVad
MiTryUnlinkNodeLargePages
MiTryZeroMemory
MiUnlinkAccelerator
MiUnlinkBadPages
MiUnlinkDecayClusterTimer
MiUnlinkFreeOrZeroedPage
MiUnlinkHotAddFlight
MiUnlinkHugeRange
MiUnlinkPageChainHead
MiUnlinkPageFromBadList
MiUnlinkPageFromListEx
MiUnlinkProtectedStandbyPfn
MiUnlinkSecondaryListStandbyPage
MiUnlinkStandbyPage
MiUnlinkStandbyPfn
MiUnlinkSubsectionWaitBlock
MiUnlinkTransitionSlabPages
MiUnlinkUnusedControlArea
MiUnlinkUnusedSubsection
MiUnlinkWorkingSet
MiUnlinkZeroThreadFromActiveDomain
MiUnloadApproved
MiUnloadSystemImage
MiUnloadSystemImageSoftWsles
MiUnlockAllMemoryLists
MiUnlockAndDereferenceNestedVad
MiUnlockAndDereferenceVad
MiUnlockAndDereferenceVadShared
MiUnlockAndFreeDvPatchImage
MiUnlockAwePagesExclusive
MiUnlockAwePagesShared
MiUnlockAweVadsExclusive
MiUnlockAweVadsShared
MiUnlockBootPageSections
MiUnlockCodePage
MiUnlockControlAreaFileObjectExclusive
MiUnlockControlAreaFileObjectShared
MiUnlockControlAreaSectionExtend
MiUnlockDataCopyPages
MiUnlockDriverCode
MiUnlockDriverMappings
MiUnlockDriverPages
MiUnlockDynamicMemoryExclusive
MiUnlockDynamicMemoryNestedExclusive
MiUnlockDynamicMemoryShared
MiUnlockEntireDriver
MiUnlockFaultPageTable
MiUnlockFaultWorkingSet
MiUnlockFileExtentsExclusive
MiUnlockFlushMdl
MiUnlockHugePfn
MiUnlockImageSection
MiUnlockIoPfnTree
MiUnlockLoadedDataTableEntry
MiUnlockLoaderEntry
MiUnlockMdlWritePages
MiUnlockMultipleZeroChunks
MiUnlockNestedPageTableWritePte
MiUnlockNestedVad
MiUnlockOpportunisticPagesInPageTable
MiUnlockPage
MiUnlockPageInline
MiUnlockPageTable
MiUnlockPageTableCharges
MiUnlockPageTableInternal
MiUnlockPageTableRange
MiUnlockPagedAddress
MiUnlockPartitionMappedWriter
MiUnlockPhysicalPageByVa
MiUnlockPoolCommitWs
MiUnlockProbePacketWorkingSet
MiUnlockProtoPoolPage
MiUnlockStealVm
MiUnlockStoreLockedPages
MiUnlockSystemCacheInit
MiUnlockSystemVa
MiUnlockVa
MiUnlockVad
MiUnlockVadCore
MiUnlockVadRange
MiUnlockVadShared
MiUnlockVadTree
MiUnlockWorkingSetCoreExclusive
MiUnlockWorkingSetCoreShared
MiUnlockWorkingSetExclusive
MiUnlockWorkingSetOptimal
MiUnlockWorkingSetShared
MiUnlockWsSwapExclusive
MiUnlockWsle
MiUnmapContiguousMemory
MiUnmapFrameBuffer
MiUnmapImageForEnclaveUse
MiUnmapImageInSystemSpace
MiUnmapKernelScp
MiUnmapLargePages
MiUnmapLegacyAwePage
MiUnmapLockedPagesInUserSpace
MiUnmapMdlCommon
MiUnmapPageInHyperSpaceWorker
MiUnmapPfns
MiUnmapReturnCharges
MiUnmapReturnSystemCommit
MiUnmapSinglePage
MiUnmapVad
MiUnmapViewOfSection
MiUnmapViewSubsections
MiUnsecureVirtualMemoryAgainstWrites
MiUpControlAreaRefs
MiUpdateActiveSubsection
MiUpdateAvailableEvents
MiUpdateAvailableEventsAtDpc
MiUpdateAwePageTable
MiUpdateBadPfnIdentity
MiUpdateBootDriverHotPatchImports
MiUpdateBootHpatPagesInUse
MiUpdateCacheAttributeListsForPage
MiUpdateCfgSystemWideBitmap
MiUpdateCfgSystemWideBitmapWorker
MiUpdateChargedWsles
MiUpdateClaimDistribution
MiUpdateCloneReducedCommit
MiUpdateCommitCounts
MiUpdateControlAreaCommitCount
MiUpdateDemotedSubPage
MiUpdateDomainAvailableAffinity
MiUpdateDriverLoadInProgress
MiUpdateEnclavePfnProtection
MiUpdateForkMaps
MiUpdateHugePageCounts
MiUpdateHugeRangeZeroFreeBitmap
MiUpdateImagePfnImportRelocations
MiUpdateImageSystemWideBitmaps
MiUpdateImportRelocationsOnDriverPrivatePages
MiUpdateKernelShadowStackOwnerData
MiUpdateLargePageBitMap
MiUpdateLargePageCandidateValue
MiUpdateLargePageCandidates
MiUpdateLargePageSectionPfns
MiUpdateLastSubsectionSize
MiUpdateMirrorBitmaps
MiUpdateOldPagesVpabCallback
MiUpdateOldPte
MiUpdateOldPteWorker
MiUpdateOldWorkingSetPagesTail
MiUpdatePageAttributeStamp
MiUpdatePageFileBlockOwner
MiUpdatePageFileHighInPte
MiUpdatePageFileList
MiUpdatePageMoveInProgressInternal
MiUpdatePageTableUseCount
MiUpdatePageThresholdsDpc
MiUpdatePagefilePeakUsage
MiUpdatePagingFileMinimum
MiUpdatePartitionChildPageCounts
MiUpdatePartitionLargePfnBitMap
MiUpdatePartitionMemory
MiUpdatePatchInProgress
MiUpdatePerSessionProto
MiUpdatePfnBackingStore
MiUpdatePfnForPrefetchByPte
MiUpdatePfnOnSlabStandbyList
MiUpdatePfnPriority
MiUpdatePfnProtection
MiUpdatePhysicalPages
MiUpdatePrefetchPriority
MiUpdatePrivateDemandZeroView
MiUpdateProcessSharedCommit
MiUpdateProtectionMask
MiUpdateReserveClusterInfo
MiUpdateRetpolineImportFixups
MiUpdateSharedUserDataNumberOfPages
MiUpdateSlabContextSlabSize
MiUpdateSlabPagePlaceholderState
MiUpdateSlabRangeTypeHelper
MiUpdateSlabTypeAvailablePages
MiUpdateSpecialPurposeMemoryCacheEligibility
MiUpdateSubsectionCrossPartitionRefs
MiUpdateSystemProtoPtesTree
MiUpdateTransitionPteFrame
MiUpdateUserMappings
MiUpdateVadBits
MiUpdateVadStartVpn
MiUpdateWorkingSetAgeDistribution
MiUpdateWorkingSetPrivateSize
MiUpdateWsleAge
MiUpdateZeroFreeBitmap
MiUseLowIoPriorityForModifiedPages
MiUseProcessorHugeMappingAtDpc
MiUseProtectedSlabAllocatorForDriverPage
MiUseSlabAllocator
MiUserFault
MiUserFaultAllowed
MiUserPdeOrAbove
MiVaIsPageFileHash
MiVaIsUltra
MiVaToFlushVm
MiVaToPfnEx
MiVadBitToUserVa
MiVadDeleted
MiVadExtentCommitted
MiVadHasSharedCommit
MiVadIsMetadataBitmap
MiVadLeafPagesPrecharged
MiVadMapsLargeImage
MiVadPageTableChargeLevel
MiVadPagesTradable
MiVadPureReserve
MiVadRangeIsIoSpace
MiVadShouldBeForked
MiVadSupportsCombine
MiVadSupportsPhysicalContiguityQuery
MiVadSupportsPrivateCommit
MiValidCombineProtection
MiValidFault
MiValidVirtualizationFault
MiValidateAddPhysicalMemoryParameters
MiValidateAndLockAweMapCountPage
MiValidateControlAreaPartition
MiValidateExistingImage
MiValidateImagePfn
MiValidateInPage
MiValidateKernelHalLargePageRange
MiValidateKernelShadowStackPage
MiValidateMdlAllocationRequest
MiValidateMdlTracker
MiValidateMemoryRangeEntries
MiValidatePagefilePageHash
MiValidatePartitionInitialAddMemory
MiValidateSectionCreate
MiValidateSectionSigningPolicy
MiValidateStrongCodeDriverImage
MiValidateUserCallTarget
MiValidateUserPhysicalExternalFlags
MiValidateVadMetadataFlags
MiValidateZeroBits
MiVerifyImageHeader
MiVerifyLargeSectionLayout
MiViewMayContainPage
MiVmAccessLoggingEnabled
MiVolunteerForTrimFirst
MiWaitForAsynchronousFlushes
MiWaitForAvailablePages
MiWaitForCollidedFaultComplete
MiWaitForExtentDeletions
MiWaitForFreePage
MiWaitForInPageComplete
MiWaitForPageMoveComplete
MiWaitForPageWriteCompletion
MiWaitForVadDeletion
MiWaitForZeroWorkers
MiWakeAllZeroCalibrationProcessors
MiWakeAllZeroConductors
MiWakeCommitRequest
MiWakeFileOnlyReaper
MiWakeLargePageRebuild
MiWakeModifiedPageWriter
MiWakeOnlyParticipatingProcessorsFromAssignedNode
MiWakePageZeroing
MiWakeWaitersForAweCacheAttributeChange
MiWakeZeroingThreads
MiWalkAllFreeZeroLists
MiWalkEntireImage
MiWalkEntireImagePageNeedsProcessing
MiWalkGetResumptionPxe
MiWalkLeap
MiWalkPageTables
MiWalkPageTablesRecursively
MiWalkPageTablesRecursivelyNoSynch
MiWalkPagesOnLists
MiWalkResetCommitPages
MiWalkResetCommitPte
MiWalkVaCheckCommon
MiWalkVaRange
MiWorkingSetInfoCheckPageTable
MiWorkingSetIsContended
MiWorkingSetManager
MiWorkingSetVeryLarge
MiWriteAweClusterPte
MiWriteAwePtes
MiWriteCloneFlags
MiWriteComplete
MiWriteCompletePfn
MiWriteEnclavePte
MiWriteEntirePageHashEntry
MiWriteHugePfnColorHeadCore
MiWriteLargePte
MiWritePageFileHash
MiWriteProtectSystemImages
MiWritePteHighLevel
MiWritePteHighLevelIsr
MiWritePteShadow
MiWriteRepurposedTransitionPte
MiWriteSegmentSignatureFlags
MiWriteSharedDemandZeroPte
MiWriteStandbyLookasideEntry
MiWriteUselessChildPte
MiWriteVadFlags2
MiWriteValidPteNewPage
MiWriteValidPteNewProtection
MiWriteValidPteVolatile
MiWriteWsle
MiWsSwapPageFileNumber
MiWsleFlush
MiWsleFree
MiYieldPageTableWalk
MiZeroAllPageFiles
MiZeroAndConvertPage
MiZeroAndFlushGoodCitizen
MiZeroAndReleasePages
MiZeroBootCalibratorStarted
MiZeroBootMappings
MiZeroCfgSystemWideBitmap
MiZeroCfgSystemWideBitmapWorker
MiZeroChainWorker
MiZeroEngineSetOptimalCount
MiZeroFault
MiZeroHotAddMemory
MiZeroHugeRangeWorker
MiZeroInParallel
MiZeroInParallelWorker
MiZeroInflectionPointReached
MiZeroLargePage
MiZeroMoveToProcessor
MiZeroNodeConductorWait
MiZeroNodeExiting
MiZeroPageCalibrate
MiZeroPageCalibrateDpc
MiZeroPageCalibrateLastDpcProcessorDone
MiZeroPageFile
MiZeroPageFileFirstPage
MiZeroPageLogEntriesMergable
MiZeroPageMakeHot
MiZeroPageThread
MiZeroPageWorkMapping
MiZeroPageWrite
MiZeroPhysicalPage
MiZeroSectionObjectPointer
MiZeroThreadContending
MiZeroThreadContextPrepareToWait
MiZeroThreadContextSetExiting
MiZeroVaToActiveEntry
MiZeroWithUltraSpace
MicrocodeGetRecord
MicrocodeInitLogging
MicrocodeLogRegistry
MicrocodePrePatchCheckAndLogging
MicrocodeUpdate
MicrocodeValidate
MigrateOOBELanguageToInstallationLanguage
MinAsn1DecodeGeneralizedTime
MinAsn1DecodeInteger
MinAsn1DecodeTime
MinAsn1DecodeUtcTime
MinAsn1ExtractContent
MinAsn1ExtractParsedCertificatesFromSignedData
MinAsn1ExtractValues
MinAsn1ParseAlgorithmIdentifier
MinAsn1ParseAndDecodeRDNComponent
MinAsn1ParseCertificate
MinAsn1ParseECCSignature
MinAsn1ParseOIDSequence
MinAsn1ParsePublicKeyInfo
MinAsn1ParseRSAPublicKey
MinAsn1ParseSignedDataCertificatesEx
MinAsn1ParseSingleExtensionValue
MinCrypK_HashMemory
MinCryptDecodeHashAlgorithmIdentifier
MinCryptDecodeOid
MinCryptHashMemory
MinCryptVerifyCertificateWithPolicy2
MinCryptVerifySignedHash2
MincrypK_ParseCertificateChainWithPolicy
MincrypK_ParseCertificateChainWithPolicy2
MincryptAlloc
MincryptFree
MincryptFreePolicyInfo
MincryptGetLeafKeyFromPolicy
MincryptGetRootKeyFromPolicy
MincryptValidateBasicConstraints
MmAcceleratorCallbackRoutine
MmAccessFault
MmAcquireLoadLock
MmAcquireLoadLockShared
MmAddPhysicalMemory
MmAddPrivateDataToCrashDump
MmAddRangeToCrashDump
MmAddUnloadedDriverInformationToCrashDump
MmAddVerifierSpecialThunks
MmAddVerifierThunks
MmAdjustSecuredVirtualMemorySize
MmAdjustWorkingSetSize
MmAdjustWorkingSetSizeEx
MmAdvanceMdl
MmAllocateContiguousMemory
MmAllocateContiguousMemoryEx
MmAllocateContiguousMemorySpecifyCache
MmAllocateContiguousMemorySpecifyCacheNode
MmAllocateContiguousNodeMemory
MmAllocateDumpHibernateResources
MmAllocateIndependentPages
MmAllocateIndependentPagesEx
MmAllocateIsrStack
MmAllocateMappingAddress
MmAllocateMappingAddressEx
MmAllocateMdlForIoSpace
MmAllocateMemoryRanges
MmAllocateNodePagesForMdlEx
MmAllocateNonCachedMemory
MmAllocateNonChargedSecurePages
MmAllocatePagesForMdl
MmAllocatePagesForMdlEx
MmAllocatePartitionNodePagesForMdlEx
MmAllocateSecureKernelPages
MmAllocateSecurePoolMemory
MmAllocateUserStack
MmAllocateVirtualMemory
MmApplyVerifierToRunningImage
MmAreBaseSystemImagesWriteProtected
MmAreMdlPagesCached
MmAreMdlPagesLocked
MmAssignProcessToJob
MmAttachSession
MmBuildLargePages
MmBuildMdlForNonPagedPool
MmCallDllInitialize
MmCanFileBeTruncated
MmCanThreadFault
MmChangeImageProtection
MmChangeSectionBackingFile
MmChargeResources
MmCheckCachedPageStates
MmCheckForSafeExecution
MmCheckPartitionManagementSupported
MmCheckProcessShadow
MmCleanProcessAddressSpace
MmCommitDecommitSecuredMemory
MmCommitHotPatchTable
MmCommitSessionMappedView
MmConfigureGraphicsPtes
MmConfigurePrefetchSeekThreshold
MmContainingPageForReservedMapping
MmCopyMemory
MmCopyToCachedPage
MmCopyVirtualMemory
MmCreateCacheManagerSection
MmCreateKernelStack
MmCreateMdl
MmCreateMirror
MmCreatePartition
MmCreatePeb
MmCreateProcessAddressSpace
MmCreateSection
MmCreateSectionEx
MmCreateShadowMapping
MmCreateSpecialImageSection
MmCreateTeb
MmDbgCopyMemory
MmDbgMarkPfnModifiedWorker
MmDeleteKernelStack
MmDeleteProcessAddressSpace
MmDeleteProcessor
MmDeleteShadowMapping
MmDeleteTeb
MmDetachSession
MmDeterminePoolType
MmDisableModifiedWriteOfSection
MmDiscardDriverSection
MmDoesFileHaveUserWritableReferences
MmDuplicateMemory
MmEmptyAllWorkingSets
MmEnableOrDisableVerifierForDriver
MmEnforceWorkingSetLimit
MmEnoughMemoryForWrite
MmEnumerateAddressSpaceAndReferenceImages
MmEnumerateBadPages
MmEnumerateSystemImages
MmEnumerateSystemImagesShared
MmExtendSection
MmFillEtwHugeIoSpaceInformation
MmFillEtwNodeInformation
MmFindDataTableEntryByAddress
MmFlushAllPagesEx
MmFlushImageSection
MmFlushSection
MmFlushVirtualMemory
MmForceSectionClosed
MmForceSectionClosedEx
MmFreeAccessPfnBuffer
MmFreeBootRegistry
MmFreeContiguousMemory
MmFreeContiguousMemorySpecifyCache
MmFreeDriverInitialization
MmFreeIndependentPages
MmFreeIsrStack
MmFreeLoaderBlock
MmFreeMappingAddress
MmFreeMemoryRanges
MmFreeNonCachedMemory
MmFreeNonChargedSecurePages
MmFreePagesFromMdl
MmFreePagesFromMdlEx
MmFreePoolMemory
MmFreeSecureKernelPages
MmFreeSecurePoolMemory
MmFreeSystemCacheReserveView
MmFreeVirtualMemory
MmGetAvailablePages
MmGetAvailablePagesBelowPriority
MmGetAvailablePagesForPartitionObject
MmGetCacheAttribute
MmGetCacheAttributeEx
MmGetChannelInformation
MmGetContiguousPagesAllocated
MmGetControlAreaPartition
MmGetCurrentProcessorColor
MmGetDefaultPagePriority
MmGetDirectoryFrameFromProcess
MmGetDumpRange
MmGetEnclaveModuleList
MmGetFileNameForAddress
MmGetFileNameForSection
MmGetFileObjectForSection
MmGetHighestPhysicalPage
MmGetImageFileSignatureInformation
MmGetImageInformation
MmGetImageRetpolineCodePage
MmGetLoadedModuleImageAdditionalTablesAddress
MmGetLowestPhysicalPage
MmGetMaximumFileSectionSize
MmGetMaximumNonPagedPoolInBytes
MmGetMaximumUserAddress
MmGetMdlPagesAllocated
MmGetMinWsPagePriority
MmGetNextNode
MmGetNextSession
MmGetNodeChannelRanges
MmGetNodeFastLargePageCounts
MmGetNumberOfFreeSystemPtes
MmGetNumberOfPhysicalPages
MmGetNumberOfPhysicalPagesForPartitionObject
MmGetPageBadStatus
MmGetPageFileForCrashDump
MmGetPageFileInformation
MmGetPagedPoolCommitPointer
MmGetPeakCommitment
MmGetPfnDatabaseCommit
MmGetPhysicalAddress
MmGetPhysicalMemoryRanges
MmGetPhysicalMemoryRangesEx
MmGetPhysicalMemoryRangesEx2
MmGetProcessPartitionId
MmGetResidentAvailablePages
MmGetScpCfgFunctionOffset
MmGetSectionInformation
MmGetSectionRange
MmGetSectionStrongImageReference
MmGetSessionById
MmGetSessionIdEx
MmGetSharedCommit
MmGetSystemPageCounts
MmGetSystemPageTableCommit
MmGetSystemRoutineAddress
MmGetTotalCommitLimit
MmGetTotalCommittedPages
MmGetVaTypeForVerifier
MmGetVirtualForPhysical
MmGetWorkingSetLeafSize
MmGrowKernelStack
MmGrowKernelStackEx
MmHardFaultBytesRequired
MmHasImageBeenImportOptimized
MmIdentifyPhysicalMemory
MmImageSectionPagable
MmImageSupportsAlternateMachine
MmInPageKernelStack
MmInSwapProcess
MmInSwapVirtualAddresses
MmInSwapWorkingSet
MmInitSystem
MmInitSystemDll
MmInitializeHandBuiltProcess
MmInitializeHandBuiltProcess2
MmInitializeImageViewExtension
MmInitializeImageViewExtensionCfg
MmInitializeMemoryLimits
MmInitializeProcessAddressSpace
MmInitializeProcessor
MmInsertSecureImageActivePatch
MmInvalidateDumpAddresses
MmIsAddressValid
MmIsAddressValidEx
MmIsDriverSuspectForVerifier
MmIsDriverVerifying
MmIsDriverVerifyingByAddress
MmIsFileMapped
MmIsFileObjectAPagingFile
MmIsFileSectionActive
MmIsIoSpaceActive
MmIsMdlPageDanging
MmIsMdlPageLocked
MmIsNonPagedPoolNx
MmIsNonPagedSystemAddressValid
MmIsRecursiveIoFault
MmIsSessionAddress
MmIsThisAnNtAsSystem
MmIsVerifierApplicableToImage
MmIsVerifierEnabled
MmIsWriteErrorFatal
MmIssueMemoryListCommand
MmKasanCommitRegion
MmKcsanGetIgnoredRangeList
MmLinkJobProcess
MmLoadSystemImage
MmLoadSystemImageEx
MmLocateUnloadedDriver
MmLockLoadedDataTableEntry
MmLockLoadedDataTableEntryShared
MmLockLoadedModuleListExclusive
MmLockLoadedModuleListShared
MmLockPagableDataSection
MmLockPagableSectionByHandle
MmLockPhysicalPagesByVa
MmLockPreChargedPagedPool
MmLockRegistryRecoverySections
MmLogQueryCombineStats
MmLogSystemShareablePfnInfo
MmLowPowerEpochCallback
MmManageFaultRange
MmManagePartitionCharges
MmManagePartitionCombineMemory
MmManagePartitionCreateLargePages
MmManagePartitionGetMemoryEvents
MmManagePartitionInitialAddMemory
MmManagePartitionMemoryInformation
MmManagePartitionMoveMemory
MmManagePartitionNodeInformation
MmManagePartitionSetMemoryThresholds
MmManagePartitionUpdateAttributes
MmMapApiSetView
MmMapDriverTablePage
MmMapIoSpace
MmMapIoSpaceEx
MmMapLockedPages
MmMapLockedPagesSpecifyCache
MmMapLockedPagesWithReservedMapping
MmMapLockedRestartPages
MmMapMdl
MmMapMemoryDumpMdl
MmMapMemoryDumpMdlEx
MmMapMemoryDumpMdlEx2
MmMapProtectedKernelPage
MmMapUserAddressesToPage
MmMapViewInSessionSpace
MmMapViewInSessionSpaceEx
MmMapViewInSystemCache
MmMapViewInSystemSpace
MmMapViewInSystemSpaceEx
MmMapViewOfSection
MmMapViewOfSectionEx
MmMarkHiberPhase
MmMarkHiberRange
MmMarkImageForHiberPhase
MmMarkPhysicalMemoryAsBad
MmMarkPhysicalMemoryAsGood
MmMaximumUserSessionId
MmMdlPageContentsState
MmMdlPagesAreZero
MmNotifyProcessInSwapTrigger
MmObtainChargesToLockPagedPool
MmOutPageKernelStack
MmOutSwapProcess
MmOutSwapVirtualAddresses
MmOutSwapWorkingSet
MmPageEntireDriver
MmPageToNode
MmPerformMemoryListCommand
MmPrefetchForCacheManager
MmPrefetchPages
MmPrefetchPagesEx
MmPrefetchVirtualAddresses
MmPrefetchVirtualMemory
MmPrepareImagePagesForHotPatch
MmProbeAndLockPages
MmProbeAndLockPagesPrivate
MmProbeAndLockProcessPages
MmProbeAndLockSelectedPages
MmProcessAttachAllowed
MmProcessWorkingSetControl
MmProtectDriverSection
MmProtectMdlSystemAddress
MmProtectPool
MmProtectVirtualMemory
MmPurgeSection
MmQueryApiSetSchema
MmQueryBadAddresses
MmQueryCommitReleaseState
MmQueryMemoryListInformation
MmQueryMemoryRanges
MmQueryPfnList
MmQueryProcessWorkingSetSwapPages
MmQuerySystemMemoryInformation
MmQuerySystemSize
MmQuerySystemWorkingSetInformation
MmQueryTransitionPagesMadeColdCount
MmQueryVirtualMemory
MmQueryWorkingSetInformation
MmQuitNextSession
MmRaisePoolQuota
MmReadProcessPageTables
MmReapplyBootPatchImports
MmRegisterHotPatches
MmReleaseCommitForMemResetPages
MmReleaseDumpHibernateResources
MmReleaseLoadLock
MmReleaseLoadLockShared
MmReleaseOpaqueSwapSupport
MmReleaseResourceCharge
MmRelocatePfnList
MmRemoveExecuteGrants
MmRemovePhysicalMemory
MmRemoveSecureImageActivePatch
MmRemoveSystemCacheFromDump
MmReplaceImportEntriesForVerifier
MmReplaceImportEntry
MmReportParkedProcessors
MmReserveViewInSystemCache
MmResetDriverPaging
MmResourcesAvailable
MmReturnChargesToLockPagedPool
MmReturnPoolQuota
MmRotatePhysicalView
MmScrubMemory
MmSectionToSectionObjectPointers
MmSecureVirtualMemory
MmSecureVirtualMemoryAgainstWrites
MmSecureVirtualMemoryEx
MmSelectVsmEnclaveByAddress
MmSetAccessLogging
MmSetAddressRangeModified
MmSetAddressRangeModifiedEx
MmSetBankedSection
MmSetCommitReleaseEligibility
MmSetGraphicsPtes
MmSetMemoryPriorityProcess
MmSetMinimumAgeRate
MmSetPageProtection
MmSetPermanentCacheAttribute
MmSetPfnListInfo
MmSetPriorityVaRanges
MmSetTrimWhileAgingState
MmShutdownSystem
MmSizeOfMdl
MmSnapTriageDumpInformation
MmStealTopLevelPage
MmStoreAllocateVirtualMemory
MmStoreChargeResidentAvailableForRead
MmStoreCheckPagefiles
MmStoreDecommitVirtualMemory
MmStoreEvictComplete
MmStoreFlushOutstandingEvictions
MmStoreFreeVirtualMemory
MmStoreIsVirtualAddressPoisoned
MmStoreLogConsumedPoison
MmStoreLogDecompressionFailure
MmStoreLogRegionInPageError
MmStoreProbeAndLockPages
MmStoreRegister
MmStoreReleaseResidentAvailableForRead
MmStrongCodeGuaranteesEnforced
MmSynchronizeAddressPolicy
MmTriageActiveInLastCrash
MmTrimAllSystemPagableMemory
MmTrimFilePagesFromWorkingSets
MmTrimSection
MmTryIdentifyPage
MmUnloadSystemImage
MmUnlockLoadedDataTableEntry
MmUnlockLoadedDataTableEntryShared
MmUnlockLoadedModuleListExclusive
MmUnlockLoadedModuleListShared
MmUnlockPagableImageSection
MmUnlockPages
MmUnlockPhysicalPagesByVa
MmUnlockPreChargedPagedPool
MmUnmapIoSpace
MmUnmapLockedPages
MmUnmapLockedRestartPages
MmUnmapProtectedKernelPageRange
MmUnmapReservedMapping
MmUnmapViewInSessionSpace
MmUnmapViewInSystemCache
MmUnmapViewInSystemSpace
MmUnmapViewOfSection
MmUnsecureVirtualMemory
MmUpdateMdlTracker
MmUpdateMdlTrackerForMdlSwitch
MmUpdateOldWorkingSetPages
MmUpdateSlabRangeType
MmUpdateUserShadowStackValue
MmValidateUserCallTarget
MmVerifierTrimMemory
MmVerifyCallbackFunction
MmVerifyCallbackFunctionCheckFlags
MmVirtualAccessFault
MmWaitForCacheManagerPrefetch
MmWaitMultipleForCacheManagerPrefetch
MmWriteSystemImageTracepoint
MmWriteTriageInformation
MmWriteUnloadedDriverInformation
MmZeroPageFileAtShutdown
MmZeroPageWrite
MxBootDescriptorDepleted
MxBootSortConsumedPages
MxComputeFreeNodeDescriptorRequirements
MxComputePfnPagesNeeded
MxCopyPage
MxCreateFreePfns
MxCreatePfn
MxCreatePfnsForPtes
MxGetNextPage
MxGetPhase0Mapping
MxInitializeFreeNodeDescriptors
MxInsertEnclaveBootPages
MxInsertFreePages
MxInstallMoreMemory
MxMapPfnRange
MxMapVa
MxMarkActiveDriverBits
MxMarkValidMappings
MxPageAlwaysHot
MxReleaseFreeDescriptor
MxWalkFreeNodeDescriptors
MxZeroBootMappings
NLS_UPCASE
NormBuffer__Append
NormBuffer__AppendAndSortDecomposed
NormBuffer__AppendEx
NormBuffer__GetCurrentOutputChar
NormBuffer__GetLastChar
NormBuffer__Insert
NormBuffer__InsertAtBlockedLocation
NormBuffer__IsBlocked
NormBuffer__LastStartBase
NormBuffer__LastStartBasePair
NormBuffer__RecheckStartCombinations
NormBuffer__ReplaceLastStartBase
NormBuffer__ReplaceLastStartBasePair
NormBuffer__RewindOutputCharacter
NormBuffer__SortBeforeSameClass
NormalizationListEntry_Alloc
NormalizationList__InsertTail
NormalizationList__Lock
NormalizationList__Lookup
NormalizationList__Unlock
Normalization__AppendDecomposedChar
Normalization__CanCombinableCharactersCombine
Normalization__CanCombineWithStartBase
Normalization__CanCombineWithStartFirstPair
Normalization__GetCharacterInfo
Normalization__GetFirstDecomposedCharPlane0
Normalization__GetLastChar
Normalization__GetSecondAndThirdDecomposedCharPlane0
Normalization__GetSecondDecomposedCharPlane0
Normalization__GetThirdAndLastDecomposedCharPlane0
Normalization__GuessCharCountBySize
Normalization__IsNormalized
Normalization__LoadTables
Normalization__Normalize
Normalization__NormalizeCharacter
Normalization__PageLookup
Normalization__TableLookup
NtAcceptConnectPort
NtAccessCheck
NtAccessCheckAndAuditAlarm
NtAccessCheckByType
NtAccessCheckByTypeAndAuditAlarm
NtAccessCheckByTypeResultList
NtAccessCheckByTypeResultListAndAuditAlarm
NtAccessCheckByTypeResultListAndAuditAlarmByHandle
NtAcquireCrossVmMutant
NtAcquireProcessActivityReference
NtAddAtom
NtAddAtomEx
NtAddBootEntry
NtAddDriverEntry
NtAdjustGroupsToken
NtAdjustPrivilegesToken
NtAdjustTokenClaimsAndDeviceGroups
NtAlertMultipleThreadByThreadId
NtAlertResumeThread
NtAlertThread
NtAlertThreadByThreadId
NtAlertThreadByThreadIdEx
NtAllocateLocallyUniqueId
NtAllocateReserveObject
NtAllocateUserPhysicalPages
NtAllocateUserPhysicalPagesEx
NtAllocateUuids
NtAllocateVirtualMemory
NtAllocateVirtualMemoryEx
NtAlpcAcceptConnectPort
NtAlpcCancelMessage
NtAlpcConnectPort
NtAlpcConnectPortEx
NtAlpcCreatePort
NtAlpcCreatePortSection
NtAlpcCreateResourceReserve
NtAlpcCreateSectionView
NtAlpcCreateSecurityContext
NtAlpcDeletePortSection
NtAlpcDeleteResourceReserve
NtAlpcDeleteSectionView
NtAlpcDeleteSecurityContext
NtAlpcDisconnectPort
NtAlpcImpersonateClientContainerOfPort
NtAlpcImpersonateClientOfPort
NtAlpcOpenSenderProcess
NtAlpcOpenSenderThread
NtAlpcQueryInformation
NtAlpcQueryInformationMessage
NtAlpcRevokeSecurityContext
NtAlpcSendWaitReceivePort
NtAlpcSetInformation
NtApphelpCacheControl
NtAreMappedFilesTheSame
NtAssignProcessToJobObject
NtAssociateWaitCompletionPacket
NtCallEnclave
NtCallbackReturn
NtCancelIoFile
NtCancelIoFileEx
NtCancelSynchronousIoFile
NtCancelTimer
NtCancelTimer2
NtCancelWaitCompletionPacket
NtChangeProcessState
NtChangeThreadState
NtClearEvent
NtClose
NtCloseObjectAuditAlarm
NtCommitComplete
NtCommitEnlistment
NtCommitRegistryTransaction
NtCommitTransaction
NtCompactKeys
NtCompareObjects
NtCompareSigningLevels
NtCompareTokens
NtCompleteConnectPort
NtCompressKey
NtConnectPort
NtContinue
NtContinueEx
NtConvertBetweenAuxiliaryCounterAndPerformanceCounter
NtCopyFileChunk
NtCreateCpuPartition
NtCreateCrossVmEvent
NtCreateCrossVmMutant
NtCreateDebugObject
NtCreateDirectoryObject
NtCreateDirectoryObjectEx
NtCreateEnclave
NtCreateEnlistment
NtCreateEvent
NtCreateEventPair
NtCreateFile
NtCreateIRTimer
NtCreateIoCompletion
NtCreateIoRing
NtCreateJobObject
NtCreateJobSet
NtCreateKey
NtCreateKeyTransacted
NtCreateKeyTransacted_Stub
NtCreateKeyedEvent
NtCreateLowBoxToken
NtCreateMailslotFile
NtCreateMutant
NtCreateNamedPipeFile
NtCreatePagingFile
NtCreatePartition
NtCreatePort
NtCreatePrivateNamespace
NtCreateProcess
NtCreateProcessEx
NtCreateProcessStateChange
NtCreateProfile
NtCreateProfileEx
NtCreateRegistryTransaction
NtCreateResourceManager
NtCreateSection
NtCreateSectionEx
NtCreateSemaphore
NtCreateSymbolicLinkObject
NtCreateThread
NtCreateThreadEx
NtCreateThreadStateChange
NtCreateTimer
NtCreateTimer2
NtCreateToken
NtCreateTokenEx
NtCreateTransaction
NtCreateTransactionManager
NtCreateUserProcess
NtCreateWaitCompletionPacket
NtCreateWaitablePort
NtCreateWnfStateName
NtCreateWorkerFactory
NtDebugActiveProcess
NtDebugContinue
NtDelayExecution
NtDeleteAtom
NtDeleteBootEntry
NtDeleteDriverEntry
NtDeleteFile
NtDeleteKey
NtDeleteObjectAuditAlarm
NtDeletePrivateNamespace
NtDeleteValueKey
NtDeleteWnfStateData
NtDeleteWnfStateName
NtDeviceIoControlFile
NtDirectGraphicsCall
NtDisableLastKnownGood
NtDisplayString
NtDrawText
NtDuplicateObject
NtDuplicateToken
NtEnableLastKnownGood
NtEnumerateBootEntries
NtEnumerateDriverEntries
NtEnumerateKey
NtEnumerateSystemEnvironmentValuesEx
NtEnumerateTransactionObject
NtEnumerateValueKey
NtExtendSection
NtFilterBootOption
NtFilterToken
NtFilterTokenEx
NtFindAtom
NtFlushBuffersFile
NtFlushBuffersFileEx
NtFlushInstallUILanguage
NtFlushInstructionCache
NtFlushKey
NtFlushProcessWriteBuffers
NtFlushVirtualMemory
NtFlushWriteBuffer
NtFreeUserPhysicalPages
NtFreeVirtualMemory
NtFreezeRegistry
NtFreezeTransactions
NtFsControlFile
NtGetCachedSigningLevel
NtGetCompleteWnfStateSubscription
NtGetContextThread
NtGetCurrentProcessorNumber
NtGetCurrentProcessorNumberEx
NtGetDevicePowerState
NtGetEnvironmentVariableEx
NtGetMUIRegistryInfo
NtGetNextProcess
NtGetNextThread
NtGetNlsSectionPtr
NtGetNotificationResourceManager
NtGetWriteWatch
NtImpersonateAnonymousToken
NtImpersonateClientOfPort
NtImpersonateThread
NtInitializeEnclave
NtInitializeNlsFiles
NtInitializeRegistry
NtInitiatePowerAction
NtIsProcessInJob
NtIsSystemResumeAutomatic
NtIsUILanguageComitted
NtListenPort
NtLoadDriver
NtLoadEnclaveData
NtLoadKey
NtLoadKey2
NtLoadKey3
NtLoadKeyEx
NtLockFile
NtLockProductActivationKeys
NtLockRegistryKey
NtLockVirtualMemory
NtMakePermanentObject
NtMakeTemporaryObject
NtManageHotPatch
NtManagePartition
NtMapCMFModule
NtMapUserPhysicalPages
NtMapUserPhysicalPagesScatter
NtMapViewOfSection
NtMapViewOfSectionEx
NtModifyBootEntry
NtModifyDriverEntry
NtNotifyChangeDirectoryFile
NtNotifyChangeDirectoryFileEx
NtNotifyChangeKey
NtNotifyChangeMultipleKeys
NtNotifyChangeSession
NtOpenCpuPartition
NtOpenDirectoryObject
NtOpenEnlistment
NtOpenEvent
NtOpenEventPair
NtOpenFile
NtOpenIoCompletion
NtOpenJobObject
NtOpenKey
NtOpenKeyEx
NtOpenKeyTransacted
NtOpenKeyTransactedEx
NtOpenKeyTransactedEx_Stub
NtOpenKeyedEvent
NtOpenMutant
NtOpenObjectAuditAlarm
NtOpenPartition
NtOpenPrivateNamespace
NtOpenProcess
NtOpenProcessToken
NtOpenProcessTokenEx
NtOpenRegistryTransaction
NtOpenResourceManager
NtOpenSection
NtOpenSemaphore
NtOpenSession
NtOpenSymbolicLinkObject
NtOpenThread
NtOpenThreadToken
NtOpenThreadTokenEx
NtOpenTimer
NtOpenTransaction
NtOpenTransactionManager
NtPlugPlayControl
NtPowerInformation
NtPrePrepareComplete
NtPrePrepareEnlistment
NtPrepareComplete
NtPrepareEnlistment
NtPrivilegeCheck
NtPrivilegeObjectAuditAlarm
NtPrivilegedServiceAuditAlarm
NtPropagationComplete
NtPropagationFailed
NtProtectVirtualMemory
NtPssCaptureVaSpaceBulk
NtPulseEvent
NtQueryAttributesFile
NtQueryAuxiliaryCounterFrequency
NtQueryBootEntryOrder
NtQueryBootOptions
NtQueryDebugFilterState
NtQueryDefaultLocale
NtQueryDefaultUILanguage
NtQueryDirectoryFile
NtQueryDirectoryFileEx
NtQueryDirectoryObject
NtQueryDriverEntryOrder
NtQueryEaFile
NtQueryEnvironmentVariableInfoEx
NtQueryEvent
NtQueryFullAttributesFile
NtQueryInformationAtom
NtQueryInformationByName
NtQueryInformationCpuPartition
NtQueryInformationEnlistment
NtQueryInformationFile
NtQueryInformationJobObject
NtQueryInformationPort
NtQueryInformationProcess
NtQueryInformationResourceManager
NtQueryInformationThread
NtQueryInformationToken
NtQueryInformationTransaction
NtQueryInformationTransactionManager
NtQueryInformationWorkerFactory
NtQueryInstallUILanguage
NtQueryIntervalProfile
NtQueryIoCompletion
NtQueryIoRingCapabilities
NtQueryKey
NtQueryLicenseValue
NtQueryMultipleValueKey
NtQueryMutant
NtQueryObject
NtQueryOpenSubKeys
NtQueryOpenSubKeysEx
NtQueryPerformanceCounter
NtQueryPortInformationProcess
NtQueryQuotaInformationFile
NtQuerySection
NtQuerySecurityAttributesToken
NtQuerySecurityObject
NtQuerySecurityPolicy
NtQuerySemaphore
NtQuerySymbolicLinkObject
NtQuerySystemEnvironmentValue
NtQuerySystemEnvironmentValueEx
NtQuerySystemInformation
NtQuerySystemInformationEx
NtQuerySystemTime
NtQueryTimer
NtQueryTimerResolution
NtQueryValueKey
NtQueryVirtualMemory
NtQueryVolumeInformationFile
NtQueryWnfStateData
NtQueryWnfStateNameInformation
NtQueueApcThread
NtQueueApcThreadEx
NtQueueApcThreadEx2
NtRaiseException
NtRaiseHardError
NtReadFile
NtReadFileScatter
NtReadOnlyEnlistment
NtReadRequestData
NtReadVirtualMemory
NtReadVirtualMemoryEx
NtRecoverEnlistment
NtRecoverResourceManager
NtRecoverTransactionManager
NtRegisterProtocolAddressInformation
NtRegisterThreadTerminatePort
NtReleaseKeyedEvent
NtReleaseMutant
NtReleaseSemaphore
NtReleaseWorkerFactoryWorker
NtRemoveIoCompletion
NtRemoveIoCompletionEx
NtRemoveProcessDebug
NtRenameKey
NtRenameTransactionManager
NtReplaceKey
NtReplacePartitionUnit
NtReplyPort
NtReplyWaitReceivePort
NtReplyWaitReceivePortEx
NtReplyWaitReplyPort
NtRequestPort
NtRequestWaitReplyPort
NtResetEvent
NtResetWriteWatch
NtRestoreKey
NtResumeProcess
NtResumeThread
NtRevertContainerImpersonation
NtRollbackComplete
NtRollbackEnlistment
NtRollbackRegistryTransaction
NtRollbackTransaction
NtRollforwardTransactionManager
NtSaveKey
NtSaveKeyEx
NtSaveMergedKeys
NtSecureConnectPort
NtSerializeBoot
NtSetBootEntryOrder
NtSetBootOptions
NtSetCachedSigningLevel
NtSetCachedSigningLevel2
NtSetContextThread
NtSetDebugFilterState
NtSetDefaultHardErrorPort
NtSetDefaultLocale
NtSetDefaultUILanguage
NtSetDriverEntryOrder
NtSetEaFile
NtSetEvent
NtSetEventBoostPriority
NtSetEventEx
NtSetHighEventPair
NtSetHighWaitLowEventPair
NtSetIRTimer
NtSetInformationCpuPartition
NtSetInformationDebugObject
NtSetInformationEnlistment
NtSetInformationFile
NtSetInformationIoRing
NtSetInformationJobObject
NtSetInformationKey
NtSetInformationObject
NtSetInformationProcess
NtSetInformationResourceManager
NtSetInformationSymbolicLink
NtSetInformationThread
NtSetInformationToken
NtSetInformationTransaction
NtSetInformationTransactionManager
NtSetInformationVirtualMemory
NtSetInformationWorkerFactory
NtSetIntervalProfile
NtSetIoCompletion
NtSetIoCompletionEx
NtSetLdtEntries
NtSetLowEventPair
NtSetLowWaitHighEventPair
NtSetQuotaInformationFile
NtSetSecurityObject
NtSetSystemEnvironmentValue
NtSetSystemEnvironmentValueEx
NtSetSystemInformation
NtSetSystemPowerState
NtSetSystemTime
NtSetThreadExecutionState
NtSetTimer
NtSetTimer2
NtSetTimerEx
NtSetTimerResolution
NtSetUuidSeed
NtSetValueKey
NtSetVolumeInformationFile
NtSetWnfProcessNotificationEvent
NtShutdownSystem
NtShutdownWorkerFactory
NtSignalAndWaitForSingleObject
NtSinglePhaseReject
NtStartProfile
NtStopProfile
NtSubmitIoRing
NtSubscribeWnfStateChange
NtSuspendProcess
NtSuspendThread
NtSystemDebugControl
NtTerminateEnclave
NtTerminateJobObject
NtTerminateProcess
NtTerminateThread
NtTestAlert
NtThawRegistry
NtThawTransactions
NtTraceControl
NtTraceEvent
NtTranslateFilePath
NtUmsThreadYield
NtUnloadDriver
NtUnloadKey
NtUnloadKey2
NtUnloadKeyEx
NtUnlockFile
NtUnlockVirtualMemory
NtUnmapViewOfSection
NtUnmapViewOfSectionEx
NtUnsubscribeWnfStateChange
NtUpdateWnfStateData
NtVdmControl
NtWaitForAlertByThreadId
NtWaitForDebugEvent
NtWaitForKeyedEvent
NtWaitForMultipleObjects
NtWaitForMultipleObjects32
NtWaitForSingleObject
NtWaitForWorkViaWorkerFactory
NtWaitHighEventPair
NtWaitLowEventPair
NtWorkerFactoryWorkerReady
NtWriteFile
NtWriteFileGather
NtWriteRequestData
NtWriteVirtualMemory
NtYieldExecution
NtdllRunOnceInitMuiCrits
NtosSecureKernelImportBugcheck
OBJECT_HEADER_TO_AUDIT_INFO
OBJECT_HEADER_TO_HANDLE_INFO
OBJECT_HEADER_TO_HANDLE_REVOCATION_INFO
OBJECT_HEADER_TO_PROCESS_INFO
OBJECT_HEADER_TO_QUOTA_INFO
OBP_GET_SILO_ROOT_DIRECTORY_FROM_SILO
ObAssignObjectSecurityDescriptor
ObAssignSecurity
ObAuditInheritedHandleProcedure
ObCaptureObjectStateForDuplication
ObCheckActiveHandles
ObCheckCreateObjectAccess
ObCheckObjectAccess
ObCheckRefTraceProcess
ObCleanupSecurityDescriptor
ObCleanupSiloState
ObClearProcessDeviceMap
ObCloseHandle
ObCloseHandleTableEntry
ObCompleteObjectDuplication
ObCreateKernelObjectsSD
ObCreateObject
ObCreateObjectEx
ObCreateObjectType
ObCreateObjectTypeEx
ObCreateSiloRootDirectory
ObCreateSymbolicLink
ObDeassignSecurity
ObDeleteCapturedInsertInfo
ObDereferenceDeviceMap
ObDereferenceObject
ObDereferenceObjectDeferDelete
ObDereferenceObjectDeferDeleteWithTag
ObDereferenceObjectEx
ObDereferenceObjectExWithTag
ObDereferenceProcessHandleTable
ObDereferenceSecurityDescriptor
ObDestroyHandleRevocationBlock
ObDisableEtwReferenceTrace
ObDuplicateObject
ObEnableEtwReferenceTrace
ObEnumerateObjectsByType
ObFastDereferenceObject
ObFastDereferenceObjectDeferDelete
ObFastReferenceObject
ObFastReferenceObjectLocked
ObFastReplaceObject
ObFindHandleForObject
ObGetAssociatedWaitObject
ObGetCurrentIrql
ObGetFilterVersion
ObGetHandleInformation
ObGetHandleInformationEx
ObGetObjectInformation
ObGetObjectSecurity
ObGetObjectType
ObGetProcessHandleCount
ObGetSiloRootDirectoryPath
ObHandleRevocationBlockAddObject
ObInheritObjectHandle
ObInitProcess
ObInitServerSilo
ObInitSystem
ObInitializeFastReference
ObInitializeProcessor
ObInsertObject
ObInsertObjectEx
ObIsDosDeviceLocallyMapped
ObIsKernelHandle
ObKillProcess
ObLogSecurityDescriptor
ObMakeTemporaryObject
ObNormalizeHandleValue
ObOpenObjectByName
ObOpenObjectByNameEx
ObOpenObjectByPointer
ObOpenObjectByPointerWithTag
ObQueryDeviceMapInformation
ObQueryNameInfo
ObQueryNameString
ObQueryNameStringMode
ObQueryObjectAuditingByHandle
ObQueryRefTraceInformation
ObQuerySecurityDescriptorInfo
ObQuerySecurityObject
ObQueryTypeInfo
ObQueryTypeName
ObReferenceFileObjectForWrite
ObReferenceObjectByHandle
ObReferenceObjectByHandleWithTag
ObReferenceObjectByName
ObReferenceObjectByNameEx
ObReferenceObjectByPointer
ObReferenceObjectByPointerWithTag
ObReferenceObjectExWithTag
ObReferenceObjectSafe
ObReferenceObjectSafeWithTag
ObReferenceProcessHandleTable
ObReferenceSecurityDescriptor
ObRegisterCallbacks
ObReleaseDuplicateInfo
ObReleaseObjectSecurity
ObReleaseObjectSecurityEx
ObRetagReferences
ObRevokeHandles
ObSetHandleAttributes
ObSetProcessDeviceMap
ObSetRefTraceInformation
ObSetSecurityDescriptorInfo
ObSetSecurityObjectByPointer
ObShutdownSystem
ObUnRegisterCallbacks
ObWaitForMultipleObjects
ObWaitForSingleObject
ObfDereferenceObject
ObfDereferenceObjectWithTag
ObfReferenceObject
ObfReferenceObjectWithTag
ObpAdjustAccessMask
ObpAdjustCreatorAccessState
ObpAllocateAndQuerySecurityDescriptorInfo
ObpAllocateObject
ObpAssignSecurity
ObpAuditObjectAccess
ObpCallPostOperationCallbacks
ObpCallPreOperationCallbacks
ObpCaptureBoundaryDescriptor
ObpCaptureHandleInformation
ObpCaptureHandleInformationEx
ObpCaptureObjectCreateInformation
ObpCaptureObjectName
ObpChargeQuotaForObject
ObpCheckDuplicateEntries
ObpCheckObjectReference
ObpCheckTraverseAccess
ObpCloseDirectoryObject
ObpCloseHandle
ObpCompareEntryLevel1
ObpCompareEntryLevel2
ObpCompareNamespaceEntry
ObpCreateDefaultObjectTypeSD
ObpCreateDirectoryObject
ObpCreateDosDevicesDirectory
ObpCreateHandle
ObpCreateSymbolicLinkName
ObpCreateTypeArray
ObpDecrementHandleCount
ObpDeferObjectDeletion
ObpDeferPushRefDerefInfo
ObpDeleteDeviceMap
ObpDeleteDirectoryName
ObpDeleteDirectoryObject
ObpDeleteNameCheck
ObpDeleteSymbolicLink
ObpDeleteSymbolicLinkName
ObpDereferenceCurrentDeviceMap
ObpDereferenceNamedObject
ObpDeregisterObject
ObpDestroyStackAndObjectTables
ObpDestroyTypeArray
ObpDirectoryTeardownCallback
ObpEnumFindHandleProcedure
ObpFastReplenishReference
ObpFilterOperation
ObpFreeObject
ObpFreeObjectNameBuffer
ObpFreeWorkItemBlock
ObpGetDosDevicesProtection
ObpGetIntegrityLevel
ObpGetObjectRefInfo
ObpGetObjectSecurity
ObpGetSilosRootDirectory
ObpGetTraceIndex
ObpGrantAccess
ObpHandleRevocationBlockRemoveInsertedObject
ObpHandleRevocationBlockRemoveObject
ObpHashBoundaryFunction
ObpIncrPointerCount
ObpIncrPointerCountEx
ObpIncrementHandleCountEx
ObpInitInfoBlockOffsets
ObpInitObjectTypeSD
ObpInitStackAndObjectTables
ObpInitStackTrace
ObpInitializeRootNamespace
ObpInsertCallbackByAltitude
ObpInsertDirectoryEntry
ObpInsertHandleCount
ObpInsertOrLocateNamedObject
ObpIsKernelHandle
ObpIsObjectPoolTagTraced
ObpIsUnsecureName
ObpLockChildDirectory
ObpLockDirectoryExclusive
ObpLockDirectoryShared
ObpLockHandleDataBaseEntry
ObpLockObjectTypeExclusive
ObpLookupDirectoryEntry
ObpLookupNamespaceEntry
ObpLookupObjectName
ObpMarkDirectoryObjectsTemporary
ObpParseSymbolicLinkEx
ObpPreInterceptHandleDuplicate
ObpProcessRemoveObjectDpcWorker
ObpProcessRemoveObjectQueue
ObpPushRefDerefInfo
ObpPushStackInfo
ObpPushStackInfoQueue
ObpReferenceCurrentDeviceMap
ObpReferenceDeviceMapFastRef
ObpReferenceNamedObject
ObpReferenceObjectByHandleWithTag
ObpReferenceProcessObjectByHandle
ObpReferenceSecurityDescriptor
ObpReferenceSecurityDescriptorSlow
ObpRegisterObject
ObpRegisterPrivateNamespace
ObpReleaseLookupContext
ObpRemoveNamespaceFromTable
ObpRemoveObjectRoutine
ObpSetCurrentProcessDeviceMap
ObpSetDeviceMap
ObpSetObjectAuditInfo
ObpShutdownCloseHandleProcedure
ObpShutdownTraceLoggingProvider
ObpStartRuntimeStackTrace
ObpStopRuntimeStackTrace
ObpTraceObjectReferenceIfActive
ObpUnlockDirectory
ObpUnlockHandleDatabaseEntry
ObpUnlockObjectType
ObpVerifyAccessToBoundaryEntry
ObpVerifyCreatorAccessCheck
OpenGlobalizationUserSettingsKey
PPmHeteroHgsUpdateOrderValue
PcAllocateChannelAdapter
PcFlushChannel
PcGetChannelAdapter
PcInitializeDmaHW
PcMapTransfer
PcReadCounter
PcValidateDmaAdapterRequest
PcValidateDmaScatterTransfer
PcwAddInstance
PcwCloseInstance
PcwCreateInstance
PcwRegister
PcwUnregister
PdcAcquireRwLockExclusive
PdcAcquireRwLockExclusive2
PdcAllocate
PdcCloseEvent
PdcCreateWatchdogAroundClientCall
PdcInitializeETW
PdcPoBlockSessionSwitchEx
PdcPoCurrentPdcPhase
PdcPoLidReliabilityUpdateCallback
PdcPoLowPower
PdcPoNetworkResiliency
PdcPoPerfOverride
PdcPoPpmApplyProfile
PdcPoPpmRegisterProfiles
PdcPoPpmResetProfile
PdcPoRecordButton
PdcPoReportButton
PdcPoReportLidState
PdcPoResiliencyClient
PdcPoSetPowerAction
PdcPoSleepStudyHelperSetPhaseActive
PdcPoVerifyActionPolicy
PdcPoVerifyPowerState
PdcPortOpenCommon
PdcPortSendMessageSynchronously
PdcReleaseRwLockExclusive
PdcReleaseRwLockExclusive2
PdcResetEvent
PdcTaskClientRegister
PdcTaskClientRequest
PdcWaitForEvent
PdcpPortReleaseResources
PdcpResizeDiagnosticContext
Pdcv2ActivationClientActivate
Pdcv2ActivationClientDeactivate
Pdcv2ActivationClientRegister
Pdcv2ActivationClientRenewActivation
Pdcv2EventWrite_ACTIVATION_CLIENT_ACTIVATE
Pdcv2EventWrite_ACTIVATION_CLIENT_CALLBACK
Pdcv2EventWrite_ACTIVATION_CLIENT_DEACTIVATE
Pdcv2EventWrite_ACTIVATION_CLIENT_REGISTER
Pdcv2EventWrite_ACTIVATION_CLIENT_RENEW_ACTIVATION
Pdcv2pActivationClientCallback
Pdcv2pValidateActivationParameters
Pdcv2pValidateExtraActivationParameters
PerfDiagInitialize
PerfDiagpBootSystemProxyCallback
PerfDiagpBootUserProxyCallback
PerfDiagpInitializeLoggerInfo
PerfDiagpIsTracingAllowed
PerfDiagpProxyWorker
PerfDiagpRequestState
PerfDiagpSaveActiveDCLLogFileName
PerfDiagpSecondaryLogonProxyCallback
PerfDiagpShutdownProxyCallback
PerfDiagpStartPerfDiagLogger
PerfDiagpUpdatePerfDiagLoggerEnableFlags
PerfInfoLogInterrupt
PerfInfoLogInterruptHv
PerfInfoLogIpiReceive
PerfInfoLogIpiSend
PerfInfoLogSysCallEntry
PerfInfoLogSysCallExit
PerfInfoLogUnexpectedInterrupt
PerfInfoLogVirtualAlloc
PerfInfoLogVirtualFree
PerfLogExecutiveResourceAcquire
PerfLogExecutiveResourceInitialize
PerfLogExecutiveResourceSetOwnerPointer
PerfLogExecutiveResourceWait
PerfLogImageLoad
PerfLogImageUnload
PerfLogSpinLockAcquire
PerfLogSpinLockRelease
PeriodicCaptureStateTimerCallback
PfCalculateProcessHash
PfCheckDeprioritizeFile
PfCheckDeprioritizeImage
PfDeletePartition
PfFbBufferListAllocate
PfFbBufferListAllocateTemporary
PfFbBufferListCleanup
PfFbBufferListFlushStandby
PfFbBufferListInitialize
PfFbBufferListInsertInFree
PfFbBufferListShutdown
PfFbBufferListUpdateMax
PfFbLogEntryComplete
PfFbLogEntryReserve
PfFileInfoNotify
PfGenerateTrace
PfGetCompletedTrace
PfHardFaultLog
PfHardFaultRecord
PfInitializeSuperfetch
PfIoPowerEventNotify
PfIsProcessExitingInNonSystemPartition
PfLockExclusiveAcquire
PfLockExclusiveRelease
PfLockSharedAcquire
PfLockSharedRelease
PfLockSharedTryAcquire
PfLogEvent
PfLogFileDataAccess
PfLogForegroundProcess
PfPowerActionNotify
PfPrefetchRequestPrepareForVerify
PfPrefetchRequestVerify
PfPrefetchRequestVerifyPath
PfPrefetchRequestVerifyRanges
PfProcessCreateNotification
PfProcessExitNotification
PfQuerySuperfetchInformation
PfResourceExclusiveAcquire
PfSetSuperfetchInformation
PfSnActivateTrace
PfSnActiveTraceGetNext
PfSnAddProcessTrace
PfSnAllocateEnablePrefetcherTimer
PfSnAltProfileCleanup
PfSnAltProfileFindByProcess
PfSnAltProfileFindByScenarioId
PfSnAltProfileTreeCompareByProcess
PfSnAltProfileTreeCompareByScenarioId
PfSnAppLaunchScenarioControl
PfSnArrayGrow
PfSnAsyncContextCleanup
PfSnAsyncContextInitialize
PfSnAsyncPrefetchStep
PfSnAsyncPrefetchWorker
PfSnBeginAppLaunch
PfSnBeginBootPhase
PfSnBeginScenario
PfSnBeginTrace
PfSnBuildDumpFromTrace
PfSnCalculateScenarioNameAndHash
PfSnCaptureParamBlockString
PfSnCheckActionsNeeded
PfSnCheckModernApp
PfSnCheckScenario
PfSnCleanupPrefetchHeader
PfSnCleanupPrefetchSectionInfo
PfSnCleanupTrace
PfSnDeactivateTrace
PfSnEnablePrefetcherTimerRoutine
PfSnEndProcessTrace
PfSnEndTrace
PfSnEndTraceWorkerThreadRoutine
PfSnFailProcessTrace
PfSnFindString
PfSnGetAppVersion
PfSnGetCompletedTrace
PfSnGetFileInformation
PfSnGetNLLogEntry
PfSnGetPrefetchInstructions
PfSnGetSectionObject
PfSnGetUnsafeProcessParameters
PfSnHashUnsafeUnicodeString
PfSnInitializePrefetcher
PfSnIsHostingApplication
PfSnIsSectionPrefetchedAfterPhase
PfSnIsVolumeMounted
PfSnLogAsyncWorker
PfSnLogEndTrace
PfSnLogGetReadListsStart
PfSnLogGetReadListsStop
PfSnLogHelper
PfSnLogIdentifier
PfSnLogOpenVolumesForPrefetch
PfSnLogPageFault
PfSnLogPageFaultCommon
PfSnLogPrefetchMetadata
PfSnLogPrefetchSectionsStart
PfSnLogPrefetchSectionsStop
PfSnLogScenarioDecision
PfSnLogScenarioMeasures
PfSnLogStreamCreate
PfSnLogVolumeCreate
PfSnNameQueryWorker
PfSnNameRemove
PfSnNameRemoveAll
PfSnOpenVolumesForPrefetch
PfSnOperationProcess
PfSnParametersRead
PfSnParametersSetDefaults
PfSnParametersVerify
PfSnParsePrefetchParam
PfSnPopulateReadList
PfSnPowerBoost
PfSnPowerBoostDpc
PfSnPowerBoostInitialize
PfSnPowerBoostUpdate
PfSnPowerBoostWorker
PfSnPreallocatePrefetchHeader
PfSnPrefetchCacheCtxInitialize
PfSnPrefetchCacheCtxStart
PfSnPrefetchCacheEntryGet
PfSnPrefetchCacheEntryUpdate
PfSnPrefetchFileMetadata
PfSnPrefetchMetadata
PfSnPrefetchScenario
PfSnPrefetchSections
PfSnPrefetchSectionsCleanup
PfSnQueryPrefetcherInformation
PfSnQueryVolumeInfo
PfSnQueueEnablePrefetcherTimer
PfSnReferenceProcessTrace
PfSnRemoveProcessTrace
PfSnScanCommandLine
PfSnScenarioAlloc
PfSnScenarioFree
PfSnSectionInfoCleanupWorkItem
PfSnSetAltPrefetchParam
PfSnSetPrefetcherInformation
PfSnStartTraceTimer
PfSnTraceBufferAllocate
PfSnTraceGetLogEntry
PfSnTraceTimerRoutine
PfSnTracingStateDpcRoutine
PfSnTracingStateExWorkerRoutine
PfSnUpdatePrefetcherFlags
PfSnVolumeCheckIsSdBus
PfSnVolumeCheckSeekPenalty
PfSnVolumeKeyQuery
PfTAccessTracingCheck
PfTAccessTracingCleanup
PfTAccessTracingInitialize
PfTAccessTracingStart
PfTAllocateBuffers
PfTCleanup
PfTCleanupBuffers
PfTCreateTraceDump
PfTFiNotifyFileInfoDeleteCallback
PfTFiNotifyFileStreamCreateCallback
PfTFiNotifyVolumeCreateCallback
PfTFreeBufferList
PfTFreeTraceDump
PfTFullEventListAdd
PfTGenerateTrace
PfTGetFreeBuffer
PfTInitialize
PfTLbInitialize
PfTLoggingWorker
PfTReplaceCurrentBuffer
PfTSetTraceWorkerPriority
PfTSetTracingPriority
PfTStart
PfTTraceListAdd
PfTTraceListFree
PfTTraceListTrim
PfVerifyScenarioBuffer
PfVerifyScenarioId
PfVerifyTraceBuffer
PfVolumeSupportedForPrefetch
PfpAvailablePagesForPrefetch
PfpCheckPrefetchAbort
PfpCopyEvent
PfpCopyUserPfnPrioRequest
PfpCreateEvent
PfpCreateEventInternal
PfpDeprioritizeOldPagesInWs
PfpEventHandleFullBuffer
PfpEventHandleOutOfBuffers
PfpFileBuildReadList
PfpFileBuildReadSupport
PfpFileCheckAttributesForPrefetch
PfpFlushBuffers
PfpFlushEventBuffers
PfpGetParameter
PfpLogApplicationEvent
PfpLogEventRequest
PfpLogPageAccess
PfpLogScenarioEventCallback
PfpMemoryListQuery
PfpMemoryRangesQuery
PfpOpenHandleClose
PfpOpenHandleCreate
PfpOpenHandleInitialize
PfpParametersInitialize
PfpParametersRead
PfpParametersWatcher
PfpPartitionAccessTraceLockAcquire
PfpPartitionAccessTraceLockRelease
PfpPartitionAllocateState
PfpPartitionCanDoAccessLoggingCallback
PfpPartitionCanDoNameLoggingCallback
PfpPartitionCleanup
PfpPartitionCreate
PfpPartitionDereferenceParent
PfpPartitionFindByHandle
PfpPartitionFindOrCreate
PfpPartitionFromParent
PfpPartitionGetFirst
PfpPartitionGetNext
PfpPartitionGlobalContextInitialize
PfpPartitionInitialize
PfpPartitionInsertToGlobals
PfpPartitionIterate
PfpPartitionIterateAndCheckCanAnyDoAccessLogging
PfpPartitionLogEventCallback
PfpPartitionReferenceParentSafe
PfpPartitionReferenceParentSafeByProcess
PfpPartitionRemoveFromGlobals
PfpPartitionRundownProtectionAcquire
PfpPartitionRundownProtectionRelease
PfpPartitionToParent
PfpPfnPrioRequest
PfpPowerActionDpcRoutine
PfpPowerActionSleepSystemPhaseCallback
PfpPowerActionStartScenarioTracingCallback
PfpPrefetchDirectoryStream
PfpPrefetchEntireDirectory
PfpPrefetchFiles
PfpPrefetchFilesTrickle
PfpPrefetchPrivatePages
PfpPrefetchRequest
PfpPrefetchRequestPatchOffsets
PfpPrefetchRequestPerform
PfpPrefetchSharedCleanup
PfpPrefetchSharedConflictNotifyEnd
PfpPrefetchSharedConflictNotifyStart
PfpPrefetchSharedDeref
PfpPrefetchSharedInitialize
PfpPrefetchSharedStart
PfpPrefetchVolumesCleanup
PfpPrivSourceAdd
PfpPrivSourceEnum
PfpProcessScenarioPhase
PfpQueryFileExtentsRequest
PfpQueryGpuUtilization
PfpQueryScenarioInformation
PfpReadSupportCleanup
PfpReadSupportInitialize
PfpRepurposeNameLoggingTrace
PfpReturnAccessBuffer
PfpRpCHashAddEntries
PfpRpCHashDeleteEntries
PfpRpCHashEmpty
PfpRpCHashGrow
PfpRpControlRequest
PfpRpControlRequestCopy
PfpRpControlRequestPerform
PfpRpControlRequestReset
PfpRpControlRequestUpdate
PfpRpControlRequestVerify
PfpRpFileKeyUpdate
PfpRpLogDeprioEvent
PfpRpRehashIfNeeded
PfpRpShutdown
PfpRpStart
PfpScenCtxInitialize
PfpScenCtxPrefetchAbortSet
PfpScenCtxPrefetchStateSet
PfpScenCtxPrefetchWait
PfpScenCtxQueryScenarioInformation
PfpScenCtxScenarioSet
PfpScenCtxServiceThreadSet
PfpScenCtxStart
PfpScenCtxWaiterTimedOut
PfpSectInfoHandleFullBuffer
PfpSectInfoHandleOutOfBuffers
PfpServiceMainThreadBoost
PfpServiceMainThreadBoostPrep
PfpServiceMainThreadUnboost
PfpSetBaseTime
PfpSetParameter
PfpSourceBuildVaArray
PfpSourceGetPrefetchSupport
PfpStartLoggingHardFaultEvents
PfpTraceLogPartitionId
PfpTraceLogPfPartitionId
PfpUpdateRepurposedByPrefetch
PfpVirtualQuery
PfpVolumeOpenAndVerify
PfpVolumePrefetchMetadata
PfxFindPrefix
PfxInitialize
PfxInsertPrefix
PfxRemovePrefix
Phase1Initialization
Phase1InitializationDiscard
Phase1InitializationIoReady
PiAllocateDeviceObjectList
PiAuAllocateAndInitializeSid
PiAuCheckClientInteractive
PiAuCheckTokenMembership
PiAuCreateLocalSystemSecurityObject
PiAuCreateStandardSecurityObject
PiAuCreateUserSids
PiAuDoesClientHaveAccess
PiAuDoesClientHavePrivilege
PiAuFreeUserSids
PiAuGetDriverDataDirectorySecurityObject
PiAuGetServiceStateSecurityObject
PiAuGetStateDirectorySecurityObject
PiAuIsLocalSystem
PiAuVerifyAccessToObject
PiAuditDeviceEnableDisableAction
PiAuditDeviceEnableDisableRequest
PiAuditDeviceOperation
PiAuditDeviceStart
PiBuildAndOpenDeviceDirectoryPath
PiBuildDeviceNodeInstancePath
PiCMCaptureCreateDeviceInputData
PiCMCaptureDeviceListInputData
PiCMCaptureEnumerateInputData
PiCMCaptureInterfaceAliasInputData
PiCMCaptureInterfaceListInputData
PiCMCaptureObjectInputData
PiCMCaptureProblemInputData
PiCMCapturePropertyInputData
PiCMCaptureRegisterInterfaceInputData
PiCMCaptureRegistryInputData
PiCMCaptureRegistryPropertyInputData
PiCMConvertDeviceKeyType
PiCMConvertDeviceListFilters
PiCMConvertRegistryProperty
PiCMCreateDevice
PiCMCreateObject
PiCMDeleteClassKey
PiCMDeleteDevice
PiCMDeleteDeviceInterfaceKey
PiCMDeleteDeviceKey
PiCMDeleteDeviceWorker
PiCMDeleteObject
PiCMDeviceAction
PiCMDispatch
PiCMDuplicateRegistryHandle
PiCMEnumerateSubKeys
PiCMFastIoDeviceDispatch
PiCMGenerateDeviceInstance
PiCMGetDeviceDepth
PiCMGetDeviceIdList
PiCMGetDeviceInterfaceAlias
PiCMGetDeviceInterfaceList
PiCMGetDeviceStatus
PiCMGetObjectList
PiCMGetObjectPropertyKeys
PiCMGetRelatedDeviceInstance
PiCMHandleIoctl
PiCMMandatoryFilterCallback
PiCMOpenClassKey
PiCMOpenDeviceInterfaceKey
PiCMOpenDeviceKey
PiCMOpenObjectKey
PiCMQueryRemove
PiCMRegisterDeviceInterface
PiCMReleaseObjectInputData
PiCMReleasePropertyInputData
PiCMReleaseRegistryPropertyInputData
PiCMReturnBasicResultData
PiCMReturnBufferResultData
PiCMReturnDepthResultData
PiCMReturnHandleResultData
PiCMReturnStatusResultData
PiCMSetDeviceProblem
PiCMSetObjectProperty
PiCMSetProblem
PiCMSetRegistryProperty
PiCMUnregisterDeviceInterface
PiCMValidateDeviceInstance
PiCheckRemovalPreconditions
PiClearDeviceObjectList
PiCollapseEnumRequests
PiCollapseRebalanceRequests
PiCompareDDBCacheEntries
PiConfigureDevice
PiControlCopyUserModeCallersBuffer
PiControlFreeUserModeCallersBuffer
PiControlGetDeviceDepth
PiControlGetDeviceInterfaceEnabled
PiControlGetDevicePowerData
PiControlGetDeviceStack
PiControlGetPropertyData
PiControlGetRelatedDevice
PiControlGetSetDeviceStatus
PiControlMakeUserModeCallersCopy
PiControlQueryDeviceRelations
PiCreateDirectoryPath
PiCreateDriverDataDirectoryRoot
PiCreateDriverRedirectedStateKey
PiCreateDriverSwDeviceCallback
PiCreateDriverSwDevices
PiCreateRegistryPath
PiCreateServiceKeyUnderPath
PiCreateServiceStateKey
PiCslInitialize
PiCslIsConsoleLocked
PiDaDispatch
PiDaDriverEntry
PiDaFastIoDispatch
PiDcAllocateGenericTableEntry
PiDcCompareUpdateProperties
PiDcContainerRequiresConfiguration
PiDcFreeGenericTableEntry
PiDcGenerateConfigNotificationIfContainerRequiresConfiguration
PiDcHandleContainerEvent
PiDcHandleCustomDeviceEvent
PiDcHandleDeviceEvent
PiDcHandleInterfaceEvent
PiDcHandleObjectEvent
PiDcHandleSystemFirmwareUpdate
PiDcInit
PiDcInitUpdateProperties
PiDcResetChildDeviceContainerCallback
PiDcResetChildDeviceContainers
PiDcUpdateDeviceContainerMembership
PiDeferSetInterfaceState
PiDetermineDeleteType
PiDevCfgAppendMultiSz
PiDevCfgBuildDriverConfigurationId
PiDevCfgBuildDriverNodeStrongName
PiDevCfgBuildIndirectString
PiDevCfgCheckDeviceNeedsUpdate
PiDevCfgClearDeviceMigrationNode
PiDevCfgCompareDrivers
PiDevCfgConfigureDevice
PiDevCfgConfigureDeviceDriver
PiDevCfgConfigureDeviceDriverConfiguration
PiDevCfgConfigureDeviceFilters
PiDevCfgConfigureDeviceInterface
PiDevCfgConfigureDeviceInterfaceCallback
PiDevCfgConfigureDeviceInterfaces
PiDevCfgConfigureDeviceKeyCallback
PiDevCfgConfigureDeviceKeys
PiDevCfgConfigureDeviceLocation
PiDevCfgConfigurePropertyMatchCallback
PiDevCfgConfigureSoftwareDevices
PiDevCfgConvertPropertyFromValue
PiDevCfgCopyDeviceKey
PiDevCfgCopyDeviceKeys
PiDevCfgCopyDeviceProperties
PiDevCfgCopyObjectProperties
PiDevCfgCopyVariableData
PiDevCfgEnforceDevicePolicy
PiDevCfgEnumDeviceKeys
PiDevCfgFindDeviceDriver
PiDevCfgFindDeviceMigrationNode
PiDevCfgFreeDeviceContext
PiDevCfgFreeDeviceMigrationNode
PiDevCfgFreeDriverNode
PiDevCfgFreeMigrationContext
PiDevCfgFreeResolveContext
PiDevCfgFreeVariable
PiDevCfgGetDeviceClassConfigFlags
PiDevCfgGetDeviceClassDriverConfigurable
PiDevCfgGetDriverConfigurationKeyScope
PiDevCfgGetDriverPackageId
PiDevCfgGetFailedInstallProblemStatus
PiDevCfgGetKeySecurityDescriptor
PiDevCfgGetMigrationDeviceIdScore
PiDevCfgInitDeviceCallback
PiDevCfgInitDeviceContext
PiDevCfgInitDriverDatabaseCallback
PiDevCfgInitMigrationContext
PiDevCfgInitResolveContext
PiDevCfgLogDeviceConfigured
PiDevCfgLogDeviceMigrated
PiDevCfgLogDeviceStarted
PiDevCfgMakeServiceBootStart
PiDevCfgMatchDriverConfigurationId
PiDevCfgMigrateDevice
PiDevCfgMigrateRootDevice
PiDevCfgOpenDeviceMigrationKey
PiDevCfgOpenDriverConfiguration
PiDevCfgParseInterfaceKeyName
PiDevCfgParsePropertyKeyName
PiDevCfgParseVariableName
PiDevCfgPopDriverNodeEntry
PiDevCfgProcessDevice
PiDevCfgProcessDeviceCallback
PiDevCfgPushCopyKeyEntry
PiDevCfgPushDriverNodeEntry
PiDevCfgQueryDeviceMigrationNode
PiDevCfgQueryDriverConfiguration
PiDevCfgQueryDriverNode
PiDevCfgQueryDriverVersionValueCallback
PiDevCfgQueryIncludedDriverConfigurations
PiDevCfgQueryIncludedDriverNode
PiDevCfgQueryObjectProperties
PiDevCfgQueryPolicyEnabled
PiDevCfgQueryPolicyStringList
PiDevCfgQueryResolveValue
PiDevCfgRequestDriverConfigurations
PiDevCfgResetDeviceDriverSettings
PiDevCfgResetDeviceKeyCallback
PiDevCfgResetDeviceKeys
PiDevCfgResolveMultiSzValue
PiDevCfgResolveVariable
PiDevCfgResolveVariableConstant
PiDevCfgResolveVariableDeviceProperty
PiDevCfgResolveVariableExpression
PiDevCfgResolveVariableFormatString
PiDevCfgResolveVariableGenerateGuid
PiDevCfgResolveVariableKeyCopy
PiDevCfgResolveVariableKeyHandle
PiDevCfgResolveVariableKeyValue
PiDevCfgResolveVariableSwitchCase
PiDevCfgSetDeviceRegProp
PiDevCfgSetObjectProperty
PiDevCfgSplitDriverConfigurationId
PiDevCfgVerifyDeviceAllowed
PiDevCfgVerifyService
PiDeviceRegistration
PiDmAddCacheReferenceForObject
PiDmAllocateGenericTableEntry
PiDmCacheDataDecode
PiDmCacheDataEncode
PiDmCacheDataFree
PiDmCmObjectMatchCallback
PiDmCompareObjects
PiDmEnumObjectsWithCallback
PiDmFreeGenericTableEntry
PiDmGetCacheKeys
PiDmGetCachedKeyIndex
PiDmGetCmObjectListFromCache
PiDmGetObject
PiDmGetObjectConstraintList
PiDmGetObjectList
PiDmGetObjectListCallback
PiDmGetObjectManagerForObjectType
PiDmGetReferencedObjectFromProperty
PiDmInit
PiDmInitializeComparisonObject
PiDmListAddList
PiDmListAddObject
PiDmListAddObjectWorker
PiDmListEnumObjectsWithCallback
PiDmListInit
PiDmListInitEnumCallback
PiDmListRemoveList
PiDmListRemoveObject
PiDmListRemoveObjectWorker
PiDmListUpdateAggregationCountWorker
PiDmLookupObject
PiDmObjectAcquireExclusiveLock
PiDmObjectAcquireSharedLock
PiDmObjectCreate
PiDmObjectGetCachedCmProperty
PiDmObjectGetCachedObjectProperty
PiDmObjectGetCachedObjectPropertyData
PiDmObjectGetCachedObjectReference
PiDmObjectIsEnumerable
PiDmObjectManagerAcquireExclusiveLock
PiDmObjectManagerAcquireSharedLock
PiDmObjectManagerInit
PiDmObjectManagerPopulate
PiDmObjectManagerReleaseLock
PiDmObjectProcessPropertyChange
PiDmObjectRelease
PiDmObjectReleaseLock
PiDmObjectUpdateCachedCmProperty
PiDmObjectUpdateCachedObjectProperty
PiDmPnpObjectMatchCallback
PiDmRemoveCacheReferenceForObject
PiDmaGuardInitialize
PiDmaGuardProcessPostRemove
PiDmaGuardProcessPreAddDevice
PiDmaGuardProcessPreStart
PiDmaGuardProcessUpdateConsoleLockStateAction
PiDmaGuardQueueFlush
PiDmaGuardQueueInsertEntry
PiDmaGuardQueueRemoveEntry
PiDqActionDataCreate
PiDqActionDataFree
PiDqActionDataGetAllPropertiesInAllLanguages
PiDqActionDataGetAllPropertiesInBestLanguage
PiDqActionDataGetChangedProperties
PiDqActionDataGetRequestedProperties
PiDqAllocateGenericTableEntry
PiDqCompareAddresses
PiDqConvertObjectTypeToString
PiDqConvertQueryFlagsToString
PiDqDeleteUserObject
PiDqDeleteUserObjectFromLoadedHives
PiDqDispatch
PiDqEnumQueryObjectsCallback
PiDqFreeGenericTableEntry
PiDqGetObjectManagerForPnpObjectType
PiDqGetPnpObjectType
PiDqGetRelativeObjectRegPath
PiDqGrowPropertyArray
PiDqInit
PiDqIrpCancel
PiDqIrpComplete
PiDqIrpPropertySet
PiDqIrpQueryCreate
PiDqIrpQueryGetResult
PiDqObjectActionQueueEntryCreate
PiDqObjectManagerEnumerateAndRegisterQuery
PiDqObjectManagerHandleObjectEvent
PiDqObjectManagerInit
PiDqObjectManagerMakeInconsistent
PiDqObjectManagerServiceActionQueue
PiDqObjectManagerUnregisterQuery
PiDqOpenObjectRegKey
PiDqOpenUserObjectRegKey
PiDqPnPGetObjectProperty
PiDqPnPGetObjectPropertyInBestLocale
PiDqPnPGetObjectPropertyKeys
PiDqPnPGetObjectPropertyLocales
PiDqPropertyCallback
PiDqQueryActionQueueEntryCreate
PiDqQueryActionQueueEntryFree
PiDqQueryAddObjectToResultSet
PiDqQueryAppendActionEntry
PiDqQueryApplyObjectEvent
PiDqQueryCompletePendedIrp
PiDqQueryCreate
PiDqQueryDeleteObjectFromResultSet
PiDqQueryEnumObject
PiDqQueryEvaluateFilter
PiDqQueryFreeActiveData
PiDqQueryGetNextIoctlInfo
PiDqQueryGetObjectManager
PiDqQueryLock
PiDqQueryRelease
PiDqQuerySerializeActionQueue
PiDqQueryUnlock
PiDqQueryValidateQueryData
PiDqSameUserHive
PiDqSerializationAlloc
PiDqSerializationWrite
PiDqTraceQueryCreate
PiDrvDbCreateNode
PiDrvDbDestroyNode
PiDrvDbDriverStoreNodesUpdated
PiDrvDbEnumDriverStoreNodes
PiDrvDbEnumNodes
PiDrvDbFindNode
PiDrvDbFindSystemFilePathToken
PiDrvDbGetNodeSystemRoot
PiDrvDbInit
PiDrvDbLoadHive
PiDrvDbLoadNode
PiDrvDbLoadNodeWorkerCallback
PiDrvDbMountNode
PiDrvDbNodeActionCallback
PiDrvDbOverlayCopyKeys
PiDrvDbOverlayNodeHive
PiDrvDbQueryHiveFileName
PiDrvDbQuerySyncNodesUpdated
PiDrvDbQuerySystemPathWin32
PiDrvDbRegisterNode
PiDrvDbRegisterNodeCallback
PiDrvDbResolveFilePathKeyValues
PiDrvDbResolveKeyFilePaths
PiDrvDbResolveNodeFilePaths
PiDrvDbResolveSystemFilePath
PiDrvDbSetupNodeHive
PiDrvDbSetupNodes
PiDrvDbSuspendNodes
PiDrvDbUnloadHive
PiDrvDbUnloadNodeDpcRoutine
PiDrvDbUnloadNodeReset
PiDrvDbUnloadNodeWaitWorkerCallback
PiDrvDbUnloadNodeWorkerCallback
PiDrvDbUnmountNode
PiDrvDbUnregisterNode
PiEnumerateDependentListEntry
PiEnumerateProviderListEntry
PiEventAllocatePendingEjectRelations
PiEventAllocateVetoBuffer
PiEventAreDeviceRelationsExcluded
PiEventBuildPdoList
PiEventRemovalPostSurpriseRemove
PiFindDevInstMatch
PiForEachDriverQueryRoutine
PiGetDefaultMessageString
PiGetDependentList
PiGetDeviceDepth
PiGetDeviceRegProperty
PiGetDeviceRegistryProperty
PiGetDmaAdapterFromBusInterface
PiGetDriverImageDirectory
PiGetDriverMutableStateDirectory
PiGetProviderList
PiGetRelatedDevice
PiGetServiceNameInfo
PiGetStateRootPath
PiGetTargetDeviceNode
PiHotSwapGetDefaultBusRemovalPolicy
PiHotSwapGetDetachableNode
PiInitCacheGroupInformation
PiInitFirmwareResources
PiInitReleaseCachedGroupInformation
PiInitializeDDB
PiInitializeDevice
PiIommuAllocateExtension
PiIommuBlockDevice
PiIommuFreeExtension
PiIommuGetInterface
PiIommuIsDeviceSafeWhileConsoleLocked
PiIommuIsPassthroughAllowedWhileConsoleLocked
PiIommuPutInterface
PiIommuSaveDeviceAtsSettings
PiIommuUnblockDevice
PiIommuUninitializeDeviceAts
PiIrpQueryRemoveDevice
PiIsDriverBlocked
PiIsHVCIEnabled
PiKsrNotifyInitialize
PiLastGoodCopyKeyContents
PiLastGoodRevertCopyCallback
PiLastGoodRevertLastKnownDirectory
PiListEntryToDependencyEdge
PiLogSurpriseRemoveEvent
PiLookupInDDB
PiLookupInDDBCache
PiMarkDeviceTreeForReenumeration
PiMarkDeviceTreeForReenumerationWorker
PiNormalizeDeviceText
PiNotifyCiDriverBlocked
PiOpenDirectoryWithRoot
PiOpenDriverRedirectedStateKey
PiOpenDriverRedirectedStateRootKey
PiPagePathSetState
PiPdcActivate
PiPdcDeactivate
PiPnpAddDeviceToPdoDeviceListEnumContext
PiPnpFreePdoDeviceList
PiPnpPdoDeviceListEnumCallback
PiPnpRtlApplyMandatoryDeviceContainerFilters
PiPnpRtlApplyMandatoryDeviceContainerFiltersCallback
PiPnpRtlApplyMandatoryDeviceFilters
PiPnpRtlApplyMandatoryDeviceInterfaceFilters
PiPnpRtlApplyMandatoryFilters
PiPnpRtlBeginOperation
PiPnpRtlCacheObjectBaseKey
PiPnpRtlCmActionCallback
PiPnpRtlDisableRemoveOperationDispatch
PiPnpRtlEndOperation
PiPnpRtlEnsureObjectCached
PiPnpRtlEnumDevicesCallback
PiPnpRtlEnumeratorFilterCallback
PiPnpRtlFreeContainerRemoveInfo
PiPnpRtlFreeDeviceDeleteInfo
PiPnpRtlFreeInstallerClassChangeInfo
PiPnpRtlFreeInterfaceDeleteInfo
PiPnpRtlFreePanelRemoveInfo
PiPnpRtlGatherContainerRemoveInfo
PiPnpRtlGatherDeviceDeleteInfo
PiPnpRtlGatherInstallerClassChangeInfo
PiPnpRtlGatherInterfaceDeleteInfo
PiPnpRtlGatherPanelRemoveInfo
PiPnpRtlGetCurrentOperation
PiPnpRtlGetDeviceInterfaceEnabled
PiPnpRtlGetDeviceNtPropertyRoutine
PiPnpRtlGetDeviceRelatedDeviceRoutine
PiPnpRtlGetDeviceRelationsList
PiPnpRtlGetDeviceStatus
PiPnpRtlGetFilteredDeviceInterfaceList
PiPnpRtlGetFilteredDeviceList
PiPnpRtlInit
PiPnpRtlInterfaceFilterCallback
PiPnpRtlObjectActionCallback
PiPnpRtlObjectEventCallback
PiPnpRtlObjectEventCompareObjects
PiPnpRtlObjectEventCreate
PiPnpRtlObjectEventDispatch
PiPnpRtlObjectEventRelease
PiPnpRtlObjectEventWorker
PiPnpRtlOperationAllocateGenericTableEntry
PiPnpRtlOperationFreeGenericTableEntry
PiPnpRtlOperationListAcquireExclusiveLock
PiPnpRtlOperationListAcquireSharedLock
PiPnpRtlOperationListReleaseLock
PiPnpRtlPdoRaiseNtPlugPlayPropertyChangeEvent
PiPnpRtlServiceFilterCallback
PiPnpRtlSetDeviceRegProperty
PiPnpRtlSetObjectProperty
PiProcessAddBootDevices
PiProcessClearDeviceProblem
PiProcessDeviceResetAction
PiProcessDriverInstance
PiProcessDriversLoadedOnSecureDevice
PiProcessNewDeviceNode
PiProcessNewDeviceNodeAsync
PiProcessNewDeviceNodeWorker
PiProcessQueryAndCancelRemoval
PiProcessQueryDeviceState
PiProcessQueryRemoveNoFdo
PiProcessReenumeration
PiProcessRequeryDeviceState
PiProcessResourceRequirementsChanged
PiProcessSetDeviceProblem
PiProcessStartSystemDevices
PiProfileUpdateDeviceTree
PiProfileUpdateDeviceTreeCallback
PiProfileUpdateDeviceTreeWorker
PiQueryAndAllocateBootResources
PiQueryDeviceRelations
PiQueryPowerDependencyRelations
PiQueryPowerRelations
PiQueryRemovableDeviceOverride
PiQueryResourceRequirements
PiQueueDeviceRequest
PiRearrangeDeviceInstances
PiRebalanceOptOut
PiRegisterKernelSoftRestartNotification
PiReleaseDDB
PiRemoveDeferredSetInterfaceState
PiResetProblemDevicesWorker
PiRestartDevice
PiRestartRemovalRelations
PiSendTargetDeviceRemoveCanceledNotification
PiSendTargetDeviceRemoveCompleteNotification
PiSwAddPdoAssociation
PiSwAllocateGenericTableEntry
PiSwBusRelationAdd
PiSwBusRelationRemove
PiSwBusRelationsCompareInstancePath
PiSwCloseDescendants
PiSwCloseDevice
PiSwCompleteCreate
PiSwDestroyDeviceObject
PiSwDeviceCompareObjects
PiSwDeviceCreate
PiSwDeviceDereference
PiSwDeviceFindInterfaceEntry
PiSwDeviceFree
PiSwDeviceInterfaceSetState
PiSwDeviceInterfacesUpdateState
PiSwDeviceMakeCompatibleIds
PiSwDeviceOperationsAllowed
PiSwDispatch
PiSwDoesCreateChangesRequireReEnum
PiSwFindBusRelations
PiSwFindChildren
PiSwFindPdoAssociation
PiSwFindSwDevice
PiSwFreeGenericTableEntry
PiSwFreeInterfaceList
PiSwFreePdoAssociationsList
PiSwGetChildPdo
PiSwInit
PiSwInstanceInfoFree
PiSwInstanceInfoInit
PiSwInterfaceCreate
PiSwInterfaceFree
PiSwIrpCancelStartCreate
PiSwIrpCleanup
PiSwIrpGetAttributes
PiSwIrpGetLifetime
PiSwIrpInterfacePropertySet
PiSwIrpInterfaceRegister
PiSwIrpInterfaceSetState
PiSwIrpPropertySet
PiSwIrpSetAttributes
PiSwIrpSetLifetime
PiSwIrpStartCreate
PiSwIrpStartCreateWorker
PiSwLock
PiSwMakePdoInactive
PiSwPdoAssociationFree
PiSwPdoDriverEntry
PiSwPdoPnPDispatch
PiSwPnPInfoFree
PiSwPnPInfoInit
PiSwProcessParentRemoveIrp
PiSwProcessParentStartIrp
PiSwProcessRemove
PiSwPropertySet
PiSwQueuedCreateInfoCreate
PiSwQueuedCreateInfoFree
PiSwRemovePdoAssociation
PiSwStartCreate
PiSwStopDestroy
PiSwUnassociateDeviceObject
PiSwUpdateArrayProperties
PiSwValidateCreateData
PiSwValidatePropertyArray
PiUEventApplyAdditionalFilters
PiUEventBroadcastDevnodesChangedEvent
PiUEventBroadcastEventWorker
PiUEventBroadcastHardwareProfilesChangedEvent
PiUEventBroadcastPortsChangedEvent
PiUEventBroadcastVolumesChangedEvent
PiUEventCacheObjectProperties
PiUEventCoalesceBroadcastEvents
PiUEventCopyEventData
PiUEventDequeuePendingEventWorker
PiUEventDereferenceEventEntry
PiUEventDeviceNeedsInstall
PiUEventDispatch
PiUEventEstimateRequiredClientBufferSize
PiUEventFreeClientRegistrationContext
PiUEventFreeEventEntry
PiUEventFreeProcessImagePath
PiUEventGatherEventData
PiUEventGetDeviceInstanceIdFromUserHandle
PiUEventGetProcessImagePath
PiUEventHandleIoctl
PiUEventHandleRegistration
PiUEventHandleUnregisterClient
PiUEventHandleVetoEvent
PiUEventHashGuidIntoBucket
PiUEventHashStringIntoBucket
PiUEventInit
PiUEventInitClientRegistrationContext
PiUEventIsClientStuck
PiUEventIsDeviceEventVetoable
PiUEventMetaNotificationCallback
PiUEventMovePendingEventToSynchronousQueue
PiUEventNotifyClient
PiUEventNotifyClientPendingEvent
PiUEventNotifyDeviceInstanceChange
PiUEventNotifyDeviceInstancePropertyChange
PiUEventNotifyDeviceInterfaceChange
PiUEventNotifyTargetDeviceChange
PiUEventNotifyUserMode
PiUEventProcessBroadcastNotifications
PiUEventProcessEventWorker
PiUEventProcessRegistry
PiUEventQueueBroadcastEventEntry
PiUEventQueuePendingEvent
PiUEventReferenceEventEntry
PiUEventShouldQueueEvent
PiUpdateDevicePanel
PiUpdateDeviceResourceLists
PiUpdateDriverDBCache
PiUpdateGuestAssignedState
PiValidatePowerRelations
PidNodeCompare
PipAddBindingId
PipAddDependencyEdgeBetweenNodes
PipAddDependentsToRebuildPowerRelationsQueue
PipAddDevicesToBootDriverWorker
PipAddRequestToEdge
PipAddtoRebuildPowerRelationsQueue
PipAllocateDeviceNode
PipApplyFunctionToServiceInstances
PipAreDriversLoaded
PipAreDriversLoadedWorker
PipAttemptDependentStart
PipAttemptDependentsStart
PipCallDriverAddDevice
PipCallDriverAddDeviceQueryRoutine
PipCallbackHasDeviceOverrides
PipCanEnableInterfaces
PipChangeDeviceObjectFromRegistryProperties
PipCheckComputerSupported
PipCheckDependencies
PipCheckForDenyExecute
PipCheckForUnsatisfiedDependencies
PipCheckIfAllProvidersHaveDevnodes
PipCheckSystemFirmwareUpdated
PipCheckValidNewDependencyEdge
PipClearDevNodeFlags
PipClearDevNodeProblem
PipClearDevNodeUserFlags
PipCommitPendingOsExtensionResource
PipCommitPendingService
PipConvertResolutionsToReservations
PipCreateComputerId
PipCreateDependencyNode
PipCreateEntry
PipCreateNewDependencyEdge
PipCriticalDeviceWaitCallback
PipCslStateChangeCallback
PipDeleteAllDependencyRelations
PipDeleteBindingId
PipDeleteBindingIds
PipDeleteDependencyNode
PipDependencyGraphDepthFirstSearch
PipDereferenceDependencyNode
PipDeviceObjectListAdd
PipDeviceObjectListElementAt
PipDeviceObjectListIndexOf
PipDeviceObjectListRemove
PipDeviceRemovalCheckDeviceNodeState
PipDgqFreeEntry
PipDmaGuardBlockAddDevice
PipDmgConsoleUnlockCallback
PipDmgDestroyIommuExtension
PipDmgEnforceEnumerationPolicy
PipDmgFlushQueueAndRestartDevices
PipDmgGetDeviceDmarPolicy
PipDmgGetDeviceDmarRegistryValue
PipDmgGetDriverDmarCompatLevel
PipDmgGetDriversDmarPolicy
PipDmgInitPhaseTwo
PipDmgInitPhaseZero
PipDmgInitReadGroupPolicy
PipDmgInitializeIommuExtension
PipDmgIsDmaVerifierEnabled
PipDmgReevaluateQueue
PipDmgRequestRestartOnBlockedDevice
PipDmgRequestUpdateConsoleLockState
PipDmgSaveDeviceDmarPolicy
PipDmgSetIommuDomainPolicyAndNotifyHal
PipEnumerateCompleted
PipEnumerateDevice
PipEnumeratePersistedMemory
PipEnumeratePersistedMemoryCallback
PipFindDependencyNodePath
PipFindDeviceOverrideEntry
PipForAllChildDeviceNodes
PipForAllDeviceNodesCallback
PipForDeviceNodeSubtree
PipFreeBindingId
PipFreeBindingRequestEntry
PipFreeDependencyEdge
PipFreeDeviceObjectList
PipFreeGroupTree
PipGenerateContainerID
PipGetDeviceObjectLocation
PipGetDriverKsrGuid
PipGetDriverKsrGuidRegistryValue
PipGetDriverTagPriority
PipGetPersistentMemory
PipGetRegistryDwordWithFallback
PipGetRegistrySecurityWithFallback
PipGrowDeviceObjectList
PipHardwareConfigActivateService
PipHardwareConfigClearStartOverrideCallback
PipHardwareConfigClearStartOverrides
PipHardwareConfigExists
PipHardwareConfigGetIndex
PipHardwareConfigGetLastUseTime
PipHardwareConfigInit
PipHardwareConfigOpenKey
PipHardwareConfigTriggerRespecialize
PipInitComputerIds
PipInitDeviceOverrideCache
PipInitializeCoreDriversAndElam
PipInitializeCoreDriversByGroup
PipInitializeDriverDependentDLLs
PipInitializeEarlyLaunchDrivers
PipIommuRetrieveDeviceId
PipIs32bitKey
PipIsDevNodeDNStarted
PipIsDeviceInDeviceObjectList
PipIsDeviceReadyForPowerRelations
PipIsProblemReadonly
PipIsProviderStarted
PipKsrCallback
PipKsrNotifyDrivers
PipLinkDeviceObjectAndDependencyNode
PipLookupGroupName
PipMakeGloballyUniqueId
PipMatchPersistentMemory
PipMatchPersistentMemoryV1
PipMergeDependencyEdgeList
PipMergeDependencyNodes
PipMergeDependencyTypes
PipMigrateCleanService
PipMigratePnpState
PipMigrateResetDeviceCallback
PipMigrateServiceCallback
PipMoveListEntries
PipNotifyDependenciesChanged
PipOpenServiceEnumKeys
PipPendingServicesFilter
PipPnPDriverEntry
PipProcessDevNodeTree
PipProcessEnumeratedChildDevice
PipProcessPendingObjects
PipProcessPendingOsExtensionResources
PipProcessPendingServices
PipProcessRebuildPowerRelationsQueue
PipProcessRestartPhase1
PipProcessRestartPhase2
PipProcessStartPhase1
PipProcessStartPhase2
PipProcessStartPhase3
PipQueryBindingResolution
PipReferenceDependencyNode
PipRemoveDevicesInRelationList
PipResetDevice
PipResetDevices
PipResetMatchingFilteredDevices
PipRestoreDevNodeState
PipSendGuestAssignedNotification
PipSendQueryRemoveIrpAndCheckOpenHandles
PipSendTargetDeviceQueryRemoveNotification
PipServiceInstanceToDeviceInstance
PipSetDependency
PipSetDevNodeFlags
PipSetDevNodeProblem
PipSetDevNodeState
PipSetDevNodeStateFlags
PipSetDevNodeUserFlags
PipSetGuestAssignedProperty
PipSmBiosFindStruct
PipSmBiosGetString
PipSortDeviceObjectList
PipSortDevicesByOrdinal
PipUnlinkDeviceObjectAndDependencyNode
PipUnloadEarlyLaunchDrivers
PipUnpackMetadata
PipUnprotectDevice
PipUpdateAsyncOptionsCallback
PipUpdateDeviceProducts
PipUpdatePostStartCharacteristics
PipUpdateSetupInProgress
PipUpdateSetupInProgressCallback
PipUpdateSetupInProgressNotify
PipUpdateSetupOobeCompleteWnfCallback
PipVisitDeviceObjectListEntry
PipWaitCriticalDevices
PlugPlayGetDeviceProperty
PnpAcquireDependencyRelationsLock
PnpAcquirePowerRelationsQueueLock
PnpActivatePdcForDeviceEvent
PnpActivatingDeviceNodeFromThread
PnpAddVetoInformation
PnpAllocateAndEnableEventWatchdog
PnpAllocateCriticalMemory
PnpAllocateDeviceInstancePath
PnpAllocateGenericTableEntry
PnpAllocateMultiSZ
PnpAllocatePWSTR
PnpAllocateResources
PnpAllocateWatchdog
PnpAssignResourcesToDevices
PnpAsynchronousCall
PnpBootDeviceWait
PnpBootPhaseComplete
PnpBugcheckPowerTimeout
PnpBuildCmResourceList
PnpBuildCmResourceLists
PnpBuildRemovalRelationList
PnpBuildUnsafeRemovalDeviceList
PnpBusTypeGuidGet
PnpBusTypeGuidGetIndex
PnpBusTypeGuidInitialize
PnpCallAddDevice
PnpCallDriverEntry
PnpCallDriverQueryServiceHelper
PnpCancelDeviceActionRequest
PnpCancelRemoveLockedDeviceNode
PnpCancelStopDeviceNode
PnpCancelStopDeviceSubtree
PnpChainDereferenceComplete
PnpCheckDeviceIdsChanged
PnpCheckDriverDependencies
PnpCheckForActiveDependencies
PnpCheckForWaitingReportedDevice
PnpCheckPossibleBootStartDriver
PnpCleanupDeviceRegistryValues
PnpClearDeviceTemporaryProperties
PnpCmResourcesToIoResources
PnpCollectOpenHandles
PnpCollectOpenHandlesCallBack
PnpCompareActivationThread
PnpCompareInstancePath
PnpCompareInterruptInformation
PnpCompareMultiSz
PnpCompareResourceRequestPriority
PnpCompileDeviceInstancePaths
PnpCompleteDeviceEvent
PnpCompleteSystemStartProcess
PnpCompletionRoutine
PnpConcatPWSTR
PnpConcatenateUnicodeStrings
PnpConvertDevpropcompkeyArrayToString
PnpCopyDevProperty
PnpCopyDevPropertyArray
PnpCopyDeviceInstancePath
PnpCopyResourceList
PnpCreateDeviceEventEntry
PnpDeferNotification
PnpDelayedRemoveWorker
PnpDelayedRemoveWorkerContextCreate
PnpDeleteAllDependencyRelations
PnpDeleteDeviceActionRequest
PnpDeleteDeviceInterfaces
PnpDeleteLockedDeviceNode
PnpDeleteLockedDeviceNodes
PnpDereferenceNotify
PnpDetermineResourceListSize
PnpDeviceActionWorker
PnpDeviceCompletionProcessCompletedRequest
PnpDeviceCompletionProcessCompletedRequests
PnpDeviceCompletionQueueAddCompletedRequest
PnpDeviceCompletionQueueAddDispatchedRequest
PnpDeviceCompletionQueueDispatchedEntryCompleted
PnpDeviceCompletionQueueGetCompletedRequest
PnpDeviceCompletionQueueIsEmpty
PnpDeviceCompletionQueueRemoveCompletedRequest
PnpDeviceCompletionRequestCreate
PnpDeviceCompletionRequestDestroy
PnpDeviceCompletionRequestDestroyWorkItem
PnpDeviceCompletionRoutine
PnpDeviceEventWorker
PnpDeviceObjectFromDeviceInstanceWithTag
PnpDeviceObjectToDeviceInstance
PnpDiagRundownConnectionResourceForEachDevice
PnpDiagRundownInterruptResourceForEachDevice
PnpDiagRundownParentDevNodeForEachDevice
PnpDiagRundownParentPdoForEachDevice
PnpDiagRundownRegisterCallback
PnpDiagnosticCompletionRoutine
PnpDiagnosticTrace
PnpDiagnosticTraceAppVeto
PnpDiagnosticTraceDeviceOperation
PnpDiagnosticTraceDriverFullInfo
PnpDiagnosticTraceElamDecision
PnpDiagnosticTraceElamStatus
PnpDiagnosticTraceObject
PnpDiagnosticTraceObjectWithStatus
PnpDisableAndFreeEventWatchdog
PnpDisableDevice
PnpDisableDeviceInterfaces
PnpDisableUserModeNotifications
PnpDisableWatchdog
PnpDoPolicyCheck
PnpDriverLoadingFailed
PnpDriverObjectDereferenceComplete
PnpDuplicateUnicodeString
PnpEarlyLaunchImageNotificationPostProcess
PnpEarlyLaunchImageNotificationPreProcess
PnpEarlyLaunchStatusNotificationPreProcess
PnpEnableWatchdog
PnpExtractCategorySpecificEventData
PnpExtractNotificationSpecificData
PnpFilterResourceRequirementsList
PnpFinalizeDeviceRemovalForReset
PnpFinalizeVetoedRemove
PnpFindAlternateStringData
PnpFindBestConfiguration
PnpFindBestConfigurationWorker
PnpFindMountableDevice
PnpFindRebalanceCandidates
PnpFixupID
PnpFreeDevProperty
PnpFreeDevPropertyArray
PnpFreeDeviceInstancePath
PnpFreeGenericTableEntry
PnpFreeInterruptInformation
PnpFreeResourceRequirementsForAssignTable
PnpFreeSystemPdoList
PnpFreeUnicodeStringList
PnpFreeVetoInformation
PnpGenerateDeviceIdsHash
PnpGetDeviceDependencyList
PnpGetDeviceInstanceCsConfigFlags
PnpGetDeviceInstancePropertyData
PnpGetDeviceInstanceRegistryValue
PnpGetDeviceInterfacePropertyData
PnpGetDeviceLocationStrings
PnpGetDevicePropertyData
PnpGetDeviceResourcesFromRegistry
PnpGetLogString
PnpGetMultiSzLength
PnpGetObjectProperty
PnpGetProcessCommandLine
PnpGetRegistryDword
PnpGetRelatedTargetDevice
PnpGetResourceRequirementsForAssignTable
PnpGetServiceStartType
PnpGetStableSystemBootTime
PnpGetSystemPdoList
PnpHandleEnumerateHandlesAgainstDeviceObject
PnpHandleEnumerateHandlesAgainstPdoStack
PnpHandleProcessWalkWorker
PnpHardwareConfigCreateBootDriverFlags
PnpInitPhase0
PnpInitializeBootStartDriver
PnpInitializeDeviceEvents
PnpInitializeInheritedRestrictedSd
PnpInitializeNotification
PnpInitializeNotifyEntry
PnpInitializePnpWatchdogs
PnpInitializeProcessor
PnpInitializeSessionId
PnpInitializeTargetDeviceRemoveEvent
PnpInitializeTriageBlock
PnpInsertEventInQueue
PnpInsertNoopEvent
PnpInvalidateRelationsInList
PnpIommuBlockUnblockDevice
PnpIrpDeviceEnumerated
PnpIrpQueryID
PnpIsBeingRemovedSafely
PnpIsChainDereferenced
PnpIsDeviceInstanceEnabled
PnpIsDuplicateDevice
PnpIsLegacyDriver
PnpIsNullGuid
PnpIsRangeWithin
PnpIsSafeToExamineUserModeTeb
PnpIsValidGuidString
PnpLoadBootFilterDriver
PnpLockDeviceActionQueue
PnpLockMountableDevice
PnpLogActionQueueEvent
PnpLogDeviceConflictingResource
PnpLogDeviceRequiresReboot
PnpLogDuplicateDevice
PnpLogEvent
PnpLogVetoInformation
PnpLookupArbitersNewResources
PnpMapActivatingDeviceNodeToThread
PnpMapDeviceObjectToDeviceInstance
PnpMarkDeviceForRemove
PnpMergeFilteredResourceRequirementsList
PnpMultiSzContainsString
PnpNeedToReleaseBootResources
PnpNewDeviceNodeDependencyCheck
PnpNotifyDeviceClassChange
PnpNotifyDriverCallback
PnpNotifyEarlyLaunchImageLoad
PnpNotifyEarlyLaunchStatusUpdate
PnpNotifyHwProfileChange
PnpNotifyTargetDeviceChange
PnpNotifyTargetDeviceChangeNotifyEntry
PnpNotifyUserModeDeviceRemoval
PnpOpenCCSPnpRegKey
PnpOpenFirstMatchingSubKey
PnpOrphanNotification
PnpPdcActivatorCallback
PnpPoFxActivateDevice
PnpPowerStateTransitionWatchdogCallback
PnpPowerStateTransitionWatchdogPopRecord
PnpPowerStateTransitionWatchdogPushRecord
PnpPrepareDriverLoading
PnpProcessAssignResources
PnpProcessAssignResourcesWorker
PnpProcessBusRelations
PnpProcessCompletedEject
PnpProcessDeferredRegistrations
PnpProcessDependencyRelations
PnpProcessQueryRemoveAndEject
PnpProcessRebalance
PnpProcessRelation
PnpProcessTargetDeviceEvent
PnpProfileUpdateHardwareProfile
PnpQueryAndSaveDeviceNodeCapabilities
PnpQueryBusInformation
PnpQueryDeviceID
PnpQueryDeviceRelations
PnpQueryDeviceText
PnpQueryExtendedAddress
PnpQueryID
PnpQueryInterface
PnpQueryRebalance
PnpQueryRebalanceWorker
PnpQueryRemoveLockedDeviceNode
PnpQueryStopDeviceNode
PnpQueuePendingEject
PnpQueuePendingSurpriseRemoval
PnpQueueQueryAndRemoveEvent
PnpReadDeviceConfiguration
PnpReallocateResources
PnpRebalance
PnpRecordBlackbox
PnpRecordBlackboxDelayedRemoveWorkerInformation
PnpRecordBlackboxDeviceCompletionQueueInformation
PnpRecordBlackboxPnpEventInformation
PnpRecordBlackboxPnpEventWorkerInformation
PnpRegCopyKeySecurity
PnpRegCopyKeySecurityTree
PnpRegMultiSzToUnicodeStrings
PnpRegSzToString
PnpRegistryValueExists
PnpReleaseBootResourcesForFilteredRequirements
PnpReleaseDependencyRelationsLock
PnpReleasePowerRelationsQueueLock
PnpReleaseResourcesInternal
PnpRemoveDeviceActionRequestFromQueue
PnpRemoveDeviceActionRequests
PnpRemoveEventFromQueue
PnpRemoveLockedDeviceNode
PnpReplacePartitionUnit
PnpReportTargetDeviceChangeAsyncWorker
PnpRequestDeviceAction
PnpRequestDeviceEjectExWorker
PnpRequestDeviceRemoval
PnpRequestDeviceRemovalWorker
PnpRequestHwProfileChangeNotification
PnpResizeTargetDeviceBlock
PnpRestartDeviceNode
PnpRestoreResourcesInternal
PnpSaveDeviceCapabilities
PnpSaveGlobalsToMinidump
PnpSelectFirstConfiguration
PnpSendIrp
PnpSerializeBoot
PnpSetBlockedDriverEvent
PnpSetCustomTargetEvent
PnpSetDeviceAffinityThread
PnpSetDeviceClassChange
PnpSetDeviceInstancePropertyChangeEvent
PnpSetDeviceInstancePropertyChangeEventFromDeviceInstance
PnpSetDeviceInstanceRemovalEvent
PnpSetDeviceInstanceStartedEvent
PnpSetDeviceInstanceStartedEventFromDeviceInstance
PnpSetDeviceInterfacePropertyData
PnpSetDevicePropertyData
PnpSetDeviceRemovalSafe
PnpSetHwProfileChangeEvent
PnpSetInterruptInformation
PnpSetInvalidIDEvent
PnpSetPlugPlayEvent
PnpSetPowerVetoEvent
PnpSetRegistryDword
PnpSetTargetDeviceRemove
PnpShutdownDevices
PnpStartDevice
PnpStartDeviceNode
PnpStartedDeviceNodeDependencyCheck
PnpStopDeviceSubtree
PnpStringFromGuid
PnpStringToDwordValue
PnpSurpriseFailUnsafeDmaDevices
PnpSurpriseRemoveLockedDeviceNode
PnpSurpriseRemovedDeviceNodeDependencyCheck
PnpSynchronizeDeviceEventQueue
PnpTraceClearDevNodeProblem
PnpTraceDeviceConfig
PnpTraceDeviceRemovalForResetComplete
PnpTraceDmaGuardDevicePolicy
PnpTraceDmaGuardSystemPolicy
PnpTraceDockDeviceEnumeration
PnpTraceDriverBlocked
PnpTraceInterruptConnection
PnpTraceIommuDeviceProperties
PnpTraceRebalanceResult
PnpTraceRequestDeviceRemovalForReset
PnpTraceSecureDeviceEnumeration
PnpTraceSetDevNodeProblem
PnpTraceStartDevice
PnpTraceWatchdogViolation
PnpTrackQueryRemoveDevices
PnpUnicodeStringToWstr
PnpUnicodeStringToWstrFree
PnpUnlinkDeviceRemovalRelations
PnpUnloadAttachedDriver
PnpUnlockDeviceActionQueue
PnpUnlockMountableDevice
PnpUnregisterPlugPlayNotification
PnpUpdateExtensionFlags
PnpUpdateRebootRequiredReason
PnpValidateMultiSz
PnpValidateMultiSzData
PnpValidateRegistryDword
PnpValidateRegistryMultiSz
PnpValidateRegistryString
PnpValidateRegistryValue
PnpValidateStringData
PnpWaitForDevicesToStart
PnpWaitForEmptyDeviceActionQueue
PnpWaitForEmptyDeviceEventQueue
PnpWatchdogBugcheck
PnpWatchdogEtwWrite
PnpWatchdogExtractTriageInformation
PnpWatchdogFirstChanceCallback
PnpWatchdogSecondChanceCallback
PnpWatchdogTimerAllocate
PnpWatchdogTimerPause
PnpWatchdogTimerStart
PnprAddDeviceResources
PnprAddMemoryResources
PnprAddProcessorResources
PnprAllocateMappingReserves
PnprCollectResources
PnprCompleteWake
PnprCopyReservedMapping
PnprEndMirroring
PnprFreeMappingReserve
PnprGetMillisecondCounter
PnprGetPageDestination
PnprGetPluginDriverImagePath
PnprGetStackLimits
PnprIdentifyUnits
PnprInitializeMappingReserve
PnprInitiateReplaceOperation
PnprIsMemoryDevice
PnprIsProcessorDevice
PnprLoadPluginDriver
PnprLockPagesForReplace
PnprLogFailureEvent
PnprLogStartEvent
PnprLogSuccessEvent
PnprMapPhysicalPages
PnprMapTargetSparePhysicalPages
PnprMarkOrMirrorPages
PnprMirrorMarkedPages
PnprMirrorPhysicalMemory
PnprMmAddRange
PnprMmConstruct
PnprMmFree
PnprQueryReplaceFeatures
PnprQuiesce
PnprQuiesceDevices
PnprQuiesceProcessorDpc
PnprQuiesceProcessors
PnprQuiesceWorker
PnprRecopyAddress
PnprRecopyMappingReserve
PnprRecopyMirrorPages
PnprReplaceStart
PnprStartMirroring
PnprSwap
PnprSwapFinalize
PnprUnlockPagesForReplace
PnprWakeDevices
PnprWakeProcessors
PoAllProcessorsDeepIdle
PoBlockConsoleSwitch
PoBlockConsoleSwitchEx
PoBroadcastSystemState
PoCallDriver
PoCancelDeviceNotify
PoCaptureReasonContext
PoClearBroadcast
PoClearPowerRequest
PoClearTransitionMarker
PoCopyDeepIdleMask
PoCpuIdledSinceLastCallImprecise
PoCreatePowerLimitRequest
PoCreatePowerRequest
PoCreateThermalRequest
PoDeletePowerLimitRequest
PoDeletePowerRequest
PoDeleteThermalRequest
PoDelistPowerStateTransitionBlocker
PoDestroyReasonContext
PoDeviceAcquireIrp
PoDeviceReleaseIrp
PoDiagCaptureUsermodeStack
PoDiagFreeUsermodeStack
PoDiagTraceDeviceRundown
PoDiagTraceIRTimerSleepStudyRundown
PoDirectedDripsClearDeviceFlags
PoDirectedDripsSetDeviceFlags
PoDisableSleepStates
PoEndDeviceBusy
PoEndPartitionReplace
PoEndPowerStateTasks
PoEnergyContextCleanup
PoEnergyContextInitialize
PoEnergyContextStart
PoEnergyContextUpdateComponentPower
PoEnergyEstimationEnabled
PoExecuteIdleCheck
PoFxAbandonDevice
PoFxActivateComponent
PoFxActivateDevice
PoFxActivateDeviceForSystemTransition
PoFxAddComponentRelation
PoFxAddDeviceRelation
PoFxCompleteDevicePowerNotRequired
PoFxCompleteDirectedPowerDown
PoFxCompleteIdleCondition
PoFxCompleteIdleState
PoFxEnableDStateReporting
PoFxIdleComponent
PoFxIdleDevice
PoFxInitPowerManagement
PoFxIssueComponentPerfStateChange
PoFxIssueComponentPerfStateChangeMultiple
PoFxNotifySurprisePowerOn
PoFxPlatformRequestHandler
PoFxPowerControl
PoFxPowerOnCrashdumpDevice
PoFxPrepareDevice
PoFxProcessorNotification
PoFxQueryCurrentComponentPerfState
PoFxRegisterComponentPerfStates
PoFxRegisterCoreDevice
PoFxRegisterCrashdumpDevice
PoFxRegisterDebugger
PoFxRegisterDevice
PoFxRegisterDripsWatchdogCallback
PoFxRegisterPlugin
PoFxRegisterPluginEx
PoFxRegisterPrimaryDevice
PoFxRemoveComponentRelation
PoFxRemoveDeviceRelation
PoFxReportDevicePoweredOn
PoFxSendSystemLatencyUpdate
PoFxSetComponentLatency
PoFxSetComponentResidency
PoFxSetComponentWake
PoFxSetDeviceIdleTimeout
PoFxSetTargetDripsDevicePowerState
PoFxStartDevicePowerManagement
PoFxSystemLatencyNotify
PoFxUnregisterDevice
PoGetFrequencyBucket
PoGetIdleTimes
PoGetLightestSystemStateForEject
PoGetPerfStateAndParkingInfo
PoGetProcessorIdleAccounting
PoGetRequester
PoGetSystemWake
PoGetThermalRequestSupport
PoGetWorkloadClassCount
PoHandleIrp
PoIdle
PoInitDriverServices
PoInitHeteroDetection
PoInitHiberServices
PoInitSystem
PoInitializeBroadcast
PoInitializePrcb
PoInitiateProcessorWake
PoIsHibernateInProgress
PoIssueCoalescingNotification
PoLatencySensitivityHint
PoNotifyMediaBuffering
PoNotifySystemTimeSet
PoNotifyVSyncChange
PoPowerOffMonitor
PoPushPowerStateTransitionRecord
PoQueryPowerLimitAttributes
PoQueryPowerLimitValue
PoQueryProcessEnergyTrackingState
PoQueryWatchdogTime
PoQueueShutdownWorkItem
PoReenableSleepStates
PoRegisterCoalescingCallback
PoRegisterDeviceForIdleDetection
PoRegisterDeviceNotify
PoRegisterForEffectivePowerModeNotifications
PoRegisterPowerSettingCallback
PoRegisterSystemState
PoRequestPowerIrp
PoRequestShutdownEvent
PoRunDownDeviceObject
PoRundownSystemTimer
PoSessionBuiltinPanelState
PoSessionEngagementUpdate
PoSessionPowerControl
PoSetDeviceBusyEx
PoSetFixedWakeSource
PoSetHiberRange
PoSetPowerButtonHoldState
PoSetPowerLimitValue
PoSetPowerRequest
PoSetPowerState
PoSetProcessEnergyTrackingState
PoSetProcessorQos
PoSetSystemState
PoSetSystemWake
PoSetSystemWakeDevice
PoSetThermalActiveCooling
PoSetThermalPassiveCooling
PoSetUserPresent
PoShutdownBugCheck
PoStartDeviceBusy
PoStartNextPowerIrp
PoStartPartitionReplace
PoStartPowerStateTasks
PoStoreDiagnosticContext
PoStoreRequester
PoThermalCounterSetCallback
PoTraceDynamicTickDisabled
PoTraceForceIdleReset
PoTraceForceIdleStateChange
PoTraceSystemTimerResolution
PoTraceSystemTimerResolutionIgnore
PoTraceSystemTimerResolutionKernel
PoTraceSystemTimerResolutionUpdate
PoTtmInitiatePowerStateTransition
PoUnblockConsoleSwitch
PoUnregisterCoalescingCallback
PoUnregisterFromEffectivePowerModeNotifications
PoUnregisterPowerSettingCallback
PoUnregisterSystemState
PoUserShutdownCancelled
PoUserShutdownInitiated
PoVolumeDevice
PopAccountBatteryEnergyChange
PopAccountCbEnergyChange
PopAccumulateNonActivatedCpuTime
PopAccumulateNonDripsIdleCpuTime
PopAcquireAdaptiveLock
PopAcquireAwaymodeLock
PopAcquireCoolingInterface
PopAcquirePolicyLock
PopAcquirePowerLimitInterface
PopAcquirePowerRequestPushLock
PopAcquireRwLockExclusive
PopAcquireRwLockShared
PopAcquireTransitionLock
PopAcquireTransitionLockAfterSleep
PopAcquireUmpoPushLock
PopAcquireUserPresentSpinLock
PopAcquireWakeSourceSpinLock
PopActionRetrieveInitialState
PopActiveLockScreenPowerRequest
PopAdaptiveCalculateInputRelativeTimeout
PopAdaptiveClearInitialSystemPowerState
PopAdaptiveConsoleSessionOverrideClear
PopAdaptiveConsoleSessionOverrideTrigger
PopAdaptiveGetBootIsSystemInitiated
PopAdaptiveGetBootIsUnattended
PopAdaptiveGetBootTargetSystemState
PopAdaptiveGetConsoleSessionState
PopAdaptiveGetRemoteSessionState
PopAdaptiveGetSessionState
PopAdaptiveGetSessionStateUnsafe
PopAdaptiveGetSystemInitiatedRebootTargetBootEntry
PopAdaptiveGetSystemInitiatedRebootTargetState
PopAdaptiveInitializeBootContext
PopAdaptivePersistSystemInitatedRebootState
PopAdaptivePowerSettingCallback
PopAdaptiveSetSystemInitiatedRebootTargetStateOverride
PopAdaptiveWnfCallback
PopAddPagesToCompressedPageSet
PopAdjustHiberFile
PopAdvanceSystemPowerState
PopAllocateHiberContext
PopAllocateIrp
PopAllocateOwnMemory
PopAllocatePages
PopAllowAwayModeSettingCallback
PopAnsiStringToUnicodeString
PopApplyAdminPolicy
PopApplyLegacyPowerRequestFlags
PopApplyPolicy
PopArePowerSettingsEqual
PopArmIdlePhaseWatchdog
PopAssessSystemIdleEvent
PopAssociatePowerLimitRequest
PopAssociateThermalRequest
PopAudioAccountingCallback
PopAwayModeUserPresenceDpc
PopBatteryAdd
PopBatteryAlarmPowerSettingCallback
PopBatteryApplyCompositeState
PopBatteryCapacityToRate
PopBatteryCheckCompositeCapacity
PopBatteryCheckTrigger
PopBatteryCheckTriggerAllBatteries
PopBatteryDeviceState
PopBatteryEstimatesSpoiled
PopBatteryEtwCallback
PopBatteryGetEnergyDrainFromDischage
PopBatteryInit
PopBatteryInitPhaseTwo
PopBatteryInitialize
PopBatteryIrpComplete
PopBatteryQueryEstimatedTime
PopBatteryQueryStatus
PopBatteryQueueWork
PopBatteryReadTag
PopBatteryRemove
PopBatteryTracePercentageRemaining
PopBatteryTraceSystemBatteryStatus
PopBatteryUpdateAlarms
PopBatteryUpdateCompositeInformation
PopBatteryWaitTag
PopBatteryWakeDpc
PopBatteryWorker
PopBcdClearPendingResume
PopBcdClose
PopBcdEstablishResumeObject
PopBcdOpen
PopBcdReadElement
PopBcdRegenerateResumeObject
PopBcdSetDefaultResumeObjectElements
PopBcdSetPendingResume
PopBcdSetupResumeObject
PopBlackBoxBugcheckCallback
PopBlackBoxDirectAccess
PopBlackBoxUpdate
PopBlockSessionSwitch
PopBootBatteryStatusWorker
PopBootLoaderSiDataProcess
PopBootLoaderTraceCopyPfnList
PopBootLoaderTraceProcess
PopBootStatAccessCheck
PopBootStatCheckIntegrity
PopBootStatGet
PopBootStatRestoreDefaults
PopBootStatSet
PopBootStatUnlock
PopBroadcastBlameBugcheckCallback
PopBroadcastInputSuppressionCallback
PopBroadcastLegacyLidSwitchChangeCallback
PopBroadcastSessionInfo
PopBsdFlush
PopBsdFlushWorker
PopBsdHandleRequest
PopBsdPowerTransitionToParam1
PopBsdUpdateWorker
PopBuildDeviceNotifyList
PopBuildDeviceNotifyListWatchdog
PopBuildMemoryImageHeader
PopCacheDisplayOnPhaseDuration
PopCadHpmiPnpNotification
PopCadTriggerDriverLoad
PopCalculateCsSummary
PopCalculateHiberFileSize
PopCalculateIdleInformation
PopCalculateTotalHwDripsResidency
PopCalculateWakeTimeAdjustment
PopCallPowerSettingCallback
PopCancelIgnoreBatteryStatusChange
PopCapabilityCheck
PopCapturePlatformRole
PopCaptureReasonContext
PopCaptureSleepStudyStatistics
PopChangeCapability
PopCheckAndClearBootError
PopCheckAndHandleThermalConditions
PopCheckDisabledReason
PopCheckDisabledState
PopCheckForIdleness
PopCheckForWork
PopCheckPowerSourceAfterRtcWakeCancel
PopCheckPowerSourceAfterRtcWakeInitialize
PopCheckPowerSourceAfterRtcWakeSet
PopCheckPowerSourceAfterRtcWakeTimerCallback
PopCheckPowerSourceAfterRtcWakeTimerWorker
PopCheckResiliencyScenarios
PopCheckShutdownMarker
PopCheckSkipTick
PopCheckTestsigningEnabled
PopCheckThermalPolicy
PopCheckpointSystemSleep
PopCheckpointSystemSleepUnsafe
PopCleanCoolingExtension
PopCleanPowerLimitExtension
PopClearConnectedStandbyMarker
PopClearHiberFileSignature
PopClearHibernateDiagnosticInfo
PopClearShutdownMarker
PopClearSleepMarker
PopClearSystemShutdownMarker
PopClearSystemSleepCheckpoint
PopClearTransitionCheckpoints
PopClearUserShutdownMarkerWorker
PopCloneRange
PopCloneUnicodeString
PopCoalescingCallback
PopCoalescingCallbackWorker
PopCoalescingCheck
PopCoalescingInitialize
PopCoalescingNotify
PopCoalescingPowerSettingCallback
PopCoalescingSetActiveState
PopCoalescingSetTimer
PopCoalesingTimerDpcCallback
PopCompareActions
PopCompleteAction
PopCompleteDirectedPowerTransitionCallback
PopCompleteIrpWatchdog
PopCompleteNotifyTransitionCommon
PopCompressCallback
PopCompressHiberBlocks
PopComputeDerivedHiberStats
PopComputeWatchdogTimeout
PopConfigureHeteroPolicies
PopConfigureHeteroThresholds
PopConnectToPolicyDevice
PopConnectedStandbySettingCallback
PopConsoleLockPowerSettingCallback
PopControlMonitor
PopCoolingExtensionPnpNotification
PopCoolingSxTransition
PopCoolingTelemetryWorker
PopCopyFirmwareRuntimeInformationPfnList
PopCopyWakeSource
PopCountDataAsProduced
PopCreateDumpMdl
PopCreateDynamicIrpWorker
PopCreateHiberFile
PopCreateHiberFileSecurityDescriptor
PopCreateIdlePhaseWatchdog
PopCreateNotificationName
PopCreatePowerThread
PopCreateTimebrokerServiceSid
PopCurrentPowerState
PopCurrentPowerStatePrecise
PopDeactiveThermalRequest
PopDecompressCallback
PopDecompressHiberBlocks
PopDecrementPowerSettingPendingUpdates
PopDeepSleepClearDisengageReason
PopDeepSleepEnabled
PopDeepSleepEvaluateCallback
PopDeepSleepInitialize
PopDeepSleepPowerSettingCallback
PopDeepSleepResiliencyPhaseAccountingBegin
PopDeepSleepResiliencyPhaseAccountingEnd
PopDeepSleepResiliencyPhaseAccountingUpdate
PopDeepSleepSetDisengageReason
PopDeepSleepWatchdogTakeAction
PopDefaultPolicy
PopDeferDoze
PopDequeueQuerySetIrp
PopDereferenceWakeInfos
PopDetectSimulatedHeteroProcessors
PopDetermineBucketFrequencies
PopDeviceConstraintsEnforced
PopDeviceIdleCompletion
PopDeviceIdlePolicySettingCallback
PopDevicePowerTransitionInProgressWorker
PopDiagComputeEarlyHiberStats
PopDiagDeviceRundownWorker
PopDiagGetDriverName
PopDiagGetPowerSchemeInfo
PopDiagInitialize
PopDiagInterruptTimeToSystemTime
PopDiagQueryDevicePropertyString
PopDiagSleepStudyInitialize
PopDiagSnapActiveActivity
PopDiagSnapPassiveHistogram
PopDiagTraceAbnormalReset
PopDiagTraceAcDcStateChange
PopDiagTraceActiveCooling
PopDiagTraceAdaptiveBootOverride
PopDiagTraceAdaptiveBootOverridePrepared
PopDiagTraceAdaptiveOverrideClear
PopDiagTraceAdaptiveOverrideTriggered
PopDiagTraceAdaptiveSessionState
PopDiagTraceAppPowerMessage
PopDiagTraceAppPowerMessageEnd
PopDiagTraceBatteryAlarmStatus
PopDiagTraceBatteryCountChange
PopDiagTraceBatteryTriggerFlags
PopDiagTraceBatteryTriggerMet
PopDiagTraceClearDeepSleepConstraint
PopDiagTraceConsoleDisplayState
PopDiagTraceControlCallback
PopDiagTraceCoolingExtension
PopDiagTraceCoolingExtensionActiveUpdate
PopDiagTraceCoolingExtensionPassiveUpdate
PopDiagTraceCsConsumption
PopDiagTraceCsDeepSleepWatchdog
PopDiagTraceCsDripsDivergence
PopDiagTraceCsDripsWatchdog
PopDiagTraceCsDripsWatchdogPerfTrack
PopDiagTraceCsEnterReason
PopDiagTraceCsExitReason
PopDiagTraceCsFanPerfTrack
PopDiagTraceCsResiliencyEnter
PopDiagTraceCsResiliencyExit
PopDiagTraceCsResiliencyStats
PopDiagTraceDIrpAfterSx
PopDiagTraceDebuggerTransitionRequirements
PopDiagTraceDeepSleepConstraintRundown
PopDiagTraceDeviceAcquireIrp
PopDiagTraceDeviceComplianceRundown
PopDiagTraceDeviceComplianceUpdate
PopDiagTraceDeviceIdleCheck
PopDiagTraceDeviceVerboseRundown
PopDiagTraceDevicesLevel
PopDiagTraceDevicesSuspend
PopDiagTraceDevicesWakeEnd
PopDiagTraceDirectedDripsInitialization
PopDiagTraceDirectedDripsNotifyAppsAndServices
PopDiagTraceDirectedDripsWorker
PopDiagTraceDirtyTransition
PopDiagTraceDiskIdleCheck
PopDiagTraceDisplayBurstWin32kCallout
PopDiagTraceDozeDeferralDecision
PopDiagTraceDripsHistogram
PopDiagTraceDriverVeto
PopDiagTraceDynamicTickStatusRundown
PopDiagTraceEsState
PopDiagTraceEventNoPayload
PopDiagTraceExecutePowerAction
PopDiagTraceFirmwareS3Stats
PopDiagTraceFlushSleepStudyLogger
PopDiagTraceFlushSleepStudyLoggerEnd
PopDiagTraceFxComponentAccounting
PopDiagTraceFxComponentIdleConstraints
PopDiagTraceFxComponentIdleState
PopDiagTraceFxComponentLatency
PopDiagTraceFxComponentLogicalCondition
PopDiagTraceFxComponentRegistration
PopDiagTraceFxComponentResidency
PopDiagTraceFxComponentWake
PopDiagTraceFxDefaultPepWorkerEnd
PopDiagTraceFxDefaultPepWorkerStart
PopDiagTraceFxDeviceAccounting
PopDiagTraceFxDeviceDirectedCompletion
PopDiagTraceFxDeviceDirectedTransition
PopDiagTraceFxDeviceIdleConstraints
PopDiagTraceFxDevicePowerRequirement
PopDiagTraceFxDevicePowerState
PopDiagTraceFxDevicePowered
PopDiagTraceFxDevicePreparation
PopDiagTraceFxDeviceRegistration
PopDiagTraceFxDeviceStartPowerManagement
PopDiagTraceFxDeviceUnregistration
PopDiagTraceFxPerfNominalChange
PopDiagTraceFxPerfRequest
PopDiagTraceFxPerfRequestComplete
PopDiagTraceFxPerfRequestProgress
PopDiagTraceFxPerfSetRegistration
PopDiagTraceFxPluginRegistration
PopDiagTraceFxRundown
PopDiagTraceHiberStats
PopDiagTraceHibernateErrorStatus
PopDiagTraceIdleResiliencyEnd
PopDiagTraceIdleResiliencyStart
PopDiagTraceIllegalProcessorThrottle
PopDiagTraceInvalidBootStat
PopDiagTraceIoCoalescingDiskIdle
PopDiagTraceIoCoalescingOff
PopDiagTraceIoCoalescingOn
PopDiagTraceIrpFinish
PopDiagTraceIrpFinishTelemetry
PopDiagTraceIrpPended
PopDiagTraceIrpStart
PopDiagTraceKernelQueriesAllowed
PopDiagTraceMonitorOnWithLidClosed
PopDiagTraceMtrrError
PopDiagTraceNonAttributedCpuReferences
PopDiagTraceNotifyConsoleUserPresent
PopDiagTracePassiveCooling
PopDiagTracePerfTrackData
PopDiagTracePlatformRoleRundown
PopDiagTracePolicyChange
PopDiagTracePolicyInitiatePowerActionApiCall
PopDiagTracePostSleepNotification
PopDiagTracePowerButtonBugcheck
PopDiagTracePowerLimitExtension
PopDiagTracePowerLimitExtensionValueUpdate
PopDiagTracePowerLimitRequest
PopDiagTracePowerLimitRequestValueUpdate
PopDiagTracePowerRequestChange
PopDiagTracePowerRequestClose
PopDiagTracePowerRequestCreate
PopDiagTracePowerSetting
PopDiagTracePowerSettingRegistration
PopDiagTracePowerSettingStart
PopDiagTracePowerSettingStop
PopDiagTracePowerStateEvent
PopDiagTracePowerStateEventRundown
PopDiagTracePowerTransitionEnd
PopDiagTracePowerTransitionStart
PopDiagTracePowerTransitionTime
PopDiagTracePreSleepNotification
PopDiagTracePrepareSleep
PopDiagTracePrepareSleepEnd
PopDiagTraceProcessorThrottleDurationPerfTrack
PopDiagTraceProcessorThrottlePerfTrack
PopDiagTraceRegisterSystemState
PopDiagTraceRtcWakeInfo
PopDiagTraceServiceNotification
PopDiagTraceSessionDisplayStateChange
PopDiagTraceSessionState
PopDiagTraceSessionStateCounted
PopDiagTraceSessionStates
PopDiagTraceSetDeepSleepConstraint
PopDiagTraceSetHiberFileFailurePoint
PopDiagTraceSetSystemState
PopDiagTraceSetThreadExecutionState
PopDiagTraceShutdownAction
PopDiagTraceSkipTick
PopDiagTraceSleepReliabilityDiagConfigUpdate
PopDiagTraceSleepStudyBlocker
PopDiagTraceSleepStudyBlockerData
PopDiagTraceSleepStudyStart
PopDiagTraceSleepStudyStop
PopDiagTraceSmartSuspendPrediction
PopDiagTraceSmartSuspendValidation
PopDiagTraceStateTransitionFailurePoint
PopDiagTraceSuspendResumeNotification
PopDiagTraceSystemIdleAction
PopDiagTraceSystemIdleAssessment
PopDiagTraceSystemIdleContextUpdate
PopDiagTraceSystemIdleEventAssessment
PopDiagTraceSystemIdleRundown
PopDiagTraceSystemLatencyUpdate
PopDiagTraceThermalCoolingMode
PopDiagTraceThermalOverthrottleState
PopDiagTraceThermalRequest
PopDiagTraceThermalRequestActiveUpdate
PopDiagTraceThermalStandbyState
PopDiagTraceThermalStateChange
PopDiagTraceThermalZoneEnumeration
PopDiagTraceThermalZoneRundown
PopDiagTraceThermalZoneThrottleDurationPerfTrack
PopDiagTraceThermalZoneThrottlePerfTrack
PopDiagTraceTripPointExceeded
PopDiagTraceUmpoAlpcProcessingError
PopDiagTraceUsermodeThermalEvent
PopDiagTraceUsermodeTripPointExceeded
PopDiagTraceWin32kCalloutEnd
PopDiagTraceWin32kCalloutStart
PopDiagTraceZeroHiberFile
PopDiagTraceZeroHiberFileEnd
PopDiagTraceZoneCriticalTripPointExceeded
PopDiagTraceZoneS4TripPointExceeded
PopDirectedDripsAcquireTransitionLock
PopDirectedDripsBuildBroadcastTreeFull
PopDirectedDripsBuildBroadcastTreePartial
PopDirectedDripsBuildPs4BroadcastTree
PopDirectedDripsClearDisengageReason
PopDirectedDripsDestroyBroadcast
PopDirectedDripsDiagBroadcastTreeBegin
PopDirectedDripsDiagBroadcastTreeEnd
PopDirectedDripsDiagCreateBlockerEntryBoolean
PopDirectedDripsDiagCreateBlockerEntryULong
PopDirectedDripsDiagCreateDeviceDescription
PopDirectedDripsDiagCreateDeviceDiagnostic
PopDirectedDripsDiagDestroyDeviceDiagnostic
PopDirectedDripsDiagExtractDeviceDescription
PopDirectedDripsDiagFreeDeviceDiagnostic
PopDirectedDripsDiagGetDeviceActiveStamp
PopDirectedDripsDiagGetOrCreateDeviceDiagnostic
PopDirectedDripsDiagInitialize
PopDirectedDripsDiagInsertErrorRecord
PopDirectedDripsDiagNotifySessionStart
PopDirectedDripsDiagNotifySessionStop
PopDirectedDripsDiagPnpActionQueueAccountingUpdate
PopDirectedDripsDiagPnpActionQueueAccountingUpdateUnsafe
PopDirectedDripsDiagQueryAndResetPnpAccounting
PopDirectedDripsDiagRundownBroadcastTrees
PopDirectedDripsDiagRundownDevices
PopDirectedDripsDiagSanitizeHardwareId
PopDirectedDripsDiagTraceBroadcastFailureDevice
PopDirectedDripsDiagTraceBroadcastVisit
PopDirectedDripsDiagTraceDfxPowerStateFailure
PopDirectedDripsDiagTraceDisengageReasonChange
PopDirectedDripsDiagTraceMarkDevice
PopDirectedDripsDiagTraceNotifyDevices
PopDirectedDripsDiagTraceProblemDevice
PopDirectedDripsDiagTraceTransition
PopDirectedDripsDisengageTimerCallback
PopDirectedDripsEngage
PopDirectedDripsEventHandler
PopDirectedDripsFindPs4RootDevice
PopDirectedDripsFlushDeviceQueue
PopDirectedDripsHandleResiliencyNotification
PopDirectedDripsIdleResiliencyCallback
PopDirectedDripsInitializeBroadcast
PopDirectedDripsInitializeDeviceTree
PopDirectedDripsInitializeDisengageTimer
PopDirectedDripsInitializePhase0
PopDirectedDripsInitializePhase3
PopDirectedDripsInsertQueueDevice
PopDirectedDripsIsLikelySpecialDevice
PopDirectedDripsIsPnpSoftwareDeviceNode
PopDirectedDripsMarkCandidateDevice
PopDirectedDripsMarkDfxDevice
PopDirectedDripsNotify
PopDirectedDripsNotifyAppsAndServices
PopDirectedDripsNotifyResiliencyCompletionWorker
PopDirectedDripsNotifyTransitionFailed
PopDirectedDripsQueryEnabledMitigations
PopDirectedDripsQueryMitigationStatus
PopDirectedDripsQueryRegistryValues
PopDirectedDripsRefreshDisengageState
PopDirectedDripsReleaseTransitionLock
PopDirectedDripsRemoveQueueDevice
PopDirectedDripsResumeDevices
PopDirectedDripsSendSessionData
PopDirectedDripsSendSuspendResumeNotification
PopDirectedDripsSetDisengageReason
PopDirectedDripsStartDisengageTimer
PopDirectedDripsSuspendDevices
PopDirectedDripsUmCreateTestDevice
PopDirectedDripsUmDirectedFxAddTestDevice
PopDirectedDripsUmDirectedFxRemoveTestDevice
PopDirectedDripsUmDirectedFxSetMode
PopDirectedDripsUmGetDeviceInstancePath
PopDirectedDripsUmInitialize
PopDirectedDripsUmMarkTestDevices
PopDirectedDripsUmPowerInformationInternal
PopDirectedDripsUmQueryCapabilities
PopDirectedDripsUmTestDeviceAllocate
PopDirectedDripsUmTestDeviceCompare
PopDirectedDripsUmTestDeviceFree
PopDirectedDripsVisitDevice
PopDirectedDripsVisitPs4Device
PopDirectedDripsWorkerRoutine
PopDisableCoolingExtension
PopDisableIrpWatchdog
PopDisablePowerLimitExtension
PopDisarmIdlePhaseWatchdog
PopDiscardRange
PopDisksRegisteredForIdle
PopDispatchAcDcCallback
PopDispatchCallback
PopDispatchCallout
PopDispatchNotifications
PopDispatchNotificationsToList
PopDispatchPowerSettingCallbacks
PopDispatchQuerySetIrp
PopDispatchShutdownEvent
PopDispatchStateCallout
PopDispatchSuperfetchNotification
PopDisplayBurstEventHandler
PopDripsWatchdogAcquireContextLock
PopDripsWatchdogCallbackHandler
PopDripsWatchdogCallbackWorker
PopDripsWatchdogCheckHwDivergence
PopDripsWatchdogDiagnosticWorker
PopDripsWatchdogGetDeviceActiveTime
PopDripsWatchdogInitialize
PopDripsWatchdogInitializeCallbackTimer
PopDripsWatchdogInvokeDeviceCallbacks
PopDripsWatchdogScheduleNextTimer
PopDripsWatchdogStartWatchdog
PopDripsWatchdogTakeAction
PopDripsWatchdogTimerCallback
PopDripsWatchdogUpdateMetrics
PopEmModuleAddressMatchCallback
PopEmUpdateDeviceConstraintCallback
PopEnableHiberFile
PopEnableIrpWatchdog
PopEnableSystemSleepCheckpoint
PopEndMirroring
PopEnforceDeepSleep
PopEnforceResiliencyScenarios
PopEnlargeHiberFile
PopEnsureCoalescingWorkerWillRun
PopEnsureErratumSubscribed
PopErratumUpdateCallback
PopEsEnterSleepShutdown
PopEsEvaluateNextStateV2
PopEsExitSleep
PopEsInStandbyAcDcCallback
PopEsInStandbyEvaluate
PopEsInStandbyLowPowerEpochCallback
PopEsInit
PopEsPowerSettingBatteryThresholdCallback
PopEsPowerSettingPolicyCallback
PopEsPublishState
PopEsPublishStateV2
PopEsQueueStateEvaluation
PopEsSnapTelemetry
PopEsStartTelemetry
PopEsUpdateState
PopEsWnfOpportunisticCsCallback
PopEsWnfSubscriptionOverrideCallback
PopEsWorkItemSchedule
PopEsWorker
PopEstimateChargeTime
PopEtAggregateFind
PopEtAggregateGet
PopEtAggregateKeyCleanup
PopEtAggregateKeyCopy
PopEtAggregateKeyCopyFromProcess
PopEtAllocate
PopEtAppIdDereference
PopEtAppIdIntern
PopEtBucketsAllocate
PopEtBucketsFree
PopEtDataSectionCopyData
PopEtDataSectionReserve
PopEtDataSectionStart
PopEtDeferredInitDxgContext
PopEtEnergyContextCleanup
PopEtEnergyContextProcessStateUpdate
PopEtEnergyContextSetState
PopEtEnergyTrackerCleanup
PopEtEnergyTrackerCleanupAggregates
PopEtEnergyTrackerClose
PopEtEnergyTrackerCreate
PopEtEnergyTrackerDelete
PopEtEnergyTrackerEnumSnapshotCallback
PopEtEnergyTrackerFindDxgAdapters
PopEtEnergyTrackerInitialize
PopEtEnergyTrackerQuery
PopEtEnergyTrackerQueryProcessEnergyValues
PopEtEnergyTrackerUpdateAggregate
PopEtEnergyValuesDeltaCalculate
PopEtEnumEnergyTrackers
PopEtGetNextEnergyTracker
PopEtGetProcessAppId
PopEtGetProcessImageInfo
PopEtGetProcessSidAndPackageIdentity
PopEtGetProcessVersionInfo
PopEtInit
PopEtInitializeBuiltinAppId
PopEtInternerAllocate
PopEtInternerEntryInitialize
PopEtInternerFree
PopEtInternerLock
PopEtInternerUnlock
PopEtIsrDpcQuery
PopEtProcessEnumSnapshotCallback
PopEtProcessSnapshotCreate
PopEtProcessSnapshotFind
PopEtProcessSnapshotUpdate
PopEtProcessSnapshotUpdateFromSnapshotContext
PopEtStringIntern
PopEtStringReference
PopEtStringSet
PopEvaluateGlobalUserStatus
PopEvaluateInputSuppressionAction
PopEvaluateInputSuppressionRequired
PopEvaluatePowerButtonSuppressionState
PopEvaluatePowerLimitChange
PopEvaluateWeakChargerState
PopEventCalloutDispatch
PopExecuteOnTargetProcessors
PopExecutePowerAction
PopExecuteProcessorCallback
PopExecuteSystemIdleAction
PopExtendConnectionState
PopExternalMonitorUpdatedWorker
PopFanAdd
PopFanEndCsFanPeriod
PopFanFindBucketIndex
PopFanIrpComplete
PopFanReadFanNoiseInfo
PopFanRemove
PopFanReportBootStartDevices
PopFanSetNoiseImpact
PopFanSetupRpmBuckets
PopFanSxEntry
PopFanSxExit
PopFanUpdateCsState
PopFanUpdateRunningState
PopFanUpdateSpeed
PopFanUpdateStatistics
PopFanWorker
PopFastS4Check
PopFilterCapabilities
PopFindNextSystemPowerState
PopFindPowerSettingConfiguration
PopFireThermalWmiEvent
PopFlushAndHold
PopFlushVolumeBlameResolverCallback
PopFlushVolumeWorker
PopFlushVolumes
PopFreeHiberContext
PopFreeIrp
PopFreePowerLimitRequest
PopFreeRegistration
PopFreeSessionState
PopFreeWakeInfo
PopFreeWakeSource
PopFxAccumulateDeviceIRPhaseAccounting
PopFxAcpiDispatchNotification
PopFxAcpiForwardNotification
PopFxAcpiForwardPepAcpiNotifyRequest
PopFxAcpiForwardPepWorkRequest
PopFxAcpiPrepareDevice
PopFxAcpiRegisterDevice
PopFxAcpiUnregisterDevice
PopFxAcpiValidateParameters
PopFxActivateComponent
PopFxActivateComponentDependents
PopFxActivateComponentWorker
PopFxActivateDevice
PopFxActivateDevicesForSx
PopFxAddLogEntry
PopFxAllocatePowerIrp
PopFxArmResidentTimer
PopFxAssignDeviceToDevNode
PopFxBeginDeviceIRPhaseAccounting
PopFxBugCheck
PopFxBuildDirectedDripsCandidateDeviceList
PopFxBuildDripsBlockingDeviceList
PopFxClearDeviceConstraints
PopFxClearDirectedDripsCandidateDeviceList
PopFxCompleteComponentActivation
PopFxCompleteComponentPerfState
PopFxCompleteDevicePowerRequired
PopFxCompleteDirectedPowerTransition
PopFxComponentPerfWork
PopFxComponentRelationsCleanup
PopFxComponentWork
PopFxConvertV1Components
PopFxCreateDeviceCommon
PopFxCreateStaticWorkPoolThread
PopFxDeactivateComponentDependencies
PopFxDebuggerPowerCriticalTransitionCallback
PopFxDeliverDevicePowerRequired
PopFxDerefAndCompleteDirectedPowerTransition
PopFxDereferenceDevice
PopFxDestroyDeviceCommon
PopFxDestroyDeviceDpm
PopFxDestroyDirectedDripsCandidateDeviceList
PopFxDestroyDripsBlockingDeviceList
PopFxDeviceRelationsCleanup
PopFxDeviceWork
PopFxDirectedPowerTransitionWorker
PopFxDirectedWorkOrderWatchdog
PopFxDisableBasicAccountingWorker
PopFxDisableWorkOrderWatchdog
PopFxDispatchPluginWorkOnce
PopFxDuplicateUniqueId
PopFxEnablePlatformStates
PopFxEnableWorkOrderWatchdog
PopFxEndDeviceIRPhaseAccounting
PopFxEnforceDirectedPowerTransition
PopFxFindAcpiDeviceByUniqueId
PopFxFindAndReferenceAcpiDevice
PopFxFindDeviceAndAllocateUniqueId
PopFxGetDeviceDStateReason
PopFxGetLatencyLimitWithoutResiliency
PopFxGetParentFxDevice
PopFxHandleDirectedPowerTransition
PopFxHandleReportDevicePoweredOn
PopFxIdleComponent
PopFxIdleDevicesFromSx
PopFxIdleTimeoutDpcRoutine
PopFxIdleWorker
PopFxIdleWorkerTail
PopFxIncrementDeviceSleepCount
PopFxInitializeSocSubsystemStaticInfo
PopFxInitializeWorkPool
PopFxInsertAcpiDevice
PopFxInsertDevice
PopFxInsertDeviceRelation
PopFxInvokeDripsWatchdogCallback
PopFxIsDevicePotentialDripsConstraint
PopFxIsDirectedPowerTransitionSupported
PopFxIsDripsBlockingDevice
PopFxIssueComponentPerfStateChanges
PopFxIssueDirectedPowerTransition
PopFxLockDevice
PopFxLogSocSubsystemBlockingTimes
PopFxLogSocSubsystemMetadata
PopFxLookupSocSubsystemsByPlatformIdleState
PopFxLowPowerEpochCallback
PopFxMergeActiveTimeAccounting
PopFxNextComponentChildRelationSafe
PopFxNextParentRelationSafe
PopFxNotifyPostDIrpCompletion
PopFxNotifyPreDIrpCompletion
PopFxNotifyPreDIrpIssue
PopFxNotifySxTransitionState
PopFxNotifySystemStateTransition
PopFxPauseDeviceAccounting
PopFxPepPerfInfoFree
PopFxPepPerfInfoQuery
PopFxPlatformIdleVeto
PopFxPlatformRegisterInterface
PopFxPlatformStateAvailable
PopFxPluginWork
PopFxPrepareDevicesForShutdown
PopFxProcessWork
PopFxProcessWorkPool
PopFxProcessorIdleVeto
PopFxQueryBiosDeviceName
PopFxQueryCurrentComponentPerfState
PopFxQueueWorkItem
PopFxQueueWorkOrder
PopFxReferenceDevice
PopFxRegisterComponentPerfStates
PopFxRegisterDevice
PopFxRegisterDeviceWithPep
PopFxRegisterDeviceWorker
PopFxRegisterPluginEx
PopFxReinitializeAccountingInstance
PopFxReleaseAcpiRefDevice
PopFxReleasePowerIrp
PopFxRemoveAcpiDevice
PopFxRemoveDevice
PopFxRequestCommon
PopFxRequestWorker
PopFxRequestWorkerInternal
PopFxResetSocSubsystemAccounting
PopFxResidentTimeoutDpcRoutine
PopFxResidentTimeoutRoutine
PopFxResumeDeviceAccounting
PopFxScheduleDeviceIdleTimer
PopFxSetDripsBlockedByDeviceActivity
PopFxSetGlobalDeviceAccountingEnabled
PopFxStartDeviceAccounting
PopFxStaticWorkPoolThread
PopFxStopDeviceAccounting
PopFxTraceDeviceRegistration
PopFxTracePerfRegistration
PopFxTransitionCriticalResource
PopFxTryReferenceDevice
PopFxUnregisterDevice
PopFxUnregisterDeviceOrWait
PopFxUpdateAccountingActiveTime
PopFxUpdateComponentAccountingEnhanced
PopFxUpdateComponentPerfStateNominalChange
PopFxUpdateDeviceAccountingEnhanced
PopFxUpdateDeviceIRPhaseAccounting
PopFxUpdateDeviceIdleTimer
PopFxUpdateGlobalDeviceAccountingInfo
PopFxUpdatePlatformIdleState
PopFxUpdateProcessorIdleState
PopFxUpdateVetoMaskWork
PopFxValidateReturnedUnicodeString
PopFxVerifyDependencies
PopFxWorkOrderWatchdog
PopGenerateDeviceFriendlyName
PopGenerateMdl
PopGenericEventHandler
PopGetBitlockerKeyLocation
PopGetCallerContextFromBuffer
PopGetCurrentWakeInfos
PopGetDope
PopGetDozeTimerSource
PopGetEnergyCounter
PopGetEnergyEstimationInfo
PopGetHwConfigurationSignature
PopGetIdleTimesCallback
PopGetIoLocation
PopGetLegacyPowerRequestFlags
PopGetListHead
PopGetModernStandbyTransitionReason
PopGetMonitorReasonFromPowerEventId
PopGetMostRecentWakeInfo
PopGetNextTable
PopGetPolicyDeviceObject
PopGetPolicyWorker
PopGetPowerRequestListInfo
PopGetPowerSettingValue
PopGetReasonListByReasonCode
PopGetRemainingHibernateRangeDataSize
PopGetSessionId
PopGetSettingNotificationName
PopGetSettingValue
PopGetTransitionsToOnCount
PopGetWakeSource
PopGracefulShutdown
PopHaltDeviceIdle
PopHandleDevicePowerIrpCompletion
PopHandleNextState
PopHandleProvIdentifierRequest
PopHandleWakeSources
PopHardDiskPowerSettingCallback
PopHeteroCapabilityDeepCopy
PopHiberCheckForDebugBreak
PopHiberCheckResume
PopHiberChecksumHiberFileData
PopHiberEvaluateSkippingMemoryMapValidation
PopHiberInitializeResources
PopHiberPeekRangeTable
PopHiberReadChecksums
PopHiberWriteBootFreePageMap
PopHibernateEvaluation
PopIdleAoAcDozeS4TimerCallback
PopIdleAoAcDozeToS4
PopIdleArmAoAcDozeS4Timer
PopIdleCancelAoAcDozeS4Timer
PopIdleChooseDozeS4Time
PopIdleCsStateChanged
PopIdleGlobalUserPresenceCallback
PopIdleInitAoAcDozeS4Timer
PopIdlePhaseWatchdogCallback
PopIdleTriggerAdaptiveStandbyAction
PopIdleWakeAreIdenticalWakeSources
PopIdleWakeAssignAccountingToSource
PopIdleWakeCalculateConvergedBuckets
PopIdleWakeConvertIntervalBucketsFrom
PopIdleWakeDelayedWakeSourceReferencer
PopIdleWakeFindOrAllocateWakeSource
PopIdleWakeFreeWakeSourceAccounting
PopIdleWakeFreeWakeSourceDiagnostic
PopIdleWakeGenerateDescriptionString
PopIdleWakeGenerateInterruptDescriptionString
PopIdleWakeInitialize
PopIdleWakeInsertTimeInterval
PopIdleWakeNotifyDevicesActive
PopIdleWakeNotifyIdleResiliencyState
PopIdleWakeNotifyModernStandbyEnter
PopIdleWakeNotifyModernStandbyExit
PopIdleWakeNotifyModernStandbyExitWorker
PopIdleWakeNotifyWakeSource
PopIdleWakeSendDripsWakeSourceTelemetry
PopIdleWakeSourceAccountingBucketsToDiagnosticBuckets
PopIdleWakeSourceAccountingToDiagnostic
PopIdleWakeStopActiveIntervalAccounting
PopIdleWakeSystemImageCallback
PopIdleWakeTraceWakeSourceDiagnostic
PopIgnoreBatteryStatusChange
PopIncrementPowerSettingPendingUpdates
PopInitDripsWakeAccounting
PopInitHiberPersistedRegValues
PopInitPlatformSettings
PopInitShutdownList
PopInitSystemSleeperThread
PopInitVideoWnfState
PopInitializeAdpm
PopInitializeDirectedDrips
PopInitializeHeteroProcessors
PopInitializeHibernateGlobals
PopInitializeHighPerfPowerRequest
PopInitializeIRTimer
PopInitializeIrpWorkers
PopInitializePowerButtonHold
PopInitializePowerPolicySimulate
PopInitializePowerSettingCallbacks
PopInitializePowerSettings
PopInitializeSystemIdleDetection
PopInitializeTimer
PopInitializeWin32kActivator
PopInitializeWorkItem
PopInitilizeAcDcSettings
PopIntSteerSetMode
PopIntSteerSetPerProcTrigger
PopIntSteerSetTimeUnparkTrigger
PopInternalAddToDumpFile
PopInternalSaveStackToDumpFile
PopInterruptSteeringEnabled
PopInvokeStateHandlerTargetProcessor
PopInvokeSystemStateHandler
PopInvokeWin32Callout
PopInvokeWin32CalloutWithWatchdog
PopIrpWatchdog
PopIrpWatchdogBugcheck
PopIrpWorker
PopIrpWorkerControl
PopIsAddressRangeValid
PopIsDetailedSleepReliabilityDiagEnabled
PopIsDirectedDripsEnabled
PopIsDozeSupported
PopIsHiberbootSupported
PopIsHibernateSupported
PopIsInputSuppressionEngaged
PopIsLockConsoleTimeoutActive
PopIsMktmeEnabled
PopIsMostRecentWakeAttended
PopIsNotifyForDirectedPowerTransition
PopIsPlatformAoAcCapable
PopIsPlatformAoAcCapableInitialized
PopIsRemoteDesktopEnabled
PopIsRunningAsLocalSystem
PopIsStateTransitionBlockingThread
PopIsSystemIdle
PopIsWakeTimerImmanent
PopIssueActionRequest
PopIssueDirectedPowerTransition
PopIssueNextState
PopKsrCallback
PopLidReliabilityInit
PopLidSwitchChangeCallback
PopLidSwitchReliabilityUpdateCallback
PopLoadResumeContext
PopLockGetDoDevicePowerState
PopLogDisabledSleepReason
PopLogNotifyDevice
PopLogSleepDisabled
PopLoggingInformation
PopManageTransitionRecordRequest
PopMapInternalActionToIrpAction
PopMarkComponentsBootPhase
PopMarkHiberPhase
PopMarshalSettingValues
PopMeasureEnergyChange
PopMirrorPhysicalMemory
PopMonitorAlpcCallback
PopMonitorInvocation
PopMonitorProcessBrightnessAction
PopMonitorProcessLoop
PopMoveList
PopNetArmRefreshTimer
PopNetClearConnectivityConstraint
PopNetCompliantNicUpdate
PopNetConnectivityInStandbyCallback
PopNetDisarmRefreshTimer
PopNetDisconnectedStandbyModeCallback
PopNetDisengageNetworkRefresh
PopNetEvaluateStateMask
PopNetEvaluationTimerCallback
PopNetEvaluationWorkerCallback
PopNetGetNextDueRefreshTime
PopNetInitialize
PopNetIsCompliantNicPresent
PopNetIsDisconnectStandbyActive
PopNetIsNetworkRefreshEnabled
PopNetNonCompliantDeviceUpdate
PopNetPublishWnfStateUpdate
PopNetRefreshTimerCallback
PopNetRefreshTimerWorkerCallback
PopNetSetConnectivityConstraint
PopNetSetResiliencyPhaseBias
PopNetUpdateCsConsumptionFlags
PopNetUpdateDsAccounting
PopNetUpdateStandbyRequest
PopNetWnfLowPowerEpochCallback
PopNewProcessorCallback
PopNewWakeInfo
PopNewWakeSource
PopNotifyCallbacksPreSleep
PopNotifyConsoleUserPresent
PopNotifyCsStateExited
PopNotifyDevice
PopNotifyLidStateChange
PopNotifyPolicyDevice
PopNotifyShutdownListener
PopNotifyTelemetryOsState
PopNotifyWin32kRequestStatus
PopOkayToQueueNextWorkItem
PopOpenHiberPersistedKey
PopOpenKey
PopOpenPersistedRegistryKey
PopOpenPowerKey
PopOpenThermalLoggingKey
PopOrphanCoolingExtension
PopOrphanPowerLimitExtension
PopPdcAreAllPhasesDisengaged
PopPdcCallback
PopPdcCompleteResiliencyCallback
PopPdcCsCheckSystemVolumeDevice
PopPdcCsDeviceNotification
PopPdcDisengagePhases
PopPdcEngagePhases
PopPdcIdleResiliencyCallback
PopPdcInvocation
PopPdcRegister
PopPdcSnapDiagnosticContext
PopPdcUpdateDeviceCompliance
PopPepArmIdleTimer
PopPepCancelActivityRange
PopPepClearDripsDeviceVetoMask
PopPepCompleteComponentActiveActivity
PopPepCompleteComponentIdleState
PopPepCompleteComponentIdleStateChangeActivity
PopPepCompleteDevicePowerOnActivity
PopPepCompleteVoidActivity
PopPepComponentGetLatencyIdleState
PopPepComponentGetResidencyIdleState
PopPepComponentSetLatency
PopPepComponentSetResidency
PopPepComponentSetWakeHint
PopPepCountReadyActivities
PopPepDeviceDState
PopPepDeviceStarted
PopPepGetComponentPreferedIdleState
PopPepGetComponentVetoMasks
PopPepGetDevicePlatformStateDependents
PopPepGetDeviceVetoMasks
PopPepGetMinimumDevicePowerState
PopPepGetReadyActivityType
PopPepIdleTimeoutDpcRoutine
PopPepIdleTimeoutRoutine
PopPepInitializeConstraintOverrides
PopPepInitializeDebuggerMasks
PopPepInitializeVetoMasks
PopPepInsertDevice
PopPepIterateDeviceList
PopPepLockActivityLink
PopPepPlatformStateRegistered
PopPepProcessEvent
PopPepPromoteActivities
PopPepRegisterComponentPerfStates
PopPepRegisterDevice
PopPepReleaseActivityLink
PopPepRemoveDevice
PopPepRequestWork
PopPepStartActivity
PopPepStartComponentActivatingActivity
PopPepStartComponentIdleStateChangeActivity
PopPepStartDevicePowerOffActivity
PopPepStartDevicePowerOnActivity
PopPepStartDeviceUnregisterActivity
PopPepStartVoidActivity
PopPepSurprisePowerOn
PopPepTriggerActivity
PopPepTriggerComponentActivatingActivity
PopPepTriggerComponentActiveActivity
PopPepTriggerComponentIdleStateChangeActivity
PopPepTriggerVoidActivity
PopPepUnregisterDevice
PopPepUpdateConstraints
PopPepUpdateDripsDeviceVetoMask
PopPepUpdateIdleState
PopPepUpdateIdleStateRefCount
PopPepWaitForDeviceRelease
PopPepWork
PopPlActivateDeviceIterator
PopPlCalculateDevicePowerDraw
PopPlCommitPowerPlaneRegistration
PopPlIdleDeviceIterator
PopPlInitComponent
PopPlInitComponents
PopPlInitDevice
PopPlInitDevices
PopPlInitPowerPlane
PopPlInitWString
PopPlLookupComponentPowerProfile
PopPlLookupDevicePowerProfile
PopPlNotifyDeviceDState
PopPlNotifyDeviceFState
PopPlPublishInitialPowerDraw
PopPlPublishSystemPowerChange
PopPlRegisterComponent
PopPlRegisterDevice
PopPlRegisterDeviceIterator
PopPlRegisterPowerPlane
PopPlTraceLogPowerPlane
PopPlUnregisterComponent
PopPlUnregisterDevice
PopPluginAbandonDevice
PopPluginAcpiNotification
PopPluginAcpiNotificationStrict
PopPluginComponentActive
PopPluginComponentIdleState
PopPluginInitializeSocSubsystemStaticInfo
PopPluginNotifyIdleState
PopPluginPrepareDevice
PopPluginQueryComponentPerfCapabilities
PopPluginQueryComponentPerfSet
PopPluginQueryComponentPerfSetName
PopPluginQueryComponentPerfStates
PopPluginQuerySocSubsystemBlockingTime
PopPluginQuerySocSubsystemMetadata
PopPluginRegisterComponentPerfStates
PopPluginRegisterCrashdumpDevice
PopPluginRegisterDevice
PopPluginRequestComponentIdleConstraints
PopPluginRequestComponentPerfState
PopPluginRequestDeviceIdleConstraints
PopPluginRequestPowerControl
PopPluginUnregisterDevice
PopPoCoalescingCallback
PopPolicyDeviceHandleWakeAlarmNotification
PopPolicyDeviceRemove
PopPolicyDeviceTargetChange
PopPolicyTimeChange
PopPolicyWorkerAction
PopPolicyWorkerActionPromote
PopPolicyWorkerNotify
PopPolicyWorkerThread
PopPotsGetActionEntryReason
PopPotsLogDirtyPowerTransition
PopPotsLogHibernatePerformance
PopPotsLogPowerTransitionReliability
PopPowerActionWatchdog
PopPowerAggregatorActiveToScreenOffStateHandler
PopPowerAggregatorAllocateLogEntry
PopPowerAggregatorAreTargetStatesEqual
PopPowerAggregatorDetermineTargetSystemPowerState
PopPowerAggregatorDiagTraceEvent
PopPowerAggregatorDiagTraceHandleIntent
PopPowerAggregatorDiagTraceHandlerInvoke
PopPowerAggregatorDiagTraceInternalStateChange
PopPowerAggregatorDiagTracePdcSleepTransition
PopPowerAggregatorDiagTraceSuspendResume
PopPowerAggregatorDisengageModernStandby
PopPowerAggregatorDisplayPoweringOnStateHandler
PopPowerAggregatorDozeTimerArm
PopPowerAggregatorDozeTimerCallback
PopPowerAggregatorDozeTimerDisarm
PopPowerAggregatorDozeTimerWorker
PopPowerAggregatorEngageAggressiveStandbyActions
PopPowerAggregatorEngageModernStandby
PopPowerAggregatorEnterScreenOff
PopPowerAggregatorEvaluateDozeTimers
PopPowerAggregatorForceSessionSwitch
PopPowerAggregatorGetCurrentTargetState
PopPowerAggregatorHandleActiveIntent
PopPowerAggregatorHandleDirectedDripsIntent
PopPowerAggregatorHandleIntent
PopPowerAggregatorHandleIntentUnsafe
PopPowerAggregatorHandleModernStandbyIntent
PopPowerAggregatorHandleResumeIntent
PopPowerAggregatorHandleSuspendIntent
PopPowerAggregatorHandleSystemTransitionEndIntent
PopPowerAggregatorHandleSystemTransitionIntent
PopPowerAggregatorHandleSystemTransitionStartIntent
PopPowerAggregatorInitialize
PopPowerAggregatorInvalidStateHandler
PopPowerAggregatorInvokeStateMachine
PopPowerAggregatorIsAtTargetState
PopPowerAggregatorModernStandbyEnterStateHandler
PopPowerAggregatorModernStandbyExitStateHandler
PopPowerAggregatorNotifyAcDcStateChange
PopPowerAggregatorNotifyCsStateExited
PopPowerAggregatorNotifyDisplayPoweredOn
PopPowerAggregatorNotifyPdcPhaseState
PopPowerAggregatorNotifyPdcSleepTransition
PopPowerAggregatorNotifyResiliencyReached
PopPowerAggregatorNotifySuspendResume
PopPowerAggregatorNotifySystemWake
PopPowerAggregatorRecordIntent
PopPowerAggregatorScheduleWorker
PopPowerAggregatorScreenOffActiveToActiveStateHandler
PopPowerAggregatorScreenOffActiveToScreenOffStateHandler
PopPowerAggregatorScreenOffEnterStateHandler
PopPowerAggregatorScreenOffExitStateHandler
PopPowerAggregatorSessionSwitchTimerCallback
PopPowerAggregatorSessionSwitchWorker
PopPowerAggregatorSetCurrentState
PopPowerAggregatorSnapDiagnosticContext
PopPowerAggregatorStartNextSession
PopPowerAggregatorSystemTransitionEnterStateHandler
PopPowerAggregatorSystemTransitionExitStateHandler
PopPowerAggregatorVoidStateHandler
PopPowerAggregatorWorker
PopPowerButtonBugcheckConfigure
PopPowerButtonBugcheckWatchCallback
PopPowerButtonSettingCallback
PopPowerButtonSuppressionInit
PopPowerButtonTimerCallback
PopPowerButtonWorkCallback
PopPowerInformationInternal
PopPowerLimitPnpNotification
PopPowerLimitSxTransition
PopPowerLimitTelemetryWorker
PopPowerLimitUpdatePendingEvents
PopPowerRequestActionInfo
PopPowerRequestCallbackAwayModeRequired
PopPowerRequestCallbackDisplayRequired
PopPowerRequestCallbackExecutionRequired
PopPowerRequestCallbackPerfBoostRequired
PopPowerRequestCallbackWorker
PopPowerRequestClose
PopPowerRequestCreateCommon
PopPowerRequestCreateUserModeRequest
PopPowerRequestDebounceTimerCallback
PopPowerRequestDebounceTimerWorker
PopPowerRequestDelete
PopPowerRequestEvaluateExecutionRequiredStatus
PopPowerRequestEvaluatePendingRequestStatus
PopPowerRequestExecutionRequiredSettingCallback
PopPowerRequestExecutionRequiredTimeoutCallback
PopPowerRequestExecutionRequiredTimeoutWorker
PopPowerRequestHandleClose
PopPowerRequestHandleExecutionEnablementUpdate
PopPowerRequestHandleRequestOverrideQueryResponse
PopPowerRequestHandleRequestUpdate
PopPowerRequestInitialize
PopPowerRequestNotificationsBegin
PopPowerRequestNotifyMobileHotspotChanged
PopPowerRequestNotifyTtmSessionInitialized
PopPowerRequestNotifyTtmSessionUninitialized
PopPowerRequestNotifyUserSessionAttributed
PopPowerRequestOverrideInitialize
PopPowerRequestReferenceAcquire
PopPowerRequestReferenceRelease
PopPowerRequestRevokeRequests
PopPowerRequestRevokeRequestsForSleep
PopPowerRequestSetExecutionRequiredTimeoutTimer
PopPowerRequestSpecialRequestClear
PopPowerRequestSpecialRequestSet
PopPowerRequestStatsCreate
PopPowerRequestStatsCreateSleepstudyBlocker
PopPowerRequestStatsFreeId
PopPowerRequestStatsGetIdForRequest
PopPowerRequestStatsIdConcat
PopPowerRequestStatsInitialize
PopPowerRequestStatsIsDetailedRequestReason
PopPowerRequestStatsNotifyScenarioStateChange
PopPowerRequestStatsSetActive
PopPowerRequestTableAllocate
PopPowerRequestTableCompare
PopPowerRequestTableDeleteEntry
PopPowerRequestTableFree
PopPowerRequestTableInsertEntry
PopPowerRequestTableLookupEntry
PopPowerRequestUnrevokeRequests
PopPowerSettingPendingUpdateWatchdog
PopPowerSourceChangeCallback
PopPowerTransitionTimesInMs
PopPreCriticalBatteryNotify
PopPreallocateHibernateMemory
PopPrepChildWake
PopPrepareIoctl
PopPrepareSleep
PopPrintEx
PopPrintUserActivityPresence
PopProcessDeviceWakeSource
PopProcessSessionDisplayStateChange
PopProcessWakeSourceWork
PopProcessorInformation
PopProcessorNotifyLpiCoordinatedStatesNotification
PopProcessorParkMaskNotification
PopProcessorParkNotification
PopProcessorQueryCoordinatedDependencyNotification
PopProcessorQueryPlatformStateNotification
PopProcessorSetPep
PopPromoteActionFlag
PopPropogateCoolingChange
PopPublishPowerButtonState
PopPulseSystemIdleEvent
PopPushPowerStateTransitionRecord
PopPushPowerStateTransitionRecordWithCallback
PopQpcTimeInMs
PopQueryBootSessionStandbyActivationInfo
PopQueryHiberPersistedRegValue
PopQueryInputSuppressionCount
PopQueryLastStateTransitionInfo
PopQueryMostRecentWakeSourceAttributes
PopQueryMostRecentWakeSourceInfo
PopQueryPowerButtonBugcheckEnabled
PopQueryPowerButtonConfiguration
PopQueryPowerButtonSuppressionCount
PopQueryPowerLimitAttributes
PopQueryPowerSettingUlong
PopQueryRemainingSystemIdleTime
PopQueueDirectedDripsWork
PopQueueQuerySetIrp
PopQueueTargetDpc
PopQueueWorkItem
PopReadErrataForIncorrectLidNotification
PopReadErrataSkipMemoryOverwriteRequestControlLockAction
PopReadHiberbootGroupPolicy
PopReadHiberbootPolicy
PopReadLegacySimulatedArchitecturalClasses
PopReadPagesFromHiberFile
PopReadProducerConsumerBuffer
PopReadRegKeyValue
PopReadResumeContext
PopReadShutdownPolicy
PopReadSimulatedArchitecturalClasses
PopReadSimulatedHGSClasses
PopReadSimulatedProcessorClass
PopReadSystemAwayModePolicy
PopReadUlongPowerKey
PopReadWheaBootErrorCount
PopReadyChildWake
PopReadyParentSleep
PopRecalculateCBTriggerLevels
PopRecordAcDcState
PopRecordBatteryPercentage
PopRecordDisplayState
PopRecordFirmwareResetReason
PopRecordHibernateDiagnosticInfo
PopRecordLidStateWorker
PopRecordLongPowerButtonPressDetected
PopRecordPepWorkorderBlackboxInformation
PopRecordPhysicalPowerButton
PopRecordPoBlackboxInformation
PopRecordPoIrpBlackboxInformation
PopRecordPowerWatchdogBlackboxInformation
PopRecordSleepCheckpoint
PopRecordSleepCheckpointSource
PopRecorderInit
PopRefreshEstimateAfterSpoilingDpc
PopRegisterCoolingExtensionProtection
PopRegisterEnergyEstimation
PopRegisterTargetDeviceProtection
PopReleaseAdaptiveLock
PopReleaseAwaymodeLock
PopReleasePolicyLock
PopReleasePowerRequestPushLock
PopReleaseRwLock
PopReleaseTransitionLock
PopReleaseUmpoPushLock
PopReleaseUserPresentSpinLock
PopReleaseWakeSourceSpinLock
PopRemoveReasonRecordByReasonCode
PopRequestCompletion
PopRequestPowerIrp
PopRequestRead
PopRequestShutdownWait
PopRequestWrite
PopResetActionDefaults
PopResetCBTriggers
PopResetCurrentPolicies
PopResetIdlePhaseWatchdogDiagnosticContext
PopResetRangeEnum
PopResizeHiberFile
PopResolveWatchdogParam
PopRestoreHiberContext
PopResumeApps
PopResumeDeviceIdle
PopResumeServices
PopRunMaximumIrpWorkers
PopRunNormalIrpWorkers
PopRundownPowerLimitRequests
PopRundownThermalRequests
PopS0LowPowerIdleInfo
PopSafeCopyUnicodeString
PopSanityCheckHiberFile
PopSaveHiberContext
PopSaveHiberContextWrapper
PopSaveLidReliabilityState
PopScanIdleList
PopScreenOff
PopScreenOn
PopSendFanNoiseChangeWnf
PopSendSessionInfo
PopSendSuspendResumeApplicationNotification
PopSendSuspendResumeNotifications
PopSendSuspendResumeServiceNotification
PopSessionConnected
PopSessionConnectionChange
PopSessionDisconnected
PopSessionWinlogonNotification
PopSetAwayModeStatus
PopSetBatteryDischargingState
PopSetBootPhaseRange
PopSetCleanShutdownMarker
PopSetConnectedStandbyMarker
PopSetDevicesSystemState
PopSetDisplayStatus
PopSetGlobalUserStatus
PopSetHiberFileMcb
PopSetHiberFileSize
PopSetHiberFileType
PopSetHiberPersistedRegValue
PopSetMemoryOverwriteRequestAction
PopSetModernStandbyTransitionReason
PopSetNewPolicyValue
PopSetNotificationWork
PopSetPowerActionState
PopSetPowerActionWatchdogState
PopSetPowerSettingValue
PopSetPowerSettingValueAcDc
PopSetRange
PopSetSessionDisplayStatus
PopSetSessionUserStatus
PopSetShutdownMarker
PopSetSleepMarker
PopSetSystemAwayMode
PopSetSystemState
PopSetUserShutdownMarkerWorker
PopSetWatchdog
PopSetupAirplaneModeNotification
PopSetupAudioEventNotification
PopSetupBluetoothChargingNotification
PopSetupFullScrenVideoNotification
PopSetupHighPerfPowerRequest
PopSetupKsrCallbacks
PopSetupMixedRealitytNotification
PopSetupMobileHotspotNotification
PopSetupSleepNotifies
PopSetupSprActiveSessionChangeNotification
PopSetupUserPresencePredictionNotification
PopShutdownHandler
PopShutdownListenerInsertCallback
PopShutdownListenerRemoveCallback
PopShutdownSystem
PopSleepDeviceList
PopSleepPowerSettingCallback
PopSleepstudyCaptureResiliencyStatistics
PopSleepstudyCaptureSessionStatistics
PopSleepstudyInitialize
PopSleepstudyScenarioStopTimerCallback
PopSleepstudyScenarioStopWorker
PopSleepstudySendSessionChangeEvent
PopSleepstudySendSessionChangeWnf
PopSleepstudySendWnfNotification
PopSleepstudySnapModernStandbySessionData
PopSleepstudyStartNextSession
PopSleepstudyUlong64Formatter
PopSleepstudyUlongFormatter
PopSmartSuspendInit
PopSmartSuspendMakePredictions
PopSmartSuspendResetData
PopSmartSuspendValidatePredictions
PopSmartSuspendValidateSinglePrediction
PopSnapSystemIdleContext
PopSpoilBatteryEstimate
PopSpoilEstimatesOnPowerStateTransitionWorker
PopSqmAddToStream
PopSqmBatteryUpdate
PopSqmCreateDwordStreamEntry
PopSqmFanEnumeration
PopSqmThermalCriticalEvent
PopSqmThermalCriticalShutdown
PopSqmThermalHibernate
PopSqmThermalUsermodeEvent
PopSqmThermalZoneEnumeration
PopSstDiagAddResumeTimestampAdjustment
PopSstDiagInitializeResumeTimer
PopSstDiagQueryResumeTimestamp
PopStartMirroring
PopStateIsSessionSpecific
PopStateTransitionTimeoutDispatch
PopSuspendApps
PopSuspendResumeInvocation
PopSuspendResumePdc
PopSuspendServices
PopSwitchForcedShutdownSettingCallback
PopSwitchUpdateUserShutdownScenarioState
PopSxTransitionEventHandler
PopSystemIdleEventHandler
PopSystemIdleWorker
PopSystemIrpCompletion
PopSystemRequiredSet
PopSystemTimeToLocalTime
PopThermalCoolingPowerSettingCallback
PopThermalCsEntry
PopThermalCsExit
PopThermalEventTransitionDisableDeepSleep
PopThermalEventTransitionEnableDeepSleep
PopThermalEventTransitionTimerCallback
PopThermalHandlePreviousShutdown
PopThermalInit
PopThermalIrpComplete
PopThermalPollingPowerSettingCallback
PopThermalProcessUsermodeEvent
PopThermalReadCounters
PopThermalStandbyEndTracking
PopThermalStandbyNotify
PopThermalStateTransitionWorker
PopThermalSxEntry
PopThermalSxExit
PopThermalTelemetryCallback
PopThermalTelemetryWorker
PopThermalTraceRundownEvents
PopThermalUpdateActiveTimeTracking
PopThermalUpdatePassiveTimeTracking
PopThermalUpdateTelemetryClientCount
PopThermalUpdateTimerPolicy
PopThermalWorker
PopThermalWriteShutdownToRegistry
PopThermalZoneAdd
PopThermalZoneDpc
PopThermalZoneRemove
PopThermalZoneTimerCallback
PopThermalZoneUpdateCoolingPolicy
PopTraceBootError
PopTraceCr3Mitigated
PopTraceCr3Tripped
PopTraceEsBgActivityPolicyUpdate
PopTraceEsSetting
PopTraceEsState
PopTraceHibernatePolicyUpdate
PopTraceInputSuppressionActionUpdate
PopTraceMonitorOnRequestUserInput
PopTraceMonitorOnRequestUserInputV1
PopTraceNetRefreshTimerArmed
PopTracePowerButtonSuppressionActionUpdate
PopTracePowerButtonSuppressionOptedIn
PopTracePowerLimitHistogram
PopTracePowerReconfig
PopTracePowerSettingChange
PopTraceSleepCheckpointInitFailure
PopTraceSmbiosChange
PopTraceStandbyConnectivityRundown
PopTraceStandbyConnectivityUpdate
PopTraceSystemIdleS0LowPowerDoze
PopTraceSystemIdleS0LowPowerDozeTimerArmed
PopTraceSystemIdleS0LowPowerDozeTimerCancelled
PopTraceThermalRequestActiveActivity
PopTraceThermalRequestPassiveHistogram
PopTraceThermalStandbyComplete
PopTraceThermalStandbyInitiated
PopTraceThermalZoneActiveActivity
PopTraceThermalZonePassiveHistogram
PopTraceZoneCr3Mitigated
PopTraceZoneCr3Tripped
PopTransitionCheckpoint
PopTransitionGetWakeTimerType
PopTransitionSystemPowerState
PopTransitionSystemPowerStateEx
PopTransitionTelemetryOsState
PopTransitionToSleep
PopTranslateDependencyArray
PopTriggerDiagTraceAoAcCapability
PopTriggerMonitorPowerEvent
PopUmpoInitializeChannel
PopUmpoInitializeMonitorChannel
PopUmpoMessageCallback
PopUmpoProcessMessage
PopUmpoProcessMessages
PopUmpoProcessPowerMessage
PopUmpoQuerySmartSuspendPrediction
PopUmpoSendFlushSleepStudyLoggerNotification
PopUmpoSendLegacyEvent
PopUmpoSendPowerMessage
PopUmpoSendPowerRequestAction
PopUmpoSendPowerRequestCreate
PopUmpoSendPowerRequestOverrideCleanup
PopUmpoSendPowerRequestOverrideQuery
PopUmpoSendUserPresencePredictionAction
PopUnicodeStringDeepCopy
PopUnlinkWakeSources
PopUnlockAfterSleepWorker
PopUnreferencePowerSetting
PopUnregisterPowerSettingCallback
PopUpdateAcDcState
PopUpdateBackgroundCoolingStatus
PopUpdateBsdPowerTransitionReferenceTime
PopUpdateConsoleDisplayState
PopUpdateDiskIdleTimeoutSetting
PopUpdateExternalDisplayState
PopUpdateLastUserInputTime
PopUpdateNonAttributedCpuTimeReference
PopUpdateOverThrottledCount
PopUpdatePdcSystemIdleState
PopUpdatePowerActionWatchdogTimeouts
PopUpdatePowerButtonHoldState
PopUpdatePowerLimitTimeTracking
PopUpdateSmartUserPresencePredictions
PopUpdateSmbiosData
PopUpdateSystemIdleContext
PopUpdateUpgradeInProgress
PopUpdateWakeSource
PopUpdateWatchdogNoWorkersEvent
PopUsbErrorWNFNotificationCallback
PopUserIsAdmin
PopUserPresenceHostStateChange
PopUserPresencePredictionModeCallback
PopUserPresentSet
PopUserPresentSetWorker
PopValidateContextMembership
PopValidateHiberFileSize
PopValidatePowerSettingData
PopValidateRTCWake
PopVerifierFlushMemoryBeforeSleep
PopVerifyPowerActionPolicy
PopVerifySystemPowerPolicy
PopVerifySystemPowerState
PopVideoBrightnessSettingsCallback
PopVideoPowerSettingCallback
PopWakeDeviceList
PopWakeInfoDereference
PopWakeSourceGetDeviceProperty
PopWakeSourceIsChild
PopWakeSourceIsParent
PopWakeSourceSize
PopWatchdogDpc
PopWatchdogDumpControlRoutine
PopWatchdogInit
PopWatchdogWorker
PopWin32CalloutWatchdogCallback
PopWin32kActivatorCallback
PopWin32kActivatorWorker
PopWin32kPowerSettingCallback
PopWnfAirplaneModeCallback
PopWnfAudioCallback
PopWnfBluetoothChargingCallback
PopWnfEffectivePowerModeCallback
PopWnfFullscreenVideoCallback
PopWnfHibernatePolicyCallback
PopWnfInSupCallback
PopWnfMixedRealityCallback
PopWnfMobileHotspotCallback
PopWnfSprActiveSessionChangeCallback
PopWnfUserAwayPredictionCallback
PopWriteBsdPoInfo
PopWriteChecksumPages
PopWriteHeaderPages
PopWriteHiberImage
PopWriteHiberPages
PopWriteImageHeader
PopWriteSecurePages
PopWriteSecurePagesCallback
PopZeroHiberFile
PpBootDDBHelper
PpCheckInDriverDatabase
PpDevCfgCheckDeviceNeedsUpdate
PpDevCfgInit
PpDevCfgProcessDevice
PpDevCfgProcessDeviceClass
PpDevCfgProcessDeviceExtensions
PpDevCfgProcessDeviceOperations
PpDevCfgProcessDeviceReset
PpDevCfgProcessDevices
PpDevCfgRequestDeviceInstall
PpDevCfgTraceDeviceStart
PpDevNodeInsertIntoTree
PpDevNodeLockTree
PpDevNodeRemoveFromTree
PpDevNodeUnlockTree
PpDeviceRegistration
PpForEachDeviceInstanceDriver
PpHotSwapGetDevnodeRemovalPolicy
PpHotSwapInitRemovalPolicy
PpHotSwapUpdateRemovalPolicy
PpInitGetGroupOrderIndex
PpInitSystem
PpInitializeBootDDB
PpIrpAllocateDeviceUsageNotification
PpIrpQueryBusInformation
PpIrpQueryCapabilities
PpIrpQueryResourceRequirements
PpLastGoodDeleteFilesCallback
PpLastGoodDoBootProcessing
PpMarkDeviceStackExtensionFlag
PpPagePathAssign
PpProcessClearProblem
PpProfileBeginHardwareProfileTransition
PpProfileCancelHardwareProfileTransition
PpProfileCancelTransitioningDock
PpProfileCommitTransitioningDock
PpProfileIncludeInHardwareProfileTransition
PpProfileQueryHardwareProfileChange
PpReleaseBootDDB
PpSystemHiveLimitCallback
PpmAcquireLock
PpmAllocWmiEvent
PpmAllocatePerfCheck
PpmApplyIdlePolicy
PpmApplyIdlePolicyChanges
PpmApplyProfile
PpmBeginActiveTimeAccumulation
PpmBeginHighPerfRequest
PpmBeginProfileAccumulation
PpmCancelExitLatencyTrace
PpmCapturePerformanceDistribution
PpmCapturePerformanceDistributionCallback
PpmCheckAcquireProcessorPerformance
PpmCheckAdjustNextPerfCheck
PpmCheckApplyParkConstraints
PpmCheckApplyPerfConstraints
PpmCheckApplyResetNotification
PpmCheckArmPeriod
PpmCheckComputeEnergy
PpmCheckComputeHeteroResponse
PpmCheckComputeMultiClassHeteroResponse
PpmCheckContinueExecution
PpmCheckCoordinatedStateInitiator
PpmCheckCustomRun
PpmCheckDelayedPeriodicStart
PpmCheckIdleVeto
PpmCheckInit
PpmCheckInitProcessors
PpmCheckMaintainArtificialDomain
PpmCheckMakeupSkippedChecks
PpmCheckPausePpmEngineForSx
PpmCheckPeriodicStart
PpmCheckPreConditionsForDeepSleep
PpmCheckProcessorInit
PpmCheckReInit
PpmCheckRecordAllUtility
PpmCheckReportComplete
PpmCheckReset
PpmCheckResetProcessors
PpmCheckResumePpmEngineFromSx
PpmCheckRun
PpmCheckSnapAllDeliveredPerformance
PpmCheckSnapAllUtility
PpmCheckStart
PpmCheckTimerCallback
PpmCheckUpdateDeliveredPerformanceIfTracingEnabled
PpmClearExitLatencySamplingPercentage
PpmClearSimulatedIdle
PpmClearSimulatedLoad
PpmCompareAndApplyPolicySettings
PpmComputeIdleDurationHint
PpmConfigureRestrictionPolicy
PpmContinueActiveTimeAccumulation
PpmContinueTimeAccumulation
PpmConvertTime
PpmConvertTimeFrom
PpmConvertTimeTo
PpmDeepestHardwareIdleState
PpmDisableHighPerfRequestDeferredExpiration
PpmDisableProfile
PpmEnableCoordinatedIdleStates
PpmEnableProfile
PpmEnableWmiInterface
PpmEndActiveTimeAccumulation
PpmEndHighPerfRequest
PpmEndProfileAccumulation
PpmEnterCoordinatedIdle
PpmEstimateIdleDuration
PpmEventAffinityMask
PpmEventAutonomousModeChange
PpmEventBiosCapChange
PpmEventCoordinatedIdleTransition
PpmEventCoreParkingForceParkedStateChange
PpmEventCoreParkingSoftParkedStateChange
PpmEventCoreParkingStateChange
PpmEventCoreParkingStateChangeEx
PpmEventDomainPerfStateChange
PpmEventEnergyEstimationRundown
PpmEventEnterIdleState
PpmEventEnterPlatformIdleState
PpmEventGetEventDescriptorAndProcessorId
PpmEventHeteroConfigUpdate
PpmEventHeteroFavoredCoreRotationChange
PpmEventHeteroPolicy
PpmEventHgsActiveWorkloadClass
PpmEventHgsContainmentGroupInfo
PpmEventHgsContainmentHwUpdate
PpmEventHgsContainmentPolicyChange
PpmEventHgsContainmentPolicyChangeV1
PpmEventHgsContainmentUnparkedCount
PpmEventHgsCoresUnparkedCount
PpmEventHgsHardwareTable
PpmEventHgsHardwareTableResonChanged
PpmEventHgsHardwareTableResonMapTable
PpmEventHgsNormalizedTable
PpmEventHiddenProcessorBiosCapChange
PpmEventHiddenProcessorPerformance
PpmEventHiddenProcessorThermalCapChange
PpmEventIdleStateChange
PpmEventLPICoreParking
PpmEventLegacyProcessorPerfStateChange
PpmEventMediaBufferingNotify
PpmEventParkNodeCapChange
PpmEventParkNodeClassRecordedStats
PpmEventParkNodeParkHintChanged
PpmEventParkNodePreference
PpmEventParkNodeRecordedStats
PpmEventParkNodeRestriction
PpmEventParkingCountSelection
PpmEventPerfSelectProcessorState
PpmEventPlatformVetoRequest
PpmEventPlatformVetoRundown
PpmEventProcessorPerfStateChange
PpmEventProcessorVetoRequest
PpmEventProcessorVetoRundown
PpmEventQosClassPerfSelection
PpmEventQosClassPolicy
PpmEventQosSupport
PpmEventSoftParkRankListChanged
PpmEventStaticPolicyRundown
PpmEventThermalCapChange
PpmEventTraceAccountingBucketIntervalsRundown
PpmEventTraceControlCallback
PpmEventTraceCoordinatedIdleStates
PpmEventTraceCoreParkingSelection
PpmEventTraceDripsAccountingSnapshot
PpmEventTraceExpectedUtility
PpmEventTraceFailedPerfCheckStart
PpmEventTraceHeteroDistributeUtility
PpmEventTraceHeteroResponse
PpmEventTraceHeteroSets
PpmEventTraceLPIState
PpmEventTraceLatencySensitivityHint
PpmEventTraceMakeupPerfCheck
PpmEventTraceMultiClassHeteroResponse
PpmEventTraceMultiClassHeteroResponseUpdate
PpmEventTraceParkNodeRundown
PpmEventTracePerfCheckStart
PpmEventTracePerfCheckStop
PpmEventTracePlatformIdleAccounting
PpmEventTracePpmProfileStatusRundown
PpmEventTracePreVetoAccounting
PpmEventTraceProcessorIdle
PpmEventTraceProcessorIdleAccounting
PpmEventTraceProcessorLatencyLimitChange
PpmEventTraceProcessorPerformance
PpmEventTraceProcessorPerformanceDomainRundown
PpmEventTraceProcessorPerformanceRundownHv
PpmEventTraceProfileChange
PpmEventTraceProfileEnable
PpmEventTraceProfileSetting
PpmEventTraceProfiles
PpmEventTraceSoftCoreParkingSelection
PpmEventVetoReasonRundown
PpmEventVpQosChange
PpmExecutePeriodicPerfCheck
PpmExitCoordinatedIdle
PpmExitCoordinatedIdleState
PpmFireWmiEvent
PpmGetDeepSleepPlatformStateIndex
PpmGetIdleConstrainedMask
PpmGetIdleGenerationCounter
PpmGetPerfPolicyClass
PpmGetPlatformSelectionVetoCounts
PpmGetPmcCounters
PpmGetPolicyAction
PpmGetThroughputInfoCallback
PpmHeteroAcknowledgeWpsUpdateIntel
PpmHeteroAcknowledgeWpsUpdateSim
PpmHeteroAmdProcessorInit
PpmHeteroCheckWpsTableUpdatedIntel
PpmHeteroCheckWpsTableUpdatedSim
PpmHeteroComputeBias
PpmHeteroComputeCoreParkingUtilities
PpmHeteroComputeMinRelativePerformane
PpmHeteroComputeMultiClassUnparkCount
PpmHeteroComputeRelativePerformance
PpmHeteroComputeUnparkCount
PpmHeteroDetectFavoredCores
PpmHeteroDetectHgsCores
PpmHeteroDispatchHgsInterrupt
PpmHeteroDispatchRegisterWpsUpdates
PpmHeteroDistributeUtility
PpmHeteroGetHgsPlusParkingEnablementStatus
PpmHeteroHgsCalculateContainmentCount
PpmHeteroHgsCheckContainmentDecision
PpmHeteroHgsDetectContainmentPresence
PpmHeteroHgsEvalAndRegisterContainmentGroups
PpmHeteroHgsEvaluateContainmentDecision
PpmHeteroHgsEvaluateContainmentMinPolicyDecision
PpmHeteroHgsGetContainmentType
PpmHeteroHgsGetWpsHint
PpmHeteroHgsProcessorInit
PpmHeteroHgsProcessorThreadFeedbackInit
PpmHeteroHgsRegisterContainmentGroups
PpmHeteroHgsUpdateDpcRoutine
PpmHeteroHgsUpdateWorker
PpmHeteroInitializeAmdWpsSupport
PpmHeteroInitializeFeedbackClass
PpmHeteroInitializeIntelWpsSupport
PpmHeteroInitializeWpsSimSupport
PpmHeteroIntelProcessorInit
PpmHeteroIsMultiClassParkingEnabled
PpmHeteroReevaluateMultiCoreFeatures
PpmHeteroRegisterWpsUpdatesAmd
PpmHeteroRegisterWpsUpdatesIntel
PpmHeteroRegisterWpsUpdatesSim
PpmHeteroRestrictToFavoredClass
PpmHeteroUpdateHgsConfiguration
PpmHeteroUtilityGreaterThanOrEqualThreshold
PpmHeteroUtilityToNormalizedUtility
PpmHighPerfRequestExpiration
PpmHvEnableQosEnlightenment
PpmHvSetVirtualProcessorQos
PpmHvSnapPerformanceAccumulation
PpmHvUseNativeAlgorithms
PpmIdleAllocateVetoReasons
PpmIdleCaptureCsVetoAccounting
PpmIdleCheckCoordinatedDependencies
PpmIdleCheckCoordinatedDependency
PpmIdleCheckCoordinatedProcessorDependency
PpmIdleCheckCoordinatedStateEligibility
PpmIdleCheckProcessorStateEligibility
PpmIdleCsVetoAccountingResiliencyUpdate
PpmIdleCsVetoAccountingUpdateBlock
PpmIdleDefaultComplete
PpmIdleDefaultExecute
PpmIdleDefaultInitiateWake
PpmIdleDefaultIsHalted
PpmIdleEnableIdleDurationExpirationTimeout
PpmIdleEvaluateConstraints
PpmIdleExecuteTransition
PpmIdleGetConcurrencyStats
PpmIdleGetPackageIdleIntervalStats
PpmIdleGuestComplete
PpmIdleGuestExecute
PpmIdleGuestPreExecute
PpmIdleGuestPreselect
PpmIdleGuestTest
PpmIdleInitializeConcurrency
PpmIdleInstallConcurrency
PpmIdleInstallDefaultStates
PpmIdleInstallNewVetoList
PpmIdleIsStateDisabled
PpmIdlePrepareExitLatencyTrace
PpmIdlePrevetoWatchdog
PpmIdleRecheckCoordinatedIdleMask
PpmIdleRecheckSecondaryProcessors
PpmIdleRegisterDefaultStates
PpmIdleRemoveConcurrency
PpmIdleRemoveVetoBias
PpmIdleRollbackCoordinatedSelection
PpmIdleSelectCoordinatedProcessorDependency
PpmIdleSelectStates
PpmIdleSetSynchronizationState
PpmIdleSnapConcurrency
PpmIdleSnapConcurrencyIdleTime
PpmIdleStartCsVetoAccounting
PpmIdleTransitionStall
PpmIdleUnlockProcessor
PpmIdleUpdateConcurrency
PpmIdleUpdateCoordinatedDependencies
PpmIdleUpdateHvStates
PpmIdleUpdateIdleReevaluationDuration
PpmIdleUpdatePlatformDependencies
PpmIdleUpdateProcessorLatencyLimit
PpmIdleUpdateSelectionStatistics
PpmIdleUpdateSynchronizationState
PpmIdleUpdateSystemLatencyLimit
PpmIdleWaitForDependentTransitions
PpmInfoAdjustSetting
PpmInfoApplyMinMaxConstraint
PpmInfoApplySettingUpdate
PpmInfoConfigComparer
PpmInfoRegisterCallbacks
PpmInfoReleaseLocks
PpmInfoTraceProfileSettings
PpmInfoWriteData
PpmInitCoreParkingPolicy
PpmInitHeteroEngine
PpmInitHeteroPolicy
PpmInitIdlePolicy
PpmInitIllegalThrottleLogging
PpmInitPolicyConfiguration
PpmInstallCoordinatedIdleStates
PpmInstallFeedbackCounters
PpmInstallNewIdleDomains
PpmInstallNewIdleStates
PpmInstallPlatformIdleStates
PpmInterlockedUpdateTimeNoFence
PpmInternalPlatformIdleVeto
PpmInternalProcessorIdleVeto
PpmMediaBufferingWorker
PpmParkApplyForcedMask
PpmParkApplyPolicy
PpmParkCalculateCoreParkingMask
PpmParkCalculateUnparkCount
PpmParkClearForcedMask
PpmParkComputeDiff
PpmParkComputeSnapStatistics
PpmParkComputeUnparkMask
PpmParkDistributeAllUtility
PpmParkDistributeUtility
PpmParkEvalualteSmtUnparkPolicy
PpmParkEvaluateRestriction
PpmParkFindOverUtilizedProcessors
PpmParkFreeAllParkNodes
PpmParkFreeParkNodes
PpmParkGetParkNode
PpmParkInitialize
PpmParkMaximumCoresParked
PpmParkParkingAvailable
PpmParkRecordNodeStatistics
PpmParkRegisterParking
PpmParkReportForceParkChange
PpmParkReportMask
PpmParkReportParkedCore
PpmParkReportParkedCores
PpmParkReportSoftParkChange
PpmParkReportUnparkedCore
PpmParkReportUnparkedCores
PpmParkSetLpiCap
PpmParkSnapNodeIdleTime
PpmParkSnapNodeStatistics
PpmParkSteerInterrupts
PpmParkUnblockIdle
PpmParkUpdateConcurrencyTracking
PpmPdcNotifyMediaBufferingUpdate
PpmPerfAccumulateBrandedFrequency
PpmPerfAction
PpmPerfApplyCapsAndFloors
PpmPerfApplyDomainState
PpmPerfApplyDomainStates
PpmPerfApplyHiddenProcessorState
PpmPerfApplyLatencyHint
PpmPerfApplyLatencyHints
PpmPerfApplyProcessorState
PpmPerfApplyProcessorStates
PpmPerfArbitratorApplyProcessorState
PpmPerfCalculateQosClassPolicies
PpmPerfCheckForIllegalProcessorThrottle
PpmPerfCheckRequired
PpmPerfClearBootOverrides
PpmPerfClearResponsivenessHints
PpmPerfCommitPerformance
PpmPerfCompleteMakeup
PpmPerfComputePerfReductionTolerance
PpmPerfControlActionCallback
PpmPerfControlExecuteAction
PpmPerfFeedbackCounterRead
PpmPerfFeedbackCounterUpdate
PpmPerfForceDomainStates
PpmPerfGetBrandedFrequency
PpmPerfGetCurrentState
PpmPerfGetFrequencyBandStats
PpmPerfGetVmCppcConfig
PpmPerfGetVmPerfConfig
PpmPerfGetVmPerfControlSupport
PpmPerfGetVmPerfPriorityConfig
PpmPerfGetVmPerfPrioritySupport
PpmPerfInitialize
PpmPerfLatencySensitivityHintWorker
PpmPerfMinimumPerfReached
PpmPerfPercentageFromFrequency
PpmPerfProcCapFloorSettingCallback
PpmPerfQueryPackageId
PpmPerfQueryPackageProcessorCount
PpmPerfQueryPhysicalCoreCount
PpmPerfQueryPhysicalCoreId
PpmPerfQueryProcMeasurementValues
PpmPerfQueueAction
PpmPerfReApplyStates
PpmPerfReadFeedback
PpmPerfRecordMostActiveWorkloadClass
PpmPerfRecordUtility
PpmPerfRegisterHvPerfStateCounters
PpmPerfRegisterNativePerfStates
PpmPerfResetHistory
PpmPerfResetHistoryAll
PpmPerfResizeHistory
PpmPerfResizeHistoryAll
PpmPerfSelectDomainStates
PpmPerfSelectProcessorState
PpmPerfSelectProcessorStates
PpmPerfSetAllDomainsToUpdate
PpmPerfSetProcessorIdle
PpmPerfSnapDeliveredPerformance
PpmPerfSnapUtility
PpmPerfTelemetryCallback
PpmPerfTelemetryWorker
PpmPerfUpdateDomainPolicy
PpmPerfUpdateMultimediaPowerModel
PpmPerfUpdateQosDisableReasons
PpmPolicySettingsMaskMerge
PpmPostProcessMediaBuffering
PpmProfileAcDcUpdate
PpmQueryDripsResidency
PpmQueryPlatformStateResidency
PpmQueryTime
PpmReapplyIdlePolicy
PpmReapplyPerfPolicy
PpmRegisterPerfCap
PpmRegisterPerfStates
PpmRegisterProfiles
PpmRegisterProvSocIdentifier
PpmRegisterVetoList
PpmReinitializeHeteroEngine
PpmReinitializeHeteroEngineV1
PpmReleaseLock
PpmRemoveIdleStates
PpmResetIdlePolicy
PpmResetInterruptRate
PpmResetPerfEngineForProcessor
PpmResetPerfTimes
PpmResetPerformanceAccumulation
PpmResetPlatformIdleAccounting
PpmResetProcessorIdleAccounting
PpmResetProfileSettings
PpmScaleIdleStateValues
PpmSetExitLatencySamplingPercentage
PpmSetProfilePolicySetting
PpmSetSimulatedIdle
PpmSetSimulatedLoad
PpmSnapDripsAccountingSnapshot
PpmSnapPerformanceAccumulation
PpmStartIllegalProcessorThrottleLogging
PpmStopIllegalProcessorThrottleLogging
PpmTestAndLockProcessor
PpmTraceExitLatency
PpmTracePerfIdleRundown
PpmTranslateIdleAccounting
PpmTranslatePlatformIdleAccounting
PpmTryAcquireLock
PpmUnlockProcessors
PpmUpdateArchitecturalEfficiencyClass
PpmUpdateIdleContext
PpmUpdateIdleDomains
PpmUpdateIdleStates
PpmUpdateIdleStatesInplace
PpmUpdateIdleVeto
PpmUpdateNoopFunction
PpmUpdatePerfStates
PpmUpdatePerformanceFeedback
PpmUpdatePlatformIdleAccounting
PpmUpdatePlatformIdleVeto
PpmUpdateProcessorIdleAccounting
PpmUpdateProcessorIdleVeto
PpmUpdateProcessorPolicy
PpmUpdateProcessorPolicyCallback
PpmUpdateTargetProcessorPolicy
PpmUpdateTimeAccumulation
PpmUtilityComparer
PpmWakeClockOwnerIfNeeded
PpmWmiDispatch
PpmWmiFireIdleAccountingEvent
PpmWmiGetAllData
PpmWmiIdleAccountingProcedure
PpmWmiIdleAccountingWork
PpmWmiRegisterInfo
PpvUtilCallAddDevice
PpvUtilFailDriver
PpvUtilInit
PpvUtilIsHardwareBeingVerified
PpvUtilIsPdo
PpvUtilTestStartedPdoStack
PrExtControlOperations
PrExtExportRecordData
PrExtExtractDataRecordTable
PrExtGetRecordDataLength
PrExtLogLatencyTime
PrExtLogToTelemetry
PrmInvokeHandler
PrmLockModule
PrmQueryHandler
PrmUnlockModule
ProbeForRead
ProbeForWrite
ProcessForExeModule
ProducerConsumerBufferComplete
ProducerConsumerCopyFromContextBuffer
ProducerConsumerCopyToContextBuffer
ProducerGetBuffer
PromoteNode
PropertyEval
PrpWriteLogsToRegistry
PrpWriteTraceLoggingEvent
PsAcquireProcessExitSynchronization
PsAcquireSiloHardReference
PsAddProcessEnergyValues
PsAdjustBasicEnclaveThreadList
PsAdjustWin32kPriorityFloor
PsAllocSiloContextSlot
PsAllocateAffinityToken
PsApplyDeepFreezeOptimizations
PsAssignImpersonationToken
PsAssignProcessToJobObject
PsAssignThreadId
PsAttachSiloToCurrentThread
PsBlockNonCetBinaries
PsBoostThreadIo
PsBoostThreadIoEx
PsBoostThreadIoQoS
PsBoostThreadOutstandingIoQoS
PsBootPhaseComplete
PsCallEnclave
PsCallImageNotifyRoutines
PsCaptureExceptionPort
PsCaptureUserProcessParameters
PsChangeQuantumTable
PsChargePoolQuota
PsChargeProcessNonPagedPoolQuota
PsChargeProcessPagedPoolQuota
PsChargeProcessPoolQuota
PsChargeProcessQuota
PsChargeProcessWakeCounter
PsChargeSharedPoolQuota
PsCheckProcessFileSigningLevel
PsConvertToGuiThread
PsCpuPartitionMoveCpus
PsCreateCpuPartition
PsCreateMinimalProcess
PsCreatePartition
PsCreateSiloContext
PsCreateSystemThread
PsCreateSystemThreadEx
PsCreateVsmEnclave
PsDeleteVsmEnclave
PsDereferenceCpuPartition
PsDereferenceImpersonationToken
PsDereferenceKernelStack
PsDereferencePartition
PsDereferencePrimaryToken
PsDereferenceSession
PsDereferenceSiloContext
PsDereferenceVsmEnclave
PsDetachSiloFromCurrentThread
PsDisableImpersonation
PsDispatchIumService
PsEncodeThreadWorkOnBehalfTicket
PsEnterPriorityRegion
PsEnumProcessThreads
PsEnumProcesses
PsEstablishWin32Callouts
PsFreeAffinityToken
PsFreeEnclaveModuleInfo
PsFreeSiloContextSlot
PsFreezeProcess
PsGetAllocatedFullProcessImageName
PsGetAllocatedFullProcessImageNameEx
PsGetBaseIoPriorityThread
PsGetBaseTrapFrame
PsGetContextThread
PsGetCurrentProcess
PsGetCurrentProcessByThread
PsGetCurrentProcessId
PsGetCurrentProcessSessionId
PsGetCurrentProcessWin32Process
PsGetCurrentProcessWow64Process
PsGetCurrentServerSilo
PsGetCurrentServerSiloGlobals
PsGetCurrentServerSiloName
PsGetCurrentSilo
PsGetCurrentThread
PsGetCurrentThreadId
PsGetCurrentThreadPreviousMode
PsGetCurrentThreadProcess
PsGetCurrentThreadProcessId
PsGetCurrentThreadStackBase
PsGetCurrentThreadStackLimit
PsGetCurrentThreadTeb
PsGetCurrentThreadWin32Thread
PsGetCurrentThreadWin32ThreadAndEnterCriticalRegion
PsGetDefaultWsMaximum
PsGetEffectiveContainerId
PsGetEffectiveServerSilo
PsGetHostSilo
PsGetIoPriorityThread
PsGetIoSessionState
PsGetJobEffectiveFreezeCount
PsGetJobLock
PsGetJobMemoryPartition
PsGetJobProperty
PsGetJobServerSilo
PsGetJobSessionId
PsGetJobSilo
PsGetJobUIRestrictionsClass
PsGetNextPartition
PsGetNextPartitionUnsafe
PsGetNextProcess
PsGetNextProcessEx
PsGetNextProcessThread
PsGetNextSession
PsGetPagePriorityThread
PsGetParentSilo
PsGetPermanentSiloContext
PsGetPreviousProcess
PsGetProcessActiveThreadCount
PsGetProcessCommonJob
PsGetProcessCreateTimeQuadPart
PsGetProcessDebugPort
PsGetProcessDeepFreezeStats
PsGetProcessDxgProcess
PsGetProcessEnclaveModuleInfo
PsGetProcessExitProcessCalled
PsGetProcessExitStatus
PsGetProcessExitTime
PsGetProcessId
PsGetProcessImageFileName
PsGetProcessInheritedFromUniqueProcessId
PsGetProcessJob
PsGetProcessMachine
PsGetProcessPartition
PsGetProcessPeb
PsGetProcessPriorityClass
PsGetProcessProtection
PsGetProcessSectionBaseAddress
PsGetProcessSecurityPort
PsGetProcessSequenceNumber
PsGetProcessServerSilo
PsGetProcessSessionId
PsGetProcessSessionIdEx
PsGetProcessSignatureLevel
PsGetProcessSilo
PsGetProcessStartKey
PsGetProcessWin32Process
PsGetProcessWin32WindowStation
PsGetProcessWow64Process
PsGetScpCfgPageTypeForProcess
PsGetServerSiloActiveConsoleId
PsGetServerSiloGlobals
PsGetServerSiloServiceSessionId
PsGetServerSiloState
PsGetSessionById
PsGetSessionCreateTime
PsGetSessionId
PsGetSessionIdEx
PsGetSessionLocaleId
PsGetSessionObjectById
PsGetSessionSchedulingGroup
PsGetSessionSchedulingGroupByProcess
PsGetSiloBySessionId
PsGetSiloContainerId
PsGetSiloContext
PsGetSiloIdentifier
PsGetSiloMonitorContextSlot
PsGetSupportedProcessorArchitectures
PsGetThreadCreateTime
PsGetThreadExitStatus
PsGetThreadFreezeCount
PsGetThreadHardErrorsAreDisabled
PsGetThreadId
PsGetThreadProcess
PsGetThreadProcessId
PsGetThreadProperty
PsGetThreadServerSilo
PsGetThreadSessionId
PsGetThreadTeb
PsGetThreadWin32Thread
PsGetUserContextThread
PsGetVersion
PsGetWin32KFilterSet
PsGetWorkOnBehalfThread
PsImpersonateClient
PsImpersonateContainerOfThread
PsInitSystem
PsInitializeBootCpuPartitions
PsInitializeQuotaSystem
PsInitializeScpCfgPages
PsInitializeSyscallProviders
PsInitializeThreadRngState
PsInitializeVsmEnclave
PsInsertPermanentSiloContext
PsInsertPermanentSiloContextEx
PsInsertSiloContext
PsInsertVirtualizedTimer
PsInvokeWin32Callout
PsIoRateControlOverQuotaNotify
PsIoRateControlReference
PsIsComponentEnabled
PsIsCurrentThreadInServerSilo
PsIsCurrentThreadPrefetching
PsIsDiskCountersEnabled
PsIsGuiThread
PsIsHostSilo
PsIsImageNotifyEnabled
PsIsJobParentImmutable
PsIsProcessAppContainer
PsIsProcessBeingDebugged
PsIsProcessCommitRelinquished
PsIsProcessInAppSilo
PsIsProcessInSilo
PsIsProcessLoggingEnabled
PsIsProcessPrimaryTokenFrozen
PsIsProtectedProcess
PsIsProtectedProcessLight
PsIsServerSilo
PsIsServiceSession
PsIsSessionInCurrentServerSilo
PsIsSessionInitializationProcess
PsIsSessionLeaderProcess
PsIsSystemProcess
PsIsSystemThread
PsIsSystemWideMitigationOptionSet
PsIsThreadImpersonating
PsIsThreadInSilo
PsIsThreadTerminating
PsIsVsmEnclaveTerminated
PsIsWin32KFilterAuditEnabled
PsIsWin32KFilterAuditEnabledForProcess
PsIsWin32KFilterEnabled
PsIsWin32KFilterEnabledForProcess
PsIumEnableOnDemandDebugWithResponse
PsIumGetOnDemandDebugChallenge
PsIumResumeAfterHibernate
PsLeavePriorityRegion
PsLoadVsmEnclaveData
PsLocateSystemDlls
PsLookupProcessByProcessId
PsLookupProcessThreadByCid
PsLookupThreadByThreadId
PsMakeSiloContextPermanent
PsMapSystemDlls
PsMultiResumeProcess
PsMultiResumeThread
PsNotifyWriteToExecutableMemory
PsOpenProcess
PsOpenThread
PsPerfLogSessionRundown
PsPicoAltSystemCallDispatch
PsPicoDispatchException
PsPicoSystemCallDispatch
PsPicoWalkUserStack
PsQueryActivityModerationUserSettings
PsQueryCpuQuotaInformation
PsQueryCurrentApiSetSchema
PsQueryFullProcessImageName
PsQueryProcessAttributes
PsQueryProcessAttributesByToken
PsQueryProcessAvailableCpus
PsQueryProcessAvailableCpusCount
PsQueryProcessCommandLine
PsQueryProcessEnergyValues
PsQueryProcessExceptionFlags
PsQueryProcessSignatureMitigationPolicy
PsQueryRuntimeProcess
PsQuerySectionSignatureInformation
PsQueryStatisticsProcess
PsQuerySyscallProviderInformation
PsQuerySystemAvailableCpus
PsQuerySystemAvailableCpusCount
PsQuerySystemDllInfo
PsQueryThreadStartAddress
PsQueryThreadTerminationPort
PsQueryTotalCycleTimeProcess
PsQuitNextPartition
PsQuitNextProcess
PsQuitNextProcessThread
PsQuitNextSession
PsReferenceCpuPartition
PsReferenceEffectiveToken
PsReferenceImpersonationToken
PsReferenceImpersonationTokenEx
PsReferenceKernelStack
PsReferencePartitionByHandle
PsReferencePartitionSafe
PsReferencePartitionSystemProcess
PsReferencePrimaryToken
PsReferencePrimaryTokenWithTag
PsReferenceProcessFilePointer
PsReferenceSiloContext
PsReferenceVsmEnclave
PsRegisterAltSystemCallHandler
PsRegisterPicoProvider
PsRegisterProcessAvailableCpusChangeNotification
PsRegisterSiloMonitor
PsRegisterSyscallProvider
PsRegisterSyscallProviderServiceTableMetadata
PsRegisterSystemAvailableCpusChangeNotification
PsReleaseProcessExitSynchronization
PsReleaseProcessWakeCounter
PsReleaseSiloHardReference
PsRemoveCreateThreadNotifyRoutine
PsRemoveDeepFreezeOptimizations
PsRemoveLoadImageNotifyRoutine
PsRemoveSiloContext
PsRemoveVirtualizedTimer
PsReplaceSiloContext
PsReportProcessMemoryLimitViolation
PsRestoreImpersonation
PsResumeProcess
PsResumeThread
PsReturnPoolQuota
PsReturnProcessNonPagedPoolQuota
PsReturnProcessPageFileQuota
PsReturnProcessPagedPoolQuota
PsReturnProcessQuota
PsReturnSharedPoolQuota
PsRevertThreadToSelf
PsRevertToSelf
PsRevertToUserMultipleGroupAffinityThread
PsRevertToUserPagePriorityThread
PsRootSiloInformation
PsRundownVsmEnclave
PsSessionCreate
PsSessionGetWin32Callouts
PsSessionObjectDelete
PsSetContextThread
PsSetCpuQuotaInformation
PsSetCreateProcessNotifyRoutine
PsSetCreateProcessNotifyRoutineEx
PsSetCreateProcessNotifyRoutineEx2
PsSetCreateThreadNotifyRoutine
PsSetCreateThreadNotifyRoutineEx
PsSetCurrentThreadPrefetching
PsSetExeModerationState
PsSetIoPriorityThread
PsSetJobProperty
PsSetLegoNotifyRoutine
PsSetLoadImageNotifyRoutine
PsSetLoadImageNotifyRoutineEx
PsSetPagePriorityThread
PsSetProcessDxgProcess
PsSetProcessFaultInformation
PsSetProcessHandleTracingInformation
PsSetProcessPriorityByClass
PsSetProcessPriorityClass
PsSetProcessSecurityPort
PsSetProcessTelemetryAppState
PsSetProcessWin32Process
PsSetProcessWindowStation
PsSetProcessesWindowState
PsSetSessionObjectIoEvent
PsSetSystemMultipleGroupAffinityThread
PsSetSystemPagePriorityThread
PsSetThreadHardErrorsAreDisabled
PsSetThreadProperty
PsSetThreadWin32Thread
PsSetVmProcessorHostProcess
PsShutdownSystem
PsStartSiloMonitor
PsSuspendProcess
PsSuspendThread
PsSwapProcessWorkingSet
PsSynchronizeWithThreadInsertion
PsSyscallProviderDispatch
PsTerminateMinimalProcess
PsTerminateProcess
PsTerminateServerSilo
PsTerminateSystemThread
PsTerminateVsmEnclave
PsTestProtectedProcessIncompatibility
PsThawMultiProcess
PsTimerResolutionActive
PsTlsAlloc
PsTlsFree
PsTlsGetValue
PsTlsSetValue
PsTransferProcessQuotaToSharedQuota
PsUnEstablishWin32Callouts
PsUnlinkProcessFromSession
PsUnregisterAvailableCpusChangeNotification
PsUnregisterSiloMonitor
PsUnregisterSyscallProvider
PsUpdateActiveProcessAffinity
PsUpdateComponentPower
PsUpdateDiskCounters
PsUpdateNetworkCounters
PsUpdateSvmProcessPasidAllThreads
PsWaitForAllProcesses
PsWatchWorkingSet
PsWow64GetProcessMachine
PsWow64GetProcessNtdllType
PsWow64IsMachineSupported
PsWrapApcWow64Thread
PspAcquirePushLockExclusive
PspAcquirePushLockShared
PspAcquireSyscallProviderRegistrationLockExclusive
PspAddAccountingValues
PspAddPartitionToGlobalList
PspAddProcessToWorkingSetChangeList
PspAddSchedulingGroupToJobChain
PspAdjustKeepAliveCountProcess
PspAllocStorage
PspAllocateAndQueryNotificationChannel
PspAllocateAndQueryProcessNotificationChannel
PspAllocatePartition
PspAllocateProcess
PspAllocateRateControl
PspAllocateThread
PspApiSetCopyToSystemSpace
PspApplyCoreIsolationPolicy
PspApplyIFEOPerfOptions
PspApplyJobChainLimitsToProcess
PspApplyJobLimitsToProcess
PspApplyMitigationOptions
PspApplyTimerDelayProcess
PspApplyWorkingSetLimits
PspApplyWorkingSetLimitsToProcess
PspAssignCpuPartitionsToProcess
PspAssignPrimaryToken
PspAssignProcessQuotaBlock
PspAssignProcessToJob
PspAssignProcessToJobList
PspAssignSiloSystemRootPath
PspAssociateCompletionPortCallback
PspAttachProcessToSyscallProvider
PspAttachSession
PspBeginServerSiloShutdown
PspBindProcessSessionToJob
PspBuildCreateProcessContext
PspCallJobHierarchyCallbacks
PspCallProcessNotifyRoutines
PspCallThreadNotifyRoutines
PspCaptureAndValidateUnicodeString
PspCaptureCreateInfo
PspCaptureProcessParameters
PspCaptureSystemServiceInMemoryArgs
PspCaptureUserProcessParameters
PspCatchCriticalBreak
PspChangeJobMemoryUsageByProcess
PspChangeProcessExecutionState
PspChargeJobWakeCounter
PspChargeProcessWakeCounter
PspChargeQuota
PspCheckCpuPartitionCreateAccess
PspCheckForInvalidAccessByProtection
PspCheckForJobAffinityViolation
PspCheckJobAccessState
PspClearNoWakeChargeLimitNotification
PspClearProcessThreadCidRefs
PspCloseActivityReference
PspClosePartitionHandle
PspCombineSecurityDomains
PspCompleteHardDereferenceSiloDeferred
PspCompleteServerSiloShutdown
PspCompleteServerSiloShutdownDeferred
PspComputeExecutionState
PspComputeQuantum
PspComputeQuantumAndPriority
PspComputeReportWakeFilter
PspControlHwTracingThread
PspConvertJobToMixed
PspConvertSiloToServerSilo
PspCopyAndFixupParameters
PspCopyNodeRelativeMaskToAffinityEx
PspCopyUnicodeString
PspCreateActivityReference
PspCreateObjectHandle
PspCreatePartitionSystemProcess
PspCreatePicoProcess
PspCreatePicoThread
PspCreateProcess
PspCreateSecureSystemProcess
PspCreateSecureThread
PspCreateSilo
PspCreateThread
PspCreateUserContext
PspCreateUserProcessEcp
PspDeferredWorkerRoutine
PspDeleteCpuPartition
PspDeleteCreateProcessContext
PspDeleteExternalServerSiloState
PspDeleteKernelStack
PspDeleteMemoryPartitionContext
PspDeletePartition
PspDeleteProcessStateChange
PspDeleteServerSiloGlobals
PspDeleteSilo
PspDeleteSiloContext
PspDeleteThreadSecurity
PspDeleteThreadStateChange
PspDeleteUserStack
PspDereferenceQuota
PspDereferenceQuotaBlock
PspDereferenceSessionFinal
PspDereferenceSyscallProvider
PspDestroyProcessParameterOverrides
PspDestroySyscallProvider
PspDetachProcessFromSyscallProvider
PspDetachSession
PspDfssConfigurationChangeHandler
PspDisablePrimaryTokenExchange
PspDispatchWakeNotification
PspDoesJobHierarchyPermitUILimits
PspDoesJobHierarchyPermitUILimitsCallback
PspEmptyPropertySet
PspEnableProcessOptionalXStateFeatures
PspEnableProcessTimerVirtualization
PspEnableProcessWakeCounters
PspEnableTimerVirtualization
PspEnableWakeCounters
PspEnforceLimits
PspEnforceLimitsJobPostCallback
PspEnforceLimitsJobPreCallback
PspEnforceLimitsProcessCallback
PspEnsureGuiThreadAndBatchFlush
PspEnumJobsAndProcessesInJobHierarchy
PspEnumerateCallback
PspEstablishDfssHierarchy
PspEstablishJobHierarchy
PspEstimateNewProcessServerSilo
PspEvaluateAndNotifyEmptyJob
PspExecuteJobFreezeThawCallback
PspExitLastThread
PspExitProcess
PspExitThread
PspExpandLimit
PspExpandQuota
PspFindFirstThreadByTebValue
PspFindPropertySetEntry
PspFindVsmEnclaveThread
PspFoldProcessAccountingIntoJob
PspFreeCurrentThreadUserShadowStack
PspFreeRateControl
PspFreeSessionId
PspFreeStorage
PspFreeUserFiberShadowStack
PspFreezeJobTree
PspFreezeProcessWorker
PspGetBaseTrapFrame
PspGetContext
PspGetContextThreadInternal
PspGetFreezeState
PspGetHostSiloStorage
PspGetJobAssignmentDisposition
PspGetJobLimitInformationValidFlags
PspGetJobLockHierarchyForAssignment
PspGetJobLockHierarchyForDeletion
PspGetJobMemoryUsageNotificationViolations
PspGetJobSilo
PspGetMemoryPartitionContext
PspGetMemoryPartitionFromJobList
PspGetMemoryPartitionImplicit
PspGetNewSessionId
PspGetNextChildJob
PspGetNextJob
PspGetNextJobProcess
PspGetNextMonitor
PspGetNextSilo
PspGetNextSyscallProviderProcess
PspGetNoChildProcessRestrictedPolicy
PspGetPicoProcessContext
PspGetPicoThreadContext
PspGetPreviousProcessThread
PspGetProcessInJobHierarchyCallback
PspGetProcessParameterOverrides
PspGetProcessProtectionRequirementsFromImage
PspGetRateControlSize
PspGetRedirectionTrustPolicy
PspGetScpCfgFunctions
PspGetServerSiloStatePointer
PspGetSessionObjectByProcess
PspGetSetContextInternal
PspGetSetContextSpecialApc
PspGetStandardHandleList
PspGetStorageArray
PspGetStorageArrayIfPossible
PspGetThreadPpmPolicy
PspHandleTableWalker
PspHardDereferenceSiloWorker
PspHardenMitigationOptions
PspHashKeyValue
PspIdentityBasedJobBreakaway
PspImplicitAssignProcessToJob
PspIncrementJobChainProcessCounts
PspInheritMitigationAuditOptions
PspInheritMitigationOptions
PspInheritQuota
PspInheritSyscallProvider
PspInitPhase0
PspInitPhase1
PspInitPhase2
PspInitPhase3
PspInitializeCpuPartitionsDefaultSd
PspInitializeCpuPartitionsPhase0
PspInitializeCpuPartitionsPhase1
PspInitializeFullProcessImageName
PspInitializeJobStructures
PspInitializeProcessExecutionState
PspInitializeProcessSecurity
PspInitializeProtectedProcessParameters
PspInitializeQuotaBlock
PspInitializeServerSiloDeferred
PspInitializeSessionGlobals
PspInitializeSiloStructures
PspInitializeSystemDlls
PspInitializeSystemPartitionPhase0
PspInitializeThunkContext
PspInsertExpansionEntry
PspInsertProcess
PspInsertProperty
PspInsertThread
PspInvokeCreateCallback
PspInvokeTerminateCallback
PspIoMiniPacketCallbackRoutine
PspIoRateControlInfoIsAnySet
PspIoRateEntryActivate
PspIoRateEntryDeactivate
PspIoRateEntryInitialize
PspIoRateEntryIoControlReference
PspIoRateEntryVolumeCompare
PspIsContextAdmin
PspIsDfssEnabled
PspIsJobMovable
PspIsParentProcess
PspIsProcessInJob
PspIsProcessReadyForRemoteThread
PspIsSessionLeaderProcess
PspIsSetJobIoAttribution
PspIsSetJobIoAttributionJobPreCallback
PspIsSiloContext
PspIsSiloInServerSilo
PspIsSiloInSilo
PspIumAlertMultipleThreadByThreadId
PspIumAllocatePartitionState
PspIumAllocatePhysicalPages
PspIumAllocateSecurePool
PspIumFreePartitionPages
PspIumFreePartitionState
PspIumFreePhysicalPages
PspIumGetSystemData
PspIumInitialize
PspIumReplenishPartitionPages
PspIumResolveVirtualFault
PspIumVerifyParentSd
PspIumWorker
PspJobClose
PspJobCycleTimeNotificationDpcRoutine
PspJobDelete
PspJobDeleteStorageArrays
PspJobHasChildren
PspJobIoRateControlDisable
PspJobIoRateQueryHistory
PspJobIoRateVolumeEntryInsert
PspJobIoRateVolumeEntryReference
PspJobIoRateVolumeEntryRemove
PspJobIoRateVolumeEntryRemoveAll
PspJobIsAppSilo
PspJobNotificationWorker
PspJobTimeLimitsWork
PspLazyInitializeStorageExpansion
PspLimitViolationRateControlToleranceLimitField
PspLocateInPEManifest
PspLocateSystemDll
PspLockJobAssignment
PspLockJobChain
PspLockJobConditionally
PspLockJobExclusive
PspLockJobListExclusive
PspLockJobListShared
PspLockJobMemoryLimitsExclusive
PspLockJobMemoryLimitsShared
PspLockJobShared
PspLockJobsAndProcessExclusive
PspLockProcessExclusive
PspLockProcessListExclusive
PspLockProcessListShared
PspLockProcessShared
PspLockProcessThreadListShared
PspLockQuotaExpansion
PspLockQuotaListExclusive
PspLockQuotaListShared
PspLockRootJobExclusive
PspLockRootJobFromProcess
PspLockRootJobShared
PspLockSyscallProviderExclusive
PspLockThreadSecurityExclusive
PspLockThreadSecurityShared
PspLockUnlockProcessExclusive
PspLogAuditSetContextThreadEvent
PspLogAuditSetLoadImageNotifyRoutineEvent
PspLogAuditTerminateRemoteProcessEvent
PspLookupEntryPoint
PspLookupProcessQuotaBlock
PspLookupSyscallProviderById
PspLookupSyscallProviderByIdNoLock
PspMakeSessionVisible
PspMapSiloSharedDataView
PspMapSystemDll
PspMapThreadCreationFlags
PspMapView
PspMarkSessionReferenceProcess
PspModifyAncestorBits
PspNetRateControlDispatch
PspNotificationLimitRateControlToleranceField
PspNotificationLimitRateControlToleranceIntervalField
PspNotificationPacketCallback
PspNotifyEmptyJobsInJobChain
PspNotifyProcessEffectiveIoLimitChanged
PspNotifyServerSiloCreation
PspNotifyThreadCreation
PspOneDirectionSecurityDomainCombine
PspOpenPartitionHandle
PspPicoGetContextThreadEx
PspPicoSetContextThreadEx
PspPrepareEnclaveThreadWait
PspPrepareSystemDllInitBlock
PspProcessClose
PspProcessDelete
PspProcessDynamicEHContinuationTargets
PspProcessDynamicEnforcedAddressRanges
PspProcessOpen
PspProcessRundownWorker
PspProcessRundownWorkerSingle
PspProcessUnbindVirtualizedTimers
PspProcessorCallbackNop
PspPropagateHandle
PspQueryAndCheckCpuPartitionName
PspQueryComPlusRunUnderWoW
PspQueryDescriptorThread
PspQueryForwardersEnabled
PspQueryHwTracingThread
PspQueryJobHierarchyAccountingInformation
PspQueryJobHierarchyInterferenceCount
PspQueryJobHierarchyProcessIdList
PspQueryJobIoAttribution
PspQueryLastCallThread
PspQueryLdtInformation
PspQueryPooledQuotaLimits
PspQueryProcessAccountingInformationCallback
PspQueryProcessIdListCallback
PspQueryProcessInterferenceCountCallback
PspQueryQuotaLimits
PspQueryRateControlHistory
PspQuerySyscallProviderProcessList
PspQueryThreadIndexInformation
PspQueryWorkingSetWatch
PspQueueDeferredWorkAndWait
PspQuitNextJobProcess
PspRateControlLimitFlag
PspReadDfssConfigurationValues
PspReadIFEOMitigationAuditOptions
PspReadIFEOMitigationOptions
PspReadIFEONodeOptions
PspReadIFEOPerfOptions
PspReadOptionsMapFromIFEO
PspReadUserQuotaLimits
PspReaper
PspRecheckThreadOptionalXStateFeatures
PspRecheckThreadPasidMsrState
PspRecordCrashedProcessIntoBlackbox
PspReferenceCpuPartitionByHandle
PspReferenceSystemDll
PspReferenceTokenForNewProcess
PspRegisterResource
PspReleaseEnclaveThread
PspReleasePushLockExclusive
PspReleasePushLockShared
PspReleaseReferenceToSession
PspReleaseReturnedQuota
PspReleaseSyscallProviderRegistrationLockExclusive
PspRemoveCpuRateControl
PspRemoveEnclaveThreadWait
PspRemoveIoAttribution
PspRemovePartitionFromGlobalList
PspRemoveProcessFromJobChain
PspRemoveProperty
PspRemoveQuotaBlock
PspRemoveRateControl
PspRequestDeferredJobNotification
PspRequestProcessExecutionState
PspReserveAndCommitUserShadowStack
PspReturnQuota
PspReturnResourceQuota
PspRevertContainerImpersonation
PspRundownProcess
PspRundownSingleProcess
PspSafeReferenceQuotaBlock
PspSanitizeResourceLimits
PspScheduleEnforcementWorker
PspSchedulerSharedDataRegionCreate
PspSchedulerSharedDataRegionDelete
PspSchedulerSharedDataRegionSlotAllocate
PspSchedulerSharedDataRegionSlotFree
PspSchedulerSharedDataRegionSlotRetrieve
PspSecureThreadStartup
PspSelectMachineForProcess
PspSelectNodeForProcess
PspSelectSessionAttachProcess
PspSelectVsmEnclaveByNumber
PspSendJobNotification
PspSendNoWakeChargeLimitNotification
PspSendProcessNotificationToJobChain
PspSendReliableJobNotification
PspSendWakeNotification
PspSessionObjectCreate
PspSetAffinityLimitCallback
PspSetBackgroundJobTree
PspSetContext
PspSetContextThreadInternal
PspSetCpuRateControlJobPostCallback
PspSetCpuRateControlJobPreCallback
PspSetCreateProcessNotifyRoutine
PspSetCreateThreadNotifyRoutine
PspSetEffectiveJobLimits
PspSetEffectiveLimit
PspSetEffectiveRateControlJob
PspSetEnergyTrackingStateJobTree
PspSetIoPriorityLimitJobTree
PspSetJobBackgroundCountCallback
PspSetJobEnergyTrackingStateCallback
PspSetJobFreezeCountCallback
PspSetJobIoAttribution
PspSetJobIoAttributionJobPreCallback
PspSetJobIoAttributionProcessCallback
PspSetJobIoPriorityLimitPreCallback
PspSetJobIoRateControl
PspSetJobIoRateControlForVolume
PspSetJobLimitsJobPostCallback
PspSetJobLimitsJobPreCallback
PspSetJobLimitsProcessCallback
PspSetJobMemoryPartition
PspSetJobNotificationCountCallback
PspSetJobPagePriorityLimitPreCallback
PspSetJobRateControl
PspSetJobSiloThreadImpersonationPolicy
PspSetJobTimeLimitCallback
PspSetLdtInformation
PspSetLdtSize
PspSetMinimalProcessName
PspSetNetRateControl
PspSetNoChildProcessRestrictedPolicy
PspSetPagePriorityLimitJobTree
PspSetPicoThreadDescriptorBase
PspSetProcessAffinitySafe
PspSetProcessAffinityUpdateMode
PspSetProcessBackgroundCountCallback
PspSetProcessCacheIsolationCallback
PspSetProcessDefaultHardErrorMode
PspSetProcessEnergyTrackingStateCallback
PspSetProcessForegroundBackgroundRequest
PspSetProcessFreezeStateCallback
PspSetProcessIoHandlers
PspSetProcessIoPriorityLimitCallback
PspSetProcessPpmPolicy
PspSetProcessPriorityByClass
PspSetProcessPriorityClass
PspSetProcessSchedulingGroup
PspSetProcessShortName
PspSetProcessTimerDelayForKTimers
PspSetProcessTimerDelayForWin32
PspSetProcessTimerResolutionPolicy
PspSetPropertyHelper
PspSetQuotaLimits
PspSetRateControlJobPreCallback
PspSetRateControlProcessCallback
PspSetRedirectionTrustPolicy
PspSetThreadPpmPolicy
PspSetVmProcessorHostProcessWorkerRoutine
PspSetupReservedUserMappings
PspSetupUserFiberShadowStack
PspSetupUserProcessAddressSpace
PspSetupUserShadowStack
PspSetupUserStack
PspShutdownCsrProcess
PspSiloGetMultiUserTsFromRegistry
PspSiloGetSuiteMaskStringFromRegistry
PspSiloInitializeSharedUserSessionId
PspSiloInitializeSystemRootSymlink
PspSiloInitializeUserSharedData
PspSiloLoadApiSets
PspSinglePrivCheck
PspSortHandleList
PspStorageAllocSlot
PspStorageEmptyArray
PspStorageEmptyArrayNonReadonly
PspStorageFreeSlot
PspStorageGetObject
PspStorageInsertObject
PspStorageMakeSlotReadOnly
PspStorageRemoveObject
PspStorageReplaceObject
PspSubtractAccountingValues
PspSynchronizeThreadIsolationDomains
PspSyscallProviderOptIn
PspSyscallProviderServiceDispatch
PspSyscallProviderServiceDispatchGeneric
PspSystemThreadStartup
PspTeardownPartition
PspTerminateAllProcessesInJobHierarchy
PspTerminateAllThreads
PspTerminatePicoProcess
PspTerminateProcess
PspTerminateProcessesJobCallback
PspTerminateSiloSubsystemProcesses
PspTerminateThreadByPointer
PspThreadDelete
PspThreadFromTicket
PspThreadIndexCleanup
PspThreadOpen
PspTimerDelayProcess
PspTimerDelayWorkerRoutine
PspTlsAlloc
PspTlsInitialize
PspTrySetProcessPebThrottlingFlags
PspUnlinkJobProcess
PspUnlinkSessionId
PspUnlockJob
PspUnlockJobAssignment
PspUnlockJobChain
PspUnlockJobConditionally
PspUnlockJobListExclusive
PspUnlockJobListShared
PspUnlockJobMemoryLimitsExclusive
PspUnlockJobMemoryLimitsShared
PspUnlockJobsAndProcessExclusive
PspUnlockProcessExclusive
PspUnlockProcessListExclusive
PspUnlockProcessListShared
PspUnlockProcessShared
PspUnlockProcessThreadListShared
PspUnlockQuotaExpansion
PspUnlockQuotaListExclusive
PspUnlockQuotaListShared
PspUnlockSyscallProviderExclusive
PspUnlockThreadSecurityExclusive
PspUnlockThreadSecurityShared
PspUpdateCalloutParameters
PspUpdateContainerImpersonation
PspUpdateCreateInfo
PspUpdateJobEffectivePriorityLimits
PspUpdateJobPeakProcessMemory
PspUpdatePebForAffinityChange
PspUpdateSingleProcessAffinity
PspUserApcKernelRoutine
PspUserApcReserveKernelRoutine
PspUserApcReserveRundownRoutine
PspUserThreadStartup
PspValidateCreateProcessProtection
PspValidateEnvironmentBlock
PspValidateJobAffinityState
PspValidateJobAssignmentDiskIoAttribution
PspValidateJobAssignmentMemoryPartition
PspValidateJobAssignmentProcessLimits
PspValidateJobAssignmentSiloPolicy
PspValidateJobChainLimits
PspValidateMitigationAuditOptions
PspValidateMitigationOptions
PspValidateThread
PspVsmEnclaveHashAllocator
PspVsmEnclaveHashDeallocator
PspVsmLogBugCheckCallback
PspWaitForUsermodeExit
PspWaitOnAllProcessesJobCallback
PspWow64GetContextThread
PspWow64GetSharedInformation
PspWow64InitThread
PspWow64InitThreadGuestx86
PspWow64PickBestNtdll
PspWow64ReadOrWriteThreadCpuArea
PspWow64SetContextThread
PspWow64SetupCpuArea
PspWow64SetupUserProcessAddressSpace
PspWow64SetupUserStack
PspWow64ThunkProcessParameters
PspWritePebAffinityInfoAttached
PspWriteProcessSecurityDomain
PspWriteTebImpersonationInfo
QueryRegistryHideMachine
READ_PORT_UCHAR
READ_PORT_ULONG
READ_PORT_USHORT
READ_PORT_USHORT_PAIR
READ_REGISTER_UCHAR
READ_REGISTER_ULONG
READ_REGISTER_ULONG64
READ_REGISTER_USHORT
RaiseException
RamdiskStart
RaspAddCacheEntry
RaspAllocateMemory
RaspAntiAlias
RaspClearCache
RaspConvertDeltas
RaspCreatePointList
RaspCreateSegmentList
RaspDestroyCachedBitmap
RaspDestroySegmentList
RaspFreeMemory
RaspGetCacheEntry
RaspGetCompositeGlyphList
RaspGetUnscaledGlyphData
RaspGetXExtent
RaspInitializeCompositeGlyphData
RaspInitializeGlyphData
RaspInterpolatePoint
RaspLoadBearings
RaspLoadCompositeGlyphData
RaspLoadGlyphData
RaspMapCharacterCodeToGlyphIndex
RaspMapGlyphIndexToLocation
RaspRasterize
RaspRectangleCreate
RaspRectangleDestroy
RaspScaleCoordinates
RaspScanConvert
RaspTestIntersection
RawBeginOperation
RawCheckForDeleteVolume
RawCleanup
RawCleanupVcb
RawClose
RawCompletionRoutine
RawCreate
RawDeleteVcb
RawDispatch
RawEndOperation
RawFileSystemControl
RawInitialize
RawInitializeVcb
RawInitiateDeleteVolume
RawMountVolume
RawPerformDevIoCtrl
RawQueryFileSystemInformation
RawQueryFsDeviceInfo
RawQueryFsSizeInfo
RawQueryFsVolumeInfo
RawQueryInformation
RawQueryVolumeInformation
RawReadWriteDeviceControl
RawScanDeletedList
RawSetInformation
RawShutdown
RawUnload
RawUserFsCtrl
RawVerifyVolume
RcConsolidateFrames
RcFrameConsolidation
ReadAMDMsr
ReadBooleanNoFence
ReadNoFence8
RealPredecessor
RealSuccessor
RebalanceNode
ReferenceVacbLevel
RegistryOverwriteCentralProcessor
ResFwBackgroundTransition
ResFwConfigureDisplayStringResources
ResFwFindMessage
ResFwFreeContext
ResFwGetContext
ResFwpDestroyBackground
ResFwpPageInBackground
ResFwpPageOutBackground
RotBarInit
RotBarUpdate
RtlAbsoluteToSelfRelativeSD
RtlAcquirePrivilege
RtlAcquireSwapReference
RtlAddAccessAllowedAce
RtlAddAccessAllowedAceEx
RtlAddAccessAllowedObjectAce
RtlAddAccessDeniedAceEx
RtlAddAccessDeniedObjectAce
RtlAddAccessFilterAce
RtlAddAce
RtlAddAtomToAtomTable
RtlAddAtomToAtomTableEx
RtlAddAuditAccessAce
RtlAddAuditAccessAceEx
RtlAddAuditAccessObjectAce
RtlAddDynamicEHContinuationTarget
RtlAddDynamicEnforcedAddressRange
RtlAddMandatoryAce
RtlAddProcessTrustLabelAce
RtlAddRange
RtlAddResourceAttributeAce
RtlAddressInSectionTable
RtlAllocateAndInitializeSidEx
RtlAllocateHeap
RtlAnsiCharToUnicodeChar
RtlAnsiStringToUnicodeString
RtlAppendAsciizToString
RtlAppendStringToString
RtlAppendUnicodeStringToString
RtlAppendUnicodeToString
RtlApplyFunctionOverrideFixups
RtlApplyFunctionOverrideFixupsToImage
RtlApplyHotPatch
RtlApplyImportRelocationToImage
RtlApplyImportRelocationToPage
RtlApplyIndirectRelocationToImage
RtlApplyIndirectRelocationToPage
RtlApplySwitchJumpRelocationToImage
RtlApplySwitchJumpRelocationToPage
RtlAreAllAccessesGranted
RtlAreAnyAccessesGranted
RtlAreBitsClear
RtlAreBitsClearEx
RtlAreBitsSet
RtlAreBitsSetEx
RtlAreNamesEqual
RtlArmFeatureUsageProviderFlushNotification
RtlAssert
RtlAvlInsertNodeEx
RtlAvlRemoveNode
RtlBackoff
RtlBeginReadTickLock
RtlBootStatusDisableFlushing
RtlBootStatusItemInfo
RtlCSparseBitmapBitmaskRead
RtlCSparseBitmapBitmaskWrite
RtlCSparseBitmapBitsClear
RtlCSparseBitmapEnterLockingRegion
RtlCSparseBitmapFindBitSetCapped
RtlCSparseBitmapInitialize
RtlCSparseBitmapLeaveLockingRegion
RtlCSparseBitmapStart
RtlCapabilityCheck
RtlCapabilityCheckForSingleSessionSku
RtlCaptureContext
RtlCaptureContext2
RtlCaptureImageExceptionValues
RtlCaptureRetpolineImportRvas
RtlCaptureStackBackTrace
RtlCharToInteger
RtlCheckBootStatusIntegrity
RtlCheckPortableOperatingSystem
RtlCheckRegistryKey
RtlCheckSystemBootStatusIntegrity
RtlCheckTokenCapability
RtlCheckTokenMembership
RtlCheckTokenMembershipEx
RtlClearAllBits
RtlClearAllBitsEx
RtlClearBit
RtlClearBitEx
RtlClearBits
RtlClearBitsEx
RtlCmDecodeMemIoResource
RtlCmEncodeMemIoResource
RtlCompareAltitudes
RtlCompareExchangePointerMapping
RtlCompareExchangePropertyStore
RtlCompareMemory
RtlCompareMemoryUlong
RtlCompareString
RtlCompareUnicodeString
RtlCompareUnicodeStrings
RtlCompressBuffer
RtlCompressBufferDeflateInternal
RtlCompressBufferDeflateRaw
RtlCompressBufferDeflateZlib
RtlCompressBufferLZNT1
RtlCompressBufferLz4
RtlCompressBufferProgress
RtlCompressBufferXp10
RtlCompressBufferXpressHuff
RtlCompressBufferXpressHuffMax
RtlCompressBufferXpressHuffStandard
RtlCompressBufferXpressLz
RtlCompressBufferXpressLzMax
RtlCompressBufferXpressLzStandard
RtlCompressChunks
RtlCompressDeflateInitCompressionStream
RtlCompressWorkSpaceSizeDeflate
RtlCompressWorkSpaceSizeLZNT1
RtlCompressWorkSpaceSizeLz4
RtlCompressWorkSpaceSizeXp10
RtlCompressWorkSpaceSizeXpressHuff
RtlCompressWorkSpaceSizeXpressLz
RtlComputeCrc32
RtlComputeLfnChecksum
RtlConstructCrossVmEventPath
RtlConstructCrossVmMutexPath
RtlContractHashTable
RtlConvertHostPerfCounterToPerfCounter
RtlConvertLuidToUlonglong
RtlConvertSidToUnicodeString
RtlCopyBitMap
RtlCopyBitMapEx
RtlCopyContext
RtlCopyDeviceMemory
RtlCopyExtendedContext
RtlCopyKernelScpUnwindInfo
RtlCopyLuid
RtlCopyLuidAndAttributesArray
RtlCopyMemoryNonTemporal
RtlCopyRangeList
RtlCopySid
RtlCopySidAndAttributesArray
RtlCopyString
RtlCopyUnicodeString
RtlCopyVolatileMemory
RtlCopyXStateArea
RtlCountRequiredHotPatchAddressTableEntries
RtlCrc32
RtlCrc64
RtlCreateAcl
RtlCreateAtomTable
RtlCreateAtomTableEx
RtlCreateEnclaveReturnFrame
RtlCreateFunctionOverrideFixupInfo
RtlCreateHashTable
RtlCreateHashTableEx
RtlCreateHeap
RtlCreateKernelScpFunctionTable
RtlCreateRegistryKey
RtlCreateRetpolineRelocationInformation
RtlCreateRvaList
RtlCreateSecurityDescriptor
RtlCreateSystemVolumeInformationFolder
RtlCreateUnicodeString
RtlCreateUnicodeStringFromAsciiz
RtlCreateUserStack
RtlCreateUserThread
RtlCultureNameToLCID
RtlCustomCPToUnicodeN
RtlCutoverTimeToSystemTime
RtlDecompressBuffer
RtlDecompressBuffer2Xp10
RtlDecompressBufferDeflateInternal
RtlDecompressBufferDeflateRaw
RtlDecompressBufferDeflateZlib
RtlDecompressBufferEx
RtlDecompressBufferEx2
RtlDecompressBufferLZNT1
RtlDecompressBufferLz4
RtlDecompressBufferProgress
RtlDecompressBufferXp10
RtlDecompressBufferXpressHuff
RtlDecompressBufferXpressHuffProgress
RtlDecompressBufferXpressLz
RtlDecompressBufferXpressLzProgress
RtlDecompressChunks
RtlDecompressFragment
RtlDecompressFragmentEx
RtlDecompressFragmentLZNT1
RtlDecompressFragmentNS
RtlDelete
RtlDeleteAce
RtlDeleteAtomFromAtomTable
RtlDeleteDynamicEHContinuationTargetTreeNode
RtlDeleteDynamicEnforcedAddressRangeTreeNode
RtlDeleteElementGenericTable
RtlDeleteElementGenericTableAvl
RtlDeleteElementGenericTableAvlEx
RtlDeleteHashTable
RtlDeleteNoSplay
RtlDeleteOwnersRanges
RtlDeleteRange
RtlDeleteRegistryValue
RtlDereferenceAtomTable
RtlDeriveCapabilitySidsFromName
RtlDescribeChunk
RtlDescribeChunkLZNT1
RtlDescribeChunkNS
RtlDestroyAtomTable
RtlDestroyHeap
RtlDestroyLowBoxAtoms
RtlDetermineHotPatchExtent
RtlDetermineHotPatchUndoExtent
RtlDispatchException
RtlDissectName
RtlDoesNameContainWildCards
RtlDoesRequireFunctionOverrideFixups
RtlDowncaseUnicodeChar
RtlDowncaseUnicodeString
RtlDrainNonVolatileFlush
RtlDuplicateUnicodeString
RtlEmptyAtomTable
RtlEndEnumerationHashTable
RtlEndStrongEnumerationHashTable
RtlEndWeakEnumerationHashTable
RtlEnoughStackSpaceForStackCapture
RtlEnumerateBoundaryDescriptorEntries
RtlEnumerateEntryHashTable
RtlEnumerateGenericTable
RtlEnumerateGenericTableAvl
RtlEnumerateGenericTableLikeADirectory
RtlEnumerateGenericTableWithoutSplaying
RtlEnumerateGenericTableWithoutSplayingAvl
RtlEnumerateHotPatchPatches
RtlEqualLuid
RtlEqualPrefixSid
RtlEqualSid
RtlEqualString
RtlEqualUnicodeString
RtlEqualWnfChangeStamps
RtlEthernetAddressToStringA
RtlEthernetAddressToStringW
RtlEthernetStringToAddressA
RtlEthernetStringToAddressW
RtlExpandHashTable
RtlExtendCorrelationVector
RtlExtendedMagicDivide
RtlExtractBitMap
RtlExtractBitMapEx
RtlFailFast2
RtlFailFast3
RtlFcpCompareFeatureIdToFeature
RtlFcpCompareFeatureIdToFeatureUsageSubscription
RtlFcpCompareFeatureToFeature
RtlFileMapFree
RtlFileMapInitializeByNtPath
RtlFileMapMapView
RtlFillMemory
RtlFillMemoryNonTemporal
RtlFillNonVolatileMemory
RtlFindAceBySid
RtlFindAceByType
RtlFindClearBits
RtlFindClearBitsAndSet
RtlFindClearBitsAndSetEx
RtlFindClearBitsEx
RtlFindClearRuns
RtlFindClearRunsEx
RtlFindClosestEncodableLength
RtlFindDynamicEnforcedAddressInRanges
RtlFindExportedRoutineByName
RtlFindFirstRunClear
RtlFindHotPatchBase
RtlFindHotPatchBaseMachine
RtlFindHotPatchInformation
RtlFindLastBackwardRunClear
RtlFindLeastSignificantBit
RtlFindLongestRunClear
RtlFindLongestRunClearCapped
RtlFindLowerBoundInSortedArray
RtlFindMessage
RtlFindMostSignificantBit
RtlFindNextAlignedForwardRunClear
RtlFindNextClearBitBackwardsEx
RtlFindNextClearRunUlong
RtlFindNextForwardRunClear
RtlFindNextForwardRunClearCapped
RtlFindNextForwardRunClearEx
RtlFindNextForwardRunSet
RtlFindNextForwardRunSetEx
RtlFindRange
RtlFindSetBits
RtlFindSetBitsAndClear
RtlFindSetBitsAndClearEx
RtlFindSetBitsEx
RtlFindUnicodePrefix
RtlFindUnicodeSubstring
RtlFirstFreeAce
RtlFlushFeatureUsage
RtlFlushNonVolatileMemory
RtlFlushNonVolatileMemoryRanges
RtlFnToFxFrame
RtlFormatCurrentUserKeyPath
RtlFormatMessage
RtlFormatMessageEx
RtlFreeAnsiString
RtlFreeFunctionOverrideInfo
RtlFreeHeap
RtlFreeNonVolatileToken
RtlFreeOemString
RtlFreeRangeList
RtlFreeUTF8String
RtlFreeUnicodeString
RtlFunctionOverrideSelfTest
RtlFunctionOverrideSelfTest$thunk$6746816294339431247
RtlFxToFnFrame
RtlGUIDFromString
RtlGenerate8dot3Name
RtlGenerateClass5Guid
RtlGenerateQpcToIncrementConstants
RtlGetAce
RtlGetAcesBufferSize
RtlGetActiveConsoleId
RtlGetAppContainerNamedObjectPath
RtlGetAppContainerParent
RtlGetAppContainerSidType
RtlGetCallersAddress
RtlGetCompressionWorkSpaceSize
RtlGetConsoleSessionForegroundProcessId
RtlGetControlSecurityDescriptor
RtlGetCpuVendor
RtlGetCurrentServiceSessionId
RtlGetDaclSecurityDescriptor
RtlGetDefaultCodePage
RtlGetElementGenericTable
RtlGetElementGenericTableAvl
RtlGetEnabledExtendedAndSupervisorFeatures
RtlGetEnabledExtendedFeatures
RtlGetExtendedContextLength
RtlGetExtendedContextLength2
RtlGetFirstRange
RtlGetFunctionEndAddress
RtlGetGroupSecurityDescriptor
RtlGetHostNtSystemRoot
RtlGetHotPatchBaseMachine
RtlGetHotPatchSize
RtlGetHpatEntryAddress
RtlGetImageBaseAndLoadConfig
RtlGetIntegerAtom
RtlGetInterruptTimePrecise
RtlGetLastRange
RtlGetMultiTimePrecise
RtlGetNextEntryHashTable
RtlGetNextRange
RtlGetNonVolatileToken
RtlGetNtGlobalFlags
RtlGetNtProductType
RtlGetNtSystemRoot
RtlGetOwnerSecurityDescriptor
RtlGetPersistedStateLocation
RtlGetProcessorSignature
RtlGetProductInfo
RtlGetRvaListIteratorState
RtlGetSaclSecurityDescriptor
RtlGetSessionProperties
RtlGetSetBootStatusData
RtlGetSuiteMask
RtlGetSwapReferenceIndex
RtlGetSystemBootStatus
RtlGetSystemBootStatusEx
RtlGetSystemGlobalData
RtlGetSystemTimePrecise
RtlGetThreadLangIdByIndex
RtlGetTokenNamedObjectPath
RtlGetVersion
RtlGetXSaveFeatureFlags
RtlGetXSaveSupportedFeatures
RtlGuardCheckExceptionHandler
RtlGuardCheckLongJumpTarget
RtlGuardIsValidStackPointer
RtlGuardIsValidWow64StackPointer
RtlHashBytes2
RtlHashUnicodeString
RtlHeapZero
RtlHotPatchSynchronizationRequired
RtlHpEnvContextCreate
RtlHpGlobalsInitialize
RtlHpHeapManagerInitialize
RtlHpKInitializeHeapManager
RtlIcCompletionContextSize
RtlIcParseInstruction
RtlIdentifierAuthoritySid
RtlIdnToAscii
RtlIdnToNameprepUnicode
RtlIdnToUnicode
RtlImageDirectoryEntryToData
RtlImageNtHeader
RtlImageNtHeaderEx
RtlImpersonateSelfEx
RtlIncrementCorrelationVector
RtlInitAnsiString
RtlInitAnsiStringEx
RtlInitCodePageTable
RtlInitEnumerationHashTable
RtlInitFunctionOverrideCapabilities
RtlInitFunctionalityCache
RtlInitKernelModeSpecialMachineFrameEntries
RtlInitMinimalBarrier
RtlInitString
RtlInitStringEx
RtlInitStrongEnumerationHashTable
RtlInitUTF8String
RtlInitUTF8StringEx
RtlInitUnicodeString
RtlInitUnicodeStringEx
RtlInitWeakEnumerationHashTable
RtlInitializeBitMap
RtlInitializeBitMapEx
RtlInitializeBootStatDataCache
RtlInitializeBootStatusDataBlackBox
RtlInitializeCorrelationVector
RtlInitializeExceptionLog
RtlInitializeExtendedContext
RtlInitializeExtendedContext2
RtlInitializeGenericTable
RtlInitializeGenericTableAvl
RtlInitializeHistoryTable
RtlInitializeImageSystemOverride
RtlInitializeKscpCfgFunctions
RtlInitializeRangeList
RtlInitializeSid
RtlInitializeSidEx
RtlInitializeSwapReference
RtlInitializeSystemOverrideDelta
RtlInitializeTRng
RtlInitializeUnicodePrefix
RtlInsertDynamicUserFunctionTable
RtlInsertElementGenericTable
RtlInsertElementGenericTableAvl
RtlInsertElementGenericTableFull
RtlInsertElementGenericTableFullAvl
RtlInsertEntryHashTable
RtlInsertHeadCircularList
RtlInsertInvertedFunctionTable
RtlInsertUnicodePrefix
RtlInt64ToUnicodeString
RtlIntegerToChar
RtlIntegerToUnicode
RtlIntegerToUnicodeString
RtlInterlockedClearBitRun
RtlInterlockedClearBitRunEx
RtlInterlockedPopEntrySList
RtlInterlockedSetBitRun
RtlInterlockedSetBitRunEx
RtlInterlockedSetClearBits
RtlInterlockedSetClearRun
RtlInterlockedSetClearRunEx
RtlInternEntryDereference
RtlInternTableInitialize
RtlInternTableIntern
RtlIntersectBitMaps
RtlIntersectBitMapsEx
RtlInvertRangeList
RtlInvertRangeListEx
RtlIoDecodeMemIoResource
RtlIoEncodeMemIoResource
RtlIpv4AddressToStringA
RtlIpv4AddressToStringExA
RtlIpv4AddressToStringExW
RtlIpv4AddressToStringW
RtlIpv4StringToAddressA
RtlIpv4StringToAddressExA
RtlIpv4StringToAddressExW
RtlIpv4StringToAddressW
RtlIpv6AddressToStringA
RtlIpv6AddressToStringExA
RtlIpv6AddressToStringExW
RtlIpv6AddressToStringW
RtlIpv6StringToAddressA
RtlIpv6StringToAddressExA
RtlIpv6StringToAddressExW
RtlIpv6StringToAddressW
RtlIsApiSetImplemented
RtlIsCapabilitySid
RtlIsCloudFilesPlaceholder
RtlIsCodeInEcRanges
RtlIsElevatedRid
RtlIsEnclaveFeaturePresent
RtlIsFeatureEnabledForEnterprise
RtlIsFunctionalityAvailable
RtlIsGenericTableEmpty
RtlIsGenericTableEmptyAvl
RtlIsImageFullyRetpolined
RtlIsMultiSessionSku
RtlIsMultiUsersInSessionSku
RtlIsNameInExpression
RtlIsNameInUnUpcasedExpression
RtlIsNameLegalDOS8Dot3
RtlIsNonEmptyDirectoryReparsePointAllowed
RtlIsNormalizedString
RtlIsNtDdiVersionAvailable
RtlIsPackageSid
RtlIsParentOfChildAppContainer
RtlIsPartialPlaceholder
RtlIsPartialPlaceholderFileHandle
RtlIsPartialPlaceholderFileInfo
RtlIsPatchMachineApplicable
RtlIsProcessorFeaturePresent
RtlIsRangeAvailable
RtlIsSandboxedToken
RtlIsServicePackVersionInstalled
RtlIsSpecialUnwind
RtlIsStateSeparationEnabled
RtlIsUntrustedObject
RtlIsValidOemCharacter
RtlIsValidProcessTrustLabelSid
RtlIsZeroMemory
RtlLCIDToCultureName
RtlLargeIntegerToChar
RtlLargeIntegerToUnicode
RtlLengthCurrentClearRunBackward
RtlLengthCurrentClearRunBackwardEx
RtlLengthCurrentClearRunForward
RtlLengthCurrentClearRunForwardEx
RtlLengthRequiredSid
RtlLengthSecurityDescriptor
RtlLengthSecurityDescriptorStrict
RtlLengthSid
RtlLengthSidAsUnicodeString
RtlLoadString
RtlLocalTimeToSystemTime
RtlLocateExtendedFeature
RtlLocateExtendedFeature2
RtlLocateSupervisorFeature
RtlLockBootStatusData
RtlLogUnexpectedCodepath
RtlLongLongAdd
RtlLookupAtomInAtomTable
RtlLookupElementGenericTable
RtlLookupElementGenericTableAvl
RtlLookupElementGenericTableFull
RtlLookupElementGenericTableFullAvl
RtlLookupEntryHashTable
RtlLookupExceptionHandler
RtlLookupFirstMatchingElementGenericTableAvl
RtlLookupFunctionEntry
RtlLookupFunctionEntryEx
RtlLookupFunctionTable
RtlLookupFunctionTableEx
RtlLookupImageSectionByName
RtlLookupPrimaryFunctionEntry
RtlMakeSelfRelativeSD
RtlMapGenericMask
RtlMapSecurityErrorToNtStatus
RtlMarkExceptionHandlingPages
RtlMarkHiberPhase
RtlMergeBitMaps
RtlMergeBitMapsEx
RtlMergeRangeLists
RtlMinimalBarrier
RtlMoveMemory
RtlMoveVolatileMemory
RtlMultiByteToUnicodeN
RtlMultiByteToUnicodeSize
RtlNextUnicodePrefix
RtlNlsDeleteState
RtlNlsInitState
RtlNormalizeProcessParams
RtlNormalizeSecurityDescriptor
RtlNormalizeString
RtlNotifyFeatureUsage
RtlNtStatusToDosError
RtlNtStatusToDosErrorNoTeb
RtlNumberGenericTableElements
RtlNumberGenericTableElementsAvl
RtlNumberOfClearBits
RtlNumberOfClearBitsEx
RtlNumberOfClearBitsInRange
RtlNumberOfSetBits
RtlNumberOfSetBitsEx
RtlNumberOfSetBitsInRange
RtlNumberOfSetBitsInRangeEx
RtlNumberOfSetBitsUlongPtr
RtlOemStringToCountedUnicodeString
RtlOemStringToUnicodeString
RtlOemToUnicodeN
RtlOpenCurrentUser
RtlOpenImageFileOptionsKey
RtlOsDeploymentState
RtlOwnerAcesPresent
RtlParseLeapSecondData
RtlPcToFileHeader
RtlPcToFileName
RtlPcToFilePath
RtlPerformRetpolineRelocationsOnImageEx
RtlPinAtomInAtomTable
RtlPopulateHpatEntry
RtlPrefetchMemoryNonTemporal
RtlPrefixString
RtlPrefixUnicodeString
RtlPrepareEnclaveCall
RtlQueryAllFeatureConfigurations
RtlQueryAllInternalFeatureConfigurations
RtlQueryAtomInAtomTable
RtlQueryAtomsInAtomTable
RtlQueryDynamicTimeZoneInformation
RtlQueryElevationFlags
RtlQueryFeatureConfiguration
RtlQueryFeatureConfigurationChangeStamp
RtlQueryFeatureConfigurationFromBuffers
RtlQueryImageFileExecutionOptions
RtlQueryImageFileKeyOption
RtlQueryInformationAcl
RtlQueryModuleInformation
RtlQueryPackageClaims
RtlQueryPackageIdentity
RtlQueryPackageIdentityEx
RtlQueryPointerMapping
RtlQueryProcessPlaceholderCompatibilityMode
RtlQueryPropertyStore
RtlQueryRegistryValueWithFallback
RtlQueryRegistryValues
RtlQueryRegistryValuesEx
RtlQueryThreadPlaceholderCompatibilityMode
RtlQueryTimeZoneInformation
RtlQueryValidationRunlevel
RtlRaiseCustomSystemEventTrigger
RtlRaiseException
RtlRaiseNoncontinuableException
RtlRaiseStatus
RtlRandom
RtlRandomEx
RtlRbInsertNodeEx
RtlRbRemoveNode
RtlRbReplaceNode
RtlRealPredecessor
RtlRealSuccessor
RtlRecordFeatureUsage
RtlRegisterFeatureConfigurationChangeNotification
RtlRegisterFeatureUsageProvider
RtlReleasePrivilege
RtlReleaseSwapReference
RtlRemoveDynamicEnforcedAddressRange
RtlRemoveDynamicUserFunctionTable
RtlRemoveEntryHashTable
RtlRemoveInvertedFunctionTable
RtlRemovePointerMapping
RtlRemovePropertyStore
RtlRemoveUnicodePrefix
RtlReplaceSidInSd
RtlReserveChunk
RtlReserveChunkLZNT1
RtlReserveChunkNS
RtlRestoreBootStatusDefaults
RtlRestoreContext
RtlRestoreSystemBootStatusDefaults
RtlRunOnceBeginInitialize
RtlRunOnceComplete
RtlRunOnceExecuteOnce
RtlRunOnceInitialize
RtlScrubMemory
RtlSecondsSince1970ToTime
RtlSecondsSince1980ToTime
RtlSectionTableFromVirtualAddress
RtlSelfRelativeToAbsoluteSD
RtlSelfRelativeToAbsoluteSD2
RtlSetActiveConsoleId
RtlSetActiveTimeBias
RtlSetAllBits
RtlSetAllBitsEx
RtlSetBit
RtlSetBitEx
RtlSetBits
RtlSetBitsEx
RtlSetConsoleSessionForegroundProcessId
RtlSetControlSecurityDescriptor
RtlSetDaclSecurityDescriptor
RtlSetDynamicTimeZoneInformation
RtlSetGroupSecurityDescriptor
RtlSetOwnerSecurityDescriptor
RtlSetPortableOperatingSystem
RtlSetProcessPlaceholderCompatibilityMode
RtlSetSaclSecurityDescriptor
RtlSetSystemBootStatus
RtlSetSystemBootStatusEx
RtlSetSystemGlobalData
RtlSetThreadPlaceholderCompatibilityMode
RtlSetTimeZoneInformation
RtlSetVolatileMemory
RtlShiftLeftBitMap
RtlShiftLeftBitMapEx
RtlSidDominates
RtlSidDominatesForTrust
RtlSidHashInitialize
RtlSidHashLookup
RtlSizeHeap
RtlSizeOfRetpolineIndirectFixup
RtlSizeOfRetpolineRelocationEntry
RtlSparseArrayElementAllocate
RtlSparseArrayElementAllocated
RtlSparseArrayElementFindCapped
RtlSplay
RtlStackTraceHashFunction
RtlStateDurationCapture
RtlStateDurationUpdate
RtlStdInitializeStackDatabase
RtlStdLogStackTrace
RtlStdReleaseStackTrace
RtlStringCbCatExA
RtlStringCbCatNW
RtlStringCbCatW
RtlStringCbCopyA
RtlStringCbCopyExA
RtlStringCbCopyExW
RtlStringCbCopyNExW
RtlStringCbCopyNW
RtlStringCbCopyUnicodeString
RtlStringCbCopyW
RtlStringCbLengthA
RtlStringCbLengthW
RtlStringCbPrintfA
RtlStringCbPrintfExA
RtlStringCbPrintfExW
RtlStringCbPrintfW
RtlStringCchCatExW
RtlStringCchCatNW
RtlStringCchCatW
RtlStringCchCopyA
RtlStringCchCopyExW
RtlStringCchCopyNExW
RtlStringCchCopyNW
RtlStringCchCopyW
RtlStringCchLengthW
RtlStringCchPrintfA
RtlStringCchPrintfExW
RtlStringCchPrintfW
RtlStringFromGUID
RtlStringFromGUIDEx
RtlStronglyEnumerateEntryHashTable
RtlSubAuthorityCountSid
RtlSubAuthoritySid
RtlSubtreePredecessor
RtlSubtreeSuccessor
RtlSuffixUnicodeString
RtlSystemTimeToLocalTime
RtlTestBit
RtlTestBitEx
RtlTestProtectedAccess
RtlTimeFieldsToTime
RtlTimeToElapsedTimeFields
RtlTimeToSecondsSince1970
RtlTimeToSecondsSince1980
RtlTimeToTimeFields
RtlTimelineBitmapMerge
RtlTimelineBitmapUpdate
RtlTimelineBitmapUpdateRange
RtlTraceDatabaseAdd
RtlTraceDatabaseCreate
RtlTraceDatabaseDestroy
RtlTraceDatabaseEnumerate
RtlTraceDatabaseFind
RtlTraceDatabaseLock
RtlTraceDatabaseUnlock
RtlTraceDatabaseValidate
RtlTryEndReadTickLock
RtlUIntAdd
RtlULongLongAdd
RtlULongLongMult
RtlULongLongSub
RtlULongSub
RtlUShortAdd
RtlUTF8StringToUnicodeString
RtlUTF8ToUnicodeN
RtlUdiv128
RtlUnalignedStringCchLengthW
RtlUnicodeStringCat
RtlUnicodeStringCatString
RtlUnicodeStringCbCatStringN
RtlUnicodeStringCchCopyStringN
RtlUnicodeStringCopy
RtlUnicodeStringCopyString
RtlUnicodeStringCopyStringEx
RtlUnicodeStringPrintf
RtlUnicodeStringPrintfEx
RtlUnicodeStringToAnsiString
RtlUnicodeStringToCountedOemString
RtlUnicodeStringToInt64
RtlUnicodeStringToInteger
RtlUnicodeStringToOemString
RtlUnicodeStringToUTF8String
RtlUnicodeStringValidateEx
RtlUnicodeToCustomCPN
RtlUnicodeToMultiByteN
RtlUnicodeToMultiByteSize
RtlUnicodeToOemN
RtlUnicodeToUTF8N
RtlUnlockBootStatusData
RtlUnregisterFeatureConfigurationChangeNotification
RtlUnregisterFeatureUsageProvider
RtlUnsignedMultiplyHigh
RtlUnwind
RtlUnwindEx
RtlUpcaseUnicodeChar
RtlUpcaseUnicodeString
RtlUpcaseUnicodeStringToAnsiString
RtlUpcaseUnicodeStringToCountedOemString
RtlUpcaseUnicodeStringToOemString
RtlUpcaseUnicodeToCustomCPN
RtlUpcaseUnicodeToMultiByteN
RtlUpcaseUnicodeToOemN
RtlUpdateImportRelocationsInImage
RtlUpdateSwapReference
RtlUpdateXSaveSizeAndVolatileFeatures
RtlUpperChar
RtlUpperString
RtlValidAcl
RtlValidProcessProtection
RtlValidRelativeSecurityDescriptor
RtlValidSecurityDescriptor
RtlValidSid
RtlValidateCorrelationVector
RtlValidateDynamicFixupRelocation
RtlValidateHotPatchBase
RtlValidateUnicodeString
RtlVerifyUserUnwindTarget
RtlVerifyVersionInfo
RtlVirtualUnwind
RtlVirtualUnwind2
RtlWalkFrameChain
RtlWeaklyEnumerateEntryHashTable
RtlWow64GetCpuAreaEnabledFeatures
RtlWow64GetCpuAreaInfo
RtlWow64GetEquivalentMachineCHPE
RtlWriteAcquireTickLock
RtlWriteNonVolatileMemory
RtlWriteRegistryValue
RtlWriteReleaseTickLock
RtlWriteTryAcquireTickLock
RtlXRestore
RtlXRestoreS
RtlXSave
RtlXSaveS
RtlZeroHeap
RtlZeroMemory
RtlpAcquireBootStatusLock
RtlpAcquirePropStoreLockExclusive
RtlpAcquirePropStoreLockShared
RtlpAddIntersectingRanges
RtlpAddKnownAce
RtlpAddKnownObjectAce
RtlpAddRange
RtlpAddToMergedRange
RtlpAllocateAtom
RtlpAllocateAtomTableEntry
RtlpAllocateHeap
RtlpAllocateHeapRaiseException
RtlpAllocateSecondLevelDir
RtlpAllowsLowBoxAccess
RtlpAnalyzeHeapFailure
RtlpApplyAclToObject
RtlpApplyFunctionPatch
RtlpApplyGenericRetpolineFixup
RtlpArchContextFlagFromMachine
RtlpAtomMapAtomToHandleEntry
RtlpBreakWithStatusInstruction
RtlpCSparseBitmapPageCommit
RtlpCSparseBitmapPageDecommit
RtlpCSparseBitmapUnlock
RtlpCSparseBitmapWaitOnAddress
RtlpCalculateSubsegmentSizeIndex
RtlpCallInterceptRoutine
RtlpCallQueryRegistryRoutine
RtlpCapChkTelemetryRunOnce
RtlpCapabilityCheckSystemCapability
RtlpCaptureContext
RtlpCaptureContext2
RtlpCaptureDynamicRelocationTableRva
RtlpCaptureRetpolineBinaryInfoForImage
RtlpCheckDynamicTimeZoneInformation
RtlpCheckFunctionPatchApplied
RtlpCheckFunctionPatchAppliedInOriginalImage
RtlpCoalesceFreeBlocks
RtlpCombineAcls
RtlpCompareKnownObjectAces
RtlpComparePropertyEntry
RtlpCompressRvaList
RtlpComputeCrcInternal
RtlpComputeEpilogueOffset
RtlpComputeFraction
RtlpComputeMergedAcl
RtlpComputeMergedAcl2
RtlpConstructCrossVmObjectPath
RtlpConstructImportRelocationFixup
RtlpConstructIndirectRelocationFixup
RtlpConstructSwitchJumpRelocationFixup
RtlpControlFlowGuardEnforced
RtlpConvertAbsoluteToRelativeSecurityAttribute
RtlpConvertFunctionEntry
RtlpCopyAces
RtlpCopyBitMapTailToHead
RtlpCopyBitMapTailToHeadEx
RtlpCopyDeviceMemory
RtlpCopyEffectiveAce
RtlpCopyExtendedContext
RtlpCopyKernelCetChunk
RtlpCopyLegacyContext
RtlpCopyLegacyContextArm
RtlpCopyLegacyContextArm64
RtlpCopyLegacyContextX86
RtlpCopyRangeListEntry
RtlpCopyRetpolineRelocationBlockEntryArray
RtlpCopyXStateChunk
RtlpCreateHashTable
RtlpCreateHeap
RtlpCreateServerAcl
RtlpCreateSplitBlock
RtlpCreateUCREntry
RtlpCreateUserProcess
RtlpCreateUserThreadEx
RtlpCtAllocateMemory
RtlpCtContextFree
RtlpCtContextInit
RtlpCtFreeMemory
RtlpCtQueueWorkItem
RtlpCtSelfSubscribe
RtlpDeCommitFreeBlock
RtlpDeleteFromMergedRange
RtlpDeleteRangeListEntry
RtlpDereferenceAtom
RtlpDestroyHeapSegment
RtlpDetermineHotPatchExtent
RtlpDidUnicodeToOemWork
RtlpDynamicEHContinuationTargetsTreeCompare
RtlpDynamicEnforcedAddressRangesTreeCompare
RtlpDynamicLookasideBucketCompare
RtlpDynamicLookasideFlush
RtlpDynamicLookasideInitialize
RtlpDynamicLookasideRebalance
RtlpEcReadPolicyState
RtlpEnvRegisterFaultRange
RtlpEtcGetDwordFromPersistedState
RtlpEtcGetDwordFromRegistry
RtlpEtcIsValidFeatureId
RtlpExceptionHandler
RtlpExecuteHandlerForException
RtlpExecuteHandlerForUnwind
RtlpExtendHeap
RtlpFcAddDelayedUsageReportToBuffer
RtlpFcAddFeatureUsageDataToBuffer
RtlpFcAddUsageSubscriptionFromUpdate
RtlpFcApplyUpdateAndAddFeature
RtlpFcBufferManagerDereferenceBuffers
RtlpFcBufferManagerReferenceBuffers
RtlpFcBufferManagerUpdateBuffers
RtlpFcCalculateRequiredSizeForNewFeatureTable
RtlpFcCalculateRequiredSizeForNewUsageSubscriptionTable
RtlpFcCompareFeatureToUpdate
RtlpFcCompareUpdates
RtlpFcCompareUsageSubscriptionToUsageSubscription
RtlpFcCompareUsageSubscriptionUpdates
RtlpFcConfigurationTypeToBufferType
RtlpFcConvertFeatureConfigurationsInternalToExternal
RtlpFcCreateAndAddFeatureFromUpdate
RtlpFcDoesFeatureHaveUniqueState
RtlpFcDrainDelayedUsageReportBuffer
RtlpFcEnterRegion
RtlpFcGetBufferManager
RtlpFcInitializeBuffers
RtlpFcInitializeDelayedFeatureUsageDataBuffer
RtlpFcInitializeDelayedUsageReportBuffer
RtlpFcIsUpdateModifyingOrAddingFeature
RtlpFcLeaveRegion
RtlpFcLinearSearchInSortedArray
RtlpFcNotifyFeatureUsageTarget
RtlpFcQueryAllFeatureConfigurationsFromBuffers
RtlpFcQueryAllInternalFeatureConfigurationsFromBuffers
RtlpFcQueryFeatureConfigurationFromBufferSet
RtlpFcQueryFeatureConfigurationFromBuffers
RtlpFcReadHighLowHigh
RtlpFcSectionTypeToBufferType
RtlpFcSendFeatureUsageNotifications
RtlpFcSizeOfFeatureUsageDataBuffer
RtlpFcUpdateFeature
RtlpFcUpdateFeatureConfiguration
RtlpFcUpdateUsageTriggers
RtlpFcValidateFeatureConfigurationBuffer
RtlpFcValidateFeatureConfigurationType
RtlpFcValidateFeatureUsageSubscriptionBuffer
RtlpFcWriteHighLowHigh
RtlpFilterSacl
RtlpFindAndCommitPages
RtlpFindDynamicEHContinuationTarget
RtlpFindEntry
RtlpFindMessageInTable
RtlpFindRegTziForCurrentYear
RtlpFindUCREntry
RtlpFlsAlloc
RtlpFlsDataCleanup
RtlpFlsFree
RtlpFlsHeapAlloc
RtlpFlsHeapFree
RtlpFlsInitialize
RtlpFlsLockInitialize
RtlpFlsSetValueSlot
RtlpFlsSlotDataValidateEmpty
RtlpFreeAllAtom
RtlpFreeAtom
RtlpFreeHandleForAtom
RtlpFreeHeap
RtlpFreeNTHeapInternal
RtlpFreeRangeListEntry
RtlpFunctionAddressTableEntry
RtlpFunctionOverrideSelfTestSuccess
RtlpGenerateInheritAcl
RtlpGenerateInheritedAce
RtlpGenericInverseCouplingWorker
RtlpGenericMATSPlusWorker
RtlpGenericRandomPatternWorker
RtlpGenericStrideWorker
RtlpGetBootStatusPath
RtlpGetBootStatusPathFromRegistry
RtlpGetChainHead
RtlpGetContextFlagsLocation
RtlpGetDynamicTimeZoneInfoHandle
RtlpGetEntireXStateAreaLength
RtlpGetLegacyContextLength
RtlpGetNameFromLangInfoNode
RtlpGetNonLegacyXStateAreaLength
RtlpGetNormalization
RtlpGetNtProductTypeFromRegistry
RtlpGetPersistedRegistryLocation
RtlpGetPolicyValueForSystemCapability
RtlpGetRegistryHandle
RtlpGetSetBootStatusData
RtlpGetStackLimits
RtlpGetStackLimitsEx
RtlpGetTimeZoneInfoHandle
RtlpGetTokenNamedObjectPath
RtlpGetWindowsPolicy
RtlpHashStringToAtom
RtlpHeapAddListEntry
RtlpHeapExceptionFilter
RtlpHeapFatalExceptionFilter
RtlpHeapFindListLookupEntry
RtlpHeapHandleError
RtlpHeapListCompare
RtlpHeapRemoveListEntry
RtlpHeapZeroFastString
RtlpHpAcquireLockExclusive
RtlpHpAcquireLockShared
RtlpHpAcquireQueuedLockExclusive
RtlpHpAcquireReleaseLockExclusive
RtlpHpAllocVA
RtlpHpAllocVirtBlockCommitFirst
RtlpHpAllocateHeap
RtlpHpAllocateHeapBackend
RtlpHpAllocateHeapSlow
RtlpHpCalculateAllocSize
RtlpHpCustomVaCallbacksEncodedComparison
RtlpHpCustomVaCallbacksRegistrarRegister
RtlpHpCustomVaCallbacksRegistrarUnregister
RtlpHpEnvAllocVA
RtlpHpEnvCompactionIsScheduled
RtlpHpEnvCompactionSchedule
RtlpHpEnvFreeVA
RtlpHpEnvTlsAlloc
RtlpHpEnvTlsGetValue
RtlpHpEnvTlsSetValue
RtlpHpExtrasAppend
RtlpHpExtrasSetPresent
RtlpHpFixedHeapAlloc
RtlpHpFixedHeapCommitRoutine
RtlpHpFixedHeapCreate
RtlpHpFixedVsAllocate
RtlpHpFixedVsCommit
RtlpHpFixedVsDecommit
RtlpHpFixedVsFree
RtlpHpFreeHeap
RtlpHpFreeVA
RtlpHpHeapAllocate
RtlpHpHeapCheckCommitLimit
RtlpHpHeapCompact
RtlpHpHeapCreate
RtlpHpHeapDestroy
RtlpHpHeapExtendContext
RtlpHpHeapHandleError
RtlpHpInitializeLock
RtlpHpLargeAlloc
RtlpHpLargeAllocGetMetadata
RtlpHpLargeAllocationDestroy
RtlpHpLargeFree
RtlpHpLargeLockAcquire
RtlpHpLargeLockAcquireShared
RtlpHpLargeLockRelease
RtlpHpLargeLockReleaseShared
RtlpHpLfhBlockBitmapInitialize
RtlpHpLfhBucketActivate
RtlpHpLfhBucketAddSubsegment
RtlpHpLfhBucketCheckAndUpdate
RtlpHpLfhBucketCleanup
RtlpHpLfhBucketComputeNewSubsegmentBlockCount
RtlpHpLfhBucketGetSlotInfo
RtlpHpLfhBucketGetSubsegment
RtlpHpLfhBucketInitialize
RtlpHpLfhBucketUpdateAffinityMapping
RtlpHpLfhBucketUpdateStats
RtlpHpLfhContextCompact
RtlpHpLfhContextFree
RtlpHpLfhContextInitialize
RtlpHpLfhContextLockExtension
RtlpHpLfhContextMaximumExtension
RtlpHpLfhContextMetadataAllocate
RtlpHpLfhContextMetadataFree
RtlpHpLfhContextPrivateHeatMapCreate
RtlpHpLfhContextSlotAllocate
RtlpHpLfhContextSlotStandbyProcess
RtlpHpLfhContextStart
RtlpHpLfhContextTlsCleanup
RtlpHpLfhContextUnlockExtension
RtlpHpLfhContextUpdateConfig
RtlpHpLfhContextUpdateFreeCommitCount
RtlpHpLfhHeatMapEvaluate
RtlpHpLfhHeatMapQuery
RtlpHpLfhHeatMapQueryEx
RtlpHpLfhHeatMapUpdate
RtlpHpLfhOwnerCleanup
RtlpHpLfhOwnerCompact
RtlpHpLfhOwnerFreeListProcess
RtlpHpLfhOwnerGetSubsegment
RtlpHpLfhOwnerInitialize
RtlpHpLfhOwnerListCompact
RtlpHpLfhOwnerMoveSubsegment
RtlpHpLfhOwnerRunMaintenance
RtlpHpLfhPrivateSlotCreate
RtlpHpLfhPrivateSlotListCompact
RtlpHpLfhPrivateSlotShutdown
RtlpHpLfhPrivateSlotsCompact
RtlpHpLfhReportError
RtlpHpLfhSlotActiveSubsegmentReset
RtlpHpLfhSlotAllocateSlow
RtlpHpLfhSlotInitialize
RtlpHpLfhSubsegmentCommitBlock
RtlpHpLfhSubsegmentComputeCommitUnit
RtlpHpLfhSubsegmentConstructCommitState
RtlpHpLfhSubsegmentCountAllocatedBlocks
RtlpHpLfhSubsegmentCountEmptyUnits
RtlpHpLfhSubsegmentCreate
RtlpHpLfhSubsegmentDecBlockCounts
RtlpHpLfhSubsegmentDecommitPages
RtlpHpLfhSubsegmentDelayFreeListBatch
RtlpHpLfhSubsegmentDelayFreeListProcess
RtlpHpLfhSubsegmentFindEmptyUnits
RtlpHpLfhSubsegmentFree
RtlpHpLfhSubsegmentIncBlockCounts
RtlpHpLfhSubsegmentInitialize
RtlpHpLfhSubsegmentPrefetch
RtlpHpLfhSubsegmentPrefetchRange
RtlpHpLfhSubsegmentReformatAsMulti
RtlpHpLfhSubsegmentReformatAsSingle
RtlpHpLfhSubsegmentReformatCheck
RtlpHpLfhSubsegmentReserveBlock
RtlpHpLfhSubsegmentSetWitheldBlocks
RtlpHpLfhThreadDataInitializeSet
RtlpHpMetadataAlloc
RtlpHpMetadataCommit
RtlpHpMetadataFree
RtlpHpMetadataHeapCreate
RtlpHpMetadataHeapStart
RtlpHpQueryVA
RtlpHpRegisterEnvironment
RtlpHpReleaseLockExclusive
RtlpHpReleaseLockShared
RtlpHpReleaseQueuedLockExclusive
RtlpHpSegAlloc
RtlpHpSegContextCleanup
RtlpHpSegContextCompact
RtlpHpSegContextInitialize
RtlpHpSegContextReserve
RtlpHpSegDescriptorValidate
RtlpHpSegFreeInternal
RtlpHpSegFreeRangeInsert
RtlpHpSegFreeRangeRemove
RtlpHpSegHeapAddSegment
RtlpHpSegHeapCheckCommitLimit
RtlpHpSegLargeRangeAllocate
RtlpHpSegLfhAllocate
RtlpHpSegLfhExtendContext
RtlpHpSegLfhVsCommit
RtlpHpSegLfhVsDecommit
RtlpHpSegLfhVsFree
RtlpHpSegLockAcquire
RtlpHpSegLockRelease
RtlpHpSegMgrAllocate
RtlpHpSegMgrApplyLargePagePolicy
RtlpHpSegMgrCommit
RtlpHpSegMgrCommitComplete
RtlpHpSegMgrCommitInitiate
RtlpHpSegMgrLock
RtlpHpSegMgrRelease
RtlpHpSegMgrReserve
RtlpHpSegMgrUnlock
RtlpHpSegMgrVaCtxAlloc
RtlpHpSegMgrVaCtxFree
RtlpHpSegMgrVaCtxInitialize
RtlpHpSegMgrVaCtxInsert
RtlpHpSegPageRangeAllocate
RtlpHpSegPageRangeCoalesce
RtlpHpSegPageRangeCommit
RtlpHpSegPageRangeComputeLargePageCost
RtlpHpSegPageRangeHandleCommit
RtlpHpSegPageRangeShrink
RtlpHpSegPageRangeSplit
RtlpHpSegSegmentAllocate
RtlpHpSegSegmentFree
RtlpHpSegSegmentInitialize
RtlpHpSegSetExtraPresent
RtlpHpSegSubAllocate
RtlpHpSegTlsCleanup
RtlpHpSegVsAllocate
RtlpHpVaMgrAlloc
RtlpHpVaMgrAllocAligned
RtlpHpVaMgrCtxAlloc
RtlpHpVaMgrCtxAllocatorCompare
RtlpHpVaMgrCtxAllocatorFind
RtlpHpVaMgrCtxAllocatorReference
RtlpHpVaMgrCtxCommit
RtlpHpVaMgrCtxDecommit
RtlpHpVaMgrCtxFree
RtlpHpVaMgrCtxQuery
RtlpHpVaMgrCtxStart
RtlpHpVaMgrFree
RtlpHpVaMgrRangeCleanup
RtlpHpVaMgrRangeCoalesce
RtlpHpVaMgrRangeCommit
RtlpHpVaMgrRangeCommitProcess
RtlpHpVaMgrRangeCreate
RtlpHpVaMgrRangeDecommit
RtlpHpVaMgrRangeFind
RtlpHpVaMgrRangeFree
RtlpHpVaMgrRangeSplit
RtlpHpVaMgrRegionAllocate
RtlpHpVsChunkAlignSplit
RtlpHpVsChunkComputeCost
RtlpHpVsChunkFree
RtlpHpVsChunkSize
RtlpHpVsChunkSplit
RtlpHpVsCommitLimitCheck
RtlpHpVsContextAllocate
RtlpHpVsContextAllocateInternal
RtlpHpVsContextCleanup
RtlpHpVsContextCompact
RtlpHpVsContextCompactChunks
RtlpHpVsContextFree
RtlpHpVsContextFreeList
RtlpHpVsContextInitialize
RtlpHpVsContextMultiAlloc
RtlpHpVsFreeChunkInsert
RtlpHpVsFreeChunkRemove
RtlpHpVsSubsegmentCleanup
RtlpHpVsSubsegmentCommitPages
RtlpHpVsSubsegmentFree
RtlpHpVsSubsegmentInitialize
RtlpIcAccessMemory
RtlpIcDecodeModRm
RtlpIcDecodeModRmOperand
RtlpIcEmulateGroup0Instruction
RtlpIcEmulateGroup11Instruction
RtlpIcEmulateGroup1Instruction
RtlpIcEmulateInstruction
RtlpIcEmulateMovzx
RtlpIcEmulateRegisterPushPop
RtlpIcFetchImmediateOperand
RtlpIcFetchInstructionBytes
RtlpIcGetRegisterAddressByIndex
RtlpIcParseInstruction
RtlpIcParseInstructionPrefix
RtlpIcReadOperandValue
RtlpIcSetFlagsAdd
RtlpIcSetFlagsSub
RtlpIcSetFlagsZeroSignParity
RtlpIcSetImmediateOperandSize
RtlpIcSignExtendOperandValue
RtlpIcWriteRegisterValue
RtlpIdnToUnicodeWorker
RtlpImageDirectoryEntryToData32
RtlpImageDirectoryEntryToDataEx
RtlpInheritAcl2
RtlpInitCodePageTables
RtlpInitFunctionOverrideCapabilities
RtlpInitMachineFrameEntries
RtlpInitNlsFileName
RtlpInitNlsSectionName
RtlpInitUppercaseTables
RtlpInitializeHandleTableForAtomTable
RtlpInitializeHeapSegment
RtlpInitializeLockAtomTable
RtlpInitializeNonVolatileFlush
RtlpInitializeSecondLevelDir
RtlpInitializeStackTraceDatabase
RtlpInsertFreeBlock
RtlpInsertInvertedFunctionTableEntry
RtlpInsertStringAtom
RtlpInsertUCRBlock
RtlpInterlockedFlushSList
RtlpInterlockedPopEntrySList
RtlpInterlockedPushEntrySList
RtlpInternEntryCreate
RtlpInternEntryFind
RtlpInternEntryHash
RtlpInternEntryMatch
RtlpInternHashBucketsAllocate
RtlpInternHashBucketsFree
RtlpIsALicensedRegularLanguage
RtlpIsAddressInIgnoreRegion
RtlpIsAppContainer
RtlpIsDuplicateAce
RtlpIsFrameInBounds
RtlpIsFrameInBoundsEx
RtlpIsNameInExpressionPrivate
RtlpIsNoShadowStackUnwindMachineFrameEntry
RtlpIsRangeAvailable
RtlpIsUtf8Process
RtlpLangNameInMultiSzString
RtlpLoadInstallLanguageFallback
RtlpLoadLanguageConfigList
RtlpLoadPolicyLanguageSpec
RtlpLocateRelatedBlocks
RtlpLockAtomTable
RtlpLogCapabilityCheckLatency
RtlpLogExceptionDispatch
RtlpLogExceptionDisposition
RtlpLogExceptionHandler
RtlpLogHeapAllocateEvent
RtlpLogHeapCommit
RtlpLogHeapCreateEvent
RtlpLogHeapDecommit
RtlpLogHeapFailure
RtlpLogHeapFreeEvent
RtlpLookupDynamicUserFunctionTable
RtlpLookupFunctionEntryForStackWalks
RtlpLookupLowBox
RtlpLookupOrCreateLowBox
RtlpLookupPrimaryFunctionEntry
RtlpLookupUserFunctionTable
RtlpLookupUserFunctionTableInverted
RtlpMakeXpressCallback
RtlpMuiRegAddAlternateCodePage
RtlpMuiRegAddLanguageByName
RtlpMuiRegConfigListAddLanguage
RtlpMuiRegConfigMatchesInstalled
RtlpMuiRegCreateKernelRegistryInfo
RtlpMuiRegCreateLanguageConfigList
RtlpMuiRegCreateRegistryInfo
RtlpMuiRegCreateStringPool
RtlpMuiRegFreeRegistryInfo
RtlpMuiRegGetInstalledLangInfoIndex
RtlpMuiRegGetInstalledLanguageIndex
RtlpMuiRegGetInstalledLanguageIndexByLangId
RtlpMuiRegGetInstalledLanguageIndexByName
RtlpMuiRegGetLangInfoIndex
RtlpMuiRegGetLanguageSpec
RtlpMuiRegGetOrAddLangInfo
RtlpMuiRegGetOrAddString
RtlpMuiRegGetOrAddStringToPool
RtlpMuiRegGrowLanguageConfigList
RtlpMuiRegGrowLanguages
RtlpMuiRegLangInfoMatchesSpec
RtlpMuiRegLoadLicInformation
RtlpMuiRegLoadRegistryInfo
RtlpMuiRegResizeStringPool
RtlpMuiRegValidateConfigNode
RtlpNameprepAsciiRealWorker
RtlpNameprepAsciiWorker
RtlpNewSecurityObject
RtlpNopProcessorCallback
RtlpNormalizeStringWorker
RtlpOpenBaseImageFileOptionsKey
RtlpOpenBaseImageFileOptionsKeyEx
RtlpOpenImageFileOptionsKeyEx
RtlpOpenThreadToken
RtlpOwnerAcesPresent
RtlpPopulateContext
RtlpPopulateLanguageConfigList
RtlpPopulateListIndex
RtlpProbeUserBufferSafe
RtlpProcessIFEOKeyFilter
RtlpQueryLowBoxId
RtlpQueryNlsSystemCodePages
RtlpQueryPackageIdentityAttributes
RtlpQueryRegistryDirect
RtlpQueryRegistryValues
RtlpQuerySecurityDescriptor
RtlpQueryTimeZoneInformationWorker
RtlpQueryTimeZoneKeyNameRoutine
RtlpReadExtendedContext
RtlpReadExtendedContextLayout
RtlpRecordBootStatusData
RtlpReleaseBootStatusLock
RtlpReleasePropStoreLockExclusive
RtlpReleasePropStoreLockShared
RtlpRemoveArchDisallowedXStateFeatures
RtlpRemoveInvertedFunctionTableEntry
RtlpRemoveUCRBlock
RtlpRevertFunctionPatchFromUndoEntry
RtlpRtlpCtSelfSubscribeCallback
RtlpRtlpCtWaitForWnfQuiescentWorker
RtlpRunOnceWaitForInit
RtlpSameFunction
RtlpSanitizeContextFlags
RtlpSearchFunctionTable
RtlpSearchPropertyEntry
RtlpSeedGlfsr
RtlpSetFunctionOverrideCapability
RtlpSetRvaListRvaStateBits
RtlpSetSecurityObject
RtlpSetTimeZoneInformationWorker
RtlpSetUserKernelFunctionOverrideCapability
RtlpSetupExtendedBlock
RtlpSizeHeapInternal
RtlpStackTraceDatabaseLogPrefix
RtlpStdExtendLowerWatermark
RtlpStdExtendUpperWatermark
RtlpStdGetRecordedStackTraceIndex
RtlpStdGetSpaceForTrace
RtlpStdLogCapturedStackTrace
RtlpSysVolCheckOwnerAndSecurity
RtlpSysVolCreateSecurityDescriptor
RtlpSysVolTakeOwnership
RtlpSystemBootStatusRequest
RtlpTargetCompare
RtlpTerminateCurrentProcess
RtlpTimeFieldsToTime
RtlpTimeFieldsToTimeNoLeapSeconds
RtlpTimeToTimeFields
RtlpTimeToTimeFieldsNoLeapSeconds
RtlpTraceDatabaseAcquireLock
RtlpTraceDatabaseAllocate
RtlpTraceDatabaseInternalAdd
RtlpTraceDatabaseInternalFind
RtlpTraceDatabaseReleaseLock
RtlpTreeDoubleRotateNodes
RtlpUnlockAtomTable
RtlpUnwindEpilogue
RtlpUnwindHandler
RtlpUnwindOpSlots
RtlpUnwindPrologue
RtlpUpcaseUnicodeStringPrivate
RtlpUpdateDynamicTimeZones
RtlpUpdateHeapRates
RtlpValidAccessFilterAce
RtlpValidAttribute
RtlpValidAttributeAce
RtlpValidCompoundAce
RtlpValidFilterAclSubjectContext
RtlpValidObjectAce
RtlpValidRelativeAttribute
RtlpValidTrustSubjectContext
RtlpValidateAsciiStd3AndLength
RtlpValidateContextFlags
RtlpValidateContextXStateDisabledFeatures
RtlpValidateKeyTrust
RtlpValidateSidBuffer
RtlpVerCompare
RtlpVerGetConditionMask
RtlpVirtualPopShadowStack
RtlpWalkFrameChain
RtlpWow64CreateUserStack
RtlpWow64CtxFromAmd64
RtlpWow64CtxToAmd64
RtlpWow64SanitizeContextFlags
RtlpWriteExtendedContext
RtlpxLookupFunctionTable
RtlpxVirtualUnwind
RtlxAnsiStringToUnicodeSize
RtlxOemStringToUnicodeSize
RtlxUnicodeStringToAnsiSize
RtlxUnicodeStringToOemSize
RunLengthEncode
SANITIZE_DRADDR
SANITIZE_EFLAGS
SANITIZE_VA
SLGetSubscriptionPfn
SLQueryLicenseValueInternal
SLSendPolicyChangeNotifications
SLUpdateLicenseDataInternal
SSHSupportAcquirePushLockExclusive
SSHSupportAllocateNonPaged
SSHSupportAllocatePaged
SSHSupportEtwEventEnabled
SSHSupportEtwRegister
SSHSupportEtwWrite
SSHSupportFree
SSHSupportInitializePushLock
SSHSupportIsPlatformAoAc
SSHSupportQueryInterruptTime
SSHSupportQueryIsLibraryEnabled
SSHSupportQuerySystemTime
SSHSupportRegisterPowerSettingCallback
SSHSupportReleasePushLockExclusive
SSHSupportUnregisterPowerSettingCallback
SUBTRACT_MAP_REGISTERS
SbpAddTransportToInstance
SbpStartLanman
SbpVmbusNotificationHandler
SbpWaitForVmbus
SdbCloseDatabaseRead
SdbFindFirstStringIndexedTag
SdbFindFirstTag
SdbFindNextStringIndexedTag
SdbFindNextTag
SdbFindParentTagFromAncestors
SdbGetBinaryTagData
SdbGetDatabaseEdition
SdbGetDatabaseID
SdbGetDatabaseMatch
SdbGetDatabaseMatchEx
SdbGetEntryFlags
SdbGetFirstChild
SdbGetIndex
SdbGetKShimTagRef
SdbGetMergeRedirectPath
SdbGetNextChild
SdbGetPathCustomSdb
SdbGetPathSystemSdb
SdbGetStringTagPtr
SdbGetTagDataSize
SdbGetTagFromTagID
SdbGuestHostArchsToRuntimePlatformFlag
SdbGuestTargetPlatformFlagsToRuntimePlatformFlags
SdbInitDatabaseInMemory
SdbMakeIndexKeyFromStringEx
SdbMergeIsEntryUpdated
SdbOpenDatabaseEx
SdbQueryDataEx
SdbQueryDataExTagID
SdbReadBinaryTag
SdbReadDWORDTag
SdbReadEntryInformation
SdbReadGUIDTag
SdbReadQWORDTag
SdbReadWORDTag
SdbReleaseDatabase
SdbResolveDatabaseEx
SdbTagIDToTagRef
SdbTagRefToTagID
SdbpBinarySearchFirst
SdbpBinarySearchUnique
SdbpCheckAllAttributes
SdbpCheckApplicationTypeAttributes
SdbpCheckAttribute
SdbpCheckBackupApplicationAttributes
SdbpCheckDll
SdbpCheckExe
SdbpCheckForMatch
SdbpCheckFromStringVersion
SdbpCheckFromVersion
SdbpCheckKObject
SdbpCheckMatchingDevice
SdbpCheckMatchingDir
SdbpCheckMatchingFiles
SdbpCheckMatchingRegistry
SdbpCheckMatchingRegistryEntry
SdbpCheckMatchingRegistryValue
SdbpCheckMatchingText
SdbpCheckMatchingTextEntry
SdbpCheckMatchingWildcardFiles
SdbpCheckMatchingWildcardRegistry
SdbpCheckMatchingWildcardRegistryEntry
SdbpCheckOSKind
SdbpCheckPackageAttributes
SdbpCheckRuntimePlatform
SdbpCheckRuntimePlatformImpl
SdbpCheckSdbCapability
SdbpCheckUptoStringVersion
SdbpCheckUptoVersion
SdbpCheckVersion
SdbpCleanupLocalDatabaseSupport
SdbpCleanupUserSDBCache
SdbpCloseLocalDatabaseEx
SdbpCreateSearchDBContext
SdbpCreateSearchPathPartsFromPath
SdbpFindFirstIndexedWildCardTag
SdbpFindFirstNamedTagHelper
SdbpFindFirstTagWithoutIndex
SdbpFindFirstWildcardTagWithoutIndex
SdbpFindLocalDatabaseByPDB
SdbpFindMatcher
SdbpFindMatchingName
SdbpFindNextIndexedWildCardTag
SdbpFindNextNamedTagHelper
SdbpFindNextTagWithoutIndex
SdbpFindNextWildcardTagWithoutIndex
SdbpFreeAppAttributes
SdbpGetCustomSdbFileName
SdbpGetDeviceDWORD
SdbpGetExeEntryFlags
SdbpGetFileTimestamp
SdbpGetFirstIndexedRecord
SdbpGetIndex
SdbpGetManifestedMergeStubAlloc
SdbpGetMappedStringFromTable
SdbpGetMappedTagData
SdbpGetMatchingTextAttributes
SdbpGetMergeRedirectPathInternal
SdbpGetMergeSdbsDisabled
SdbpGetNextIndexedRecord
SdbpGetNextTagId
SdbpGetPathAppPatch
SdbpGetPathAppPatchPreRS3
SdbpGetPathAppraiser
SdbpGetPathCustomSdb
SdbpGetPathCustomSdbPreRS3
SdbpGetPathMergeSource
SdbpGetPathSystem
SdbpGetProcessHistory
SdbpGetProcessHostGuestArchitectures
SdbpGetRegistryMatchingAttributes
SdbpGetStringTableItemFromStringRef
SdbpGetSystemSdbFilePath
SdbpGetTagHeadSize
SdbpInitializeMatchers
SdbpInitializeSearchDBContext
SdbpIsEntryIdAvailableInOtherDb
SdbpIsSdbCapabilityPresent
SdbpKeyToAnsiString
SdbpMatchAcpi
SdbpMatchBios
SdbpMatchCpu
SdbpMatchDeviceDWORD
SdbpMatchDeviceString
SdbpMatchList
SdbpMatchOem
SdbpMatchOne
SdbpMatchOsVersion
SdbpMergeAreTagValuesEqual
SdbpOpenCompressedDatabase
SdbpOpenDatabaseInMemory
SdbpOpenLocalDatabaseEx
SdbpQueryAppCompatFlagsByExeID
SdbpReadMappedData
SdbpReadStringRef
SdbpReadTagData
SdbpReleaseSearchDBContext
SdbpRemoveSDBLookupEntry
SdbpResolveMatchingFile
SdbpSafeAllocAndConcatW
SdbpSearchDB
SdbpValidateAndApplyCompatFlags
SdbpValidateRootTagSizes
SddlAddAccessFilterAce
SddlAddMandatoryAce
SddlAddProcessTrustLabelAce
SddlAddScopedPolicyIDAce
SddlBaseInitialize
SddlFilterSacl
SddlpAlloc
SddlpFree
SddlpFreeUuidString
SddlpReAlloc
SddlpUuidFromString
SddlpUuidToString
SeAccessCheck
SeAccessCheckByType
SeAccessCheckEx
SeAccessCheckFromState
SeAccessCheckFromStateEx
SeAccessCheckWithHint
SeAdjustAccessStateForAccessConstraints
SeAdjustAccessStateForTrustLabel
SeAdjustObjectSecurity
SeAdtRegistryValueChangedAuditAlarm
SeAppendPrivileges
SeAssignPrimaryToken
SeAssignSecurity
SeAssignSecurityEx
SeAssignSecurityEx2
SeAssignWorldSecurityDescriptor
SeAuditBootConfiguration
SeAuditFipsCryptoSelftests
SeAuditHandleCreation
SeAuditHandleDuplication
SeAuditHardLinkCreation
SeAuditHardLinkCreationWithTransaction
SeAuditHeaderRequired
SeAuditPlugAndPlay
SeAuditProcessCreation
SeAuditProcessExit
SeAuditSystemTimeChange
SeAuditTransactionStateChange
SeAuditingAnyFileEventsWithContext
SeAuditingAnyFileEventsWithContextEx
SeAuditingFileEvents
SeAuditingFileEventsWithContext
SeAuditingFileEventsWithContextEx
SeAuditingFileOrGlobalEvents
SeAuditingHardLinkEvents
SeAuditingHardLinkEventsWithContext
SeAuditingWithTokenForSubcategory
SeCaptureAcl
SeCaptureAtomTableCallout
SeCaptureLuidAndAttributesArray
SeCaptureObjectAttributeSecurityDescriptorPresent
SeCaptureObjectTypeList
SeCaptureSecurityDescriptor
SeCaptureSecurityQos
SeCaptureSid
SeCaptureSidAndAttributesArray
SeCaptureSubjectContext
SeCaptureSubjectContextEx
SeCaptureUnicodeStringStructures
SeCheckAuditPrivilege
SeCheckForCriticalAceRemoval
SeCheckPrivilegedObject
SeClearLearningModeObjectInformation
SeCloseObjectAuditAlarm
SeCloseObjectAuditAlarmForNonObObject
SeCodeIntegrityGetBuildExpiryTime
SeCodeIntegrityInitializePolicy
SeCodeIntegrityQueryInformation
SeCodeIntegrityQueryPolicyInformation
SeCodeIntegritySetInformationProcess
SeCompareSigningLevels
SeCompareTokens
SeComputeAutoInheritByObjectType
SeComputeAutoInheritByObjectTypeEx
SeComputeCreatorDeniedRights
SeConvertSecurityDescriptorToStringSecurityDescriptor
SeConvertSidToStringSid
SeConvertStringSecurityDescriptorToSecurityDescriptor
SeConvertStringSidToSid
SeCopyClientToken
SeCreateAccessState
SeCreateAccessStateEx
SeCreateAccessStateFromSubjectContext
SeCreateAndRegisterAccessCheckDebugContext
SeCreateClientSecurity
SeCreateClientSecurityEx
SeCreateClientSecurityFromSubjectContext
SeCreateClientSecurityFromSubjectContextEx
SeDeassignPrimaryToken
SeDeassignSecurity
SeDefaultObjectMethod
SeDeleteAccessState
SeDeleteClientSecurity
SeDeleteObjectAuditAlarm
SeDeleteObjectAuditAlarmWithTransaction
SeDuplicateTokenAndAddOriginClaim
SeEtwEnableCallback
SeEtwWriteKMCveEvent
SeExamineGlobalSacl
SeExamineSacl
SeExchangePrimaryToken
SeFastTraverseCheck
SeFilterToken
SeFreeCapturedObjectTypeList
SeFreePrivileges
SeGetCachedSigningLevel
SeGetImageRequiredSigningLevel
SeGetLinkedToken
SeGetLogonSessionToken
SeGetTokenControlInformation
SeGetTokenDeviceMap
SeGetTrustLabelAce
SeImpersonateClient
SeImpersonateClientEx
SeInitServerSilo
SeInitSystem
SeIsAppContainerOrIdentifyLevelContext
SeIsParentOfChildAppContainer
SeIsPermissiveLearningModeEnabled
SeIsSystemContext
SeIsTokenAssignableToProcess
SeLocateProcessImageName
SeLockSubjectContext
SeLogAccessFailure
SeMakeAnonymousLogonToken
SeMakeAnonymousLogonTokenNoEveryone
SeMakeSystemToken
SeMarkLogonSessionForTerminationNotification
SeMarkLogonSessionForTerminationNotificationEx
SeMaximumAuditMask
SeMaximumAuditMaskFromGlobalSacl
SeMinTcbLowering
SeObjectCreateSaclAccessBits
SeOpenObjectAuditAlarm
SeOpenObjectAuditAlarmForNonObObject
SeOpenObjectAuditAlarmWithTransaction
SeOpenObjectForDeleteAuditAlarm
SeOpenObjectForDeleteAuditAlarmWithTransaction
SeOperationAuditAlarm
SePrivilegeCheck
SePrivilegeObjectAuditAlarm
SePrivilegePolicyCheck
SePrivilegedServiceAuditAlarm
SeQueryAuthenticationIdToken
SeQueryHSTIResults
SeQueryInformationToken
SeQueryMandatoryLabel
SeQueryMandatoryPolicyToken
SeQuerySecureBootPlatformManifest
SeQuerySecureBootPolicyValue
SeQuerySecurityAccessMask
SeQuerySecurityAttributesToken
SeQuerySecurityAttributesTokenAccessInformation
SeQuerySecurityDescriptorInfo
SeQueryServerSiloToken
SeQuerySessionIdToken
SeQuerySessionIdTokenEx
SeQuerySigningPolicy
SeQuerySigningPolicyWorker
SeQueryTokenIntegrity
SeQueryTokenTrustLink
SeQueryTokenTrustSid
SeQueryTrustedPlatformModuleInformation
SeQueryUserSidToken
SeRegisterElamCertResources
SeRegisterImageVerificationCallback
SeRegisterLogonSessionTerminatedRoutine
SeRegisterLogonSessionTerminatedRoutineEx
SeReleaseAcl
SeReleaseImageValidationContext
SeReleaseLuidAndAttributesArray
SeReleaseSecurityDescriptor
SeReleaseSid
SeReleaseSidAndAttributesArray
SeReleaseSubjectContext
SeReleaseUnicodeStringStructures
SeReportSecurityEvent
SeReportSecurityEventWithSubCategory
SeRmInitPhase1
SeRmReferenceFindCapName
SeSecureBootQueryInformation
SeSecureBootRegisterPolicy
SeSecurityAttributePresent
SeSecurityDescriptorChangedAuditAlarm
SeSecurityModelQueryInformation
SeSetAccessStateGenericMapping
SeSetAuditParameter
SeSetImageBaseAddress
SeSetLearningModeObjectInformation
SeSetMandatoryPolicyToken
SeSetPrivateNameSpaceToken
SeSetSecurityAccessMask
SeSetSecurityAttributesToken
SeSetSecurityAttributesTokenEx
SeSetSecurityDescriptorInfo
SeSetSecurityDescriptorInfoEx
SeSetSessionIdToken
SeSetSessionIdTokenWithLinked
SeSetTokenTrustLink
SeSetVirtualizationToken
SeShouldCheckForAccessRightsFromParent
SeShutdownServerSilo
SeSinglePrivilegeCheck
SeSinglePrivilegeCheckEx
SeSrpAccessCheck
SeSubProcessToken
SeTokenCanImpersonate
SeTokenDefaultDaclChangedAuditAlarm
SeTokenFromAccessInformation
SeTokenGetNoChildProcessRestricted
SeTokenGetRedirectionTrustPolicy
SeTokenImpersonationLevel
SeTokenIsAdmin
SeTokenIsElevated
SeTokenIsNoChildProcessRestrictionEnforced
SeTokenIsRestricted
SeTokenIsWriteRestricted
SeTokenSetNoChildProcessRestricted
SeTokenSetRedirectionTrustPolicy
SeTokenType
SeUnRegisterAndFreeAccessCheckDebugContext
SeUnlockSubjectContext
SeUnregisterImageVerificationCallback
SeUnregisterLogonSessionTerminatedRoutine
SeUnregisterLogonSessionTerminatedRoutineEx
SeValidSecurityDescriptor
SeValidateFileAsImageType
SeValidateImageData
SeValidateImageHeader
SeValidateSecurityQos
SecureDump_ConvertBinaryToHexString
SecureDump_ConvertParsedRSAPubKeyToBCryptPubKey
SecureDump_ConvertToRsaBlob
SecureDump_EncryptSymmetricKeyWithPublicKey
SecureDump_Encrypt_DmpData
SecureDump_GetSecureDumpSettings
SecureDump_Get_SecureDumpHeader
SecureDump_Init
SecureDump_LoadCertAndProvisionKey
SecureDump_LogErrorEvent
SecureDump_PrepareForInit
SecureDump_ProvisionCrashDumpKey
SecureDump_ReInitialize
SecureDump_ReadRegistry
SecureDump_SymmetricEncryptionSetup
SecureDump_ValidateAmeCertChain
SendCaptureStateNotificationsWorker
SepAccessCheck
SepAccessCheckAndAuditAlarm
SepAccessCheckEx
SepAcquireOrderedReadLocks
SepAddLuidToIndexEntry
SepAddTokenLogonSession
SepAddTokenOriginClaim
SepAdjustAccessStateForConstraints
SepAdjustGroups
SepAdjustPrivileges
SepAdtAuditObjectAccessWithContext
SepAdtAuditPrivilegeUseWithContext
SepAdtAuditThisEventByCategoryWithContext
SepAdtAuditThisEventWithContext
SepAdtAuditablePrivilege
SepAdtCheckPrivilegeForSensitivity
SepAdtClassifyObjectIntoSubCategory
SepAdtCloseObjectAuditAlarm
SepAdtCopyToLsaSharedMemory
SepAdtDeleteObjectAuditAlarm
SepAdtDetermineInsertQueue
SepAdtGenerateDiscardAudit
SepAdtIncorporatePerUserPolicy
SepAdtInitLsaDeadEventForNonPagedList
SepAdtInitializeAuditingOptions
SepAdtInitializeBounds
SepAdtInitializeCrashOnFail
SepAdtInitializePrivilegeAuditing
SepAdtLogAuditFailureEvent
SepAdtLogAuditRecord
SepAdtMarshallAuditRecord
SepAdtObjectReferenceAuditAlarm
SepAdtOpenEtwReadyEvent
SepAdtOpenObjectAuditAlarm
SepAdtOpenObjectForDeleteAuditAlarm
SepAdtOpenRegAndSetupNotification
SepAdtPrivilegeObjectAuditAlarm
SepAdtPrivilegedServiceAuditAlarm
SepAdtRegNotificationCallback
SepAdtSecurityDescriptorChangedAuditAlarm
SepAdtStagingEvent
SepAdtTokenRightAdjusted
SepAllocateAndInitializeCachedHandleEntry
SepAppendAceToTokenDefaultDacl
SepAppendAceToTokenObjectAcl
SepAppendDefaultDacl
SepAppendPrimaryGroup
SepAssemblePrivileges
SepAuditAssignPrimaryToken
SepAuditFailed
SepAuditFailedRaisedIrql
SepAuditTypeList
SepAuditingEnabledForSubcategory
SepAuditingForSubCategory
SepBlockAccessForLogonSession
SepBuildCapPolicyTable
SepBuildCapeSecurityDescriptor
SepBuildDefaultCap
SepBuildDefaultCape
SepCanTokenMatchAllPackageSid
SepCapabilitiesHasAppSiloBaseSID
SepCaptureAuditPolicy
SepCaptureFqbnArray
SepCaptureHandles
SepCaptureInt64Array
SepCaptureOctetStringArray
SepCaptureTokenSecurityAttributesAndOperationsInformation
SepCaptureTokenSecurityAttributesInformation
SepCaptureTokenSecurityOperations
SepCaptureUnicodeStringArray
SepCheckAcl
SepCheckAndCopySelfRelativeSD
SepCheckAndSetAuditModeForProcess
SepCheckCapabilities
SepCheckCreateLowBox
SepCleanupLUIDDeviceMapDirectory
SepCleanupMarkedForDeletionEntries
SepCloseCachedTokenHandles
SepCommonAccessCheckEx
SepCompareClaimAttributes
SepCompareSidAndAttributeArrays
SepCompareSidValuesBlocks
SepComputeCachedHandlesEntrySignature
SepComputeSidSignature
SepConcatenatePrivileges
SepConstrainByConstraintMask
SepConstrainByMandatory
SepConvertToOwnTokenClaims
SepConvertTokenPrivileges
SepConvertTokenPrivilegesToLuidAndAttributes
SepCopyAnonymousTokenAndSetSilo
SepCopyClientTokenAndSetSilo
SepCopyObjectTypeList
SepCopyTokenAccessInformation
SepCopyTokenIntegrity
SepCopyTokenLoggingInformation
SepCreateAccessStateFromSubjectContext
SepCreateClaimAttributes
SepCreateClientSecurityEx
SepCreateImpersonationTokenDacl
SepCreateLogonSessionTrack
SepCreateSidValuesBlock
SepCreateToken
SepCreateTokenEx
SepDeReferenceLogonSession
SepDeReferenceLogonSessionDirect
SepDeReferenceSharedSidEntries
SepDeleteAccessState
SepDeleteCachedHandlesTable
SepDeleteClaimAttributes
SepDeleteLogonSessionClaims
SepDeleteLogonSessionSidValues
SepDeleteLogonSessionTrack
SepDeleteSessionLowboxEntries
SepDeleteTokenUserAndGroups
SepDeleteUnreferencedLogonSessionsInSilo
SepDereferenceCachedHandlesEntry
SepDereferenceCachedHandlesEntryInternal
SepDereferenceLowBoxNumberEntry
SepDereferenceLuidToIndexEntry
SepDereferenceSidValuesBlock
SepDesktopAppModifyTokenBreakaway
SepDesktopAppxSubProcessToken
SepDuplicateClaimAttributes
SepDuplicateLogonSessionReference
SepDuplicateSid
SepDuplicateToken
SepDuplicateTokenClaims
SepDuplicateTokenUserAndGroups
SepEqualAsciiWideStringCaseInSensitive
SepExamineGlobalSaclEx
SepExamineSaclEx
SepExpandDynamic
SepExpandSingletonArrays
SepFilterCheck
SepFilterPrivilegeAudits
SepFilterToDiscretionary
SepFilterToken
SepFinalizeTokenAcls
SepFindMatchingCachedHandlesEntry
SepFindMatchingLowBoxNumberEntries
SepFindMatchingLowBoxNumberEntry
SepFindMatchingLuidEntry
SepFindSharedSidEntry
SepFlattenAcl
SepFreeCapturedTokenSecurityAttributesInformation
SepFreeDefaultDacl
SepFreePrimaryGroup
SepFreeResourceInfo
SepFreeTokenCapabilities
SepGetAnonymousToken
SepGetCachedHandlesEntry
SepGetCurrentLogLevel
SepGetLearningModeObjectInformation
SepGetLogonSessionAccountInfo
SepGetLowBoxNumberEntry
SepGetProcUniqueLuidAndIndexFromAttributeInfo
SepGetProcUniqueLuidAndIndexFromTokenEx
SepGetScopedPolicySid
SepGetSidValuesDump
SepGetSingletonEntryFromIndexNumber
SepGetStackTraceHash
SepGetSystemSigningLevel
SepGetTokenAccessInformationBufferSize
SepGetTokenElevation
SepGetTokenElevationType
SepGetTokenSessionMapEntry
SepIdAssignableAsGroup
SepIdAssignableAsOwner
SepImageVerificationCallbackPreProcess
SepImageVerificationCallbackWorker
SepInformFileSystemsOfDeletedLogon
SepInformLsaOfDeletedLogon
SepInitProcessAuditSd
SepInitSingletonEntry
SepInitSystemDacls
SepInitializationPhase0
SepInitializationPhase1
SepInitializeAuthorizationCallbacks
SepInitializeCodeIntegrity
SepInitializeDebugOptions
SepInitializeLowBoxNumberTable
SepInitializeSharedSidMap
SepInitializeSingletonAttributesStructures
SepInitializeWorkList
SepInsertOrReferenceSharedSidEntries
SepInternalFillNoAttribs
SepInternalQuerySecurityAttributesTokenEx
SepInternalSetSecurityAttributesToken
SepIsAclEqual
SepIsAppSiloCapability
SepIsCapabilitySid
SepIsChildTokenByPointer
SepIsDeviceOwnerProtectionDowngradeAllowed
SepIsImageInMinTcbList
SepIsLockedDown
SepIsMinTCB
SepIsNgenImage
SepIsPackageSid
SepIsParentOfChildAppContainer
SepIsRemovableStorageDevice
SepIsSandboxedToken
SepIsSiblingTokenByPointer
SepIsSidEqual
SepIsValidProcUniqueLuid
SepLengthSidAndAttributesArray
SepLinkLogonSessions
SepLoadNgenLocations
SepLocateTokenIntegrity
SepLocateTokenTrustLevel
SepLogLpacAccessFailure
SepLogTokenSidManagement
SepLogUnmatchedSessionFlagImpersonationAttempt
SepLpacCausedAccessFailure
SepMakeLogonSessionsSiblings
SepMakeTokenEffectiveOnly
SepMandatoryIntegrityCheck
SepMandatorySubProcessToken
SepMandatoryToDiscretionary
SepMatchCapability
SepMatchPackage
SepMaximumAccessCheck
SepMaximumAccessCheckEx
SepMergeObjectTypeListAccesses
SepModifyTokenPolicyCounter
SepNewTokenAsRestrictedAsProcessToken
SepNormalAccessCheck
SepNormalAccessCheckEx
SepNotifyFileSystems
SepOneWayLinkLogonSessions
SepParseElamCertResources
SepPotentialGlobalTableAttribute
SepPrivilegeCheck
SepProbeAndCaptureString_U
SepQueryNameString
SepQueryTypeString
SepQueueWorkItem
SepReadAndInsertCaps
SepReadAndPopulateCapes
SepReadSingleCap
SepReconcileTrustSidWithProcessProtection
SepReferenceCachedTokenHandles
SepReferenceLogonSession
SepReferenceLogonSessionSilo
SepReferenceLuidToIndexEntry
SepReferenceTokenByHandle
SepRegOpenKey
SepRegQueryDwordValue
SepRegQueryValue
SepReleaseAuditPolicy
SepReleaseOrderedReadLocks
SepReleaseTokenSecurityAttributesAndOperationsInformation
SepReleaseUnicodeStringArray
SepRemoveAceFromTokenDefaultDacl
SepRemoveDisabledGroupsAndPrivileges
SepRemoveTokenLogonSession
SepRmAcquireGlobalSaclReadLock
SepRmAddLogonSessionInfoWrkr
SepRmCallLsa
SepRmCapPoolExpand
SepRmCapUpdateWrkr
SepRmCleanupRmLsaState
SepRmCommandServerThread
SepRmCreateLogonSessionWrkr
SepRmDbInitialization
SepRmDeleteLogonSessionWrkr
SepRmDereferenceCapTable
SepRmDestroyCapTable
SepRmDispatchDataToLsa
SepRmFetchGlobalSacl
SepRmGlobalSaclFind
SepRmGlobalSaclSetWrkr
SepRmInteractiveLogoffLogonSessionCompletedWrkr
SepRmInteractiveLogoffLogonSessionWrkr
SepRmLsaConnectRequest
SepRmMakeLogonSessionsSiblingsWrkr
SepRmProcessCreationCommandLineAuditSettingsWrkr
SepRmReferenceCapTable
SepRmReferenceFindCap
SepRmSetAuditEventWrkr
SepRmSetSharedUserSessionWrkr
SepRmValidateProcUniqueLuidWrkr
SepRmVerifyLsaProtectionLevel
SepSDContainsAttributeACE
SepScheduleImageVerificationCallbacks
SepSecureBootCheckForUpdates
SepSecureBootCorrectBcd
SepSecureBootFindMatchingRegistryRule
SepSecureBootHasPermission
SepSecureBootSetRegistryKey
SepSecureBootUpdateBcdDataForRule
SepSecureBootValidateBcdDataAgainstBcdRule
SepSecurityDescriptorStrictLength
SepSetAuditInfoForObjectType
SepSetProcessTrustLabelAceForToken
SepSetProcessUniqueAttribute
SepSetRuntimeUpdatableSigningLevel
SepSetServerSiloToken
SepSetSingletonEntry
SepSetSystemPaths
SepSetTokenAllApplicationPackagesPolicy
SepSetTokenBnoIsolation
SepSetTokenCachedHandles
SepSetTokenCapabilities
SepSetTokenClaims
SepSetTokenLowboxNumber
SepSetTokenPackage
SepSetTokenSessionById
SepSetTokenTrust
SepSetTokenUserAndGroups
SepSetTrustLevelForProcessToken
SepShouldSetDelinkFlags
SepSidFromProcessProtection
SepSidInSidAndAttributes
SepSidInToken
SepSidInTokenSidHash
SepSinglePrivilegeCheck
SepStopReferencingLogonSession
SepTokenDeleteMethod
SepTokenFromAccessInformation
SepTokenInitialization
SepTokenIsOwner
SepTokenPrivilegeCount
SepTrustLevelCheck
SepTrustToDiscretionary
SepUpdateLogonSessionTrack
SepUpdateSiloInClientSecurity
SepValidOwnerSubjectContext
SepValidateAndCopyGlobalEntry
SepValidateReferencedCachedHandles
SepVariableInitialization
SepVerifyDesktopAppPolicyOverrideCaller
SepVerifyDesktopAppxImage
SepVerifyDesktopAppxPackageName
SepZwLockRegistryKey
SessionIsInteractive
SetFailureLocation
SetVacb
SiBootEntryGetNtFilePath
SiDisambiguateSystemDevice
SiFindSystemPartition
SiGetBiosSystemDisk
SiGetBiosSystemPartition
SiGetBootDeviceName
SiGetBootDeviceNameFromRegistry
SiGetDeviceNumberInformation
SiGetDiskPartitionInformation
SiGetDriveLayoutInformation
SiGetEfiBootEntryById
SiGetEfiSystemDevice
SiGetEspFromFirmware
SiGetFirmwareSystemPartition
SiGetFirmwareType
SiGetRegistryValue
SiGetSystemDeviceName
SiGetSystemDisk
SiGetSystemPartition
SiIsValidDiskDevice
SiIsValidWindowsBootEntry
SiIsWinPEBoot
SiIsWinPeHardDiskZeroUfdBoot
SiIssueSynchronousIoctl
SiOpenArcNameObject
SiOpenDevice
SiOpenRegistryKey
SiQueryProperty
SiQuerySystemInformationString
SiTranslateSymbolicLink
SiValidateSystemPartition
SimplifyFilter
SkIsSecureKernel
SleepstudyHelperBlockerActiveDereference
SleepstudyHelperBlockerActiveReference
SleepstudyHelperBuildBlocker
SleepstudyHelperCreateBlockerData
SleepstudyHelperCreateBlockerFromComponent
SleepstudyHelperCreateBlockerFromDevice
SleepstudyHelperCreateBlockerFromGuid
SleepstudyHelperCreateLibrary
SleepstudyHelperCreateLibraryEx
SleepstudyHelperDestroyBlocker
SleepstudyHelperDestroyBlockerBuilder
SleepstudyHelperDestroyBlockerData
SleepstudyHelperDestroyLibrary
SleepstudyHelperGetBlockerGuid
SleepstudyHelperQueryBlockerStatistics
SleepstudyHelperSetBlockerFriendlyName
SleepstudyHelperSetBlockerParentHandle
SleepstudyHelperSetBlockerVerboseDescription
SleepstudyHelperSetBlockerVisible
SleepstudyHelper_AcquireComponentLock
SleepstudyHelper_ComponentActive
SleepstudyHelper_ComponentActiveLocked
SleepstudyHelper_ComponentInactive
SleepstudyHelper_GenerateGuid
SleepstudyHelper_GetPdoFriendlyName
SleepstudyHelper_Initialize
SleepstudyHelper_RegisterComponentEx
SleepstudyHelper_RegisterPdoWithParentGuid
SleepstudyHelper_RegisterPdoWithParentHandle
SleepstudyHelper_RegisterPdoWithParentPdo
SleepstudyHelper_ReleaseComponentLock
SleepstudyHelper_ResetComponentsStartTime
SleepstudyHelper_Uninitialize
SleepstudyHelper_UnregisterComponent
SmAcquireReleaseCharges
SmAcquireReleaseResAvailForRead
SmAllocEx
SmArrayGrow
SmBinaryArrayGrow
SmCalcIoWorkItemSize
SmCompressionProcessHoldsPartitionReference
SmCrEncCleanup
SmCrEncInitialize
SmCrEncStart
SmCrGenRandom
SmCreateEvent
SmCreatePartition
SmDecompressBuffer
SmDeletePartition
SmEtwEnableCallback
SmEtwEnabled
SmEtwLogRegionOp
SmEtwLogStoreCorruption
SmEtwLogStoreOp
SmEvictComplete
SmFpAllocate
SmFpCleanup
SmFpFree
SmFpInitialize
SmFpPreAllocate
SmFree
SmGetIdealProcessorFromNumaNode
SmGetRegistrationInfo
SmGetStoreOwnerProcessId
SmHpBufferAlloc
SmHpBufferCleanup
SmHpBufferUpdateFullness
SmHpChunkAlloc
SmHpChunkFree
SmHpChunkHeapCleanup
SmHpChunkHeapInitialize
SmHpChunkHeapProtect
SmHpChunkUnprotect
SmHpUnprotectListNeighbors
SmHwAcceleratorCleanup
SmHwAcceleratorCreate
SmHwAcceleratorIssueRequest
SmHwAcceleratorMgrAccelCallback
SmHwAcceleratorMgrAcquireAccelerators
SmHwAcceleratorMgrCreatePartitionAccelerators
SmHwAcceleratorMgrHotRemoveAccelerator
SmHwAcceleratorMgrInitialize
SmHwAcceleratorMgrPartitionRegister
SmHwAcceleratorMgrPartitionUnregister
SmHwAcceleratorMgrReleaseAccelerators
SmHwAcceleratorParitionCtxCreate
SmHwAcceleratorPartitionCtxCleanup
SmHwAcceleratorPartitionMgrCleanup
SmHwAcceleratorPartitionMgrFreeDescriptor
SmHwAcceleratorPartitionMgrGetDescriptor
SmHwAcceleratorPartitionMgrInitialize
SmHwAcceleratorPartitionMgrInsertAccelerator
SmHwAcceleratorPartitionMgrStart
SmHwAcceleratorPartitionMgrWakeDescriptorWaiters
SmHwAcceleratorWaitForRequest
SmHwInitializeAccelDescriptor
SmInitSystem
SmIoRequestComplete
SmIssueIo
SmKmAllocateMdlForLock
SmKmCleanup
SmKmEtwAppendObjectName
SmKmEtwAppendProductName
SmKmEtwLogStoreChange
SmKmEtwLogStoreStats
SmKmFileInfoCleanup
SmKmFileInfoDuplicate
SmKmFileInfoGetPath
SmKmFileInfoInit
SmKmFreeMdlForLock
SmKmGenericCompletion
SmKmInitialize
SmKmIsVolumeIoPossible
SmKmIssueVolumeIo
SmKmKeyGenGenerate
SmKmKeyGenKeyDelete
SmKmKeyGenKeyFind
SmKmKeyGenLoadKey
SmKmKeyGenNewKey
SmKmKeyGenStart
SmKmRegParamsLoad
SmKmSendDeviceControl
SmKmSendUsageNotification
SmKmSqmAddToStream
SmKmStoreAdd
SmKmStoreCreatePrepare
SmKmStoreDelete
SmKmStoreDeleteWhenEmpty
SmKmStoreDeleteWhenEmptyWorker
SmKmStoreDereference
SmKmStoreFileCreate
SmKmStoreFileCreateForIoType
SmKmStoreFileDelete
SmKmStoreFileGetExtents
SmKmStoreFileMakeSecurityDescriptor
SmKmStoreFileOpenVolume
SmKmStoreFileWriteHeader
SmKmStoreGet
SmKmStoreHelperCheckWaitCommand
SmKmStoreHelperCleanup
SmKmStoreHelperCommandCleanup
SmKmStoreHelperCommandProcess
SmKmStoreHelperInitialize
SmKmStoreHelperSendCommand
SmKmStoreHelperStart
SmKmStoreHelperWaitForCommand
SmKmStoreHelperWorker
SmKmStoreRefFromStoreIndex
SmKmStoreReference
SmKmStoreReferenceEx
SmKmStoreTerminateWorker
SmKmUnlockMdl
SmKmVirtualLockContextIncreaseWsMin
SmKmVirtualLockCtxInitialize
SmKmVirtualLockCtxLockMemory
SmKmVirtualLockCtxMemoryUnlocked
SmKmVolumeQueryUniqueId
SmLogConsumedPoison
SmMapPage
SmPageRead
SmPageWrite
SmPartitionCleanup
SmPartitionInitialize
SmPartitionJobPaired
SmPrepareForFatalHeapCorruption
SmProcessCompressionAcceleratorRequest
SmProcessCompressionInfoRequest
SmProcessCompressionReadStatsRequest
SmProcessConfigRequest
SmProcessCreateNotification
SmProcessCreateRequest
SmProcessDeleteNotification
SmProcessDeleteRequest
SmProcessListRequest
SmProcessListRequestExtended
SmProcessProcessStoreInfoRequest
SmProcessQueryStoreStats
SmProcessRegistrationRequest
SmProcessResizeRequest
SmProcessStatsRequest
SmProcessStoreMemoryPriorityRequest
SmProcessSystemStoreTrimRequest
SmQueryRegistry
SmQueryStoreCommitUsage
SmQueryStoreInformation
SmQuerySystemInformation
SmQueueExWorkItem
SmRecordDecompressionFailureDumpPayload
SmRegistrationCtxStart
SmSanitizeString
SmSetStoreInformation
SmStoreCompletePendingCompress
SmStoreCompletePendingDecompress
SmStoreCompressBuffer
SmStoreCompressionStart
SmStoreCompressionStop
SmStoreCopyHashCompressedBuffer
SmStoreCreate
SmStoreDecompressBuffer
SmStoreDelete
SmStoreExistsForProcess
SmStoreGetId
SmStoreHashCompressedData
SmStorePhysicalRequestIssue
SmStoreResize
SmSwapStore
SmTerminateStoreProcess
SmUniqueIdParseProductName
SmWaitForSyncIo
SmWorkItemQueue
SmWorkQueueGetDepth
SmcCacheAdd
SmcCacheCleanup
SmcCacheCreatePrepare
SmcCacheDelete
SmcCacheDereference
SmcCacheManagerInitialize
SmcCacheManagerStart
SmcCacheReference
SmcCacheRemove
SmcCacheStart
SmcGetCacheStats
SmcProcessCreateRequest
SmcProcessDeleteRequest
SmcProcessListRequest
SmcProcessResizeRequest
SmcProcessStatsRequest
SmcProcessStoreCreateRequest
SmcProcessStoreDeleteRequest
SmcStoreCreate
SmcStoreDelete
SmcStoreEntryFind
SmcStorePlacementGet
SmcStoreResize
SmcStoreSlotAbort
SmcStoreSlotCommit
SmcStoreSlotReserve
SmcVolumePnpNotification
SmpDirtyStoreCreate
SmpFlushStorePages
SmpFpReleaseResource
SmpFpWaitForResource
SmpGetProcessPartition
SmpKeyedStoreCreate
SmpKeyedStoreCtxCleanup
SmpKeyedStoreEntryGet
SmpKeyedStoreReference
SmpSystemStoreCreate
SmpUtilsGetControlDevice
SpRegOpenKey
SpRegOpenRedirectedKey
SpiInit
SpiMax311BufferRxData
SpiMax311GetByte
SpiMax311InitializePort
SpiMax311PutByte
SpiMax311RxReady
SpiMax311SetBaud
SpiMax311TxEmpty
SpiSend16
SshInitialize
SshNotifySystemSessionChange
SshSessionManagerFlushBuffers
SshSessionManagerTraceAcDcStateChange
SshSessionManagerTraceCsEnterReason
SshSessionManagerTraceCsExitReason
SshSessionManagerTraceDirtyTransition
SshSessionManagerTracePostSleepNotification
SshSessionManagerTracePreSleepNotification
SshSessionManagerTraceShutdownAction
SshSessionManagerTraceSystemStop
SshpAlpcCloseTraceSession
SshpAlpcInitialize
SshpAlpcMessageCallback
SshpAlpcOpenGracePeriodTimerCallback
SshpAlpcOpenGracePeriodWorker
SshpAlpcProcessAlpcMessage
SshpAlpcProcessMessage
SshpAlpcSendMessage
SshpBlockerActiveDereference
SshpBlockerActiveReferenceOperationCallback
SshpCacheDatabaseAllocate
SshpCacheDatabaseCompare
SshpCacheDatabaseFree
SshpCacheInitializeLibraryCache
SshpCacheLookupBlocker
SshpCacheRemoveBlocker
SshpCopyDataEntry
SshpDereferenceBlocker
SshpEtwEnableCallback
SshpFlushBlockerDataCache
SshpFreeBlockerEntry
SshpFreeDataEntry
SshpGenerateDeviceFriendlyName
SshpGenerateDeviceVerboseDescription
SshpIterateParentBlockers
SshpPowerSettingCallback
SshpPurgeBlockersWorker
SshpQueryAndResetBlockerAccounting
SshpQueryBlockerPendingDelete
SshpReferenceBlocker
SshpSessionManagerControlSessionCallback
SshpSessionManagerFlushControlEventBuffer
SshpSessionManagerFlushControlEventBufferWorker
SshpSessionManagerInitialize
SshpSessionManagerInterruptTimeToSystemTime
SshpSessionManagerNormalizeLogHeader
SshpSessionManagerOpenControlTrace
SshpSessionManagerSendControlEvent
SshpSessionManagerSendControlEventSlimEtl
SshpSessionManagerTraceSystemStart
SshpSessionManagerWriteBytes
SshpSetBlockerActive
SshpSetCollectionActive
SshpStopBlockerAccounting
SshpTracingRundownBlockerState
SshpTracingRundownCollectionState
SshpTracingWriteBlockerStateChange
SshpTracingWriteBlockerStateRundown
SshpTracingWriteCollectionStateChange
SshpUninitialize
SshpUnlinkBlockerFromLibrary
SshpWorkItemQueue
SshpWorkItemTryAllowNextWorker
SshpWriteBlocker
StEtaCheckForRefresh
StEtaCleanup
StEtaInitialize
StEtaIoComplete
StEtaIoStart
StEtaIoTimeout
StEtaStart
StEtaStartRefresh
StLcBucketsCopy
StLcInitialize
StRtlIoStorInfoSetNvCachePriority
StartFirstUserProcess
StringCbCopyNW
StringCbLengthW
StringCchPrintfExW
StringCchPrintfW
StringListContains
StringListElementSubstringMatch
StringToGuidNoBrackets
SubstringMatch
SwapContext
SwapSplayLinks
SymCryptCallbackAlloc
SymCryptCallbackFree
SymCryptCallbackRandom
SymCryptCpuFeaturesNeverPresent
SymCryptCpuFeaturesNeverPresentEnvWindowsKernelmodeWin8_1nLater
SymCryptCpuidExFunc
SymCryptCpuidExFuncEnvWindowsKernelmodeWin8_1nLater
SymCryptCrtGenerateForTwoCoprimes
SymCryptCrtGenerateInverses
SymCryptCrtSolve
SymCryptDetectCpuFeaturesByCpuid
SymCryptDigitsFromBits
SymCryptDivisorCreate
SymCryptDivisorFromModulus
SymCryptEcDhSecretAgreement
SymCryptEcDhSecretAgreementSelftest
SymCryptEcDsaSelftest
SymCryptEcDsaSignEx
SymCryptEcDsaSignVerifyTest
SymCryptEcDsaTruncateHash
SymCryptEcDsaVerify
SymCryptEckeyAllocate
SymCryptEckeyCreate
SymCryptEckeyFree
SymCryptEckeyPerformPublicKeyValidation
SymCryptEckeySetValue
SymCryptEckeySizeofPrivateKey
SymCryptEckeyWipe
SymCryptEcpointAdd
SymCryptEcpointAddDiffNonZero
SymCryptEcpointCopy
SymCryptEcpointCreate
SymCryptEcpointCreateEx
SymCryptEcpointDouble
SymCryptEcpointGenericSetRandom
SymCryptEcpointGetValue
SymCryptEcpointIsEqual
SymCryptEcpointIsZero
SymCryptEcpointMaskedCopy
SymCryptEcpointMultiScalarMul
SymCryptEcpointMultiScalarMulWnafWithInterleaving
SymCryptEcpointNegate
SymCryptEcpointOnCurve
SymCryptEcpointScalarMul
SymCryptEcpointScalarMulFixedWindow
SymCryptEcpointSetRandom
SymCryptEcpointSetValue
SymCryptEcpointSetZero
SymCryptEcpointTransform
SymCryptEcurveAllocate
SymCryptEcurveBitsizeofGroupOrder
SymCryptEcurveDigitsofFieldElement
SymCryptEcurveDigitsofScalarMultiplier
SymCryptEcurveFree
SymCryptEcurveIsSame
SymCryptEcurveSizeofFieldElement
SymCryptEcurveSizeofScalarMultiplier
SymCryptEqual
SymCryptFatal
SymCryptFatalEnvWindowsKernelmodeWin8_1nLater
SymCryptFatalIntercept
SymCryptFdef369MaskedCopyAsm
SymCryptFdef369ModAddGeneric
SymCryptFdef369ModInvMontgomery
SymCryptFdef369ModMulMontgomery
SymCryptFdef369ModPreGetMontgomery
SymCryptFdef369ModSetPostMontgomery
SymCryptFdef369ModSquareMontgomery
SymCryptFdef369ModSubGeneric
SymCryptFdef369ModulusInitMontgomery
SymCryptFdef369MontgomeryReduceAsm
SymCryptFdef369RawAddAsm
SymCryptFdef369RawMulAsm
SymCryptFdef369RawSubAsm
SymCryptFdefBitsizeOfUint32
SymCryptFdefClaimScratch
SymCryptFdefConditionalSwap
SymCryptFdefConditionalSwapC
SymCryptFdefDecideModulusType
SymCryptFdefDigitsFromBits
SymCryptFdefDivisorCreate
SymCryptFdefDivisorFromModulus
SymCryptFdefIntAddMixedSize
SymCryptFdefIntAddUint32
SymCryptFdefIntBitsizeOfObject
SymCryptFdefIntBitsizeOfValue
SymCryptFdefIntConditionalCopy
SymCryptFdefIntConditionalSwap
SymCryptFdefIntCopy
SymCryptFdefIntCopyMixedSize
SymCryptFdefIntCreate
SymCryptFdefIntDivMod
SymCryptFdefIntDivPow2
SymCryptFdefIntFromDivisor
SymCryptFdefIntFromModulus
SymCryptFdefIntGetBit
SymCryptFdefIntGetBits
SymCryptFdefIntGetValue
SymCryptFdefIntGetValueLsbits32
SymCryptFdefIntGetValueLsbits64
SymCryptFdefIntIsEqual
SymCryptFdefIntIsEqualUint32
SymCryptFdefIntIsLessThan
SymCryptFdefIntMaskedCopy
SymCryptFdefIntMulMixedSize
SymCryptFdefIntNeg
SymCryptFdefIntSetValue
SymCryptFdefIntSetValueUint32
SymCryptFdefIntSetValueUint64
SymCryptFdefIntShr1
SymCryptFdefIntSubMixedSize
SymCryptFdefIntSubSameSize
SymCryptFdefIntSubUint32
SymCryptFdefIntToDivisor
SymCryptFdefIntToModElement
SymCryptFdefIntToModulus
SymCryptFdefMaskedCopy
SymCryptFdefMaskedCopyAsm
SymCryptFdefModAddGeneric
SymCryptFdefModAddMulx256Asm
SymCryptFdefModAddMulx384Asm
SymCryptFdefModDivPow2
SymCryptFdefModDivSmallPow2
SymCryptFdefModDivSmallPow2Generic
SymCryptFdefModDivSmallPow2Mulx
SymCryptFdefModElementConditionalSwap
SymCryptFdefModElementCopy
SymCryptFdefModElementCreate
SymCryptFdefModElementGetValue
SymCryptFdefModElementIsEqual
SymCryptFdefModElementIsZero
SymCryptFdefModElementMaskedCopy
SymCryptFdefModElementSetValueGeneric
SymCryptFdefModElementSetValueNegUint32
SymCryptFdefModElementSetValueUint32Generic
SymCryptFdefModElementToIntGeneric
SymCryptFdefModInvGeneric
SymCryptFdefModInvMontgomery
SymCryptFdefModInvMontgomery256
SymCryptFdefModMulGeneric
SymCryptFdefModMulMontgomery
SymCryptFdefModMulMontgomery256Asm
SymCryptFdefModMulMontgomeryMulx
SymCryptFdefModMulMontgomeryMulx1024
SymCryptFdefModMulMontgomeryMulx256Asm
SymCryptFdefModMulMontgomeryMulxP384Asm
SymCryptFdefModNegGeneric
SymCryptFdefModPreGetGeneric
SymCryptFdefModPreGetMontgomery
SymCryptFdefModPreGetMontgomery256
SymCryptFdefModSetPostGeneric
SymCryptFdefModSetPostMontgomery
SymCryptFdefModSetPostMontgomeryMulx256
SymCryptFdefModSetPostMontgomeryMulxP384
SymCryptFdefModSetRandomGeneric
SymCryptFdefModSquareGeneric
SymCryptFdefModSquareMontgomery
SymCryptFdefModSquareMontgomeryMulx
SymCryptFdefModSquareMontgomeryMulx1024
SymCryptFdefModSquareMontgomeryMulx256Asm
SymCryptFdefModSquareMontgomeryMulxP384Asm
SymCryptFdefModSub256Asm
SymCryptFdefModSub384Asm
SymCryptFdefModSubGeneric
SymCryptFdefModulusCopyFixupGeneric
SymCryptFdefModulusCopyFixupMontgomery
SymCryptFdefModulusCreate
SymCryptFdefModulusInitGeneric
SymCryptFdefModulusInitMontgomery
SymCryptFdefModulusInitMontgomery256
SymCryptFdefModulusInitMontgomeryInternal
SymCryptFdefMontgomeryReduce
SymCryptFdefMontgomeryReduce256Asm
SymCryptFdefMontgomeryReduceAsm
SymCryptFdefMontgomeryReduceMulx
SymCryptFdefMontgomeryReduceMulx1024
SymCryptFdefRawAdd
SymCryptFdefRawAddAsm
SymCryptFdefRawAddUint32
SymCryptFdefRawDivMod
SymCryptFdefRawGetValue
SymCryptFdefRawIsEqualUint32
SymCryptFdefRawIsLessThan
SymCryptFdefRawIsLessThanC
SymCryptFdefRawMaskedAddSubdigit
SymCryptFdefRawMul
SymCryptFdefRawMulAsm
SymCryptFdefRawMulMulx
SymCryptFdefRawMulMulx1024
SymCryptFdefRawMultSubUint32
SymCryptFdefRawNeg
SymCryptFdefRawSetValue
SymCryptFdefRawSquare
SymCryptFdefRawSquareAsm
SymCryptFdefRawSquareMulx
SymCryptFdefRawSquareMulx1024
SymCryptFdefRawSub
SymCryptFdefRawSubAsm
SymCryptFdefRawSubUint32
SymCryptFdefSizeofDivisorFromDigits
SymCryptFdefSizeofIntFromDigits
SymCryptFdefSizeofModElementFromModulus
SymCryptFdefSizeofModulusFromDigits
SymCryptFixedWindowRecoding
SymCryptHashAppendInternal
SymCryptHashCommonPaddingMd4Style
SymCryptInit
SymCryptInitEnvCommon
SymCryptInitEnvWindowsKernelmodeWin8_1nLater
SymCryptInjectError
SymCryptIntAddMixedSize
SymCryptIntAddUint32
SymCryptIntBitsizeOfObject
SymCryptIntBitsizeOfValue
SymCryptIntConditionalCopy
SymCryptIntConditionalSwap
SymCryptIntCopy
SymCryptIntCopyMixedSize
SymCryptIntCreate
SymCryptIntDigitsizeOfObject
SymCryptIntDivMod
SymCryptIntDivPow2
SymCryptIntExtendedGcd
SymCryptIntFromDivisor
SymCryptIntFromModulus
SymCryptIntGetBit
SymCryptIntGetBits
SymCryptIntGetValue
SymCryptIntGetValueLsbits32
SymCryptIntGetValueLsbits64
SymCryptIntIsEqual
SymCryptIntIsEqualUint32
SymCryptIntIsLessThan
SymCryptIntMaskedCopy
SymCryptIntMulMixedSize
SymCryptIntNeg
SymCryptIntSetValue
SymCryptIntSetValueUint32
SymCryptIntSetValueUint64
SymCryptIntShr1
SymCryptIntSubMixedSize
SymCryptIntSubSameSize
SymCryptIntSubUint32
SymCryptIntToDivisor
SymCryptIntToModElement
SymCryptIntToModulus
SymCryptIntWipe
SymCryptInverseMod2e64
SymCryptLoadMsbFirstUint64
SymCryptMarvin32
SymCryptMarvin32Append
SymCryptMarvin32AppendBlocks
SymCryptMarvin32ExpandSeed
SymCryptMarvin32Init
SymCryptMarvin32Result
SymCryptMd5Append
SymCryptMd5AppendBlocks
SymCryptMd5Init
SymCryptMd5Result
SymCryptMd5StateCopy
SymCryptModAdd
SymCryptModDivPow2
SymCryptModElementConditionalSwap
SymCryptModElementCopy
SymCryptModElementCreate
SymCryptModElementGetValue
SymCryptModElementIsEqual
SymCryptModElementIsZero
SymCryptModElementMaskedCopy
SymCryptModElementSetValue
SymCryptModElementSetValueNegUint32
SymCryptModElementSetValueUint32
SymCryptModElementToInt
SymCryptModExp
SymCryptModExpGeneric
SymCryptModExpSquareAndMultiply32
SymCryptModExpWindowed
SymCryptModInv
SymCryptModMul
SymCryptModNeg
SymCryptModSetRandom
SymCryptModSquare
SymCryptModSub
SymCryptModulusCreate
SymCryptModulusDigitsizeOfObject
SymCryptMontgomeryDoubleAndAdd
SymCryptMontgomeryFillScratchSpaces
SymCryptMontgomeryIsEqual
SymCryptMontgomeryIsZero
SymCryptMontgomeryPointScalarMul
SymCryptMontgomerySetDistinguished
SymCryptOfflinePrecomputation
SymCryptParallelHashProcess
SymCryptParallelHashProcess_serial
SymCryptParallelHashSetNextWork
SymCryptParallelSha256Append
SymCryptParallelSha256AppendBlocks_xmm
SymCryptParallelSha256AppendBlocks_ymm
SymCryptParallelSha256AppendBytes_serial
SymCryptParallelSha256Init
SymCryptParallelSha256Process
SymCryptParallelSha256Result1
SymCryptParallelSha256Result2
SymCryptParallelSha256ResultDone
SymCryptPrecomputation
SymCryptRestoreXmm
SymCryptRestoreXmmEnvWindowsKernelmodeWin8_1nLater
SymCryptRestoreYmm
SymCryptRestoreYmmEnvWindowsKernelmodeWin8_1nLater
SymCryptRsaCoreDecCrt
SymCryptRsaCoreDecCrtScratchSpace
SymCryptRsaCoreEnc
SymCryptRsaCoreEncScratchSpace
SymCryptRsaCoreVerifyInput
SymCryptRsaPkcs1ApplySignaturePadding
SymCryptRsaPkcs1CheckSignaturePadding
SymCryptRsaPkcs1Sign
SymCryptRsaPkcs1Verify
SymCryptRsaPkcs1VerifySignaturePadding
SymCryptRsaSelftest
SymCryptRsaSignVerifyTest
SymCryptRsakeyAllocate
SymCryptRsakeyCalculatePrivateFields
SymCryptRsakeyCreate
SymCryptRsakeyCreateAllObjects
SymCryptRsakeyFree
SymCryptRsakeySetValue
SymCryptRsakeySizeofModulus
SymCryptRsakeyWipe
SymCryptSaveXmm
SymCryptSaveXmmEnvWindowsKernelmodeWin8_1nLater
SymCryptSaveYmm
SymCryptSaveYmmEnvWindowsKernelmodeWin8_1nLater
SymCryptScsTableInit
SymCryptScsTableLoad
SymCryptScsTableLoad128Xmm
SymCryptScsTableLoadC
SymCryptScsTableSetBuffer
SymCryptScsTableStore
SymCryptScsTableStoreC
SymCryptSha1Append
SymCryptSha1AppendBlocks
SymCryptSha1Init
SymCryptSha1Result
SymCryptSha1StateCopy
SymCryptSha256
SymCryptSha256Append
SymCryptSha256AppendBlocks
SymCryptSha256AppendBlocks_shani
SymCryptSha256AppendBlocks_ul1
SymCryptSha256AppendBlocks_xmm_ssse3_asm
SymCryptSha256Init
SymCryptSha256Result
SymCryptSha256StateCopy
SymCryptSha384Append
SymCryptSha384Init
SymCryptSha384Result
SymCryptSha512Append
SymCryptSha512AppendBlocks_ull
SymCryptSha512Init
SymCryptSha512Result
SymCryptShortWeierstrassAdd
SymCryptShortWeierstrassAddDiffNonZero
SymCryptShortWeierstrassAddSideChannelUnsafe
SymCryptShortWeierstrassDouble
SymCryptShortWeierstrassDoubleSpecializedAm3
SymCryptShortWeierstrassFillScratchSpaces
SymCryptShortWeierstrassIsEqual
SymCryptShortWeierstrassIsZero
SymCryptShortWeierstrassNegate
SymCryptShortWeierstrassOnCurve
SymCryptShortWeierstrassSetDistinguished
SymCryptShortWeierstrassSetZero
SymCryptSizeofDivisorFromDigits
SymCryptSizeofEckeyFromCurve
SymCryptSizeofEcpointEx
SymCryptSizeofEcpointFromCurve
SymCryptSizeofIntFromDigits
SymCryptSizeofModElementFromModulus
SymCryptSizeofModulusFromDigits
SymCryptSizeofRsakeyFromParams
SymCryptTestInjectErrorEnvWindowsKernelmodeWin8_1nLater
SymCryptTwistedEdwardsAdd
SymCryptTwistedEdwardsAddDiffNonZero
SymCryptTwistedEdwardsDouble
SymCryptTwistedEdwardsFillScratchSpaces
SymCryptTwistedEdwardsIsEqual
SymCryptTwistedEdwardsIsZero
SymCryptTwistedEdwardsNegate
SymCryptTwistedEdwardsOnCurve
SymCryptTwistedEdwardsSetDistinguished
SymCryptTwistedEdwardsSetZero
SymCryptWidthNafRecoding
SymCryptWipe
SymCryptWipeAsm
SyspartDirectGetFirmwareSystemPartition
SyspartDirectGetSystemDisk
SyspartDirectGetSystemPartition
SyspartGetFirmwarePartition
SyspartGetPhysicalPartitions
SyspartGetSystemPartition
SyspartIsSpace
TRY_ACQUIRE_EXLOCK_EXCLUSIVE
TelemetryCoverageStringHashInternal
TelemetryCoverageTableLocateInternal
TelemetryCoverageValidateName
TlgAggregateFlush
TlgRegisterAggregateProvider
TlgRegisterAggregateProviderEx
TmCancelPropagationRequest
TmCommitComplete
TmCommitEnlistment
TmCommitTransaction
TmCreateEnlistment
TmCurrentTransaction
TmDereferenceEnlistmentKey
TmEnableCallbacks
TmEndPropagationRequest
TmFreezeTransactions
TmGetTransactionId
TmInitSystem
TmInitSystemPhase2
TmInitializeTransactionManager
TmIsKTMCommitCoordinator
TmIsTransactionActive
TmPrePrepareComplete
TmPrePrepareEnlistment
TmPrepareComplete
TmPrepareEnlistment
TmPropagationComplete
TmPropagationFailed
TmReadOnlyEnlistment
TmRecoverEnlistment
TmRecoverResourceManager
TmRecoverTransactionManager
TmReferenceEnlistmentKey
TmRenameTransactionManager
TmRequestOutcomeEnlistment
TmRollbackComplete
TmRollbackEnlistment
TmRollbackTransaction
TmSetCurrentTransaction
TmSinglePhaseReject
TmThawTransactions
TraceLoggingRegisterEx_EtwRegister_EtwSetInformation
TraitsCompare
TranslateGlobalVectorToIsaVector
TriageGetBugcheckData
TriageGetDriverCount
TriageGetLoaderEntry
TriagepGetPageSize
TriagepVerifyDump
TtmCleanupCurrentSession
TtmDispatchApi
TtmInit
TtmInitCurrentSession
TtmIsEnabled
TtmNotifyConsoleUserPresent
TtmNotifyDeviceArrival
TtmNotifyDeviceDeparture
TtmNotifyDeviceInput
TtmNotifyLowPowerStateExited
TtmNotifySessionDisplayBurst
TtmNotifySessionDisplayRequiredChange
TtmNotifySessionPowerRequestCreated
TtmNotifySessionPowerRequestDeleted
TtmNotifySessionPowerRequestPresent
TtmNotifySessionPowerStateChange
TtmNotifySessionTerminalInput
TtmSessionMonitorControl
TtmiAcquireCurrentSession
TtmiAssignDevice
TtmiCreateEventQueue
TtmiCreateTerminal
TtmiDevicesRundown
TtmiEvacuateDevices
TtmiGetTerminalById
TtmiInitQueues
TtmiInitTerminals
TtmiLogCalloutStart
TtmiLogCalloutStop
TtmiLogCalloutWatchdogCrashSkipped
TtmiLogCleanupCurrentSessionStart
TtmiLogCleanupCurrentSessionStop
TtmiLogConsoleUserPresent
TtmiLogDeviceArrivalNotified
TtmiLogDeviceArrivedTerminalEvent
TtmiLogDeviceAssignedTerminalEvent
TtmiLogDeviceDepartedTerminalEvent
TtmiLogDeviceDepartureNotified
TtmiLogDeviceEnumeratedTerminalEvent
TtmiLogDeviceFromTerminalRemoved
TtmiLogDeviceInputNotified
TtmiLogDeviceRundown
TtmiLogDeviceSetInputWakeCapability
TtmiLogDeviceToTerminalAssigned
TtmiLogDispatchApiStart
TtmiLogDispatchApiStop
TtmiLogDisplayPowerRequestSet
TtmiLogEnterProximity
TtmiLogError
TtmiLogExitProximity
TtmiLogInactivityTimerReset
TtmiLogInactivityTimoutUpdate
TtmiLogInitCurrentSessionStart
TtmiLogInitCurrentSessionStop
TtmiLogInitiateModernStandbyTransitionStart
TtmiLogInitiateModernStandbyTransitionStop
TtmiLogProximityBlockedRequest
TtmiLogProximityPowerPress
TtmiLogQueueCreated
TtmiLogQueueDequeueEvent
TtmiLogQueueDestroyed
TtmiLogQueueEnqueueEvent
TtmiLogQueueHandleClosed
TtmiLogQueueHandleOpened
TtmiLogSessionActivate
TtmiLogSessionCsExitComplete
TtmiLogSessionDeactivate
TtmiLogSessionDeviceAssignmentPolicySet
TtmiLogSessionDisplayRequiredDereference
TtmiLogSessionDisplayRequiredPowerRequestUpdated
TtmiLogSessionDisplayRequiredReference
TtmiLogSessionMonitorControl
TtmiLogSessionPowerControlStart
TtmiLogSessionPowerControlStop
TtmiLogSessionPowerRequestAcknowledged
TtmiLogSessionPowerRequestCreated
TtmiLogSessionPowerRequestDeleted
TtmiLogSessionPowerStateChange
TtmiLogSessionRundown
TtmiLogSessionWorkerPass
TtmiLogSessionWorkerStart
TtmiLogSessionWorkerStop
TtmiLogTerminalCleanup
TtmiLogTerminalCreated
TtmiLogTerminalDestroyed
TtmiLogTerminalDisplayStateChangedEvent
TtmiLogTerminalDisplayTimeouts
TtmiLogTerminalHandleClosed
TtmiLogTerminalHandleOpened
TtmiLogTerminalOffRequest
TtmiLogTerminalOnRequest
TtmiLogTerminalRundown
TtmiLogTerminalStateMachine
TtmiOpenDefaultTerminal
TtmiPublishDeviceEnumerationEvents
TtmiPurgeSessionPowerRequestEntries
TtmiResetInactivityTimer
TtmiResetTerminalTimeouts
TtmiRetrieveEventFromQueue
TtmiScheduleSessionWorker
TtmiSessionDeviceListWorker
TtmiSessionTerminalListWorker
TtmiSessionsRundown
TtmiSetDisplayPowerRequest
TtmiSetInputWakeCapability
TtmiSetPendingOnOffRequest
TtmiTerminalMonitorControl
TtmiTerminalSetDisplayTimeouts
TtmiTerminalsRundown
TtmiUpdateActiveTerminalCount
TtmiWriteEnumerationEventsToQueue
TtmiWriteEventToAllQueues
TtmiWriteEventToSingleQueue
TtmpAcquireQueueLock
TtmpAcquireSessionById
TtmpAcquireSessionFromTerminalHandle
TtmpAcquireSessionLock
TtmpActivateSessionWorker
TtmpApplyDeviceAutoAssignment
TtmpCallAssignedToTerminal
TtmpCallSetBuiltinPanelState
TtmpCallSetDisplayState
TtmpCallSetInputMode
TtmpCalloutArmWatchdog
TtmpCalloutLiveDumpSecondaryCallback
TtmpCalloutWatchdogCallback
TtmpCleanupPowerRequestsTrackingFromCurrentSession
TtmpCloseQueueHandle
TtmpCloseTerminalHandle
TtmpCommitTerminalDisplayStateUpdateWorker
TtmpDeleteQueue
TtmpDeleteTerminal
TtmpDereferenceSessionMaybeLast
TtmpDispatchAssignDevice
TtmpDispatchCreateEventQueue
TtmpDispatchCreateTerminal
TtmpDispatchEvacuateDevices
TtmpDispatchGetTerminalEvent
TtmpDispatchOpenTerminal
TtmpDispatchSetDefaultDeviceAssignment
TtmpDispatchSetDisplayPowerRequest
TtmpDispatchSetDisplayState
TtmpDispatchSetDisplayTimeouts
TtmpDispatchSetInputWakeCapability
TtmpExitProximity
TtmpFindDeviceByDeviceId
TtmpFindDeviceByToken
TtmpFindPowerRequestEntryById
TtmpGetCalloutTagFromCalloutType
TtmpGetConfigOverride
TtmpInitiateModernStandbyTransition
TtmpInsertPowerRequestToSession
TtmpOpenQueueHandle
TtmpOpenTerminalHandle
TtmpPowerRequestEntryComparator
TtmpPowerRequestHashAllocator
TtmpPowerRequestHashDeallocator
TtmpPublishDeviceEvent
TtmpPublishDisplayRequiredPowerRequestEvents
TtmpPushTerminalDisplayStateOntoDevice
TtmpPushTerminalState
TtmpQueueTerminalDisplayStateOntoDevice
TtmpReleaseQueueLock
TtmpResetEvaluationTimer
TtmpScheduledEvaluationDpc
TtmpScheduledEvaluationWorker
TtmpSessionPowerControl
TtmpSessionWorker
TtmpSetDisplayRequestEnded
TtmpSetTerminalPendingCleanup
TtmpShouldEscapeProximity
TtmpStartCallout
TtmpStopCallout
TtmpTerminal0PowerSettingCallback
TtmpTerminalInactivityTimerDpcRoutine
TtmpTerminalInactivityWorkerRoutine
TtmpTraceLoggingCallback
TtmpTsmIterate
TtmpTsmTestTimeout
TtmpUpdateDisplayRequiredPowerRequest
TtmpUpdatePowerRequestAttribute
TtmpUpdatePrimaryDisplayWnf
TtmpUpdateTerminalState
TtmpWnfInactivityTimeoutCallback
TtmpWriteDisplayRequiredPowerRequestUpdatedEvent
TxtpAddCacheEntry
TxtpClearCache
TxtpDestroyCacheEntry
TxtpGetCacheEntry
TxtpJustifyRectangle
ULongAddStringSize
ULongLongMult
UNLOCK_ADDRESS_SPACE
UNLOCK_ADDRESS_SPACE_SHARED
UNLOCK_ADDRESS_SPACE_SHARED_UNORDERED
UNLOCK_ADDRESS_SPACE_UNORDERED
UNLOCK_HIVE_LOAD
UNLOCK_PAGE_TABLE_COMMITMENT
UNLOCK_TRANSACTION_LIST
Uart16550GetByte
Uart16550InitializePort
Uart16550InitializePortCommon
Uart16550LegacyInitializePort
Uart16550MmInitializePort
Uart16550PutByte
Uart16550RxReady
Uart16550SetBaud
Uart16550SetBaudCommon
UartpSetAccess
UcInitialize
UcOnUnexpectedCodePath
UcpAddConfigurationStateNodeToList
UcpApcKernelRoutine
UcpApcNormalRoutine
UcpApcRundownRoutine
UcpCreateTelemetryRecord
UcpFindOrCreateTelemetryRecord
UcpGetConfigSettings
UcpLogEventGenerateDump
UcpLogUnexpectedCodePathEvent
UcpRetrieveCurrentConfigSettings
UpcaseUnicodeToMultiByteNHelper
UpcaseUnicodeToSingleByteNHelper
UpcaseUnicodeToUTF8NHelper
VERIFY_BUFFER_LOCKED
VF_ASSERT_IRQL
VF_ASSERT_MAX_IRQL
VF_FIND_DEVICE_INFORMATION_AND_REMOVE
VF_FIND_INACTIVE_ADAPTER_AND_REMOVE
VF_MARK_SCATTER_GATHER_LIST
VF_UNMARK_SCATTER_GATHER_LIST
VRegEnabledInJob
VRegSetup
VacbLevelReference
ValidFilter
ValidFilterExpression
ValidateRegistrLangType
ValidateStd3Range
VerSetConditionMask
VerifierCcCopyWrite
VerifierCcCopyWriteEx
VerifierCcDeferWrite
VerifierCcFastCopyWrite
VerifierCcWaitForCurrentLazyWriterActivity
VerifierCmRegisterCallback
VerifierCmRegisterCallbackEx
VerifierCmUnRegisterCallback
VerifierDbgBreakPointWithStatus
VerifierEtwRegister
VerifierEtwRegisterClassicProvider
VerifierEtwUnregister
VerifierExAcquireFastMutex
VerifierExAcquireFastMutexUnsafe
VerifierExAcquireFastResourceExclusive
VerifierExAcquireFastResourceShared
VerifierExAcquireFastResourceSharedStarveExclusive
VerifierExAcquireResourceExclusiveLite
VerifierExAcquireResourceSharedLite
VerifierExAcquireRundownProtection
VerifierExAcquireRundownProtectionCacheAware
VerifierExAcquireRundownProtectionCacheAwareEx
VerifierExAcquireRundownProtectionEx
VerifierExAcquireSharedStarveExclusive
VerifierExAcquireSharedWaitForExclusive
VerifierExAllocateCacheAwareRundownProtection
VerifierExAllocatePool
VerifierExAllocatePool2
VerifierExAllocatePool3
VerifierExAllocatePoolEx
VerifierExAllocatePoolWithQuota
VerifierExAllocatePoolWithQuotaTag
VerifierExAllocatePoolWithTag
VerifierExAllocatePoolWithTagPriority
VerifierExConvertExclusiveToSharedLite
VerifierExConvertFastResourceExclusiveToShared
VerifierExCreateCallback
VerifierExDeleteFastResource
VerifierExDeleteLookasideListEx
VerifierExDeleteNPagedLookasideList
VerifierExDeletePagedLookasideList
VerifierExDeleteResourceLite
VerifierExDisownFastResource
VerifierExEnterCriticalRegionAndAcquireResourceExclusive
VerifierExEnterCriticalRegionAndAcquireResourceShared
VerifierExEnterCriticalRegionAndAcquireSharedWaitForExclusive
VerifierExEnterPriorityRegionAndAcquireResourceExclusive
VerifierExEnterPriorityRegionAndAcquireResourceShared
VerifierExFreePool
VerifierExFreePoolEx
VerifierExFreePoolWithTag
VerifierExGetExclusiveWaiterCount
VerifierExGetSharedWaiterCount
VerifierExInitializeFastOwnerEntry
VerifierExInitializeFastResource
VerifierExInitializeFastResourceAcquired
VerifierExInitializeLookasideListEx
VerifierExInitializeNPagedLookasideList
VerifierExInitializePagedLookasideList
VerifierExInitializeResourceLite
VerifierExInterlockedAddLargeInteger
VerifierExInterlockedInsertHeadList
VerifierExInterlockedInsertTailList
VerifierExInterlockedPopEntryList
VerifierExInterlockedPushEntryList
VerifierExInterlockedRemoveHeadList
VerifierExIsFastResourceContended
VerifierExIsFastResourceHeld
VerifierExIsFastResourceHeldExclusive
VerifierExIsProcessorFeaturePresent
VerifierExIsResourceAcquiredExclusiveLite
VerifierExIsResourceAcquiredSharedLite
VerifierExRaiseAccessViolation
VerifierExRaiseDatatypeMisalignment
VerifierExRaiseStatus
VerifierExRegisterCallback
VerifierExReinitializeFastResource
VerifierExReinitializeResourceLite
VerifierExReleaseDisownedFastResource
VerifierExReleaseDisownedFastResourceExclusive
VerifierExReleaseDisownedFastResourceShared
VerifierExReleaseFastMutex
VerifierExReleaseFastMutexUnsafe
VerifierExReleaseFastResource
VerifierExReleaseFastResourceExclusive
VerifierExReleaseFastResourceShared
VerifierExReleaseResourceAndLeaveCriticalRegion
VerifierExReleaseResourceAndLeavePriorityRegion
VerifierExReleaseResourceForThreadLite
VerifierExReleaseResourceLite
VerifierExReleaseRundownProtection
VerifierExReleaseRundownProtectionCacheAware
VerifierExReleaseRundownProtectionEx
VerifierExSetResourceOwnerPointer
VerifierExSetResourceOwnerPointerEx
VerifierExSetTimerResolution
VerifierExTryToAcquireFastMutex
VerifierExTryToAcquireResourceExclusiveLite
VerifierExTryToConvertFastResourceSharedToExclusive
VerifierExUnregisterCallback
VerifierExUuidCreate
VerifierExWaitForRundownProtectionRelease
VerifierExWaitForRundownProtectionReleaseCacheAware
VerifierExfAcquirePushLockExclusive
VerifierExfAcquirePushLockShared
VerifierExfReleasePushLock
VerifierExfReleasePushLockShared
VerifierExfTryAcquirePushLockShared
VerifierExfTryToWakePushLock
VerifierExpInterlockedFlushSList
VerifierExpInterlockedPopEntrySList
VerifierExpInterlockedPushEntrySList
VerifierFsRtlAllocateFileLock
VerifierFsRtlAreNamesEqual
VerifierFsRtlBalanceReads
VerifierFsRtlCancellableWaitForMultipleObjects
VerifierFsRtlCancellableWaitForSingleObject
VerifierFsRtlCheckLockForReadAccess
VerifierFsRtlCheckLockForWriteAccess
VerifierFsRtlCopyWrite
VerifierFsRtlDeregisterUncProvider
VerifierFsRtlDissectName
VerifierFsRtlDoesNameContainWildCards
VerifierFsRtlFastCheckLockForRead
VerifierFsRtlFastCheckLockForWrite
VerifierFsRtlFastUnlockAll
VerifierFsRtlFastUnlockAllByKey
VerifierFsRtlFastUnlockSingle
VerifierFsRtlFreeFileLock
VerifierFsRtlGetFileSize
VerifierFsRtlGetNextFileLock
VerifierFsRtlIncrementCcFastReadNoWait
VerifierFsRtlIncrementCcFastReadWait
VerifierFsRtlInitializeFileLock
VerifierFsRtlIsNameInExpression
VerifierFsRtlMdlReadCompleteDev
VerifierFsRtlMdlWriteCompleteDev
VerifierFsRtlNotifyFilterChangeDirectory
VerifierFsRtlNotifyFilterReportChange
VerifierFsRtlNotifyFullChangeDirectory
VerifierFsRtlNotifyFullReportChange
VerifierFsRtlPrivateLock
VerifierFsRtlProcessFileLock
VerifierFsRtlRegisterUncProvider
VerifierFsRtlRegisterUncProviderEx
VerifierFsRtlRemoveDotsFromPath
VerifierFsRtlUninitializeFileLock
VerifierFsRtlValidateReparsePointBuffer
VerifierHalExamineMBR
VerifierInitSystem
VerifierIoAcquireCancelSpinLock
VerifierIoAcquireRemoveLockEx
VerifierIoAcquireVpbSpinLock
VerifierIoAllocateController
VerifierIoAllocateDriverObjectExtension
VerifierIoAllocateErrorLogEntry
VerifierIoAllocateIrp
VerifierIoAllocateIrpEx
VerifierIoAllocateMdl
VerifierIoAllocateWorkItem
VerifierIoAttachDevice
VerifierIoAttachDeviceToDeviceStack
VerifierIoAttachDeviceToDeviceStackSafe
VerifierIoCancelIrp
VerifierIoCheckShareAccess
VerifierIoConnectInterrupt
VerifierIoConnectInterruptEx
VerifierIoCreateController
VerifierIoCreateDevice
VerifierIoCreateFile
VerifierIoCreateFileEx
VerifierIoCreateFileSpecifyDeviceObjectHint
VerifierIoCreateNotificationEvent
VerifierIoCreateSymbolicLink
VerifierIoCreateSynchronizationEvent
VerifierIoCreateUnprotectedSymbolicLink
VerifierIoDeleteController
VerifierIoDeleteDevice
VerifierIoDeleteSymbolicLink
VerifierIoDetachDevice
VerifierIoDisconnectInterrupt
VerifierIoDisconnectInterruptEx
VerifierIoFreeController
VerifierIoFreeMdl
VerifierIoGetAttachedDeviceReference
VerifierIoGetConfigurationInformation
VerifierIoGetDeviceDirectory
VerifierIoGetDeviceInterfaceAlias
VerifierIoGetDeviceInterfaces
VerifierIoGetDeviceNumaNode
VerifierIoGetDeviceObjectPointer
VerifierIoGetDeviceProperty
VerifierIoGetDevicePropertyData
VerifierIoGetDeviceToVerify
VerifierIoGetDriverDirectory
VerifierIoGetFileObjectGenericMapping
VerifierIoGetInitialStack
VerifierIoInitializeIrp
VerifierIoInitializeRemoveLockEx
VerifierIoInitializeWorkItem
VerifierIoInvalidateDeviceRelations
VerifierIoIsWdmVersionAvailable
VerifierIoOpenDeviceInterfaceRegistryKey
VerifierIoOpenDeviceRegistryKey
VerifierIoOpenDriverRegistryKey
VerifierIoRaiseHardError
VerifierIoRaiseInformationalHardError
VerifierIoReadPartitionTable
VerifierIoReadPartitionTableEx
VerifierIoRegisterBootDriverReinitialization
VerifierIoRegisterDeviceInterface
VerifierIoRegisterDriverReinitialization
VerifierIoRegisterLastChanceShutdownNotification
VerifierIoRegisterPlugPlayNotification
VerifierIoRegisterShutdownNotification
VerifierIoReleaseCancelSpinLock
VerifierIoReleaseRemoveLockAndWaitEx
VerifierIoReleaseRemoveLockEx
VerifierIoReleaseVpbSpinLock
VerifierIoRemoveShareAccess
VerifierIoReplacePartitionUnit
VerifierIoReportDetectedDevice
VerifierIoReportTargetDeviceChange
VerifierIoReportTargetDeviceChangeAsynchronous
VerifierIoReuseIrp
VerifierIoSetCompletionRoutineEx
VerifierIoSetDeviceInterfaceState
VerifierIoSetDevicePropertyData
VerifierIoSetDeviceToVerify
VerifierIoSetPartitionInformation
VerifierIoSetPartitionInformationEx
VerifierIoSetShareAccess
VerifierIoSetStartIoAttributes
VerifierIoStartNextPacket
VerifierIoUnregisterPlugPlayNotification
VerifierIoUnregisterPlugPlayNotificationEx
VerifierIoUnregisterShutdownNotification
VerifierIoUpdateShareAccess
VerifierIoVolumeDeviceToDosName
VerifierIoWMIAllocateInstanceIds
VerifierIoWMIRegistrationControl
VerifierIoWMIWriteEvent
VerifierIoWriteErrorLogEntry
VerifierIoWritePartitionTable
VerifierIoWritePartitionTableEx
VerifierIofCompleteRequest
VerifierKeAcquireGuardedMutex
VerifierKeAcquireGuardedMutexUnsafe
VerifierKeAcquireInStackQueuedSpinLock
VerifierKeAcquireInStackQueuedSpinLockAtDpcLevel
VerifierKeAcquireInStackQueuedSpinLockCommon
VerifierKeAcquireInStackQueuedSpinLockForDpc
VerifierKeAcquireInStackQueuedSpinLockForDpcCommon
VerifierKeAcquireInStackQueuedSpinLockRaiseToSynch
VerifierKeAcquireInterruptSpinLock
VerifierKeAcquireQueuedSpinLock
VerifierKeAcquireQueuedSpinLockRaiseToSynch
VerifierKeAcquireSpinLockAtDpcLevel
VerifierKeAcquireSpinLockForDpc
VerifierKeAcquireSpinLockRaiseToDpc
VerifierKeAreAllApcsDisabled
VerifierKeAreApcsDisabled
VerifierKeCancelTimer
VerifierKeClearEvent
VerifierKeDelayExecutionThread
VerifierKeDeregisterNmiCallback
VerifierKeEnterCriticalRegion
VerifierKeEnterGuardedRegion
VerifierKeFlushQueuedDpcs
VerifierKeInitializeDeviceQueue
VerifierKeInitializeEvent
VerifierKeInitializeGuardedMutex
VerifierKeInitializeMutant
VerifierKeInitializeMutex
VerifierKeInitializeSemaphore
VerifierKeInitializeTimer
VerifierKeInitializeTimerEx
VerifierKeInsertByKeyDeviceQueue
VerifierKeInsertDeviceQueue
VerifierKeInsertHeadQueue
VerifierKeInsertQueue
VerifierKeInsertQueueDpc
VerifierKeIsApcRunningThread
VerifierKeIsExecutingLegacyDpc
VerifierKeLeaveCriticalRegion
VerifierKeLeaveGuardedRegion
VerifierKeLowerIrql
VerifierKePulseEvent
VerifierKeQueryPriorityThread
VerifierKeQueryRuntimeThread
VerifierKeReadStateEvent
VerifierKeReadStateMutex
VerifierKeReadStateSemaphore
VerifierKeReadStateTimer
VerifierKeRegisterNmiCallback
VerifierKeReleaseGuardedMutex
VerifierKeReleaseGuardedMutexUnsafe
VerifierKeReleaseInStackQueuedSpinLock
VerifierKeReleaseInStackQueuedSpinLockForDpc
VerifierKeReleaseInStackQueuedSpinLockFromDpcLevel
VerifierKeReleaseInterruptSpinLock
VerifierKeReleaseMutant
VerifierKeReleaseMutex
VerifierKeReleaseQueuedSpinLock
VerifierKeReleaseSemaphore
VerifierKeReleaseSpinLock
VerifierKeReleaseSpinLockForDpc
VerifierKeReleaseSpinLockFromDpcLevel
VerifierKeRemoveByKeyDeviceQueue
VerifierKeRemoveDeviceQueue
VerifierKeRemoveEntryDeviceQueue
VerifierKeRemoveQueue
VerifierKeRemoveQueueDpc
VerifierKeResetEvent
VerifierKeRestoreExtendedProcessorState
VerifierKeSaveExtendedProcessorState
VerifierKeSetEvent
VerifierKeSetSystemGroupAffinityThread
VerifierKeSetTimer
VerifierKeSetTimerEx
VerifierKeSynchronizeExecution
VerifierKeTestSpinLock
VerifierKeTryToAcquireGuardedMutex
VerifierKeTryToAcquireQueuedSpinLock
VerifierKeTryToAcquireQueuedSpinLockRaiseToSynch
VerifierKeTryToAcquireSpinLockAtDpcLevel
VerifierKeWaitForMultipleObjects
VerifierKeWaitForSingleObject
VerifierMmAddPhysicalMemory
VerifierMmAllocateContiguousMemory
VerifierMmAllocateContiguousMemoryEx
VerifierMmAllocateContiguousMemorySpecifyCache
VerifierMmAllocateContiguousMemorySpecifyCacheNode
VerifierMmAllocateContiguousNodeMemory
VerifierMmAllocateMappingAddress
VerifierMmAllocateMappingAddressEx
VerifierMmAllocateNodePagesForMdlEx
VerifierMmAllocateNonCachedMemory
VerifierMmAllocatePagesForMdl
VerifierMmAllocatePagesForMdlEx
VerifierMmBuildMdlForNonPagedPool
VerifierMmCreateMdl
VerifierMmCreateMirror
VerifierMmCreateSection
VerifierMmDoesFileHaveUserWritableReferences
VerifierMmFreeContiguousMemory
VerifierMmFreeContiguousMemorySpecifyCache
VerifierMmFreeMappingAddress
VerifierMmFreeNonCachedMemory
VerifierMmFreePagesFromMdl
VerifierMmGetPhysicalMemoryRanges
VerifierMmGetSystemRoutineAddress
VerifierMmLockPagableDataSection
VerifierMmLockPagableSectionByHandle
VerifierMmMapIoSpace
VerifierMmMapIoSpaceEx
VerifierMmMapLockedPages
VerifierMmMapLockedPagesSpecifyCache
VerifierMmMapLockedPagesWithReservedMapping
VerifierMmMapViewOfSection
VerifierMmPageEntireDriver
VerifierMmPrefetchPages
VerifierMmProbeAndLockPages
VerifierMmProbeAndLockProcessPages
VerifierMmProtectMdlSystemAddress
VerifierMmRemovePhysicalMemory
VerifierMmResetDriverPaging
VerifierMmSecureVirtualMemory
VerifierMmUnlockPagableImageSection
VerifierMmUnlockPages
VerifierMmUnmapIoSpace
VerifierMmUnmapLockedPages
VerifierMmUnsecureVirtualMemory
VerifierNtCreateFile
VerifierNtCreateSection
VerifierNtDeleteFile
VerifierNtLockFile
VerifierNtMapViewOfSection
VerifierNtOpenFile
VerifierNtReadFile
VerifierNtSetInformationFile
VerifierNtUnlockFile
VerifierNtWriteFile
VerifierObGetObjectSecurity
VerifierObReferenceObjectByHandle
VerifierObReferenceObjectByHandleWithTag
VerifierObReferenceObjectByPointer
VerifierObReferenceObjectByPointerWithTag
VerifierObReleaseObjectSecurity
VerifierObfDereferenceObject
VerifierObfDereferenceObjectWithTag
VerifierObfReferenceObject
VerifierObfReferenceObjectWithTag
VerifierPoCallDriver
VerifierPoFxActivateComponent
VerifierPoFxCompleteDevicePowerNotRequired
VerifierPoFxCompleteIdleCondition
VerifierPoFxCompleteIdleState
VerifierPoFxIdleComponent
VerifierPoFxNotifySurprisePowerOn
VerifierPoFxPowerControl
VerifierPoFxRegisterDevice
VerifierPoFxReportDevicePoweredOn
VerifierPoFxSetComponentLatency
VerifierPoFxSetComponentResidency
VerifierPoFxSetComponentWake
VerifierPoFxSetDeviceIdleTimeout
VerifierPoFxStartDevicePowerManagement
VerifierPoFxUnregisterDevice
VerifierPoRequestPowerIrp
VerifierPortExAllocatePoolWithQuotaTag
VerifierPortExAllocatePoolWithTagPriority
VerifierPortIoAllocateIrp
VerifierPortIoAllocateMdl
VerifierPortIoAllocateWorkItem
VerifierPortKeAcquireSpinLock
VerifierPortKeAcquireSpinLockNoXdv
VerifierPortKeReleaseSpinLock
VerifierPortKeReleaseSpinLockNoXdv
VerifierProbeForRead
VerifierProbeForWrite
VerifierPsAssignImpersonationToken
VerifierPsCreateSystemThread
VerifierPsDereferenceImpersonationToken
VerifierPsDereferencePrimaryToken
VerifierPsDisableImpersonation
VerifierPsGetVersion
VerifierPsImpersonateClient
VerifierPsReferenceImpersonationToken
VerifierPsReferencePrimaryToken
VerifierPsRemoveLoadImageNotifyRoutine
VerifierPsRestoreImpersonation
VerifierPsRevertToSelf
VerifierPsSetCreateProcessNotifyRoutine
VerifierPsSetCreateProcessNotifyRoutineEx
VerifierPsSetCreateThreadNotifyRoutine
VerifierPsSetLoadImageNotifyRoutine
VerifierPsTerminateSystemThread
VerifierRtlAnsiStringToUnicodeString
VerifierRtlCheckRegistryKey
VerifierRtlCompareUnicodeString
VerifierRtlCreateRegistryKey
VerifierRtlCreateSystemVolumeInformationFolder
VerifierRtlCreateUnicodeString
VerifierRtlDeleteRegistryValue
VerifierRtlDowncaseUnicodeChar
VerifierRtlDowncaseUnicodeString
VerifierRtlDuplicateUnicodeString
VerifierRtlEqualUnicodeString
VerifierRtlFreeUnicodeString
VerifierRtlGUIDFromString
VerifierRtlGenerateClass5Guid
VerifierRtlHashUnicodeString
VerifierRtlOemStringToCountedUnicodeString
VerifierRtlOemStringToUnicodeString
VerifierRtlQueryRegistryValueWithFallback
VerifierRtlQueryRegistryValues
VerifierRtlQueryRegistryValuesEx
VerifierRtlStringFromGUID
VerifierRtlUTF8ToUnicodeN
VerifierRtlUnicodeStringToAnsiString
VerifierRtlUnicodeStringToCountedOemString
VerifierRtlUnicodeStringToOemString
VerifierRtlUnicodeToUTF8N
VerifierRtlUpcaseUnicodeChar
VerifierRtlUpcaseUnicodeString
VerifierRtlUpcaseUnicodeStringToAnsiString
VerifierRtlUpcaseUnicodeStringToCountedOemString
VerifierRtlUpcaseUnicodeStringToOemString
VerifierRtlWriteRegistryValue
VerifierRtlxAnsiStringToUnicodeSize
VerifierRtlxUnicodeStringToAnsiSize
VerifierSeAccessCheck
VerifierSeAssignSecurity
VerifierSeAssignSecurityEx
VerifierSeDeassignSecurity
VerifierSeLockSubjectContext
VerifierSeReleaseSubjectContext
VerifierSeSinglePrivilegeCheck
VerifierSeUnlockSubjectContext
VerifierSeValidSecurityDescriptor
VerifierZwAccessCheckAndAuditAlarm
VerifierZwAddBootEntry
VerifierZwAddDriverEntry
VerifierZwAdjustPrivilegesToken
VerifierZwAllocateLocallyUniqueId
VerifierZwAllocateVirtualMemory
VerifierZwAlpcAcceptConnectPort
VerifierZwAlpcConnectPort
VerifierZwAlpcCreatePort
VerifierZwAlpcCreatePortSection
VerifierZwAlpcCreateResourceReserve
VerifierZwAlpcCreateSectionView
VerifierZwAlpcCreateSecurityContext
VerifierZwAlpcQueryInformation
VerifierZwAlpcSendWaitReceivePort
VerifierZwAlpcSetInformation
VerifierZwCancelIoFile
VerifierZwCancelTimer
VerifierZwClose
VerifierZwCloseObjectAuditAlarm
VerifierZwCommitComplete
VerifierZwCommitEnlistment
VerifierZwCommitTransaction
VerifierZwConnectPort
VerifierZwCreateDirectoryObject
VerifierZwCreateEnlistment
VerifierZwCreateEvent
VerifierZwCreateFile
VerifierZwCreateJobObject
VerifierZwCreateKey
VerifierZwCreateKeyTransacted
VerifierZwCreateResourceManager
VerifierZwCreateSection
VerifierZwCreateSymbolicLinkObject
VerifierZwCreateTimer
VerifierZwCreateTransaction
VerifierZwCreateTransactionManager
VerifierZwDeleteBootEntry
VerifierZwDeleteFile
VerifierZwDeleteKey
VerifierZwDeleteValueKey
VerifierZwDeviceIoControlFile
VerifierZwDisplayString
VerifierZwDuplicateObject
VerifierZwDuplicateToken
VerifierZwEnumerateBootEntries
VerifierZwEnumerateDriverEntries
VerifierZwEnumerateKey
VerifierZwEnumerateTransactionObject
VerifierZwEnumerateValueKey
VerifierZwFlushBuffersFile
VerifierZwFlushBuffersFileEx
VerifierZwFlushInstructionCache
VerifierZwFlushKey
VerifierZwFlushVirtualMemory
VerifierZwFreeVirtualMemory
VerifierZwFsControlFile
VerifierZwGetNotificationResourceManager
VerifierZwLoadDriver
VerifierZwLoadKey
VerifierZwLockFile
VerifierZwMapViewOfSection
VerifierZwModifyBootEntry
VerifierZwModifyDriverEntry
VerifierZwNotifyChangeKey
VerifierZwOpenDirectoryObject
VerifierZwOpenEnlistment
VerifierZwOpenEvent
VerifierZwOpenFile
VerifierZwOpenJobObject
VerifierZwOpenKey
VerifierZwOpenKeyEx
VerifierZwOpenKeyTransacted
VerifierZwOpenKeyTransactedEx
VerifierZwOpenProcess
VerifierZwOpenProcessToken
VerifierZwOpenProcessTokenEx
VerifierZwOpenResourceManager
VerifierZwOpenSection
VerifierZwOpenSymbolicLinkObject
VerifierZwOpenThread
VerifierZwOpenThreadToken
VerifierZwOpenThreadTokenEx
VerifierZwOpenTimer
VerifierZwOpenTransaction
VerifierZwOpenTransactionManager
VerifierZwPowerInformation
VerifierZwPrePrepareComplete
VerifierZwPrePrepareEnlistment
VerifierZwPrepareComplete
VerifierZwPrepareEnlistment
VerifierZwProtectVirtualMemory
VerifierZwPulseEvent
VerifierZwQueryBootEntryOrder
VerifierZwQueryBootOptions
VerifierZwQueryDefaultLocale
VerifierZwQueryDefaultUILanguage
VerifierZwQueryDirectoryFile
VerifierZwQueryDirectoryFileEx
VerifierZwQueryDirectoryObject
VerifierZwQueryDriverEntryOrder
VerifierZwQueryEaFile
VerifierZwQueryFullAttributesFile
VerifierZwQueryInformationEnlistment
VerifierZwQueryInformationFile
VerifierZwQueryInformationJobObject
VerifierZwQueryInformationProcess
VerifierZwQueryInformationResourceManager
VerifierZwQueryInformationThread
VerifierZwQueryInformationToken
VerifierZwQueryInformationTransaction
VerifierZwQueryInformationTransactionManager
VerifierZwQueryInstallUILanguage
VerifierZwQueryKey
VerifierZwQueryLicenseValue
VerifierZwQueryObject
VerifierZwQueryQuotaInformationFile
VerifierZwQuerySection
VerifierZwQuerySecurityObject
VerifierZwQuerySymbolicLinkObject
VerifierZwQuerySystemInformation
VerifierZwQueryValueKey
VerifierZwQueryVolumeInformationFile
VerifierZwReadFile
VerifierZwReadOnlyEnlistment
VerifierZwRecoverEnlistment
VerifierZwRecoverTransactionManager
VerifierZwRemoveIoCompletionEx
VerifierZwRenameKey
VerifierZwReplaceKey
VerifierZwRequestWaitReplyPort
VerifierZwResetEvent
VerifierZwRestoreKey
VerifierZwRollbackComplete
VerifierZwRollbackEnlistment
VerifierZwRollbackTransaction
VerifierZwSetBootEntryOrder
VerifierZwSetBootOptions
VerifierZwSetDriverEntryOrder
VerifierZwSetEaFile
VerifierZwSetEvent
VerifierZwSetInformationEnlistment
VerifierZwSetInformationFile
VerifierZwSetInformationJobObject
VerifierZwSetInformationKey
VerifierZwSetInformationObject
VerifierZwSetInformationProcess
VerifierZwSetInformationResourceManager
VerifierZwSetInformationThread
VerifierZwSetInformationToken
VerifierZwSetInformationTransaction
VerifierZwSetQuotaInformationFile
VerifierZwSetSecurityObject
VerifierZwSetSystemInformation
VerifierZwSetSystemTime
VerifierZwSetTimer
VerifierZwSetTimerEx
VerifierZwSetValueKey
VerifierZwSetVolumeInformationFile
VerifierZwTerminateProcess
VerifierZwTranslateFilePath
VerifierZwUnloadDriver
VerifierZwUnloadKey
VerifierZwUnlockFile
VerifierZwUnmapViewOfSection
VerifierZwWaitForMultipleObjects
VerifierZwWaitForSingleObject
VerifierZwWriteFile
VfAddVerifierEntry
VfAfterCallDriver
VfAllocateAdapterChannel
VfAllocateAdapterChannelEx
VfAllocateCommonBuffer
VfAllocateCommonBufferEx
VfAllocateCommonBufferVector
VfAllocateCommonBufferWithBounds
VfAllocateCrashDumpRegisters
VfAllocateCrashDumpRegistersEx
VfAllocateDomainCommonBuffer
VfAssignRuleClassIdToClassDriver
VfAvlCleanupLockContext
VfAvlDeleteAllTreeNodes
VfAvlDeleteTreeNode
VfAvlEnumerateNodes
VfAvlFreeNodeNoLock
VfAvlInitializeLockContext
VfAvlInitializeTree
VfAvlInitializeTreeEx
VfAvlInsertReservedTreeNode
VfAvlLookupTreeNode
VfAvlReserveNode
VfBeforeCallDriver
VfBelow4gbPluginEntry
VfBindDifCallbackWrappers
VfBindDifDDIWrappers
VfBranchTracingPluginEntry
VfBugCheckNoStackUsage
VfBuildMdlFromScatterGatherList
VfBuildScatterGatherList
VfBuildScatterGatherListEx
VfCalculateScatterGatherListSize
VfCancelAdapterChannel
VfCancelMappedTransfer
VfCheckDifDdiExist
VfCheckForLookaside
VfCheckForResource
VfCheckUserHandle
VfClearDifWithoutReboot
VfClearVerifierSettings
VfConfigureAdapterChannel
VfCreateCommonBufferFromMdl
VfCreateProcessCallback
VfCtxInit
VfDdiInit
VfDeadlockAcquireResource
VfDeadlockInitialize
VfDeadlockInitializeResource
VfDeadlockPluginEntry
VfDeadlockReleaseResource
VfDeleteLookasideTree
VfDeleteResource
VfDeleteResourceTree
VfDevObjAdjustFdoForVerifierFilters
VfDevObjPostAddDevice
VfDevObjPreAddDevice
VfDifCallbackReplacementRequested
VfDifCaptureDriverEntry
VfDifCaptureIoCallbacks
VfDifRecoverIoCallbacks
VfDisableHalVerifier
VfDmaPluginEntry
VfDriverApplyDifVerification
VfDriverEnableDisableVerifier
VfDriverEnableVerifier
VfDriverEnableVerifierForAll
VfDriverInitStarting
VfDriverInitSuccess
VfDriverIsKernelImageAddress
VfDriverLoadImage
VfDriverLoadSucceeded
VfDriverLock
VfDriverProcessUnload
VfDriverRemoveAllDifVerification
VfDriverRemoveDifVerification
VfDriverUnloadImage
VfDriverUnlock
VfErrorReleaseTriageInformation
VfErrorReport7
VfErrorReport8
VfErrorStoreTriageInformation
VfExAllocPoolInternal
VfFailDeviceNode
VfFailDriver
VfFailSystemBIOS
VfFastIoCheckState
VfFastIoSnapState
VfFaultsAddAllApps
VfFaultsAddAllTags
VfFaultsInitPhase0
VfFaultsInitPhase1
VfFaultsInjectPoolAllocationFailure
VfFaultsInjectResourceFailure
VfFaultsIsSystemSufficientlyBooted
VfFaultsRemoveAllApps
VfFaultsRemoveAllTags
VfFaultsSetParameters
VfFillAllocatePagesForMdl
VfFillAllocatedMemory
VfFilterAttach
VfFlushAdapterBuffers
VfFlushAdapterBuffersEx
VfFlushDmaBuffer
VfFreeAdapterChannel
VfFreeAdapterObject
VfFreeCapturedUnicodeString
VfFreeCommonBuffer
VfFreeCommonBufferFromVector
VfFreeCommonBufferVector
VfFreeCrashDumpRegistersEx
VfFreeMapRegisters
VfFreeMemoryNotification
VfGetCommonBufferFromVectorByIndex
VfGetDmaAdapter
VfGetDmaAdapterInfo
VfGetDmaAlignment
VfGetDmaDomain
VfGetDmaTransferInfo
VfGetHookAddressForOriginal
VfGetPristineDispatchRoutine
VfGetPristineDriverInit
VfGetScatterGatherList
VfGetScatterGatherListEx
VfGetVerifiedDriverCount
VfGetVerifierInformation
VfGetVerifierInformationEx
VfHalAllocateMapRegisters
VfHalDeleteDevice
VfHandlePoolAlloc
VfInitBootDriversLoaded
VfInitDifWithoutReboot
VfInitSetVerifyDriverTargets
VfInitSystemNoRebootNeeded
VfInitVerifierComponents
VfInitializeDmaTransferContext
VfInsertContext
VfIoAllocateIrp1
VfIoAllocateIrp2
VfIoCompletionCheckState
VfIoDeleteDevice
VfIoDetachDevice
VfIoInitializeIrp
VfIoPendingEntry
VfIoPendingUnload
VfIovPluginEntry
VfIrpAllocateCallDriverData
VfIrpDatabaseCheckExFreePool
VfIrpDatabaseEntryFindAndLock
VfIrpDatabaseEntryInsertAndLock
VfIrpDatabaseEntryReleaseLock
VfIrpDatabaseUninitialize
VfIrpLogDeleteDeviceLogs
VfIrpLogInit
VfIrpLogRecordEvent
VfIrpLogRetrieveWmiData
VfIrpLogUnlockDatabase
VfIrpSendSynchronousIrp
VfIrpTrackingPluginEntry
VfIrpWatermark
VfIrqlPluginEntry
VfIsKernelVerificationOn
VfIsPCIBus
VfIsRuleClassEnabled
VfIsRunningInXBox
VfIsVerificationEnabled
VfIsVerificationEnabledForImage
VfIsVerifierEnabled
VfIsVerifierExtensionEnabled
VfJoinDmaDomain
VfKeCheckForChanges
VfKeIrqlLogLower
VfKeIrqlLogRaise
VfKeIrqlTransitionReserveLogEntry
VfLeaveDmaDomain
VfLookasideAdd
VfLookasideDelete
VfLwSPEntry
VfMajorAdvanceIrpStatus
VfMajorBuildIrpLogEntry
VfMajorInit
VfMajorIsNewRequest
VfMajorIsValidIrpStatus
VfMajorRegisterHandlers
VfMajorTestStartedPdoStack
VfMajorVerifyFinalIrpStack
VfMajorVerifyIrpStackDownward
VfMajorVerifyIrpStackUpward
VfMajorVerifyNewIrp
VfMajorVerifyNewRequest
VfMapTransfer
VfMapTransferEx
VfMiscCheckKernelAddress
VfMiscExAcquireFastMutexUnsafe_Entry
VfMiscExAcquireResourceExclusiveLite_Entry
VfMiscExAcquireResourceSharedLite_Entry
VfMiscExAcquireSharedStarveExclusive_Entry
VfMiscExAcquireSharedWaitForExclusive_Entry
VfMiscExDeleteLookasideListEx_Entry
VfMiscExDeleteNPagedLookasideList_Entry
VfMiscExDeletePagedLookasideList_Entry
VfMiscExDeleteResourceLite_Entry
VfMiscExDeleteResourceLite_Exit
VfMiscExInitializeLookasideListEx_Entry
VfMiscExInitializeLookasideListEx_Exit
VfMiscExInitializeNPagedLookasideList_Entry
VfMiscExInitializeNPagedLookasideList_Exit
VfMiscExInitializePagedLookasideList_Entry
VfMiscExInitializePagedLookasideList_Exit
VfMiscExInitializeResourceLite_Entry
VfMiscExInitializeResourceLite_Exit
VfMiscExReleaseFastMutexUnsafe_Entry
VfMiscExReleaseFastMutex_Entry
VfMiscExReleaseResourceAndLeaveCriticalRegion_Entry
VfMiscExReleaseResourceAndLeavePriorityRegion_Entry
VfMiscExReleaseResourceForThreadLite_Entry
VfMiscExReleaseResourceLite_Entry
VfMiscExfAcquirePushLockExclusive_Entry
VfMiscExfAcquirePushLockShared_Entry
VfMiscExfReleasePushLockShared_Entry
VfMiscExfReleasePushLock_Entry
VfMiscExfTryAcquirePushLockShared_Entry
VfMiscExfTryToWakePushLock_Entry
VfMiscIoConnectInterruptEx_Entry
VfMiscIoConnectInterrupt_Entry
VfMiscIoDisconnectInterruptEx_Entry
VfMiscIoDisconnectInterrupt_Entry
VfMiscIoFreeMdl_Entry
VfMiscIoInitializeWorkItem_Entry
VfMiscKeAcquireInStackQueuedSpinLockAtDpcLevel_Entry
VfMiscKeAcquireInStackQueuedSpinLockForDpc_Entry
VfMiscKeAcquireSpinLockAtDpcLevel_Entry
VfMiscKeAcquireSpinLockRaiseToDpc_Entry
VfMiscKeInitializeEvent_Entry
VfMiscKeInitializeMutant_Entry
VfMiscKeInitializeMutex_Entry
VfMiscKeInitializeSemaphore_Entry
VfMiscKeInitializeTimerEx_Entry
VfMiscKeInsertQueueDpc_Entry
VfMiscKeReleaseInStackQueuedSpinLockForDpc_Entry
VfMiscKeReleaseInStackQueuedSpinLockFromDpcLevel_Entry
VfMiscKeReleaseInStackQueuedSpinLock_Entry
VfMiscKeReleaseMutant_Entry
VfMiscKeReleaseMutex_Entry
VfMiscKeReleaseQueuedSpinLock_Entry
VfMiscKeReleaseSpinLockFromDpcLevel_Entry
VfMiscKeReleaseSpinLock_Entry
VfMiscKeRemoveQueueDpc_Entry
VfMiscKeSetEvent_Entry
VfMiscKeSynchronizeExecution_Entry
VfMiscKeTryToAcquireSpinLockAtDpcLevel_Entry
VfMiscKeWaitForMultipleObjects_Entry
VfMiscKeWaitForSingleObject_Entry
VfMiscMmAllocateContiguousMemoryEx_Entry
VfMiscMmAllocateContiguousMemory_Entry
VfMiscMmBuildMdlForNonPagedPool_Entry
VfMiscMmBuildMdlForNonPagedPool_Exit
VfMiscMmUnmapLockedPages_Entry
VfMiscObGetObjectSecurity_Entry
VfMiscObReferenceObjectByHandle_Exit
VfMiscObReferenceObjectByPointerWithTag_Entry
VfMiscObReferenceObjectByPointer_Entry
VfMiscObfDereferenceObjectWithTag_Entry
VfMiscObfDereferenceObject_Entry
VfMiscObfReferenceObjectWithTag_Entry
VfMiscObfReferenceObject_Entry
VfMiscObfReferenceObject_Exit
VfMiscPluginEntry
VfMiscPluginUnload
VfNotifyOfHibernate
VfNotifyVerifierOfEvent
VfObjectContextInit
VfPacketCreateAndLock
VfPacketFindAndLock
VfPacketReleaseLock
VfPendingFinishLogging
VfPendingInitPhase1
VfPendingMoreProcessingRequired
VfPendingShouldForce
VfPendingStartLogging
VfPnpAdvanceIrpStatus
VfPnpDumpIrpStack
VfPnpIsSystemRestrictedIrp
VfPnpTestStartedPdoStack
VfPnpVerifyIrpStackDownward
VfPnpVerifyIrpStackUpward
VfPnpVerifyNewRequest
VfPoolCheckForLeaks
VfPoolCheckIncorrectFreeApi
VfPoolDelayFreeIfPossible
VfPoolInitPhase1
VfPoolIsInternalFree
VfPoolTrackingEntry
VfPowerDumpIrpStack
VfPowerIsSystemRestrictedIrp
VfPowerTestStartedPdoStack
VfPowerVerifyIrpStackDownward
VfPowerVerifyIrpStackUpward
VfPowerVerifyNewRequest
VfProbeAndCaptureUnicodeString
VfProbeAndCaptureUnicodeStringBuffer
VfPtAddStackInfoIfNotExist
VfPtComparePoolInfoCallback
VfPtComparePoolStackInfoCallback
VfPtExAllocatePool2_Enter
VfPtExAllocatePool3_Exit
VfPtExAllocatePoolWithQuotaTag_Enter
VfPtExAllocatePoolWithQuota_Enter
VfPtExAllocatePoolWithTagPriority_Enter
VfPtExAllocatePoolWithTag_Enter
VfPtExAllocatePool_Enter
VfPtExFreePoolWithTag_Enter
VfPtExFreePool_Enter
VfPtFreePoolNotification
VfPtGenerateTraceInformation
VfPtIoAllocateMdl_Exit
VfPtIsAptEnabledOnKernel
VfPtMiscPoolNotification
VfPtMmAllocateContiguousMemoryEx_Exit
VfPtMmAllocateContiguousMemorySpecifyCacheNode_Exit
VfPtMmAllocateContiguousMemorySpecifyCache_Exit
VfPtMmAllocateContiguousMemory_Exit
VfPtMmAllocateContiguousNodeMemory_Exit
VfPtMmAllocateMappingAddressEx_Exit
VfPtMmAllocateMappingAddress_Exit
VfPtMmAllocateNodePagesForMdlEx_Exit
VfPtMmAllocateNonCachedMemory_Exit
VfPtMmAllocatePagesForMdlEx_Exit
VfPtMmAllocatePagesForMdl_Exit
VfPtMmCreateMdl_Exit
VfPtMmFreeContiguousMemory_Entry
VfPtMmFreeMappingAddress_Entry
VfPtMmFreeNonCachedMemory_Entry
VfPtProcessAllocPoolInfo
VfPtProcessFreePoolInfo
VfPutDmaAdapter
VfPutScatterGatherList
VfQueryDeviceContext
VfQueryDispatchTable
VfQueryDriverContext
VfQueryIrpContext
VfRandomGetNumber
VfReadDmaCounter
VfRemLockDeleteMemoryRange
VfRemLockReportBadReleaseAndWaitTag
VfRemLockReportBadReleaseTag
VfRemoveContext
VfRemoveVerifierEntry
VfReportIssueWithOptions
VfRlrsEntry
VfRlrsKeInjectStatusAlerted
VfRlrsVolatileConfigUpdate
VfSecurityEntry
VfSetVerifierInformation
VfSetVerifierInformationEx
VfSetVerifierRunningMode
VfSettingsApplyMiscellaneousChecks
VfSettingsCheckForChanges
VfSettingsMiscellaneousChecksInitPhase1
VfShutdownScheduleWatchdog
VfSpecialPoolEntry
VfStartBranchTracing
VfStopBranchTracing
VfSuspectApplyDifVolatileVerification
VfSuspectDifRemoveEntry
VfSuspectDriversAllocateEntry
VfSuspectDriversAllocateEntryEx
VfSuspectDriversGetVerifierInformation
VfSuspectDriversInsert
VfSuspectDriversIsLoaded
VfSuspectDriversLoadCallback
VfSuspectDriversLookupName
VfSuspectDriversParseRegistryString
VfSuspectDriversRemove
VfSuspectDriversUnloadCallback
VfSuspectExcludedDriversAllocateEntry
VfSuspectRemoveDifVolatileVerification
VfTargetDriversAdd
VfTargetDriversAllocateFullName
VfTargetDriversDisableVerifier
VfTargetDriversEnableVerifier
VfTargetDriversGetNode
VfTargetDriversGetVerifierData
VfTargetDriversGetZeroCounters
VfTargetDriversIsEnabled
VfTargetDriversRemove
VfTargetEtwRegister
VfTargetEtwUnregister
VfTargetFreeContiguousMemory
VfTargetRecoverIoCallbacks
VfTargetReplaceIoCallbacks
VfTargetWMIRegistrationControl
VfThunkAddDriverThunks
VfThunkAddSpecialDriverThunks
VfThunkAddTargetNotify
VfThunkApplyDriverAddedThunks
VfThunkApplyPristineToAllSession
VfThunkApplyThunksCurrentSession
VfThunkCheckDriverUnloading
VfThunkGetNumberOfWdmThunk
VfThunkRemoveTargetNotify
VfTrackResource
VfTriageSystem
VfUpdateWhitelist
VfUtilAddressRangeAdd
VfUtilAddressRangeFit
VfUtilAddressRangeFitNoLock
VfUtilAddressRangeRemove
VfUtilAddressRangeRemoveCheckEmpty
VfUtilCheckRuleEnforcement
VfUtilCrashEvent
VfUtilDbgPrint
VfUtilEqualUnicodeString
VfUtilFreePoolCheckIRQL
VfUtilFreePoolDispatchLevel
VfUtilGetDriverBaseAddress
VfUtilGetDriverFullName
VfUtilGetDriverImageSize
VfUtilGetDriverName
VfUtilGetOriginalAddDeviceCallback
VfUtilGetOriginalDriverInitCallback
VfUtilGetOriginalDriverUnloadCallback
VfUtilGetOriginalIrpMajorCallback
VfUtilGetOriginalStartIoCallback
VfUtilGetSigningLevel
VfUtilIsBootDriver
VfUtilIsLocalSystem
VfUtilIsProtectedDriver
VfUtilIsSignedDriver
VfUtilPrintCheckinString
VfVolatileApplyDifVerification
VfVolatileClearDifRuleClass
VfVolatileRemoveDifVerification
VfVolatileSetDifRuleClass
VfWdCheckForSettingsChange
VfWdInit
VfWdSetCancelTimeout
VfWmiDumpIrpStack
VfWmiTestStartedPdoStack
VfWmiVerifyIrpStackDownward
VfWmiVerifyIrpStackUpward
VfWmiVerifyNewRequest
VfXdvExcludeParseRegistryString
VfZwAccessCheckAndAuditAlarm_Entry
VfZwAddBootEntry_Entry
VfZwAddDriverEntry_Entry
VfZwAdjustPrivilegesToken_Entry
VfZwAllocateVirtualMemory_Entry
VfZwAlpcAcceptConnectPort_Entry
VfZwAlpcConnectPort_Entry
VfZwAlpcCreatePortSection_Entry
VfZwAlpcCreatePort_Entry
VfZwAlpcCreateResourceReserve_Entry
VfZwAlpcCreateSectionView_Entry
VfZwAlpcCreateSecurityContext_Entry
VfZwAlpcQueryInformation_Entry
VfZwAlpcSendWaitReceivePort_Entry
VfZwAlpcSetInformation_Entry
VfZwCancelIoFile_Entry
VfZwCancelTimer_Entry
VfZwCloseObjectAuditAlarm_Entry
VfZwCommitEnlistment_Entry
VfZwConnectPort_Entry
VfZwCreateDirectoryObject_Entry
VfZwCreateEnlistment_Entry
VfZwCreateEvent_Entry
VfZwCreateFile_Entry
VfZwCreateJobObject_Entry
VfZwCreateKey_Entry
VfZwCreateSection_Entry
VfZwCreateSymbolicLinkObject_Entry
VfZwCreateTimer_Entry
VfZwCreateTransactionManager_Entry
VfZwCreateTransaction_Entry
VfZwDeleteBootEntry_Entry
VfZwDeleteFile_Entry
VfZwDeleteValueKey_Entry
VfZwDeviceIoControlFile_Entry
VfZwDisplayString_Entry
VfZwDuplicateObject_Entry
VfZwDuplicateToken_Entry
VfZwEnumerateBootEntries_Entry
VfZwEnumerateDriverEntries_Entry
VfZwEnumerateKey_Entry
VfZwEnumerateValueKey_Entry
VfZwFlushInstructionCache_Entry
VfZwFlushVirtualMemory_Entry
VfZwFreeVirtualMemory_Entry
VfZwFsControlFile_Entry
VfZwLoadDriver_Entry
VfZwLoadKey_Entry
VfZwMapViewOfSection_Entry
VfZwModifyBootEntry_Entry
VfZwModifyDriverEntry_Entry
VfZwNotifyChangeKey_Entry
VfZwOpenDirectoryObject_Entry
VfZwOpenEnlistment_Entry
VfZwOpenEvent_Entry
VfZwOpenFile_Entry
VfZwOpenJobObject_Entry
VfZwOpenKey_Entry
VfZwOpenProcessTokenEx_Entry
VfZwOpenProcessToken_Entry
VfZwOpenProcess_Entry
VfZwOpenSection_Entry
VfZwOpenSymbolicLinkObject_Entry
VfZwOpenThreadTokenEx_Entry
VfZwOpenThreadToken_Entry
VfZwOpenThread_Entry
VfZwOpenTimer_Entry
VfZwOpenTransactionManager_Entry
VfZwOpenTransaction_Entry
VfZwPowerInformation_Entry
VfZwPrePrepareEnlistment_Entry
VfZwPrepareComplete_Entry
VfZwPrepareEnlistment_Entry
VfZwProtectVirtualMemory_Entry
VfZwPulseEvent_Entry
VfZwQueryBootEntryOrder_Entry
VfZwQueryBootOptions_Entry
VfZwQueryDefaultLocale_Entry
VfZwQueryDefaultUILanguage_Entry
VfZwQueryDirectoryFileEx_Entry
VfZwQueryDirectoryFile_Entry
VfZwQueryDirectoryObject_Entry
VfZwQueryDriverEntryOrder_Entry
VfZwQueryEaFile_Entry
VfZwQueryFullAttributesFile_Entry
VfZwQueryInformationEnlistment_Entry
VfZwQueryInformationFile_Entry
VfZwQueryInformationJobObject_Entry
VfZwQueryInformationProcess_Entry
VfZwQueryInformationThread_Entry
VfZwQueryInformationToken_Entry
VfZwQueryInformationTransactionManager_Entry
VfZwQueryInformationTransaction_Entry
VfZwQueryInstallUILanguage_Entry
VfZwQueryKey_Entry
VfZwQueryLicenseValue_Entry
VfZwQueryObject_Entry
VfZwQuerySection_Entry
VfZwQuerySecurityObject_Entry
VfZwQuerySymbolicLinkObject_Entry
VfZwQuerySystemInformation_Entry
VfZwQueryValueKey_Entry
VfZwQueryVolumeInformationFile_Entry
VfZwReadFile_Entry
VfZwRemoveIoCompletionEx_Entry
VfZwReplaceKey_Entry
VfZwRequestWaitReplyPort_Entry
VfZwResetEvent_Entry
VfZwRollbackEnlistment_Entry
VfZwSetBootEntryOrder_Entry
VfZwSetBootOptions_Entry
VfZwSetDriverEntryOrder_Entry
VfZwSetEaFile_Entry
VfZwSetEvent_Entry
VfZwSetInformationEnlistment_Entry
VfZwSetInformationFile_Entry
VfZwSetInformationJobObject_Entry
VfZwSetInformationObject_Entry
VfZwSetInformationProcess_Entry
VfZwSetInformationThread_Entry
VfZwSetInformationTransaction_Entry
VfZwSetSecurityObject_Entry
VfZwSetSystemInformation_Entry
VfZwSetSystemTime_Entry
VfZwSetTimer_Entry
VfZwSetValueKey_Entry
VfZwSetVolumeInformationFile_Entry
VfZwTranslateFilePath_Entry
VfZwUnloadDriver_Entry
VfZwUnloadKey_Entry
VfZwWaitForMultipleObjects_Entry
VfZwWaitForSingleObject_Entry
VfZwWriteFile_Entry
VhdAutoAttachVirtualDisks
VhdDeferredAutoAttachVirtualDisks
VhdInitialize
VhdVerifyBootDisk
VhdiAutoAttachOneVhd
VhdiGetDiskParameters
VhdiGetVolumeNumber
VhdiInitializeBootDisk
VhdiMountVhdFile
VhdiQueryVolumeVhdFilePath
ViAdapterCallback
ViAddVerifierSpecialThunks
ViAddVerifierThunks
ViAllocateContextTable
ViAllocateContiguousMemory
ViAllocateFromContiguousMemory
ViAllocateMapRegisterFile
ViAllocateMapRegistersFromFile
ViAvlAcquireTableLockAtDpcLevel
ViAvlAcquireTableLockAtDpcLevelSafe
ViAvlAllocateNode
ViAvlCompareNode
ViAvlRaiseIrqlSafe
ViAvlReleaseTableLockFromDpcLevel
ViAvlTableIndex
ViBindDifThunkNormal
ViCheckAdapterBuffers
ViCheckDifDdiExist
ViCheckMdlLength
ViCheckPadding
ViCheckTag
ViCopyBackModifiedBuffer
ViCopyDeviceDescription
ViCreateProcessCallbackInternal
ViCtxAllocateIsrContext
ViCtxCaptureInitialIsrState
ViCtxCheckAndReleaseIsrState
ViCtxEqualExtendedState
ViCtxIsr
ViCtxIsrMessageBased
ViCtxSetPrivateConnectParameters
ViDdiBuildWmiRegInfoData
ViDdiDispatchWmi
ViDdiDispatchWmiQueryAllData
ViDdiDispatchWmiRegInfoEx
ViDdiDriverEntry
ViDeadlockAddParticipant
ViDeadlockAddResource
ViDeadlockAddThread
ViDeadlockAllocate
ViDeadlockAnalyze
ViDeadlockCanProceed
ViDeadlockCertify
ViDeadlockCheckDuplicatesAmongChildren
ViDeadlockCheckDuplicatesAmongRoots
ViDeadlockCheckStackLimits
ViDeadlockDatabaseHashIndex
ViDeadlockDetectionApplySettings
ViDeadlockDetectionLock
ViDeadlockDetectionTryConvertSharedToExclusive
ViDeadlockDetectionUnlock
ViDeadlockEmptyDatabase
ViDeadlockExAcquireFastMutexUnsafe_Exit
ViDeadlockExAcquireFastMutex_Exit
ViDeadlockExAcquireResourceExclusiveLite_Exit
ViDeadlockExAcquireResourceSharedLite_Exit
ViDeadlockExAcquireSharedStarveExclusive_Exit
ViDeadlockExAcquireSharedWaitForExclusive_Exit
ViDeadlockExEnterCriticalRegionAndAcquireResourceExclusive_Exit
ViDeadlockExEnterCriticalRegionAndAcquireResourceShared_Exit
ViDeadlockExEnterPriorityRegionAndAcquireResourceExclusive_Exit
ViDeadlockExEnterPriorityRegionAndAcquireResourceShared_Exit
ViDeadlockExReleaseFastMutexUnsafe_Entry
ViDeadlockExReleaseFastMutex_Entry
ViDeadlockExTryToAcquireFastMutex_Exit
ViDeadlockForgetResourceHistory
ViDeadlockFree
ViDeadlockKeAcquireInStackQueuedSpinLockAtDpcLevel_Exit
ViDeadlockKeAcquireInStackQueuedSpinLockForDpc_Exit
ViDeadlockKeAcquireInStackQueuedSpinLockRaiseToSynch_Exit
ViDeadlockKeAcquireInStackQueuedSpinLock_Exit
ViDeadlockKeAcquireSpinLockAtDpcLevel_Exit
ViDeadlockKeAcquireSpinLockRaiseToDpc_Exit
ViDeadlockKeInitializeMutant_Exit
ViDeadlockKeInitializeMutex_Exit
ViDeadlockKeReleaseInStackQueuedSpinLockForDpc_Entry
ViDeadlockKeReleaseInStackQueuedSpinLockFromDpcLevel_Entry
ViDeadlockKeReleaseInStackQueuedSpinLock_Entry
ViDeadlockKeReleaseMutant_Entry
ViDeadlockKeReleaseMutex_Entry
ViDeadlockKeReleaseSpinLockFromDpcLevel_Entry
ViDeadlockKeReleaseSpinLock_Entry
ViDeadlockKeTryToAcquireSpinLockAtDpcLevel_Exit
ViDeadlockKeWaitForMultipleObjects_Exit
ViDeadlockKeWaitForSingleObject_Exit
ViDeadlockKernelVerifierLookasideAllocate
ViDeadlockMergeNodes
ViDeadlockObjectAcquired
ViDeadlockPluginUnload
ViDeadlockPopulateLookasideCache
ViDeadlockPreprocessOptions
ViDeadlockRemoveMemoryRangeResources
ViDeadlockRemoveMemoryRangeThreads
ViDeadlockRemoveNode
ViDeadlockRemoveResource
ViDeadlockRemoveThread
ViDeadlockSearchResource
ViDeadlockSearchThread
ViDeadlockSimilarNode
ViDeadlockSimilarNodes
ViDeadlockUpdateChildrenCount
ViDevObjAdd
ViDevObjDelayFreeAvlNode
ViDevObjRemove
ViDifCaptureDriverEntry
ViDifCaptureIoCallbacks
ViDifCheckCallbackInterception
ViDifFindIoCallbackContext
ViDisableVerification
ViDmaInit
ViDmaUninit
ViDriverReApplyVerifierForAll
ViErrorDisplayDescription
ViErrorFinishReport
ViErrorIsBreakDisabled
ViErrorReport1
ViErrorReport10
ViErrorReport4
ViErrorReport6
ViFaultsAddAppNoDuplicates
ViFaultsAddTagNoDuplicates
ViFaultsInjectionNotification
ViFaultsIsAppTarget
ViFaultsIsCurrentAppTarget
ViFaultsIsTagPresentInList
ViFilterAddDevice
ViFilterDeviceUsageNotificationCompletion
ViFilterDispatchGeneric
ViFilterDispatchPnp
ViFilterDispatchPower
ViFilterDriverEntry
ViFilterGenericCompletionRoutine
ViFilterIsDeviceExcluded
ViFilterRemoveNotificationCompletion
ViFilterStartCompletionRoutine
ViFilterYieldInitialization
ViFindMappedRegisterInFile
ViFindTriageRule
ViFlushDoubleBuffer
ViFlushZeroMapRegisterBaseWcbs
ViFreeContextTable
ViFreeMapRegisterFile
ViFreeMapRegistersToFile
ViFreeToContiguousMemory
ViFreeTrackedPool
ViGenericBuildIrpLogEntry
ViGenericDumpIrpStack
ViGenericIsNewRequest
ViGenericIsValidIrpStatus
ViGenericVerifyFinalIrpStack
ViGenericVerifyIrpStackDownward
ViGenericVerifyIrpStackUpward
ViGenericVerifyNewIrp
ViGenericVerifyNewRequest
ViGetAdapterInformation
ViGetAdapterInformationInternal
ViGetAdapterSignature
ViGetContextPointer
ViGetMapRegisterFile
ViGetMdlBufferSa
ViGetRealDmaAdapter
ViGrowPoolAllocation
ViHalFreeDomainCommonBuffer
ViHalPreprocessOptions
ViHalTrackDomainCommonBuffer
ViHasBufferBeenTouched
ViHookDmaAdapter
ViInitPickRandomTargets
ViInitSystemPhase0
ViInitializeLocalSystemDescriptor
ViInitializePadding
ViIoCallbackSnapState
ViIoInitializeTimer_Entry
ViIovAllocateIrpEx_Entry
ViIovAllocateIrp_Entry
ViIovExFreePoolWithTag_Entry
ViIovExFreePool_Entry
ViIovFreeIrp_Entry
ViIovInitialization
ViIovIoAcquireRemoveLockEx_Entry
ViIovIoBuildAsynchronousFsdRequest_Exit
ViIovIoBuildDeviceIoControlRequest_Exit
ViIovIoBuildSynchronousFsdRequest_Exit
ViIovIoInitializeRemoveLockEx_Entry
ViIovIoReleaseRemoveLockAndWaitEx_Entry
ViIovIoReleaseRemoveLockEx_Entry
ViIovPluginUnload
ViIrpAllocateLockedPacket
ViIrpCheckKernelAddressForIrp
ViIrpDatabaseAcquireLockExclusive
ViIrpDatabaseAcquireLockShared
ViIrpDatabaseFindPointer
ViIrpDatabaseReleaseLockExclusive
ViIrpDatabaseReleaseLockShared
ViIrpLogDatabaseFindPointer
ViIrpLogExposeWmiCallback
ViIrpSynchronousCompletionRoutine
ViIrqlExAcquireFastMutex_Exit
ViIrqlExTryToAcquireFastMutex_Exit
ViIrqlInit
ViIrqlKeEnterCriticalRegion_Exit
ViIrqlKeLeaveCriticalRegion_Entry
ViIrqlLogCRStackTrace
ViIrqlPluginUnload
ViIsActiveChannelWcb
ViIsBTSSupported
ViIsContextIdValid
ViIsDriverSuspectForVerifier
ViIsThreadInsidePagingCodePaths
ViKeAcquireSpinLockCommon
ViKeIrqlLogAndTrimMemory
ViKeIrqlLogCommon
ViLockContextPointer
ViLogAndLoadXdv
ViLookasideDelayFreeAvlNode
ViLowerIrql
ViMakeVerifierSettings
ViMapDoubleBuffer
ViMiscCheckKeLowerIrql
ViMiscCheckKeRaiseIrql
ViMiscCheckReleaseSpinlock
ViMiscCheckResourceAcquire
ViMiscCheckResourceRelease
ViMiscEnforceRule
ViMiscExCheckAPCsDisabled
ViMiscValidateKeWaitUsage
ViMiscValidateSynchronizationObject
ViPacketNotificationCallback
ViPendingCompleteAfterWait
ViPendingCompleteAtDPC
ViPendingDelayCompletion
ViPendingQueuePassiveLevelCompletion
ViPendingWorkerThread
ViPnpVerifyMinorWasProcessedProperly
ViPoolDelayFreeTrimThreadRoutine
ViPostPoolAllocation
ViPtAcquireTreeLockAtDpcLevelSafe
ViPtAllocPoolInfoCallback
ViPtAllocPoolStackInfoCallback
ViPtCaptureStackTrace
ViPtCaptureStackTraceCallout
ViPtCaptureTraceInformationCallBack
ViPtCleanupLockContext
ViPtDeleteAvlTrees
ViPtFreePoolInfoEntryCallback
ViPtFreeStackInfoEntryCallback
ViPtInitAvlTrees
ViPtInitCircularPoolTrace
ViPtInitializeLockContext
ViPtLogPoolTrace
ViPtLogPoolTraceWrapper
ViPtPluginUnload
ViPtProcessApt
ViPtRaiseIrqlSafe
ViPtReleaseTreeLockFromDpcLevel
ViQueryObjectContext
ViRaiseIrqlToDpcLevel
ViReleaseDmaAdapter
ViRemLockDelayFreeAvlNode
ViRemLockDeleteFirstTreeNode
ViRemLockFindSurrogate
ViRemoveChannelWcb
ViResourceDelayFreeNode
ViRlrsMmMapLockedPages_Entry
ViRlrsMmProbeAndLockPages_Entry
ViRlrsMmProbeAndLockProcessPages_Entry
ViRlrsUnload
ViScatterGatherCallback
ViSetIoBuildRequestFlag
ViSettingsEnableKernelHandleChecking
ViSettingsIoCheckForChanges
ViSetupBTSPerProcNoEnable
ViShutdownScheduleWatchdog
ViShutdownWatchdogExecuteDpc
ViSpExAllocatePool2_Enter
ViSpExAllocatePool3_Enter
ViSpExAllocatePoolWithQuotaTag_Enter
ViSpExAllocatePoolWithQuota_Enter
ViSpExAllocatePoolWithTagPriority_Enter
ViSpExAllocatePoolWithTag_Enter
ViSpExAllocatePool_Enter
ViSpExFreePoolWithTag_Enter
ViSpExFreePool_Enter
ViSpIoAllocateIrp_Exit
ViSpIoAllocateMdl_Exit
ViSpIoSetCompletionRoutineEx_Exit
ViSpMmMapIoSpace_Entry
ViSpMmMapLockedPagesSanityChecks
ViSpMmMapLockedPagesSpecifyCache_Entry
ViSpMmMapLockedPages_Entry
ViSpMmProbeAndLockPages_Entry
ViSpMmProbeAndLockProcessPages_Entry
ViSpRtlAnsiStringToUnicodeString_Exit
ViSpRtlCreateUnicodeString_Exit
ViSpRtlDowncaseUnicodeString_Exit
ViSpRtlDuplicateUnicodeString_Exit
ViSpRtlOemStringToCountedUnicodeString_Exit
ViSpRtlOemStringToUnicodeString_Exit
ViSpRtlReplaceStringBuffer
ViSpRtlUnicodeStringToAnsiString_Exit
ViSpRtlUnicodeStringToCountedOemString_Exit
ViSpRtlUnicodeStringToOemString_Exit
ViSpRtlUpcaseUnicodeStringToAnsiString_Exit
ViSpRtlUpcaseUnicodeStringToCountedOemString_Exit
ViSpRtlUpcaseUnicodeStringToOemString_Exit
ViSpRtlUpcaseUnicodeString_Exit
ViSpecialAllocateCommonBuffer
ViSpecialFreeCommonBuffer
ViSuspectDriversLookupEntry
ViSwap
ViTagBuffer
ViTargetAddCountersCallback
ViTargetAddToCounter
ViTargetDelayFreeAvlNode
ViTargetDriversAllocateVerifiedData
ViTargetDriversFreeVerifiedData
ViTargetFreeContiguousMemoryCallback
ViTargetFreeContiguousMemoryFromNode
ViTargetRemovingCheckContiguousMemory
ViTargetRemovingCheckEtwWmi
ViTargetUpdateTreeAllowed
ViTargetWMIDeregister
ViTargetWMIDeregisterCallback
ViThunkApplyPristineCurrentSession
ViThunkApplyWdmThunksCurrentSession
ViThunkCreateSharedExportInformation
ViThunkCreateThunkTable
ViThunkFindAllExportAddresses
ViThunkFindAllSharedExports
ViThunkFindAllSpecialTables
ViThunkFindAllThunkedImports
ViThunkFindDriverImportEntry
ViThunkFindExportAddress
ViThunkFindNextSpecialTable
ViThunkFindSharedExports
ViThunkFreeSharedThunksArray
ViThunkGetPristine
ViThunkGetWdmThunk
ViThunkHookExportAddress
ViThunkRecoverPristines
ViThunkRemoveImportEntry
ViThunkReplaceAllThunkedImports
ViThunkReplaceIatEntryForClassDriverThunk
ViThunkReplaceIatEntryForWdmThunk
ViThunkReplacePristine
ViThunkReplaceSharedExports
ViThunkSnapSharedExportByName
ViThunkSnapSharedExports
ViTriageSameDriversFromDump
ViUnbindDifThunk
ViUnlockContextPointer
ViValidateTriageRules
ViWdBeforeCallDriver
ViWdBeforeCancelIrp
ViWdIrpBeforeCompletionRoutine
ViWdIrpTimerDpcRoutine
ViWdStartTimer
ViXdvDriverLoadImage
ViXdvGetFuncAddress
ViXdvSetXdvKernelUtilities
ViZwCheckApcRequirement
ViZwCheckObjectAttributes
ViZwCheckUnicodeString
ViZwCheckVirtualAddress
ViZwShouldCheck
VmAccessFault
VmCallSkSvc
VmCheckLargePageInswap
VmCheckPageCombine
VmCleanProcessAddressSpace
VmColdPagesHint
VmCreateMemoryProcess
VmCreateMemoryRange
VmDeleteMemoryRange
VmFlushTb
VmFreePreallocationForRangeCreate
VmInitSystem
VmInitializeProcessor
VmMapSectionExecuteNoAcg
VmMergeMemoryRanges
VmPauseResumeNotify
VmPinMemoryRange
VmPreallocateForRangeCreate
VmPrefetchVirtualAddresses
VmProbeAndLockPages
VmSecureBackingMemory
VmSetTestMode
VmSetThreadSchedulerAssist
VmSetVpHostProcess
VmSplitMemoryRange
VmTerminateMemoryProcess
VmUnlockPages
VmUnpinMemoryRange
VmUnsecureBackingMemory
VmUpdateCommitMemoryRange
VmpAccessFaultBatch
VmpAccessFaultBatchResolve
VmpAcquirePushLockExclusive
VmpAcquirePushLockShared
VmpAllocateMemoryRanges
VmpAllocatePinnedRanges
VmpCheckPinAndReference
VmpCheckPinTooLate
VmpCheckUnpinAndDereference
VmpConvertPortionVpnRangeToGpnRange
VmpCountNewPinnedRangesNeeded
VmpDecodePreallocationRangeHandle
VmpDereferencePinInProgress
VmpFaultEntryInsert
VmpFaultEntryRemove
VmpFillGpnRanges
VmpFillSlat
VmpFillValidFaultInfo
VmpFindNextPinnedPageStateHelper
VmpFlushTbVaRange
VmpFreeGpaMemoryRange
VmpFreeMemoryRanges
VmpInsertInvalidateListRange
VmpInsertMemoryRange
VmpInvalidateOutstandingFaults
VmpInvalidateSingleGpaRange
VmpInvalidateSlatBatched
VmpLogAccessFault
VmpLogAccessFaultRange
VmpLogColdHint
VmpLogCreateDeleteMemoryRange
VmpLogCreateMemoryProcess
VmpLogFaultResolveFailure
VmpLogLargeSlatFill
VmpLogPin
VmpLogQueryAccessedState
VmpLogSparseSlatFill
VmpLogSplitMergeMemoryRange
VmpLogTbFlushSlatFlushEntire
VmpLogTbFlushSlatInvalidate
VmpLogTbFlushSlatInvalidateInsert
VmpMergeMemoryRanges
VmpPauseResumeNotify
VmpPinMemoryRange
VmpPrefetchForVirtualFault
VmpPrefetchVirtualAddresses
VmpPrefetchWorker
VmpProcessAccessedBatch
VmpProcessContextCleanup
VmpProcessContextLockExclusive
VmpProcessContextLockShared
VmpProcessContextSetup
VmpProcessContextUnlockExclusive
VmpProcessContextUnlockShared
VmpProcessInvalidateList
VmpProcessUpdateSlat
VmpQueryAccessedState
VmpRefDerefPinnedPages
VmpReleasePushLockExclusive
VmpReleasePushLockShared
VmpRemoveMemoryRange
VmpSecureMemoryForPin
VmpSplitMemoryRange
VmpTracingEnabledCallback
VmpUnpinMemoryRange
VmpUnpinMemoryRangeHelper
VmpUnsecureMemoryForPin
VmpUpdateCommitStateMemoryRange
VmpUpdatePinRangesForFirstPin
VmpVaMemoryRangeGetNext
VmpVaRangeCheckPinnedGpaRanges
VmpVaRangeNumberOfGpaRanges
VmpValidateMemoryRangeParameters
VrpAddNamespaceNodeToList
VrpAllocateDiffHiveEntry
VrpAllocateKeyContext
VrpBecomeDiffHiveEntryTransitionOwner
VrpBuildKeyPath
VrpCleanupNamespace
VrpCountPathComponents
VrpCreateNamespaceNode
VrpCreateNamespaceNodePlaceholderKey
VrpDecommissionKeyContext
VrpDecrementDiffHiveEntryHardRefCount
VrpDecrementSiloCount
VrpDereferenceDiffHiveEntry
VrpDereferenceDiffHiveEntryWithLock
VrpDereferenceJobContext
VrpDestroyNamespaceNode
VrpDestroyNamespaceNodeList
VrpFindBestMatchNamespaceNode
VrpFindDiffHiveEntryForMountPoint
VrpFindDiffHiveEntryForMountPointWithLock
VrpFindExactNamespaceNode
VrpFindNamespaceNode
VrpFindOrCreateDiffHiveEntryForMountPoint
VrpFreeCallbackContext
VrpFreeKeyContext
VrpGetNextToken
VrpHandleIoctlCreateMultipleNamespaceNodes
VrpHandleIoctlCreateNamespaceNode
VrpHandleIoctlGetVirtualRootKey
VrpHandleIoctlInitializeJobForVreg
VrpHandleIoctlLoadDifferencingHive
VrpHandleIoctlLoadDifferencingHiveForHost
VrpHandleIoctlModifyFlags
VrpHandleIoctlUnloadDifferencingHiveForHost
VrpHandleIoctlUnloadDynamicallyLoadedHives
VrpIncrementDiffHiveEntryHardRefCount
VrpIncrementSiloCount
VrpInitializeLoadedDifferencingHives
VrpIoctlDeviceDispatch
VrpJobContextDelete
VrpLoadDifferencingHive
VrpLockDiffHiveEntry
VrpLockDiffHiveTableExclusive
VrpLockDiffHiveTableShared
VrpLockJobContextExclusive
VrpLockJobContextShared
VrpOriginalKeyNameParameterCleanup
VrpOutputBufferParameter
VrpPostEnumerateKey
VrpPostOpenOrCreate
VrpPostQueryKey
VrpPreLoadKey
VrpPreOpenOrCreate
VrpPreQueryKeyName
VrpRegistryCallback
VrpRegistryDispatch
VrpRegistryUnload
VrpRelinquishDiffHiveEntryTransitionOwner
VrpShouldOperateOnCall
VrpStripTrailingCharacters
VrpTranslatePath
VrpUnloadDifferencingHive
VrpUnlockDiffHiveEntry
VrpUnlockDiffHiveTable
VrpUnlockJobContextExclusive
VrpUnlockJobContextShared
VrpUpdateKeyInformation
VrpWaitForDiffHiveEntryTransitionOwnerToLeave
VslAbortLiveDump
VslAccessPciDevice
VslAllocateKernelShadowStack
VslAllocatePool
VslAllocateSecureHibernateResources
VslApplyDynamicRelocations
VslApplyHotPatch
VslApplySecureImageFixups
VslBindNtIum
VslCallEnclave
VslCaptureImageHotPatchMetadata
VslCapturePgoData
VslCaptureSecureImageIat
VslCloseSecureHandle
VslCollectLiveDumpInSk
VslCompleteSecureDriverLoad
VslConfigureDynamicMemory
VslConfigureSecureAtsDevice
VslConnectSwInterrupt
VslCopyProtectedPage
VslCreateEnclave
VslCreateSecureAllocation
VslCreateSecureImageSection
VslCreateSecureProcess
VslCreateSecureSection
VslCreateSecureThread
VslDebugProtectSecureProcessMemory
VslDebugReadWriteSecureProcess
VslDeleteSecureSection
VslDetermineHotPatchType
VslEnableKernelCfgTarget
VslEnableOnDemandDebugWithResponse
VslExchangeEntropy
VslExecuteWorkItems
VslExemptSecurePteRange
VslFastFlushSecureRangeList
VslFillSecureAllocation
VslFinalizeLiveDumpInSk
VslFinalizeSecureImageHash
VslFinishSecureImageValidation
VslFinishStartSecureProcessor
VslFlushEntireTb
VslFlushSecureAddressSpace
VslFreeKernelShadowStack
VslFreePoolTransferObject
VslFreeSecureHibernateResources
VslFreeSecureImageIat
VslGetEtwDebugId
VslGetNestedPageProtectionFlags
VslGetOnDemandDebugChallenge
VslGetSecurePageList
VslGetSecurePciDeviceAlternateFunctionNumberForVtl0Dma
VslGetSecurePciDeviceBootConfiguration
VslGetSecurePciEnabled
VslGetSecurePebAddress
VslGetSecureSpeculationControlInformation
VslGetSecureTebAddress
VslHandleKsrCall
VslInitFunctionOverrideCapabilities
VslInitializeEnclave
VslInitializeSecureKernelCfg
VslInitializeSecurePool
VslInitializeSecureProcess
VslIsEncryptionKeyAvailable
VslIsSecureKernelRunning
VslIsTrustletRunning
VslIumEfiRuntimeService
VslIumEtwEnableCallback
VslKernelShadowStackAssist
VslLiveDumpCaptureProcess
VslLiveDumpQuerySecondaryDataSize
VslLoadEnclaveData
VslLoadEnclaveModule
VslMakeCodeCatalog
VslMakeProtectedPageExecutable
VslMapKernelScpPages
VslNotifyShutdown
VslObtainHotPatchUndoTable
VslPrepareDriverForPatch
VslPrepareSecureImageRelocations
VslProvisionDumpEncryption
VslQueryActiveSecurePatches
VslQueryPrivilegedAccessedState
VslQuerySecureDevice
VslQuerySecureKernelProfileInformation
VslQueryTrustedAppRuntimeInformation
VslQueryVirtualMemory
VslReapplyBootIndirectPatches
VslReapplyImportOptimizationForDriverVerifier
VslReclaimPartitionPages
VslRegisterBootDrivers
VslRegisterIumPowerCallbacks
VslRegisterLogPages
VslRegisterSecurePatch
VslRegisterSecureSystemProcess
VslRegisterSyscallProviderServiceTableMetadata
VslRelaxQuotas
VslRelocateImage
VslReportBugCheckProgress
VslRequestSecureKernelDebuggerBreakIn
VslRequestSecureThreadExit
VslReserveProtectedPages
VslResetKernelShadowStack
VslRetrieveMailbox
VslRevokeSyscallProviderServiceTables
VslRundownSecureProcess
VslSecurePoolAllocate
VslSecurePoolDestroy
VslSecurePoolFree
VslSecurePoolUpdate
VslSendDebugAttachNotifications
VslSetCodeIntegrityPolicy
VslSetPlaceholderPages
VslSlowFlushSecureRangeList
VslStartSecurePageIteration
VslStartSecureProcessor
VslStartSecureThread
VslSvcEnterIumSecureMode
VslSwapHiberShadowStacks
VslSynchronizeXSave
VslTerminateSecureThread
VslTestRoutine
VslTransferSecureImageVersionResource
VslTransformDumpKey
VslUnloadSecureDriver
VslUpdateFreezeTimeBias
VslValidateDynamicCodePages
VslValidateSecureImagePages
VslVerifyPage
VslWriteProtectedPage
VslpAddLiveDumpBufferChunk
VslpConnectedStandbyPoCallback
VslpConnectedStandbyWnfCallback
VslpDispatchIumSyscall
VslpEnterIumSecureMode
VslpGetNestedPageProtectionFlags
VslpIumInitializeTelemetry
VslpIumPhase0Initialize
VslpIumPhase4Initialize
VslpKsrEnterIumSecureMode
VslpLiveDumpStart
VslpLockMdlForTransfer
VslpLockPagesForTransfer
VslpRecordBootRanges
VslpRegisterKsrCallback
VslpSecureKernelPeriodicTick
VslpSetupLiveDumpBuffer
VslpUnlockPagesForTransfer
WMIInitialize
WRITE_PORT_UCHAR
WRITE_PORT_ULONG
WRITE_PORT_USHORT
WRITE_PORT_USHORT_PAIR
WRITE_REGISTER_UCHAR
WRITE_REGISTER_ULONG
WRITE_REGISTER_ULONG64
WRITE_REGISTER_USHORT
WbDisableTracing
WbGetWowTrapFrame
WbHeapExecutionUnloadModule
WbSetWowTrapFrame
WdHwCreateHardwareRegister
WdHwDestroyHardwareRegister
WdHwpReadPortUChar
WdHwpReadPortULong
WdHwpReadPortUShort
WdHwpReadRegisterUChar
WdHwpReadRegisterULong
WdHwpReadRegisterUShort
WdHwpWritePortUChar
WdHwpWritePortULong
WdHwpWritePortUShort
WdHwpWriteRegisterUChar
WdHwpWriteRegisterULong
WdHwpWriteRegisterUShort
WdInstrDestroyInstruction
WdInstrExecuteAction
WdInstrExecuteInstruction
WdInstrInitializeInstruction
WdiDispatchControl
WdiUpdateSem
WdipAccessCheck
WdipSemActivateInstance
WdipSemAddContextEventToScenario
WdipSemAddEndEventToScenario
WdipSemAddScenarioToTable
WdipSemAllocatePool
WdipSemBuildScenarioInstance
WdipSemCaptureState
WdipSemCleanStart
WdipSemCleanupGroupPolicy
WdipSemClearFrequentScenarioTable
WdipSemDeleteTransitionalInstance
WdipSemDisableAllProviders
WdipSemDisableContextProvider
WdipSemDisableContextProviders
WdipSemDisableScenario
WdipSemEnableAllProviders
WdipSemEnableContextProvider
WdipSemEnableContextProviders
WdipSemEnableDisableTrace
WdipSemEnableScenario
WdipSemEnableSemProvider
WdipSemFastAllocate
WdipSemFastFree
WdipSemFreeFrequentScenarioTable
WdipSemFreePool
WdipSemFreeScenario
WdipSemGetGuidKey
WdipSemGetLoggerIds
WdipSemInitialize
WdipSemInitializeGlobalState
WdipSemLoadConfigInfo
WdipSemLoadGroupPolicy
WdipSemLoadLocalGroupPolicy
WdipSemLoadNextContextProvider
WdipSemLoadNextEndEvent
WdipSemLoadNextScenario
WdipSemLoadScenarioTable
WdipSemLogInflightLimitExceededInformation
WdipSemLogTimeoutInformation
WdipSemMarkInstanceForDeletion
WdipSemMarkNextTimedOutInstanceForDeletion
WdipSemMergeEvents
WdipSemMergeScenarios
WdipSemOpenRegistryKey
WdipSemQueryEnabledInstanceTable
WdipSemQueryScenarioTable
WdipSemQueryValueFromRegistry
WdipSemReserveInstanceTableEntry
WdipSemRollBackProviderTable
WdipSemShutdown
WdipSemSqmAddToStream
WdipSemSqmEnabled
WdipSemSqmIncrementDword
WdipSemSqmInit
WdipSemSqmLogInflightLimitExceededDataPoints
WdipSemSqmLogTimeoutDataPoints
WdipSemStartTimeoutCheck
WdipSemUpdate
WdipSemUpdateFrequentScenarioTable
WdipSemUpdateInflightScenarioTable
WdipSemUpdateProviderEntryForEvent
WdipSemUpdateProviderTableWithEvent
WdipSemValidateEndEvent
WdipSemWriteEvent
WdipSemWriteInflightLimitExceededEvent
WdipSemWriteMisconfigEvent
WdipSemWriteScenarioLimitExceededEvent
WdipSemWriteSemActionsEvent
WdipSemWriteSemFailureEvent
WdipSemWriteTimeoutEvent
WdipStartEndScenario
WdipTimeoutCheckRoutine
WdipTimeoutTimerRoutine
WdtpAllocateTimer
WdtpArmTimer
WdtpBarkWorkerThread
WdtpCancelTimer
WdtpTimerCallback
WheaAddErrorSource
WheaAddErrorSourceDeviceDriver
WheaAddErrorSourceDeviceDriverV1
WheaAddHwErrorReportSectionDeviceDriver
WheaAddressTranslateAndAddToDefectList
WheaAttemptClearPoison
WheaAttemptPhysicalPageOffline
WheaAttemptRowOffline
WheaConfigureErrorSource
WheaCrashDumpInitializationComplete
WheaCreateHwErrorReportDeviceDriver
WheaDeferredRecoveryService
WheaEnterCriticalState
WheaErrorSourceGetState
WheaExitCriticalState
WheaFlushETWEventsAddWorkRtn
WheaFlushETWEventsDpcRoutine
WheaFlushETWEventsDpcWorkerInit
WheaFlushETWEventsWorkerRoutine
WheaGetCurrentProcessName
WheaGetErrPacketFromErrRecord
WheaGetErrorSource
WheaGetErrorSourceInfo
WheaGetNotifyAllOfflinesPolicy
WheaHighIrqlLogSelEventHandlerRegister
WheaHighIrqlLogSelEventHandlerUnregister
WheaHwErrorReportAbandonDeviceDriver
WheaHwErrorReportGetLogDataBufferDeviceDriver
WheaHwErrorReportMarkAsCriticalDeviceDriver
WheaHwErrorReportSetFatalSeverityDeviceDriver
WheaHwErrorReportSetSectionNameDeviceDriver
WheaHwErrorReportSetSeverityDeviceDriver
WheaHwErrorReportSubmitDeviceDriver
WheaInitialize
WheaInitializeDeferredRecoveryObject
WheaInitializeProcessor
WheaInitializeRecordHeader
WheaInitializeRegChangeNotify
WheaInitializeServices
WheaIsAltContextAllocPossible
WheaIsCriticalState
WheaIsLogSelHandlerInitialized
WheaLogInternalEvent
WheaPageOfflineAndPersist
WheaPersistBadPageToBcd
WheaPersistBadPageToRegistry
WheaPrmTranslateDimmAddress
WheaPrmTranslatePhysicalAddress
WheaProcessWaitingETWEvents
WheaQuerySystemInformation
WheaRecoveryBugCheck
WheaRegChangeNotifyCallback
WheaRegisterErrorSourceOverride
WheaRegisterInUsePageOfflineNotification
WheaRemoveErrorSource
WheaRemoveErrorSourceDeviceDriver
WheaReportFatalHwErrorDeviceDriverEx
WheaReportHwError
WheaReportHwErrorDeviceDriver
WheaReportHwErrorDeviceDriverEx
WheaRequestDeferredRecovery
WheaResumedFromHibernate
WheaSelLogCheckPoint
WheaSelLogError
WheaSelLogErrorPkt
WheaSelLogEvent
WheaSelLogInitialize
WheaSelLogSetNtSchedulerAvailability
WheaSignalHandlerOverride
WheaTerminateProcess
WheaUnconfigureErrorSource
WheaUnregisterErrorSourceOverride
WheaUnregisterInUsePageOfflineNotification
WheaWmiDispatch
WheaWritePolicyValueToRegistry
WheapAddErrorSource
WheapAddRecoveryPacketToErrorRecord
WheapAddSectionFromGenericErrorData
WheapAddToDumpFile
WheapAllocErrorRecord
WheapApplyThresholdChecks
WheapAttemptArchitecturalErrorRecovery
WheapAttemptErrorRecovery
WheapAttemptPhysicalPageOffline
WheapAttemptPhysicalPageOfflineWorker
WheapCallErrorSourceCorrect
WheapCallErrorSourceCreateRecord
WheapCallErrorSourceInitialize
WheapCallErrorSourceUninitialize
WheapCallInUsePageNotificationCallbacks
WheapCheckForAndReportErrorsFromPreviousSession
WheapClearPoison
WheapCompressErrorRecord
WheapCorrectErrorSourceDeviceDriver
WheapCountBadPageExtents
WheapCreateLiveDumpFromPreviousSession
WheapCreatePerProcessorInfo
WheapCreateRecordFromGenericErrorData
WheapDefaultErrSrcCorrect
WheapDefaultErrSrcCreateRecord
WheapDefaultErrSrcInitialize
WheapDefaultErrSrcRecover
WheapDefaultErrSrcUninitialize
WheapDefaultInitDeviceDriver
WheapDeferredRecoveryServiceDpcRoutine
WheapDeferredRecoveryServiceWorker
WheapDeviceDriverCreateRecord
WheapDeviceDriverGetPacketLength
WheapErrDescIsDeviceDriver
WheapErrorHandleIsValid
WheapEtwEnableCallback
WheapExecuteRowFailureCheck
WheapFormatBadPageList
WheapFreeDriverPacketBuffer
WheapFreeErrorRecord
WheapGenerateETWErrorRecord
WheapGenerateETWErrorRecordLarge
WheapGenerateETWEvents
WheapGenericErrSrcRecover
WheapGetAllPolicyBufferSize
WheapGetAllPolicyValues
WheapGetErrorSource
WheapGetErrorSourceFunction
WheapGetPolicyValue
WheapGetPreallocatedPacketBuffer
WheapGetTimestamp
WheapHighIrqlLogSelEventHandlerAcquireLock
WheapInitErrorReportDeviceDriver
WheapInitWnfCallbacks
WheapInitializeDeferredErrorSources
WheapInitializeErrorRecordWrapper
WheapInitializeErrorSource
WheapInitializeErrorSourceTable
WheapInitializeEventing
WheapInitializeInUsePageOfflineNotifications
WheapInsertPageToList
WheapIsErrorSourceTypeAddable
WheapIsPageInList
WheapLoadPolicy
WheapLogInitEvent
WheapLogIpmiSELEvent
WheapLogPageOfflineAttemptEvent
WheapLogProcessTerminateEvent
WheapOfflinePage
WheapOfflineRow
WheapOpenPolicyRegistryKey
WheapPersistPageForMemoryError
WheapPfaLogPageMonitorRemoval
WheapPfaMemoryCheck
WheapPfaReset
WheapPfaRetireExpiredMemoryEntries
WheapPfnComparisonHelper
WheapPredictiveFailureAnalysis
WheapPrmInvokeHandler
WheapPrmTranslateDimmAddressIntel
WheapPrmTranslatePhysicalAddressIntel
WheapProcessEfiBadMemoryPage
WheapProcessOfflineList
WheapProcessWaitingETWEvents
WheapProcessWorkQueueItem
WheapPropagatePolicyToHal
WheapPushPendingOfflineWrapper
WheapQueryPshedForErrorSources
WheapReportBootError
WheapReportDeferredLiveDumps
WheapReportLiveDump
WheapReportPersistedErrorRecord
WheapResetPolicyDefaults
WheapSaveRecordForLiveDump
WheapScanRegistryForPolicyChanges
WheapSelLogSetNtSchedulerAvailabilityNoLock
WheapSetDefaultErrorConfigurationCalls
WheapSetDefaultErrorSourceConfiguration
WheapSetPolicyValue
WheapTrackPendingPage
WheapWmiExecuteErrorInjectionMethod
WheapWmiExecuteErrorSourceMethod
WheapWmiExecuteMethod
WheapWmiExecutePluginCtlMethod
WheapWmiExecutePolicyManagementMethod
WheapWorkQueueAddItem
WheapWorkQueueDpcRoutine
WheapWorkQueueWorkerRoutine
Win7PsGetVersion
Win7RtlGetVersion
Win81PsGetVersion
Win81RtlGetVersion
Win8PsGetVersion
Win8RtlGetVersion
WmiAcquireSmbiosLockExclusive
WmiGetClock
WmiMatchSMBiosSysInfo
WmiQueryTraceInformation
WmiQueryTraceProviderCount
WmiReleaseSmbiosLockExclusive
WmiSetNetworkNotify
WmiTraceMessage
WmiTraceMessageVa
WmiTraceRundownNotify
WmiVerifierCopyEvent
WmiVerifierTakeEventOwnership
WmipAcquireSmbiosLockShared
WmipAddDataSource
WmipAddMofResource
WmipAddProviderIdToPIList
WmipAlign
WmipAllocEntry
WmipAllocGuidEntry
WmipAllocProviderId
WmipAllocRegEntry
WmipAllocateSingleInstanceWnode
WmipBuildInstanceSet
WmipBuildTraceDeviceList
WmipCachePtrs
WmipCheckSMBiosSysInfoString
WmipClearIrpObjectList
WmipCompleteGuidIrpWithError
WmipCopyFromEventQueues
WmipCountedToSz
WmipCreateGuidObject
WmipDSCleanup
WmipDeleteMethod
WmipDeliverWnodeToDS
WmipDereferenceEvent
WmipDeregisterDevice
WmipDeregisterRegEntry
WmipDetermineInstanceBaseIndex
WmipDisableCollectOrEvent
WmipDisableCollectionForRemovedGuid
WmipDoDisableRequest
WmipDoFindRegEntryByDevice
WmipDoFindRegEntryByProviderId
WmipDriverEntry
WmipEnableCollectOrEvent
WmipEnableCollectionForNewGuid
WmipEnumerateGuids
WmipEnumerateMofResources
WmipEventNotification
WmipFindGEByGuid
WmipFindISInDSByGuid
WmipFindISinGEbyName
WmipFindMRByNames
WmipFindRegEntryByDevice
WmipFindRegEntryByProviderId
WmipFindSMBiosStructure
WmipFindSysIdTable
WmipFirmwareTableHandler
WmipForwardWmiIrp
WmipFreeTraceDeviceList
WmipGECleanup
WmipGenerateBinaryMofNotification
WmipGenerateMofResourceNotification
WmipGenerateRegistrationNotification
WmipGetFilePDO
WmipGetGuidObjectInstanceInfo
WmipGetGuidSecurityDescriptor
WmipGetRegistryHideMachine
WmipGetSMBiosEventlog
WmipGetSMBiosString
WmipGetSMBiosTableData
WmipGetSysIds
WmipHexStringToDword
WmipISCleanup
WmipIncludeStaticNames
WmipInitializeAllocs
WmipInitializeDataStructs
WmipInitializeRegistration
WmipInitializeSecurity
WmipInsertMofResource
WmipInsertStaticNames
WmipIoControl
WmipIsEqualInstanceSets
WmipIsNumber
WmipIsQuerySetGuid
WmipLegacyEtwCallback
WmipLegacyEtwWorker
WmipLinkDataSourceToList
WmipMRCleanup
WmipMangleInstanceName
WmipNotificationIrpCancel
WmipOpenBlock
WmipOpenCloseCleanup
WmipOpenGuidObject
WmipParseSysIdTable
WmipPrepareForWnodeAD
WmipPrepareWnodeSI
WmipProbeAndCaptureGuidObjectAttributes
WmipProbeWnodeMethodItem
WmipProbeWnodeSingleInstance
WmipProbeWnodeSingleItem
WmipProbeWnodeWorker
WmipProcessEvent
WmipProcessLegacyEtwCallback
WmipProcessLegacyEtwRegister
WmipProcessLegacyEtwUnregister
WmipProcessSynchronousEtw
WmipProcessWmiRegInfo
WmipQueryAllData
WmipQueryAllDataMultiple
WmipQueryGuidInfo
WmipQuerySetExecuteSI
WmipQuerySingleMultiple
WmipQueryWmiDataBlock
WmipQueryWmiRegInfo
WmipQueueLegacyEtwWork
WmipQueueNotification
WmipQueueRegWork
WmipRawSMBiosTableHandler
WmipReadSMBiosSysInfo
WmipReceiveNotifications
WmipReferenceEntry
WmipRegisterDevice
WmipRegisterEtwProvider
WmipRegisterFirmwareProviders
WmipRegisterOrUpdateDS
WmipRegistrationWorker
WmipReleaseCollectionEnabled
WmipReleaseSmbiosLockShared
WmipRemoveDS
WmipSDRegistryQueryRoutine
WmipSMBiosFindStringAndZero
WmipSMBiosFindStructure
WmipSMBiosHideMachine
WmipSaveGuidSecurityDescriptor
WmipSecurityMethod
WmipSendDisableRequest
WmipSendEnableDisableRequest
WmipSendEnableRequest
WmipSendGuidUpdateNotifications
WmipSendWmiIrp
WmipSendWmiIrpToTraceDeviceList
WmipSetTraceNotify
WmipStaticInstanceNameSize
WmipSystemControl
WmipTranslateFileHandle
WmipTranslatePDOInstanceNames
WmipUnlinkInstanceSetFromGuidEntry
WmipUnreferenceEntry
WmipUnreferenceRegEntry
WmipUnregisterEtwProvider
WmipUpdateAddGuid
WmipUpdateDataSource
WmipUpdateDeviceStackSize
WmipUpdateModifyGuid
WmipUpdateRegistration
WmipUuidFromString
WmipWaitForCollectionEnabled
WmipWmiIrpCompletion
WmipWriteWnodeToObject
WriteAMDMsr
XIPDispatch
XdvExInitializeLookasideListExInternal
XdvExInitializeNPagedLookasideListInternal
XdvExInitializePagedLookasideListInternal
XdvIoAllocateIrp
XdvIoAllocateMdl
XdvIoAllocateWorkItem
XdvIoBuildDeviceIoControlRequest
XdvIoBuildSynchronousFsdRequest
XdvIopBuildAsynchronousFsdRequest
XmAaaOp
XmAadOp
XmAamOp
XmAasOp
XmAccumImmediate
XmAccumRegister
XmAdcOp
XmAddOp
XmAddOperands
XmAndOp
XmBitScanGeneral
XmBoundOp
XmBsfOp
XmBsrOp
XmBswapOp
XmBtOp
XmBtcOp
XmBtrOp
XmBtsOp
XmByteImmediate
XmCallOp
XmCbwOp
XmClcOp
XmCldOp
XmCliOp
XmCmcOp
XmCmpOp
XmCmpsOp
XmCmpxchgOp
XmCompareOperands
XmCwdOp
XmDaaOp
XmDasOp
XmDecOp
XmDivOp
XmEffectiveOffset
XmEmulateInterrupt
XmEmulateStream
XmEnterOp
XmEvaluateAddressSpecifier
XmEvaluateIndexSpecifier
XmExecuteInt1a
XmFlagsRegister
XmGeneralBitOffset
XmGeneralRegister
XmGetCodeByte
XmGetImmediateSourceValue
XmGetLongImmediate
XmGetOffsetAddress
XmGetRegisterAddress
XmGetStringAddress
XmGetStringAddressRange
XmGetWordImmediate
XmGroup1General
XmGroup1Immediate
XmGroup2By1
XmGroup2ByByte
XmGroup2ByCL
XmGroup3General
XmGroup45General
XmGroup7General
XmGroup8BitOffset
XmHltOp
XmIdivOp
XmIllOp
XmImmediateEnter
XmImmediateJump
XmImulImmediate
XmImulOp
XmImulxOp
XmInOp
XmIncOp
XmInitializeEmulator
XmInsOp
XmInt1aFindPciClassCode
XmInt1aFindPciDevice
XmInt1aReadConfigRegister
XmInt1aWriteConfigRegister
XmIntOp
XmIretOp
XmJcxzOp
XmJmpOp
XmJxxOp
XmLahfOp
XmLeaveOp
XmLoadSegment
XmLodsOp
XmLongJump
XmLoopOp
XmMovOp
XmMoveGeneral
XmMoveImmediate
XmMoveRegImmediate
XmMoveSegment
XmMoveXxGeneral
XmMovsOp
XmMulOp
XmNegOp
XmNoOperands
XmNopOp
XmNotOp
XmOpcodeEscape
XmOpcodeRegister
XmOrOp
XmOutOp
XmOutsOp
XmPopGeneral
XmPopOp
XmPopStack
XmPopaOp
XmPortDX
XmPortImmediate
XmPrefixOpcode
XmPushImmediate
XmPushOp
XmPushPopSegment
XmPushStack
XmPushaOp
XmRclOp
XmRcrOp
XmRdtscOp
XmRetOp
XmRolOp
XmRorOp
XmSahfOp
XmSarOp
XmSbbOp
XmScasOp
XmSegmentOffset
XmSetDataType
XmSetDestinationValue
XmSetLogicalResult
XmSetSourceValue
XmSetccByte
XmShiftDouble
XmShlOp
XmShldOp
XmShortJump
XmShrOp
XmShrdOp
XmSmswOp
XmStcOp
XmStdOp
XmStiOp
XmStoreResult
XmStosOp
XmStringOperands
XmSubOp
XmSubOperands
XmSxxOp
XmTestOp
XmXaddOp
XmXchgOp
XmXlatOpcode
XmXorOp
Xp10BitCopy
Xp10BuildAndWriteHuffmanEncodings
Xp10BuildAndWriteHuffmanTables
Xp10BuildHuffmanDecodeTable
Xp10BuildHuffmanEncodings
Xp10CompressBuffer
Xp10Compute2Crc32
Xp10Compute2Crc64
Xp10ComputeAndWriteCrc
Xp10ExecuteHuffmanDecode
Xp10ExecuteHuffmanEncode
Xp10ExecuteLz77PassMinMatchLen3
Xp10ExecuteLz77PassMinMatchLen4
Xp10ReadAndDecodeHuffmanTables
Xp10ReadAndValidateCrc
Xp10ReadMtfHeader
Xp10ScatteredBitBufferReadBytes
Xp10ScatteredByteSeekBack
Xp10ScatteredCopy
Xp10ScatteredCopyBits
Xp10ScatteredCopyFromPrevious
Xp10ScatteredNextBuffer
Xp10ScatteredReadBytes
Xp10SortHuffmanSymbols
Xp10ValidateFrameHeaderAndFillParameters
Xp10ValidateParametersAndFillFrameHeader
XpressBuildHuffmanDecodingTable
XpressBuildHuffmanEncodings
XpressDecode
XpressDecodeClose
XpressDecodeCreate
XpressDoHuffmanPass
ZwAcceptConnectPort
ZwAccessCheck
ZwAccessCheckAndAuditAlarm
ZwAccessCheckByType
ZwAccessCheckByTypeAndAuditAlarm
ZwAccessCheckByTypeResultList
ZwAccessCheckByTypeResultListAndAuditAlarm
ZwAccessCheckByTypeResultListAndAuditAlarmByHandle
ZwAcquireCrossVmMutant
ZwAcquireProcessActivityReference
ZwAddAtom
ZwAddAtomEx
ZwAddBootEntry
ZwAddDriverEntry
ZwAdjustGroupsToken
ZwAdjustPrivilegesToken
ZwAdjustTokenClaimsAndDeviceGroups
ZwAlertMultipleThreadByThreadId
ZwAlertResumeThread
ZwAlertThread
ZwAlertThreadByThreadId
ZwAlertThreadByThreadIdEx
ZwAllocateLocallyUniqueId
ZwAllocateReserveObject
ZwAllocateUserPhysicalPages
ZwAllocateUserPhysicalPagesEx
ZwAllocateUuids
ZwAllocateVirtualMemory
ZwAllocateVirtualMemoryEx
ZwAlpcAcceptConnectPort
ZwAlpcCancelMessage
ZwAlpcConnectPort
ZwAlpcConnectPortEx
ZwAlpcCreatePort
ZwAlpcCreatePortSection
ZwAlpcCreateResourceReserve
ZwAlpcCreateSectionView
ZwAlpcCreateSecurityContext
ZwAlpcDeletePortSection
ZwAlpcDeleteResourceReserve
ZwAlpcDeleteSectionView
ZwAlpcDeleteSecurityContext
ZwAlpcDisconnectPort
ZwAlpcImpersonateClientContainerOfPort
ZwAlpcImpersonateClientOfPort
ZwAlpcOpenSenderProcess
ZwAlpcOpenSenderThread
ZwAlpcQueryInformation
ZwAlpcQueryInformationMessage
ZwAlpcRevokeSecurityContext
ZwAlpcSendWaitReceivePort
ZwAlpcSetInformation
ZwApphelpCacheControl
ZwAreMappedFilesTheSame
ZwAssignProcessToJobObject
ZwAssociateWaitCompletionPacket
ZwCallEnclave
ZwCallbackReturn
ZwCancelIoFile
ZwCancelIoFileEx
ZwCancelSynchronousIoFile
ZwCancelTimer
ZwCancelTimer2
ZwCancelWaitCompletionPacket
ZwChangeProcessState
ZwChangeThreadState
ZwClearEvent
ZwClose
ZwCloseObjectAuditAlarm
ZwCommitComplete
ZwCommitEnlistment
ZwCommitRegistryTransaction
ZwCommitTransaction
ZwCompactKeys
ZwCompareObjects
ZwCompareSigningLevels
ZwCompareTokens
ZwCompleteConnectPort
ZwCompressKey
ZwConnectPort
ZwContinue
ZwContinueEx
ZwConvertBetweenAuxiliaryCounterAndPerformanceCounter
ZwCopyFileChunk
ZwCreateCpuPartition
ZwCreateCrossVmEvent
ZwCreateCrossVmMutant
ZwCreateDebugObject
ZwCreateDirectoryObject
ZwCreateDirectoryObjectEx
ZwCreateEnclave
ZwCreateEnlistment
ZwCreateEvent
ZwCreateEventPair
ZwCreateFile
ZwCreateIRTimer
ZwCreateIoCompletion
ZwCreateIoRing
ZwCreateJobObject
ZwCreateJobSet
ZwCreateKey
ZwCreateKeyTransacted
ZwCreateKeyedEvent
ZwCreateLowBoxToken
ZwCreateMailslotFile
ZwCreateMutant
ZwCreateNamedPipeFile
ZwCreatePagingFile
ZwCreatePartition
ZwCreatePort
ZwCreatePrivateNamespace
ZwCreateProcess
ZwCreateProcessEx
ZwCreateProcessStateChange
ZwCreateProfile
ZwCreateProfileEx
ZwCreateRegistryTransaction
ZwCreateResourceManager
ZwCreateSection
ZwCreateSectionEx
ZwCreateSemaphore
ZwCreateSymbolicLinkObject
ZwCreateThread
ZwCreateThreadEx
ZwCreateThreadStateChange
ZwCreateTimer
ZwCreateTimer2
ZwCreateToken
ZwCreateTokenEx
ZwCreateTransaction
ZwCreateTransactionManager
ZwCreateUserProcess
ZwCreateWaitCompletionPacket
ZwCreateWaitablePort
ZwCreateWnfStateName
ZwCreateWorkerFactory
ZwDebugActiveProcess
ZwDebugContinue
ZwDelayExecution
ZwDeleteAtom
ZwDeleteBootEntry
ZwDeleteDriverEntry
ZwDeleteFile
ZwDeleteKey
ZwDeleteObjectAuditAlarm
ZwDeletePrivateNamespace
ZwDeleteValueKey
ZwDeleteWnfStateData
ZwDeleteWnfStateName
ZwDeviceIoControlFile
ZwDirectGraphicsCall
ZwDisableLastKnownGood
ZwDisplayString
ZwDrawText
ZwDuplicateObject
ZwDuplicateToken
ZwEnableLastKnownGood
ZwEnumerateBootEntries
ZwEnumerateDriverEntries
ZwEnumerateKey
ZwEnumerateSystemEnvironmentValuesEx
ZwEnumerateTransactionObject
ZwEnumerateValueKey
ZwExtendSection
ZwFilterBootOption
ZwFilterToken
ZwFilterTokenEx
ZwFindAtom
ZwFlushBuffersFile
ZwFlushBuffersFileEx
ZwFlushInstallUILanguage
ZwFlushInstructionCache
ZwFlushKey
ZwFlushProcessWriteBuffers
ZwFlushVirtualMemory
ZwFlushWriteBuffer
ZwFreeUserPhysicalPages
ZwFreeVirtualMemory
ZwFreezeRegistry
ZwFreezeTransactions
ZwFsControlFile
ZwGetCachedSigningLevel
ZwGetCompleteWnfStateSubscription
ZwGetContextThread
ZwGetCurrentProcessorNumber
ZwGetCurrentProcessorNumberEx
ZwGetDevicePowerState
ZwGetMUIRegistryInfo
ZwGetNextProcess
ZwGetNextThread
ZwGetNlsSectionPtr
ZwGetNotificationResourceManager
ZwGetWriteWatch
ZwImpersonateAnonymousToken
ZwImpersonateClientOfPort
ZwImpersonateThread
ZwInitializeEnclave
ZwInitializeNlsFiles
ZwInitializeRegistry
ZwInitiatePowerAction
ZwIsProcessInJob
ZwIsSystemResumeAutomatic
ZwIsUILanguageComitted
ZwListenPort
ZwLoadDriver
ZwLoadEnclaveData
ZwLoadKey
ZwLoadKey2
ZwLoadKey3
ZwLoadKeyEx
ZwLockFile
ZwLockProductActivationKeys
ZwLockRegistryKey
ZwLockVirtualMemory
ZwMakePermanentObject
ZwMakeTemporaryObject
ZwManageHotPatch
ZwManagePartition
ZwMapCMFModule
ZwMapUserPhysicalPages
ZwMapUserPhysicalPagesScatter
ZwMapViewOfSection
ZwMapViewOfSectionEx
ZwModifyBootEntry
ZwModifyDriverEntry
ZwNotifyChangeDirectoryFile
ZwNotifyChangeDirectoryFileEx
ZwNotifyChangeKey
ZwNotifyChangeMultipleKeys
ZwNotifyChangeSession
ZwOpenCpuPartition
ZwOpenDirectoryObject
ZwOpenEnlistment
ZwOpenEvent
ZwOpenEventPair
ZwOpenFile
ZwOpenIoCompletion
ZwOpenJobObject
ZwOpenKey
ZwOpenKeyEx
ZwOpenKeyTransacted
ZwOpenKeyTransactedEx
ZwOpenKeyedEvent
ZwOpenMutant
ZwOpenObjectAuditAlarm
ZwOpenPartition
ZwOpenPrivateNamespace
ZwOpenProcess
ZwOpenProcessToken
ZwOpenProcessTokenEx
ZwOpenRegistryTransaction
ZwOpenResourceManager
ZwOpenSection
ZwOpenSemaphore
ZwOpenSession
ZwOpenSymbolicLinkObject
ZwOpenThread
ZwOpenThreadToken
ZwOpenThreadTokenEx
ZwOpenTimer
ZwOpenTransaction
ZwOpenTransactionManager
ZwPlugPlayControl
ZwPowerInformation
ZwPrePrepareComplete
ZwPrePrepareEnlistment
ZwPrepareComplete
ZwPrepareEnlistment
ZwPrivilegeCheck
ZwPrivilegeObjectAuditAlarm
ZwPrivilegedServiceAuditAlarm
ZwPropagationComplete
ZwPropagationFailed
ZwProtectVirtualMemory
ZwPssCaptureVaSpaceBulk
ZwPulseEvent
ZwQueryAttributesFile
ZwQueryAuxiliaryCounterFrequency
ZwQueryBootEntryOrder
ZwQueryBootOptions
ZwQueryDebugFilterState
ZwQueryDefaultLocale
ZwQueryDefaultUILanguage
ZwQueryDirectoryFile
ZwQueryDirectoryFileEx
ZwQueryDirectoryObject
ZwQueryDriverEntryOrder
ZwQueryEaFile
ZwQueryEvent
ZwQueryFullAttributesFile
ZwQueryInformationAtom
ZwQueryInformationByName
ZwQueryInformationCpuPartition
ZwQueryInformationEnlistment
ZwQueryInformationFile
ZwQueryInformationJobObject
ZwQueryInformationPort
ZwQueryInformationProcess
ZwQueryInformationResourceManager
ZwQueryInformationThread
ZwQueryInformationToken
ZwQueryInformationTransaction
ZwQueryInformationTransactionManager
ZwQueryInformationWorkerFactory
ZwQueryInstallUILanguage
ZwQueryIntervalProfile
ZwQueryIoCompletion
ZwQueryIoRingCapabilities
ZwQueryKey
ZwQueryLicenseValue
ZwQueryMultipleValueKey
ZwQueryMutant
ZwQueryObject
ZwQueryOpenSubKeys
ZwQueryOpenSubKeysEx
ZwQueryPerformanceCounter
ZwQueryPortInformationProcess
ZwQueryQuotaInformationFile
ZwQuerySection
ZwQuerySecurityAttributesToken
ZwQuerySecurityObject
ZwQuerySecurityPolicy
ZwQuerySemaphore
ZwQuerySymbolicLinkObject
ZwQuerySystemEnvironmentValue
ZwQuerySystemEnvironmentValueEx
ZwQuerySystemInformation
ZwQuerySystemInformationEx
ZwQuerySystemTime
ZwQueryTimer
ZwQueryTimerResolution
ZwQueryValueKey
ZwQueryVirtualMemory
ZwQueryVolumeInformationFile
ZwQueryWnfStateData
ZwQueryWnfStateNameInformation
ZwQueueApcThread
ZwQueueApcThreadEx
ZwQueueApcThreadEx2
ZwRaiseException
ZwRaiseHardError
ZwReadFile
ZwReadFileScatter
ZwReadOnlyEnlistment
ZwReadRequestData
ZwReadVirtualMemory
ZwReadVirtualMemoryEx
ZwRecoverEnlistment
ZwRecoverResourceManager
ZwRecoverTransactionManager
ZwRegisterProtocolAddressInformation
ZwRegisterThreadTerminatePort
ZwReleaseKeyedEvent
ZwReleaseMutant
ZwReleaseSemaphore
ZwReleaseWorkerFactoryWorker
ZwRemoveIoCompletion
ZwRemoveIoCompletionEx
ZwRemoveProcessDebug
ZwRenameKey
ZwRenameTransactionManager
ZwReplaceKey
ZwReplacePartitionUnit
ZwReplyPort
ZwReplyWaitReceivePort
ZwReplyWaitReceivePortEx
ZwReplyWaitReplyPort
ZwRequestPort
ZwRequestWaitReplyPort
ZwResetEvent
ZwResetWriteWatch
ZwRestoreKey
ZwResumeProcess
ZwResumeThread
ZwRevertContainerImpersonation
ZwRollbackComplete
ZwRollbackEnlistment
ZwRollbackRegistryTransaction
ZwRollbackTransaction
ZwRollforwardTransactionManager
ZwSaveKey
ZwSaveKeyEx
ZwSaveMergedKeys
ZwSecureConnectPort
ZwSerializeBoot
ZwSetBootEntryOrder
ZwSetBootOptions
ZwSetCachedSigningLevel
ZwSetCachedSigningLevel2
ZwSetContextThread
ZwSetDebugFilterState
ZwSetDefaultHardErrorPort
ZwSetDefaultLocale
ZwSetDefaultUILanguage
ZwSetDriverEntryOrder
ZwSetEaFile
ZwSetEvent
ZwSetEventBoostPriority
ZwSetEventEx
ZwSetHighEventPair
ZwSetHighWaitLowEventPair
ZwSetIRTimer
ZwSetInformationCpuPartition
ZwSetInformationDebugObject
ZwSetInformationEnlistment
ZwSetInformationFile
ZwSetInformationIoRing
ZwSetInformationJobObject
ZwSetInformationKey
ZwSetInformationObject
ZwSetInformationProcess
ZwSetInformationResourceManager
ZwSetInformationSymbolicLink
ZwSetInformationThread
ZwSetInformationToken
ZwSetInformationTransaction
ZwSetInformationTransactionManager
ZwSetInformationVirtualMemory
ZwSetInformationWorkerFactory
ZwSetIntervalProfile
ZwSetIoCompletion
ZwSetIoCompletionEx
ZwSetLdtEntries
ZwSetLowEventPair
ZwSetLowWaitHighEventPair
ZwSetQuotaInformationFile
ZwSetSecurityObject
ZwSetSystemEnvironmentValue
ZwSetSystemEnvironmentValueEx
ZwSetSystemInformation
ZwSetSystemPowerState
ZwSetSystemTime
ZwSetThreadExecutionState
ZwSetTimer
ZwSetTimer2
ZwSetTimerEx
ZwSetTimerResolution
ZwSetUuidSeed
ZwSetValueKey
ZwSetVolumeInformationFile
ZwSetWnfProcessNotificationEvent
ZwShutdownSystem
ZwShutdownWorkerFactory
ZwSignalAndWaitForSingleObject
ZwSinglePhaseReject
ZwStartProfile
ZwStopProfile
ZwSubmitIoRing
ZwSubscribeWnfStateChange
ZwSuspendProcess
ZwSuspendThread
ZwSystemDebugControl
ZwTerminateEnclave
ZwTerminateJobObject
ZwTerminateProcess
ZwTerminateThread
ZwTestAlert
ZwThawRegistry
ZwThawTransactions
ZwTraceControl
ZwTraceEvent
ZwTranslateFilePath
ZwUmsThreadYield
ZwUnloadDriver
ZwUnloadKey
ZwUnloadKey2
ZwUnloadKeyEx
ZwUnlockFile
ZwUnlockVirtualMemory
ZwUnmapViewOfSection
ZwUnmapViewOfSectionEx
ZwUnsubscribeWnfStateChange
ZwUpdateWnfStateData
ZwVdmControl
ZwWaitForAlertByThreadId
ZwWaitForDebugEvent
ZwWaitForKeyedEvent
ZwWaitForMultipleObjects
ZwWaitForMultipleObjects32
ZwWaitForSingleObject
ZwWaitForWorkViaWorkerFactory
ZwWaitHighEventPair
ZwWaitLowEventPair
ZwWorkerFactoryWorkerReady
ZwWriteFile
ZwWriteFileGather
ZwWriteRequestData
ZwWriteVirtualMemory
ZwYieldExecution
_CmAddDeviceToContainer
_CmAddDeviceToContainerWorker
_CmAddPanelDevice
_CmAddPanelDeviceWorker
_CmAppendDeclarativeDefaultFilters
_CmAppendDeclarativeFilterLevel
_CmBuildDevicePanelId
_CmClassFilterCallback
_CmClassPropertyRead
_CmClassPropertyWrite
_CmClassSubkeyCallback
_CmContainerListGenericObjectCallback
_CmCreateDevice
_CmCreateDeviceContainer
_CmCreateDeviceContainerWorker
_CmCreateDeviceInterface
_CmCreateDeviceInterfaceWorker
_CmCreateDevicePanel
_CmCreateDevicePanelWorker
_CmCreateDeviceWorker
_CmCreateInstallerClass
_CmCreateInstallerClassWorker
_CmCreateInterfaceClass
_CmCreateInterfaceClassWorker
_CmCreateOrdinalInstanceKey
_CmDeleteCommonClassRegKey
_CmDeleteCommonClassRegKeyWorker
_CmDeleteDevice
_CmDeleteDeviceContainer
_CmDeleteDeviceContainerRegKey
_CmDeleteDeviceContainerRegKeyWorker
_CmDeleteDeviceContainerWorker
_CmDeleteDeviceInterface
_CmDeleteDeviceInterfaceMappedPropertyFromRegValue
_CmDeleteDeviceInterfaceRegKey
_CmDeleteDeviceInterfaceRegKeyWorker
_CmDeleteDeviceInterfaceWorker
_CmDeleteDeviceMappedPropertyForAllDriverKeyRegValues
_CmDeleteDeviceMappedPropertyFromDriverKeyRegValue
_CmDeleteDeviceMappedPropertyFromInstanceKeyRegValue
_CmDeleteDevicePanel
_CmDeleteDevicePanelRegKey
_CmDeleteDevicePanelRegKeyWorker
_CmDeleteDevicePanelWorker
_CmDeleteDeviceRegKey
_CmDeleteDeviceRegKeyWorker
_CmDeleteDeviceWorker
_CmDeleteInstallerClass
_CmDeleteInstallerClassMappedPropertyFromRegValue
_CmDeleteInstallerClassRegKey
_CmDeleteInstallerClassWorker
_CmDeleteInterfaceClass
_CmDeleteInterfaceClassMappedPropertyFromRegValue
_CmDeleteInterfaceClassRegKey
_CmDeleteInterfaceClassWorker
_CmDeviceClassesSubkeyCallback
_CmDevicePanelEnumSubkeyCallback
_CmDevicePropertyRead
_CmDevicePropertyWrite
_CmEnumDevicesInContainerWithCallback
_CmEnumDevicesInContainerWithCallbackWorker
_CmEnumSubkeyCallback
_CmFindFilterListInflectionPoint
_CmGetCommonClassRegKeyPath
_CmGetContainerBooleanProperty
_CmGetContainerBooleanPropertyCallback
_CmGetDeclarativeFilterList
_CmGetDeviceChildren
_CmGetDeviceCompoundFilters
_CmGetDeviceCompoundFiltersWorker
_CmGetDeviceContainerIdFromBase
_CmGetDeviceContainerMappedProperty
_CmGetDeviceContainerMappedPropertyKeys
_CmGetDeviceContainerMappedPropertyLocales
_CmGetDeviceContainerRegKeyPath
_CmGetDeviceControlKeyPath
_CmGetDeviceHardwareKeyPath
_CmGetDeviceInterfaceClassGuid
_CmGetDeviceInterfaceMappedPropertyFromComposite
_CmGetDeviceInterfaceMappedPropertyFromRegValue
_CmGetDeviceInterfaceMappedPropertyKeys
_CmGetDeviceInterfaceMappedPropertyLocales
_CmGetDeviceInterfaceName
_CmGetDeviceInterfacePathFormat
_CmGetDeviceInterfaceReferenceString
_CmGetDeviceInterfaceRegKeyPath
_CmGetDeviceInterfaceRegKeySecurityDescriptor
_CmGetDeviceInterfaceSubkeyPath
_CmGetDeviceInterfaceSymbolicLinkName
_CmGetDeviceLogConfKeyPath
_CmGetDeviceMappedPropertyFromComposite
_CmGetDeviceMappedPropertyFromInstanceKeyRegValue
_CmGetDeviceMappedPropertyFromRegProp
_CmGetDeviceMappedPropertyKeys
_CmGetDeviceMappedPropertyLocales
_CmGetDevicePanelGroup
_CmGetDevicePanelMappedProperty
_CmGetDevicePanelMappedPropertyKeys
_CmGetDevicePanelRegKeyPath
_CmGetDeviceParent
_CmGetDeviceRegKeyPath
_CmGetDeviceRegKeySecurityDescriptor
_CmGetDeviceRegProp
_CmGetDeviceRegPropWorker
_CmGetDeviceRelationsList
_CmGetDeviceSiblings
_CmGetDeviceSoftwareKeyPath
_CmGetDeviceStatus
_CmGetDevicesInBaseContainerList
_CmGetInstallerClassCompoundFilters
_CmGetInstallerClassCompoundFiltersWorker
_CmGetInstallerClassMappedProperty
_CmGetInstallerClassMappedPropertyFromCoInstallers
_CmGetInstallerClassMappedPropertyFromComposite
_CmGetInstallerClassMappedPropertyFromRegProp
_CmGetInstallerClassMappedPropertyFromRegValue
_CmGetInstallerClassMappedPropertyKeys
_CmGetInstallerClassMappedPropertyLocales
_CmGetInstallerClassRegProp
_CmGetInstallerClassRegPropWorker
_CmGetInterfaceClassMappedPropertyFromComposite
_CmGetInterfaceClassMappedPropertyFromRegValue
_CmGetInterfaceClassMappedPropertyKeys
_CmGetInterfaceClassMappedPropertyLocales
_CmGetMatchingCommonClassList
_CmGetMatchingCommonClassListWorker
_CmGetMatchingDeviceContainerList
_CmGetMatchingDeviceInterfaceList
_CmGetMatchingDeviceList
_CmGetMatchingDeviceListForSubkey
_CmGetMatchingDevicePanelList
_CmGetMatchingDevicePanelListWorker
_CmGetMatchingFilteredDeviceInterfaceList
_CmGetMatchingFilteredDeviceInterfaceListWorker
_CmGetMatchingFilteredDeviceList
_CmGetMatchingFilteredDeviceListWorker
_CmGetParentDeviceContainerId
_CmGetRegKeySecurityDescriptor
_CmIsDeviceInContainer
_CmIsDeviceInterfaceEnabled
_CmIsDevicePresent
_CmIsDeviceSafeRemovalRequired
_CmIsLocalMachineContainer
_CmIsRootDevice
_CmIsRootEnumeratedDevice
_CmMapCmObjectTypeToPnpObjectType
_CmMapPropertyKeyToRegProp
_CmMapRegPropToPropertyKey
_CmMatchLastKnownParentCallback
_CmMergeFilterLists
_CmMoveBaseContainer
_CmOpenCommonClassRegKey
_CmOpenCommonClassRegKeyWorker
_CmOpenDeviceContainerRegKey
_CmOpenDeviceContainerRegKeyWorker
_CmOpenDeviceInterfaceRegKey
_CmOpenDeviceInterfaceRegKeyWorker
_CmOpenDevicePanelRegKey
_CmOpenDevicePanelRegKeyWorker
_CmOpenDeviceRegKey
_CmOpenDeviceRegKeyWorker
_CmOpenInstallerClassRegKey
_CmOpenInterfaceClassRegKey
_CmRaiseCreateEvent
_CmRaiseDeleteEvent
_CmRaisePropertyChangeEvent
_CmRemoveDeviceFromContainer
_CmRemoveDeviceFromContainerWorker
_CmRemovePanelDevice
_CmRemovePanelDeviceWorker
_CmServiceFilterCallback
_CmSetDeviceContainerMappedProperty
_CmSetDeviceInterfaceMappedProperty
_CmSetDeviceInterfaceMappedPropertyFromRegValue
_CmSetDeviceMappedProperty
_CmSetDeviceMappedPropertyFromDriverKeyRegValue
_CmSetDeviceMappedPropertyFromInstanceKeyRegValue
_CmSetDeviceMappedPropertyFromRegProp
_CmSetDevicePanelMappedProperty
_CmSetDeviceRegProp
_CmSetDeviceRegPropWorker
_CmSetInstallerClassMappedProperty
_CmSetInstallerClassMappedPropertyFromRegProp
_CmSetInstallerClassMappedPropertyFromRegValue
_CmSetInstallerClassRegProp
_CmSetInstallerClassRegPropWorker
_CmSetInterfaceClassMappedProperty
_CmSetInterfaceClassMappedPropertyFromRegValue
_CmSplitDevicePanelId
_CmUpdateDevicePanel
_CmUpdateDevicePanelInterface
_CmValidateDeviceContainerName
_CmValidateDeviceInterfaceName
_CmValidateDeviceName
_CmValidateDevicePanelName
_CmValidateInstallerClassName
_CmValidateInterfaceClassName
_GetBaseTypeSize
_IsFixedSizeType
_MapCmClassPropertyToRegValue
_MapCmDevicePropertyToRegType
_MapCmDevicePropertyToRegValue
_NLG_Notify
_NtPlugPlayGetDeviceProperty
_PnpCmMatchCallbackRoutine
_PnpContainerRaiseDevicesChangeEvent
_PnpCreateObject
_PnpCreateObjectDispatch
_PnpCtxCloseMachine
_PnpCtxCreateNode
_PnpCtxDestroyNode
_PnpCtxFindNode
_PnpCtxGetCachedContextBaseKey
_PnpCtxGetCachedNodeBaseKey
_PnpCtxGetObjectDispatchCallback
_PnpCtxInternalEnumKeyCallback
_PnpCtxOpenContextBaseKey
_PnpCtxOpenContextNodeBaseKey
_PnpCtxOpenMachine
_PnpCtxRegCloseKey
_PnpCtxRegCopyTree
_PnpCtxRegCreateKey
_PnpCtxRegCreateTree
_PnpCtxRegDeleteKey
_PnpCtxRegDeletePath
_PnpCtxRegDeleteTree
_PnpCtxRegDeleteValue
_PnpCtxRegEnumKey
_PnpCtxRegEnumKeyWithCallback
_PnpCtxRegEnumValue
_PnpCtxRegGetKeySecurity
_PnpCtxRegOpenCurrentUserKey
_PnpCtxRegOpenKey
_PnpCtxRegQueryInfoKey
_PnpCtxRegQueryKeyPathName
_PnpCtxRegQueryValue
_PnpCtxRegQueryValueIndirect
_PnpCtxRegSetKeySecurity
_PnpCtxRegSetValue
_PnpCtxRegisterMachineNode
_PnpCtxSetNtPlugPlayRoutine
_PnpCtxSetObjectContext
_PnpCtxSetObjectDispatchCallback
_PnpCtxUnregisterMachineNode
_PnpDeleteObject
_PnpDeleteObjectDispatch
_PnpDeletePropertyWorker
_PnpDeviceRaisePropertyChangeEventWorker
_PnpDispatchDevice
_PnpDispatchDeviceContainer
_PnpDispatchDeviceInterface
_PnpDispatchDevicePanel
_PnpDispatchInstallerClass
_PnpDispatchInterfaceClass
_PnpGetEnumSecurityDescriptor
_PnpGetGenericObjectList
_PnpGetGenericStoreProperty
_PnpGetGenericStorePropertyKeys
_PnpGetGenericStorePropertyLocales
_PnpGetMappedPropertyKeysDispatch
_PnpGetMappedPropertyLocalesDispatch
_PnpGetObjectList
_PnpGetObjectProperty
_PnpGetObjectPropertyKeys
_PnpGetObjectPropertyKeysWorker
_PnpGetObjectPropertyLocales
_PnpGetObjectPropertyLocalesWorker
_PnpGetObjectPropertyWorker
_PnpGetPropertiesSecurityDescriptor
_PnpInstallerClassRaisePropertyChangeEventWorker
_PnpInterfaceClassRaisePropertyChangeEventWorker
_PnpInterfaceRaisePropertyChangeEventWorker
_PnpIsValidGuidString
_PnpMapCmStatusToDispatchStatus
_PnpMultiSzAppend
_PnpMultiSzDeleteString
_PnpMultiSzFind
_PnpMultiSzGetLen
_PnpNotifyDerivedKeys
_PnpObjectListCallback
_PnpObjectRaiseCreateEvent
_PnpObjectRaiseDeleteEvent
_PnpObjectRaiseDevicesChangeEvent
_PnpObjectRaisePropertyChangeEvent
_PnpOpenObjectRegKey
_PnpOpenPropertiesKey
_PnpParseIndirectInfString
_PnpParseIndirectResourceString
_PnpRaiseNtPlugPlayDevicePropertyChangeEvent
_PnpRaiseNtPlugPlayInterfacePropertyChangeEvent
_PnpRegQueryValueIndirect
_PnpSetGenericStoreProperty
_PnpSetMappedPropertyDispatch
_PnpSetObjectProperty
_PnpSetObjectPropertyWorker
_PnpSetPropertyWorker
_PnpStringFromGuid
_PnpUpdateInterfacesCallback
_PnpValidateObjectName
_PnpValidateObjectNameDispatch
_PnpValidatePropertyData
_PopInternalError
_RegRtlCopyTreeInternal
_RegRtlCreateKeyTransacted
_RegRtlCreateTreeTransacted
_RegRtlDeleteKeyTransacted
_RegRtlDeletePathInternal
_RegRtlDeleteTreeInternal
_RegRtlEnumKey
_RegRtlEnumKeyWithCallback
_RegRtlEnumValue
_RegRtlGetKeySecurity
_RegRtlIsPredefinedKey
_RegRtlOpenKeyTransacted
_RegRtlOpenPredefinedKey
_RegRtlQueryInfoKey
_RegRtlQueryKeyPathName
_RegRtlQueryValue
_RegRtlSetKeySecurity
_RegRtlSetValue
_RtlMuiRegAddLIPParent
_RtlpMuiRegAddBaseLanguage
_RtlpMuiRegAddNeutralLanguage
_RtlpMuiRegInitAnyLanguage
_RtlpMuiRegInitLIPLanguage
_RtlpMuiRegLoadInstalled
_RtlpMuiRegLoadInstalledFromKey
_RtlpMuiRegPopulateBaseLanguages
_RtlpMuiRegSerializeRegistryInfo
_RtlpMuiRegValidateAndGetInstallFallbackBase
_RtlpMuiRegValidateInstalled
_RtlpMuiRegValidateLIPLanguage
_RtlpMuiRegValidatePartialLanguage
_RtlpRemovePendingDeleteLanguages
_SysCtxCloseMachine
_SysCtxGetCachedContextBaseKey
_SysCtxGetTransaction
_SysCtxInternalEnumSubkeyCallback
_SysCtxOpenControlSet
_SysCtxOpenEffectiveToken
_SysCtxOpenMachine
_SysCtxRegCreateKey
_SysCtxRegCreateTree
_SysCtxRegOpenCurrentUserKey
_SysCtxRegOpenKey
__C_specific_handler
__GSHandlerCheck
__GSHandlerCheckCommon
__GSHandlerCheck_SEH
__NLG_Dispatch2
__NLG_Return2
__SdbpFindTagFromAncestors
__asan_alloca_poison
__asan_allocas_unpoison
__asan_load1
__asan_load16
__asan_load16_volatile
__asan_load1_volatile
__asan_load2
__asan_load2_volatile
__asan_load4
__asan_load4_volatile
__asan_load8
__asan_load8_volatile
__asan_loadN
__asan_loadN_volatile
__asan_memcpy
__asan_memmove
__asan_memset
__asan_report_load1
__asan_report_load16
__asan_report_load2
__asan_report_load4
__asan_report_load8
__asan_report_loadN
__asan_report_store1
__asan_report_store16
__asan_report_store2
__asan_report_store4
__asan_report_store8
__asan_report_storeN
__asan_set_shadow_00
__asan_set_shadow_f8
__asan_store1
__asan_store16
__asan_store16_volatile
__asan_store1_volatile
__asan_store2
__asan_store2_volatile
__asan_store4
__asan_store4_volatile
__asan_store8
__asan_store8_volatile
__asan_storeN
__asan_storeN_volatile
__asan_wrap_memchr
__asan_wrap_memcmp
__asan_wrap_strcat
__asan_wrap_strcmp
__asan_wrap_strcpy
__asan_wrap_strlen
__asan_wrap_strncmp
__asan_wrap_strncpy
__asan_wrap_wcslen
__ascii_memicmp
__ascii_stricmp
__ascii_strnicmp
__chkstk
__cpu_features_init
__guard_retpoline_exit
__guard_retpoline_exit_indirect_rax
__guard_retpoline_icall_handler
__guard_retpoline_import_r10
__guard_retpoline_import_r10_do_retpoline
__guard_retpoline_import_r10_log_event
__guard_retpoline_indirect_cfg_rax
__guard_retpoline_jump_hpat
__guard_retpoline_switchtable_jump_r10
__guard_retpoline_switchtable_jump_r11
__guard_retpoline_switchtable_jump_r12
__guard_retpoline_switchtable_jump_r13
__guard_retpoline_switchtable_jump_r14
__guard_retpoline_switchtable_jump_r15
__guard_retpoline_switchtable_jump_r8
__guard_retpoline_switchtable_jump_r9
__guard_retpoline_switchtable_jump_rax
__guard_retpoline_switchtable_jump_rbp
__guard_retpoline_switchtable_jump_rbx
__guard_retpoline_switchtable_jump_rcx
__guard_retpoline_switchtable_jump_rdi
__guard_retpoline_switchtable_jump_rdx
__guard_retpoline_switchtable_jump_rsi
__guard_retpoline_switchtable_jump_rsp
__isascii
__longjmp_internal
__memset_query
__memset_repmovs
__memset_spec_ermsb
__memset_spec_ermsb_repmovsb
__memset_spec_plain
__misaligned_access
__pctype_func
__report_gsfailure
__report_rangecheckfailure
__security_check_cookie
__security_init_cookie
_alloca_probe
_atoi64
_clrfp
_ctrlfp
_fclrf
_fgetwc_nolock
_filbuf_s
_filwbuf_s
_finite
_flsbuf
_flsbuf_s
_flswbuf
_fputwc_nolock
_frnd
_get_fpsr
_get_printf_count_output
_guard_check_icall
_guard_check_icall_no_overrides
_guard_check_icall_nop
_guard_dispatch_icall
_guard_dispatch_icall$thunk$10345483385596137414
_guard_dispatch_icall_no_overrides
_guard_dispatch_icall_nop
_guard_icall_bugcheck
_guard_icall_handler
_guard_wrap_icall_jmp
_guard_wrap_icall_retpoline_exit
_guard_xfg_dispatch_icall_nop
_handle_error
_handle_errorf
_i64toa_s
_i64tow_s
_input_s
_invalid_parameter
_iswctype_l
_itoa
_itoa_s
_itow
_itow_s
_local_unwind
_ltoa_s
_ltow_s
_makepath_s
_matherr
_mbstrlen
_memicmp
_output_l
_output_s
_purecall
_raise_exc
_raise_exc_ex
_raise_excf
_safecrt_mbtowc
_safecrt_wctomb_s
_set_errno_from_matherr
_set_fpsr
_set_statfp
_setjmp
_setjmpex
_sinput_s
_snprintf
_snprintf_s
_snscanf_s
_snwprintf
_snwprintf_s
_snwscanf_s
_soutput_s
_splitpath_s
_statfp
_stricmp
_strlwr
_strnicmp
_strnset
_strnset_s
_strrev
_strset
_strset_s
_strtoi64
_strtoui64
_strupr
_swinput_s
_swoutput_s
_swprintf
_tlgCreate1Sz_char
_tlgCreate1Sz_wchar_t
_tlgDefineProvider_annotation__TlgB93ee15dTraceLoggingProviderProv
_tlgDefineProvider_annotation__TlgBootProviderProv
_tlgDefineProvider_annotation__TlgCarTraceLogProviderProv
_tlgDefineProvider_annotation__TlgCcTelemetryProviderProv
_tlgDefineProvider_annotation__TlgCmFcpTraceLoggingHandleProv
_tlgDefineProvider_annotation__TlgCmpTraceLoggingHandleProv
_tlgDefineProvider_annotation__TlgDumpTraceLoggingProviderProv
_tlgDefineProvider_annotation__TlgExpTraceLoggingProviderProv
_tlgDefineProvider_annotation__TlgFsRtlOplockTraceLoggingHandleProv
_tlgDefineProvider_annotation__TlgHalTraceLoggingProviderProv
_tlgDefineProvider_annotation__TlgIoManagerTraceLoggingProviderProv
_tlgDefineProvider_annotation__TlgKasanTelemetryProviderProv
_tlgDefineProvider_annotation__TlgKcsanTelemetryProviderProv
_tlgDefineProvider_annotation__TlgKiTimerTraceLoggingHandleProv
_tlgDefineProvider_annotation__TlgKiTraceLoggingHandleProv
_tlgDefineProvider_annotation__TlgLiveDumpTraceLoggingProviderProv
_tlgDefineProvider_annotation__TlgMiTraceHandleProv
_tlgDefineProvider_annotation__TlgObpTraceLoggingHandleProv
_tlgDefineProvider_annotation__TlgPfKernelTraceLoggingProviderProv
_tlgDefineProvider_annotation__TlgPlatformRecordsProviderProv
_tlgDefineProvider_annotation__TlgPnpTraceLoggingConfigHandleProv
_tlgDefineProvider_annotation__TlgPnpTraceLoggingEventHandleCoreProv
_tlgDefineProvider_annotation__TlgPnpTraceLoggingEventHandleProv
_tlgDefineProvider_annotation__TlgPopDirectedDripsDiagTraceHandleProv
_tlgDefineProvider_annotation__TlgPopPpmSnapLogTraceHandleProv
_tlgDefineProvider_annotation__TlgPopTraceDiagFxAccountingHandleProv
_tlgDefineProvider_annotation__TlgPopTraceHandleCoreProv
_tlgDefineProvider_annotation__TlgPopTraceHandleProv
_tlgDefineProvider_annotation__TlgPotsTracePowerTransitionsHandleProv
_tlgDefineProvider_annotation__TlgPspTraceLoggingHandleProv
_tlgDefineProvider_annotation__TlgRtlpCapChkTraceLoggingProviderProv
_tlgDefineProvider_annotation__TlgSeTraceLoggingHandleProv
_tlgDefineProvider_annotation__TlgSshpTelemetryHandleProv
_tlgDefineProvider_annotation__TlgSysEnvTraceLoggingProviderProv
_tlgDefineProvider_annotation__TlgTRACE_PROVIDERProv
_tlgDefineProvider_annotation__TlgTlgAggregateInternalProviderProv
_tlgDefineProvider_annotation__TlgTlgAttackSurfaceMonitorProv
_tlgDefineProvider_annotation__TlgTlgCoverageProvRegHandleProv
_tlgDefineProvider_annotation__TlgTlgKernelProvRegHandleProv
_tlgDefineProvider_annotation__TlgTlgPsProvRegHandleProv
_tlgDefineProvider_annotation__TlgTtmTelemetryHandleProv
_tlgDefineProvider_annotation__TlgTtmTraceHandleProv
_tlgDefineProvider_annotation__TlgUcTraceLoggingProviderProv
_tlgDefineProvider_annotation__TlgVmpTraceHandleProv
_tlgDefineProvider_annotation__TlgVslpIumTelemetryProviderProv
_tlgDefineProvider_annotation__Tlgg_DapiProviderProv
_tlgDefineProvider_annotation__Tlgumpdo_hKernelPdcProv
_tlgEnableCallback
_tlgKeywordOn
_tlgWriteAgg
_tlgWriteEx_EtwWriteEx
_tlgWriteTransfer_EtwWriteTransfer
_tr_flush_block
_tr_stored_block
_ui64toa_s
_ui64tow_s
_ultoa_s
_ultow
_ultow_s
_ungetc_nolock
_ungetwc_nolock
_vsnprintf
_vsnprintf_l
_vsnprintf_s
_vsnwprintf
_vsnwprintf_l
_vsnwprintf_s
_vsprintf_l
_vswprintf
_vswprintf_l
_wchartodigit
_wcsicmp
_wcsistr
_wcslwr
_wcslwr_s
_wcsnicmp
_wcsnset
_wcsnset_s
_wcsrev
_wcsset_s
_wcstoi64
_wcsupr
_wctomb_s_l
_winput_s
_wmakepath_s
_woutput_l
_woutput_s
_wsplitpath_s
_wtoi
_wtol
adapt
adler32_simd_
adler32_z
atoi
atol
bsearch
bsearch_s
compareRequestSize
deflate
deflateReset
deflateResetKeep
ext_ms_win_accel_api_km_l1_1_0_AccelAcquireResourcesAsync
ext_ms_win_accel_api_km_l1_1_0_AccelAcquireResourcesSync
ext_ms_win_accel_api_km_l1_1_0_AccelCloseResource
ext_ms_win_accel_api_km_l1_1_0_AccelDestroyOffloadWorkspace
ext_ms_win_accel_api_km_l1_1_0_AccelEnumAccelerators
ext_ms_win_accel_api_km_l1_1_0_AccelInitializeOffloadWorkspace
ext_ms_win_accel_api_km_l1_1_0_AccelQueryResourceInformation
ext_ms_win_accel_api_km_l1_1_0_AccelShareAddressSpaceWithResource
ext_ms_win_accel_api_km_l1_1_0_AccelStopSharingAddressSpaceWithResource
ext_ms_win_fs_clfs_l1_1_0_ClfsAddLogContainer
ext_ms_win_fs_clfs_l1_1_0_ClfsCloseLogFileObject
ext_ms_win_fs_clfs_l1_1_0_ClfsCreateLogFile
ext_ms_win_fs_clfs_l1_1_0_ClfsCreateMarshallingArea
ext_ms_win_fs_clfs_l1_1_0_ClfsDeleteLogByPointer
ext_ms_win_fs_clfs_l1_1_0_ClfsDeleteMarshallingArea
ext_ms_win_fs_clfs_l1_1_0_ClfsFlushToLsn
ext_ms_win_fs_clfs_l1_1_0_ClfsGetLogFileInformation
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnContainer
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnDifference
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnEqual
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnInvalid
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnLess
ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtDeregisterManagedClient
ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtInstallPolicy
ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtRegisterManagedClient
ext_ms_win_fs_clfs_l1_1_0_ClfsReadLogRecord
ext_ms_win_fs_clfs_l1_1_0_ClfsReadNextLogRecord
ext_ms_win_fs_clfs_l1_1_0_ClfsReadRestartArea
ext_ms_win_fs_clfs_l1_1_0_ClfsReserveAndAppendLog
ext_ms_win_fs_clfs_l1_1_0_ClfsTerminateReadLog
ext_ms_win_fs_clfs_l1_1_0_ClfsWriteRestartArea
ext_ms_win_ntos_clipsp_l1_1_0_ClipSpInitialize
ext_ms_win_ntos_globmerger_l1_1_0_CimfsMountBootVolume
ext_ms_win_ntos_globmerger_l1_1_0_CimfsSetBootInformation
ext_ms_win_ntos_globmerger_l1_1_0_CompositefsSetBootInformation
ext_ms_win_ntos_kcminitcfg_l1_1_0_CmCompleteInitMachineConfig
ext_ms_win_ntos_kcminitcfg_l1_1_0_CmSetInitMachineConfig
ext_ms_win_ntos_ksecurity_l1_1_1_QueryUpdateFileEaAllowedExt
ext_ms_win_ntos_ksr_l1_1_5_KsrClaimPersistedMemory
ext_ms_win_ntos_ksr_l1_1_5_KsrCleanupPageDatabase
ext_ms_win_ntos_ksr_l1_1_5_KsrEnumeratePersistedMemory
ext_ms_win_ntos_ksr_l1_1_5_KsrFreePersistedMemory
ext_ms_win_ntos_ksr_l1_1_5_KsrFreePersistedMemoryBlock
ext_ms_win_ntos_ksr_l1_1_5_KsrGetFirmwareInformation
ext_ms_win_ntos_ksr_l1_1_5_KsrInitPageDatabase
ext_ms_win_ntos_ksr_l1_1_5_KsrInitSystem
ext_ms_win_ntos_ksr_l1_1_5_KsrMdlToMemoryRuns
ext_ms_win_ntos_ksr_l1_1_5_KsrPersistMemoryWithMetadata
ext_ms_win_ntos_ksr_l1_1_5_KsrQueryMetadata
ext_ms_win_ntos_processparameters_l1_1_0_PsDestroyProcessParameterOverrides
ext_ms_win_ntos_processparameters_l1_1_0_PsGetProcessParameterOverrides
ext_ms_win_ntos_runlevels_l1_1_0_ExpInitializeRunLevel0
ext_ms_win_ntos_stateseparation_l1_1_0_ExpInitializeStateSeparationPhase0
ext_ms_win_ntos_stateseparation_l1_1_0_ExpInitializeStateSeparationPhase1
ext_ms_win_ntos_stateseparation_l1_1_0_ExpInitializeStateSeparationPhase2
ext_ms_win_ntos_tm_l1_1_0_NtCommitComplete
ext_ms_win_ntos_tm_l1_1_0_NtCommitEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtCommitTransaction
ext_ms_win_ntos_tm_l1_1_0_NtCreateEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtCreateResourceManager
ext_ms_win_ntos_tm_l1_1_0_NtCreateTransaction
ext_ms_win_ntos_tm_l1_1_0_NtCreateTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtEnumerateTransactionObject
ext_ms_win_ntos_tm_l1_1_0_NtFreezeTransactions
ext_ms_win_ntos_tm_l1_1_0_NtGetNotificationResourceManager
ext_ms_win_ntos_tm_l1_1_0_NtOpenEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtOpenResourceManager
ext_ms_win_ntos_tm_l1_1_0_NtOpenTransaction
ext_ms_win_ntos_tm_l1_1_0_NtOpenTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtPrePrepareComplete
ext_ms_win_ntos_tm_l1_1_0_NtPrePrepareEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtPrepareComplete
ext_ms_win_ntos_tm_l1_1_0_NtPrepareEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtPropagationComplete
ext_ms_win_ntos_tm_l1_1_0_NtPropagationFailed
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationResourceManager
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationTransaction
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtReadOnlyEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtRecoverEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtRecoverResourceManager
ext_ms_win_ntos_tm_l1_1_0_NtRecoverTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtRegisterProtocolAddressInformation
ext_ms_win_ntos_tm_l1_1_0_NtRenameTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtRollbackComplete
ext_ms_win_ntos_tm_l1_1_0_NtRollbackEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtRollbackTransaction
ext_ms_win_ntos_tm_l1_1_0_NtRollforwardTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationEnlistment
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationResourceManager
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationTransaction
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationTransactionManager
ext_ms_win_ntos_tm_l1_1_0_NtSinglePhaseReject
ext_ms_win_ntos_tm_l1_1_0_NtThawTransactions
ext_ms_win_ntos_tm_l1_1_0_TmCancelPropagationRequest
ext_ms_win_ntos_tm_l1_1_0_TmCommitComplete
ext_ms_win_ntos_tm_l1_1_0_TmCommitEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmCommitTransaction
ext_ms_win_ntos_tm_l1_1_0_TmCreateEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmCurrentTransaction
ext_ms_win_ntos_tm_l1_1_0_TmDereferenceEnlistmentKey
ext_ms_win_ntos_tm_l1_1_0_TmEnableCallbacks
ext_ms_win_ntos_tm_l1_1_0_TmEndPropagationRequest
ext_ms_win_ntos_tm_l1_1_0_TmFreezeTransactions
ext_ms_win_ntos_tm_l1_1_0_TmGetTransactionId
ext_ms_win_ntos_tm_l1_1_0_TmInitSystem
ext_ms_win_ntos_tm_l1_1_0_TmInitSystemPhase2
ext_ms_win_ntos_tm_l1_1_0_TmInitializeTransactionManager
ext_ms_win_ntos_tm_l1_1_0_TmIsKTMCommitCoordinator
ext_ms_win_ntos_tm_l1_1_0_TmIsTransactionActive
ext_ms_win_ntos_tm_l1_1_0_TmPrePrepareComplete
ext_ms_win_ntos_tm_l1_1_0_TmPrePrepareEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmPrepareComplete
ext_ms_win_ntos_tm_l1_1_0_TmPrepareEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmPropagationComplete
ext_ms_win_ntos_tm_l1_1_0_TmPropagationFailed
ext_ms_win_ntos_tm_l1_1_0_TmReadOnlyEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmRecoverEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmRecoverResourceManager
ext_ms_win_ntos_tm_l1_1_0_TmRecoverTransactionManager
ext_ms_win_ntos_tm_l1_1_0_TmReferenceEnlistmentKey
ext_ms_win_ntos_tm_l1_1_0_TmRenameTransactionManager
ext_ms_win_ntos_tm_l1_1_0_TmRequestOutcomeEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmRollbackComplete
ext_ms_win_ntos_tm_l1_1_0_TmRollbackEnlistment
ext_ms_win_ntos_tm_l1_1_0_TmRollbackTransaction
ext_ms_win_ntos_tm_l1_1_0_TmSetCurrentTransaction
ext_ms_win_ntos_tm_l1_1_0_TmShutdownSystem
ext_ms_win_ntos_tm_l1_1_0_TmSinglePhaseReject
ext_ms_win_ntos_tm_l1_1_0_TmThawTransactions
ext_ms_win_ntos_trace_l1_1_0_TraceInitSystem
ext_ms_win_ntos_ucode_l1_1_0_ExpMicrocodeInformationLoad
ext_ms_win_ntos_ucode_l1_1_0_ExpMicrocodeInformationUnload
ext_ms_win_ntos_ucode_l1_1_0_ExpMicrocodeInitialization
ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelCancelReport
ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelCloseHandle
ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelCreateReport
ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelInitSystem
ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelOpenDumpFile
ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelSubmitReport
inflate
inflateReset
inflateReset2
inflateResetKeep
inflate_fast_chunk_
inflate_table
isdigit
islower
isprint
isspace
isupper
iswalnum
iswalpha
iswctype
iswdigit
iswspace
isxdigit
longjmp
mbstowcs
mbtowc
memchr
memcmp
memcpy
memcpy_s
memmove
memmove_s
memset
memset$thunk$772440563353939046
pIoQueryBusDescription
pIoQueryDeviceDescription
punycode_decode
punycode_encode
qsort
qsort_s
rand
setjmp
sprintf
sprintf_s
sqrt
sqrtf
srand
sscanf_s
strcat
strcat_s
strchr
strcmp
strcpy
strcpy_s
strlen
strncat
strncat_s
strncmp
strncpy
strncpy_s
strnlen
strrchr
strspn
strstr
strtok_s
strtol
strtolX
strtoul
swprintf
swprintf_s
swscanf_s
tcpxsum
tolower
toupper
towlower
towupper
vDbgPrintEx
vDbgPrintExWithPrefix
vDbgPrintExWithPrefixInternal
vDbgPrintExWithPrefixInternalHelper
vsprintf
vsprintf_s
vswprintf_s
wcscat
wcscat_s
wcschr
wcscmp
wcscpy
wcscpy_s
wcscspn
wcslen
wcsncat
wcsncat_s
wcsncmp
wcsncpy
wcsncpy_s
wcsnlen
wcspbrk
wcsrchr
wcsspn
wcsstr
wcstok_s
wcstol
wcstolX
wcstombs
wcstoul
wcstoxq
wctomb
wctomb_s
wil_RtlStagingConfig_QueryFeatureState
wil_details_BuildFeatureStateCacheFromQueryResults
wil_details_EvaluateFeatureDependencies
wil_details_EvaluateFeatureDependencies_GetCachedFeatureEnabledState
wil_details_EvaluateFeatureDependencies_ReevaluateCachedFeatureEnabledState
wil_details_FeatureDescriptors_SkipPadding
wil_details_FeatureReporting_IncrementOpportunityInCache
wil_details_FeatureReporting_IncrementUsageInCache
wil_details_FeatureReporting_ReportUsageToService
wil_details_FeatureReporting_ReportUsageToServiceDirect
wil_details_FeatureReporting_ReportVariantUsageToService
wil_details_FeatureStateCache_GetCachedFeatureEnabledState
wil_details_FeatureStateCache_ReevaluateCachedFeatureEnabledState
wil_details_FeatureStateCache_ReevaluateCachedVariantState
wil_details_FeatureStateCache_TryEnableDeviceUsageFastPath
wil_details_GetCurrentFeatureEnabledState
wil_details_GetCurrentVariantState
wil_details_IsEnabledFallback
wil_details_MapReportingKind
wil_details_OnFeatureUsageProviderFlushNotification
wil_details_PopulateInitialConfiguredFeatureStatesFromBuffers
wil_details_PopulateInitialConfiguredFeatureStatesWithDefaults
wil_details_RecordCachedUsage
wil_details_RecordFeatureUsageReporting
wil_details_ReevaluateOnFeatureConfigurationChange
wil_details_RegisterFeatureStagingChangeNotification
wil_details_RegisterFeatureUsageProvider
wil_details_ShouldRegisterFeatureStagingChangeNotification
wil_details_UpdateFeatureConfiguredStates
x86BiosAllocateBuffer
x86BiosCall
x86BiosExecuteInterruptShadowed
x86BiosFreeBuffer
x86BiosGetPciBusData
x86BiosInitializeBiosEx
x86BiosInitializeBiosShadowed
x86BiosReadCmosPort
x86BiosReadCmosPortByte
x86BiosReadIoSpace
x86BiosReadMemory
x86BiosReadPciAddressPort
x86BiosReadPciDataPort
x86BiosSetPciBusData
x86BiosTranslateAddress
x86BiosWriteCmosPort
x86BiosWriteCmosPortByte
x86BiosWriteIoSpace
x86BiosWriteMemory
x86BiosWritePciAddressPort
x86BiosWritePciDataPort
xHalAcpiAoacCapable
xHalAcpiGetMultiNode
xHalAcpiLateRestore
xHalAddInterruptRemapping
xHalAllocateGsivForSecondaryInterrupt
xHalAllocateMapRegisters
xHalAllocateMessageTarget
xHalAllocatePmcCounterSet
xHalAllocatePmcCounterSetEx
xHalAssignSlotResources
xHalCaptureLastBranchRecordStack
xHalClearLastBranchRecordStack
xHalClockTimerActivate
xHalClockTimerArm
xHalClockTimerInitialize
xHalClockTimerStop
xHalCollectPmcCounters
xHalConfigureLastBranchRecord
xHalConnectSyntheticInterrupt
xHalConnectThermalInterrupt
xHalConvertAuxiliaryCounterToPerformanceCounter
xHalConvertPerformanceCounterToAuxiliaryCounter
xHalDmaCheckAdapterToken
xHalDmaFreeCrashDumpRegisters
xHalDmaLinkDeviceObjectByToken
xHalDpGetInterruptReplayState
xHalDpMaskLevelTriggeredInterrupts
xHalDpReplaceBegin
xHalDpReplaceControl
xHalDpReplaceEnd
xHalDpReplaceTarget
xHalDpReplayInterrupts
xHalDpUnmaskLevelTriggeredInterrupts
xHalEndMirroring
xHalEndOfBoot
xHalEnumerateEnvironmentVariablesWithFilter
xHalEnumerateUnmaskedInterrupts
xHalFlushAndInvalidatePageExternalCache
xHalFlushExternalCache
xHalFlushIoBuffersExternalCache
xHalFlushIoRectangleExternalCache
xHalFreeMessageTarget
xHalFreePmcCounterSet
xHalGetClockConfiguration
xHalGetInterruptTranslator
xHalGetInterruptVector
xHalGetIommuInterface
xHalGetIommuInterfaceEx
xHalGetLastBranchInformation
xHalGetProcessorId
xHalGetProcessorStats
xHalGetSoftRebootDatabase
xHalGetVectorInput
xHalHaltSystem
xHalHandlerForBus
xHalInitPnpDriver
xHalInitPowerManagement
xHalInterruptGetHighestPriorityInterrupt
xHalInterruptSetDestination
xHalInterruptVectorDataToGsiv
xHalInvokeHvc
xHalInvokeSmc
xHalIommuBeginDeviceReset
xHalIommuBlockDevice
xHalIommuCreateAtsDevice
xHalIommuDeleteAtsDevice
xHalIommuDereferenceAsid
xHalIommuDevicePowerChange
xHalIommuDisableDevicePasid
xHalIommuDmaRemappingCapable
xHalIommuEnableDevicePasid
xHalIommuFaultRoutine
xHalIommuFinalizeDeviceReset
xHalIommuFlushAllPasid
xHalIommuFlushTb
xHalIommuFreeLibraryContext
xHalIommuGetAtsSettings
xHalIommuGetConfiguration
xHalIommuGetDomainTransitionSupport
xHalIommuGetLibraryContext
xHalIommuMapDevice
xHalIommuProcessPageRequestQueue
xHalIommuReferenceAsid
xHalIommuRegisterDispatchTable
xHalIommuServicePageFault
xHalIommuSetAddressSpace
xHalIommuSupportEnabled
xHalIommuUnblockDevice
xHalIommuUnmapDevice
xHalIsEFIRuntimeActive
xHalLoadMicrocode
xHalLocateHiberRanges
xHalMaskInterrupt
xHalMirrorPhysicalMemory
xHalMirrorVerify
xHalNotifyIommuDomainPolicyChange
xHalNotifyProcessorFreeze
xHalPciEarlyRestore
xHalPciGetDeviceLocationFromPhysicalAddress
xHalPciMarkHiberPhase
xHalPciMultiStageResumeCapable
xHalPostMicrocodeUpdate
xHalPowerEarlyRestore
xHalPowerSetRebootHandler
xHalPrepareForBugcheck
xHalPrepareProcessorForIdle
xHalPreprocessNmi
xHalProcessorFreeze
xHalProcessorHalt
xHalProcessorOff
xHalProcessorOn
xHalQueryAuxiliaryCounterFrequency
xHalQueryBusSlots
xHalQueryCapsuleCapabilities
xHalQueryIoPortAccessSupported
xHalQueryProcessorRestartEntryPoint
xHalQuerySystemInformation
xHalQueryWakeTime
xHalReadWheaPhysicalMemory
xHalReferenceHandler
xHalRegisterBusHandler
xHalRegisterLogRoutine
xHalReleasePmuAccessRequest
xHalRemoveInterruptRemapping
xHalReportIdleStateUsage
xHalRequestGenericErrorRecovery
xHalRequestInterrupt
xHalRequestPmuAccess
xHalRestoreHvEnlightenment
xHalResumeLastBranchRecord
xHalResumeProcessorFromIdle
xHalSaveAndDisableHvEnlightenment
xHalSecondaryInterruptQueryPrimaryInformation
xHalSetSystemInformation
xHalSetWakeAlarm
xHalStartLastBranchRecord
xHalStartMirroring
xHalStartProfileInterruptEx
xHalStopLastBranchRecord
xHalStopLegacyUsbInterrupts
xHalTimerGetReferencePage
xHalTimerOnlyClockInterruptPending
xHalTimerQueryAndResetRtcErrors
xHalTimerQueryCycleCounter
xHalTimerQueryHostPerformanceCounter
xHalTimerQueryRtcErrors
xHalTimerWatchdogGeneratedLastReset
xHalTimerWatchdogQueryDueTime
xHalTimerWatchdogResetCountdown
xHalTimerWatchdogStart
xHalTimerWatchdogStop
xHalTimerWatchdogTriggerSystemReset
xHalTopologyQueryProcessorCacheInformation
xHalTopologyQueryProcessorRelationships
xHalTranslateBusAddress
xHalTscSynchronization
xHalUnloadMicrocode
xHalUnmaskInterrupt
xHalUpdateCapsule
xHalVectorToIDTEntry
xHalVectorToIDTEntryEx
xHalWheaInitProcessorGenericSection
xHalWriteWheaPhysicalMemory
xHalpIsInterruptTypeSecondary
xKdCheckPowerButton
xKdEnumerateDebuggingDevices
xKdGetAcpiTablePhase0
xKdMapPhysicalMemory64
xKdReleaseIntegratedDeviceForDebugging
xKdReleasePciDeviceForDebugging
xKdSetupIntegratedDeviceForDebugging
xKdSetupPciDeviceForDebugging
xKdUnmapVirtualAddress
xKdWatchdogDelayExpiration
zRtlAvoidAlloccalloc
zRtlAvoidAllocfree
*/
