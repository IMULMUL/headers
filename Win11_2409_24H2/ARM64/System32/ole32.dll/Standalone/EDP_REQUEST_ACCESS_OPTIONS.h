enum EDP_REQUEST_ACCESS_OVERRIDE
{
  EDP_REQUEST_ACCESS_OVERRIDE_NONE = 0,
  EDP_REQUEST_ACCESS_OVERRIDE_SHOW_BLOCK_DIALOG = 1,
  EDP_REQUEST_ACCESS_OVERRIDE_SHOW_OVERRIDE_DIALOG = 2,
  EDP_REQUEST_ACCESS_OVERRIDE_DISABLE_OVERRIDE_DIALOG = 3,
  EDP_REQUEST_ACCESS_OVERRIDE_NO_DIALOG = 4,
};

enum EDP_TELEMETRY_CALLER
{
  EDP_TELEMETRY_CALLER_COPYPASTE = 0,
  EDP_TELEMETRY_CALLER_SHARE = 1,
  EDP_TELEMETRY_CALLER_OLEDRAGDROP = 2,
  EDP_TELEMETRY_CALLER_WINRTDRAGDROP = 3,
  EDP_TELEMETRY_CALLER_WINRTSTATIC = 4,
  EDP_TELEMETRY_CALLER_OTHER = 5,
};

enum EDP_SOURCE_ENTERPRISEID_OPTION
{
  EDP_SOURCE_ENTERPRISEID_OPTION_USE_INPUT = 0,
  EDP_SOURCE_ENTERPRISEID_OPTION_EVALUATE_DATA_FILE_PATHS = 1,
};

struct EDP_REQUEST_ACCESS_OPTIONS
{
  /* 0x0000 */ unsigned long processIdForClipboardConsentCache;
  /* 0x0008 */ const wchar_t* dialogBlockedBodyText;
  /* 0x0010 */ const wchar_t* dialogOverrideBodyText;
  /* 0x0018 */ enum EDP_REQUEST_ACCESS_OVERRIDE overrideOption;
  /* 0x001c */ enum EDP_TELEMETRY_CALLER telemetryCaller;
  /* 0x0020 */ enum EDP_SOURCE_ENTERPRISEID_OPTION sourceEnterpriseIdOption;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

